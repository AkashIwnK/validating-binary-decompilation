; ModuleID = 'test.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%struct.State = type {%struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, i64, i64, i64, %struct.GPR}

%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.float32v8_t = type { [8 x float] }
%struct.int32v8_t = type { [8 x i32] }
%struct.uint16v16_t = type { [16 x i16] }
%struct.uint8v32_t = type { [32 x i8] }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }
%struct.anon.2 = type { i8, i8 }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }

define i32 @my.ctpop.i32(i32 %x) {
entry:
  %and = and i32 %x, 1
  %shr123 = lshr i32 %x, 1
  %and1 = and i32 %shr123, 1
  %shr2124 = lshr i32 %x, 2
  %and3 = and i32 %shr2124, 1
  %shr5125 = lshr i32 %x, 3
  %and6 = and i32 %shr5125, 1
  %shr8126 = lshr i32 %x, 4
  %and9 = and i32 %shr8126, 1
  %shr11127 = lshr i32 %x, 5
  %and12 = and i32 %shr11127, 1
  %shr14128 = lshr i32 %x, 6
  %and15 = and i32 %shr14128, 1
  %shr17129 = lshr i32 %x, 7
  %and18 = and i32 %shr17129, 1
  %shr20130 = lshr i32 %x, 8
  %and21 = and i32 %shr20130, 1
  %shr23131 = lshr i32 %x, 9
  %and24 = and i32 %shr23131, 1
  %shr26132 = lshr i32 %x, 10
  %and27 = and i32 %shr26132, 1
  %shr29133 = lshr i32 %x, 11
  %and30 = and i32 %shr29133, 1
  %shr32134 = lshr i32 %x, 12
  %and33 = and i32 %shr32134, 1
  %shr35135 = lshr i32 %x, 13
  %and36 = and i32 %shr35135, 1
  %shr38136 = lshr i32 %x, 14
  %and39 = and i32 %shr38136, 1
  %shr41137 = lshr i32 %x, 15
  %and42 = and i32 %shr41137, 1
  %shr44138 = lshr i32 %x, 16
  %and45 = and i32 %shr44138, 1
  %shr47139 = lshr i32 %x, 17
  %and48 = and i32 %shr47139, 1
  %shr50140 = lshr i32 %x, 18
  %and51 = and i32 %shr50140, 1
  %shr53141 = lshr i32 %x, 19
  %and54 = and i32 %shr53141, 1
  %shr56142 = lshr i32 %x, 20
  %and57 = and i32 %shr56142, 1
  %shr59143 = lshr i32 %x, 21
  %and60 = and i32 %shr59143, 1
  %shr62144 = lshr i32 %x, 22
  %and63 = and i32 %shr62144, 1
  %shr65145 = lshr i32 %x, 23
  %and66 = and i32 %shr65145, 1
  %shr68146 = lshr i32 %x, 24
  %and69 = and i32 %shr68146, 1
  %shr71147 = lshr i32 %x, 25
  %and72 = and i32 %shr71147, 1
  %shr74148 = lshr i32 %x, 26
  %and75 = and i32 %shr74148, 1
  %shr77149 = lshr i32 %x, 27
  %and78 = and i32 %shr77149, 1
  %shr80150 = lshr i32 %x, 28
  %and81 = and i32 %shr80150, 1
  %shr83151 = lshr i32 %x, 29
  %and84 = and i32 %shr83151, 1
  %shr86152 = lshr i32 %x, 30
  %and87 = and i32 %shr86152, 1
  %shr89153 = lshr i32 %x, 31
  %add = add i32 %shr89153, %and
  %add4 = add i32 %add, %and1
  %add7 = add i32 %add4, %and3
  %add10 = add i32 %add7, %and6
  %add13 = add i32 %add10, %and9
  %add16 = add i32 %add13, %and12
  %add19 = add i32 %add16, %and15
  %add22 = add i32 %add19, %and18
  %add25 = add i32 %add22, %and21
  %add28 = add i32 %add25, %and24
  %add31 = add i32 %add28, %and27
  %add34 = add i32 %add31, %and30
  %add37 = add i32 %add34, %and33
  %add40 = add i32 %add37, %and36
  %add43 = add i32 %add40, %and39
  %add46 = add i32 %add43, %and42
  %add49 = add i32 %add46, %and45
  %add52 = add i32 %add49, %and48
  %add55 = add i32 %add52, %and51
  %add58 = add i32 %add55, %and54
  %add61 = add i32 %add58, %and57
  %add64 = add i32 %add61, %and60
  %add67 = add i32 %add64, %and63
  %add70 = add i32 %add67, %and66
  %add73 = add i32 %add70, %and69
  %add76 = add i32 %add73, %and72
  %add79 = add i32 %add76, %and75
  %add82 = add i32 %add79, %and78
  %add85 = add i32 %add82, %and81
  %add88 = add i32 %add85, %and84
  %add91 = add i32 %add88, %and87
  ret i32 %add91
}

define i32 @sub_vpmovmskb_r64_ymm(%struct.State*, i64, i64) {
block_530:
  %3 = alloca %struct.uint8v32_t, align 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 3
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %RBX = bitcast %union.anon* %9 to i64*
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %11 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %10, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %11 to %"class.std::bitset"*
  %12 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 0
  call void @my.lifetime.start(i64 32, i8* nonnull %15) #14
  call void @my.memcpy.p0i8.p0i8.i64(i8* nonnull %15, i8* %12, i64 32, i32 1, i1 false) #14
  %16 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 31
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %17, 7
  %19 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 30
  %20 = load i8, i8* %19, align 1
  %21 = shl   i8 %18, 1
  %22 = lshr i8 %20, 7
  %23 = or i8 %22, %21
  %24 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 29
  %25 = load i8, i8* %24, align 1
  %26 = shl   i8 %23, 1
  %27 = lshr i8 %25, 7
  %28 = or i8 %27, %26
  %29 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 28
  %30 = load i8, i8* %29, align 1
  %31 = shl   i8 %28, 1
  %32 = lshr i8 %30, 7
  %33 = or i8 %32, %31
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 27
  %36 = load i8, i8* %35, align 1
  %37 = shl   i64 %34, 1
  %38 = lshr i8 %36, 7
  %39 = zext i8 %38 to i64
  %40 = or i64 %39, %37
  %41 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 26
  %42 = load i8, i8* %41, align 1
  %43 = shl   i64 %40, 1
  %44 = lshr i8 %42, 7
  %45 = zext i8 %44 to i64
  %46 = or i64 %45, %43
  %47 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 25
  %48 = load i8, i8* %47, align 1
  %49 = shl   i64 %46, 1
  %50 = lshr i8 %48, 7
  %51 = zext i8 %50 to i64
  %52 = or i64 %51, %49
  %53 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 24
  %54 = load i8, i8* %53, align 1
  %55 = shl i64 %52, 1
  %56 = lshr i8 %54, 7
  %57 = zext i8 %56 to i64
  %58 = or i64 %57, %55
  %59 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 23
  %60 = load i8, i8* %59, align 1
  %61 = shl i64 %58, 1
  %62 = lshr i8 %60, 7
  %63 = zext i8 %62 to i64
  %64 = or i64 %63, %61
  %65 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 22
  %66 = load i8, i8* %65, align 1
  %67 = shl i64 %64, 1
  %68 = lshr i8 %66, 7
  %69 = zext i8 %68 to i64
  %70 = or i64 %69, %67
  %71 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 21
  %72 = load i8, i8* %71, align 1
  %73 = shl i64 %70, 1
  %74 = lshr i8 %72, 7
  %75 = zext i8 %74 to i64
  %76 = or i64 %75, %73
  %77 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 20
  %78 = load i8, i8* %77, align 1
  %79 = shl i64 %76, 1
  %80 = lshr i8 %78, 7
  %81 = zext i8 %80 to i64
  %82 = or i64 %81, %79
  %83 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 19
  %84 = load i8, i8* %83, align 1
  %85 = shl i64 %82, 1
  %86 = lshr i8 %84, 7
  %87 = zext i8 %86 to i64
  %88 = or i64 %87, %85
  %89 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 18
  %90 = load i8, i8* %89, align 1
  %91 = shl i64 %88, 1
  %92 = lshr i8 %90, 7
  %93 = zext i8 %92 to i64
  %94 = or i64 %93, %91
  %95 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 17
  %96 = load i8, i8* %95, align 1
  %97 = shl i64 %94, 1
  %98 = lshr i8 %96, 7
  %99 = zext i8 %98 to i64
  %100 = or i64 %99, %97
  %101 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 16
  %102 = load i8, i8* %101, align 1
  %103 = shl i64 %100, 1
  %104 = lshr i8 %102, 7
  %105 = zext i8 %104 to i64
  %106 = or i64 %105, %103
  %107 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 15
  %108 = load i8, i8* %107, align 1
  %109 = shl i64 %106, 1
  %110 = lshr i8 %108, 7
  %111 = zext i8 %110 to i64
  %112 = or i64 %111, %109
  %113 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 14
  %114 = load i8, i8* %113, align 1
  %115 = shl i64 %112, 1
  %116 = lshr i8 %114, 7
  %117 = zext i8 %116 to i64
  %118 = or i64 %117, %115
  %119 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 13
  %120 = load i8, i8* %119, align 1
  %121 = shl i64 %118, 1
  %122 = lshr i8 %120, 7
  %123 = zext i8 %122 to i64
  %124 = or i64 %123, %121
  %125 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 1
  %127 = shl i64 %124, 1
  %128 = lshr i8 %126, 7
  %129 = zext i8 %128 to i64
  %130 = or i64 %129, %127
  %131 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 11
  %132 = load i8, i8* %131, align 1
  %133 = shl i64 %130, 1
  %134 = lshr i8 %132, 7
  %135 = zext i8 %134 to i64
  %136 = or i64 %135, %133
  %137 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 10
  %138 = load i8, i8* %137, align 1
  %139 = shl i64 %136, 1
  %140 = lshr i8 %138, 7
  %141 = zext i8 %140 to i64
  %142 = or i64 %141, %139
  %143 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 9
  %144 = load i8, i8* %143, align 1
  %145 = shl i64 %142, 1
  %146 = lshr i8 %144, 7
  %147 = zext i8 %146 to i64
  %148 = or i64 %147, %145
  %149 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 8
  %150 = load i8, i8* %149, align 1
  %151 = shl i64 %148, 1
  %152 = lshr i8 %150, 7
  %153 = zext i8 %152 to i64
  %154 = or i64 %153, %151
  %155 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 7
  %156 = load i8, i8* %155, align 1
  %157 = shl i64 %154, 1
  %158 = lshr i8 %156, 7
  %159 = zext i8 %158 to i64
  %160 = or i64 %159, %157
  %161 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 6
  %162 = load i8, i8* %161, align 1
  %163 = shl i64 %160, 1
  %164 = lshr i8 %162, 7
  %165 = zext i8 %164 to i64
  %166 = or i64 %165, %163
  %167 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 5
  %168 = load i8, i8* %167, align 1
  %169 = shl i64 %166, 1
  %170 = lshr i8 %168, 7
  %171 = zext i8 %170 to i64
  %172 = or i64 %171, %169
  %173 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 4
  %174 = load i8, i8* %173, align 1
  %175 = shl i64 %172, 1
  %176 = lshr i8 %174, 7
  %177 = zext i8 %176 to i64
  %178 = or i64 %177, %175
  %179 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 3
  %180 = load i8, i8* %179, align 1
  %181 = shl i64 %178, 1
  %182 = lshr i8 %180, 7
  %183 = zext i8 %182 to i64
  %184 = or i64 %183, %181
  %185 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 2
  %186 = load i8, i8* %185, align 1
  %187 = shl i64 %184, 1
  %188 = lshr i8 %186, 7
  %189 = zext i8 %188 to i64
  %190 = or i64 %189, %187
  %191 = getelementptr inbounds %struct.uint8v32_t, %struct.uint8v32_t* %3, i64 0, i32 0, i64 1
  %192 = load i8, i8* %191, align 1
  %193 = shl i64 %190, 1
  %194 = lshr i8 %192, 7
  %195 = zext i8 %194 to i64
  %196 = or i64 %195, %193
  %197 = load i8, i8* %15, align 1
  %198 = shl i64 %196, 1
  %199 = lshr i8 %197, 7
  %200 = zext i8 %199 to i64
  %201 = and i64 %198, 4294967294
  %202 = or i64 %200, %201
  store i64 %202, i64* %RBX, align 8
  call void @my.lifetime.end(i64 32, i8* nonnull %15) #14
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 1
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  ret i32 0
}

define i32 @main() {
entry:
  %state = alloca %struct.State
  %addr1 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 1, i32 0, i32 0
  %addr2 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 3, i32 0, i32 0
  %addr3 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 5, i32 0, i32 0
  %addr4 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 7, i32 0, i32 0
  %addr5 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 9, i32 0, i32 0
  %addr6 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 11, i32 0, i32 0
  %addr7 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 13, i32 0, i32 0
  %addr8 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 15, i32 0, i32 0
  %addr9 = getelementptr inbounds %struct.State, %struct.State* %state, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 100, i64* %addr1, align 8
  store i64 200, i64* %addr2, align 8
  store i64 300, i64* %addr3, align 8
  store i64 400, i64* %addr4, align 8
  store i64 500, i64* %addr5, align 8
  store i64 600, i64* %addr6, align 8
  store i64 700, i64* %addr7, align 8
  store i64 800, i64* %addr8, align 8
  store i64 900, i64* %addr9, align 8
  %call = call i32 @sub_vpmovmskb_r64_ymm(%struct.State* %state, i64 0, i64 0)
  ret i32 0
}