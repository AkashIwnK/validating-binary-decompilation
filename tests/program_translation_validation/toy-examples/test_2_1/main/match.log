Writing '/tmp/tmprjat4xm3.dot'...
Writing '/tmp/tmprjat4xm3.dot':Done

Reading LLVM: /tmp/tmpy600knq7-query.ll
Extracting function [main] from /tmp/tmpy600knq7-query.ll
Dot file generated!
Writing '/tmp/tmp4285ayki.dot'...
Writing '/tmp/tmp4285ayki.dot':Done

Reading LLVM: /tmp/tmpheg3vd1l-target.ll
Extracting function [main] from /tmp/tmpheg3vd1l-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
- 13 %RBX.i46 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
- 14 %12 = load i64, i64* %RBX.i46, align 8
- 15 %13 = add i64 %10, 4
- 16 store i64 %13, i64* %3, align 8
- 17 %14 = add i64 %7, -16
- 18 %15 = inttoptr i64 %14 to i64*
- 19 store i64 %12, i64* %15, align 8
- 20 %16 = load i64, i64* %3, align 8
- 21 %17 = add i64 %7, -56
- 22 store i64 %17, i64* %6, align 8
- 23 %18 = icmp ult i64 %14, 40
- 24 %19 = zext i1 %18 to i8
- 25 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 26 store i8 %19, i8* %20, align 1
- 27 %21 = trunc i64 %17 to i32
- 28 %22 = and i32 %21, 255
- 29 %23 = tail call i32 @llvm.ctpop.i32(i32 %22)
- 30 %24 = trunc i32 %23 to i8
- 31 %25 = and i8 %24, 1
- 32 %26 = xor i8 %25, 1
- 33 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 34 store i8 %26, i8* %27, align 1
- 35 %28 = xor i64 %14, %17
- 36 %29 = lshr i64 %28, 4
- 37 %30 = trunc i64 %29 to i8
- 38 %31 = and i8 %30, 1
- 39 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 40 store i8 %31, i8* %32, align 1
- 41 %33 = icmp eq i64 %17, 0
- 42 %34 = zext i1 %33 to i8
- 43 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 44 store i8 %34, i8* %35, align 1
- 45 %36 = lshr i64 %17, 63
- 46 %37 = trunc i64 %36 to i8
- 47 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 48 store i8 %37, i8* %38, align 1
- 49 %39 = lshr i64 %14, 63
- 50 %40 = xor i64 %36, %39
- 51 %41 = add nuw nsw i64 %40, %39
- 52 %42 = icmp eq i64 %41, 2
- 53 %43 = zext i1 %42 to i8
- 54 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 55 store i8 %43, i8* %44, align 1
- 56 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 57 %RAX.i = getelementptr inbounds %union.anon, %union.anon* %45, i64 0, i32 0
- 58 store i64 100, i64* %RAX.i, align 8
- 59 %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 60 %RCX.i41 = getelementptr inbounds %union.anon, %union.anon* %46, i64 0, i32 0
- 61 store i64 200, i64* %RCX.i41, align 8
- 62 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 63 store i64 300, i64* %RDX.i, align 8
- 64 %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 65 %R8D.i38 = bitcast %union.anon* %47 to i32*
- 66 %48 = getelementptr inbounds %union.anon, %union.anon* %47, i64 0, i32 0
- 67 store i64 400, i64* %48, align 8
- 68 %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
- 69 %R9D.i36 = bitcast %union.anon* %49 to i32*
- 70 %50 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
- 71 store i64 500, i64* %50, align 8
- 72 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
- 73 %R10D.i34 = bitcast %union.anon* %51 to i32*
- 74 %52 = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
- 75 store i64 600, i64* %52, align 8
- 76 %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
- 77 %R11D.i32 = bitcast %union.anon* %53 to i32*
- 78 %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
- 79 store i64 10, i64* %54, align 8
- 80 store i64 20, i64* %RBX.i46, align 8
- 81 %55 = load i64, i64* %RBP.i, align 8
- 82 %56 = add i64 %55, -12
- 83 %57 = add i64 %16, 55
- 84 store i64 %57, i64* %3, align 8
- 85 %58 = inttoptr i64 %56 to i32*
- 86 store i32 0, i32* %58, align 4
- 87 %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 88 %EDI.i = bitcast %union.anon* %59 to i32*
- 89 %60 = load i64, i64* %RBP.i, align 8
- 90 %61 = add i64 %60, -16
- 91 %62 = load i32, i32* %EDI.i, align 4
- 92 %63 = load i64, i64* %3, align 8
- 93 %64 = add i64 %63, 3
- 94 store i64 %64, i64* %3, align 8
- 95 %65 = inttoptr i64 %61 to i32*
- 96 store i32 %62, i32* %65, align 4
- 97 %RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 98 %66 = load i64, i64* %RBP.i, align 8
- 99 %67 = add i64 %66, -24
- 100 %68 = load i64, i64* %RSI.i23, align 8
- 101 %69 = load i64, i64* %3, align 8
- 102 %70 = add i64 %69, 4
- 103 store i64 %70, i64* %3, align 8
- 104 %71 = inttoptr i64 %67 to i64*
- 105 store i64 %68, i64* %71, align 8
- 106 %EAX.i = bitcast %union.anon* %45 to i32*
- 107 %RDI.i = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0
- 108 %72 = load i32, i32* %EAX.i, align 4
- 109 %73 = zext i32 %72 to i64
- 110 %74 = load i64, i64* %3, align 8
- 111 store i64 %73, i64* %RDI.i, align 8
- 112 %ECX.i = bitcast %union.anon* %46 to i32*
- 113 %75 = load i32, i32* %ECX.i, align 4
- 114 %76 = zext i32 %75 to i64
- 115 store i64 %76, i64* %RSI.i23, align 8
- 116 %77 = load i32, i32* %R8D.i38, align 4
- 117 %78 = zext i32 %77 to i64
- 118 store i64 %78, i64* %RCX.i41, align 8
- 119 %79 = load i32, i32* %R9D.i36, align 4
- 120 %80 = zext i32 %79 to i64
- 121 store i64 %80, i64* %48, align 8
- 122 %81 = load i32, i32* %R10D.i34, align 4
- 123 %82 = zext i32 %81 to i64
- 124 store i64 %82, i64* %50, align 8
- 125 %83 = bitcast i64* %6 to i32**
- 126 %84 = load i32*, i32** %83, align 8
- 127 %85 = add i64 %74, 20
- 128 store i64 %85, i64* %3, align 8
- 129 store i32 10, i32* %84, align 4
- 130 %86 = load i64, i64* %6, align 8
- 131 %87 = add i64 %86, 8
- 132 %88 = load i64, i64* %3, align 8
- 133 %89 = add i64 %88, 8
- 134 store i64 %89, i64* %3, align 8
- 135 %90 = inttoptr i64 %87 to i32*
- 136 store i32 20, i32* %90, align 4
- 137 %EBX.i = bitcast %union.anon* %11 to i32*
- 138 %91 = load i64, i64* %RBP.i, align 8
- 139 %92 = add i64 %91, -28
- 140 %93 = load i32, i32* %EBX.i, align 4
- 141 %94 = load i64, i64* %3, align 8
- 142 %95 = add i64 %94, 3
- 143 store i64 %95, i64* %3, align 8
- 144 %96 = inttoptr i64 %92 to i32*
- 145 store i32 %93, i32* %96, align 4
- 146 %97 = load i64, i64* %RBP.i, align 8
- 147 %98 = add i64 %97, -32
- 148 %99 = load i32, i32* %R11D.i32, align 4
- 149 %100 = load i64, i64* %3, align 8
- 150 %101 = add i64 %100, 4
- 151 store i64 %101, i64* %3, align 8
- 152 %102 = inttoptr i64 %98 to i32*
- 153 store i32 %99, i32* %102, align 4
- 154 %103 = load i64, i64* %3, align 8
- 155 %104 = add i64 %103, -198
- 156 %105 = add i64 %103, 5
- 157 %106 = load i64, i64* %6, align 8
- 158 %107 = add i64 %106, -8
- 159 %108 = inttoptr i64 %107 to i64*
- 160 store i64 %105, i64* %108, align 8
- 161 store i64 %107, i64* %6, align 8
- 162 store i64 %104, i64* %3, align 8
- 163 %call2_4005e6 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %104, %struct.Memory* %2)
- 164 %109 = load i64, i64* %6, align 8
- 165 %110 = load i64, i64* %3, align 8
- 166 %111 = add i64 %109, 40
- 167 store i64 %111, i64* %6, align 8
- 168 %112 = icmp ugt i64 %109, -41
- 169 %113 = zext i1 %112 to i8
- 170 store i8 %113, i8* %20, align 1
- 171 %114 = trunc i64 %111 to i32
- 172 %115 = and i32 %114, 255
- 173 %116 = tail call i32 @llvm.ctpop.i32(i32 %115)
- 174 %117 = trunc i32 %116 to i8
- 175 %118 = and i8 %117, 1
- 176 %119 = xor i8 %118, 1
- 177 store i8 %119, i8* %27, align 1
- 178 %120 = xor i64 %111, %109
- 179 %121 = lshr i64 %120, 4
- 180 %122 = trunc i64 %121 to i8
- 181 %123 = and i8 %122, 1
- 182 store i8 %123, i8* %32, align 1
- 183 %124 = icmp eq i64 %111, 0
- 184 %125 = zext i1 %124 to i8
- 185 store i8 %125, i8* %35, align 1
- 186 %126 = lshr i64 %111, 63
- 187 %127 = trunc i64 %126 to i8
- 188 store i8 %127, i8* %38, align 1
- 189 %128 = lshr i64 %109, 63
- 190 %129 = xor i64 %126, %128
- 191 %130 = add nuw nsw i64 %129, %126
- 192 %131 = icmp eq i64 %130, 2
- 193 %132 = zext i1 %131 to i8
- 194 store i8 %132, i8* %44, align 1
- 195 %133 = add i64 %110, 5
- 196 store i64 %133, i64* %3, align 8
- 197 %134 = add i64 %109, 48
- 198 %135 = inttoptr i64 %111 to i64*
- 199 %136 = load i64, i64* %135, align 8
- 200 store i64 %136, i64* %RBX.i46, align 8
- 201 store i64 %134, i64* %6, align 8
- 202 %137 = add i64 %110, 6
- 203 store i64 %137, i64* %3, align 8
- 204 %138 = add i64 %109, 56
- 205 %139 = inttoptr i64 %134 to i64*
- 206 %140 = load i64, i64* %139, align 8
- 207 store i64 %140, i64* %RBP.i, align 8
- 208 store i64 %138, i64* %6, align 8
- 209 %141 = add i64 %110, 7
- 210 store i64 %141, i64* %3, align 8
- 211 %142 = inttoptr i64 %138 to i64*
- 212 %143 = load i64, i64* %142, align 8
- 213 store i64 %143, i64* %3, align 8
- 214 %144 = add i64 %109, 64
- 215 store i64 %144, i64* %6, align 8
- 216 ret %struct.Memory* %call2_4005e6
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3902c758c8>, {0: {0}, 1: {24}, 2: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 3: {26}, 4: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 5: {23}, 6: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 7: {29, 158}, 8: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 9: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 10: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 11: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 12: {3}, 13: {79, 17, 18, 19, 81, 83, 22, 85}, 14: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 15: {106, 35, 150}, 16: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 17: {37, 95}, 18: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 19: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 20: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 21: {41}, 22: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 23: {43}, 24: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 25: {45}, 26: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 27: {66, 171, 174, 47, 50, 180, 57, 187}, 28: {48, 172}, 29: {49, 163, 173}, 30: {66, 171, 174, 47, 50, 180, 57, 187}, 31: {58, 51, 181, 175}, 32: {176, 52}, 33: {53}, 34: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 35: {178, 190, 70, 55}, 36: {56, 179}, 37: {66, 171, 174, 47, 50, 180, 57, 187}, 38: {58, 51, 181, 175}, 39: {59}, 40: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 41: {61, 183}, 42: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 43: {63}, 44: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 45: {65, 186, 69, 189}, 46: {66, 171, 174, 47, 50, 180, 57, 187}, 47: {67}, 48: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 49: {65, 186, 69, 189}, 50: {178, 190, 70, 55}, 51: {191, 71}, 52: {72, 192}, 53: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 54: {74}, 55: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 56: {1}, 57: {79, 17, 18, 19, 81, 83, 22, 85}, 58: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 59: {5}, 60: {79, 17, 18, 19, 81, 83, 22, 85}, 61: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 62: {20}, 63: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 64: {9}, 65: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 66: {79, 17, 18, 19, 81, 83, 22, 85}, 67: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 68: {11}, 69: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 70: {79, 17, 18, 19, 81, 83, 22, 85}, 71: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 72: {13}, 73: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 74: {79, 17, 18, 19, 81, 83, 22, 85}, 75: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 76: {15}, 77: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 78: {79, 17, 18, 19, 81, 83, 22, 85}, 79: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 80: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 81: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 82: {89}, 83: {90}, 84: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 85: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 86: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 87: {7}, 88: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 89: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 90: {37, 95}, 91: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 92: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 93: {98, 142}, 94: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 95: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 96: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 97: {21}, 98: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 99: {103}, 100: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 101: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 102: {106, 35, 150}, 103: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 104: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 105: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 106: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 107: {79, 17, 18, 19, 81, 83, 22, 85}, 108: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 109: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 110: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 111: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 112: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 113: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 114: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 115: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 116: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 117: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 118: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 119: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 120: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 121: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 122: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 123: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 124: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 125: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 126: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 127: {128}, 128: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 129: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 130: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 131: {132, 134}, 132: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 133: {132, 134}, 134: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 135: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 136: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 137: {2, 4, 6, 8, 10, 12, 14, 16, 126}, 138: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 139: {139}, 140: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 141: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 142: {98, 142}, 143: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 144: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 145: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 146: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 147: {147}, 148: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 149: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 150: {106, 35, 150}, 151: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 152: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 153: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 154: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 155: {155}, 156: {195, 156}, 157: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 158: {29, 158}, 159: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 160: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 161: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 162: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 163: {49, 163, 173}, 164: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 165: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 166: {166}, 167: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 168: {168}, 169: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 170: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 171: {66, 171, 174, 47, 50, 180, 57, 187}, 172: {48, 172}, 173: {49, 163, 173}, 174: {66, 171, 174, 47, 50, 180, 57, 187}, 175: {58, 51, 181, 175}, 176: {176, 52}, 177: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 178: {178, 190, 70, 55}, 179: {56, 179}, 180: {66, 171, 174, 47, 50, 180, 57, 187}, 181: {58, 51, 181, 175}, 182: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 183: {61, 183}, 184: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 185: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 186: {65, 186, 69, 189}, 187: {66, 171, 174, 47, 50, 180, 57, 187}, 188: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 189: {65, 186, 69, 189}, 190: {178, 190, 70, 55}, 191: {191, 71}, 192: {72, 192}, 193: {193, 73, 169, 44, 111, 115, 118, 184, 121, 124, 62}, 194: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 195: {195, 156}, 196: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 197: {197}, 198: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 199: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 200: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 201: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 202: {202}, 203: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 204: {204}, 205: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 206: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 207: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 208: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 209: {209}, 210: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 211: {100, 38, 198, 136, 108, 205, 144, 211, 152, 92, 30, 159}, 212: {131, 133, 138, 140, 141, 146, 148, 149, 25, 154, 28, 157, 32, 34, 164, 165, 40, 199, 206, 212, 88, 94, 96, 97, 102, 104, 105, 110, 112, 114, 117, 120, 123, 127}, 213: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 214: {214}, 215: {129, 130, 135, 137, 143, 145, 151, 153, 27, 31, 160, 33, 161, 162, 36, 39, 167, 42, 170, 46, 177, 54, 182, 185, 60, 188, 64, 194, 68, 196, 200, 201, 75, 76, 77, 78, 203, 80, 207, 82, 208, 84, 210, 86, 87, 213, 215, 91, 93, 99, 101, 107, 109, 113, 116, 119, 122, 125}, 216: {216}})
Equivalent! frozenset({32, 105, 149}) {10, 101, 149}
Equivalent! frozenset({106, 35, 150}) {150, 102, 15}
Equivalent! frozenset({107, 36, 151}) {16, 151, 103}
Equivalent! frozenset({97, 141}) {92, 141}
Equivalent! frozenset({98, 142}) {93, 142}
Equivalent! frozenset({99, 143}) {94, 143}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3902c758c8>, {0: {0}, 1: {24}, 2: {25}, 3: {26}, 4: {27}, 5: {23}, 6: {28}, 7: {29}, 8: {30}, 9: {31}, 10: {32}, 11: {33}, 12: {3}, 13: {18}, 14: {34}, 15: {150}, 16: {107}, 17: {37}, 18: {38}, 19: {39}, 20: {40}, 21: {41}, 22: {42}, 23: {43}, 24: {44}, 25: {45}, 26: {46}, 27: {47}, 28: {48}, 29: {49}, 30: {50}, 31: {51}, 32: {52}, 33: {53}, 34: {54}, 35: {55}, 36: {56}, 37: {57}, 38: {58}, 39: {59}, 40: {60}, 41: {61}, 42: {62}, 43: {63}, 44: {64}, 45: {65}, 46: {66}, 47: {67}, 48: {68}, 49: {69}, 50: {70}, 51: {71}, 52: {72}, 53: {73}, 54: {74}, 55: {75}, 56: {1}, 57: {17}, 58: {76}, 59: {5}, 60: {19}, 61: {77, 119}, 62: {20}, 63: {78}, 64: {9}, 65: {10}, 66: {79}, 67: {80, 122}, 68: {11}, 69: {12}, 70: {81}, 71: {82, 125}, 72: {13}, 73: {14}, 74: {83}, 75: {84}, 76: {15}, 77: {16}, 78: {85}, 79: {86}, 80: {200, 87}, 81: {88}, 82: {89}, 83: {90}, 84: {91}, 85: {92}, 86: {93}, 87: {7}, 88: {8}, 89: {94}, 90: {95}, 91: {96}, 92: {97}, 93: {98}, 94: {99}, 95: {100}, 96: {101}, 97: {21}, 98: {102}, 99: {103}, 100: {104}, 101: {105}, 102: {35}, 103: {151}, 104: {108}, 105: {109}, 106: {2}, 107: {22}, 108: {110}, 109: {111}, 110: {112}, 111: {113}, 112: {6}, 113: {114}, 114: {115}, 115: {116}, 116: {117}, 117: {118}, 118: {119}, 119: {120}, 120: {121}, 121: {122}, 122: {123}, 123: {124}, 124: {125}, 125: {126}, 126: {127}, 127: {128}, 128: {129}, 129: {130}, 130: {131}, 131: {132}, 132: {133}, 133: {134}, 134: {135}, 135: {136}, 136: {137}, 137: {4}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {106}, 151: {36}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}, 215: {215}, 216: {216}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 load load
EXACT 15 add add
EXACT 16 store store
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 add add
EXACT 22 store store
EXACT 23 icmp icmp
EXACT 24 zext zext
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 tail tail
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 xor xor
EXACT 33 getelementptr getelementptr
EXACT 34 store store
EXACT 35 xor xor
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 and and
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 icmp icmp
EXACT 42 zext zext
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 lshr lshr
EXACT 46 trunc trunc
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 xor xor
EXACT 51 add add
EXACT 52 icmp icmp
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 getelementptr getelementptr
EXACT 57 getelementptr getelementptr
EXACT 58 store store
EXACT 59 getelementptr getelementptr
EXACT 60 getelementptr getelementptr
MORE 61 POT: 2
EXACT 62 getelementptr getelementptr
EXACT 63 store store
EXACT 64 getelementptr getelementptr
EXACT 65 bitcast bitcast
EXACT 66 getelementptr getelementptr
MORE 67 POT: 2
EXACT 68 getelementptr getelementptr
EXACT 69 bitcast bitcast
EXACT 70 getelementptr getelementptr
MORE 71 POT: 2
EXACT 72 getelementptr getelementptr
EXACT 73 bitcast bitcast
EXACT 74 getelementptr getelementptr
EXACT 75 store store
EXACT 76 getelementptr getelementptr
EXACT 77 bitcast bitcast
EXACT 78 getelementptr getelementptr
EXACT 79 store store
MORE 80 POT: 2
EXACT 81 load load
EXACT 82 add add
EXACT 83 add add
EXACT 84 store store
EXACT 85 inttoptr inttoptr
EXACT 86 store store
EXACT 87 getelementptr getelementptr
EXACT 88 bitcast bitcast
EXACT 89 load load
EXACT 90 add add
EXACT 91 load load
EXACT 92 load load
EXACT 93 add add
EXACT 94 store store
EXACT 95 inttoptr inttoptr
EXACT 96 store store
EXACT 97 getelementptr getelementptr
EXACT 98 load load
EXACT 99 add add
EXACT 100 load load
EXACT 101 load load
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 store store
EXACT 106 bitcast bitcast
EXACT 107 getelementptr getelementptr
EXACT 108 load load
EXACT 109 zext zext
EXACT 110 load load
EXACT 111 store store
EXACT 112 bitcast bitcast
EXACT 113 load load
EXACT 114 zext zext
EXACT 115 store store
EXACT 116 load load
EXACT 117 zext zext
EXACT 118 store store
EXACT 119 load load
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 load load
EXACT 123 zext zext
EXACT 124 store store
EXACT 125 bitcast bitcast
EXACT 126 load load
EXACT 127 add add
EXACT 128 store store
EXACT 129 store store
EXACT 130 load load
EXACT 131 add add
EXACT 132 load load
EXACT 133 add add
EXACT 134 store store
EXACT 135 inttoptr inttoptr
EXACT 136 store store
EXACT 137 bitcast bitcast
EXACT 138 load load
EXACT 139 add add
EXACT 140 load load
EXACT 141 load load
EXACT 142 add add
EXACT 143 store store
EXACT 144 inttoptr inttoptr
EXACT 145 store store
EXACT 146 load load
EXACT 147 add add
EXACT 148 load load
EXACT 149 load load
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 store store
EXACT 154 load load
EXACT 155 add add
EXACT 156 add add
EXACT 157 load load
EXACT 158 add add
EXACT 159 inttoptr inttoptr
EXACT 160 store store
EXACT 161 store store
EXACT 162 store store
EXACT 163 tail tail
EXACT 164 load load
EXACT 165 load load
EXACT 166 add add
EXACT 167 store store
EXACT 168 icmp icmp
EXACT 169 zext zext
EXACT 170 store store
EXACT 171 trunc trunc
EXACT 172 and and
EXACT 173 tail tail
EXACT 174 trunc trunc
EXACT 175 and and
EXACT 176 xor xor
EXACT 177 store store
EXACT 178 xor xor
EXACT 179 lshr lshr
EXACT 180 trunc trunc
EXACT 181 and and
EXACT 182 store store
EXACT 183 icmp icmp
EXACT 184 zext zext
EXACT 185 store store
EXACT 186 lshr lshr
EXACT 187 trunc trunc
EXACT 188 store store
EXACT 189 lshr lshr
EXACT 190 xor xor
EXACT 191 add add
EXACT 192 icmp icmp
EXACT 193 zext zext
EXACT 194 store store
EXACT 195 add add
EXACT 196 store store
EXACT 197 add add
EXACT 198 inttoptr inttoptr
EXACT 199 load load
EXACT 200 store store
EXACT 201 store store
EXACT 202 add add
EXACT 203 store store
EXACT 204 add add
EXACT 205 inttoptr inttoptr
EXACT 206 load load
EXACT 207 store store
EXACT 208 store store
EXACT 209 add add
EXACT 210 store store
EXACT 211 inttoptr inttoptr
EXACT 212 load load
EXACT 213 store store
EXACT 214 add add
EXACT 215 store store
EXACT 216 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
- 4 %EBX = bitcast %union.anon* %4 to i32*
- 5 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 6 %ECX = bitcast %union.anon* %5 to i32*
- 7 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 8 %EDI = bitcast %union.anon* %6 to i32*
- 9 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 10 %R8D = bitcast %union.anon* %7 to i32*
- 11 %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
- 12 %R9D = bitcast %union.anon* %8 to i32*
- 13 %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
- 14 %R10D = bitcast %union.anon* %9 to i32*
- 15 %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
- 16 %R11D = bitcast %union.anon* %10 to i32*
- 17 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 18 %RBX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 19 %RCX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 20 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 21 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 22 %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
- 23 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 24 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 25 %11 = load i64, i64* %RBP, align 8
- 26 %12 = add i64 %1, 1
- 27 store i64 %12, i64* %PC, align 8
- 28 %13 = load i64, i64* %RSP, align 8
- 29 %14 = add i64 %13, -8
- 30 %15 = inttoptr i64 %14 to i64*
- 31 store i64 %11, i64* %15, align 8
- 32 %16 = load i64, i64* %PC, align 8
- 33 store i64 %14, i64* %RBP, align 8
- 34 %17 = load i64, i64* %RBX, align 8
- 35 %18 = add i64 %16, 4
- 36 store i64 %18, i64* %PC, align 8
- 37 %19 = add i64 %13, -16
- 38 %20 = inttoptr i64 %19 to i64*
- 39 store i64 %17, i64* %20, align 8
- 40 %21 = load i64, i64* %PC, align 8
- 41 %22 = add i64 %13, -56
- 42 store i64 %22, i64* %RSP, align 8
- 43 %23 = icmp ult i64 %19, 40
- 44 %24 = zext i1 %23 to i8
- 45 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 46 store i8 %24, i8* %25, align 1
- 47 %26 = trunc i64 %22 to i32
- 48 %27 = and i32 %26, 255
- 49 %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #12
- 50 %29 = trunc i32 %28 to i8
- 51 %30 = and i8 %29, 1
- 52 %31 = xor i8 %30, 1
- 53 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 54 store i8 %31, i8* %32, align 1
- 55 %33 = xor i64 %19, %22
- 56 %34 = lshr i64 %33, 4
- 57 %35 = trunc i64 %34 to i8
- 58 %36 = and i8 %35, 1
- 59 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 60 store i8 %36, i8* %37, align 1
- 61 %38 = icmp eq i64 %22, 0
- 62 %39 = zext i1 %38 to i8
- 63 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 64 store i8 %39, i8* %40, align 1
- 65 %41 = lshr i64 %22, 63
- 66 %42 = trunc i64 %41 to i8
- 67 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 68 store i8 %42, i8* %43, align 1
- 69 %44 = lshr i64 %19, 63
- 70 %45 = xor i64 %41, %44
- 71 %46 = add nuw nsw i64 %45, %44
- 72 %47 = icmp eq i64 %46, 2
- 73 %48 = zext i1 %47 to i8
- 74 %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 75 store i8 %48, i8* %49, align 1
- 76 store i64 100, i64* %RAX, align 8
- 77 store i64 200, i64* %RCX, align 8
- 78 store i64 300, i64* %RDX, align 8
- 79 %50 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
- 80 store i64 400, i64* %50, align 8
- 81 %51 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
- 82 store i64 500, i64* %51, align 8
- 83 %52 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
- 84 store i64 600, i64* %52, align 8
- 85 %53 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
- 86 store i64 10, i64* %53, align 8
- 87 store i64 20, i64* %RBX, align 8
- 88 %54 = load i64, i64* %RBP, align 8
- 89 %55 = add i64 %54, -12
- 90 %56 = add i64 %21, 55
- 91 store i64 %56, i64* %PC, align 8
- 92 %57 = inttoptr i64 %55 to i32*
- 93 store i32 0, i32* %57, align 4
- 94 %58 = load i64, i64* %RBP, align 8
- 95 %59 = add i64 %58, -16
- 96 %60 = load i32, i32* %EDI, align 4
- 97 %61 = load i64, i64* %PC, align 8
- 98 %62 = add i64 %61, 3
- 99 store i64 %62, i64* %PC, align 8
- 100 %63 = inttoptr i64 %59 to i32*
- 101 store i32 %60, i32* %63, align 4
- 102 %64 = load i64, i64* %RBP, align 8
- 103 %65 = add i64 %64, -24
- 104 %66 = load i64, i64* %RSI, align 8
- 105 %67 = load i64, i64* %PC, align 8
- 106 %68 = add i64 %67, 4
- 107 store i64 %68, i64* %PC, align 8
- 108 %69 = inttoptr i64 %65 to i64*
- 109 store i64 %66, i64* %69, align 8
- 110 %70 = load i32, i32* %EAX, align 4
- 111 %71 = zext i32 %70 to i64
- 112 %72 = load i64, i64* %PC, align 8
- 113 store i64 %71, i64* %RDI, align 8
- 114 %73 = load i32, i32* %ECX, align 4
- 115 %74 = zext i32 %73 to i64
- 116 store i64 %74, i64* %RSI, align 8
- 117 %75 = load i32, i32* %R8D, align 4
- 118 %76 = zext i32 %75 to i64
- 119 store i64 %76, i64* %RCX, align 8
- 120 %77 = load i32, i32* %R9D, align 4
- 121 %78 = zext i32 %77 to i64
- 122 store i64 %78, i64* %50, align 8
- 123 %79 = load i32, i32* %R10D, align 4
- 124 %80 = zext i32 %79 to i64
- 125 store i64 %80, i64* %51, align 8
- 126 %81 = bitcast i64* %RSP to i32**
- 127 %82 = load i32*, i32** %81, align 8
- 128 %83 = add i64 %72, 20
- 129 store i64 %83, i64* %PC, align 8
- 130 store i32 10, i32* %82, align 4
- 131 %84 = load i64, i64* %RSP, align 8
- 132 %85 = add i64 %84, 8
- 133 %86 = load i64, i64* %PC, align 8
- 134 %87 = add i64 %86, 8
- 135 store i64 %87, i64* %PC, align 8
- 136 %88 = inttoptr i64 %85 to i32*
- 137 store i32 20, i32* %88, align 4
- 138 %89 = load i64, i64* %RBP, align 8
- 139 %90 = add i64 %89, -28
- 140 %91 = load i32, i32* %EBX, align 4
- 141 %92 = load i64, i64* %PC, align 8
- 142 %93 = add i64 %92, 3
- 143 store i64 %93, i64* %PC, align 8
- 144 %94 = inttoptr i64 %90 to i32*
- 145 store i32 %91, i32* %94, align 4
- 146 %95 = load i64, i64* %RBP, align 8
- 147 %96 = add i64 %95, -32
- 148 %97 = load i32, i32* %R11D, align 4
- 149 %98 = load i64, i64* %PC, align 8
- 150 %99 = add i64 %98, 4
- 151 store i64 %99, i64* %PC, align 8
- 152 %100 = inttoptr i64 %96 to i32*
- 153 store i32 %97, i32* %100, align 4
- 154 %101 = load i64, i64* %PC, align 8
- 155 %102 = add i64 %101, -198
- 156 %103 = add i64 %101, 5
- 157 %104 = load i64, i64* %RSP, align 8
- 158 %105 = add i64 %104, -8
- 159 %106 = inttoptr i64 %105 to i64*
- 160 store i64 %103, i64* %106, align 8
- 161 store i64 %105, i64* %RSP, align 8
- 162 store i64 %102, i64* %PC, align 8
- 163 %107 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)
- 164 %108 = load i64, i64* %RSP, align 8
- 165 %109 = load i64, i64* %PC, align 8
- 166 %110 = add i64 %108, 40
- 167 store i64 %110, i64* %RSP, align 8
- 168 %111 = icmp ugt i64 %108, -41
- 169 %112 = zext i1 %111 to i8
- 170 store i8 %112, i8* %25, align 1
- 171 %113 = trunc i64 %110 to i32
- 172 %114 = and i32 %113, 255
- 173 %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #12
- 174 %116 = trunc i32 %115 to i8
- 175 %117 = and i8 %116, 1
- 176 %118 = xor i8 %117, 1
- 177 store i8 %118, i8* %32, align 1
- 178 %119 = xor i64 %110, %108
- 179 %120 = lshr i64 %119, 4
- 180 %121 = trunc i64 %120 to i8
- 181 %122 = and i8 %121, 1
- 182 store i8 %122, i8* %37, align 1
- 183 %123 = icmp eq i64 %110, 0
- 184 %124 = zext i1 %123 to i8
- 185 store i8 %124, i8* %40, align 1
- 186 %125 = lshr i64 %110, 63
- 187 %126 = trunc i64 %125 to i8
- 188 store i8 %126, i8* %43, align 1
- 189 %127 = lshr i64 %108, 63
- 190 %128 = xor i64 %125, %127
- 191 %129 = add nuw nsw i64 %128, %125
- 192 %130 = icmp eq i64 %129, 2
- 193 %131 = zext i1 %130 to i8
- 194 store i8 %131, i8* %49, align 1
- 195 %132 = add i64 %109, 5
- 196 store i64 %132, i64* %PC, align 8
- 197 %133 = add i64 %108, 48
- 198 %134 = inttoptr i64 %110 to i64*
- 199 %135 = load i64, i64* %134, align 8
- 200 store i64 %135, i64* %RBX, align 8
- 201 store i64 %133, i64* %RSP, align 8
- 202 %136 = add i64 %109, 6
- 203 store i64 %136, i64* %PC, align 8
- 204 %137 = add i64 %108, 56
- 205 %138 = inttoptr i64 %133 to i64*
- 206 %139 = load i64, i64* %138, align 8
- 207 store i64 %139, i64* %RBP, align 8
- 208 store i64 %137, i64* %RSP, align 8
- 209 %140 = add i64 %109, 7
- 210 store i64 %140, i64* %PC, align 8
- 211 %141 = inttoptr i64 %137 to i64*
- 212 %142 = load i64, i64* %141, align 8
- 213 store i64 %142, i64* %PC, align 8
- 214 %143 = add i64 %108, 64
- 215 store i64 %143, i64* %RSP, align 8
- 216 ret %struct.Memory* %107
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3902c75730>, {0: {0}, 1: {56}, 2: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 3: {12}, 4: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 5: {59}, 6: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 7: {87}, 8: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 9: {64}, 10: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 11: {68}, 12: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 13: {72}, 14: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 15: {76}, 16: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 17: {66, 70, 74, 107, 13, 78, 57, 60}, 18: {66, 70, 74, 107, 13, 78, 57, 60}, 19: {66, 70, 74, 107, 13, 78, 57, 60}, 20: {62}, 21: {97}, 22: {66, 70, 74, 107, 13, 78, 57, 60}, 23: {5}, 24: {1}, 25: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 26: {3}, 27: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 28: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 29: {158, 7}, 30: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 31: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 32: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 33: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 34: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 35: {150, 102, 15}, 36: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 37: {17, 90}, 38: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 39: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 40: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 41: {21}, 42: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 43: {23}, 44: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 45: {25}, 46: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 47: {37, 171, 187, 46, 174, 180, 27, 30}, 48: {172, 28}, 49: {163, 29, 173}, 50: {37, 171, 187, 46, 174, 180, 27, 30}, 51: {175, 181, 38, 31}, 52: {32, 176}, 53: {33}, 54: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 55: {178, 50, 35, 190}, 56: {179, 36}, 57: {37, 171, 187, 46, 174, 180, 27, 30}, 58: {175, 181, 38, 31}, 59: {39}, 60: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 61: {41, 183}, 62: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 63: {43}, 64: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 65: {49, 186, 45, 189}, 66: {37, 171, 187, 46, 174, 180, 27, 30}, 67: {47}, 68: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 69: {49, 186, 45, 189}, 70: {178, 50, 35, 190}, 71: {51, 191}, 72: {192, 52}, 73: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 74: {54}, 75: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 76: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 77: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 78: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 79: {66, 70, 74, 107, 13, 78, 57, 60}, 80: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 81: {66, 70, 74, 107, 13, 78, 57, 60}, 82: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 83: {66, 70, 74, 107, 13, 78, 57, 60}, 84: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 85: {66, 70, 74, 107, 13, 78, 57, 60}, 86: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 87: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 88: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 89: {82}, 90: {83}, 91: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 92: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 93: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 94: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 95: {17, 90}, 96: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 97: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 98: {93, 142}, 99: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 100: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 101: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 102: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 103: {99}, 104: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 105: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 106: {150, 102, 15}, 107: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 108: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 109: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 110: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 111: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 112: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 113: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 114: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 115: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 116: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 117: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 118: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 119: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 120: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 121: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 122: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 123: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 124: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 125: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 126: {65, 69, 73, 106, 137, 77, 112, 88, 125}, 127: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 128: {127}, 129: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 130: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 131: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 132: {131, 133}, 133: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 134: {131, 133}, 135: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 136: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 137: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 138: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 139: {139}, 140: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 141: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 142: {93, 142}, 143: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 144: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 145: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 146: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 147: {147}, 148: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 149: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 150: {150, 102, 15}, 151: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 152: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 153: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 154: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 155: {155}, 156: {195, 156}, 157: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 158: {158, 7}, 159: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 160: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 161: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 162: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 163: {163, 29, 173}, 164: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 165: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 166: {166}, 167: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 168: {168}, 169: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 170: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 171: {37, 171, 187, 46, 174, 180, 27, 30}, 172: {172, 28}, 173: {163, 29, 173}, 174: {37, 171, 187, 46, 174, 180, 27, 30}, 175: {175, 181, 38, 31}, 176: {32, 176}, 177: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 178: {178, 50, 35, 190}, 179: {179, 36}, 180: {37, 171, 187, 46, 174, 180, 27, 30}, 181: {175, 181, 38, 31}, 182: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 183: {41, 183}, 184: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 185: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 186: {49, 186, 45, 189}, 187: {37, 171, 187, 46, 174, 180, 27, 30}, 188: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 189: {49, 186, 45, 189}, 190: {178, 50, 35, 190}, 191: {51, 191}, 192: {192, 52}, 193: {193, 169, 42, 109, 114, 53, 117, 24, 123, 120, 184}, 194: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 195: {195, 156}, 196: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 197: {197}, 198: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 199: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 200: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 201: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 202: {202}, 203: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 204: {204}, 205: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 206: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 207: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 208: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 209: {209}, 210: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 211: {159, 198, 135, 8, 104, 205, 144, 18, 211, 85, 152, 95}, 212: {2, 130, 132, 6, 10, 138, 140, 141, 14, 146, 20, 148, 149, 154, 157, 164, 165, 199, 206, 81, 212, 89, 91, 92, 98, 100, 101, 108, 110, 113, 116, 119, 122, 126}, 213: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 214: {214}, 215: {128, 129, 4, 134, 136, 9, 11, 143, 16, 145, 19, 22, 151, 153, 26, 160, 161, 34, 162, 167, 40, 170, 44, 48, 177, 182, 55, 185, 58, 188, 61, 63, 194, 67, 196, 71, 200, 201, 75, 203, 79, 80, 207, 208, 210, 84, 213, 86, 215, 94, 96, 103, 105, 111, 115, 118, 121, 124}, 216: {216}})
Equivalent! frozenset({10, 101, 149}) {32, 105, 149}
Equivalent! frozenset({102, 150, 15}) {106, 35, 150}
Equivalent! frozenset({16, 103, 151}) {107, 36, 151}
Equivalent! frozenset({92, 141}) {97, 141}
Equivalent! frozenset({93, 142}) {98, 142}
Equivalent! frozenset({94, 143}) {99, 143}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3902c75730>, {0: {0}, 1: {56}, 2: {106}, 3: {12}, 4: {137}, 5: {59}, 6: {112}, 7: {87}, 8: {88}, 9: {64}, 10: {65}, 11: {68}, 12: {69}, 13: {72}, 14: {73}, 15: {76}, 16: {77}, 17: {57}, 18: {13}, 19: {60}, 20: {62}, 21: {97}, 22: {107}, 23: {5}, 24: {1}, 25: {2}, 26: {3}, 27: {4}, 28: {6}, 29: {7}, 30: {8}, 31: {9}, 32: {10}, 33: {11}, 34: {14}, 35: {150}, 36: {103}, 37: {17}, 38: {18}, 39: {19}, 40: {20}, 41: {21}, 42: {22}, 43: {23}, 44: {24}, 45: {25}, 46: {26}, 47: {27}, 48: {28}, 49: {29}, 50: {30}, 51: {31}, 52: {32}, 53: {33}, 54: {34}, 55: {35}, 56: {36}, 57: {37}, 58: {38}, 59: {39}, 60: {40}, 61: {41}, 62: {42}, 63: {43}, 64: {44}, 65: {45}, 66: {46}, 67: {47}, 68: {48}, 69: {49}, 70: {50}, 71: {51}, 72: {52}, 73: {53}, 74: {54}, 75: {55}, 76: {58}, 77: {61, 118}, 78: {63}, 79: {66}, 80: {121, 67}, 81: {70}, 82: {124, 71}, 83: {74}, 84: {75}, 85: {78}, 86: {79}, 87: {200, 80}, 88: {81}, 89: {82}, 90: {83}, 91: {84}, 92: {85}, 93: {86}, 94: {89}, 95: {90}, 96: {91}, 97: {92}, 98: {93}, 99: {94}, 100: {95}, 101: {96}, 102: {98}, 103: {99}, 104: {100}, 105: {101}, 106: {102}, 107: {16}, 108: {104}, 109: {105}, 110: {108}, 111: {109}, 112: {110}, 113: {111}, 114: {113}, 115: {114}, 116: {115}, 117: {116}, 118: {117}, 119: {118}, 120: {119}, 121: {120}, 122: {121}, 123: {122}, 124: {123}, 125: {124}, 126: {125}, 127: {126}, 128: {127}, 129: {128}, 130: {129}, 131: {130}, 132: {131}, 133: {132}, 134: {133}, 135: {134}, 136: {135}, 137: {136}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {15}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}, 215: {215}, 216: {216}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 bitcast bitcast
EXACT 7 getelementptr getelementptr
EXACT 8 bitcast bitcast
EXACT 9 getelementptr getelementptr
EXACT 10 bitcast bitcast
EXACT 11 getelementptr getelementptr
EXACT 12 bitcast bitcast
EXACT 13 getelementptr getelementptr
EXACT 14 bitcast bitcast
EXACT 15 getelementptr getelementptr
EXACT 16 bitcast bitcast
EXACT 17 getelementptr getelementptr
EXACT 18 getelementptr getelementptr
EXACT 19 getelementptr getelementptr
EXACT 20 getelementptr getelementptr
EXACT 21 getelementptr getelementptr
EXACT 22 getelementptr getelementptr
EXACT 23 getelementptr getelementptr
EXACT 24 getelementptr getelementptr
EXACT 25 load load
EXACT 26 add add
EXACT 27 store store
EXACT 28 load load
EXACT 29 add add
EXACT 30 inttoptr inttoptr
EXACT 31 store store
EXACT 32 load load
EXACT 33 store store
EXACT 34 load load
EXACT 35 add add
EXACT 36 store store
EXACT 37 add add
EXACT 38 inttoptr inttoptr
EXACT 39 store store
EXACT 40 load load
EXACT 41 add add
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 trunc trunc
EXACT 48 and and
EXACT 49 tail tail
EXACT 50 trunc trunc
EXACT 51 and and
EXACT 52 xor xor
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 xor xor
EXACT 56 lshr lshr
EXACT 57 trunc trunc
EXACT 58 and and
EXACT 59 getelementptr getelementptr
EXACT 60 store store
EXACT 61 icmp icmp
EXACT 62 zext zext
EXACT 63 getelementptr getelementptr
EXACT 64 store store
EXACT 65 lshr lshr
EXACT 66 trunc trunc
EXACT 67 getelementptr getelementptr
EXACT 68 store store
EXACT 69 lshr lshr
EXACT 70 xor xor
EXACT 71 add add
EXACT 72 icmp icmp
EXACT 73 zext zext
EXACT 74 getelementptr getelementptr
EXACT 75 store store
EXACT 76 store store
MORE 77 POT: 2
EXACT 78 store store
EXACT 79 getelementptr getelementptr
MORE 80 POT: 2
EXACT 81 getelementptr getelementptr
MORE 82 POT: 2
EXACT 83 getelementptr getelementptr
EXACT 84 store store
EXACT 85 getelementptr getelementptr
EXACT 86 store store
MORE 87 POT: 2
EXACT 88 load load
EXACT 89 add add
EXACT 90 add add
EXACT 91 store store
EXACT 92 inttoptr inttoptr
EXACT 93 store store
EXACT 94 load load
EXACT 95 add add
EXACT 96 load load
EXACT 97 load load
EXACT 98 add add
EXACT 99 store store
EXACT 100 inttoptr inttoptr
EXACT 101 store store
EXACT 102 load load
EXACT 103 add add
EXACT 104 load load
EXACT 105 load load
EXACT 106 add add
EXACT 107 store store
EXACT 108 inttoptr inttoptr
EXACT 109 store store
EXACT 110 load load
EXACT 111 zext zext
EXACT 112 load load
EXACT 113 store store
EXACT 114 load load
EXACT 115 zext zext
EXACT 116 store store
EXACT 117 load load
EXACT 118 zext zext
EXACT 119 store store
EXACT 120 load load
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 load load
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 bitcast bitcast
EXACT 127 load load
EXACT 128 add add
EXACT 129 store store
EXACT 130 store store
EXACT 131 load load
EXACT 132 add add
EXACT 133 load load
EXACT 134 add add
EXACT 135 store store
EXACT 136 inttoptr inttoptr
EXACT 137 store store
EXACT 138 load load
EXACT 139 add add
EXACT 140 load load
EXACT 141 load load
EXACT 142 add add
EXACT 143 store store
EXACT 144 inttoptr inttoptr
EXACT 145 store store
EXACT 146 load load
EXACT 147 add add
EXACT 148 load load
EXACT 149 load load
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 store store
EXACT 154 load load
EXACT 155 add add
EXACT 156 add add
EXACT 157 load load
EXACT 158 add add
EXACT 159 inttoptr inttoptr
EXACT 160 store store
EXACT 161 store store
EXACT 162 store store
EXACT 163 tail tail
EXACT 164 load load
EXACT 165 load load
EXACT 166 add add
EXACT 167 store store
EXACT 168 icmp icmp
EXACT 169 zext zext
EXACT 170 store store
EXACT 171 trunc trunc
EXACT 172 and and
EXACT 173 tail tail
EXACT 174 trunc trunc
EXACT 175 and and
EXACT 176 xor xor
EXACT 177 store store
EXACT 178 xor xor
EXACT 179 lshr lshr
EXACT 180 trunc trunc
EXACT 181 and and
EXACT 182 store store
EXACT 183 icmp icmp
EXACT 184 zext zext
EXACT 185 store store
EXACT 186 lshr lshr
EXACT 187 trunc trunc
EXACT 188 store store
EXACT 189 lshr lshr
EXACT 190 xor xor
EXACT 191 add add
EXACT 192 icmp icmp
EXACT 193 zext zext
EXACT 194 store store
EXACT 195 add add
EXACT 196 store store
EXACT 197 add add
EXACT 198 inttoptr inttoptr
EXACT 199 load load
EXACT 200 store store
EXACT 201 store store
EXACT 202 add add
EXACT 203 store store
EXACT 204 add add
EXACT 205 inttoptr inttoptr
EXACT 206 load load
EXACT 207 store store
EXACT 208 store store
EXACT 209 add add
EXACT 210 store store
EXACT 211 inttoptr inttoptr
EXACT 212 load load
EXACT 213 store store
EXACT 214 add add
EXACT 215 store store
EXACT 216 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%12 = load i64, i64* %RBX.i46, align 8', '%13 = add i64 %10, 4', 'store i64 %13, i64* %3, align 8', '%14 = add i64 %7, -16', '%15 = inttoptr i64 %14 to i64*', 'store i64 %12, i64* %15, align 8', '%16 = load i64, i64* %3, align 8', '%17 = add i64 %7, -56', 'store i64 %17, i64* %6, align 8', '%18 = icmp ult i64 %14, 40', '%19 = zext i1 %18 to i8', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %19, i8* %20, align 1', '%21 = trunc i64 %17 to i32', '%22 = and i32 %21, 255', '%23 = tail call i32 @llvm.ctpop.i32(i32 %22)', '%24 = trunc i32 %23 to i8', '%25 = and i8 %24, 1', '%26 = xor i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %26, i8* %27, align 1', '%28 = xor i64 %14, %17', '%29 = lshr i64 %28, 4', '%30 = trunc i64 %29 to i8', '%31 = and i8 %30, 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %31, i8* %32, align 1', '%33 = icmp eq i64 %17, 0', '%34 = zext i1 %33 to i8', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %34, i8* %35, align 1', '%36 = lshr i64 %17, 63', '%37 = trunc i64 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %37, i8* %38, align 1', '%39 = lshr i64 %14, 63', '%40 = xor i64 %36, %39', '%41 = add nuw nsw i64 %40, %39', '%42 = icmp eq i64 %41, 2', '%43 = zext i1 %42 to i8', '%44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %43, i8* %44, align 1', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i = getelementptr inbounds %union.anon, %union.anon* %45, i64 0, i32 0', 'store i64 100, i64* %RAX.i, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', 'store i64 300, i64* %RDX.i, align 8', '%R8D.i38 = bitcast %union.anon* %47 to i32*', '%R9D.i36 = bitcast %union.anon* %49 to i32*', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0', '%R10D.i34 = bitcast %union.anon* %51 to i32*', '%52 = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0', 'store i64 600, i64* %52, align 8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0', '%R11D.i32 = bitcast %union.anon* %53 to i32*', '%54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0', 'store i64 10, i64* %54, align 8', '%55 = load i64, i64* %RBP.i, align 8', '%56 = add i64 %55, -12', '%57 = add i64 %16, 55', 'store i64 %57, i64* %3, align 8', '%58 = inttoptr i64 %56 to i32*', 'store i32 0, i32* %58, align 4', '%59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %59 to i32*', '%60 = load i64, i64* %RBP.i, align 8', '%61 = add i64 %60, -16', '%62 = load i32, i32* %EDI.i, align 4', '%63 = load i64, i64* %3, align 8', '%64 = add i64 %63, 3', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %61 to i32*', 'store i32 %62, i32* %65, align 4', '%RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%66 = load i64, i64* %RBP.i, align 8', '%67 = add i64 %66, -24', '%68 = load i64, i64* %RSI.i23, align 8', '%69 = load i64, i64* %3, align 8', '%70 = add i64 %69, 4', 'store i64 %70, i64* %3, align 8', '%71 = inttoptr i64 %67 to i64*', 'store i64 %68, i64* %71, align 8', '%EAX.i = bitcast %union.anon* %45 to i32*', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0', '%72 = load i32, i32* %EAX.i, align 4', '%73 = zext i32 %72 to i64', '%74 = load i64, i64* %3, align 8', 'store i64 %73, i64* %RDI.i, align 8', '%ECX.i = bitcast %union.anon* %46 to i32*', '%75 = load i32, i32* %ECX.i, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RSI.i23, align 8', '%77 = load i32, i32* %R8D.i38, align 4', '%78 = zext i32 %77 to i64', 'store i64 %78, i64* %RCX.i41, align 8', '%79 = load i32, i32* %R9D.i36, align 4', '%80 = zext i32 %79 to i64', 'store i64 %80, i64* %48, align 8', '%81 = load i32, i32* %R10D.i34, align 4', '%82 = zext i32 %81 to i64', 'store i64 %82, i64* %50, align 8', '%83 = bitcast i64* %6 to i32**', '%84 = load i32*, i32** %83, align 8', '%85 = add i64 %74, 20', 'store i64 %85, i64* %3, align 8', 'store i32 10, i32* %84, align 4', '%86 = load i64, i64* %6, align 8', '%87 = add i64 %86, 8', '%88 = load i64, i64* %3, align 8', '%89 = add i64 %88, 8', 'store i64 %89, i64* %3, align 8', '%90 = inttoptr i64 %87 to i32*', 'store i32 20, i32* %90, align 4', '%EBX.i = bitcast %union.anon* %11 to i32*', '%91 = load i64, i64* %RBP.i, align 8', '%92 = add i64 %91, -28', '%93 = load i32, i32* %EBX.i, align 4', '%94 = load i64, i64* %3, align 8', '%95 = add i64 %94, 3', 'store i64 %95, i64* %3, align 8', '%96 = inttoptr i64 %92 to i32*', 'store i32 %93, i32* %96, align 4', '%97 = load i64, i64* %RBP.i, align 8', '%98 = add i64 %97, -32', '%99 = load i32, i32* %R11D.i32, align 4', '%100 = load i64, i64* %3, align 8', '%101 = add i64 %100, 4', 'store i64 %101, i64* %3, align 8', '%102 = inttoptr i64 %98 to i32*', 'store i32 %99, i32* %102, align 4', '%103 = load i64, i64* %3, align 8', '%104 = add i64 %103, -198', '%105 = add i64 %103, 5', '%106 = load i64, i64* %6, align 8', '%107 = add i64 %106, -8', '%108 = inttoptr i64 %107 to i64*', 'store i64 %105, i64* %108, align 8', 'store i64 %107, i64* %6, align 8', 'store i64 %104, i64* %3, align 8', '%call2_4005e6 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %104, %struct.Memory* %2)', '%109 = load i64, i64* %6, align 8', '%110 = load i64, i64* %3, align 8', '%111 = add i64 %109, 40', 'store i64 %111, i64* %6, align 8', '%112 = icmp ugt i64 %109, -41', '%113 = zext i1 %112 to i8', 'store i8 %113, i8* %20, align 1', '%114 = trunc i64 %111 to i32', '%115 = and i32 %114, 255', '%116 = tail call i32 @llvm.ctpop.i32(i32 %115)', '%117 = trunc i32 %116 to i8', '%118 = and i8 %117, 1', '%119 = xor i8 %118, 1', 'store i8 %119, i8* %27, align 1', '%120 = xor i64 %111, %109', '%121 = lshr i64 %120, 4', '%122 = trunc i64 %121 to i8', '%123 = and i8 %122, 1', 'store i8 %123, i8* %32, align 1', '%124 = icmp eq i64 %111, 0', '%125 = zext i1 %124 to i8', 'store i8 %125, i8* %35, align 1', '%126 = lshr i64 %111, 63', '%127 = trunc i64 %126 to i8', 'store i8 %127, i8* %38, align 1', '%128 = lshr i64 %109, 63', '%129 = xor i64 %126, %128', '%130 = add nuw nsw i64 %129, %126', '%131 = icmp eq i64 %130, 2', '%132 = zext i1 %131 to i8', 'store i8 %132, i8* %44, align 1', '%133 = add i64 %110, 5', 'store i64 %133, i64* %3, align 8', '%134 = add i64 %109, 48', '%135 = inttoptr i64 %111 to i64*', '%136 = load i64, i64* %135, align 8', 'store i64 %136, i64* %RBX.i46, align 8', 'store i64 %134, i64* %6, align 8', '%137 = add i64 %110, 6', 'store i64 %137, i64* %3, align 8', '%138 = add i64 %109, 56', '%139 = inttoptr i64 %134 to i64*', '%140 = load i64, i64* %139, align 8', 'store i64 %140, i64* %RBP.i, align 8', 'store i64 %138, i64* %6, align 8', '%141 = add i64 %110, 7', 'store i64 %141, i64* %3, align 8', '%142 = inttoptr i64 %138 to i64*', '%143 = load i64, i64* %142, align 8', 'store i64 %143, i64* %3, align 8', '%144 = add i64 %109, 64', 'store i64 %144, i64* %6, align 8', 'ret %struct.Memory* %call2_4005e6'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Keep: %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
Keep: %RBX.i46 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
Found line to remove! %12 = load i64, i64* %RBX.i46, align 8
Found line to remove! %13 = add i64 %10, 4
Found line to remove! store i64 %13, i64* %3, align 8
Found line to remove! %14 = add i64 %7, -16
Found line to remove! %15 = inttoptr i64 %14 to i64*
Found line to remove! store i64 %12, i64* %15, align 8
Found line to remove! %16 = load i64, i64* %3, align 8
Found line to remove! %17 = add i64 %7, -56
Found line to remove! store i64 %17, i64* %6, align 8
Found line to remove! %18 = icmp ult i64 %14, 40
Found line to remove! %19 = zext i1 %18 to i8
Found line to remove! %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %19, i8* %20, align 1
Found line to remove! %21 = trunc i64 %17 to i32
Found line to remove! %22 = and i32 %21, 255
Found line to remove! %23 = tail call i32 @llvm.ctpop.i32(i32 %22)
Found line to remove! %24 = trunc i32 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = xor i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = xor i64 %14, %17
Found line to remove! %29 = lshr i64 %28, 4
Found line to remove! %30 = trunc i64 %29 to i8
Found line to remove! %31 = and i8 %30, 1
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = icmp eq i64 %17, 0
Found line to remove! %34 = zext i1 %33 to i8
Found line to remove! %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %34, i8* %35, align 1
Found line to remove! %36 = lshr i64 %17, 63
Found line to remove! %37 = trunc i64 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = lshr i64 %14, 63
Found line to remove! %40 = xor i64 %36, %39
Found line to remove! %41 = add nuw nsw i64 %40, %39
Found line to remove! %42 = icmp eq i64 %41, 2
Found line to remove! %43 = zext i1 %42 to i8
Found line to remove! %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %43, i8* %44, align 1
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i = getelementptr inbounds %union.anon, %union.anon* %45, i64 0, i32 0
Found line to remove! store i64 100, i64* %RAX.i, align 8
Keep: %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Keep: %RCX.i41 = getelementptr inbounds %union.anon, %union.anon* %46, i64 0, i32 0
Keep: store i64 200, i64* %RCX.i41, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! store i64 300, i64* %RDX.i, align 8
Keep: %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8D.i38 = bitcast %union.anon* %47 to i32*
Keep: %48 = getelementptr inbounds %union.anon, %union.anon* %47, i64 0, i32 0
Keep: store i64 400, i64* %48, align 8
Keep: %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
Found line to remove! %R9D.i36 = bitcast %union.anon* %49 to i32*
Keep: %50 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
Keep: store i64 500, i64* %50, align 8
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
Found line to remove! %R10D.i34 = bitcast %union.anon* %51 to i32*
Found line to remove! %52 = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
Found line to remove! store i64 600, i64* %52, align 8
Found line to remove! %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
Found line to remove! %R11D.i32 = bitcast %union.anon* %53 to i32*
Found line to remove! %54 = getelementptr inbounds %union.anon, %union.anon* %53, i64 0, i32 0
Found line to remove! store i64 10, i64* %54, align 8
Keep: store i64 20, i64* %RBX.i46, align 8
Found line to remove! %55 = load i64, i64* %RBP.i, align 8
Found line to remove! %56 = add i64 %55, -12
Found line to remove! %57 = add i64 %16, 55
Found line to remove! store i64 %57, i64* %3, align 8
Found line to remove! %58 = inttoptr i64 %56 to i32*
Found line to remove! store i32 0, i32* %58, align 4
Found line to remove! %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %59 to i32*
Found line to remove! %60 = load i64, i64* %RBP.i, align 8
Found line to remove! %61 = add i64 %60, -16
Found line to remove! %62 = load i32, i32* %EDI.i, align 4
Found line to remove! %63 = load i64, i64* %3, align 8
Found line to remove! %64 = add i64 %63, 3
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %65 = inttoptr i64 %61 to i32*
Found line to remove! store i32 %62, i32* %65, align 4
Found line to remove! %RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %66 = load i64, i64* %RBP.i, align 8
Found line to remove! %67 = add i64 %66, -24
Found line to remove! %68 = load i64, i64* %RSI.i23, align 8
Found line to remove! %69 = load i64, i64* %3, align 8
Found line to remove! %70 = add i64 %69, 4
Found line to remove! store i64 %70, i64* %3, align 8
Found line to remove! %71 = inttoptr i64 %67 to i64*
Found line to remove! store i64 %68, i64* %71, align 8
Found line to remove! %EAX.i = bitcast %union.anon* %45 to i32*
Found line to remove! %RDI.i = getelementptr inbounds %union.anon, %union.anon* %59, i64 0, i32 0
Found line to remove! %72 = load i32, i32* %EAX.i, align 4
Found line to remove! %73 = zext i32 %72 to i64
Found line to remove! %74 = load i64, i64* %3, align 8
Found line to remove! store i64 %73, i64* %RDI.i, align 8
Found line to remove! %ECX.i = bitcast %union.anon* %46 to i32*
Found line to remove! %75 = load i32, i32* %ECX.i, align 4
Found line to remove! %76 = zext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RSI.i23, align 8
Found line to remove! %77 = load i32, i32* %R8D.i38, align 4
Found line to remove! %78 = zext i32 %77 to i64
Found line to remove! store i64 %78, i64* %RCX.i41, align 8
Found line to remove! %79 = load i32, i32* %R9D.i36, align 4
Found line to remove! %80 = zext i32 %79 to i64
Found line to remove! store i64 %80, i64* %48, align 8
Found line to remove! %81 = load i32, i32* %R10D.i34, align 4
Found line to remove! %82 = zext i32 %81 to i64
Found line to remove! store i64 %82, i64* %50, align 8
Found line to remove! %83 = bitcast i64* %6 to i32**
Found line to remove! %84 = load i32*, i32** %83, align 8
Found line to remove! %85 = add i64 %74, 20
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! store i32 10, i32* %84, align 4
Found line to remove! %86 = load i64, i64* %6, align 8
Found line to remove! %87 = add i64 %86, 8
Found line to remove! %88 = load i64, i64* %3, align 8
Found line to remove! %89 = add i64 %88, 8
Found line to remove! store i64 %89, i64* %3, align 8
Found line to remove! %90 = inttoptr i64 %87 to i32*
Found line to remove! store i32 20, i32* %90, align 4
Found line to remove! %EBX.i = bitcast %union.anon* %11 to i32*
Found line to remove! %91 = load i64, i64* %RBP.i, align 8
Found line to remove! %92 = add i64 %91, -28
Found line to remove! %93 = load i32, i32* %EBX.i, align 4
Found line to remove! %94 = load i64, i64* %3, align 8
Found line to remove! %95 = add i64 %94, 3
Found line to remove! store i64 %95, i64* %3, align 8
Found line to remove! %96 = inttoptr i64 %92 to i32*
Found line to remove! store i32 %93, i32* %96, align 4
Found line to remove! %97 = load i64, i64* %RBP.i, align 8
Found line to remove! %98 = add i64 %97, -32
Found line to remove! %99 = load i32, i32* %R11D.i32, align 4
Found line to remove! %100 = load i64, i64* %3, align 8
Found line to remove! %101 = add i64 %100, 4
Found line to remove! store i64 %101, i64* %3, align 8
Found line to remove! %102 = inttoptr i64 %98 to i32*
Found line to remove! store i32 %99, i32* %102, align 4
Found line to remove! %103 = load i64, i64* %3, align 8
Found line to remove! %104 = add i64 %103, -198
Found line to remove! %105 = add i64 %103, 5
Found line to remove! %106 = load i64, i64* %6, align 8
Found line to remove! %107 = add i64 %106, -8
Found line to remove! %108 = inttoptr i64 %107 to i64*
Found line to remove! store i64 %105, i64* %108, align 8
Found line to remove! store i64 %107, i64* %6, align 8
Found line to remove! store i64 %104, i64* %3, align 8
Found line to remove! %call2_4005e6 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %104, %struct.Memory* %2)
Found line to remove! %109 = load i64, i64* %6, align 8
Found line to remove! %110 = load i64, i64* %3, align 8
Found line to remove! %111 = add i64 %109, 40
Found line to remove! store i64 %111, i64* %6, align 8
Found line to remove! %112 = icmp ugt i64 %109, -41
Found line to remove! %113 = zext i1 %112 to i8
Found line to remove! store i8 %113, i8* %20, align 1
Found line to remove! %114 = trunc i64 %111 to i32
Found line to remove! %115 = and i32 %114, 255
Found line to remove! %116 = tail call i32 @llvm.ctpop.i32(i32 %115)
Found line to remove! %117 = trunc i32 %116 to i8
Found line to remove! %118 = and i8 %117, 1
Found line to remove! %119 = xor i8 %118, 1
Found line to remove! store i8 %119, i8* %27, align 1
Found line to remove! %120 = xor i64 %111, %109
Found line to remove! %121 = lshr i64 %120, 4
Found line to remove! %122 = trunc i64 %121 to i8
Found line to remove! %123 = and i8 %122, 1
Found line to remove! store i8 %123, i8* %32, align 1
Found line to remove! %124 = icmp eq i64 %111, 0
Found line to remove! %125 = zext i1 %124 to i8
Found line to remove! store i8 %125, i8* %35, align 1
Found line to remove! %126 = lshr i64 %111, 63
Found line to remove! %127 = trunc i64 %126 to i8
Found line to remove! store i8 %127, i8* %38, align 1
Found line to remove! %128 = lshr i64 %109, 63
Found line to remove! %129 = xor i64 %126, %128
Found line to remove! %130 = add nuw nsw i64 %129, %126
Found line to remove! %131 = icmp eq i64 %130, 2
Found line to remove! %132 = zext i1 %131 to i8
Found line to remove! store i8 %132, i8* %44, align 1
Found line to remove! %133 = add i64 %110, 5
Found line to remove! store i64 %133, i64* %3, align 8
Found line to remove! %134 = add i64 %109, 48
Found line to remove! %135 = inttoptr i64 %111 to i64*
Found line to remove! %136 = load i64, i64* %135, align 8
Found line to remove! store i64 %136, i64* %RBX.i46, align 8
Found line to remove! store i64 %134, i64* %6, align 8
Found line to remove! %137 = add i64 %110, 6
Found line to remove! store i64 %137, i64* %3, align 8
Found line to remove! %138 = add i64 %109, 56
Found line to remove! %139 = inttoptr i64 %134 to i64*
Found line to remove! %140 = load i64, i64* %139, align 8
Found line to remove! store i64 %140, i64* %RBP.i, align 8
Found line to remove! store i64 %138, i64* %6, align 8
Found line to remove! %141 = add i64 %110, 7
Found line to remove! store i64 %141, i64* %3, align 8
Found line to remove! %142 = inttoptr i64 %138 to i64*
Found line to remove! %143 = load i64, i64* %142, align 8
Found line to remove! store i64 %143, i64* %3, align 8
Found line to remove! %144 = add i64 %109, 64
Found line to remove! store i64 %144, i64* %6, align 8
Found line to remove! ret %struct.Memory* %call2_4005e6
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%EAX = bitcast %union.anon* %3 to i32*', '%EBX = bitcast %union.anon* %4 to i32*', '%ECX = bitcast %union.anon* %5 to i32*', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %6 to i32*', '%R8D = bitcast %union.anon* %7 to i32*', '%R9D = bitcast %union.anon* %8 to i32*', '%9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0', '%R10D = bitcast %union.anon* %9 to i32*', '%10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0', '%R11D = bitcast %union.anon* %10 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%11 = load i64, i64* %RBP, align 8', '%12 = add i64 %1, 1', 'store i64 %12, i64* %PC, align 8', '%13 = load i64, i64* %RSP, align 8', '%14 = add i64 %13, -8', '%15 = inttoptr i64 %14 to i64*', 'store i64 %11, i64* %15, align 8', '%16 = load i64, i64* %PC, align 8', 'store i64 %14, i64* %RBP, align 8', '%17 = load i64, i64* %RBX, align 8', '%18 = add i64 %16, 4', 'store i64 %18, i64* %PC, align 8', '%19 = add i64 %13, -16', '%20 = inttoptr i64 %19 to i64*', 'store i64 %17, i64* %20, align 8', '%21 = load i64, i64* %PC, align 8', '%22 = add i64 %13, -56', 'store i64 %22, i64* %RSP, align 8', '%23 = icmp ult i64 %19, 40', '%24 = zext i1 %23 to i8', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %24, i8* %25, align 1', '%26 = trunc i64 %22 to i32', '%27 = and i32 %26, 255', '%28 = tail call i32 @llvm.ctpop.i32(i32 %27) #12', '%29 = trunc i32 %28 to i8', '%30 = and i8 %29, 1', '%31 = xor i8 %30, 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %31, i8* %32, align 1', '%33 = xor i64 %19, %22', '%34 = lshr i64 %33, 4', '%35 = trunc i64 %34 to i8', '%36 = and i8 %35, 1', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %36, i8* %37, align 1', '%38 = icmp eq i64 %22, 0', '%39 = zext i1 %38 to i8', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %39, i8* %40, align 1', '%41 = lshr i64 %22, 63', '%42 = trunc i64 %41 to i8', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %42, i8* %43, align 1', '%44 = lshr i64 %19, 63', '%45 = xor i64 %41, %44', '%46 = add nuw nsw i64 %45, %44', '%47 = icmp eq i64 %46, 2', '%48 = zext i1 %47 to i8', '%49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %48, i8* %49, align 1', 'store i64 100, i64* %RAX, align 8', 'store i64 300, i64* %RDX, align 8', '%52 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0', 'store i64 600, i64* %52, align 8', '%53 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0', 'store i64 10, i64* %53, align 8', '%54 = load i64, i64* %RBP, align 8', '%55 = add i64 %54, -12', '%56 = add i64 %21, 55', 'store i64 %56, i64* %PC, align 8', '%57 = inttoptr i64 %55 to i32*', 'store i32 0, i32* %57, align 4', '%58 = load i64, i64* %RBP, align 8', '%59 = add i64 %58, -16', '%60 = load i32, i32* %EDI, align 4', '%61 = load i64, i64* %PC, align 8', '%62 = add i64 %61, 3', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %59 to i32*', 'store i32 %60, i32* %63, align 4', '%64 = load i64, i64* %RBP, align 8', '%65 = add i64 %64, -24', '%66 = load i64, i64* %RSI, align 8', '%67 = load i64, i64* %PC, align 8', '%68 = add i64 %67, 4', 'store i64 %68, i64* %PC, align 8', '%69 = inttoptr i64 %65 to i64*', 'store i64 %66, i64* %69, align 8', '%70 = load i32, i32* %EAX, align 4', '%71 = zext i32 %70 to i64', '%72 = load i64, i64* %PC, align 8', 'store i64 %71, i64* %RDI, align 8', '%73 = load i32, i32* %ECX, align 4', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RSI, align 8', '%75 = load i32, i32* %R8D, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RCX, align 8', '%77 = load i32, i32* %R9D, align 4', '%78 = zext i32 %77 to i64', 'store i64 %78, i64* %50, align 8', '%79 = load i32, i32* %R10D, align 4', '%80 = zext i32 %79 to i64', 'store i64 %80, i64* %51, align 8', '%81 = bitcast i64* %RSP to i32**', '%82 = load i32*, i32** %81, align 8', '%83 = add i64 %72, 20', 'store i64 %83, i64* %PC, align 8', 'store i32 10, i32* %82, align 4', '%84 = load i64, i64* %RSP, align 8', '%85 = add i64 %84, 8', '%86 = load i64, i64* %PC, align 8', '%87 = add i64 %86, 8', 'store i64 %87, i64* %PC, align 8', '%88 = inttoptr i64 %85 to i32*', 'store i32 20, i32* %88, align 4', '%89 = load i64, i64* %RBP, align 8', '%90 = add i64 %89, -28', '%91 = load i32, i32* %EBX, align 4', '%92 = load i64, i64* %PC, align 8', '%93 = add i64 %92, 3', 'store i64 %93, i64* %PC, align 8', '%94 = inttoptr i64 %90 to i32*', 'store i32 %91, i32* %94, align 4', '%95 = load i64, i64* %RBP, align 8', '%96 = add i64 %95, -32', '%97 = load i32, i32* %R11D, align 4', '%98 = load i64, i64* %PC, align 8', '%99 = add i64 %98, 4', 'store i64 %99, i64* %PC, align 8', '%100 = inttoptr i64 %96 to i32*', 'store i32 %97, i32* %100, align 4', '%101 = load i64, i64* %PC, align 8', '%102 = add i64 %101, -198', '%103 = add i64 %101, 5', '%104 = load i64, i64* %RSP, align 8', '%105 = add i64 %104, -8', '%106 = inttoptr i64 %105 to i64*', 'store i64 %103, i64* %106, align 8', 'store i64 %105, i64* %RSP, align 8', 'store i64 %102, i64* %PC, align 8', '%107 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)', '%108 = load i64, i64* %RSP, align 8', '%109 = load i64, i64* %PC, align 8', '%110 = add i64 %108, 40', 'store i64 %110, i64* %RSP, align 8', '%111 = icmp ugt i64 %108, -41', '%112 = zext i1 %111 to i8', 'store i8 %112, i8* %25, align 1', '%113 = trunc i64 %110 to i32', '%114 = and i32 %113, 255', '%115 = tail call i32 @llvm.ctpop.i32(i32 %114) #12', '%116 = trunc i32 %115 to i8', '%117 = and i8 %116, 1', '%118 = xor i8 %117, 1', 'store i8 %118, i8* %32, align 1', '%119 = xor i64 %110, %108', '%120 = lshr i64 %119, 4', '%121 = trunc i64 %120 to i8', '%122 = and i8 %121, 1', 'store i8 %122, i8* %37, align 1', '%123 = icmp eq i64 %110, 0', '%124 = zext i1 %123 to i8', 'store i8 %124, i8* %40, align 1', '%125 = lshr i64 %110, 63', '%126 = trunc i64 %125 to i8', 'store i8 %126, i8* %43, align 1', '%127 = lshr i64 %108, 63', '%128 = xor i64 %125, %127', '%129 = add nuw nsw i64 %128, %125', '%130 = icmp eq i64 %129, 2', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %49, align 1', '%132 = add i64 %109, 5', 'store i64 %132, i64* %PC, align 8', '%133 = add i64 %108, 48', '%134 = inttoptr i64 %110 to i64*', '%135 = load i64, i64* %134, align 8', 'store i64 %135, i64* %RBX, align 8', 'store i64 %133, i64* %RSP, align 8', '%136 = add i64 %109, 6', 'store i64 %136, i64* %PC, align 8', '%137 = add i64 %108, 56', '%138 = inttoptr i64 %133 to i64*', '%139 = load i64, i64* %138, align 8', 'store i64 %139, i64* %RBP, align 8', 'store i64 %137, i64* %RSP, align 8', '%140 = add i64 %109, 7', 'store i64 %140, i64* %PC, align 8', '%141 = inttoptr i64 %137 to i64*', '%142 = load i64, i64* %141, align 8', 'store i64 %142, i64* %PC, align 8', '%143 = add i64 %108, 64', 'store i64 %143, i64* %RSP, align 8', 'ret %struct.Memory* %107'])
Keep: block_400580:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
Found line to remove! %EBX = bitcast %union.anon* %4 to i32*
Keep: %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %5 to i32*
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %6 to i32*
Keep: %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8D = bitcast %union.anon* %7 to i32*
Keep: %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
Found line to remove! %R9D = bitcast %union.anon* %8 to i32*
Found line to remove! %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
Found line to remove! %R10D = bitcast %union.anon* %9 to i32*
Found line to remove! %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
Found line to remove! %R11D = bitcast %union.anon* %10 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RBX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %11 = load i64, i64* %RBP, align 8
Found line to remove! %12 = add i64 %1, 1
Found line to remove! store i64 %12, i64* %PC, align 8
Found line to remove! %13 = load i64, i64* %RSP, align 8
Found line to remove! %14 = add i64 %13, -8
Found line to remove! %15 = inttoptr i64 %14 to i64*
Found line to remove! store i64 %11, i64* %15, align 8
Found line to remove! %16 = load i64, i64* %PC, align 8
Found line to remove! store i64 %14, i64* %RBP, align 8
Found line to remove! %17 = load i64, i64* %RBX, align 8
Found line to remove! %18 = add i64 %16, 4
Found line to remove! store i64 %18, i64* %PC, align 8
Found line to remove! %19 = add i64 %13, -16
Found line to remove! %20 = inttoptr i64 %19 to i64*
Found line to remove! store i64 %17, i64* %20, align 8
Found line to remove! %21 = load i64, i64* %PC, align 8
Found line to remove! %22 = add i64 %13, -56
Found line to remove! store i64 %22, i64* %RSP, align 8
Found line to remove! %23 = icmp ult i64 %19, 40
Found line to remove! %24 = zext i1 %23 to i8
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %24, i8* %25, align 1
Found line to remove! %26 = trunc i64 %22 to i32
Found line to remove! %27 = and i32 %26, 255
Found line to remove! %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #12
Found line to remove! %29 = trunc i32 %28 to i8
Found line to remove! %30 = and i8 %29, 1
Found line to remove! %31 = xor i8 %30, 1
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = xor i64 %19, %22
Found line to remove! %34 = lshr i64 %33, 4
Found line to remove! %35 = trunc i64 %34 to i8
Found line to remove! %36 = and i8 %35, 1
Found line to remove! %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %36, i8* %37, align 1
Found line to remove! %38 = icmp eq i64 %22, 0
Found line to remove! %39 = zext i1 %38 to i8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %39, i8* %40, align 1
Found line to remove! %41 = lshr i64 %22, 63
Found line to remove! %42 = trunc i64 %41 to i8
Found line to remove! %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %42, i8* %43, align 1
Found line to remove! %44 = lshr i64 %19, 63
Found line to remove! %45 = xor i64 %41, %44
Found line to remove! %46 = add nuw nsw i64 %45, %44
Found line to remove! %47 = icmp eq i64 %46, 2
Found line to remove! %48 = zext i1 %47 to i8
Found line to remove! %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %48, i8* %49, align 1
Found line to remove! store i64 100, i64* %RAX, align 8
Keep: store i64 200, i64* %RCX, align 8
Found line to remove! store i64 300, i64* %RDX, align 8
Keep: %50 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
Keep: store i64 400, i64* %50, align 8
Keep: %51 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
Keep: store i64 500, i64* %51, align 8
Found line to remove! %52 = getelementptr inbounds %union.anon, %union.anon* %9, i64 0, i32 0
Found line to remove! store i64 600, i64* %52, align 8
Found line to remove! %53 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0
Found line to remove! store i64 10, i64* %53, align 8
Keep: store i64 20, i64* %RBX, align 8
Found line to remove! %54 = load i64, i64* %RBP, align 8
Found line to remove! %55 = add i64 %54, -12
Found line to remove! %56 = add i64 %21, 55
Found line to remove! store i64 %56, i64* %PC, align 8
Found line to remove! %57 = inttoptr i64 %55 to i32*
Found line to remove! store i32 0, i32* %57, align 4
Found line to remove! %58 = load i64, i64* %RBP, align 8
Found line to remove! %59 = add i64 %58, -16
Found line to remove! %60 = load i32, i32* %EDI, align 4
Found line to remove! %61 = load i64, i64* %PC, align 8
Found line to remove! %62 = add i64 %61, 3
Found line to remove! store i64 %62, i64* %PC, align 8
Found line to remove! %63 = inttoptr i64 %59 to i32*
Found line to remove! store i32 %60, i32* %63, align 4
Found line to remove! %64 = load i64, i64* %RBP, align 8
Found line to remove! %65 = add i64 %64, -24
Found line to remove! %66 = load i64, i64* %RSI, align 8
Found line to remove! %67 = load i64, i64* %PC, align 8
Found line to remove! %68 = add i64 %67, 4
Found line to remove! store i64 %68, i64* %PC, align 8
Found line to remove! %69 = inttoptr i64 %65 to i64*
Found line to remove! store i64 %66, i64* %69, align 8
Found line to remove! %70 = load i32, i32* %EAX, align 4
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! %72 = load i64, i64* %PC, align 8
Found line to remove! store i64 %71, i64* %RDI, align 8
Found line to remove! %73 = load i32, i32* %ECX, align 4
Found line to remove! %74 = zext i32 %73 to i64
Found line to remove! store i64 %74, i64* %RSI, align 8
Found line to remove! %75 = load i32, i32* %R8D, align 4
Found line to remove! %76 = zext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RCX, align 8
Found line to remove! %77 = load i32, i32* %R9D, align 4
Found line to remove! %78 = zext i32 %77 to i64
Found line to remove! store i64 %78, i64* %50, align 8
Found line to remove! %79 = load i32, i32* %R10D, align 4
Found line to remove! %80 = zext i32 %79 to i64
Found line to remove! store i64 %80, i64* %51, align 8
Found line to remove! %81 = bitcast i64* %RSP to i32**
Found line to remove! %82 = load i32*, i32** %81, align 8
Found line to remove! %83 = add i64 %72, 20
Found line to remove! store i64 %83, i64* %PC, align 8
Found line to remove! store i32 10, i32* %82, align 4
Found line to remove!Writing '/tmp/tmp3ip8i8or.dot'...
Writing '/tmp/tmp3ip8i8or.dot':Done

Reading LLVM: /tmp/tmpy600knq7-query.ll
Extracting function [main] from /tmp/tmpy600knq7-query.ll
Dot file generated!
Writing '/tmp/tmpyt332hxi.dot'...
Writing '/tmp/tmpyt332hxi.dot':Done

Reading LLVM: /tmp/tmpheg3vd1l-target.ll
Extracting function [main] from /tmp/tmpheg3vd1l-target.ll
Dot file generated!
 %84 = load i64, i64* %RSP, align 8
Found line to remove! %85 = add i64 %84, 8
Found line to remove! %86 = load i64, i64* %PC, align 8
Found line to remove! %87 = add i64 %86, 8
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %88 = inttoptr i64 %85 to i32*
Found line to remove! store i32 20, i32* %88, align 4
Found line to remove! %89 = load i64, i64* %RBP, align 8
Found line to remove! %90 = add i64 %89, -28
Found line to remove! %91 = load i32, i32* %EBX, align 4
Found line to remove! %92 = load i64, i64* %PC, align 8
Found line to remove! %93 = add i64 %92, 3
Found line to remove! store i64 %93, i64* %PC, align 8
Found line to remove! %94 = inttoptr i64 %90 to i32*
Found line to remove! store i32 %91, i32* %94, align 4
Found line to remove! %95 = load i64, i64* %RBP, align 8
Found line to remove! %96 = add i64 %95, -32
Found line to remove! %97 = load i32, i32* %R11D, align 4
Found line to remove! %98 = load i64, i64* %PC, align 8
Found line to remove! %99 = add i64 %98, 4
Found line to remove! store i64 %99, i64* %PC, align 8
Found line to remove! %100 = inttoptr i64 %96 to i32*
Found line to remove! store i32 %97, i32* %100, align 4
Found line to remove! %101 = load i64, i64* %PC, align 8
Found line to remove! %102 = add i64 %101, -198
Found line to remove! %103 = add i64 %101, 5
Found line to remove! %104 = load i64, i64* %RSP, align 8
Found line to remove! %105 = add i64 %104, -8
Found line to remove! %106 = inttoptr i64 %105 to i64*
Found line to remove! store i64 %103, i64* %106, align 8
Found line to remove! store i64 %105, i64* %RSP, align 8
Found line to remove! store i64 %102, i64* %PC, align 8
Found line to remove! %107 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %102, %struct.Memory* %2)
Found line to remove! %108 = load i64, i64* %RSP, align 8
Found line to remove! %109 = load i64, i64* %PC, align 8
Found line to remove! %110 = add i64 %108, 40
Found line to remove! store i64 %110, i64* %RSP, align 8
Found line to remove! %111 = icmp ugt i64 %108, -41
Found line to remove! %112 = zext i1 %111 to i8
Found line to remove! store i8 %112, i8* %25, align 1
Found line to remove! %113 = trunc i64 %110 to i32
Found line to remove! %114 = and i32 %113, 255
Found line to remove! %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #12
Found line to remove! %116 = trunc i32 %115 to i8
Found line to remove! %117 = and i8 %116, 1
Found line to remove! %118 = xor i8 %117, 1
Found line to remove! store i8 %118, i8* %32, align 1
Found line to remove! %119 = xor i64 %110, %108
Found line to remove! %120 = lshr i64 %119, 4
Found line to remove! %121 = trunc i64 %120 to i8
Found line to remove! %122 = and i8 %121, 1
Found line to remove! store i8 %122, i8* %37, align 1
Found line to remove! %123 = icmp eq i64 %110, 0
Found line to remove! %124 = zext i1 %123 to i8
Found line to remove! store i8 %124, i8* %40, align 1
Found line to remove! %125 = lshr i64 %110, 63
Found line to remove! %126 = trunc i64 %125 to i8
Found line to remove! store i8 %126, i8* %43, align 1
Found line to remove! %127 = lshr i64 %108, 63
Found line to remove! %128 = xor i64 %125, %127
Found line to remove! %129 = add nuw nsw i64 %128, %125
Found line to remove! %130 = icmp eq i64 %129, 2
Found line to remove! %131 = zext i1 %130 to i8
Found line to remove! store i8 %131, i8* %49, align 1
Found line to remove! %132 = add i64 %109, 5
Found line to remove! store i64 %132, i64* %PC, align 8
Found line to remove! %133 = add i64 %108, 48
Found line to remove! %134 = inttoptr i64 %110 to i64*
Found line to remove! %135 = load i64, i64* %134, align 8
Found line to remove! store i64 %135, i64* %RBX, align 8
Found line to remove! store i64 %133, i64* %RSP, align 8
Found line to remove! %136 = add i64 %109, 6
Found line to remove! store i64 %136, i64* %PC, align 8
Found line to remove! %137 = add i64 %108, 56
Found line to remove! %138 = inttoptr i64 %133 to i64*
Found line to remove! %139 = load i64, i64* %138, align 8
Found line to remove! store i64 %139, i64* %RBP, align 8
Found line to remove! store i64 %137, i64* %RSP, align 8
Found line to remove! %140 = add i64 %109, 7
Found line to remove! store i64 %140, i64* %PC, align 8
Found line to remove! %141 = inttoptr i64 %137 to i64*
Found line to remove! %142 = load i64, i64* %141, align 8
Found line to remove! store i64 %142, i64* %PC, align 8
Found line to remove! %143 = add i64 %108, 64
Found line to remove! store i64 %143, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %107
================ Starting round 2
- 0 %RBX.i46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
- 1 %RCX.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 2 store i64 200, i64* %RCX.i41, align 8
- 3 %var_2_48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 4 store i64 400, i64* %var_2_48, align 8
- 5 %var_2_50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
- 6 store i64 500, i64* %var_2_50, align 8
- 7 store i64 20, i64* %RBX.i46, align 8
- 8 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3902aee840>, {0: {0}, 1: {1}, 2: {2, 4, 6, 7}, 3: {3}, 4: {2, 4, 6, 7}, 5: {5}, 6: {2, 4, 6, 7}, 7: {2, 4, 6, 7}, 8: {8}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f3902aee840>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 store store
EXACT 3 getelementptr getelementptr
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 store store
EXACT 7 store store
EXACT 8 ret ret
================ Starting round 3
- 0 %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
- 1 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 2 store i64 200, i64* %RCX, align 8
- 3 %var_2_50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 4 store i64 400, i64* %var_2_50, align 8
- 5 %var_2_51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
- 6 store i64 500, i64* %var_2_51, align 8
- 7 store i64 20, i64* %RBX, align 8
- 8 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f39025d2400>, {0: {0}, 1: {1}, 2: {2, 4, 6, 7}, 3: {3}, 4: {2, 4, 6, 7}, 5: {5}, 6: {2, 4, 6, 7}, 7: {2, 4, 6, 7}, 8: {8}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f39025d2400>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 store store
EXACT 3 getelementptr getelementptr
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 store store
EXACT 7 store store
EXACT 8 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RBX.i46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0', '%RCX.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 200, i64* %RCX.i41, align 8', '%var_2_48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', 'store i64 400, i64* %var_2_48, align 8', '%var_2_50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0', 'store i64 500, i64* %var_2_50, align 8', 'store i64 20, i64* %RBX.i46, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %RBX.i46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
Found line to remove! %RCX.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 200, i64* %RCX.i41, align 8
Found line to remove! %var_2_48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! store i64 400, i64* %var_2_48, align 8
Found line to remove! %var_2_50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
Found line to remove! store i64 500, i64* %var_2_50, align 8
Found line to remove! store i64 20, i64* %RBX.i46, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 200, i64* %RCX, align 8', '%var_2_50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', 'store i64 400, i64* %var_2_50, align 8', '%var_2_51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0', 'store i64 500, i64* %var_2_51, align 8', 'store i64 20, i64* %RBX, align 8', 'ret %struct.Memory* %2'])
Keep: block_400580:
Found line to remove! %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 200, i64* %RCX, align 8
Found line to remove! %var_2_50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! store i64 400, i64* %var_2_50, align 8
Found line to remove! %var_2_51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
Found line to remove! store i64 500, i64* %var_2_51, align 8
Found line to remove! store i64 20, i64* %RBX, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_2_1/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_2_1/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
