Writing '/tmp/tmpgso0i7zm.dot'...
Writing '/tmp/tmpgso0i7zm.dot':Done

Reading LLVM: /tmp/tmpx6_rw8lx-query.ll
Extracting function [main] from /tmp/tmpx6_rw8lx-query.ll
Dot file generated!
Writing '/tmp/tmpc6d2170z.dot'...
Writing '/tmp/tmpc6d2170z.dot':Done

Reading LLVM: /tmp/tmpbek6_y1v-target.ll
Extracting function [main] from /tmp/tmpbek6_y1v-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 48 %RAX.i25 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 49 %40 = add i64 %7, -28
- 50 store i64 %40, i64* %RAX.i25, align 8
- 51 %41 = add i64 %7, -12
- 52 %42 = add i64 %10, 18
- 53 store i64 %42, i64* %3, align 8
- 54 %43 = inttoptr i64 %41 to i32*
- 55 store i32 0, i32* %43, align 4
- 56 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 57 %EDI.i20 = bitcast %union.anon* %44 to i32*
- 58 %45 = load i64, i64* %RBP.i, align 8
- 59 %46 = add i64 %45, -8
- 60 %47 = load i32, i32* %EDI.i20, align 4
- 61 %48 = load i64, i64* %3, align 8
- 62 %49 = add i64 %48, 3
- 63 store i64 %49, i64* %3, align 8
- 64 %50 = inttoptr i64 %46 to i32*
- 65 store i32 %47, i32* %50, align 4
- 66 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 67 %51 = load i64, i64* %RBP.i, align 8
- 68 %52 = add i64 %51, -16
- 69 %53 = load i64, i64* %RSI.i, align 8
- 70 %54 = load i64, i64* %3, align 8
- 71 %55 = add i64 %54, 4
- 72 store i64 %55, i64* %3, align 8
- 73 %56 = inttoptr i64 %52 to i64*
- 74 store i64 %53, i64* %56, align 8
- 75 %RDI.i16 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
- 76 %57 = load i64, i64* %3, align 8
- 77 %58 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%G_0x400594_type* @G_0x400594 to i64), i64 76) to i32*), align 4
- 78 %59 = load i64, i64* %RBP.i, align 8
- 79 %60 = add i64 %59, -20
- 80 %61 = add i64 %57, 10
- 81 store i64 %61, i64* %3, align 8
- 82 %62 = inttoptr i64 %60 to i32*
- 83 store i32 %58, i32* %62, align 4
- 84 %63 = load i64, i64* %RAX.i25, align 8
- 85 %64 = load i64, i64* %3, align 8
- 86 store i64 %63, i64* %RDI.i16, align 8
- 87 %65 = add i64 %64, 28
- 88 %66 = add i64 %64, 8
- 89 %67 = load i64, i64* %6, align 8
- 90 %68 = add i64 %67, -8
- 91 %69 = inttoptr i64 %68 to i64*
- 92 store i64 %66, i64* %69, align 8
- 93 store i64 %68, i64* %6, align 8
- 94 store i64 %65, i64* %3, align 8
- 95 %call2_4004d7 = tail call %struct.Memory* @sub_4004f0.printit(%struct.State* %0, i64 %65, %struct.Memory* %2)
- 96 %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 97 %ECX.i9 = bitcast %union.anon* %70 to i32*
- 98 %RCX.i = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0
- 99 %71 = load i64, i64* %3, align 8
- 100 store i64 0, i64* %RCX.i, align 8
- 101 %EAX.i = bitcast %union.anon* %39 to i32*
- 102 %72 = load i64, i64* %RBP.i, align 8
- 103 %73 = add i64 %72, -24
- 104 %74 = load i32, i32* %EAX.i, align 4
- 105 %75 = add i64 %71, 5
- 106 store i64 %75, i64* %3, align 8
- 107 %76 = inttoptr i64 %73 to i32*
- 108 store i32 %74, i32* %76, align 4
- 109 %77 = load i32, i32* %ECX.i9, align 4
- 110 %78 = zext i32 %77 to i64
- 111 %79 = load i64, i64* %3, align 8
- 112 store i64 %78, i64* %RAX.i25, align 8
- 113 %80 = load i64, i64* %6, align 8
- 114 %81 = add i64 %80, 32
- 115 store i64 %81, i64* %6, align 8
- 116 %82 = icmp ugt i64 %80, -33
- 117 %83 = zext i1 %82 to i8
- 118 store i8 %83, i8* %14, align 1
- 119 %84 = trunc i64 %81 to i32
- 120 %85 = and i32 %84, 255
- 121 %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
- 122 %87 = trunc i32 %86 to i8
- 123 %88 = and i8 %87, 1
- 124 %89 = xor i8 %88, 1
- 125 store i8 %89, i8* %21, align 1
- 126 %90 = xor i64 %81, %80
- 127 %91 = lshr i64 %90, 4
- 128 %92 = trunc i64 %91 to i8
- 129 %93 = and i8 %92, 1
- 130 store i8 %93, i8* %26, align 1
- 131 %94 = icmp eq i64 %81, 0
- 132 %95 = zext i1 %94 to i8
- 133 store i8 %95, i8* %29, align 1
- 134 %96 = lshr i64 %81, 63
- 135 %97 = trunc i64 %96 to i8
- 136 store i8 %97, i8* %32, align 1
- 137 %98 = lshr i64 %80, 63
- 138 %99 = xor i64 %96, %98
- 139 %100 = add nuw nsw i64 %99, %96
- 140 %101 = icmp eq i64 %100, 2
- 141 %102 = zext i1 %101 to i8
- 142 store i8 %102, i8* %38, align 1
- 143 %103 = add i64 %79, 7
- 144 store i64 %103, i64* %3, align 8
- 145 %104 = add i64 %80, 40
- 146 %105 = inttoptr i64 %81 to i64*
- 147 %106 = load i64, i64* %105, align 8
- 148 store i64 %106, i64* %RBP.i, align 8
- 149 store i64 %104, i64* %6, align 8
- 150 %107 = add i64 %79, 8
- 151 store i64 %107, i64* %3, align 8
- 152 %108 = inttoptr i64 %104 to i64*
- 153 %109 = load i64, i64* %108, align 8
- 154 store i64 %109, i64* %3, align 8
- 155 %110 = add i64 %80, 48
- 156 store i64 %110, i64* %6, align 8
- 157 ret %struct.Memory* %call2_4004d7
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb000dbd0d0>, {0: {0}, 1: {12}, 2: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 3: {14}, 4: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 5: {11}, 6: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 7: {65, 17, 94}, 8: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 9: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 10: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 11: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 12: {22}, 13: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 14: {24}, 15: {132, 43, 141, 110, 117, 54, 25}, 16: {26}, 17: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 18: {128, 38, 135, 47, 119, 122, 28, 31}, 19: {120, 29}, 20: {121, 99, 30}, 21: {128, 38, 135, 47, 119, 122, 28, 31}, 22: {32, 129, 123, 39}, 23: {33, 124}, 24: {34}, 25: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 26: {138, 51, 36, 126}, 27: {37, 127}, 28: {128, 38, 135, 47, 119, 122, 28, 31}, 29: {32, 129, 123, 39}, 30: {40}, 31: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 32: {42, 131}, 33: {132, 43, 141, 110, 117, 54, 25}, 34: {44}, 35: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 36: {137, 50, 134, 46}, 37: {128, 38, 135, 47, 119, 122, 28, 31}, 38: {48}, 39: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 40: {137, 50, 134, 46}, 41: {138, 51, 36, 126}, 42: {139, 52}, 43: {140, 53}, 44: {132, 43, 141, 110, 117, 54, 25}, 45: {55}, 46: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 47: {1}, 48: {8, 10, 7}, 49: {57}, 50: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 51: {59}, 52: {60}, 53: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 54: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 55: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 56: {5}, 57: {2, 4, 6}, 58: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 59: {65, 17, 94}, 60: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 61: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 62: {68}, 63: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 64: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 65: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 66: {9}, 67: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 68: {73}, 69: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 70: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 71: {76}, 72: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 73: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 74: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 75: {8, 10, 7}, 76: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 77: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 78: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 79: {83}, 80: {84}, 81: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 82: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 83: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 84: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 85: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 86: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 87: {91}, 88: {92, 150}, 89: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 90: {65, 17, 94}, 91: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 92: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 93: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 94: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 95: {121, 99, 30}, 96: {3}, 97: {2, 4, 6}, 98: {8, 10, 7}, 99: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 100: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 101: {2, 4, 6}, 102: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 103: {103}, 104: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 105: {105}, 106: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 107: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 108: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 109: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 110: {132, 43, 141, 110, 117, 54, 25}, 111: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 112: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 113: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 114: {114}, 115: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 116: {116}, 117: {132, 43, 141, 110, 117, 54, 25}, 118: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 119: {128, 38, 135, 47, 119, 122, 28, 31}, 120: {120, 29}, 121: {121, 99, 30}, 122: {128, 38, 135, 47, 119, 122, 28, 31}, 123: {32, 129, 123, 39}, 124: {33, 124}, 125: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 126: {138, 51, 36, 126}, 127: {37, 127}, 128: {128, 38, 135, 47, 119, 122, 28, 31}, 129: {32, 129, 123, 39}, 130: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 131: {42, 131}, 132: {132, 43, 141, 110, 117, 54, 25}, 133: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 134: {137, 50, 134, 46}, 135: {128, 38, 135, 47, 119, 122, 28, 31}, 136: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 137: {137, 50, 134, 46}, 138: {138, 51, 36, 126}, 139: {139, 52}, 140: {140, 53}, 141: {132, 43, 141, 110, 117, 54, 25}, 142: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 143: {143}, 144: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 145: {145}, 146: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 147: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 148: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 149: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 150: {92, 150}, 151: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 152: {70, 107, 78, 18, 146, 86, 152, 62, 95}, 153: {13, 16, 147, 20, 153, 64, 66, 67, 72, 74, 75, 80, 81, 82, 88, 89, 93, 100, 102, 104, 109, 111, 113}, 154: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 155: {155}, 156: {130, 133, 136, 142, 15, 144, 19, 148, 21, 149, 23, 151, 154, 27, 156, 35, 41, 45, 49, 56, 58, 61, 63, 69, 71, 77, 79, 85, 87, 90, 96, 97, 98, 101, 106, 108, 112, 115, 118, 125}, 157: {157}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb000dbd0d0>, {0: {0}, 1: {12}, 2: {13}, 3: {14}, 4: {15}, 5: {11}, 6: {16}, 7: {17}, 8: {18}, 9: {19}, 10: {20}, 11: {21}, 12: {22}, 13: {23}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {30}, 21: {31}, 22: {32}, 23: {33}, 24: {34}, 25: {35}, 26: {36}, 27: {37}, 28: {38}, 29: {39}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {46}, 37: {47}, 38: {48}, 39: {49}, 40: {50}, 41: {51}, 42: {52}, 43: {53}, 44: {54}, 45: {55}, 46: {56}, 47: {1}, 48: {7}, 49: {57}, 50: {58}, 51: {59}, 52: {60}, 53: {61}, 54: {62}, 55: {63}, 56: {5}, 57: {6}, 58: {64}, 59: {65}, 60: {66}, 61: {67}, 62: {68}, 63: {69}, 64: {70}, 65: {71}, 66: {9}, 67: {72}, 68: {73}, 69: {74}, 70: {75}, 71: {76}, 72: {77}, 73: {78}, 74: {79}, 75: {10}, 76: {80}, 77: {81}, 78: {82}, 79: {83}, 80: {84}, 81: {85}, 82: {86}, 83: {87}, 84: {88}, 85: {89}, 86: {90}, 87: {91}, 88: {92}, 89: {93}, 90: {94}, 91: {95}, 92: {96}, 93: {97}, 94: {98}, 95: {99}, 96: {3}, 97: {4}, 98: {8}, 99: {100}, 100: {101}, 101: {2}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
EXACT 49 add add
EXACT 50 store store
EXACT 51 add add
EXACT 52 add add
EXACT 53 store store
EXACT 54 inttoptr inttoptr
EXACT 55 store store
EXACT 56 getelementptr getelementptr
EXACT 57 bitcast bitcast
EXACT 58 load load
EXACT 59 add add
EXACT 60 load load
EXACT 61 load load
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 getelementptr getelementptr
EXACT 67 load load
EXACT 68 add add
EXACT 69 load load
EXACT 70 load load
EXACT 71 add add
EXACT 72 store store
EXACT 73 inttoptr inttoptr
EXACT 74 store store
EXACT 75 getelementptr getelementptr
EXACT 76 load load
EXACT 77 load load
EXACT 78 load load
EXACT 79 add add
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 store store
EXACT 84 load load
EXACT 85 load load
EXACT 86 store store
EXACT 87 add add
EXACT 88 add add
EXACT 89 load load
EXACT 90 add add
EXACT 91 inttoptr inttoptr
EXACT 92 store store
EXACT 93 store store
EXACT 94 store store
EXACT 95 tail tail
EXACT 96 getelementptr getelementptr
EXACT 97 bitcast bitcast
EXACT 98 getelementptr getelementptr
EXACT 99 load load
EXACT 100 store store
EXACT 101 bitcast bitcast
EXACT 102 load load
EXACT 103 add add
EXACT 104 load load
EXACT 105 add add
EXACT 106 store store
EXACT 107 inttoptr inttoptr
EXACT 108 store store
EXACT 109 load load
EXACT 110 zext zext
EXACT 111 load load
EXACT 112 store store
EXACT 113 load load
EXACT 114 add add
EXACT 115 store store
EXACT 116 icmp icmp
EXACT 117 zext zext
EXACT 118 store store
EXACT 119 trunc trunc
EXACT 120 and and
EXACT 121 tail tail
EXACT 122 trunc trunc
EXACT 123 and and
EXACT 124 xor xor
EXACT 125 store store
EXACT 126 xor xor
EXACT 127 lshr lshr
EXACT 128 trunc trunc
EXACT 129 and and
EXACT 130 store store
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 lshr lshr
EXACT 135 trunc trunc
EXACT 136 store store
EXACT 137 lshr lshr
EXACT 138 xor xor
EXACT 139 add add
EXACT 140 icmp icmp
EXACT 141 zext zext
EXACT 142 store store
EXACT 143 add add
EXACT 144 store store
EXACT 145 add add
EXACT 146 inttoptr inttoptr
EXACT 147 load load
EXACT 148 store store
EXACT 149 store store
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 load load
EXACT 154 store store
EXACT 155 add add
EXACT 156 store store
EXACT 157 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 4 %ECX = bitcast %union.anon* %4 to i32*
- 5 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 6 %EDI = bitcast %union.anon* %5 to i32*
- 7 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 8 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 9 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 10 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %6 = load i64, i64* %RBP, align 8
- 14 %7 = add i64 %1, 1
- 15 store i64 %7, i64* %PC, align 8
- 16 %8 = load i64, i64* %RSP, align 8
- 17 %9 = add i64 %8, -8
- 18 %10 = inttoptr i64 %9 to i64*
- 19 store i64 %6, i64* %10, align 8
- 20 %11 = load i64, i64* %PC, align 8
- 21 store i64 %9, i64* %RBP, align 8
- 22 %12 = add i64 %8, -40
- 23 store i64 %12, i64* %RSP, align 8
- 24 %13 = icmp ult i64 %9, 32
- 25 %14 = zext i1 %13 to i8
- 26 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 27 store i8 %14, i8* %15, align 1
- 28 %16 = trunc i64 %12 to i32
- 29 %17 = and i32 %16, 255
- 30 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 31 %19 = trunc i32 %18 to i8
- 32 %20 = and i8 %19, 1
- 33 %21 = xor i8 %20, 1
- 34 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 35 store i8 %21, i8* %22, align 1
- 36 %23 = xor i64 %9, %12
- 37 %24 = lshr i64 %23, 4
- 38 %25 = trunc i64 %24 to i8
- 39 %26 = and i8 %25, 1
- 40 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 41 store i8 %26, i8* %27, align 1
- 42 %28 = icmp eq i64 %12, 0
- 43 %29 = zext i1 %28 to i8
- 44 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 45 store i8 %29, i8* %30, align 1
- 46 %31 = lshr i64 %12, 63
- 47 %32 = trunc i64 %31 to i8
- 48 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 49 store i8 %32, i8* %33, align 1
- 50 %34 = lshr i64 %9, 63
- 51 %35 = xor i64 %31, %34
- 52 %36 = add nuw nsw i64 %35, %34
- 53 %37 = icmp eq i64 %36, 2
- 54 %38 = zext i1 %37 to i8
- 55 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 56 store i8 %38, i8* %39, align 1
- 57 %40 = add i64 %8, -28
- 58 store i64 %40, i64* %RAX, align 8
- 59 %41 = add i64 %8, -12
- 60 %42 = add i64 %11, 18
- 61 store i64 %42, i64* %PC, align 8
- 62 %43 = inttoptr i64 %41 to i32*
- 63 store i32 0, i32* %43, align 4
- 64 %44 = load i64, i64* %RBP, align 8
- 65 %45 = add i64 %44, -8
- 66 %46 = load i32, i32* %EDI, align 4
- 67 %47 = load i64, i64* %PC, align 8
- 68 %48 = add i64 %47, 3
- 69 store i64 %48, i64* %PC, align 8
- 70 %49 = inttoptr i64 %45 to i32*
- 71 store i32 %46, i32* %49, align 4
- 72 %50 = load i64, i64* %RBP, align 8
- 73 %51 = add i64 %50, -16
- 74 %52 = load i64, i64* %RSI, align 8
- 75 %53 = load i64, i64* %PC, align 8
- 76 %54 = add i64 %53, 4
- 77 store i64 %54, i64* %PC, align 8
- 78 %55 = inttoptr i64 %51 to i64*
- 79 store i64 %52, i64* %55, align 8
- 80 %56 = load i64, i64* %PC, align 8
- 81 %57 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_400590__rodata_type* @seg_400590__rodata to i64), i64 4) to i32*), align 4
- 82 %58 = load i64, i64* %RBP, align 8
- 83 %59 = add i64 %58, -20
- 84 %60 = add i64 %56, 10
- 85 store i64 %60, i64* %PC, align 8
- 86 %61 = inttoptr i64 %59 to i32*
- 87 store i32 %57, i32* %61, align 4
- 88 %62 = load i64, i64* %RAX, align 8
- 89 %63 = load i64, i64* %PC, align 8
- 90 store i64 %62, i64* %RDI, align 8
- 91 %64 = add i64 %63, 28
- 92 %65 = add i64 %63, 8
- 93 %66 = load i64, i64* %RSP, align 8
- 94 %67 = add i64 %66, -8
- 95 %68 = inttoptr i64 %67 to i64*
- 96 store i64 %65, i64* %68, align 8
- 97 store i64 %67, i64* %RSP, align 8
- 98 store i64 %64, i64* %PC, align 8
- 99 %69 = tail call %struct.Memory* @sub_4004f0_printit_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %2)
- 100 %70 = load i64, i64* %PC, align 8
- 101 store i64 0, i64* %RCX, align 8
- 102 %71 = load i64, i64* %RBP, align 8
- 103 %72 = add i64 %71, -24
- 104 %73 = load i32, i32* %EAX, align 4
- 105 %74 = add i64 %70, 5
- 106 store i64 %74, i64* %PC, align 8
- 107 %75 = inttoptr i64 %72 to i32*
- 108 store i32 %73, i32* %75, align 4
- 109 %76 = load i32, i32* %ECX, align 4
- 110 %77 = zext i32 %76 to i64
- 111 %78 = load i64, i64* %PC, align 8
- 112 store i64 %77, i64* %RAX, align 8
- 113 %79 = load i64, i64* %RSP, align 8
- 114 %80 = add i64 %79, 32
- 115 store i64 %80, i64* %RSP, align 8
- 116 %81 = icmp ugt i64 %79, -33
- 117 %82 = zext i1 %81 to i8
- 118 store i8 %82, i8* %15, align 1
- 119 %83 = trunc i64 %80 to i32
- 120 %84 = and i32 %83, 255
- 121 %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #12
- 122 %86 = trunc i32 %85 to i8
- 123 %87 = and i8 %86, 1
- 124 %88 = xor i8 %87, 1
- 125 store i8 %88, i8* %22, align 1
- 126 %89 = xor i64 %80, %79
- 127 %90 = lshr i64 %89, 4
- 128 %91 = trunc i64 %90 to i8
- 129 %92 = and i8 %91, 1
- 130 store i8 %92, i8* %27, align 1
- 131 %93 = icmp eq i64 %80, 0
- 132 %94 = zext i1 %93 to i8
- 133 store i8 %94, i8* %30, align 1
- 134 %95 = lshr i64 %80, 63
- 135 %96 = trunc i64 %95 to i8
- 136 store i8 %96, i8* %33, align 1
- 137 %97 = lshr i64 %79, 63
- 138 %98 = xor i64 %95, %97
- 139 %99 = add nuw nsw i64 %98, %95
- 140 %100 = icmp eq i64 %99, 2
- 141 %101 = zext i1 %100 to i8
- 142 store i8 %101, i8* %39, align 1
- 143 %102 = add i64 %78, 7
- 144 store i64 %102, i64* %PC, align 8
- 145 %103 = add i64 %79, 40
- 146 %104 = inttoptr i64 %80 to i64*
- 147 %105 = load i64, i64* %104, align 8
- 148 store i64 %105, i64* %RBP, align 8
- 149 store i64 %103, i64* %RSP, align 8
- 150 %106 = add i64 %78, 8
- 151 store i64 %106, i64* %PC, align 8
- 152 %107 = inttoptr i64 %103 to i64*
- 153 %108 = load i64, i64* %107, align 8
- 154 store i64 %108, i64* %PC, align 8
- 155 %109 = add i64 %79, 48
- 156 store i64 %109, i64* %RSP, align 8
- 157 ret %struct.Memory* %69
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb0000cd048>, {0: {0}, 1: {47}, 2: {57, 101, 97}, 3: {96}, 4: {57, 101, 97}, 5: {56}, 6: {57, 101, 97}, 7: {48, 98, 75}, 8: {48, 98, 75}, 9: {66}, 10: {48, 98, 75}, 11: {5}, 12: {1}, 13: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 14: {3}, 15: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 16: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 17: {90, 59, 7}, 18: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 19: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 20: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 21: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 22: {12}, 23: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 24: {14}, 25: {33, 132, 44, 141, 110, 15, 117}, 26: {16}, 27: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 28: {128, 37, 135, 18, 21, 119, 122, 28}, 29: {120, 19}, 30: {121, 20, 95}, 31: {128, 37, 135, 18, 21, 119, 122, 28}, 32: {129, 123, 29, 22}, 33: {124, 23}, 34: {24}, 35: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 36: {41, 26, 126, 138}, 37: {27, 127}, 38: {128, 37, 135, 18, 21, 119, 122, 28}, 39: {129, 123, 29, 22}, 40: {30}, 41: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 42: {32, 131}, 43: {33, 132, 44, 141, 110, 15, 117}, 44: {34}, 45: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 46: {40, 137, 36, 134}, 47: {128, 37, 135, 18, 21, 119, 122, 28}, 48: {38}, 49: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 50: {40, 137, 36, 134}, 51: {41, 26, 126, 138}, 52: {42, 139}, 53: {43, 140}, 54: {33, 132, 44, 141, 110, 15, 117}, 55: {45}, 56: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 57: {49}, 58: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 59: {51}, 60: {52}, 61: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 62: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 63: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 64: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 65: {90, 59, 7}, 66: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 67: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 68: {62}, 69: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 70: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 71: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 72: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 73: {68}, 74: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 75: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 76: {71}, 77: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 78: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 79: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 80: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 81: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 82: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 83: {79}, 84: {80}, 85: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 86: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 87: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 88: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 89: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 90: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 91: {87}, 92: {88, 150}, 93: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 94: {90, 59, 7}, 95: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 96: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 97: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 98: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 99: {121, 20, 95}, 100: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 101: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 102: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 103: {103}, 104: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 105: {105}, 106: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 107: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 108: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 109: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 110: {33, 132, 44, 141, 110, 15, 117}, 111: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 112: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 113: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 114: {114}, 115: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 116: {116}, 117: {33, 132, 44, 141, 110, 15, 117}, 118: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 119: {128, 37, 135, 18, 21, 119, 122, 28}, 120: {120, 19}, 121: {121, 20, 95}, 122: {128, 37, 135, 18, 21, 119, 122, 28}, 123: {129, 123, 29, 22}, 124: {124, 23}, 125: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 126: {41, 26, 126, 138}, 127: {27, 127}, 128: {128, 37, 135, 18, 21, 119, 122, 28}, 129: {129, 123, 29, 22}, 130: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 131: {32, 131}, 132: {33, 132, 44, 141, 110, 15, 117}, 133: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 134: {40, 137, 36, 134}, 135: {128, 37, 135, 18, 21, 119, 122, 28}, 136: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 137: {40, 137, 36, 134}, 138: {41, 26, 126, 138}, 139: {42, 139}, 140: {43, 140}, 141: {33, 132, 44, 141, 110, 15, 117}, 142: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 143: {143}, 144: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 145: {145}, 146: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 147: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 148: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 149: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 150: {88, 150}, 151: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 152: {64, 8, 73, 107, 82, 146, 54, 152, 91}, 153: {2, 6, 10, 147, 153, 58, 60, 61, 67, 69, 70, 76, 77, 78, 84, 85, 89, 99, 102, 104, 109, 111, 113}, 154: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 155: {155}, 156: {130, 4, 133, 136, 9, 11, 13, 142, 144, 17, 148, 149, 151, 25, 154, 156, 31, 35, 39, 46, 50, 53, 55, 63, 65, 72, 74, 81, 83, 86, 92, 93, 94, 100, 106, 108, 112, 115, 118, 125}, 157: {157}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb0000cd048>, {0: {0}, 1: {47}, 2: {101}, 3: {96}, 4: {97}, 5: {56}, 6: {57}, 7: {48}, 8: {98}, 9: {66}, 10: {75}, 11: {5}, 12: {1}, 13: {2}, 14: {3}, 15: {4}, 16: {6}, 17: {7}, 18: {8}, 19: {9}, 20: {10}, 21: {11}, 22: {12}, 23: {13}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {20}, 31: {21}, 32: {22}, 33: {23}, 34: {24}, 35: {25}, 36: {26}, 37: {27}, 38: {28}, 39: {29}, 40: {30}, 41: {31}, 42: {32}, 43: {33}, 44: {34}, 45: {35}, 46: {36}, 47: {37}, 48: {38}, 49: {39}, 50: {40}, 51: {41}, 52: {42}, 53: {43}, 54: {44}, 55: {45}, 56: {46}, 57: {49}, 58: {50}, 59: {51}, 60: {52}, 61: {53}, 62: {54}, 63: {55}, 64: {58}, 65: {59}, 66: {60}, 67: {61}, 68: {62}, 69: {63}, 70: {64}, 71: {65}, 72: {67}, 73: {68}, 74: {69}, 75: {70}, 76: {71}, 77: {72}, 78: {73}, 79: {74}, 80: {76}, 81: {77}, 82: {78}, 83: {79}, 84: {80}, 85: {81}, 86: {82}, 87: {83}, 88: {84}, 89: {85}, 90: {86}, 91: {87}, 92: {88}, 93: {89}, 94: {90}, 95: {91}, 96: {92}, 97: {93}, 98: {94}, 99: {95}, 100: {99}, 101: {100}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 bitcast bitcast
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 load load
EXACT 14 add add
EXACT 15 store store
EXACT 16 load load
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 store store
EXACT 22 add add
EXACT 23 store store
EXACT 24 icmp icmp
EXACT 25 zext zext
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 tail tail
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 xor xor
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 xor xor
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 and and
EXACT 40 getelementptr getelementptr
EXACT 41 store store
EXACT 42 icmp icmp
EXACT 43 zext zext
EXACT 44 getelementptr getelementptr
EXACT 45 store store
EXACT 46 lshr lshr
EXACT 47 trunc trunc
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 lshr lshr
EXACT 51 xor xor
EXACT 52 add add
EXACT 53 icmp icmp
EXACT 54 zext zext
EXACT 55 getelementptr getelementptr
EXACT 56 store store
EXACT 57 add add
EXACT 58 store store
EXACT 59 add add
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 load load
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 load load
EXACT 73 add add
EXACT 74 load load
EXACT 75 load load
EXACT 76 add add
EXACT 77 store store
EXACT 78 inttoptr inttoptr
EXACT 79 store store
EXACT 80 load load
EXACT 81 load load
EXACT 82 load load
EXACT 83 add add
EXACT 84 add add
EXACT 85 store store
EXACT 86 inttoptr inttoptr
EXACT 87 store store
EXACT 88 load load
EXACT 89 load load
EXACT 90 store store
EXACT 91 add add
EXACT 92 add add
EXACT 93 load load
EXACT 94 add add
EXACT 95 inttoptr inttoptr
EXACT 96 store store
EXACT 97 store store
EXACT 98 store store
EXACT 99 tail tail
EXACT 100 load load
EXACT 101 store store
EXACT 102 load load
EXACT 103 add add
EXACT 104 load load
EXACT 105 add add
EXACT 106 store store
EXACT 107 inttoptr inttoptr
EXACT 108 store store
EXACT 109 load load
EXACT 110 zext zext
EXACT 111 load load
EXACT 112 store store
EXACT 113 load load
EXACT 114 add add
EXACT 115 store store
EXACT 116 icmp icmp
EXACT 117 zext zext
EXACT 118 store store
EXACT 119 trunc trunc
EXACT 120 and and
EXACT 121 tail tail
EXACT 122 trunc trunc
EXACT 123 and and
EXACT 124 xor xor
EXACT 125 store store
EXACT 126 xor xor
EXACT 127 lshr lshr
EXACT 128 trunc trunc
EXACT 129 and and
EXACT 130 store store
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 lshr lshr
EXACT 135 trunc trunc
EXACT 136 store store
EXACT 137 lshr lshr
EXACT 138 xor xor
EXACT 139 add add
EXACT 140 icmp icmp
EXACT 141 zext zext
EXACT 142 store store
EXACT 143 add add
EXACT 144 store store
EXACT 145 add add
EXACT 146 inttoptr inttoptr
EXACT 147 load load
EXACT 148 store store
EXACT 149 store store
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 load load
EXACT 154 store store
EXACT 155 add add
EXACT 156 store store
EXACT 157 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i25 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0', '%40 = add i64 %7, -28', 'store i64 %40, i64* %RAX.i25, align 8', '%41 = add i64 %7, -12', '%42 = add i64 %10, 18', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i20 = bitcast %union.anon* %44 to i32*', '%45 = load i64, i64* %RBP.i, align 8', '%46 = add i64 %45, -8', '%47 = load i32, i32* %EDI.i20, align 4', '%48 = load i64, i64* %3, align 8', '%49 = add i64 %48, 3', 'store i64 %49, i64* %3, align 8', '%50 = inttoptr i64 %46 to i32*', 'store i32 %47, i32* %50, align 4', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%51 = load i64, i64* %RBP.i, align 8', '%52 = add i64 %51, -16', '%53 = load i64, i64* %RSI.i, align 8', '%54 = load i64, i64* %3, align 8', '%55 = add i64 %54, 4', 'store i64 %55, i64* %3, align 8', '%56 = inttoptr i64 %52 to i64*', 'store i64 %53, i64* %56, align 8', '%RDI.i16 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0', '%57 = load i64, i64* %3, align 8', '%58 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%G_0x400594_type* @G_0x400594 to i64), i64 76) to i32*), align 4', '%59 = load i64, i64* %RBP.i, align 8', '%60 = add i64 %59, -20', '%61 = add i64 %57, 10', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %60 to i32*', 'store i32 %58, i32* %62, align 4', '%63 = load i64, i64* %RAX.i25, align 8', '%64 = load i64, i64* %3, align 8', 'store i64 %63, i64* %RDI.i16, align 8', '%65 = add i64 %64, 28', '%66 = add i64 %64, 8', '%67 = load i64, i64* %6, align 8', '%68 = add i64 %67, -8', '%69 = inttoptr i64 %68 to i64*', 'store i64 %66, i64* %69, align 8', 'store i64 %68, i64* %6, align 8', 'store i64 %65, i64* %3, align 8', '%call2_4004d7 = tail call %struct.Memory* @sub_4004f0.printit(%struct.State* %0, i64 %65, %struct.Memory* %2)', '%70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i9 = bitcast %union.anon* %70 to i32*', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0', '%71 = load i64, i64* %3, align 8', 'store i64 0, i64* %RCX.i, align 8', '%EAX.i = bitcast %union.anon* %39 to i32*', '%72 = load i64, i64* %RBP.i, align 8', '%73 = add i64 %72, -24', '%74 = load i32, i32* %EAX.i, align 4', '%75 = add i64 %71, 5', 'store i64 %75, i64* %3, align 8', '%76 = inttoptr i64 %73 to i32*', 'store i32 %74, i32* %76, align 4', '%77 = load i32, i32* %ECX.i9, align 4', '%78 = zext i32 %77 to i64', '%79 = load i64, i64* %3, align 8', 'store i64 %78, i64* %RAX.i25, align 8', '%80 = load i64, i64* %6, align 8', '%81 = add i64 %80, 32', 'store i64 %81, i64* %6, align 8', '%82 = icmp ugt i64 %80, -33', '%83 = zext i1 %82 to i8', 'store i8 %83, i8* %14, align 1', '%84 = trunc i64 %81 to i32', '%85 = and i32 %84, 255', '%86 = tail call i32 @llvm.ctpop.i32(i32 %85)', '%87 = trunc i32 %86 to i8', '%88 = and i8 %87, 1', '%89 = xor i8 %88, 1', 'store i8 %89, i8* %21, align 1', '%90 = xor i64 %81, %80', '%91 = lshr i64 %90, 4', '%92 = trunc i64 %91 to i8', '%93 = and i8 %92, 1', 'store i8 %93, i8* %26, align 1', '%94 = icmp eq i64 %81, 0', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %29, align 1', '%96 = lshr i64 %81, 63', '%97 = trunc i64 %96 to i8', 'store i8 %97, i8* %32, align 1', '%98 = lshr i64 %80, 63', '%99 = xor i64 %96, %98', '%100 = add nuw nsw i64 %99, %96', '%101 = icmp eq i64 %100, 2', '%102 = zext i1 %101 to i8', 'store i8 %102, i8* %38, align 1', '%103 = add i64 %79, 7', 'store i64 %103, i64* %3, align 8', '%104 = add i64 %80, 40', '%105 = inttoptr i64 %81 to i64*', '%106 = load i64, i64* %105, align 8', 'store i64 %106, i64* %RBP.i, align 8', 'store i64 %104, i64* %6, align 8', '%107 = add i64 %79, 8', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %104 to i64*', '%109 = load i64, i64* %108, align 8', 'store i64 %109, i64* %3, align 8', '%110 = add i64 %80, 48', 'store i64 %110, i64* %6, align 8', 'ret %struct.Memory* %call2_4004d7'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i25 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Found line to remove! %40 = add i64 %7, -28
Found line to remove! store i64 %40, i64* %RAX.i25, align 8
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = add i64 %10, 18
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Found line to remove! %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i20 = bitcast %union.anon* %44 to i32*
Found line to remove! %45 = load i64, i64* %RBP.i, align 8
Found line to remove! %46 = add i64 %45, -8
Found line to remove! %47 = load i32, i32* %EDI.i20, align 4
Found line to remove! %48 = load i64, i64* %3, align 8
Found line to remove! %49 = add i64 %48, 3
Found line to remove! store i64 %49, i64* %3, align 8
Found line to remove! %50 = inttoptr i64 %46 to i32*
Found line to remove! store i32 %47, i32* %50, align 4
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %51 = load i64, i64* %RBP.i, align 8
Found line to remove! %52 = add i64 %51, -16
Found line to remove! %53 = load i64, i64* %RSI.i, align 8
Found line to remove! %54 = load i64, i64* %3, align 8
Found line to remove! %55 = add i64 %54, 4
Found line to remove! store i64 %55, i64* %3, align 8
Found line to remove! %56 = inttoptr i64 %52 to i64*
Found line to remove! store i64 %53, i64* %56, align 8
Found line to remove! %RDI.i16 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
Found line to remove! %57 = load i64, i64* %3, align 8
Found line to remove! %58 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%G_0x400594_type* @G_0x400594 to i64), i64 76) to i32*), align 4
Found line to remove! %59 = load i64, i64* %RBP.i, align 8
Found line to remove! %60 = add i64 %59, -20
Found line to remove! %61 = add i64 %57, 10
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %62 = inttoptr i64 %60 to i32*
Found line to remove! store i32 %58, i32* %62, align 4
Found line to remove! %63 = load i64, i64* %RAX.i25, align 8
Found line to remove! %64 = load i64, i64* %3, align 8
Found line to remove! store i64 %63, i64* %RDI.i16, align 8
Found line to remove! %65 = add i64 %64, 28
Found line to remove! %66 = add i64 %64, 8
Found line to remove! %67 = load i64, i64* %6, align 8
Found line to remove! %68 = add i64 %67, -8
Found line to remove! %69 = inttoptr i64 %68 to i64*
Found line to remove! store i64 %66, i64* %69, align 8
Found line to remove! store i64 %68, i64* %6, align 8
Found line to remove! store i64 %65, i64* %3, align 8
Found line to remove! %call2_4004d7 = tail call %struct.Memory* @sub_4004f0.printit(%struct.State* %0, i64 %65, %struct.Memory* %2)
Found line to remove! %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX.i9 = bitcast %union.anon* %70 to i32*
Found line to remove! %RCX.i = getelementptr inbounds %union.anon, %union.anon* %70, i64 0, i32 0
Found line to remove! %71 = load i64, i64* %3, align 8
Found line to remove! store i64 0, i64* %RCX.i, align 8
Found line to remove! %EAX.i = bitcast %union.anon* %39 to i32*
Found line to remove! %72 = load i64, i64* %RBP.i, align 8
Found line to remove! %73 = add i64 %72, -24
Found line to remove! %74 = load i32, i32* %EAX.i, align 4
Found line to remove! %75 = add i64 %71, 5
Found line to remove! store i64 %75, i64* %3, align 8
Found line to remove! %76 = inttoptr i64 %73 to i32*
Found line to remove! store i32 %74, i32* %76, align 4
Found line to remove! %77 = load i32, i32* %ECX.i9, align 4
Found line to remove! %78 = zext i32 %77 to i64
Found line to remove! %79 = load i64, i64* %3, align 8
Found line to remove! store i64 %78, i64* %RAX.i25, align 8
Found line to remove! %80 = load i64, i64* %6, align 8
Found line to remove! %81 = add i64 %80, 32
Found line to remove! store i64 %81, i64* %6, align 8
Found line to remove! %82 = icmp ugt i64 %80, -33
Found line to remove! %83 = zext i1 %82 to i8
Found line to remove! store i8 %83, i8* %14, align 1
Found line to remove! %84 = trunc i64 %81 to i32
Found line to remove! %85 = and i32 %84, 255
Found line to remove! %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
Found line to remove! %87 = trunc i32 %86 to i8
Found line to remove! %88 = and i8 %87, 1
Found line to remove! %89 = xor i8 %88, 1
Found line to remove! store i8 %89, i8* %21, align 1
Found line to remove! %90 = xor i64 %81, %80
Found line to remove! %91 = lshr i64 %90, 4
Found line to remove! %92 = trunc i64 %91 to i8
Found line to remove! %93 = and i8 %92, 1
Found line to remove! store i8 %93, i8* %26, align 1
Found line to remove! %94 = icmp eq i64 %81, 0
Found line to remove! %95 = zext i1 %94 to i8
Found line to remove! store i8 %95, i8* %29, align 1
Found line to remove! %96 = lshr i64 %81, 63
Found line to remove! %97 = trunc i64 %96 to i8
Found line to remove! store i8 %97, i8* %32, align 1
Found line to remove! %98 = lshr i64 %80, 63
Found line to remove! %99 = xor i64 %96, %98
Found line to remove! %100 = add nuw nsw i64 %99, %96
Found line to remove! %101 = icmp eq i64 %100, 2
Found line to remove! %102 = zext i1 %101 to i8
Found line to remove! store i8 %102, i8* %38, align 1
Found line to remove! %103 = add i64 %79, 7
Found line to remove! store i64 %103, i64* %3, align 8
Found line to remove! %104 = add i64 %80, 40
Found line to remove! %105 = inttoptr i64 %81 to i64*
Found line to remove! %106 = load i64, i64* %105, align 8
Found line to remove! store i64 %106, i64* %RBP.i, align 8
Found line to remove! store i64 %104, i64* %6, align 8
Found line to remove! %107 = add i64 %79, 8
Found line to remove! store i64 %107, i64* %3, align 8
Found line to remove! %108 = inttoptr i64 %104 to i64*
Found line to remove! %109 = load i64, i64* %108, align 8
Found line to remove! store i64 %109, i64* %3, align 8
Found line to remove! %110 = add i64 %80, 48
Found line to remove! store i64 %110, i64* %6, align 8
Found line to remove! ret %struct.Memory* %call2_4004d7
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %5 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -28', 'store i64 %40, i64* %RAX, align 8', '%41 = add i64 %8, -12', '%42 = add i64 %11, 18', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = load i64, i64* %RBP, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI, align 4', '%47 = load i64, i64* %PC, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %PC, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%50 = load i64, i64* %RBP, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI, align 8', '%53 = load i64, i64* %PC, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = load i64, i64* %PC, align 8', '%57 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_400590__rodata_type* @seg_400590__rodata to i64), i64 4) to i32*), align 4', '%58 = load i64, i64* %RBP, align 8', '%59 = add i64 %58, -20', '%60 = add i64 %56, 10', 'store i64 %60, i64* %PC, align 8', '%61 = inttoptr i64 %59 to i32*', 'store i32 %57, i32* %61, align 4', '%62 = load i64, i64* %RAX, align 8', '%63 = load i64, i64* %PC, align 8', 'store i64 %62, i64* %RDI, align 8', '%64 = add i64 %63, 28', '%65 = add i64 %63, 8', '%66 = load i64, i64* %RSP, align 8', '%67 = add i64 %66, -8', '%68 = inttoptr i64 %67 to i64*', 'store i64 %65, i64* %68, align 8', 'store i64 %67, i64* %RSP, align 8', 'store i64 %64, i64* %PC, align 8', '%69 = tail call %struct.Memory* @sub_4004f0_printit_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %2)', '%70 = load i64, i64* %PC, align 8', 'store i64 0, i64* %RCX, align 8', '%71 = load i64, i64* %RBP, align 8', '%72 = add i64 %71, -24', '%73 = load i32, i32* %EAX, align 4', '%74 = add i64 %70, 5', 'store i64 %74, i64* %PC, align 8', '%75 = inttoptr i64 %72 to i32*', 'store i32 %73, i32* %75, align 4', '%76 = load i32, i32* %ECX, align 4', '%77 = zext i32 %76 to i64', '%78 = load i64, i64* %PC, align 8', 'store i64 %77, i64* %RAX, align 8', '%79 = load i64, i64* %RSP, align 8', '%80 = add i64 %79, 32', 'store i64 %80, i64* %RSP, align 8', '%81 = icmp ugt i64 %79, -33', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %15, align 1', '%83 = trunc i64 %80 to i32', '%84 = and i32 %83, 255', '%85 = tail call i32 @llvm.ctpop.i32(i32 %84) #12', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', '%88 = xor i8 %87, 1', 'store i8 %88, i8* %22, align 1', '%89 = xor i64 %80, %79', '%90 = lshr i64 %89, 4', '%91 = trunc i64 %90 to i8', '%92 = and i8 %91, 1', 'store i8 %92, i8* %27, align 1', '%93 = icmp eq i64 %80, 0', '%94 = zext i1 %93 to i8', 'store i8 %94, i8* %30, align 1', '%95 = lshr i64 %80, 63', '%96 = trunc i64 %95 to i8', 'store i8 %96, i8* %33, align 1', '%97 = lshr i64 %79, 63', '%98 = xor i64 %95, %97', '%99 = add nuw nsw i64 %98, %95', '%100 = icmp eq i64 %99, 2', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %39, align 1', '%102 = add i64 %78, 7', 'store i64 %102, i64* %PC, align 8', '%103 = add i64 %79, 40', '%104 = inttoptr i64 %80 to i64*', '%105 = load i64, i64* %104, align 8', 'store i64 %105, i64* %RBP, align 8', 'store i64 %103, i64* %RSP, align 8', '%106 = add i64 %78, 8', 'store i64 %106, i64* %PC, align 8', '%107 = inttoptr i64 %103 to i64*', '%108 = load i64, i64* %107, align 8', 'store i64 %108, i64* %PC, align 8', '%109 = add i64 %79, 48', 'store i64 %109, i64* %RSP, align 8', 'ret %struct.Memory* %69'])
Keep: block_4004b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -28
Found line to remove! store i64 %40, i64* %RAX, align 8
Found line to remove! %41 = add i64 %8, -12
Found line to remove! %42 = add i64 %11, 18
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Found line to remove! %44 = load i64, i64* %RBP, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = load i32, i32* %EDI, align 4
Found line to remove! %47 = load i64, i64* %PC, align 8
Found line to remove! %48 = add i64 %47, 3
Found line to remove! store i64 %48, i64* %PC, align 8
Found line to remove! %49 = inttoptr i64 %45 to i32*
Found line to remove! store i32 %46, i32* %49, align 4
Found line to remove! %50 = load i64, i64* %RBP, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI, align 8
Found line to remove! %53 = load i64, i64* %PC, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! %56 = load i64, i64* %PC, align 8
Found line to remove! %57 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_400590__rodata_type* @seg_400590__rodata to i64), i64 4) to i32*), align 4
Found line to remove! %58 = load i64, i64* %RBP, align 8
Found line to remove! %59 = add i64 %58, -20
Found line to remove! %60 = add i64 %56, 10
Found line to remove! store i64 %60, i64* %PC, align 8
Found line to remove! %61 = inttoptr i64 %59 to i32*
Found line to remove! store i32 %57, i32* %61, align 4
Found line to remove! %62 = load i64, i64* %RAX, align 8
Found line to remove! %63 = load i64, i64* %PC, align 8
Found line to remove! store i64 %62, i64* %RDI, align 8
Found line to remove! %64 = add i64 %63, 28
Found line to remove! %65 = add i64 %63, 8
Found line to remove! %66 = load i64, i64* %RSP, align 8
Found line to remove! %67 = add i64 %66, -8
Found line to remove! %68 = inttoptr i64 %67 to i64*
Found line to remove! store i64 %65, i64* %68, align 8
Found line to remove! store i64 %67, i64* %RSP, align 8
Found line to remove! store i64 %64, i64* %PC, align 8
Found line to remove! %69 = tail call %struct.Memory* @sub_4004f0_printit_renamed_(%struct.State* nonnull %0, i64 %64, %struct.Memory* %2)
Found line to remove! %70 = load i64, i64* %PC, align 8
Found line to remove! store i64 0, i64* %RCX, align 8
Found line to remove! %71 = load i64, i64* %RBP, align 8
Found line to remove! %72 = add i64 %71, -24
Found line to remove! %73 = load i32, i32* %EAX, align 4
Found line to remove! %74 = add i64 %70, 5
Found line to remove! store i64 %74, i64* %PC, align 8
Found line to remove! %75 = inttoptr i64 %72 to i32*
Found line to remove! store i32 %73, i32* %75, align 4
Found line to remove! %76 = load i32, i32* %ECX, align 4
Found line to remove! %77 = zext i32 %76 to i64
Found line to remove! %78 = load i64, i64* %PC, align 8
Found line to remove! store i64 %77, i64* %RAX, align 8
Found line to remove! %79 = load i64, i64* %RSP, align 8
Found line to remove! %80 = add i64 %79, 32
Found line to remove! store i64 %80, i64* %RSP, align 8
Found line to remove! %81 = icmp ugt i64 %79, -33
Found line to remove! %82 = zext i1 %81 to i8
Found line to remove! store i8 %82, i8* %15, align 1
Found line to remove! %83 = trunc i64 %80 to i32
Found line to remove! %84 = and i32 %83, 255
Found line to remove! %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #12
Found line to remove! %86 = trunc i32 %85 to i8
Found line to remove! %87 = and i8 %86, 1
Found line to remove! %88 = xor i8 %87, 1
Found line to remove! store i8 %88, i8* %22, align 1
Found line to remove! %89 = xor i64 %80, %79
Found line to remove! %90 = lshr i64 %89, 4
Found line to remove! %91 = trunc i64 %90 to i8
Found line to remove! %92 = and i8 %91, 1
Found line to remove! store i8 %92, i8* %27, align 1
Found line to remove! %93 = icmp eq i64 %80, 0
Found line to remove! %94 = zext i1 %93 to i8
Found line to remove! store i8 %94, i8* %30, align 1
Found line to remove! %95 = lshr i64 %80, 63
Found line to remove! %96 = trunc i64 %95 to i8
Found line to remove! store i8 %96, i8* %33, align 1
Found line to remove! %97 = lshr i64 %79, 63
Found line to remove! %98 = xor i64 %95, %97
Found line to remove! %99 = add nuw nsw i64 %98, %95
Found line to remove! %100 = icmp eq i64 %99, 2
Found line to remove! %101 = zext i1 %100 to i8
Found line to remove! store i8 %101, i8* %39, align 1
Found line to remove! %102 = add i64 %78, 7
Found line to remove! store i64 %102, i64* %PC, align 8
Found line to remove! %103 = add i64 %79, 40
Found line to remove! %104 = inttoptr i64 %80 to i64*
Found line to remove! %105 = load i64, i64* %104, align 8
Found line to remove! store i64 %105, i64* %RBP, align 8
Found line to remove! store i64 %103, i64* %RSP, align 8
Found line to remove! %106 = add i64 %78, 8
Found line to remove! store i64 %106, i64* %PC, align 8
Found line to remove! %107 = inttoptr i64 %103 to i64*
Found line to remove! %108 = load i64, i64* %107, align 8
Found line to remove! store i64 %108, i64* %PC, align 8
Found line to remove! %109 = add i64 %79, 48
Found line to remove! store i64 %109, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %69
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_16/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_16/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
