Writing '/tmp/tmpg_ce9x2w.dot'...
Writing '/tmp/tmpg_ce9x2w.dot':Done

Reading LLVM: /tmp/tmpsgi0wa07-query.ll
Extracting function [add_sub] from /tmp/tmpsgi0wa07-query.ll
Dot file generated!
Writing '/tmp/tmppopusp94.dot'...
Writing '/tmp/tmppopusp94.dot':Done

Reading LLVM: /tmp/tmp7e1qv49p-target.ll
Extracting function [add_sub] from /tmp/tmp7e1qv49p-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 14 %EDI.i = bitcast %union.anon* %11 to i32*
- 15 %12 = add i64 %7, -12
- 16 %13 = load i32, i32* %EDI.i, align 4
- 17 %14 = add i64 %10, 6
- 18 store i64 %14, i64* %3, align 8
- 19 %15 = inttoptr i64 %12 to i32*
- 20 store i32 %13, i32* %15, align 4
- 21 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 22 %ESI.i29 = bitcast %union.anon* %16 to i32*
- 23 %17 = load i64, i64* %RBP.i, align 8
- 24 %18 = add i64 %17, -8
- 25 %19 = load i32, i32* %ESI.i29, align 4
- 26 %20 = load i64, i64* %3, align 8
- 27 %21 = add i64 %20, 3
- 28 store i64 %21, i64* %3, align 8
- 29 %22 = inttoptr i64 %18 to i32*
- 30 store i32 %19, i32* %22, align 4
- 31 %RSI.i26 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
- 32 %23 = load i64, i64* %RBP.i, align 8
- 33 %24 = add i64 %23, -4
- 34 %25 = load i64, i64* %3, align 8
- 35 %26 = add i64 %25, 3
- 36 store i64 %26, i64* %3, align 8
- 37 %27 = inttoptr i64 %24 to i32*
- 38 %28 = load i32, i32* %27, align 4
- 39 %29 = zext i32 %28 to i64
- 40 store i64 %29, i64* %RSI.i26, align 8
- 41 %30 = add i64 %23, -8
- 42 %31 = add i64 %25, 6
- 43 store i64 %31, i64* %3, align 8
- 44 %32 = inttoptr i64 %30 to i32*
- 45 %33 = load i32, i32* %32, align 4
- 46 %34 = add i32 %33, %28
- 47 %35 = zext i32 %34 to i64
- 48 store i64 %35, i64* %RSI.i26, align 8
- 49 %36 = icmp ult i32 %34, %28
- 50 %37 = icmp ult i32 %34, %33
- 51 %38 = or i1 %36, %37
- 52 %39 = zext i1 %38 to i8
- 53 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 54 store i8 %39, i8* %40, align 1
- 55 %41 = and i32 %34, 255
- 56 %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
- 57 %43 = trunc i32 %42 to i8
- 58 %44 = and i8 %43, 1
- 59 %45 = xor i8 %44, 1
- 60 %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 61 store i8 %45, i8* %46, align 1
- 62 %47 = xor i32 %33, %28
- 63 %48 = xor i32 %47, %34
- 64 %49 = lshr i32 %48, 4
- 65 %50 = trunc i32 %49 to i8
- 66 %51 = and i8 %50, 1
- 67 %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 68 store i8 %51, i8* %52, align 1
- 69 %53 = icmp eq i32 %34, 0
- 70 %54 = zext i1 %53 to i8
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 72 store i8 %54, i8* %55, align 1
- 73 %56 = lshr i32 %34, 31
- 74 %57 = trunc i32 %56 to i8
- 75 %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 76 store i8 %57, i8* %58, align 1
- 77 %59 = lshr i32 %28, 31
- 78 %60 = lshr i32 %33, 31
- 79 %61 = xor i32 %56, %59
- 80 %62 = xor i32 %56, %60
- 81 %63 = add nuw nsw i32 %61, %62
- 82 %64 = icmp eq i32 %63, 2
- 83 %65 = zext i1 %64 to i8
- 84 %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 85 store i8 %65, i8* %66, align 1
- 86 %67 = add i64 %23, -12
- 87 %68 = add i64 %25, 9
- 88 store i64 %68, i64* %3, align 8
- 89 %69 = inttoptr i64 %67 to i32*
- 90 store i32 %34, i32* %69, align 4
- 91 %70 = load i64, i64* %RBP.i, align 8
- 92 %71 = add i64 %70, -4
- 93 %72 = load i64, i64* %3, align 8
- 94 %73 = add i64 %72, 3
- 95 store i64 %73, i64* %3, align 8
- 96 %74 = inttoptr i64 %71 to i32*
- 97 %75 = load i32, i32* %74, align 4
- 98 %76 = zext i32 %75 to i64
- 99 store i64 %76, i64* %RSI.i26, align 8
- 100 %77 = add i64 %70, -8
- 101 %78 = add i64 %72, 6
- 102 store i64 %78, i64* %3, align 8
- 103 %79 = inttoptr i64 %77 to i32*
- 104 %80 = load i32, i32* %79, align 4
- 105 %81 = sub i32 %75, %80
- 106 %82 = zext i32 %81 to i64
- 107 store i64 %82, i64* %RSI.i26, align 8
- 108 %83 = icmp ult i32 %75, %80
- 109 %84 = zext i1 %83 to i8
- 110 store i8 %84, i8* %40, align 1
- 111 %85 = and i32 %81, 255
- 112 %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
- 113 %87 = trunc i32 %86 to i8
- 114 %88 = and i8 %87, 1
- 115 %89 = xor i8 %88, 1
- 116 store i8 %89, i8* %46, align 1
- 117 %90 = xor i32 %80, %75
- 118 %91 = xor i32 %90, %81
- 119 %92 = lshr i32 %91, 4
- 120 %93 = trunc i32 %92 to i8
- 121 %94 = and i8 %93, 1
- 122 store i8 %94, i8* %52, align 1
- 123 %95 = icmp eq i32 %81, 0
- 124 %96 = zext i1 %95 to i8
- 125 store i8 %96, i8* %55, align 1
- 126 %97 = lshr i32 %81, 31
- 127 %98 = trunc i32 %97 to i8
- 128 store i8 %98, i8* %58, align 1
- 129 %99 = lshr i32 %75, 31
- 130 %100 = lshr i32 %80, 31
- 131 %101 = xor i32 %100, %99
- 132 %102 = xor i32 %97, %99
- 133 %103 = add nuw nsw i32 %102, %101
- 134 %104 = icmp eq i32 %103, 2
- 135 %105 = zext i1 %104 to i8
- 136 store i8 %105, i8* %66, align 1
- 137 %106 = add i64 %70, -16
- 138 %107 = add i64 %72, 9
- 139 store i64 %107, i64* %3, align 8
- 140 %108 = inttoptr i64 %106 to i32*
- 141 store i32 %81, i32* %108, align 4
- 142 %109 = load i64, i64* %RBP.i, align 8
- 143 %110 = add i64 %109, -12
- 144 %111 = load i64, i64* %3, align 8
- 145 %112 = add i64 %111, 3
- 146 store i64 %112, i64* %3, align 8
- 147 %113 = inttoptr i64 %110 to i32*
- 148 %114 = load i32, i32* %113, align 4
- 149 %115 = zext i32 %114 to i64
- 150 store i64 %115, i64* %RSI.i26, align 8
- 151 %116 = add i64 %109, -16
- 152 %117 = add i64 %111, 6
- 153 store i64 %117, i64* %3, align 8
- 154 %118 = inttoptr i64 %116 to i32*
- 155 %119 = load i32, i32* %118, align 4
- 156 %120 = add i32 %119, %114
- 157 %121 = zext i32 %120 to i64
- 158 store i64 %121, i64* %RSI.i26, align 8
- 159 %122 = icmp ult i32 %120, %114
- 160 %123 = icmp ult i32 %120, %119
- 161 %124 = or i1 %122, %123
- 162 %125 = zext i1 %124 to i8
- 163 store i8 %125, i8* %40, align 1
- 164 %126 = and i32 %120, 255
- 165 %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
- 166 %128 = trunc i32 %127 to i8
- 167 %129 = and i8 %128, 1
- 168 %130 = xor i8 %129, 1
- 169 store i8 %130, i8* %46, align 1
- 170 %131 = xor i32 %119, %114
- 171 %132 = xor i32 %131, %120
- 172 %133 = lshr i32 %132, 4
- 173 %134 = trunc i32 %133 to i8
- 174 %135 = and i8 %134, 1
- 175 store i8 %135, i8* %52, align 1
- 176 %136 = icmp eq i32 %120, 0
- 177 %137 = zext i1 %136 to i8
- 178 store i8 %137, i8* %55, align 1
- 179 %138 = lshr i32 %120, 31
- 180 %139 = trunc i32 %138 to i8
- 181 store i8 %139, i8* %58, align 1
- 182 %140 = lshr i32 %114, 31
- 183 %141 = lshr i32 %119, 31
- 184 %142 = xor i32 %138, %140
- 185 %143 = xor i32 %138, %141
- 186 %144 = add nuw nsw i32 %142, %143
- 187 %145 = icmp eq i32 %144, 2
- 188 %146 = zext i1 %145 to i8
- 189 store i8 %146, i8* %66, align 1
- 190 %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 191 store i64 %121, i64* %RAX.i, align 8
- 192 %147 = add i64 %111, 9
- 193 store i64 %147, i64* %3, align 8
- 194 %148 = load i64, i64* %6, align 8
- 195 %149 = add i64 %148, 8
- 196 %150 = inttoptr i64 %148 to i64*
- 197 %151 = load i64, i64* %150, align 8
- 198 store i64 %151, i64* %RBP.i, align 8
- 199 store i64 %149, i64* %6, align 8
- 200 %152 = add i64 %111, 10
- 201 store i64 %152, i64* %3, align 8
- 202 %153 = inttoptr i64 %149 to i64*
- 203 %154 = load i64, i64* %153, align 8
- 204 store i64 %154, i64* %3, align 8
- 205 %155 = add i64 %148, 16
- 206 store i64 %155, i64* %6, align 8
- 207 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f0815bbf8>, {0: {0}, 1: {7}, 2: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 3: {9}, 4: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 5: {11}, 6: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 7: {26, 101, 42, 13}, 8: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 9: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 10: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 11: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 12: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 13: {3}, 14: {2, 4}, 15: {144, 19, 87}, 16: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 17: {153, 43, 21, 102}, 18: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 19: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 20: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 21: {1}, 22: {2, 4}, 23: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 24: {26, 101, 42, 13}, 25: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 26: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 27: {146, 36, 29, 95}, 28: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 29: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 30: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 31: {6}, 32: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 33: {34, 93}, 34: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 35: {146, 36, 29, 95}, 36: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 37: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 38: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 39: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 40: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 41: {26, 101, 42, 13}, 42: {153, 43, 21, 102}, 43: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 44: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 45: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 46: {134, 47, 82, 187, 157}, 47: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 48: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 49: {160, 161, 70, 109, 177, 50, 51, 124}, 50: {160, 161, 70, 109, 177, 50, 51, 124}, 51: {162, 52}, 52: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 53: {54}, 54: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 55: {56, 112, 165}, 56: {57, 166, 113}, 57: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 58: {67, 168, 175, 115, 122, 59}, 59: {116, 169, 60}, 60: {61}, 61: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 62: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 63: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 64: {120, 65, 173}, 65: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 66: {67, 168, 175, 115, 122, 59}, 67: {68}, 68: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 69: {160, 161, 70, 109, 177, 50, 51, 124}, 70: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 71: {72}, 72: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 73: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 74: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 75: {76}, 76: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 77: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 78: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 79: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 80: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 81: {134, 47, 82, 187, 157}, 82: {83, 188, 135}, 83: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 84: {85}, 85: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 86: {144, 19, 87}, 87: {88, 139, 192}, 88: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 89: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 90: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 91: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 92: {34, 93}, 93: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 94: {146, 36, 29, 95}, 95: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 96: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 97: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 98: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 99: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 100: {26, 101, 42, 13}, 101: {153, 43, 21, 102}, 102: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 103: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 104: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 105: {106}, 106: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 107: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 108: {160, 161, 70, 109, 177, 50, 51, 124}, 109: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 110: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 111: {56, 112, 165}, 112: {57, 166, 113}, 113: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 114: {67, 168, 175, 115, 122, 59}, 115: {116, 169, 60}, 116: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 117: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 118: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 119: {120, 65, 173}, 120: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 121: {67, 168, 175, 115, 122, 59}, 122: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 123: {160, 161, 70, 109, 177, 50, 51, 124}, 124: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 125: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 126: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 127: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 128: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 129: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 130: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 131: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 132: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 133: {134, 47, 82, 187, 157}, 134: {83, 188, 135}, 135: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 136: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 137: {152, 138}, 138: {88, 139, 192}, 139: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 140: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 141: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 142: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 143: {144, 19, 87}, 144: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 145: {146, 36, 29, 95}, 146: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 147: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 148: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 149: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 150: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 151: {152, 138}, 152: {153, 43, 21, 102}, 153: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 154: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 155: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 156: {134, 47, 82, 187, 157}, 157: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 158: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 159: {160, 161, 70, 109, 177, 50, 51, 124}, 160: {160, 161, 70, 109, 177, 50, 51, 124}, 161: {162, 52}, 162: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 163: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 164: {56, 112, 165}, 165: {57, 166, 113}, 166: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 167: {67, 168, 175, 115, 122, 59}, 168: {116, 169, 60}, 169: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 170: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 171: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 172: {120, 65, 173}, 173: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 174: {67, 168, 175, 115, 122, 59}, 175: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 176: {160, 161, 70, 109, 177, 50, 51, 124}, 177: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 178: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 179: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 180: {128, 66, 167, 75, 174, 114, 181, 121, 58}, 181: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 182: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 183: {130, 131, 74, 78, 79, 180, 183, 184, 127}, 184: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 185: {64, 132, 133, 171, 172, 80, 81, 118, 119, 185, 186, 63}, 186: {134, 47, 82, 187, 157}, 187: {83, 188, 135}, 188: {99, 163, 71, 40, 136, 107, 110, 48, 178, 84, 53, 150, 189, 125, 158}, 189: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 190: {5}, 191: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 192: {88, 139, 192}, 193: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 194: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 195: {195}, 196: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 197: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 198: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 199: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 200: {200}, 201: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 202: {97, 196, 38, 104, 202, 45, 14, 141, 148, 23, 90, 155, 31}, 203: {8, 12, 143, 17, 145, 20, 149, 25, 27, 156, 28, 33, 35, 39, 46, 194, 197, 203, 92, 94, 98, 105}, 204: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 205: {205}, 206: {129, 137, 10, 140, 142, 15, 16, 18, 147, 22, 151, 24, 154, 30, 159, 32, 164, 37, 41, 170, 44, 176, 49, 179, 182, 55, 62, 190, 191, 193, 69, 198, 199, 73, 201, 204, 77, 206, 86, 89, 91, 96, 100, 103, 108, 111, 117, 123, 126}, 207: {207}})
Equivalent! frozenset({153, 43, 21, 102}) {152, 17, 42, 101}
Equivalent! frozenset({154, 44, 22, 103}) {153, 18, 43, 102}
Equivalent! frozenset({146, 36, 29, 95}) {35, 145, 27, 94}
Equivalent! frozenset({96, 147, 37, 30}) {146, 28, 36, 95}
Equivalent! frozenset({33, 92}) {32, 91}
Equivalent! frozenset({34, 93}) {33, 92}
Equivalent! frozenset({97, 38}) {96, 37}
Equivalent! frozenset({98, 39}) {97, 38}
Equivalent! frozenset({40, 99}) {98, 39}
Equivalent! frozenset({41, 100}) {40, 99}
Equivalent! frozenset({192, 88, 139}) {192, 138, 87}
Equivalent! frozenset({89, 193, 140}) {88, 193, 139}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f0815bbf8>, {0: {0}, 1: {7}, 2: {8}, 3: {9}, 4: {10}, 5: {11}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16}, 11: {145, 35, 17, 94}, 12: {18}, 13: {3}, 14: {4}, 15: {19}, 16: {20}, 17: {43}, 18: {44}, 19: {23}, 20: {24}, 21: {1}, 22: {2}, 23: {25}, 24: {26}, 25: {27}, 26: {145, 35, 28, 94}, 27: {29}, 28: {147}, 29: {31}, 30: {32}, 31: {6}, 32: {33}, 33: {34}, 34: {35, 145, 17, 28, 94}, 35: {146}, 36: {37}, 37: {38}, 38: {39}, 39: {99}, 40: {41}, 41: {42}, 42: {21}, 43: {22}, 44: {45}, 45: {46}, 46: {47}, 47: {48}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {56}, 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {64}, 64: {65}, 65: {66}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {72}, 72: {73}, 73: {74}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {80}, 80: {81}, 81: {82}, 82: {83}, 83: {84}, 84: {85}, 85: {86}, 86: {87}, 87: {139}, 88: {89}, 89: {90}, 90: {91}, 91: {92}, 92: {93}, 93: {35, 145, 17, 28, 94}, 94: {95}, 95: {30}, 96: {97}, 97: {98}, 98: {40}, 99: {100}, 100: {101}, 101: {102}, 102: {103}, 103: {104}, 104: {105}, 105: {106}, 106: {107}, 107: {108}, 108: {109}, 109: {110}, 110: {111}, 111: {112}, 112: {113}, 113: {114}, 114: {115}, 115: {116}, 116: {117}, 117: {118}, 118: {119}, 119: {120}, 120: {121}, 121: {122}, 122: {123}, 123: {124}, 124: {125}, 125: {126}, 126: {127}, 127: {128}, 128: {129}, 129: {130}, 130: {131}, 131: {132}, 132: {133}, 133: {134}, 134: {135}, 135: {136}, 136: {137}, 137: {138}, 138: {88}, 139: {140}, 140: {141}, 141: {142}, 142: {143}, 143: {144}, 144: {35, 145, 17, 28, 94}, 145: {36}, 146: {96}, 147: {148}, 148: {149}, 149: {150}, 150: {151}, 151: {152}, 152: {153}, 153: {154}, 154: {155}, 155: {156}, 156: {157}, 157: {158}, 158: {159}, 159: {160}, 160: {161}, 161: {162}, 162: {163}, 163: {164}, 164: {165}, 165: {166}, 166: {167}, 167: {168}, 168: {169}, 169: {170}, 170: {171}, 171: {172}, 172: {173}, 173: {174}, 174: {175}, 175: {176}, 176: {177}, 177: {178}, 178: {179}, 179: {180}, 180: {181}, 181: {182}, 182: {183}, 183: {184}, 184: {185}, 185: {186}, 186: {187}, 187: {188}, 188: {189}, 189: {190}, 190: {5}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
MORE 11 POT: 4
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 bitcast bitcast
EXACT 15 add add
EXACT 16 load load
EXACT 17 add add
EXACT 18 store store
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 bitcast bitcast
EXACT 23 load load
EXACT 24 add add
EXACT 25 load load
MORE 26 POT: 4
EXACT 27 add add
EXACT 28 store store
EXACT 29 inttoptr inttoptr
EXACT 30 store store
EXACT 31 getelementptr getelementptr
EXACT 32 load load
EXACT 33 add add
MORE 34 POT: 5
EXACT 35 add add
EXACT 36 store store
EXACT 37 inttoptr inttoptr
EXACT 38 load load
EXACT 39 zext zext
EXACT 40 store store
EXACT 41 add add
EXACT 42 add add
EXACT 43 store store
EXACT 44 inttoptr inttoptr
EXACT 45 load load
EXACT 46 add add
EXACT 47 zext zext
EXACT 48 store store
EXACT 49 icmp icmp
EXACT 50 icmp icmp
EXACT 51 or or
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 and and
EXACT 56 tail tail
EXACT 57 trunc trunc
EXACT 58 and and
EXACT 59 xor xor
EXACT 60 getelementptr getelementptr
EXACT 61 store store
EXACT 62 xor xor
EXACT 63 xor xor
EXACT 64 lshr lshr
EXACT 65 trunc trunc
EXACT 66 and and
EXACT 67 getelementptr getelementptr
EXACT 68 store store
EXACT 69 icmp icmp
EXACT 70 zext zext
EXACT 71 getelementptr getelementptr
EXACT 72 store store
EXACT 73 lshr lshr
EXACT 74 trunc trunc
EXACT 75 getelementptr getelementptr
EXACT 76 store store
EXACT 77 lshr lshr
EXACT 78 lshr lshr
EXACT 79 xor xor
EXACT 80 xor xor
EXACT 81 add add
EXACT 82 icmp icmp
EXACT 83 zext zext
EXACT 84 getelementptr getelementptr
EXACT 85 store store
EXACT 86 add add
EXACT 87 add add
EXACT 88 store store
EXACT 89 inttoptr inttoptr
EXACT 90 store store
EXACT 91 load load
EXACT 92 add add
MORE 93 POT: 5
EXACT 94 add add
EXACT 95 store store
EXACT 96 inttoptr inttoptr
EXACT 97 load load
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 add add
EXACT 101 add add
EXACT 102 store store
EXACT 103 inttoptr inttoptr
EXACT 104 load load
EXACT 105 sub sub
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 icmp icmp
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 and and
EXACT 112 tail tail
EXACT 113 trunc trunc
EXACT 114 and and
EXACT 115 xor xor
EXACT 116 store store
EXACT 117 xor xor
EXACT 118 xor xor
EXACT 119 lshr lshr
EXACT 120 trunc trunc
EXACT 121 and and
EXACT 122 store store
EXACT 123 icmp icmp
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 lshr lshr
EXACT 127 trunc trunc
EXACT 128 store store
EXACT 129 lshr lshr
EXACT 130 lshr lshr
EXACT 131 xor xor
EXACT 132 xor xor
EXACT 133 add add
EXACT 134 icmp icmp
EXACT 135 zext zext
EXACT 136 store store
EXACT 137 add add
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 store store
EXACT 142 load load
EXACT 143 add add
MORE 144 POT: 5
EXACT 145 add add
EXACT 146 store store
EXACT 147 inttoptr inttoptr
EXACT 148 load load
EXACT 149 zext zext
EXACT 150 store store
EXACT 151 add add
EXACT 152 add add
EXACT 153 store store
EXACT 154 inttoptr inttoptr
EXACT 155 load load
EXACT 156 add add
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 icmp icmp
EXACT 160 icmp icmp
EXACT 161 or or
EXACT 162 zext zext
EXACT 163 store store
EXACT 164 and and
EXACT 165 tail tail
EXACT 166 trunc trunc
EXACT 167 and and
EXACT 168 xor xor
EXACT 169 store store
EXACT 170 xor xor
EXACT 171 xor xor
EXACT 172 lshr lshr
EXACT 173 trunc trunc
EXACT 174 and and
EXACT 175 store store
EXACT 176 icmp icmp
EXACT 177 zext zext
EXACT 178 store store
EXACT 179 lshr lshr
EXACT 180 trunc trunc
EXACT 181 store store
EXACT 182 lshr lshr
EXACT 183 lshr lshr
EXACT 184 xor xor
EXACT 185 xor xor
EXACT 186 add add
EXACT 187 icmp icmp
EXACT 188 zext zext
EXACT 189 store store
EXACT 190 getelementptr getelementptr
EXACT 191 store store
EXACT 192 add add
EXACT 193 store store
EXACT 194 load load
EXACT 195 add add
EXACT 196 inttoptr inttoptr
EXACT 197 load load
EXACT 198 store store
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 store store
EXACT 205 add add
EXACT 206 store store
EXACT 207 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 2 %ESI = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 4 %EDI = bitcast %union.anon* %4 to i32*
- 5 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 6 %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %5 = load i64, i64* %RBP, align 8
- 9 %6 = add i64 %1, 1
- 10 store i64 %6, i64* %PC, align 8
- 11 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %8 = load i64, i64* %7, align 8
- 13 %9 = add i64 %8, -8
- 14 %10 = inttoptr i64 %9 to i64*
- 15 store i64 %5, i64* %10, align 8
- 16 store i64 %9, i64* %7, align 8
- 17 %11 = load i64, i64* %PC, align 8
- 18 store i64 %9, i64* %RBP, align 8
- 19 %12 = add i64 %8, -12
- 20 %13 = load i32, i32* %EDI, align 4
- 21 %14 = add i64 %11, 6
- 22 store i64 %14, i64* %PC, align 8
- 23 %15 = inttoptr i64 %12 to i32*
- 24 store i32 %13, i32* %15, align 4
- 25 %16 = load i64, i64* %RBP, align 8
- 26 %17 = add i64 %16, -8
- 27 %18 = load i32, i32* %ESI, align 4
- 28 %19 = load i64, i64* %PC, align 8
- 29 %20 = add i64 %19, 3
- 30 store i64 %20, i64* %PC, align 8
- 31 %21 = inttoptr i64 %17 to i32*
- 32 store i32 %18, i32* %21, align 4
- 33 %22 = load i64, i64* %RBP, align 8
- 34 %23 = add i64 %22, -4
- 35 %24 = load i64, i64* %PC, align 8
- 36 %25 = add i64 %24, 3
- 37 store i64 %25, i64* %PC, align 8
- 38 %26 = inttoptr i64 %23 to i32*
- 39 %27 = load i32, i32* %26, align 4
- 40 %28 = zext i32 %27 to i64
- 41 store i64 %28, i64* %RSI, align 8
- 42 %29 = add i64 %22, -8
- 43 %30 = add i64 %24, 6
- 44 store i64 %30, i64* %PC, align 8
- 45 %31 = inttoptr i64 %29 to i32*
- 46 %32 = load i32, i32* %31, align 4
- 47 %33 = add i32 %32, %27
- 48 %34 = zext i32 %33 to i64
- 49 store i64 %34, i64* %RSI, align 8
- 50 %35 = icmp ult i32 %33, %27
- 51 %36 = icmp ult i32 %33, %32
- 52 %37 = or i1 %35, %36
- 53 %38 = zext i1 %37 to i8
- 54 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 55 store i8 %38, i8* %39, align 1
- 56 %40 = and i32 %33, 255
- 57 %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12
- 58 %42 = trunc i32 %41 to i8
- 59 %43 = and i8 %42, 1
- 60 %44 = xor i8 %43, 1
- 61 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 62 store i8 %44, i8* %45, align 1
- 63 %46 = xor i32 %32, %27
- 64 %47 = xor i32 %46, %33
- 65 %48 = lshr i32 %47, 4
- 66 %49 = trunc i32 %48 to i8
- 67 %50 = and i8 %49, 1
- 68 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 69 store i8 %50, i8* %51, align 1
- 70 %52 = icmp eq i32 %33, 0
- 71 %53 = zext i1 %52 to i8
- 72 %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 73 store i8 %53, i8* %54, align 1
- 74 %55 = lshr i32 %33, 31
- 75 %56 = trunc i32 %55 to i8
- 76 %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 77 store i8 %56, i8* %57, align 1
- 78 %58 = lshr i32 %27, 31
- 79 %59 = lshr i32 %32, 31
- 80 %60 = xor i32 %55, %58
- 81 %61 = xor i32 %55, %59
- 82 %62 = add nuw nsw i32 %60, %61
- 83 %63 = icmp eq i32 %62, 2
- 84 %64 = zext i1 %63 to i8
- 85 %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 86 store i8 %64, i8* %65, align 1
- 87 %66 = add i64 %22, -12
- 88 %67 = add i64 %24, 9
- 89 store i64 %67, i64* %PC, align 8
- 90 %68 = inttoptr i64 %66 to i32*
- 91 store i32 %33, i32* %68, align 4
- 92 %69 = load i64, i64* %RBP, align 8
- 93 %70 = add i64 %69, -4
- 94 %71 = load i64, i64* %PC, align 8
- 95 %72 = add i64 %71, 3
- 96 store i64 %72, i64* %PC, align 8
- 97 %73 = inttoptr i64 %70 to i32*
- 98 %74 = load i32, i32* %73, align 4
- 99 %75 = zext i32 %74 to i64
- 100 store i64 %75, i64* %RSI, align 8
- 101 %76 = add i64 %69, -8
- 102 %77 = add i64 %71, 6
- 103 store i64 %77, i64* %PC, align 8
- 104 %78 = inttoptr i64 %76 to i32*
- 105 %79 = load i32, i32* %78, align 4
- 106 %80 = sub i32 %74, %79
- 107 %81 = zext i32 %80 to i64
- 108 store i64 %81, i64* %RSI, align 8
- 109 %82 = icmp ult i32 %74, %79
- 110 %83 = zext i1 %82 to i8
- 111 store i8 %83, i8* %39, align 1
- 112 %84 = and i32 %80, 255
- 113 %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #12
- 114 %86 = trunc i32 %85 to i8
- 115 %87 = and i8 %86, 1
- 116 %88 = xor i8 %87, 1
- 117 store i8 %88, i8* %45, align 1
- 118 %89 = xor i32 %79, %74
- 119 %90 = xor i32 %89, %80
- 120 %91 = lshr i32 %90, 4
- 121 %92 = trunc i32 %91 to i8
- 122 %93 = and i8 %92, 1
- 123 store i8 %93, i8* %51, align 1
- 124 %94 = icmp eq i32 %80, 0
- 125 %95 = zext i1 %94 to i8
- 126 store i8 %95, i8* %54, align 1
- 127 %96 = lshr i32 %80, 31
- 128 %97 = trunc i32 %96 to i8
- 129 store i8 %97, i8* %57, align 1
- 130 %98 = lshr i32 %74, 31
- 131 %99 = lshr i32 %79, 31
- 132 %100 = xor i32 %99, %98
- 133 %101 = xor i32 %96, %98
- 134 %102 = add nuw nsw i32 %101, %100
- 135 %103 = icmp eq i32 %102, 2
- 136 %104 = zext i1 %103 to i8
- 137 store i8 %104, i8* %65, align 1
- 138 %105 = add i64 %69, -16
- 139 %106 = add i64 %71, 9
- 140 store i64 %106, i64* %PC, align 8
- 141 %107 = inttoptr i64 %105 to i32*
- 142 store i32 %80, i32* %107, align 4
- 143 %108 = load i64, i64* %RBP, align 8
- 144 %109 = add i64 %108, -12
- 145 %110 = load i64, i64* %PC, align 8
- 146 %111 = add i64 %110, 3
- 147 store i64 %111, i64* %PC, align 8
- 148 %112 = inttoptr i64 %109 to i32*
- 149 %113 = load i32, i32* %112, align 4
- 150 %114 = zext i32 %113 to i64
- 151 store i64 %114, i64* %RSI, align 8
- 152 %115 = add i64 %108, -16
- 153 %116 = add i64 %110, 6
- 154 store i64 %116, i64* %PC, align 8
- 155 %117 = inttoptr i64 %115 to i32*
- 156 %118 = load i32, i32* %117, align 4
- 157 %119 = add i32 %118, %113
- 158 %120 = zext i32 %119 to i64
- 159 store i64 %120, i64* %RSI, align 8
- 160 %121 = icmp ult i32 %119, %113
- 161 %122 = icmp ult i32 %119, %118
- 162 %123 = or i1 %121, %122
- 163 %124 = zext i1 %123 to i8
- 164 store i8 %124, i8* %39, align 1
- 165 %125 = and i32 %119, 255
- 166 %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #12
- 167 %127 = trunc i32 %126 to i8
- 168 %128 = and i8 %127, 1
- 169 %129 = xor i8 %128, 1
- 170 store i8 %129, i8* %45, align 1
- 171 %130 = xor i32 %118, %113
- 172 %131 = xor i32 %130, %119
- 173 %132 = lshr i32 %131, 4
- 174 %133 = trunc i32 %132 to i8
- 175 %134 = and i8 %133, 1
- 176 store i8 %134, i8* %51, align 1
- 177 %135 = icmp eq i32 %119, 0
- 178 %136 = zext i1 %135 to i8
- 179 store i8 %136, i8* %54, align 1
- 180 %137 = lshr i32 %119, 31
- 181 %138 = trunc i32 %137 to i8
- 182 store i8 %138, i8* %57, align 1
- 183 %139 = lshr i32 %113, 31
- 184 %140 = lshr i32 %118, 31
- 185 %141 = xor i32 %137, %139
- 186 %142 = xor i32 %137, %140
- 187 %143 = add nuw nsw i32 %141, %142
- 188 %144 = icmp eq i32 %143, 2
- 189 %145 = zext i1 %144 to i8
- 190 store i8 %145, i8* %65, align 1
- 191 store i64 %120, i64* %RAX, align 8
- 192 %146 = add i64 %110, 9
- 193 store i64 %146, i64* %PC, align 8
- 194 %147 = load i64, i64* %7, align 8
- 195 %148 = add i64 %147, 8
- 196 %149 = inttoptr i64 %147 to i64*
- 197 %150 = load i64, i64* %149, align 8
- 198 store i64 %150, i64* %RBP, align 8
- 199 store i64 %148, i64* %7, align 8
- 200 %151 = add i64 %110, 10
- 201 store i64 %151, i64* %PC, align 8
- 202 %152 = inttoptr i64 %148 to i64*
- 203 %153 = load i64, i64* %152, align 8
- 204 store i64 %153, i64* %PC, align 8
- 205 %154 = add i64 %147, 16
- 206 store i64 %154, i64* %7, align 8
- 207 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f0815ba60>, {0: {0}, 1: {21}, 2: {14, 22}, 3: {13}, 4: {14, 22}, 5: {190}, 6: {31}, 7: {1}, 8: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 9: {3}, 10: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 11: {5}, 12: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 13: {24, 41, 100, 7}, 14: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 15: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 16: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 17: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 18: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 19: {143, 86, 15}, 20: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 21: {152, 17, 42, 101}, 22: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 23: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 24: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 25: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 26: {24, 41, 100, 7}, 27: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 28: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 29: {35, 145, 27, 94}, 30: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 31: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 32: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 33: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 34: {33, 92}, 35: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 36: {35, 145, 27, 94}, 37: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 38: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 39: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 40: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 41: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 42: {24, 41, 100, 7}, 43: {152, 17, 42, 101}, 44: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 45: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 46: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 47: {133, 46, 81, 186, 156}, 48: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 49: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 50: {160, 69, 108, 176, 49, 50, 123, 159}, 51: {160, 69, 108, 176, 49, 50, 123, 159}, 52: {161, 51}, 53: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 54: {53}, 55: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 56: {164, 111, 55}, 57: {56, 112, 165}, 58: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 59: {66, 167, 174, 114, 121, 58}, 60: {115, 59, 168}, 61: {60}, 62: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 63: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 64: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 65: {64, 172, 119}, 66: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 67: {66, 167, 174, 114, 121, 58}, 68: {67}, 69: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 70: {160, 69, 108, 176, 49, 50, 123, 159}, 71: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 72: {71}, 73: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 74: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 75: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 76: {75}, 77: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 78: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 79: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 80: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 81: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 82: {133, 46, 81, 186, 156}, 83: {82, 187, 134}, 84: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 85: {84}, 86: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 87: {143, 86, 15}, 88: {192, 138, 87}, 89: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 90: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 91: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 92: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 93: {33, 92}, 94: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 95: {35, 145, 27, 94}, 96: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 97: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 98: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 99: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 100: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 101: {24, 41, 100, 7}, 102: {152, 17, 42, 101}, 103: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 104: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 105: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 106: {105}, 107: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 108: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 109: {160, 69, 108, 176, 49, 50, 123, 159}, 110: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 111: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 112: {164, 111, 55}, 113: {56, 112, 165}, 114: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 115: {66, 167, 174, 114, 121, 58}, 116: {115, 59, 168}, 117: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 118: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 119: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 120: {64, 172, 119}, 121: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 122: {66, 167, 174, 114, 121, 58}, 123: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 124: {160, 69, 108, 176, 49, 50, 123, 159}, 125: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 126: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 127: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 128: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 129: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 130: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 131: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 132: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 133: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 134: {133, 46, 81, 186, 156}, 135: {82, 187, 134}, 136: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 137: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 138: {137, 151}, 139: {192, 138, 87}, 140: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 141: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 142: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 143: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 144: {143, 86, 15}, 145: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 146: {35, 145, 27, 94}, 147: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 148: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 149: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 150: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 151: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 152: {137, 151}, 153: {152, 17, 42, 101}, 154: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 155: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 156: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 157: {133, 46, 81, 186, 156}, 158: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 159: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 160: {160, 69, 108, 176, 49, 50, 123, 159}, 161: {160, 69, 108, 176, 49, 50, 123, 159}, 162: {161, 51}, 163: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 164: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 165: {164, 111, 55}, 166: {56, 112, 165}, 167: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 168: {66, 167, 174, 114, 121, 58}, 169: {115, 59, 168}, 170: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 171: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 172: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 173: {64, 172, 119}, 174: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 175: {66, 167, 174, 114, 121, 58}, 176: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 177: {160, 69, 108, 176, 49, 50, 123, 159}, 178: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 179: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 180: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 181: {65, 166, 74, 173, 113, 180, 120, 57, 127}, 182: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 183: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 184: {129, 130, 73, 77, 78, 179, 182, 183, 126}, 185: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 186: {131, 132, 170, 171, 79, 80, 117, 118, 184, 185, 62, 63}, 187: {133, 46, 81, 186, 156}, 188: {82, 187, 134}, 189: {98, 162, 70, 39, 135, 106, 109, 47, 177, 188, 83, 52, 149, 124, 157}, 190: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 191: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 192: {192, 138, 87}, 193: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 194: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 195: {195}, 196: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 197: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 198: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 199: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 200: {200}, 201: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 202: {96, 196, 37, 103, 8, 202, 44, 140, 19, 147, 89, 154, 29}, 203: {2, 6, 11, 142, 16, 144, 148, 23, 25, 26, 155, 32, 34, 38, 45, 194, 197, 203, 91, 93, 97, 104}, 204: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 205: {205}, 206: {128, 4, 136, 9, 10, 139, 12, 141, 18, 146, 20, 150, 153, 28, 30, 158, 163, 36, 40, 169, 43, 175, 48, 178, 181, 54, 61, 189, 191, 193, 68, 198, 199, 72, 201, 76, 204, 206, 85, 88, 90, 95, 99, 102, 107, 110, 116, 122, 125}, 207: {207}})
Equivalent! frozenset({152, 17, 42, 101}) {153, 43, 21, 102}
Equivalent! frozenset({153, 18, 43, 102}) {154, 44, 22, 103}
Equivalent! frozenset({145, 27, 35, 94}) {146, 36, 29, 95}
Equivalent! frozenset({146, 28, 36, 95}) {96, 147, 37, 30}
Equivalent! frozenset({32, 91}) {33, 92}
Equivalent! frozenset({33, 92}) {34, 93}
Equivalent! frozenset({96, 37}) {97, 38}
Equivalent! frozenset({97, 38}) {98, 39}
Equivalent! frozenset({98, 39}) {40, 99}
Equivalent! frozenset({40, 99}) {41, 100}
Equivalent! frozenset({192, 138, 87}) {88, 139, 192}
Equivalent! frozenset({88, 193, 139}) {89, 140, 193}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f0815ba60>, {0: {0}, 1: {21}, 2: {22}, 3: {13}, 4: {14}, 5: {190}, 6: {31}, 7: {1}, 8: {2}, 9: {3}, 10: {4}, 11: {5}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10}, 17: {144, 34, 11, 93}, 18: {12}, 19: {15}, 20: {16}, 21: {42}, 22: {43}, 23: {19}, 24: {20}, 25: {23}, 26: {24}, 27: {25}, 28: {144, 34, 26, 93}, 29: {35}, 30: {95}, 31: {29}, 32: {30}, 33: {32}, 34: {33}, 35: {34, 11, 144, 26, 93}, 36: {27}, 37: {36}, 38: {37}, 39: {38}, 40: {98}, 41: {40}, 42: {41}, 43: {17}, 44: {18}, 45: {44}, 46: {45}, 47: {46}, 48: {47}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {63}, 65: {64}, 66: {65}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {71}, 73: {72}, 74: {73}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {79}, 81: {80}, 82: {81}, 83: {82}, 84: {83}, 85: {84}, 86: {85}, 87: {86}, 88: {192}, 89: {88}, 90: {89}, 91: {90}, 92: {91}, 93: {92}, 94: {34, 11, 144, 26, 93}, 95: {94}, 96: {146}, 97: {96}, 98: {97}, 99: {39}, 100: {99}, 101: {100}, 102: {101}, 103: {102}, 104: {103}, 105: {104}, 106: {105}, 107: {106}, 108: {107}, 109: {108}, 110: {109}, 111: {110}, 112: {111}, 113: {112}, 114: {113}, 115: {114}, 116: {115}, 117: {116}, 118: {117}, 119: {118}, 120: {119}, 121: {120}, 122: {121}, 123: {122}, 124: {123}, 125: {124}, 126: {125}, 127: {126}, 128: {127}, 129: {128}, 130: {129}, 131: {130}, 132: {131}, 133: {132}, 134: {133}, 135: {134}, 136: {135}, 137: {136}, 138: {137}, 139: {138}, 140: {193}, 141: {140}, 142: {141}, 143: {142}, 144: {143}, 145: {34, 11, 144, 26, 93}, 146: {145}, 147: {28}, 148: {147}, 149: {148}, 150: {149}, 151: {150}, 152: {151}, 153: {152}, 154: {153}, 155: {154}, 156: {155}, 157: {156}, 158: {157}, 159: {158}, 160: {159}, 161: {160}, 162: {161}, 163: {162}, 164: {163}, 165: {164}, 166: {165}, 167: {166}, 168: {167}, 169: {168}, 170: {169}, 171: {170}, 172: {171}, 173: {172}, 174: {173}, 175: {174}, 176: {175}, 177: {176}, 178: {177}, 179: {178}, 180: {179}, 181: {180}, 182: {181}, 183: {182}, 184: {183}, 185: {184}, 186: {185}, 187: {186}, 188: {187}, 189: {188}, 190: {189}, 191: {191}, 192: {87}, 193: {139}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 store store
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
EXACT 16 store store
MORE 17 POT: 4
EXACT 18 store store
EXACT 19 add add
EXACT 20 load load
EXACT 21 add add
EXACT 22 store store
EXACT 23 inttoptr inttoptr
EXACT 24 store store
EXACT 25 load load
EXACT 26 add add
EXACT 27 load load
MORE 28 POT: 4
EXACT 29 add add
EXACT 30 store store
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 load load
EXACT 34 add add
MORE 35 POT: 5
EXACT 36 add add
EXACT 37 store store
EXACT 38 inttoptr inttoptr
EXACT 39 load load
EXACT 40 zext zext
EXACT 41 store store
EXACT 42 add add
EXACT 43 add add
EXACT 44 store store
EXACT 45 inttoptr inttoptr
EXACT 46 load load
EXACT 47 add add
EXACT 48 zext zext
EXACT 49 store store
EXACT 50 icmp icmp
EXACT 51 icmp icmp
EXACT 52 or or
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 and and
EXACT 57 tail tail
EXACT 58 trunc trunc
EXACT 59 and and
EXACT 60 xor xor
EXACT 61 getelementptr getelementptr
EXACT 62 store store
EXACT 63 xor xor
EXACT 64 xor xor
EXACT 65 lshr lshr
EXACT 66 trunc trunc
EXACT 67 and and
EXACT 68 getelementptr getelementptr
EXACT 69 store store
EXACT 70 icmp icmp
EXACT 71 zext zext
EXACT 72 getelementptr getelementptr
EXACT 73 store store
EXACT 74 lshr lshr
EXACT 75 trunc trunc
EXACT 76 getelementptr getelementptr
EXACT 77 store store
EXACT 78 lshr lshr
EXACT 79 lshr lshr
EXACT 80 xor xor
EXACT 81 xor xor
EXACT 82 add add
EXACT 83 icmp icmp
EXACT 84 zext zext
EXACT 85 getelementptr getelementptr
EXACT 86 store store
EXACT 87 add add
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 store store
EXACT 92 load load
EXACT 93 add add
MORE 94 POT: 5
EXACT 95 add add
EXACT 96 store store
EXACT 97 inttoptr inttoptr
EXACT 98 load load
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 add add
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 load load
EXACT 106 sub sub
EXACT 107 zext zext
EXACT 108 store store
EXACT 109 icmp icmp
EXACT 110 zext zext
EXACT 111 store store
EXACT 112 and and
EXACT 113 tail tail
EXACT 114 trunc trunc
EXACT 115 and and
EXACT 116 xor xor
EXACT 117 store store
EXACT 118 xor xor
EXACT 119 xor xor
EXACT 120 lshr lshr
EXACT 121 trunc trunc
EXACT 122 and and
EXACT 123 store store
EXACT 124 icmp icmp
EXACT 125 zext zext
EXACT 126 store store
EXACT 127 lshr lshr
EXACT 128 trunc trunc
EXACT 129 store store
EXACT 130 lshr lshr
EXACT 131 lshr lshr
EXACT 132 xor xor
EXACT 133 xor xor
EXACT 134 add add
EXACT 135 icmp icmp
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 add add
EXACT 139 add add
EXACT 140 store store
EXACT 141 inttoptr inttoptr
EXACT 142 store store
EXACT 143 load load
EXACT 144 add add
MORE 145 POT: 5
EXACT 146 add add
EXACT 147 store store
EXACT 148 inttoptr inttoptr
EXACT 149 load load
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 add add
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 load load
EXACT 157 add add
EXACT 158 zext zext
EXACT 159 store store
EXACT 160 icmp icmp
EXACT 161 icmp icmp
EXACT 162 or or
EXACT 163 zext zext
EXACT 164 store store
EXACT 165 and and
EXACT 166 tail tail
EXACT 167 trunc trunc
EXACT 168 and and
EXACT 169 xor xor
EXACT 170 store store
EXACT 171 xor xor
EXACT 172 xor xor
EXACT 173 lshr lshr
EXACT 174 trunc trunc
EXACT 175 and and
EXACT 176 store store
EXACT 177 icmp icmp
EXACT 178 zext zext
EXACT 179 store store
EXACT 180 lshr lshr
EXACT 181 trunc trunc
EXACT 182 store store
EXACT 183 lshr lshr
EXACT 184 lshr lshr
EXACT 185 xor xor
EXACT 186 xor xor
EXACT 187 add add
EXACT 188 icmp icmp
EXACT 189 zext zext
EXACT 190 store store
EXACT 191 store store
EXACT 192 add add
EXACT 193 store store
EXACT 194 load load
EXACT 195 add add
EXACT 196 inttoptr inttoptr
EXACT 197 load load
EXACT 198 store store
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 store store
EXACT 205 add add
EXACT 206 store store
EXACT 207 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI.i29 = bitcast %union.anon* %16 to i32*', '%17 = load i64, i64* %RBP.i, align 8', '%18 = add i64 %17, -8', '%19 = load i32, i32* %ESI.i29, align 4', '%21 = add i64 %20, 3', 'store i64 %21, i64* %3, align 8', '%22 = inttoptr i64 %18 to i32*', 'store i32 %19, i32* %22, align 4', '%RSI.i26 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0', '%23 = load i64, i64* %RBP.i, align 8', '%24 = add i64 %23, -4', '%26 = add i64 %25, 3', 'store i64 %26, i64* %3, align 8', '%27 = inttoptr i64 %24 to i32*', '%28 = load i32, i32* %27, align 4', '%29 = zext i32 %28 to i64', 'store i64 %29, i64* %RSI.i26, align 8', '%30 = add i64 %23, -8', '%31 = add i64 %25, 6', 'store i64 %31, i64* %3, align 8', '%32 = inttoptr i64 %30 to i32*', '%33 = load i32, i32* %32, align 4', '%34 = add i32 %33, %28', '%35 = zext i32 %34 to i64', 'store i64 %35, i64* %RSI.i26, align 8', '%36 = icmp ult i32 %34, %28', '%37 = icmp ult i32 %34, %33', '%38 = or i1 %36, %37', '%39 = zext i1 %38 to i8', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %39, i8* %40, align 1', '%41 = and i32 %34, 255', '%42 = tail call i32 @llvm.ctpop.i32(i32 %41)', '%43 = trunc i32 %42 to i8', '%44 = and i8 %43, 1', '%45 = xor i8 %44, 1', '%46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %45, i8* %46, align 1', '%47 = xor i32 %33, %28', '%48 = xor i32 %47, %34', '%49 = lshr i32 %48, 4', '%50 = trunc i32 %49 to i8', '%51 = and i8 %50, 1', '%52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %51, i8* %52, align 1', '%53 = icmp eq i32 %34, 0', '%54 = zext i1 %53 to i8', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %54, i8* %55, align 1', '%56 = lshr i32 %34, 31', '%57 = trunc i32 %56 to i8', '%58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %57, i8* %58, align 1', '%59 = lshr i32 %28, 31', '%60 = lshr i32 %33, 31', '%61 = xor i32 %56, %59', '%62 = xor i32 %56, %60', '%63 = add nuw nsw i32 %61, %62', '%64 = icmp eq i32 %63, 2', '%65 = zext i1 %64 to i8', '%66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %65, i8* %66, align 1', '%67 = add i64 %23, -12', '%68 = add i64 %25, 9', 'store i64 %68, i64* %3, align 8', '%69 = inttoptr i64 %67 to i32*', 'store i32 %34, i32* %69, align 4', '%70 = load i64, i64* %RBP.i, align 8', '%71 = add i64 %70, -4', '%73 = add i64 %72, 3', 'store i64 %73, i64* %3, align 8', '%74 = inttoptr i64 %71 to i32*', '%75 = load i32, i32* %74, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RSI.i26, align 8', '%77 = add i64 %70, -8', '%78 = add i64 %72, 6', 'store i64 %78, i64* %3, align 8', '%79 = inttoptr i64 %77 to i32*', '%80 = load i32, i32* %79, align 4', '%81 = sub i32 %75, %80', '%82 = zext i32 %81 to i64', 'store i64 %82, i64* %RSI.i26, align 8', '%83 = icmp ult i32 %75, %80', '%84 = zext i1 %83 to i8', 'store i8 %84, i8* %40, align 1', '%85 = and i32 %81, 255', '%86 = tail call i32 @llvm.ctpop.i32(i32 %85)', '%87 = trunc i32 %86 to i8', '%88 = and i8 %87, 1', '%89 = xor i8 %88, 1', 'store i8 %89, i8* %46, align 1', '%90 = xor i32 %80, %75', '%91 = xor i32 %90, %81', '%92 = lshr i32 %91, 4', '%93 = trunc i32 %92 to i8', '%94 = and i8 %93, 1', 'store i8 %94, i8* %52, align 1', '%95 = icmp eq i32 %81, 0', '%96 = zext i1 %95 to i8', 'store i8 %96, i8* %55, align 1', '%97 = lshr i32 %81, 31', '%98 = trunc i32 %97 to i8', 'store i8 %98, i8* %58, align 1', '%99 = lshr i32 %75, 31', '%100 = lshr i32 %80, 31', '%101 = xor i32 %100, %99', '%102 = xor i32 %97, %99', '%103 = add nuw nsw i32 %102, %101', '%104 = icmp eq i32 %103, 2', '%105 = zext i1 %104 to i8', 'store i8 %105, i8* %66, align 1', '%106 = add i64 %70, -16', '%107 = add i64 %72, 9', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %106 to i32*', 'store i32 %81, i32* %108, align 4', '%109 = load i64, i64* %RBP.i, align 8', '%110 = add i64 %109, -12', '%112 = add i64 %111, 3', 'store i64 %112, i64* %3, align 8', '%113 = inttoptr i64 %110 to i32*', '%114 = load i32, i32* %113, align 4', '%115 = zext i32 %114 to i64', 'store i64 %115, i64* %RSI.i26, align 8', '%116 = add i64 %109, -16', '%117 = add i64 %111, 6', 'store i64 %117, i64* %3, align 8', '%118 = inttoptr i64 %116 to i32*', '%119 = load i32, i32* %118, align 4', '%120 = add i32 %119, %114', '%121 = zext i32 %120 to i64', 'store i64 %121, i64* %RSI.i26, align 8', '%122 = icmp ult i32 %120, %114', '%123 = icmp ult i32 %120, %119', '%124 = or i1 %122, %123', '%125 = zext i1 %124 to i8', 'store i8 %125, i8* %40, align 1', '%126 = and i32 %120, 255', '%127 = tail call i32 @llvm.ctpop.i32(i32 %126)', '%128 = trunc i32 %127 to i8', '%129 = and i8 %128, 1', '%130 = xor i8 %129, 1', 'store i8 %130, i8* %46, align 1', '%131 = xor i32 %119, %114', '%132 = xor i32 %131, %120', '%133 = lshr i32 %132, 4', '%134 = trunc i32 %133 to i8', '%135 = and i8 %134, 1', 'store i8 %135, i8* %52, align 1', '%136 = icmp eq i32 %120, 0', '%137 = zext i1 %136 to i8', 'store i8 %137, i8* %55, align 1', '%138 = lshr i32 %120, 31', '%139 = trunc i32 %138 to i8', 'store i8 %139, i8* %58, align 1', '%140 = lshr i32 %114, 31', '%141 = lshr i32 %119, 31', '%142 = xor i32 %138, %140', '%143 = xor i32 %138, %141', '%144 = add nuw nsw i32 %142, %143', '%145 = icmp eq i32 %144, 2', '%146 = zext i1 %145 to i8', 'store i8 %146, i8* %66, align 1', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 %121, i64* %RAX.i, align 8', '%147 = add i64 %111, 9', 'store i64 %147, i64* %3, align 8', '%148 = load i64, i64* %6, align 8', '%149 = add i64 %148, 8', '%150 = inttoptr i64 %148 to i64*', '%151 = load i64, i64* %150, align 8', 'store i64 %151, i64* %RBP.i, align 8', 'store i64 %149, i64* %6, align 8', '%152 = add i64 %111, 10', 'store i64 %152, i64* %3, align 8', '%153 = inttoptr i64 %149 to i64*', '%154 = load i64, i64* %153, align 8', 'store i64 %154, i64* %3, align 8', '%155 = add i64 %148, 16', 'store i64 %155, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %11 to i32*
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = load i32, i32* %EDI.i, align 4
Found line to remove! %14 = add i64 %10, 6
Found line to remove! store i64 %14, i64* %3, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Found line to remove! %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI.i29 = bitcast %union.anon* %16 to i32*
Found line to remove! %17 = load i64, i64* %RBP.i, align 8
Found line to remove! %18 = add i64 %17, -8
Found line to remove! %19 = load i32, i32* %ESI.i29, align 4
Keep: %20 = load i64, i64* %3, align 8
Found line to remove! %21 = add i64 %20, 3
Found line to remove! store i64 %21, i64* %3, align 8
Found line to remove! %22 = inttoptr i64 %18 to i32*
Found line to remove! store i32 %19, i32* %22, align 4
Found line to remove! %RSI.i26 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
Found line to remove! %23 = load i64, i64* %RBP.i, align 8
Found line to remove! %24 = add i64 %23, -4
Keep: %25 = load i64, i64* %3, align 8
Found line to remove! %26 = add i64 %25, 3
Found line to remove! store i64 %26, i64* %3, align 8
Found line to remove! %27 = inttoptr i64 %24 to i32*
Found line to remove! %28 = load i32, i32* %27, align 4
Found line to remove! %29 = zext i32 %28 to i64
Found line to remove! store i64 %29, i64* %RSI.i26, align 8
Found line to remove! %30 = add i64 %23, -8
Found line to remove! %31 = add i64 %25, 6
Found line to remove! store i64 %31, i64* %3, align 8
Found line to remove! %32 = inttoptr i64 %30 to i32*
Found line to remove! %33 = load i32, i32* %32, align 4
Found line to remove! %34 = add i32 %33, %28
Found line to remove! %35 = zext i32 %34 to i64
Found line to remove! store i64 %35, i64* %RSI.i26, align 8
Found line to remove! %36 = icmp ult i32 %34, %28
Found line to remove! %37 = icmp ult i32 %34, %33
Found line to remove! %38 = or i1 %36, %37
Found line to remove! %39 = zext i1 %38 to i8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %39, i8* %40, align 1
Found line to remove! %41 = and i32 %34, 255
Found line to remove! %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
Found line to remove! %43 = trunc i32 %42 to i8
Found line to remove! %44 = and i8 %43, 1
Found line to remove! %45 = xor i8 %44, 1
Found line to remove! %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %45, i8* %46, align 1
Found line to remove! %47 = xor i32 %33, %28
Found line to remove! %48 = xor i32 %47, %34
Found line to remove! %49 = lshr i32 %48, 4
Found line to remove! %50 = trunc i32 %49 to i8
Found line to remove! %51 = and i8 %50, 1
Found line to remove! %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %51, i8* %52, align 1
Found line to remove! %53 = icmp eq i32 %34, 0
Found line to remove! %54 = zext i1 %53 to i8
Found line to remove! %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %54, i8* %55, align 1
Found line to remove! %56 = lshr i32 %34, 31
Found line to remove! %57 = trunc i32 %56 to i8
Found line to remove! %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %57, i8* %58, align 1
Found line to remove! %59 = lshr i32 %28, 31
Found line to remove! %60 = lshr i32 %33, 31
Found line to remove! %61 = xor i32 %56, %59
Found line to remove! %62 = xor i32 %56, %60
Found line to remove! %63 = add nuw nsw i32 %61, %62
Found line to remove! %64 = icmp eq i32 %63, 2
Found line to remove! %65 = zext i1 %64 to i8
Found line to remove! %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %65, i8* %66, align 1
Found line to remove! %67 = add i64 %23, -12
Found line to remove! %68 = add i64 %25, 9
Found line to remove! store i64 %68, i64* %3, align 8
Found line to remove! %69 = inttoptr i64 %67 to i32*
Found line to remove! store i32 %34, i32* %69, align 4
Found line to remove! %70 = load i64, i64* %RBP.i, align 8
Found line to remove! %71 = add i64 %70, -4
Keep: %72 = load i64, i64* %3, align 8
Found line to remove! %73 = add i64 %72, 3
Found line to remove! store i64 %73, i64* %3, align 8
Found line to remove! %74 = inttoptr i64 %71 to i32*
Found line to remove! %75 = load i32, i32* %74, align 4
Found line to remove! %76 = zext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RSI.i26, align 8
Found line to remove! %77 = add i64 %70, -8
Found line to remove! %78 = add i64 %72, 6
Found line to remove! store i64 %78, i64* %3, align 8
Found line to remove! %79 = inttoptr i64 %77 to i32*
Found line to remove! %80 = load i32, i32* %79, align 4
Found line to remove! %81 = sub i32 %75, %80
Found line to remove! %82 = zext i32 %81 to i64
Found line to remove! store i64 %82, i64* %RSI.i26, align 8
Found line to remove! %83 = icmp ult i32 %75, %80
Found line to remove! %84 = zext i1 %83 to i8
Found line to remove! store i8 %84, i8* %40, align 1
Found line to remove! %85 = and i32 %81, 255
Found line to remove! %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
Found line to remove! %87 = trunc i32 %86 to i8
Found line to remove! %88 = and i8 %87, 1
Found line to remove! %89 = xor i8 %88, 1
Found line to remove! store i8 %89, i8* %46, align 1
Found line to remove! %90 = xor i32 %80, %75
Found line to remove! %91 = xor i32 %90, %81
Found line to remove! %92 = lshr i32 %91, 4
Found line to remove! %93 = trunc i32 %92 to i8
Found line to remove! %94 = and i8 %93, 1
Found line to remove! store i8 %94, i8* %52, align 1
Found line to remove! %95 = icmp eq i32 %81, 0
Found line to remove! %96 = zext i1 %95 to i8
Found line to remove! store i8 %96, i8* %55, align 1
Found line to remove! %97 = lshr i32 %81, 31
Found line to remove! %98 = trunc i32 %97 to i8
Found line to remove! store i8 %98, i8* %58, align 1
Found line to remove! %99 = lshr i32 %75, 31
Found line to remove! %100 = lshr i32 %80, 31
Found line to remove! %101 = xor i32 %100, %99
Found line to remove! %102 = xor i32 %97, %99
Found line to remove! %103 = add nuw nsw i32 %102, %101
Found line to remove! %104 = icmp eq i32 %103, 2
Found line to remove! %105 = zext i1 %104 to i8
Found line to remove! store i8 %105, i8* %66, align 1
Found line to remove! %106 = add i64 %70, -16
Found line to remove! %107 = add i64 %72, 9
Found line to remove! store i64 %107, i64* %3, align 8
Found line to remove! %108 = inttoptr i64 %106 to i32*
Found line to remove! store i32 %81, i32* %108, align 4
Found line to remove! %109 = load i64, i64* %RBP.i, align 8
Found line to remove! %110 = add i64 %109, -12
Keep: %111 = load i64, i64* %3, align 8
Found line to remove! %112 = add i64 %111, 3
Found line to remove! store i64 %112, i64* %3, align 8
Found line to remove! %113 = inttoptr i64 %110 to i32*
Found line to remove! %114 = load i32, i32* %113, align 4
Found line to remove! %115 = zext i32 %114 to i64
Found line to remove! store i64 %115, i64* %RSI.i26, align 8
Found line to remove! %116 = add i64 %109, -16
Found line to remove! %117 = add i64 %111, 6
Found line to remove! store i64 %117, i64* %3, align 8
Found line to remove! %118 = inttoptr i64 %116 to i32*
Found line to remove! %119 = load i32, i32* %118, align 4
Found line to remove! %120 = add i32 %119, %114
Found line to remove! %121 = zext i32 %120 to i64
Found line to remove! store i64 %121, i64* %RSI.i26, align 8
Found line to remove! %122 = icmp ult i32 %120, %114
Found line to remove! %123 = icmp ult i32 %120, %119
Found line to remove! %124 = or i1 %122, %123
Found line to remove! %125 = zext i1 %124 to i8
Found line to remove! store i8 %125, i8* %40, align 1
Found line to remove! %126 = and i32 %120, 255
Found line to remove! %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
Found line to remove! %128 = trunc i32 %127 to i8
Found line to remove! %129 = and i8 %128, 1
Found line to remove! %130 = xor i8 %129, 1
Found line to remove! store i8 %130, i8* %46, align 1
Found line to remove! %131 = xor i32 %119, %114
Found line to remove! %132 = xor i32 %131, %120
Found line to remove! %133 = lshr i32 %132, 4
Found line to remove! %134 = trunc i32 %133 to i8
Found line to remove! %135 = and i8 %134, 1
Found line to remove! store i8 %135, i8* %52, align 1
Found line to remove! %136 = icmp eq i32 %120, 0
Found line to remove! %137 = zext i1 %136 to i8
Found line to remove! store i8 %137, i8* %55, align 1
Found line to remove! %138 = lshr i32 %120, 31
Found line to remove! %139 = trunc i32 %138 to i8
Found line to remove! store i8 %139, i8* %58, align 1
Found line to remove! %140 = lshr i32 %114, 31
Found line to remove! %141 = lshr i32 %119, 31
Found line to remove! %142 = xor i32 %138, %140
Found line to remove! %143 = xor i32 %138, %141
Found line to remove! %144 = add nuw nsw i32 %142, %143
Found line to remove! %145 = icmp eq i32 %144, 2
Found line to remove! %146 = zext i1 %145 to i8
Found line to remove! store i8 %146, i8* %66, align 1
Found line to remove! %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 %121, i64* %RAX.i, align 8
Found line to remove! %147 = add i64 %111, 9
Found line to remove! store i64 %147, i64* %3, align 8
Found line to remove! %148 = load i64, i64* %6, align 8
Found line to remove! %149 = add i64 %148, 8
Found line to remove! %150 = inttoptr i64 %148 to i64*
Found line to remove! %151 = load i64, i64* %150, align 8
Found line to remove! store i64 %151, i64* %RBP.i, align 8
Found line to remove! store i64 %149, i64* %6, align 8
Found line to remove! %152 = add i64 %111, 10
Found line to remove! store i64 %152, i64* %3, align 8
Found line to remove! %153 = inttoptr i64 %149 to i64*
Found line to remove! %154 = load i64, i64* %153, align 8
Found line to remove! store i64 %154, i64* %3, align 8
Found line to remove! %155 = add i64 %148, 16
Found line to remove! store i64 %155, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', 'store i64 %9, i64* %7, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -12', '%13 = load i32, i32* %EDI, align 4', '%14 = add i64 %11, 6', 'store i64 %14, i64* %PC, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%16 = load i64, i64* %RBP, align 8', '%17 = add i64 %16, -8', '%18 = load i32, i32* %ESI, align 4', '%20 = add i64 %19, 3', 'store i64 %20, i64* %PC, align 8', '%21 = inttoptr i64 %17 to i32*', 'store i32 %18, i32* %21, align 4', '%22 = load i64, i64* %RBP, align 8', '%23 = add i64 %22, -4', '%25 = add i64 %24, 3', 'store i64 %25, i64* %PC, align 8', '%26 = inttoptr i64 %23 to i32*', '%27 = load i32, i32* %26, align 4', '%28 = zext i32 %27 to i64', 'store i64 %28, i64* %RSI, align 8', '%29 = add i64 %22, -8', '%30 = add i64 %24, 6', 'store i64 %30, i64* %PC, align 8', '%31 = inttoptr i64 %29 to i32*', '%32 = load i32, i32* %31, align 4', '%33 = add i32 %32, %27', '%34 = zext i32 %33 to i64', 'store i64 %34, i64* %RSI, align 8', '%35 = icmp ult i32 %33, %27', '%36 = icmp ult i32 %33, %32', '%37 = or i1 %35, %36', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %38, i8* %39, align 1', '%40 = and i32 %33, 255', '%41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12', '%42 = trunc i32 %41 to i8', '%43 = and i8 %42, 1', '%44 = xor i8 %43, 1', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %44, i8* %45, align 1', '%46 = xor i32 %32, %27', '%47 = xor i32 %46, %33', '%48 = lshr i32 %47, 4', '%49 = trunc i32 %48 to i8', '%50 = and i8 %49, 1', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %50, i8* %51, align 1', '%52 = icmp eq i32 %33, 0', '%53 = zext i1 %52 to i8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %53, i8* %54, align 1', '%55 = lshr i32 %33, 31', '%56 = trunc i32 %55 to i8', '%57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %56, i8* %57, align 1', '%58 = lshr i32 %27, 31', '%59 = lshr i32 %32, 31', '%60 = xor i32 %55, %58', '%61 = xor i32 %55, %59', '%62 = add nuw nsw i32 %60, %61', '%63 = icmp eq i32 %62, 2', '%64 = zext i1 %63 to i8', '%65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %64, i8* %65, align 1', '%66 = add i64 %22, -12', '%67 = add i64 %24, 9', 'store i64 %67, i64* %PC, align 8', '%68 = inttoptr i64 %66 to i32*', 'store i32 %33, i32* %68, align 4', '%69 = load i64, i64* %RBP, align 8', '%70 = add i64 %69, -4', '%72 = add i64 %71, 3', 'store i64 %72, i64* %PC, align 8', '%73 = inttoptr i64 %70 to i32*', '%74 = load i32, i32* %73, align 4', '%75 = zext i32 %74 to i64', 'store i64 %75, i64* %RSI, align 8', '%76 = add i64 %69, -8', '%77 = add i64 %71, 6', 'store i64 %77, i64* %PC, align 8', '%78 = inttoptr i64 %76 to i32*', '%79 = load i32, i32* %78, align 4', '%80 = sub i32 %74, %79', '%81 = zext i32 %80 to i64', 'store i64 %81, i64* %RSI, align 8', '%82 = icmp ult i32 %74, %79', '%83 = zext i1 %82 to i8', 'store i8 %83, i8* %39, align 1', '%84 = and i32 %80, 255', '%85 = tail call i32 @llvm.ctpop.i32(i32 %84) #12', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', '%88 = xor i8 %87, 1', 'store i8 %88, i8* %45, align 1', '%89 = xor i32 %79, %74', '%90 = xor i32 %89, %80', '%91 = lshr i32 %90, 4', '%92 = trunc i32 %91 to i8', '%93 = and i8 %92, 1', 'store i8 %93, i8* %51, align 1', '%94 = icmp eq i32 %80, 0', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %54, align 1', '%96 = lshr i32 %80, 31', '%97 = trunc i32 %96 to i8', 'store i8 %97, i8* %57, align 1', '%98 = lshr i32 %74, 31', '%99 = lshr i32 %79, 31', '%100 = xor i32 %99, %98', '%101 = xor i32 %96, %98', '%102 = add nuw nsw i32 %101, %100', '%103 = icmp eq i32 %102, 2', '%104 = zext i1 %103 to i8', 'store i8 %104, i8* %65, align 1', '%105 = add i64 %69, -16', '%106 = add i64 %71, 9', 'store i64 %106, i64* %PC, align 8', '%107 = inttoptr i64 %105 to i32*', 'store i32 %80, i32* %107, align 4', '%108 = load i64, i64* %RBP, align 8', '%109 = add i64 %108, -12', '%111 = add i64 %110, 3', 'store i64 %111, i64* %PC, align 8', '%112 = inttoptr i64 %109 to i32*', '%113 = load i32, i32* %112, align 4', '%114 = zext i32 %113 to i64', 'store i64 %114, i64* %RSI, align 8', '%115 = add i64 %108, -16', '%116 = add i64 %110, 6', 'store i64 %116, i64* %PC, align 8', '%117 = inttoptr i64 %115 to i32*', '%118 = load i32, i32* %117, align 4', '%119 = add i32 %118, %113', '%120 = zext i32 %119 to i64', 'store i64 %120, i64* %RSI, align 8', '%121 = icmp ult i32 %119, %113', '%122 = icmp ult i32 %119, %118', '%123 = or i1 %121, %122', '%124 = zext i1 %123 to i8', 'store i8 %124, i8* %39, align 1', '%125 = and i32 %119, 255', '%126 = tail call i32 @llvm.ctpop.i32(i32 %125) #12', '%127 = trunc i32 %126 to i8', '%128 = and i8 %127, 1', '%129 = xor i8 %128, 1', 'store i8 %129, i8* %45, align 1', '%130 = xor i32 %118, %113', '%131 = xor i32 %130, %119', '%132 = lshr i32 %131, 4', '%133 = trunc i32 %132 to i8', '%134 = and i8 %133, 1', 'store i8 %134, i8* %51, align 1', '%135 = icmp eq i32 %119, 0', '%136 = zext i1 %135 to i8', 'store i8 %136, i8* %54, align 1', '%137 = lshr i32 %119, 31', '%138 = trunc i32 %137 to i8', 'store i8 %138, i8* %57, align 1', '%139 = lshr i32 %113, 31', '%140 = lshr i32 %118, 31', '%141 = xor i32 %137, %139', '%142 = xor i32 %137, %140', '%143 = add nuw nsw i32 %141, %142', '%144 = icmp eq i32 %143, 2', '%145 = zext i1 %144 to i8', 'store i8 %145, i8* %65, align 1', 'store i64 %120, i64* %RAX, align 8', '%146 = add i64 %110, 9', 'store i64 %146, i64* %PC, align 8', '%147 = load i64, i64* %7, align 8', '%148 = add i64 %147, 8', '%149 = inttoptr i64 %147 to i64*', '%150 = load i64, i64* %149, align 8', 'store i64 %150, i64* %RBP, align 8', 'store i64 %148, i64* %7, align 8', '%151 = add i64 %110, 10', 'store i64 %151, i64* %PC, align 8', '%152 = inttoptr i64 %148 to i64*', '%153 = load i64, i64* %152, align 8', 'store i64 %153, i64* %PC, align 8', '%154 = add i64 %147, 16', 'store i64 %154, i64* %7, align 8', 'ret %struct.Memory* %2'])
Keep: block_4004b0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %8 = load i64, i64* %7, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %5, i64* %10, align 8
Found line to remove! store i64 %9, i64* %7, align 8
Keep: %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -12
Found line to remove! %13 = load i32, i32* %EDI, align 4
Found line to remove! %14 = add i64 %11, 6
Found line to remove! store i64 %14, i64* %PC, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Found line to remove! %16 = load i64, i64* %RBP, align 8
Found line to remove! %17 = add i64 %16, -8
Found line to remove! %18 = load i32, i32* %ESI, align 4
Keep: %19 = load i64, i64* %PC, align 8
Found line to remove! %20 = add i64 %19, 3
Found line to remove! store i64 %20, i64* %PC, align 8
Found line to remove! %21 = inttoptr i64 %17 to i32*
Found line to remove! store i32 %18, i32* %21, align 4
Found line to remove! %22 = load i64, i64* %RBP, align 8
Found line to remove! %23 = add i64 %22, -4
Keep: %24 = load i64, i64* %PC, align 8
Found line to remove! %25 = add i64 %24, 3
Found line to remove! store i64 %25, i64* %PC, align 8
Found line to remove! %26 = inttoptr i64 %23 to i32*
Found line to remove! %27 = load i32, i32* %26, align 4
Found line to remove! %28 = zext i32 %27 to i64
Found line to remove! store i64 %28, i64* %RSI, align 8
Found line to remove! %29 = add i64 %22, -8
Found line to remove! %30 = add i64 %24, 6
Found line to remove! store i64 %30, i64* %PC, align 8
Found line to remove! %31 = inttoptr i64 %29 to i32*
Found line to remove! %32 = load i32, i32* %31, align 4
Found line to remove! %33 = add i32 %32, %27
Found line to remove! %34 = zext i32 %33 to i64
Found line to remove! store i64 %34, i64* %RSI, align 8
Found line to remove! %35 = icmp ult i32 %33, %27
Found line to remove! %36 = icmp ult i32 %33, %32
Found line to remove! %37 = or i1 %35, %36
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = and i32 %33, 255
Found line to remove! %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12
Found line to remove! %42 = trunc i32 %41 to i8
Found line to remove! %43 = and i8 %42, 1
Found line to remove! %44 = xor i8 %43, 1
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %44, i8* %45, align 1
Found line to remove! %46 = xor i32 %32, %27
Found line to remove! %47 = xor i32 %46, %33
Found line to remove! %48 = lshr i32 %47, 4
Found line to remove! %49 = trunc i32 %48 to i8
Found line to remove! %50 = and i8 %49, 1
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %50, i8* %51, align 1
Found line to remove! %52 = icmp eq i32 %33, 0
Found line to remove! %53 = zext i1 %52 to i8
Found line to remove! %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %53, i8* %54, align 1
Found line to remove! %55 = lshr i32 %33, 31
Found line to remove! %56 = trunc i32 %55 to i8
Found line to remove! %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %56, i8* %57, align 1
Found line to remove! %58 = lshr i32 %27, 31
Found line to remove! %59 = lshr i32 %32, 31
Found line to remove! %60 = xor i32 %55, %58
Found line to remove! %61 = xor i32 %55, %59
Found line to remove! %62 = add nuw nsw i32 %60, %61
Found line to remove! %63 = icmp eq i32 %62, 2
Found line to remove! %64 = zext i1 %63 to i8
Found line to remove! %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %64, i8* %65, align 1
Found line to remove! %66 = add i64 %22, -12
Found line to remove! %67 = add i64 %24, 9
Found line to remove! store i64 %67, i64* %PC, align 8
Found line to remove! %68 = inttoptr i64 %66 to i32*
Found line to remove! store i32 %33, i32* %68, align 4
Found line to remove! %69 = load i64, i64* %RBP, align 8
Found line to remove! %70 = add i64 %69, -4
Keep: %71 = load i64, i64* %PC, align 8
Found line to remove! %72 = add i64 %71, 3
Found line to remove! store i64 %72, i64* %PC, align 8
Found line to remove! %73 = inttoptr i64 %70 to i32*
Found line to remove! %74 = load i32, i32* %73, align 4
Found line to remove! %75 = zext i32 %74 to i64
Found line to remove! store i64 %75, i64* %RSI, align 8
Found line to remove! %76 = add i64 %69, -8
Found line to remove! %77 = add i64 %71, 6
Found line to remove! store i64 %77, i64* %PC, align 8
Found line to remove! %78 = inttoptr i64 %76 to i32*
Found line to remove! %79 = load i32, i32* %78, align 4
Found line to remove! %80 = sub i32 %74, %79
Found line to remove! %81 = zext i32 %80 to i64
Found line to remove! store i64 %81, i64* %RSI, align 8
Found line to remove! %82 = icmp ult i32 %74, %79
Found line to remove! %83 = zext i1 %82 to i8
Found line to remove! store i8 %83, i8* %39, align 1
Found line to remove! %84 = and i32 %80, 255
Found line to remove! %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #12
Found line to remove! %86 = trunc i32 %85 to i8
Found line to remove! %87 = and i8 %86, 1
Found line to remove! %88 = xor i8 %87, 1
Found line to remove! store i8 %88, i8* %45, align 1
Found line to remove! %89 = xor i32 %79, %74
Found line to remove! %90 = xor i32 %89, %80
Found line to remove! %91 = lshr i32 %90, 4
Found line to remove! %92 = trunc i32 %91 to i8
Found line to remove! %93 = and i8 %92, 1
Found line to remove! store i8 %93, i8* %51, align 1
Found line to remove! %94 = icmp eq i32 %80, 0
Found line to remove! %95 = zext i1 %94 to i8
Found line to remove! store i8 %95, i8* %54, align 1
Found line to remove! %96 = lshr i32 %80, 31
Found line to remove! %97 = trunc i32 %96 to i8
Found line to remove! store i8 %97, i8* %57, align 1
Found line to remove! %98 = lshr i32 %74, 31
Found line to remove! %99 = lshr i32 %79, 31
Found line to remove! %100 = xor i32 %99, %98
Found line to remove! %101 = xor i32 %96, %98
Found line to remove! %102 = add nuw nsw i32 %101, %100
Found line to remove! %103 = icmp eq i32 %102, 2
Found line to remove! %104 = zext i1 %103 to i8
Found line to remove! store i8 %104, i8* %65, align 1
Found line to remove! %105 = add i64 %69, -16
Found line to remove! %106 = add i64 %71, 9
Found line to remove! store i64 %106, i64* %PC, align 8
Found line to remove! %107 = inttoptr i64 %105 to i32*
Found line to remove! store i32 %80, i32* %107, align 4
Found line to remove! %108 = load i64, i64* %RBP, align 8
Found line to remove! %109 = add i64 %108, -12
Keep: %110 = load i64, i64* %PC, align 8
Found line to remove! %111 = add i64 %110, 3
Found line to remove! store i64 %111, i64* %PC, align 8
Found line to remove! %112 = inttoptr i64 %109 to i32*
Found line to remove!Writing '/tmp/tmpqn3chfjd.dot'...
Writing '/tmp/tmpqn3chfjd.dot':Done

Reading LLVM: /tmp/tmpsgi0wa07-query.ll
Extracting function [add_sub] from /tmp/tmpsgi0wa07-query.ll
Dot file generated!
Writing '/tmp/tmprualfi9m.dot'...
Writing '/tmp/tmprualfi9m.dot':Done

Reading LLVM: /tmp/tmp7e1qv49p-target.ll
Extracting function [add_sub] from /tmp/tmp7e1qv49p-target.ll
Dot file generated!
 %113 = load i32, i32* %112, align 4
Found line to remove! %114 = zext i32 %113 to i64
Found line to remove! store i64 %114, i64* %RSI, align 8
Found line to remove! %115 = add i64 %108, -16
Found line to remove! %116 = add i64 %110, 6
Found line to remove! store i64 %116, i64* %PC, align 8
Found line to remove! %117 = inttoptr i64 %115 to i32*
Found line to remove! %118 = load i32, i32* %117, align 4
Found line to remove! %119 = add i32 %118, %113
Found line to remove! %120 = zext i32 %119 to i64
Found line to remove! store i64 %120, i64* %RSI, align 8
Found line to remove! %121 = icmp ult i32 %119, %113
Found line to remove! %122 = icmp ult i32 %119, %118
Found line to remove! %123 = or i1 %121, %122
Found line to remove! %124 = zext i1 %123 to i8
Found line to remove! store i8 %124, i8* %39, align 1
Found line to remove! %125 = and i32 %119, 255
Found line to remove! %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #12
Found line to remove! %127 = trunc i32 %126 to i8
Found line to remove! %128 = and i8 %127, 1
Found line to remove! %129 = xor i8 %128, 1
Found line to remove! store i8 %129, i8* %45, align 1
Found line to remove! %130 = xor i32 %118, %113
Found line to remove! %131 = xor i32 %130, %119
Found line to remove! %132 = lshr i32 %131, 4
Found line to remove! %133 = trunc i32 %132 to i8
Found line to remove! %134 = and i8 %133, 1
Found line to remove! store i8 %134, i8* %51, align 1
Found line to remove! %135 = icmp eq i32 %119, 0
Found line to remove! %136 = zext i1 %135 to i8
Found line to remove! store i8 %136, i8* %54, align 1
Found line to remove! %137 = lshr i32 %119, 31
Found line to remove! %138 = trunc i32 %137 to i8
Found line to remove! store i8 %138, i8* %57, align 1
Found line to remove! %139 = lshr i32 %113, 31
Found line to remove! %140 = lshr i32 %118, 31
Found line to remove! %141 = xor i32 %137, %139
Found line to remove! %142 = xor i32 %137, %140
Found line to remove! %143 = add nuw nsw i32 %141, %142
Found line to remove! %144 = icmp eq i32 %143, 2
Found line to remove! %145 = zext i1 %144 to i8
Found line to remove! store i8 %145, i8* %65, align 1
Found line to remove! store i64 %120, i64* %RAX, align 8
Found line to remove! %146 = add i64 %110, 9
Found line to remove! store i64 %146, i64* %PC, align 8
Found line to remove! %147 = load i64, i64* %7, align 8
Found line to remove! %148 = add i64 %147, 8
Found line to remove! %149 = inttoptr i64 %147 to i64*
Found line to remove! %150 = load i64, i64* %149, align 8
Found line to remove! store i64 %150, i64* %RBP, align 8
Found line to remove! store i64 %148, i64* %7, align 8
Found line to remove! %151 = add i64 %110, 10
Found line to remove! store i64 %151, i64* %PC, align 8
Found line to remove! %152 = inttoptr i64 %148 to i64*
Found line to remove! %153 = load i64, i64* %152, align 8
Found line to remove! store i64 %153, i64* %PC, align 8
Found line to remove! %154 = add i64 %147, 16
Found line to remove! store i64 %154, i64* %7, align 8
Found line to remove! ret %struct.Memory* %2
================ Starting round 2
- 0 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f0887a8c8>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f0887a8c8>, {0: {0}})
EXACT 0 ret ret
================ Starting round 3
- 0 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f08978620>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f08978620>, {0: {0}})
EXACT 0 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_4004b0:
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/add-sub/add_sub/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/add-sub/binary/test.mcsema.calls_renamed.ll add_sub
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
