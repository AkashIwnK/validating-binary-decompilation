Matching sub_400490_add_sub Vs add_sub


[Info] Retrieve Potential Matches...
[0x55afeee540d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55afeeed0520]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55afeee8eb10]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55afeeed0330]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55afeee987c0]:   %88 = xor i8 %87, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeee98840]:   store i8 %88, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee98ed0]:   %89 = xor i32 %79, %74 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee98f50]:   %90 = xor i32 %89, %80 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee98fd0]:   %91 = lshr i32 %90, 4 {
	[0x55afeee6d8f0]:  %92 = lshr i32 %91, 4
	[0x55afeee7a7c0]:  %133 = lshr i32 %132, 4
	[0x55afeeee0850]:  %49 = lshr i32 %48, 4
	}

[0x55afeee99038]:   %92 = trunc i32 %91 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee990b0]:   %93 = and i8 %92, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeee99130]:   store i8 %93, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee997c0]:   %94 = icmp eq i32 %80, 0 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeee99828]:   %95 = zext i1 %94 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee998a0]:   store i8 %95, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee99f30]:   %96 = lshr i32 %80, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee99f98]:   %97 = trunc i32 %96 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee9a010]:   store i8 %97, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9a6a0]:   %98 = lshr i32 %74, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9a720]:   %99 = lshr i32 %79, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9a7a0]:   %100 = xor i32 %99, %98 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9a820]:   %101 = xor i32 %96, %98 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9a8a0]:   %102 = add nuw nsw i32 %101, %100 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeee9a920]:   %103 = icmp eq i32 %102, 2 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeee9a988]:   %104 = zext i1 %103 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9aa00]:   store i8 %104, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9b0d0]:   %105 = add i64 %69, -16 {
	[0x55afeee7b980]:  %106 = add i64 %70, -16
	[0x55afeee7c5b0]:  %116 = add i64 %109, -16
	}

[0x55afeee9b150]:   %106 = add i64 %71, 9 {
	[0x55afeee70d70]:  %68 = add i64 %25, 9
	[0x55afeee7aeb0]:  %107 = add i64 %72, 9
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeee9b1d0]:   store i64 %106, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9b238]:   %107 = inttoptr i64 %105 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeee9b2b0]:   store i32 %80, i32* %107, align 4 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9b390]:   %109 = add i64 %108, -12 {
	[0x55afeee700c0]:  %67 = add i64 %23, -12
	[0x55afeee79610]:  %110 = add i64 %109, -12
	[0x55afeeedcae0]:  %12 = add i64 %7, -12
	}

[0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9b470]:   %111 = add i64 %110, 3 {
	[0x55afeee6cfc0]:  %21 = add i64 %20, 3
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeee9b4f0]:   store i64 %111, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9b558]:   %112 = inttoptr i64 %109 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeee9b5b8]:   %113 = load i32, i32* %112, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9b618]:   %114 = zext i32 %113 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9b690]:   store i64 %114, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9b710]:   %115 = add i64 %108, -16 {
	[0x55afeee7b980]:  %106 = add i64 %70, -16
	[0x55afeee7c5b0]:  %116 = add i64 %109, -16
	}

[0x55afeee9b790]:   %116 = add i64 %110, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeed9ea0]:  %14 = add i64 %10, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeee9b810]:   store i64 %116, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9b878]:   %117 = inttoptr i64 %115 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeee9b8d8]:   %118 = load i32, i32* %117, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9b950]:   %119 = add i32 %118, %113 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeee9b9b8]:   %120 = zext i32 %119 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9ba30]:   store i64 %120, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9bab0]:   %121 = icmp ult i32 %119, %113 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeee9bb30]:   %122 = icmp ult i32 %119, %118 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeee9bbb0]:   %123 = or i1 %121, %122 {
	[0x55afeee6eda0]:  %38 = or i1 %36, %37
	[0x55afeee7ffe0]:  %124 = or i1 %122, %123
	}

[0x55afeee9bc18]:   %124 = zext i1 %123 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9bc90]:   store i8 %124, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9bd10]:   %125 = and i32 %119, 255 {
	[0x55afeee6ec50]:  %41 = and i32 %34, 255
	[0x55afeee73e30]:  %85 = and i32 %81, 255
	[0x55afeee7f210]:  %126 = and i32 %120, 255
	}

[0x55afeee9bdb0]:   %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #9 {
	[0x55afeeeb44a0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x55afeeef7850]:  %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
	[0x55afeefccc70]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55afeee9be78]:   %127 = trunc i32 %126 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee9bef0]:   %128 = and i8 %127, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeee9c780]:   %129 = xor i8 %128, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeee9c800]:   store i8 %129, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9c880]:   %130 = xor i32 %118, %113 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9c900]:   %131 = xor i32 %130, %119 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9c980]:   %132 = lshr i32 %131, 4 {
	[0x55afeee6d8f0]:  %92 = lshr i32 %91, 4
	[0x55afeee7a7c0]:  %133 = lshr i32 %132, 4
	[0x55afeeee0850]:  %49 = lshr i32 %48, 4
	}

[0x55afeee9c9e8]:   %133 = trunc i32 %132 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee9ca60]:   %134 = and i8 %133, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeee9cae0]:   store i8 %134, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9cb60]:   %135 = icmp eq i32 %119, 0 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeee9cbc8]:   %136 = zext i1 %135 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9cc40]:   store i8 %136, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9ccc0]:   %137 = lshr i32 %119, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9cd28]:   %138 = trunc i32 %137 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee9cda0]:   store i8 %138, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9ce20]:   %139 = lshr i32 %113, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9cea0]:   %140 = lshr i32 %118, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9cf20]:   %141 = xor i32 %137, %139 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9cfa0]:   %142 = xor i32 %137, %140 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9d020]:   %143 = add nuw nsw i32 %141, %142 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeee9d0a0]:   %144 = icmp eq i32 %143, 2 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeee9d108]:   %145 = zext i1 %144 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9d180]:   store i8 %145, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9d200]:   store i64 %120, i64* %RAX, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9d280]:   %146 = add i64 %110, 9 {
	[0x55afeee70d70]:  %68 = add i64 %25, 9
	[0x55afeee7aeb0]:  %107 = add i64 %72, 9
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeee9d300]:   store i64 %146, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9d368]:   %147 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9d3e0]:   %148 = add i64 %147, 8 {
	[0x55afeee82ea0]:  %149 = add i64 %148, 8
	}

[0x55afeee9d448]:   %149 = inttoptr i64 %147 to i64* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeee9d4a8]:   %150 = load i64, i64* %149, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9d520]:   store i64 %150, i64* %RBP, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9d5a0]:   store i64 %148, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9d620]:   %151 = add i64 %110, 10 {
	[0x55afeee829f0]:  %152 = add i64 %111, 10
	}

[0x55afeee9d6a0]:   store i64 %151, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeee9d708]:   %152 = inttoptr i64 %148 to i64* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeee9d768]:   %153 = load i64, i64* %152, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeee9d7e0]:   store i64 %153, i64* %PC, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeeeb4e40]: %struct.State* %0 {
	[0x55afeef34e40]:%struct.State.1* %0
	}

[0x55afeeeb4e80]: i64 %1 {
	[0x55afeee6cdb0]:i64 %1
	}

[0x55afeeeb4ec0]: %struct.Memory* %2 {
	[0x55afeeee01c0]:%struct.Memory.32* %2
	}

[0x55afeeeb5108]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55afeee47ab8]:  %RSI.i26 = getelementptr inbounds %union.anon.5, %union.anon.5* %16, i64 0, i32 0
	}

[0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeeeb5230]:   %6 = add i64 %1, 1 {
	[0x55afeee46b90]:  %5 = add i64 %1, 1
	}

[0x55afeeed8538]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x55afeee9e3f8]:  %ESI.i29 = bitcast %union.anon.5* %16 to i32*
	[0x55afeeeda568]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x55afeeed8608]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55afeee9e3f8]:  %ESI.i29 = bitcast %union.anon.5* %16 to i32*
	[0x55afeeeda568]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x55afeeefa4e0]:   %154 = add i64 %147, 16 {
	[0x55afeee831b0]:  %155 = add i64 %148, 16
	}

[0x55afeeefa560]:   store i64 %154, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeeefa5c8]:   ret %struct.Memory* %2 {
	[0x55afeeeecbc8]:  ret %struct.Memory.32* %2
	}

[0x55afeef00840]:   store i64 %6, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef008a8]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef01b30]:   %9 = add i64 %8, -8 {
	[0x55afeee6b0b0]:  %8 = add i64 %7, -8
	[0x55afeee6e0f0]:  %30 = add i64 %23, -8
	[0x55afeee70e80]:  %77 = add i64 %70, -8
	[0x55afeeedfb50]:  %18 = add i64 %17, -8
	}

[0x55afeef01b98]:   %10 = inttoptr i64 %9 to i64* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef01c10]:   store i64 %5, i64* %10, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef01c90]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02308]:   %11 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02380]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02440]:   %12 = add i64 %8, -12 {
	[0x55afeee700c0]:  %67 = add i64 %23, -12
	[0x55afeee79610]:  %110 = add i64 %109, -12
	[0x55afeeedcae0]:  %12 = add i64 %7, -12
	}

[0x55afeef024a8]:   %13 = load i32, i32* %EDI, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02520]:   %14 = add i64 %11, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeed9ea0]:  %14 = add i64 %10, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef025a0]:   store i64 %14, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02608]:   %15 = inttoptr i64 %12 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef02680]:   store i32 %13, i32* %15, align 4 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02760]:   %17 = add i64 %16, -8 {
	[0x55afeee6b0b0]:  %8 = add i64 %7, -8
	[0x55afeee6e0f0]:  %30 = add i64 %23, -8
	[0x55afeee70e80]:  %77 = add i64 %70, -8
	[0x55afeeedfb50]:  %18 = add i64 %17, -8
	}

[0x55afeef027c8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02828]:   %19 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef028a0]:   %20 = add i64 %19, 3 {
	[0x55afeee6cfc0]:  %21 = add i64 %20, 3
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef02920]:   store i64 %20, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02988]:   %21 = inttoptr i64 %17 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef02a00]:   store i32 %18, i32* %21, align 4 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02b20]:   %23 = add i64 %22, -4 {
	[0x55afeee6c910]:  %24 = add i64 %23, -4
	[0x55afeee72b30]:  %71 = add i64 %70, -4
	}

[0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02c00]:   %25 = add i64 %24, 3 {
	[0x55afeee6cfc0]:  %21 = add i64 %20, 3
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef02c80]:   store i64 %25, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02ce8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef02d48]:   %27 = load i32, i32* %26, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02da8]:   %28 = zext i32 %27 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef02e20]:   store i64 %28, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02ea0]:   %29 = add i64 %22, -8 {
	[0x55afeee6b0b0]:  %8 = add i64 %7, -8
	[0x55afeee6e0f0]:  %30 = add i64 %23, -8
	[0x55afeee70e80]:  %77 = add i64 %70, -8
	[0x55afeeedfb50]:  %18 = add i64 %17, -8
	}

[0x55afeef02f20]:   %30 = add i64 %24, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeed9ea0]:  %14 = add i64 %10, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef02fa0]:   store i64 %30, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef03008]:   %31 = inttoptr i64 %29 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef03068]:   %32 = load i32, i32* %31, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef030e0]:   %33 = add i32 %32, %27 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeef03148]:   %34 = zext i32 %33 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef031c0]:   store i64 %34, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef03240]:   %35 = icmp ult i32 %33, %27 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef032c0]:   %36 = icmp ult i32 %33, %32 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef03340]:   %37 = or i1 %35, %36 {
	[0x55afeee6eda0]:  %38 = or i1 %36, %37
	[0x55afeee7ffe0]:  %124 = or i1 %122, %123
	}

[0x55afeef033a8]:   %38 = zext i1 %37 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef03420]:   store i8 %38, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef03580]:   %40 = and i32 %33, 255 {
	[0x55afeee6ec50]:  %41 = and i32 %34, 255
	[0x55afeee73e30]:  %85 = and i32 %81, 255
	[0x55afeee7f210]:  %126 = and i32 %120, 255
	}

[0x55afeef03640]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x55afeeeb44a0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x55afeeef7850]:  %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
	[0x55afeefccc70]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55afeef036b8]:   %42 = trunc i32 %41 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeef03770]:   %43 = and i8 %42, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeef037f0]:   %44 = xor i8 %43, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeef03870]:   store i8 %44, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef03a00]:   %46 = xor i32 %32, %27 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeef03a80]:   %47 = xor i32 %46, %33 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeef03b00]:   %48 = lshr i32 %47, 4 {
	[0x55afeee6d8f0]:  %92 = lshr i32 %91, 4
	[0x55afeee7a7c0]:  %133 = lshr i32 %132, 4
	[0x55afeeee0850]:  %49 = lshr i32 %48, 4
	}

[0x55afeef03b68]:   %49 = trunc i32 %48 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeef03be0]:   %50 = and i8 %49, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeef03c90]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55afeeee84e0]:  %52 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55afeef03d20]:   store i8 %50, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef03ed0]:   %52 = icmp eq i32 %33, 0 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef03f38]:   %53 = zext i1 %52 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef03fe0]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55afeee78250]:  %55 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55afeef04070]:   store i8 %53, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef04220]:   %55 = lshr i32 %33, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeef04288]:   %56 = trunc i32 %55 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeef04330]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55afeee732f0]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55afeef043c0]:   store i8 %56, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef04570]:   %58 = lshr i32 %27, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeef045f0]:   %59 = lshr i32 %32, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeef04670]:   %60 = xor i32 %55, %58 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeef046f0]:   %61 = xor i32 %55, %59 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeef04770]:   %62 = add nuw nsw i32 %60, %61 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeef047f0]:   %63 = icmp eq i32 %62, 2 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef04858]:   %64 = zext i1 %63 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef04900]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55afeee6fcf0]:  %66 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55afeef04990]:   store i8 %64, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef04b40]:   %66 = add i64 %22, -12 {
	[0x55afeee700c0]:  %67 = add i64 %23, -12
	[0x55afeee79610]:  %110 = add i64 %109, -12
	[0x55afeeedcae0]:  %12 = add i64 %7, -12
	}

[0x55afeef04bc0]:   %67 = add i64 %24, 9 {
	[0x55afeee70d70]:  %68 = add i64 %25, 9
	[0x55afeee7aeb0]:  %107 = add i64 %72, 9
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeef04c40]:   store i64 %67, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef04ca8]:   %68 = inttoptr i64 %66 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef04d20]:   store i32 %33, i32* %68, align 4 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef04e00]:   %70 = add i64 %69, -4 {
	[0x55afeee6c910]:  %24 = add i64 %23, -4
	[0x55afeee72b30]:  %71 = add i64 %70, -4
	}

[0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef04ee0]:   %72 = add i64 %71, 3 {
	[0x55afeee6cfc0]:  %21 = add i64 %20, 3
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef04f60]:   store i64 %72, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef04fc8]:   %73 = inttoptr i64 %70 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef05028]:   %74 = load i32, i32* %73, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef05088]:   %75 = zext i32 %74 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef05100]:   store i64 %75, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef05180]:   %76 = add i64 %69, -8 {
	[0x55afeee6b0b0]:  %8 = add i64 %7, -8
	[0x55afeee6e0f0]:  %30 = add i64 %23, -8
	[0x55afeee70e80]:  %77 = add i64 %70, -8
	[0x55afeeedfb50]:  %18 = add i64 %17, -8
	}

[0x55afeef05200]:   %77 = add i64 %71, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeed9ea0]:  %14 = add i64 %10, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef05280]:   store i64 %77, i64* %PC, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef052e8]:   %78 = inttoptr i64 %76 to i32* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef05348]:   %79 = load i32, i32* %78, align 4 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef053c0]:   %80 = sub i32 %74, %79 {
	[0x55afeee75d00]:  %81 = sub i32 %75, %80
	}

[0x55afeef05428]:   %81 = zext i32 %80 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef054a0]:   store i64 %81, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef05520]:   %82 = icmp ult i32 %74, %79 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef05588]:   %83 = zext i1 %82 to i8 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeef05600]:   store i8 %83, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef05c90]:   %84 = and i32 %80, 255 {
	[0x55afeee6ec50]:  %41 = and i32 %34, 255
	[0x55afeee73e30]:  %85 = and i32 %81, 255
	[0x55afeee7f210]:  %126 = and i32 %120, 255
	}

[0x55afeef05d50]:   %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #9 {
	[0x55afeeeb44a0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x55afeeef7850]:  %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
	[0x55afeefccc70]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55afeef05dc8]:   %86 = trunc i32 %85 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeef05e40]:   %87 = and i8 %86, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeef17ed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55afeef2f858]:  %16 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x55afeef18c28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55afeef25838]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55afeef2ff70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55afeeecc560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55afeef30140]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55afeeed01a0]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55afeef35080]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55afeee6ad90]:  %46 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55afeef35190]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55afeefb4ea0]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55afeeedebb8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef01c10]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8
[0x55afeee6b2f0]:   store i64 %5, i64* %3, align 8
[0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8
[0x55afeee6ce60]:   store i64 %21, i64* %3, align 8
[0x55afeee6d630]:   store i8 %94, i8* %52, align 1
[0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1
[0x55afeee6de20]:   store i8 %96, i8* %55, align 1
[0x55afeee6e250]:   store i64 %29, i64* %RSI.i26, align 8
[0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1
[0x55afeee6f470]:   store i8 %51, i8* %52, align 1
[0x55afeee70220]:   store i8 %65, i8* %66, align 1
[0x55afeee70f90]:   store i64 %76, i64* %RSI.i26, align 8
[0x55afeee71410]:   store i32 %34, i32* %69, align 4
[0x55afeee728e0]:   store i64 %73, i64* %3, align 8
[0x55afeee72eb0]:   store i64 %68, i64* %3, align 8
[0x55afeee758e0]:   store i8 %84, i8* %40, align 1
[0x55afeee75ba0]:   store i64 %82, i64* %RSI.i26, align 8
[0x55afeee75ee0]:   store i64 %78, i64* %3, align 8
[0x55afeee78de0]:   store i8 %98, i8* %58, align 1
[0x55afeee797b0]:   store i32 %81, i32* %108, align 4
[0x55afeee7a280]:   store i64 %107, i64* %3, align 8
[0x55afeee7abb0]:   store i64 %121, i64* %RAX.i, align 8
[0x55afeee7b3b0]:   store i64 %155, i64* %6, align 8
[0x55afeee7bae0]:   store i8 %105, i8* %66, align 1
[0x55afeee7bc40]:   store i64 %112, i64* %3, align 8
[0x55afeee7bf70]:   store i64 %121, i64* %RSI.i26, align 8
[0x55afeee7c270]:   store i64 %117, i64* %3, align 8
[0x55afeee7c710]:   store i64 %115, i64* %RSI.i26, align 8
[0x55afeee7cda0]:   store i8 %130, i8* %46, align 1
[0x55afeee7fc70]:   store i8 %125, i8* %40, align 1
[0x55afeee802a0]:   store i8 %139, i8* %58, align 1
[0x55afeee80560]:   store i8 %137, i8* %55, align 1
[0x55afeee80890]:   store i8 %135, i8* %52, align 1
[0x55afeee80b90]:   store i8 %146, i8* %66, align 1
[0x55afeee826f0]:   store i64 %154, i64* %3, align 8
[0x55afeee82890]:   store i64 %152, i64* %3, align 8
[0x55afeee82b50]:   store i64 %149, i64* %6, align 8
[0x55afeee82cb0]:   store i64 %151, i64* %RBP.i, align 8
[0x55afeee83010]:   store i64 %147, i64* %3, align 8
[0x55afeeede520]:   store i64 %8, i64* %RBP.i, align 8
[0x55afeeede720]:   store i64 %26, i64* %3, align 8
[0x55afeeede920]:   store i64 %35, i64* %RSI.i26, align 8
[0x55afeeedea70]:   store i64 %31, i64* %3, align 8
[0x55afeeedf820]:   store i32 %19, i32* %22, align 4
[0x55afeeedfc60]:   store i32 %13, i32* %15, align 4
[0x55afeeee0700]:   store i8 %39, i8* %40, align 1
[0x55afeeee0920]:   store i8 %57, i8* %58, align 1
[0x55afeeee0a30]:   store i8 %54, i8* %55, align 1
[0x55afeeef4610]:   store i64 %8, i64* %6, align 8


Adj: [0x55afeee6c910]:   %24 = add i64 %23, -4
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee700c0]:   %67 = add i64 %23, -12


Removing: [0x55afeeee4d28]:   %70 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef01c10]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8
[0x55afeee6b2f0]:   store i64 %5, i64* %3, align 8
[0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8
[0x55afeee6ce60]:   store i64 %21, i64* %3, align 8
[0x55afeee6d630]:   store i8 %94, i8* %52, align 1
[0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1
[0x55afeee6de20]:   store i8 %96, i8* %55, align 1
[0x55afeee6e250]:   store i64 %29, i64* %RSI.i26, align 8
[0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1
[0x55afeee6f470]:   store i8 %51, i8* %52, align 1
[0x55afeee70220]:   store i8 %65, i8* %66, align 1
[0x55afeee70f90]:   store i64 %76, i64* %RSI.i26, align 8
[0x55afeee71410]:   store i32 %34, i32* %69, align 4
[0x55afeee728e0]:   store i64 %73, i64* %3, align 8
[0x55afeee72eb0]:   store i64 %68, i64* %3, align 8
[0x55afeee758e0]:   store i8 %84, i8* %40, align 1
[0x55afeee75ba0]:   store i64 %82, i64* %RSI.i26, align 8
[0x55afeee75ee0]:   store i64 %78, i64* %3, align 8
[0x55afeee78de0]:   store i8 %98, i8* %58, align 1
[0x55afeee797b0]:   store i32 %81, i32* %108, align 4
[0x55afeee7a280]:   store i64 %107, i64* %3, align 8
[0x55afeee7abb0]:   store i64 %121, i64* %RAX.i, align 8
[0x55afeee7b3b0]:   store i64 %155, i64* %6, align 8
[0x55afeee7bae0]:   store i8 %105, i8* %66, align 1
[0x55afeee7bc40]:   store i64 %112, i64* %3, align 8
[0x55afeee7bf70]:   store i64 %121, i64* %RSI.i26, align 8
[0x55afeee7c270]:   store i64 %117, i64* %3, align 8
[0x55afeee7c710]:   store i64 %115, i64* %RSI.i26, align 8
[0x55afeee7cda0]:   store i8 %130, i8* %46, align 1
[0x55afeee7fc70]:   store i8 %125, i8* %40, align 1
[0x55afeee802a0]:   store i8 %139, i8* %58, align 1
[0x55afeee80560]:   store i8 %137, i8* %55, align 1
[0x55afeee80890]:   store i8 %135, i8* %52, align 1
[0x55afeee80b90]:   store i8 %146, i8* %66, align 1
[0x55afeee826f0]:   store i64 %154, i64* %3, align 8
[0x55afeee82890]:   store i64 %152, i64* %3, align 8
[0x55afeee82b50]:   store i64 %149, i64* %6, align 8
[0x55afeee82cb0]:   store i64 %151, i64* %RBP.i, align 8
[0x55afeee83010]:   store i64 %147, i64* %3, align 8
[0x55afeeede520]:   store i64 %8, i64* %RBP.i, align 8
[0x55afeeede720]:   store i64 %26, i64* %3, align 8
[0x55afeeede920]:   store i64 %35, i64* %RSI.i26, align 8
[0x55afeeedea70]:   store i64 %31, i64* %3, align 8
[0x55afeeedf820]:   store i32 %19, i32* %22, align 4
[0x55afeeedfc60]:   store i32 %13, i32* %15, align 4
[0x55afeeee0700]:   store i8 %39, i8* %40, align 1
[0x55afeeee0920]:   store i8 %57, i8* %58, align 1
[0x55afeeee0a30]:   store i8 %54, i8* %55, align 1
[0x55afeeef4610]:   store i64 %8, i64* %6, align 8


Adj: [0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeee72b30]:   %71 = add i64 %70, -4
[0x55afeee7b980]:   %106 = add i64 %70, -16


Removing: [0x55afeeee6158]:   %109 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef01c10]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8
[0x55afeee6b2f0]:   store i64 %5, i64* %3, align 8
[0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8
[0x55afeee6ce60]:   store i64 %21, i64* %3, align 8
[0x55afeee6d630]:   store i8 %94, i8* %52, align 1
[0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1
[0x55afeee6de20]:   store i8 %96, i8* %55, align 1
[0x55afeee6e250]:   store i64 %29, i64* %RSI.i26, align 8
[0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1
[0x55afeee6f470]:   store i8 %51, i8* %52, align 1
[0x55afeee70220]:   store i8 %65, i8* %66, align 1
[0x55afeee70f90]:   store i64 %76, i64* %RSI.i26, align 8
[0x55afeee71410]:   store i32 %34, i32* %69, align 4
[0x55afeee728e0]:   store i64 %73, i64* %3, align 8
[0x55afeee72eb0]:   store i64 %68, i64* %3, align 8
[0x55afeee758e0]:   store i8 %84, i8* %40, align 1
[0x55afeee75ba0]:   store i64 %82, i64* %RSI.i26, align 8
[0x55afeee75ee0]:   store i64 %78, i64* %3, align 8
[0x55afeee78de0]:   store i8 %98, i8* %58, align 1
[0x55afeee797b0]:   store i32 %81, i32* %108, align 4
[0x55afeee7a280]:   store i64 %107, i64* %3, align 8
[0x55afeee7abb0]:   store i64 %121, i64* %RAX.i, align 8
[0x55afeee7b3b0]:   store i64 %155, i64* %6, align 8
[0x55afeee7bae0]:   store i8 %105, i8* %66, align 1
[0x55afeee7bc40]:   store i64 %112, i64* %3, align 8
[0x55afeee7bf70]:   store i64 %121, i64* %RSI.i26, align 8
[0x55afeee7c270]:   store i64 %117, i64* %3, align 8
[0x55afeee7c710]:   store i64 %115, i64* %RSI.i26, align 8
[0x55afeee7cda0]:   store i8 %130, i8* %46, align 1
[0x55afeee7fc70]:   store i8 %125, i8* %40, align 1
[0x55afeee802a0]:   store i8 %139, i8* %58, align 1
[0x55afeee80560]:   store i8 %137, i8* %55, align 1
[0x55afeee80890]:   store i8 %135, i8* %52, align 1
[0x55afeee80b90]:   store i8 %146, i8* %66, align 1
[0x55afeee826f0]:   store i64 %154, i64* %3, align 8
[0x55afeee82890]:   store i64 %152, i64* %3, align 8
[0x55afeee82b50]:   store i64 %149, i64* %6, align 8
[0x55afeee82cb0]:   store i64 %151, i64* %RBP.i, align 8
[0x55afeee83010]:   store i64 %147, i64* %3, align 8
[0x55afeeede520]:   store i64 %8, i64* %RBP.i, align 8
[0x55afeeede720]:   store i64 %26, i64* %3, align 8
[0x55afeeede920]:   store i64 %35, i64* %RSI.i26, align 8
[0x55afeeedea70]:   store i64 %31, i64* %3, align 8
[0x55afeeedf820]:   store i32 %19, i32* %22, align 4
[0x55afeeedfc60]:   store i32 %13, i32* %15, align 4
[0x55afeeee0700]:   store i8 %39, i8* %40, align 1
[0x55afeeee0920]:   store i8 %57, i8* %58, align 1
[0x55afeeee0a30]:   store i8 %54, i8* %55, align 1
[0x55afeeef4610]:   store i64 %8, i64* %6, align 8


Adj: [0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Removing: [0x55afeeef8468]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef01c10]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8
[0x55afeee6b2f0]:   store i64 %5, i64* %3, align 8
[0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8
[0x55afeee6ce60]:   store i64 %21, i64* %3, align 8
[0x55afeee6d630]:   store i8 %94, i8* %52, align 1
[0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1
[0x55afeee6de20]:   store i8 %96, i8* %55, align 1
[0x55afeee6e250]:   store i64 %29, i64* %RSI.i26, align 8
[0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1
[0x55afeee6f470]:   store i8 %51, i8* %52, align 1
[0x55afeee70220]:   store i8 %65, i8* %66, align 1
[0x55afeee70f90]:   store i64 %76, i64* %RSI.i26, align 8
[0x55afeee71410]:   store i32 %34, i32* %69, align 4
[0x55afeee728e0]:   store i64 %73, i64* %3, align 8
[0x55afeee72eb0]:   store i64 %68, i64* %3, align 8
[0x55afeee758e0]:   store i8 %84, i8* %40, align 1
[0x55afeee75ba0]:   store i64 %82, i64* %RSI.i26, align 8
[0x55afeee75ee0]:   store i64 %78, i64* %3, align 8
[0x55afeee78de0]:   store i8 %98, i8* %58, align 1
[0x55afeee797b0]:   store i32 %81, i32* %108, align 4
[0x55afeee7a280]:   store i64 %107, i64* %3, align 8
[0x55afeee7abb0]:   store i64 %121, i64* %RAX.i, align 8
[0x55afeee7b3b0]:   store i64 %155, i64* %6, align 8
[0x55afeee7bae0]:   store i8 %105, i8* %66, align 1
[0x55afeee7bc40]:   store i64 %112, i64* %3, align 8
[0x55afeee7bf70]:   store i64 %121, i64* %RSI.i26, align 8
[0x55afeee7c270]:   store i64 %117, i64* %3, align 8
[0x55afeee7c710]:   store i64 %115, i64* %RSI.i26, align 8
[0x55afeee7cda0]:   store i8 %130, i8* %46, align 1
[0x55afeee7fc70]:   store i8 %125, i8* %40, align 1
[0x55afeee802a0]:   store i8 %139, i8* %58, align 1
[0x55afeee80560]:   store i8 %137, i8* %55, align 1
[0x55afeee80890]:   store i8 %135, i8* %52, align 1
[0x55afeee80b90]:   store i8 %146, i8* %66, align 1
[0x55afeee826f0]:   store i64 %154, i64* %3, align 8
[0x55afeee82890]:   store i64 %152, i64* %3, align 8
[0x55afeee82b50]:   store i64 %149, i64* %6, align 8
[0x55afeee82cb0]:   store i64 %151, i64* %RBP.i, align 8
[0x55afeee83010]:   store i64 %147, i64* %3, align 8
[0x55afeeede520]:   store i64 %8, i64* %RBP.i, align 8
[0x55afeeede720]:   store i64 %26, i64* %3, align 8
[0x55afeeede920]:   store i64 %35, i64* %RSI.i26, align 8
[0x55afeeedea70]:   store i64 %31, i64* %3, align 8
[0x55afeeedf820]:   store i32 %19, i32* %22, align 4
[0x55afeeedfc60]:   store i32 %13, i32* %15, align 4
[0x55afeeee0700]:   store i8 %39, i8* %40, align 1
[0x55afeeee0920]:   store i8 %57, i8* %58, align 1
[0x55afeeee0a30]:   store i8 %54, i8* %55, align 1
[0x55afeeef4610]:   store i64 %8, i64* %6, align 8


Adj: [0x55afeeedfb50]:   %18 = add i64 %17, -8


Removing: [0x55afeeee7458]:   %148 = load i64, i64* %6, align 8
From the pot matches of: [0x55afeef008a8]:   %8 = load i64, i64* %7, align 8, !tbaa !1261


Uprime : [0x55afeef02440]:   %12 = add i64 %8, -12


Uprime Matches: [0x55afeee700c0]:   %67 = add i64 %23, -12
[0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeeedcae0]:   %12 = add i64 %7, -12


Adj: [0x55afeee82ea0]:   %149 = add i64 %148, 8
[0x55afeee831b0]:   %155 = add i64 %148, 16
[0x55afeeee70c8]:   %150 = inttoptr i64 %148 to i64*


Removing: [0x55afeeedc9e8]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02308]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime Matches: [0x55afeee711f0]:   %78 = add i64 %72, 6
[0x55afeee7c3d0]:   %117 = add i64 %111, 6
[0x55afeeed9ea0]:   %14 = add i64 %10, 6
[0x55afeeee00a0]:   %31 = add i64 %25, 6


Adj: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Removing: [0x55afeeecd498]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef02760]:   %17 = add i64 %16, -8


Uprime Matches: [0x55afeee6b0b0]:   %8 = add i64 %7, -8
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeeedfb50]:   %18 = add i64 %17, -8


Adj: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8


Removing: [0x55afeeee6158]:   %109 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef02760]:   %17 = add i64 %16, -8


Uprime Matches: [0x55afeee6b0b0]:   %8 = add i64 %7, -8
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeeedfb50]:   %18 = add i64 %17, -8


Adj: [0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Removing: [0x55afeeeda968]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02828]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime Matches: [0x55afeee6cfc0]:   %21 = add i64 %20, 3
[0x55afeee712c0]:   %73 = add i64 %72, 3
[0x55afeee794b0]:   %112 = add i64 %111, 3
[0x55afeeedf710]:   %26 = add i64 %25, 3


Adj: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Removing: [0x55afeeedc718]:   %32 = inttoptr i64 %30 to i32*
From the pot matches of: [0x55afeef02988]:   %21 = inttoptr i64 %17 to i32*


Uprime : [0x55afeef02a00]:   store i32 %18, i32* %21, align 4


Uprime Matches: [0x55afeeedf820]:   store i32 %19, i32* %22, align 4


Adj: [0x55afeeee0c98]:   %33 = load i32, i32* %32, align 4


Removing: [0x55afeeee3258]:   %79 = inttoptr i64 %77 to i32*
From the pot matches of: [0x55afeef02988]:   %21 = inttoptr i64 %17 to i32*


Uprime : [0x55afeef02a00]:   store i32 %18, i32* %21, align 4


Uprime Matches: [0x55afeeedf820]:   store i32 %19, i32* %22, align 4


Adj: [0x55afeeee3128]:   %80 = load i32, i32* %79, align 4


Removing: [0x55afeeecd498]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef04b40]:   %66 = add i64 %22, -12


Uprime Matches: [0x55afeee700c0]:   %67 = add i64 %23, -12
[0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeeedcae0]:   %12 = add i64 %7, -12


Adj: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8


Removing: [0x55afeeee4d28]:   %70 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef04b40]:   %66 = add i64 %22, -12


Uprime Matches: [0x55afeee700c0]:   %67 = add i64 %23, -12
[0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeeedcae0]:   %12 = add i64 %7, -12


Adj: [0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeee72b30]:   %71 = add i64 %70, -4
[0x55afeee7b980]:   %106 = add i64 %70, -16


Removing: [0x55afeeef8468]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef04b40]:   %66 = add i64 %22, -12


Uprime Matches: [0x55afeee700c0]:   %67 = add i64 %23, -12
[0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeeedcae0]:   %12 = add i64 %7, -12


Adj: [0x55afeeedfb50]:   %18 = add i64 %17, -8


Removing: [0x55afeeee6158]:   %109 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef02ea0]:   %29 = add i64 %22, -8


Uprime Matches: [0x55afeee6b0b0]:   %8 = add i64 %7, -8
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeeedfb50]:   %18 = add i64 %17, -8


Adj: [0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Removing: [0x55afeeeda968]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55afeef04bc0]:   %67 = add i64 %24, 9


Uprime Matches: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeee7aeb0]:   %107 = add i64 %72, 9
[0x55afeee82590]:   %147 = add i64 %111, 9


Adj: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Removing: [0x55afeeedc9e8]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55afeef04bc0]:   %67 = add i64 %24, 9


Uprime Matches: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeee7aeb0]:   %107 = add i64 %72, 9
[0x55afeee82590]:   %147 = add i64 %111, 9


Adj: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Removing: [0x55afeeee1708]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeeee0920]:   store i8 %57, i8* %58, align 1


Removing: [0x55afeeee5318]:   %98 = trunc i32 %97 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee78de0]:   store i8 %98, i8* %58, align 1


Removing: [0x55afeeee76b8]:   %139 = trunc i32 %138 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee802a0]:   store i8 %139, i8* %58, align 1


Removing: [0x55afeee6d710]:   %94 = and i8 %93, 1
From the pot matches of: [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime : [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee6d630]:   store i8 %94, i8* %52, align 1


Removing: [0x55afeee6f610]:   %51 = and i8 %50, 1
From the pot matches of: [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime : [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee6f470]:   store i8 %51, i8* %52, align 1


Removing: [0x55afeee80a30]:   %135 = and i8 %134, 1
From the pot matches of: [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime : [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee80890]:   store i8 %135, i8* %52, align 1


Removing: [0x55afeee6d240]:   %36 = icmp ult i32 %34, %28
From the pot matches of: [0x55afeef03ed0]:   %52 = icmp eq i32 %33, 0


Uprime : [0x55afeef03f38]:   %53 = zext i1 %52 to i8


Uprime Matches: [0x55afeeeddad8]:   %29 = zext i32 %28 to i64
[0x55afeeee1028]:   %65 = zext i1 %64 to i8
[0x55afeeee1968]:   %54 = zext i1 %53 to i8
[0x55afeeee22e8]:   %39 = zext i1 %38 to i8
[0x55afeeee2418]:   %35 = zext i32 %34 to i64
[0x55afeeee3388]:   %76 = zext i32 %75 to i64
[0x55afeeee4e58]:   %82 = zext i32 %81 to i64
[0x55afeeee51e8]:   %105 = zext i1 %104 to i8
[0x55afeeee56a8]:   %96 = zext i1 %95 to i8
[0x55afeeee5b68]:   %84 = zext i1 %83 to i8
[0x55afeeee6288]:   %121 = zext i32 %120 to i64
[0x55afeeee6618]:   %115 = zext i32 %114 to i64
[0x55afeeee6f98]:   %125 = zext i1 %124 to i8
[0x55afeeee7588]:   %146 = zext i1 %145 to i8
[0x55afeeee7b78]:   %137 = zext i1 %136 to i8


Adj: [0x55afeee6eda0]:   %38 = or i1 %36, %37


Removing: [0x55afeeee02c0]:   %37 = icmp ult i32 %34, %33
From the pot matches of: [0x55afeef03ed0]:   %52 = icmp eq i32 %33, 0


Uprime : [0x55afeef03f38]:   %53 = zext i1 %52 to i8


Uprime Matches: [0x55afeeeddad8]:   %29 = zext i32 %28 to i64
[0x55afeeee1028]:   %65 = zext i1 %64 to i8
[0x55afeeee1968]:   %54 = zext i1 %53 to i8
[0x55afeeee22e8]:   %39 = zext i1 %38 to i8
[0x55afeeee2418]:   %35 = zext i32 %34 to i64
[0x55afeeee3388]:   %76 = zext i32 %75 to i64
[0x55afeeee4e58]:   %82 = zext i32 %81 to i64
[0x55afeeee51e8]:   %105 = zext i1 %104 to i8
[0x55afeeee56a8]:   %96 = zext i1 %95 to i8
[0x55afeeee5b68]:   %84 = zext i1 %83 to i8
[0x55afeeee6288]:   %121 = zext i32 %120 to i64
[0x55afeeee6618]:   %115 = zext i32 %114 to i64
[0x55afeeee6f98]:   %125 = zext i1 %124 to i8
[0x55afeeee7588]:   %146 = zext i1 %145 to i8
[0x55afeeee7b78]:   %137 = zext i1 %136 to i8


Adj: [0x55afeee6eda0]:   %38 = or i1 %36, %37


Removing: [0x55afeeee6c08]:   %113 = inttoptr i64 %110 to i32*
From the pot matches of: [0x55afeef04ca8]:   %68 = inttoptr i64 %66 to i32*


Uprime : [0x55afeef04d20]:   store i32 %33, i32* %68, align 4


Uprime Matches: [0x55afeee71410]:   store i32 %34, i32* %69, align 4


Adj: [0x55afeeee6ad8]:   %114 = load i32, i32* %113, align 4


Removing: [0x55afeeecd498]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b0d0]:   %105 = add i64 %69, -16


Uprime Matches: [0x55afeee7b980]:   %106 = add i64 %70, -16
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Adj: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8


Removing: [0x55afeeedebb8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b0d0]:   %105 = add i64 %69, -16


Uprime Matches: [0x55afeee7b980]:   %106 = add i64 %70, -16
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Adj: [0x55afeee6c910]:   %24 = add i64 %23, -4
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee700c0]:   %67 = add i64 %23, -12


Removing: [0x55afeeef8468]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b0d0]:   %105 = add i64 %69, -16


Uprime Matches: [0x55afeee7b980]:   %106 = add i64 %70, -16
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Adj: [0x55afeeedfb50]:   %18 = add i64 %17, -8


Removing: [0x55afeeee6158]:   %109 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef05180]:   %76 = add i64 %69, -8


Uprime Matches: [0x55afeee6b0b0]:   %8 = add i64 %7, -8
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeeedfb50]:   %18 = add i64 %17, -8


Adj: [0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Removing: [0x55afeeeda968]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9b150]:   %106 = add i64 %71, 9


Uprime Matches: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeee7aeb0]:   %107 = add i64 %72, 9
[0x55afeee82590]:   %147 = add i64 %111, 9


Adj: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Removing: [0x55afeeedc9e8]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9b150]:   %106 = add i64 %71, 9


Uprime Matches: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeee7aeb0]:   %107 = add i64 %72, 9
[0x55afeee82590]:   %147 = add i64 %111, 9


Adj: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Removing: [0x55afeeee1708]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeeee0920]:   store i8 %57, i8* %58, align 1


Removing: [0x55afeeee5318]:   %98 = trunc i32 %97 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee78de0]:   store i8 %98, i8* %58, align 1


Removing: [0x55afeeee76b8]:   %139 = trunc i32 %138 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee802a0]:   store i8 %139, i8* %58, align 1


Removing: [0x55afeee6d710]:   %94 = and i8 %93, 1
From the pot matches of: [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime : [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee6d630]:   store i8 %94, i8* %52, align 1


Removing: [0x55afeee6f610]:   %51 = and i8 %50, 1
From the pot matches of: [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime : [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee6f470]:   store i8 %51, i8* %52, align 1


Removing: [0x55afeee80a30]:   %135 = and i8 %134, 1
From the pot matches of: [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime : [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee80890]:   store i8 %135, i8* %52, align 1


Removing: [0x55afeeee64e8]:   %118 = inttoptr i64 %116 to i32*
From the pot matches of: [0x55afeee9b238]:   %107 = inttoptr i64 %105 to i32*


Uprime : [0x55afeee9b2b0]:   store i32 %80, i32* %107, align 4


Uprime Matches: [0x55afeee797b0]:   store i32 %81, i32* %108, align 4


Adj: [0x55afeeee63b8]:   %119 = load i32, i32* %118, align 4


Removing: [0x55afeeecd498]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b710]:   %115 = add i64 %108, -16


Uprime Matches: [0x55afeee7b980]:   %106 = add i64 %70, -16
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Adj: [0x55afeee6af60]:   store i64 %4, i64* %9, align 8


Removing: [0x55afeeedebb8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b710]:   %115 = add i64 %108, -16


Uprime Matches: [0x55afeee7b980]:   %106 = add i64 %70, -16
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Adj: [0x55afeee6c910]:   %24 = add i64 %23, -4
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee700c0]:   %67 = add i64 %23, -12


Removing: [0x55afeeef8468]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b710]:   %115 = add i64 %108, -16


Uprime Matches: [0x55afeee7b980]:   %106 = add i64 %70, -16
[0x55afeee7c5b0]:   %116 = add i64 %109, -16


Adj: [0x55afeeedfb50]:   %18 = add i64 %17, -8


Removing: [0x55afeeee4d28]:   %70 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8


Uprime : [0x55afeee9b390]:   %109 = add i64 %108, -12


Uprime Matches: [0x55afeee700c0]:   %67 = add i64 %23, -12
[0x55afeee79610]:   %110 = add i64 %109, -12
[0x55afeeedcae0]:   %12 = add i64 %7, -12


Adj: [0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeee72b30]:   %71 = add i64 %70, -4
[0x55afeee7b980]:   %106 = add i64 %70, -16


Removing: [0x55afeee6d0c8]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9d620]:   %151 = add i64 %110, 10


Uprime Matches: [0x55afeee829f0]:   %152 = add i64 %111, 10


Adj: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeeedf710]:   %26 = add i64 %25, 3
[0x55afeeee00a0]:   %31 = add i64 %25, 6


Removing: [0x55afeeeda968]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9d620]:   %151 = add i64 %110, 10


Uprime Matches: [0x55afeee829f0]:   %152 = add i64 %111, 10


Adj: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Removing: [0x55afeeedc9e8]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9d620]:   %151 = add i64 %110, 10


Uprime Matches: [0x55afeee829f0]:   %152 = add i64 %111, 10


Adj: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Removing: [0x55afeeee4738]:   %72 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9d620]:   %151 = add i64 %110, 10


Uprime Matches: [0x55afeee829f0]:   %152 = add i64 %111, 10


Adj: [0x55afeee711f0]:   %78 = add i64 %72, 6
[0x55afeee712c0]:   %73 = add i64 %72, 3
[0x55afeee7aeb0]:   %107 = add i64 %72, 9


Removing: [0x55afeeee50b8]:   %108 = inttoptr i64 %106 to i32*
From the pot matches of: [0x55afeee9b878]:   %117 = inttoptr i64 %115 to i32*


Uprime : [0x55afeee9b8d8]:   %118 = load i32, i32* %117, align 4


Uprime Matches: [0x55afeee6d0c8]:   %25 = load i64, i64* %3, align 8
[0x55afeee92d88]:   %19 = load i32, i32* %ESI.i29, align 4
[0x55afeeecd498]:   %4 = load i64, i64* %RBP.i, align 8
[0x55afeeecd668]:   %7 = load i64, i64* %6, align 8
[0x55afeeeda968]:   %10 = load i64, i64* %3, align 8
[0x55afeeedc9e8]:   %20 = load i64, i64* %3, align 8
[0x55afeeeddee8]:   %28 = load i32, i32* %27, align 4
[0x55afeeedebb8]:   %23 = load i64, i64* %RBP.i, align 8
[0x55afeeee0c98]:   %33 = load i32, i32* %32, align 4
[0x55afeeee3128]:   %80 = load i32, i32* %79, align 4
[0x55afeeee34b8]:   %75 = load i32, i32* %74, align 4
[0x55afeeee4738]:   %72 = load i64, i64* %3, align 8
[0x55afeeee4d28]:   %70 = load i64, i64* %RBP.i, align 8
[0x55afeeee6158]:   %109 = load i64, i64* %RBP.i, align 8
[0x55afeeee63b8]:   %119 = load i32, i32* %118, align 4
[0x55afeeee6ad8]:   %114 = load i32, i32* %113, align 4
[0x55afeeee6d38]:   %111 = load i64, i64* %3, align 8
[0x55afeeee7458]:   %148 = load i64, i64* %6, align 8
[0x55afeeee9b18]:   %151 = load i64, i64* %150, align 8
[0x55afeeeeccf8]:   %154 = load i64, i64* %153, align 8
[0x55afeeef8468]:   %17 = load i64, i64* %RBP.i, align 8
[0x55afeef143d8]:   %13 = load i32, i32* %EDI.i, align 4


Adj: [0x55afeee797b0]:   store i32 %81, i32* %108, align 4


Removing: [0x55afeeee1708]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeeee0920]:   store i8 %57, i8* %58, align 1


Removing: [0x55afeeee5318]:   %98 = trunc i32 %97 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee78de0]:   store i8 %98, i8* %58, align 1


Removing: [0x55afeeee76b8]:   %139 = trunc i32 %138 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee6d710]:   %94 = and i8 %93, 1
[0x55afeee6f610]:   %51 = and i8 %50, 1
[0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeee80a30]:   %135 = and i8 %134, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee802a0]:   store i8 %139, i8* %58, align 1


Removing: [0x55afeee6d710]:   %94 = and i8 %93, 1
From the pot matches of: [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime : [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee6d630]:   store i8 %94, i8* %52, align 1


Removing: [0x55afeee6f610]:   %51 = and i8 %50, 1
From the pot matches of: [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime : [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee6f470]:   store i8 %51, i8* %52, align 1


Removing: [0x55afeee80a30]:   %135 = and i8 %134, 1
From the pot matches of: [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime : [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1
[0x55afeee7cf00]:   %130 = xor i8 %129, 1
[0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee80890]:   store i8 %135, i8* %52, align 1


Removing: [0x55afeee7be10]:   %122 = icmp ult i32 %120, %114
From the pot matches of: [0x55afeee9cb60]:   %135 = icmp eq i32 %119, 0


Uprime : [0x55afeee9cbc8]:   %136 = zext i1 %135 to i8


Uprime Matches: [0x55afeeeddad8]:   %29 = zext i32 %28 to i64
[0x55afeeee1028]:   %65 = zext i1 %64 to i8
[0x55afeeee1968]:   %54 = zext i1 %53 to i8
[0x55afeeee22e8]:   %39 = zext i1 %38 to i8
[0x55afeeee2418]:   %35 = zext i32 %34 to i64
[0x55afeeee3388]:   %76 = zext i32 %75 to i64
[0x55afeeee4e58]:   %82 = zext i32 %81 to i64
[0x55afeeee51e8]:   %105 = zext i1 %104 to i8
[0x55afeeee56a8]:   %96 = zext i1 %95 to i8
[0x55afeeee5b68]:   %84 = zext i1 %83 to i8
[0x55afeeee6288]:   %121 = zext i32 %120 to i64
[0x55afeeee6618]:   %115 = zext i32 %114 to i64
[0x55afeeee6f98]:   %125 = zext i1 %124 to i8
[0x55afeeee7588]:   %146 = zext i1 %145 to i8
[0x55afeeee7b78]:   %137 = zext i1 %136 to i8


Adj: [0x55afeee7ffe0]:   %124 = or i1 %122, %123


Removing: [0x55afeee7c870]:   %123 = icmp ult i32 %120, %119
From the pot matches of: [0x55afeee9cb60]:   %135 = icmp eq i32 %119, 0


Uprime : [0x55afeee9cbc8]:   %136 = zext i1 %135 to i8


Uprime Matches: [0x55afeeeddad8]:   %29 = zext i32 %28 to i64
[0x55afeeee1028]:   %65 = zext i1 %64 to i8
[0x55afeeee1968]:   %54 = zext i1 %53 to i8
[0x55afeeee22e8]:   %39 = zext i1 %38 to i8
[0x55afeeee2418]:   %35 = zext i32 %34 to i64
[0x55afeeee3388]:   %76 = zext i32 %75 to i64
[0x55afeeee4e58]:   %82 = zext i32 %81 to i64
[0x55afeeee51e8]:   %105 = zext i1 %104 to i8
[0x55afeeee56a8]:   %96 = zext i1 %95 to i8
[0x55afeeee5b68]:   %84 = zext i1 %83 to i8
[0x55afeeee6288]:   %121 = zext i32 %120 to i64
[0x55afeeee6618]:   %115 = zext i32 %114 to i64
[0x55afeeee6f98]:   %125 = zext i1 %124 to i8
[0x55afeeee7588]:   %146 = zext i1 %145 to i8
[0x55afeeee7b78]:   %137 = zext i1 %136 to i8


Adj: [0x55afeee7ffe0]:   %124 = or i1 %122, %123


Removing: [0x55afeeecd668]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55afeee9d368]:   %147 = load i64, i64* %7, align 8, !tbaa !1261


Uprime : [0x55afeeefa4e0]:   %154 = add i64 %147, 16


Uprime Matches: [0x55afeee831b0]:   %155 = add i64 %148, 16


Adj: [0x55afeee6b0b0]:   %8 = add i64 %7, -8
[0x55afeeedcae0]:   %12 = add i64 %7, -12

Round: 1

Removing: [0x55afeee6e0f0]:   %30 = add i64 %23, -8
From the pot matches of: [0x55afeef02760]:   %17 = add i64 %16, -8


Uprime : [0x55afeef02988]:   %21 = inttoptr i64 %17 to i32*


Uprime Matches: [0x55afeeee0b68]:   %22 = inttoptr i64 %18 to i32*


Adj: [0x55afeeedc718]:   %32 = inttoptr i64 %30 to i32*


Removing: [0x55afeee70e80]:   %77 = add i64 %70, -8
From the pot matches of: [0x55afeef02760]:   %17 = add i64 %16, -8


Uprime : [0x55afeef02988]:   %21 = inttoptr i64 %17 to i32*


Uprime Matches: [0x55afeeee0b68]:   %22 = inttoptr i64 %18 to i32*


Adj: [0x55afeeee3258]:   %79 = inttoptr i64 %77 to i32*


Removing: [0x55afeee79218]:   %93 = trunc i32 %92 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee6d710]:   %94 = and i8 %93, 1


Removing: [0x55afeeee1cf8]:   %50 = trunc i32 %49 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee6f610]:   %51 = and i8 %50, 1


Removing: [0x55afeeee8038]:   %134 = trunc i32 %133 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee80a30]:   %135 = and i8 %134, 1


Removing: [0x55afeee79218]:   %93 = trunc i32 %92 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee6d710]:   %94 = and i8 %93, 1


Removing: [0x55afeeee1cf8]:   %50 = trunc i32 %49 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee6f610]:   %51 = and i8 %50, 1


Removing: [0x55afeeee8038]:   %134 = trunc i32 %133 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee80a30]:   %135 = and i8 %134, 1


Removing: [0x55afeee79218]:   %93 = trunc i32 %92 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee6d710]:   %94 = and i8 %93, 1


Removing: [0x55afeeee1cf8]:   %50 = trunc i32 %49 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee6f610]:   %51 = and i8 %50, 1


Removing: [0x55afeeee8038]:   %134 = trunc i32 %133 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1
[0x55afeee7d0d0]:   %129 = and i8 %128, 1
[0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee80a30]:   %135 = and i8 %134, 1

Round: 2

Removing: [0x55afeeedebb8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef02760]:   %17 = add i64 %16, -8


Uprime Matches: [0x55afeeedfb50]:   %18 = add i64 %17, -8


Adj: [0x55afeee6c910]:   %24 = add i64 %23, -4
[0x55afeee6e0f0]:   %30 = add i64 %23, -8
[0x55afeee700c0]:   %67 = add i64 %23, -12


Removing: [0x55afeeee4d28]:   %70 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x55afeef02760]:   %17 = add i64 %16, -8


Uprime Matches: [0x55afeeedfb50]:   %18 = add i64 %17, -8


Adj: [0x55afeee70e80]:   %77 = add i64 %70, -8
[0x55afeee72b30]:   %71 = add i64 %70, -4
[0x55afeee7b980]:   %106 = add i64 %70, -16

Round: 3


[Info] After Dual Simulation: Round: 0
[0x55afeee540d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55afeeed0520]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55afeee8eb10]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55afeeed0330]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55afeee987c0]:   %88 = xor i8 %87, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeee98840]:   store i8 %88, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	}

[0x55afeee98ed0]:   %89 = xor i32 %79, %74 {
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	}

[0x55afeee98f50]:   %90 = xor i32 %89, %80 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	}

[0x55afeee98fd0]:   %91 = lshr i32 %90, 4 {
	[0x55afeee6d8f0]:  %92 = lshr i32 %91, 4
	}

[0x55afeee99038]:   %92 = trunc i32 %91 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	}

[0x55afeee990b0]:   %93 = and i8 %92, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	}

[0x55afeee99130]:   store i8 %93, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	}

[0x55afeee997c0]:   %94 = icmp eq i32 %80, 0 {
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	}

[0x55afeee99828]:   %95 = zext i1 %94 to i8 {
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	}

[0x55afeee998a0]:   store i8 %95, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	}

[0x55afeee99f30]:   %96 = lshr i32 %80, 31 {
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	}

[0x55afeee99f98]:   %97 = trunc i32 %96 to i8 {
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	}

[0x55afeee9a010]:   store i8 %97, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	}

[0x55afeee9a6a0]:   %98 = lshr i32 %74, 31 {
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	}

[0x55afeee9a720]:   %99 = lshr i32 %79, 31 {
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	}

[0x55afeee9a7a0]:   %100 = xor i32 %99, %98 {
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	}

[0x55afeee9a820]:   %101 = xor i32 %96, %98 {
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	}

[0x55afeee9a8a0]:   %102 = add nuw nsw i32 %101, %100 {
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	}

[0x55afeee9a920]:   %103 = icmp eq i32 %102, 2 {
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	}

[0x55afeee9a988]:   %104 = zext i1 %103 to i8 {
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	}

[0x55afeee9aa00]:   store i8 %104, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	}

[0x55afeee9b0d0]:   %105 = add i64 %69, -16 {
	[0x55afeee7b980]:  %106 = add i64 %70, -16
	}

[0x55afeee9b150]:   %106 = add i64 %71, 9 {
	[0x55afeee70d70]:  %68 = add i64 %25, 9
	[0x55afeee7aeb0]:  %107 = add i64 %72, 9
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeee9b1d0]:   store i64 %106, i64* %PC, align 8 {
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	}

[0x55afeee9b238]:   %107 = inttoptr i64 %105 to i32* {
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	}

[0x55afeee9b2b0]:   store i32 %80, i32* %107, align 4 {
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	}

[0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8 {
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	}

[0x55afeee9b390]:   %109 = add i64 %108, -12 {
	[0x55afeee79610]:  %110 = add i64 %109, -12
	}

[0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8 {
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	}

[0x55afeee9b470]:   %111 = add i64 %110, 3 {
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	}

[0x55afeee9b4f0]:   store i64 %111, i64* %PC, align 8 {
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	}

[0x55afeee9b558]:   %112 = inttoptr i64 %109 to i32* {
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	}

[0x55afeee9b5b8]:   %113 = load i32, i32* %112, align 4 {
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	}

[0x55afeee9b618]:   %114 = zext i32 %113 to i64 {
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	}

[0x55afeee9b690]:   store i64 %114, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	}

[0x55afeee9b710]:   %115 = add i64 %108, -16 {
	[0x55afeee7c5b0]:  %116 = add i64 %109, -16
	}

[0x55afeee9b790]:   %116 = add i64 %110, 6 {
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	}

[0x55afeee9b810]:   store i64 %116, i64* %PC, align 8 {
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	}

[0x55afeee9b878]:   %117 = inttoptr i64 %115 to i32* {
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	}

[0x55afeee9b8d8]:   %118 = load i32, i32* %117, align 4 {
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	}

[0x55afeee9b950]:   %119 = add i32 %118, %113 {
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	}

[0x55afeee9b9b8]:   %120 = zext i32 %119 to i64 {
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	}

[0x55afeee9ba30]:   store i64 %120, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	}

[0x55afeee9bab0]:   %121 = icmp ult i32 %119, %113 {
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	}

[0x55afeee9bb30]:   %122 = icmp ult i32 %119, %118 {
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	}

[0x55afeee9bbb0]:   %123 = or i1 %121, %122 {
	[0x55afeee7ffe0]:  %124 = or i1 %122, %123
	}

[0x55afeee9bc18]:   %124 = zext i1 %123 to i8 {
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	}

[0x55afeee9bc90]:   store i8 %124, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	}

[0x55afeee9bd10]:   %125 = and i32 %119, 255 {
	[0x55afeee7f210]:  %126 = and i32 %120, 255
	}

[0x55afeee9bdb0]:   %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #9 {
	[0x55afeeef7850]:  %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
	}

[0x55afeee9be78]:   %127 = trunc i32 %126 to i8 {
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee9bef0]:   %128 = and i8 %127, 1 {
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeee9c780]:   %129 = xor i8 %128, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeee9c800]:   store i8 %129, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	}

[0x55afeee9c880]:   %130 = xor i32 %118, %113 {
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	}

[0x55afeee9c900]:   %131 = xor i32 %130, %119 {
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	}

[0x55afeee9c980]:   %132 = lshr i32 %131, 4 {
	[0x55afeee7a7c0]:  %133 = lshr i32 %132, 4
	}

[0x55afeee9c9e8]:   %133 = trunc i32 %132 to i8 {
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	}

[0x55afeee9ca60]:   %134 = and i8 %133, 1 {
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	}

[0x55afeee9cae0]:   store i8 %134, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	}

[0x55afeee9cb60]:   %135 = icmp eq i32 %119, 0 {
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	}

[0x55afeee9cbc8]:   %136 = zext i1 %135 to i8 {
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9cc40]:   store i8 %136, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	}

[0x55afeee9ccc0]:   %137 = lshr i32 %119, 31 {
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	}

[0x55afeee9cd28]:   %138 = trunc i32 %137 to i8 {
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	}

[0x55afeee9cda0]:   store i8 %138, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	}

[0x55afeee9ce20]:   %139 = lshr i32 %113, 31 {
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	}

[0x55afeee9cea0]:   %140 = lshr i32 %118, 31 {
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9cf20]:   %141 = xor i32 %137, %139 {
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9cfa0]:   %142 = xor i32 %137, %140 {
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	}

[0x55afeee9d020]:   %143 = add nuw nsw i32 %141, %142 {
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	}

[0x55afeee9d0a0]:   %144 = icmp eq i32 %143, 2 {
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	}

[0x55afeee9d108]:   %145 = zext i1 %144 to i8 {
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	}

[0x55afeee9d180]:   store i8 %145, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	}

[0x55afeee9d200]:   store i64 %120, i64* %RAX, align 8, !tbaa !1261 {
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	}

[0x55afeee9d280]:   %146 = add i64 %110, 9 {
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeee9d300]:   store i64 %146, i64* %PC, align 8 {
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	}

[0x55afeee9d368]:   %147 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	}

[0x55afeee9d3e0]:   %148 = add i64 %147, 8 {
	[0x55afeee82ea0]:  %149 = add i64 %148, 8
	}

[0x55afeee9d448]:   %149 = inttoptr i64 %147 to i64* {
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	}

[0x55afeee9d4a8]:   %150 = load i64, i64* %149, align 8 {
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	}

[0x55afeee9d520]:   store i64 %150, i64* %RBP, align 8, !tbaa !1261 {
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	}

[0x55afeee9d5a0]:   store i64 %148, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	}

[0x55afeee9d620]:   %151 = add i64 %110, 10 {
	[0x55afeee829f0]:  %152 = add i64 %111, 10
	}

[0x55afeee9d6a0]:   store i64 %151, i64* %PC, align 8 {
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	}

[0x55afeee9d708]:   %152 = inttoptr i64 %148 to i64* {
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	}

[0x55afeee9d768]:   %153 = load i64, i64* %152, align 8 {
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	}

[0x55afeee9d7e0]:   store i64 %153, i64* %PC, align 8, !tbaa !1261 {
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	}

[0x55afeeeb4e40]: %struct.State* %0 {
	[0x55afeef34e40]:%struct.State.1* %0
	}

[0x55afeeeb4e80]: i64 %1 {
	[0x55afeee6cdb0]:i64 %1
	}

[0x55afeeeb4ec0]: %struct.Memory* %2 {
	[0x55afeeee01c0]:%struct.Memory.32* %2
	}

[0x55afeeeb5108]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55afeee47ab8]:  %RSI.i26 = getelementptr inbounds %union.anon.5, %union.anon.5* %16, i64 0, i32 0
	}

[0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55afeeeb5230]:   %6 = add i64 %1, 1 {
	[0x55afeee46b90]:  %5 = add i64 %1, 1
	}

[0x55afeeed8538]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x55afeee9e3f8]:  %ESI.i29 = bitcast %union.anon.5* %16 to i32*
	}

[0x55afeeed8608]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55afeeeda568]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x55afeeefa4e0]:   %154 = add i64 %147, 16 {
	[0x55afeee831b0]:  %155 = add i64 %148, 16
	}

[0x55afeeefa560]:   store i64 %154, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	}

[0x55afeeefa5c8]:   ret %struct.Memory* %2 {
	[0x55afeeeecbc8]:  ret %struct.Memory.32* %2
	}

[0x55afeef00840]:   store i64 %6, i64* %PC, align 8 {
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	}

[0x55afeef008a8]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	}

[0x55afeef01b30]:   %9 = add i64 %8, -8 {
	[0x55afeee6b0b0]:  %8 = add i64 %7, -8
	}

[0x55afeef01b98]:   %10 = inttoptr i64 %9 to i64* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55afeef01c10]:   store i64 %5, i64* %10, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	}

[0x55afeef01c90]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02308]:   %11 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	}

[0x55afeef02380]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55afeef02440]:   %12 = add i64 %8, -12 {
	[0x55afeeedcae0]:  %12 = add i64 %7, -12
	}

[0x55afeef024a8]:   %13 = load i32, i32* %EDI, align 4 {
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02520]:   %14 = add i64 %11, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeed9ea0]:  %14 = add i64 %10, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef025a0]:   store i64 %14, i64* %PC, align 8 {
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	}

[0x55afeef02608]:   %15 = inttoptr i64 %12 to i32* {
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef02680]:   store i32 %13, i32* %15, align 4 {
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	}

[0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8 {
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	}

[0x55afeef02760]:   %17 = add i64 %16, -8 {
	[0x55afeeedfb50]:  %18 = add i64 %17, -8
	}

[0x55afeef027c8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	}

[0x55afeef02828]:   %19 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	}

[0x55afeef028a0]:   %20 = add i64 %19, 3 {
	[0x55afeee6cfc0]:  %21 = add i64 %20, 3
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef02920]:   store i64 %20, i64* %PC, align 8 {
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	}

[0x55afeef02988]:   %21 = inttoptr i64 %17 to i32* {
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	}

[0x55afeef02a00]:   store i32 %18, i32* %21, align 4 {
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	}

[0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x55afeef02b20]:   %23 = add i64 %22, -4 {
	[0x55afeee6c910]:  %24 = add i64 %23, -4
	}

[0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	}

[0x55afeef02c00]:   %25 = add i64 %24, 3 {
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef02c80]:   store i64 %25, i64* %PC, align 8 {
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	}

[0x55afeef02ce8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x55afeef02d48]:   %27 = load i32, i32* %26, align 4 {
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	}

[0x55afeef02da8]:   %28 = zext i32 %27 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	}

[0x55afeef02e20]:   store i64 %28, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	}

[0x55afeef02ea0]:   %29 = add i64 %22, -8 {
	[0x55afeee6e0f0]:  %30 = add i64 %23, -8
	}

[0x55afeef02f20]:   %30 = add i64 %24, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef02fa0]:   store i64 %30, i64* %PC, align 8 {
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	}

[0x55afeef03008]:   %31 = inttoptr i64 %29 to i32* {
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	}

[0x55afeef03068]:   %32 = load i32, i32* %31, align 4 {
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	}

[0x55afeef030e0]:   %33 = add i32 %32, %27 {
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeef03148]:   %34 = zext i32 %33 to i64 {
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	}

[0x55afeef031c0]:   store i64 %34, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	}

[0x55afeef03240]:   %35 = icmp ult i32 %33, %27 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	}

[0x55afeef032c0]:   %36 = icmp ult i32 %33, %32 {
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef03340]:   %37 = or i1 %35, %36 {
	[0x55afeee6eda0]:  %38 = or i1 %36, %37
	}

[0x55afeef033a8]:   %38 = zext i1 %37 to i8 {
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	}

[0x55afeef03420]:   store i8 %38, i8* %39, align 1, !tbaa !1265 {
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	}

[0x55afeef03580]:   %40 = and i32 %33, 255 {
	[0x55afeee6ec50]:  %41 = and i32 %34, 255
	}

[0x55afeef03640]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x55afeefccc70]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55afeef036b8]:   %42 = trunc i32 %41 to i8 {
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeef03770]:   %43 = and i8 %42, 1 {
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeef037f0]:   %44 = xor i8 %43, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeef03870]:   store i8 %44, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	}

[0x55afeef03a00]:   %46 = xor i32 %32, %27 {
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	}

[0x55afeef03a80]:   %47 = xor i32 %46, %33 {
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	}

[0x55afeef03b00]:   %48 = lshr i32 %47, 4 {
	[0x55afeeee0850]:  %49 = lshr i32 %48, 4
	}

[0x55afeef03b68]:   %49 = trunc i32 %48 to i8 {
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	}

[0x55afeef03be0]:   %50 = and i8 %49, 1 {
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	}

[0x55afeef03c90]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55afeeee84e0]:  %52 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55afeef03d20]:   store i8 %50, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	}

[0x55afeef03ed0]:   %52 = icmp eq i32 %33, 0 {
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	}

[0x55afeef03f38]:   %53 = zext i1 %52 to i8 {
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	}

[0x55afeef03fe0]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55afeee78250]:  %55 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55afeef04070]:   store i8 %53, i8* %54, align 1, !tbaa !1281 {
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	}

[0x55afeef04220]:   %55 = lshr i32 %33, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	}

[0x55afeef04288]:   %56 = trunc i32 %55 to i8 {
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	}

[0x55afeef04330]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55afeee732f0]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55afeef043c0]:   store i8 %56, i8* %57, align 1, !tbaa !1282 {
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	}

[0x55afeef04570]:   %58 = lshr i32 %27, 31 {
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	}

[0x55afeef045f0]:   %59 = lshr i32 %32, 31 {
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	}

[0x55afeef04670]:   %60 = xor i32 %55, %58 {
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	}

[0x55afeef046f0]:   %61 = xor i32 %55, %59 {
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	}

[0x55afeef04770]:   %62 = add nuw nsw i32 %60, %61 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	}

[0x55afeef047f0]:   %63 = icmp eq i32 %62, 2 {
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	}

[0x55afeef04858]:   %64 = zext i1 %63 to i8 {
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	}

[0x55afeef04900]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55afeee6fcf0]:  %66 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55afeef04990]:   store i8 %64, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	}

[0x55afeef04b40]:   %66 = add i64 %22, -12 {
	[0x55afeee700c0]:  %67 = add i64 %23, -12
	}

[0x55afeef04bc0]:   %67 = add i64 %24, 9 {
	[0x55afeee70d70]:  %68 = add i64 %25, 9
	[0x55afeee7aeb0]:  %107 = add i64 %72, 9
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeef04c40]:   store i64 %67, i64* %PC, align 8 {
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	}

[0x55afeef04ca8]:   %68 = inttoptr i64 %66 to i32* {
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	}

[0x55afeef04d20]:   store i32 %33, i32* %68, align 4 {
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	}

[0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8 {
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	}

[0x55afeef04e00]:   %70 = add i64 %69, -4 {
	[0x55afeee72b30]:  %71 = add i64 %70, -4
	}

[0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	}

[0x55afeef04ee0]:   %72 = add i64 %71, 3 {
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef04f60]:   store i64 %72, i64* %PC, align 8 {
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	}

[0x55afeef04fc8]:   %73 = inttoptr i64 %70 to i32* {
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	}

[0x55afeef05028]:   %74 = load i32, i32* %73, align 4 {
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	}

[0x55afeef05088]:   %75 = zext i32 %74 to i64 {
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	}

[0x55afeef05100]:   store i64 %75, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	}

[0x55afeef05180]:   %76 = add i64 %69, -8 {
	[0x55afeee70e80]:  %77 = add i64 %70, -8
	}

[0x55afeef05200]:   %77 = add i64 %71, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef05280]:   store i64 %77, i64* %PC, align 8 {
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	}

[0x55afeef052e8]:   %78 = inttoptr i64 %76 to i32* {
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	}

[0x55afeef05348]:   %79 = load i32, i32* %78, align 4 {
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	}

[0x55afeef053c0]:   %80 = sub i32 %74, %79 {
	[0x55afeee75d00]:  %81 = sub i32 %75, %80
	}

[0x55afeef05428]:   %81 = zext i32 %80 to i64 {
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	}

[0x55afeef054a0]:   store i64 %81, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	}

[0x55afeef05520]:   %82 = icmp ult i32 %74, %79 {
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	}

[0x55afeef05588]:   %83 = zext i1 %82 to i8 {
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	}

[0x55afeef05600]:   store i8 %83, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	}

[0x55afeef05c90]:   %84 = and i32 %80, 255 {
	[0x55afeee73e30]:  %85 = and i32 %81, 255
	}

[0x55afeef05d50]:   %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #9 {
	[0x55afeeeb44a0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x55afeef05dc8]:   %86 = trunc i32 %85 to i8 {
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeef05e40]:   %87 = and i8 %86, 1 {
	[0x55afeee73670]:  %88 = and i8 %87, 1
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeef17ed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55afeef2f858]:  %16 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x55afeef18c28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55afeef25838]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55afeef2ff70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55afeeecc560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55afeef30140]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55afeeed01a0]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55afeef35080]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55afeee6ad90]:  %46 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55afeef35190]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55afeefb4ea0]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55afeeeb4f00]: block_400490 {
	[0x55afeee69990]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x55afeee711f0]:   %78 = add i64 %72, 6
From the pot matches of: [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime : [0x55afeef025a0]:   store i64 %14, i64* %PC, align 8


Uprime Matches: [0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8


Adj: [0x55afeee75ee0]:   store i64 %78, i64* %3, align 8


Removing: [0x55afeee7c3d0]:   %117 = add i64 %111, 6
From the pot matches of: [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime : [0x55afeef025a0]:   store i64 %14, i64* %PC, align 8


Uprime Matches: [0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8


Adj: [0x55afeee7c270]:   store i64 %117, i64* %3, align 8


Removing: [0x55afeeee00a0]:   %31 = add i64 %25, 6
From the pot matches of: [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime : [0x55afeef025a0]:   store i64 %14, i64* %PC, align 8


Uprime Matches: [0x55afeee6c7c0]:   store i64 %14, i64* %3, align 8


Adj: [0x55afeeedea70]:   store i64 %31, i64* %3, align 8


Removing: [0x55afeee712c0]:   %73 = add i64 %72, 3
From the pot matches of: [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime : [0x55afeef02920]:   store i64 %20, i64* %PC, align 8


Uprime Matches: [0x55afeee6ce60]:   store i64 %21, i64* %3, align 8


Adj: [0x55afeee728e0]:   store i64 %73, i64* %3, align 8


Removing: [0x55afeee794b0]:   %112 = add i64 %111, 3
From the pot matches of: [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime : [0x55afeef02920]:   store i64 %20, i64* %PC, align 8


Uprime Matches: [0x55afeee6ce60]:   store i64 %21, i64* %3, align 8


Adj: [0x55afeee7bc40]:   store i64 %112, i64* %3, align 8


Removing: [0x55afeeedf710]:   %26 = add i64 %25, 3
From the pot matches of: [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime : [0x55afeef02920]:   store i64 %20, i64* %PC, align 8


Uprime Matches: [0x55afeee6ce60]:   store i64 %21, i64* %3, align 8


Adj: [0x55afeeede720]:   store i64 %26, i64* %3, align 8


Removing: [0x55afeee712c0]:   %73 = add i64 %72, 3
From the pot matches of: [0x55afeef02c00]:   %25 = add i64 %24, 3


Uprime : [0x55afeef02c80]:   store i64 %25, i64* %PC, align 8


Uprime Matches: [0x55afeeede720]:   store i64 %26, i64* %3, align 8


Adj: [0x55afeee728e0]:   store i64 %73, i64* %3, align 8


Removing: [0x55afeee794b0]:   %112 = add i64 %111, 3
From the pot matches of: [0x55afeef02c00]:   %25 = add i64 %24, 3


Uprime : [0x55afeef02c80]:   store i64 %25, i64* %PC, align 8


Uprime Matches: [0x55afeeede720]:   store i64 %26, i64* %3, align 8


Adj: [0x55afeee7bc40]:   store i64 %112, i64* %3, align 8


Removing: [0x55afeee711f0]:   %78 = add i64 %72, 6
From the pot matches of: [0x55afeef02f20]:   %30 = add i64 %24, 6


Uprime : [0x55afeef02fa0]:   store i64 %30, i64* %PC, align 8


Uprime Matches: [0x55afeeedea70]:   store i64 %31, i64* %3, align 8


Adj: [0x55afeee75ee0]:   store i64 %78, i64* %3, align 8


Removing: [0x55afeee7c3d0]:   %117 = add i64 %111, 6
From the pot matches of: [0x55afeef02f20]:   %30 = add i64 %24, 6


Uprime : [0x55afeef02fa0]:   store i64 %30, i64* %PC, align 8


Uprime Matches: [0x55afeeedea70]:   store i64 %31, i64* %3, align 8


Adj: [0x55afeee7c270]:   store i64 %117, i64* %3, align 8


Removing: [0x55afeee76030]:   %89 = xor i8 %88, 1
From the pot matches of: [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime : [0x55afeef03870]:   store i8 %44, i8* %45, align 1, !tbaa !1279


Uprime Matches: [0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1


Adj: [0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1


Removing: [0x55afeee7cf00]:   %130 = xor i8 %129, 1
From the pot matches of: [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime : [0x55afeef03870]:   store i8 %44, i8* %45, align 1, !tbaa !1279


Uprime Matches: [0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1


Adj: [0x55afeee7cda0]:   store i8 %130, i8* %46, align 1


Removing: [0x55afeee7aeb0]:   %107 = add i64 %72, 9
From the pot matches of: [0x55afeef04bc0]:   %67 = add i64 %24, 9


Uprime : [0x55afeef04c40]:   store i64 %67, i64* %PC, align 8


Uprime Matches: [0x55afeee72eb0]:   store i64 %68, i64* %3, align 8


Adj: [0x55afeee7a280]:   store i64 %107, i64* %3, align 8


Removing: [0x55afeee82590]:   %147 = add i64 %111, 9
From the pot matches of: [0x55afeef04bc0]:   %67 = add i64 %24, 9


Uprime : [0x55afeef04c40]:   store i64 %67, i64* %PC, align 8


Uprime Matches: [0x55afeee72eb0]:   store i64 %68, i64* %3, align 8


Adj: [0x55afeee83010]:   store i64 %147, i64* %3, align 8


Removing: [0x55afeee794b0]:   %112 = add i64 %111, 3
From the pot matches of: [0x55afeef04ee0]:   %72 = add i64 %71, 3


Uprime : [0x55afeef04f60]:   store i64 %72, i64* %PC, align 8


Uprime Matches: [0x55afeee728e0]:   store i64 %73, i64* %3, align 8


Adj: [0x55afeee7bc40]:   store i64 %112, i64* %3, align 8


Removing: [0x55afeeedf710]:   %26 = add i64 %25, 3
From the pot matches of: [0x55afeef04ee0]:   %72 = add i64 %71, 3


Uprime : [0x55afeef04f60]:   store i64 %72, i64* %PC, align 8


Uprime Matches: [0x55afeee728e0]:   store i64 %73, i64* %3, align 8


Adj: [0x55afeeede720]:   store i64 %26, i64* %3, align 8


Removing: [0x55afeee7c3d0]:   %117 = add i64 %111, 6
From the pot matches of: [0x55afeef05200]:   %77 = add i64 %71, 6


Uprime : [0x55afeef05280]:   store i64 %77, i64* %PC, align 8


Uprime Matches: [0x55afeee75ee0]:   store i64 %78, i64* %3, align 8


Adj: [0x55afeee7c270]:   store i64 %117, i64* %3, align 8


Removing: [0x55afeeee00a0]:   %31 = add i64 %25, 6
From the pot matches of: [0x55afeef05200]:   %77 = add i64 %71, 6


Uprime : [0x55afeef05280]:   store i64 %77, i64* %PC, align 8


Uprime Matches: [0x55afeee75ee0]:   store i64 %78, i64* %3, align 8


Adj: [0x55afeeedea70]:   store i64 %31, i64* %3, align 8


Removing: [0x55afeee7cf00]:   %130 = xor i8 %129, 1
From the pot matches of: [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime : [0x55afeee98840]:   store i8 %88, i8* %45, align 1, !tbaa !1279


Uprime Matches: [0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1


Adj: [0x55afeee7cda0]:   store i8 %130, i8* %46, align 1


Removing: [0x55afeeee04e0]:   %45 = xor i8 %44, 1
From the pot matches of: [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime : [0x55afeee98840]:   store i8 %88, i8* %45, align 1, !tbaa !1279


Uprime Matches: [0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1


Adj: [0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1


Removing: [0x55afeee70d70]:   %68 = add i64 %25, 9
From the pot matches of: [0x55afeee9b150]:   %106 = add i64 %71, 9


Uprime : [0x55afeee9b1d0]:   store i64 %106, i64* %PC, align 8


Uprime Matches: [0x55afeee7a280]:   store i64 %107, i64* %3, align 8


Adj: [0x55afeee72eb0]:   store i64 %68, i64* %3, align 8


Removing: [0x55afeee82590]:   %147 = add i64 %111, 9
From the pot matches of: [0x55afeee9b150]:   %106 = add i64 %71, 9


Uprime : [0x55afeee9b1d0]:   store i64 %106, i64* %PC, align 8


Uprime Matches: [0x55afeee7a280]:   store i64 %107, i64* %3, align 8


Adj: [0x55afeee83010]:   store i64 %147, i64* %3, align 8


Removing: [0x55afeee76030]:   %89 = xor i8 %88, 1
From the pot matches of: [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime : [0x55afeee9c800]:   store i8 %129, i8* %45, align 1, !tbaa !1279


Uprime Matches: [0x55afeee7cda0]:   store i8 %130, i8* %46, align 1


Adj: [0x55afeee6dcc0]:   store i8 %89, i8* %46, align 1


Removing: [0x55afeeee04e0]:   %45 = xor i8 %44, 1
From the pot matches of: [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime : [0x55afeee9c800]:   store i8 %129, i8* %45, align 1, !tbaa !1279


Uprime Matches: [0x55afeee7cda0]:   store i8 %130, i8* %46, align 1


Adj: [0x55afeee6eaf0]:   store i8 %45, i8* %46, align 1

Round: 1

Removing: [0x55afeee6d0c8]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02308]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime Matches: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Adj: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeeedf710]:   %26 = add i64 %25, 3
[0x55afeeee00a0]:   %31 = add i64 %25, 6


Removing: [0x55afeeee4738]:   %72 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02308]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime Matches: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Adj: [0x55afeee711f0]:   %78 = add i64 %72, 6
[0x55afeee712c0]:   %73 = add i64 %72, 3
[0x55afeee7aeb0]:   %107 = add i64 %72, 9


Removing: [0x55afeeee6d38]:   %111 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02308]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x55afeef02520]:   %14 = add i64 %11, 6


Uprime Matches: [0x55afeeed9ea0]:   %14 = add i64 %10, 6


Adj: [0x55afeee794b0]:   %112 = add i64 %111, 3
[0x55afeee7c3d0]:   %117 = add i64 %111, 6
[0x55afeee82590]:   %147 = add i64 %111, 9
[0x55afeee829f0]:   %152 = add i64 %111, 10


Removing: [0x55afeee6d0c8]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02828]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime Matches: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Adj: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeeedf710]:   %26 = add i64 %25, 3
[0x55afeeee00a0]:   %31 = add i64 %25, 6


Removing: [0x55afeeee4738]:   %72 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02828]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime Matches: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Adj: [0x55afeee711f0]:   %78 = add i64 %72, 6
[0x55afeee712c0]:   %73 = add i64 %72, 3
[0x55afeee7aeb0]:   %107 = add i64 %72, 9


Removing: [0x55afeeee6d38]:   %111 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02828]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x55afeef028a0]:   %20 = add i64 %19, 3


Uprime Matches: [0x55afeee6cfc0]:   %21 = add i64 %20, 3


Adj: [0x55afeee794b0]:   %112 = add i64 %111, 3
[0x55afeee7c3d0]:   %117 = add i64 %111, 6
[0x55afeee82590]:   %147 = add i64 %111, 9
[0x55afeee829f0]:   %152 = add i64 %111, 10


Removing: [0x55afeeee4738]:   %72 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55afeef04bc0]:   %67 = add i64 %24, 9


Uprime Matches: [0x55afeee70d70]:   %68 = add i64 %25, 9


Adj: [0x55afeee711f0]:   %78 = add i64 %72, 6
[0x55afeee712c0]:   %73 = add i64 %72, 3
[0x55afeee7aeb0]:   %107 = add i64 %72, 9


Removing: [0x55afeeee6d38]:   %111 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55afeef04bc0]:   %67 = add i64 %24, 9


Uprime Matches: [0x55afeee70d70]:   %68 = add i64 %25, 9


Adj: [0x55afeee794b0]:   %112 = add i64 %111, 3
[0x55afeee7c3d0]:   %117 = add i64 %111, 6
[0x55afeee82590]:   %147 = add i64 %111, 9
[0x55afeee829f0]:   %152 = add i64 %111, 10


Removing: [0x55afeee73670]:   %88 = and i8 %87, 1
From the pot matches of: [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime : [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee76030]:   %89 = xor i8 %88, 1


Removing: [0x55afeee7d0d0]:   %129 = and i8 %128, 1
From the pot matches of: [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime : [0x55afeef037f0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x55afeeee04e0]:   %45 = xor i8 %44, 1


Adj: [0x55afeee7cf00]:   %130 = xor i8 %129, 1


Removing: [0x55afeee6d0c8]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9b150]:   %106 = add i64 %71, 9


Uprime Matches: [0x55afeee7aeb0]:   %107 = add i64 %72, 9


Adj: [0x55afeee70d70]:   %68 = add i64 %25, 9
[0x55afeeedf710]:   %26 = add i64 %25, 3
[0x55afeeee00a0]:   %31 = add i64 %25, 6


Removing: [0x55afeeee6d38]:   %111 = load i64, i64* %3, align 8
From the pot matches of: [0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x55afeee9b150]:   %106 = add i64 %71, 9


Uprime Matches: [0x55afeee7aeb0]:   %107 = add i64 %72, 9


Adj: [0x55afeee794b0]:   %112 = add i64 %111, 3
[0x55afeee7c3d0]:   %117 = add i64 %111, 6
[0x55afeee82590]:   %147 = add i64 %111, 9
[0x55afeee829f0]:   %152 = add i64 %111, 10


Removing: [0x55afeee7d0d0]:   %129 = and i8 %128, 1
From the pot matches of: [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime : [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1


Adj: [0x55afeee7cf00]:   %130 = xor i8 %129, 1


Removing: [0x55afeeee05f0]:   %44 = and i8 %43, 1
From the pot matches of: [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime : [0x55afeee987c0]:   %88 = xor i8 %87, 1


Uprime Matches: [0x55afeee76030]:   %89 = xor i8 %88, 1


Adj: [0x55afeeee04e0]:   %45 = xor i8 %44, 1


Removing: [0x55afeee73670]:   %88 = and i8 %87, 1
From the pot matches of: [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime : [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime Matches: [0x55afeee7cf00]:   %130 = xor i8 %129, 1


Adj: [0x55afeee76030]:   %89 = xor i8 %88, 1


Removing: [0x55afeeee05f0]:   %44 = and i8 %43, 1
From the pot matches of: [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime : [0x55afeee9c780]:   %129 = xor i8 %128, 1


Uprime Matches: [0x55afeee7cf00]:   %130 = xor i8 %129, 1


Adj: [0x55afeeee04e0]:   %45 = xor i8 %44, 1

Round: 2

Removing: [0x55afeeee5a38]:   %87 = trunc i32 %86 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee73670]:   %88 = and i8 %87, 1


Removing: [0x55afeeee8958]:   %128 = trunc i32 %127 to i8
From the pot matches of: [0x55afeef036b8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55afeef03770]:   %43 = and i8 %42, 1


Uprime Matches: [0x55afeeee05f0]:   %44 = and i8 %43, 1


Adj: [0x55afeee7d0d0]:   %129 = and i8 %128, 1


Removing: [0x55afeeee21b8]:   %43 = trunc i32 %42 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1


Adj: [0x55afeeee05f0]:   %44 = and i8 %43, 1


Removing: [0x55afeeee8958]:   %128 = trunc i32 %127 to i8
From the pot matches of: [0x55afeef05dc8]:   %86 = trunc i32 %85 to i8


Uprime : [0x55afeef05e40]:   %87 = and i8 %86, 1


Uprime Matches: [0x55afeee73670]:   %88 = and i8 %87, 1


Adj: [0x55afeee7d0d0]:   %129 = and i8 %128, 1


Removing: [0x55afeeee21b8]:   %43 = trunc i32 %42 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee7d0d0]:   %129 = and i8 %128, 1


Adj: [0x55afeeee05f0]:   %44 = and i8 %43, 1


Removing: [0x55afeeee5a38]:   %87 = trunc i32 %86 to i8
From the pot matches of: [0x55afeee9be78]:   %127 = trunc i32 %126 to i8


Uprime : [0x55afeee9bef0]:   %128 = and i8 %127, 1


Uprime Matches: [0x55afeee7d0d0]:   %129 = and i8 %128, 1


Adj: [0x55afeee73670]:   %88 = and i8 %87, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x55afeee540d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55afeeed0520]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55afeee8eb10]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55afeeed0330]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55afeee987c0]:   %88 = xor i8 %87, 1 {
	[0x55afeee76030]:  %89 = xor i8 %88, 1
	}

[0x55afeee98840]:   store i8 %88, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6dcc0]:  store i8 %89, i8* %46, align 1
	}

[0x55afeee98ed0]:   %89 = xor i32 %79, %74 {
	[0x55afeee6db60]:  %90 = xor i32 %80, %75
	}

[0x55afeee98f50]:   %90 = xor i32 %89, %80 {
	[0x55afeee6da40]:  %91 = xor i32 %90, %81
	}

[0x55afeee98fd0]:   %91 = lshr i32 %90, 4 {
	[0x55afeee6d8f0]:  %92 = lshr i32 %91, 4
	}

[0x55afeee99038]:   %92 = trunc i32 %91 to i8 {
	[0x55afeee79218]:  %93 = trunc i32 %92 to i8
	}

[0x55afeee990b0]:   %93 = and i8 %92, 1 {
	[0x55afeee6d710]:  %94 = and i8 %93, 1
	}

[0x55afeee99130]:   store i8 %93, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6d630]:  store i8 %94, i8* %52, align 1
	}

[0x55afeee997c0]:   %94 = icmp eq i32 %80, 0 {
	[0x55afeee762f0]:  %95 = icmp eq i32 %81, 0
	}

[0x55afeee99828]:   %95 = zext i1 %94 to i8 {
	[0x55afeeee56a8]:  %96 = zext i1 %95 to i8
	}

[0x55afeee998a0]:   store i8 %95, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee6de20]:  store i8 %96, i8* %55, align 1
	}

[0x55afeee99f30]:   %96 = lshr i32 %80, 31 {
	[0x55afeee78f40]:  %97 = lshr i32 %81, 31
	}

[0x55afeee99f98]:   %97 = trunc i32 %96 to i8 {
	[0x55afeeee5318]:  %98 = trunc i32 %97 to i8
	}

[0x55afeee9a010]:   store i8 %97, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee78de0]:  store i8 %98, i8* %58, align 1
	}

[0x55afeee9a6a0]:   %98 = lshr i32 %74, 31 {
	[0x55afeee78c00]:  %99 = lshr i32 %75, 31
	}

[0x55afeee9a720]:   %99 = lshr i32 %79, 31 {
	[0x55afeee78aa0]:  %100 = lshr i32 %80, 31
	}

[0x55afeee9a7a0]:   %100 = xor i32 %99, %98 {
	[0x55afeee78940]:  %101 = xor i32 %100, %99
	}

[0x55afeee9a820]:   %101 = xor i32 %96, %98 {
	[0x55afeee787a0]:  %102 = xor i32 %97, %99
	}

[0x55afeee9a8a0]:   %102 = add nuw nsw i32 %101, %100 {
	[0x55afeee78640]:  %103 = add nuw nsw i32 %102, %101
	}

[0x55afeee9a920]:   %103 = icmp eq i32 %102, 2 {
	[0x55afeee79020]:  %104 = icmp eq i32 %103, 2
	}

[0x55afeee9a988]:   %104 = zext i1 %103 to i8 {
	[0x55afeeee51e8]:  %105 = zext i1 %104 to i8
	}

[0x55afeee9aa00]:   store i8 %104, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee7bae0]:  store i8 %105, i8* %66, align 1
	}

[0x55afeee9b0d0]:   %105 = add i64 %69, -16 {
	[0x55afeee7b980]:  %106 = add i64 %70, -16
	}

[0x55afeee9b150]:   %106 = add i64 %71, 9 {
	[0x55afeee7aeb0]:  %107 = add i64 %72, 9
	}

[0x55afeee9b1d0]:   store i64 %106, i64* %PC, align 8 {
	[0x55afeee7a280]:  store i64 %107, i64* %3, align 8
	}

[0x55afeee9b238]:   %107 = inttoptr i64 %105 to i32* {
	[0x55afeeee50b8]:  %108 = inttoptr i64 %106 to i32*
	}

[0x55afeee9b2b0]:   store i32 %80, i32* %107, align 4 {
	[0x55afeee797b0]:  store i32 %81, i32* %108, align 4
	}

[0x55afeee9b318]:   %108 = load i64, i64* %RBP, align 8 {
	[0x55afeeee6158]:  %109 = load i64, i64* %RBP.i, align 8
	}

[0x55afeee9b390]:   %109 = add i64 %108, -12 {
	[0x55afeee79610]:  %110 = add i64 %109, -12
	}

[0x55afeee9b3f8]:   %110 = load i64, i64* %PC, align 8 {
	[0x55afeeee6d38]:  %111 = load i64, i64* %3, align 8
	}

[0x55afeee9b470]:   %111 = add i64 %110, 3 {
	[0x55afeee794b0]:  %112 = add i64 %111, 3
	}

[0x55afeee9b4f0]:   store i64 %111, i64* %PC, align 8 {
	[0x55afeee7bc40]:  store i64 %112, i64* %3, align 8
	}

[0x55afeee9b558]:   %112 = inttoptr i64 %109 to i32* {
	[0x55afeeee6c08]:  %113 = inttoptr i64 %110 to i32*
	}

[0x55afeee9b5b8]:   %113 = load i32, i32* %112, align 4 {
	[0x55afeeee6ad8]:  %114 = load i32, i32* %113, align 4
	}

[0x55afeee9b618]:   %114 = zext i32 %113 to i64 {
	[0x55afeeee6618]:  %115 = zext i32 %114 to i64
	}

[0x55afeee9b690]:   store i64 %114, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee7c710]:  store i64 %115, i64* %RSI.i26, align 8
	}

[0x55afeee9b710]:   %115 = add i64 %108, -16 {
	[0x55afeee7c5b0]:  %116 = add i64 %109, -16
	}

[0x55afeee9b790]:   %116 = add i64 %110, 6 {
	[0x55afeee7c3d0]:  %117 = add i64 %111, 6
	}

[0x55afeee9b810]:   store i64 %116, i64* %PC, align 8 {
	[0x55afeee7c270]:  store i64 %117, i64* %3, align 8
	}

[0x55afeee9b878]:   %117 = inttoptr i64 %115 to i32* {
	[0x55afeeee64e8]:  %118 = inttoptr i64 %116 to i32*
	}

[0x55afeee9b8d8]:   %118 = load i32, i32* %117, align 4 {
	[0x55afeeee63b8]:  %119 = load i32, i32* %118, align 4
	}

[0x55afeee9b950]:   %119 = add i32 %118, %113 {
	[0x55afeee7c0d0]:  %120 = add i32 %119, %114
	}

[0x55afeee9b9b8]:   %120 = zext i32 %119 to i64 {
	[0x55afeeee6288]:  %121 = zext i32 %120 to i64
	}

[0x55afeee9ba30]:   store i64 %120, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee7bf70]:  store i64 %121, i64* %RSI.i26, align 8
	}

[0x55afeee9bab0]:   %121 = icmp ult i32 %119, %113 {
	[0x55afeee7be10]:  %122 = icmp ult i32 %120, %114
	}

[0x55afeee9bb30]:   %122 = icmp ult i32 %119, %118 {
	[0x55afeee7c870]:  %123 = icmp ult i32 %120, %119
	}

[0x55afeee9bbb0]:   %123 = or i1 %121, %122 {
	[0x55afeee7ffe0]:  %124 = or i1 %122, %123
	}

[0x55afeee9bc18]:   %124 = zext i1 %123 to i8 {
	[0x55afeeee6f98]:  %125 = zext i1 %124 to i8
	}

[0x55afeee9bc90]:   store i8 %124, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee7fc70]:  store i8 %125, i8* %40, align 1
	}

[0x55afeee9bd10]:   %125 = and i32 %119, 255 {
	[0x55afeee7f210]:  %126 = and i32 %120, 255
	}

[0x55afeee9bdb0]:   %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #9 {
	[0x55afeeef7850]:  %127 = tail call i32 @llvm.ctpop.i32(i32 %126)
	}

[0x55afeee9be78]:   %127 = trunc i32 %126 to i8 {
	[0x55afeeee8958]:  %128 = trunc i32 %127 to i8
	}

[0x55afeee9bef0]:   %128 = and i8 %127, 1 {
	[0x55afeee7d0d0]:  %129 = and i8 %128, 1
	}

[0x55afeee9c780]:   %129 = xor i8 %128, 1 {
	[0x55afeee7cf00]:  %130 = xor i8 %129, 1
	}

[0x55afeee9c800]:   store i8 %129, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee7cda0]:  store i8 %130, i8* %46, align 1
	}

[0x55afeee9c880]:   %130 = xor i32 %118, %113 {
	[0x55afeee7c9d0]:  %131 = xor i32 %119, %114
	}

[0x55afeee9c900]:   %131 = xor i32 %130, %119 {
	[0x55afeee80140]:  %132 = xor i32 %131, %120
	}

[0x55afeee9c980]:   %132 = lshr i32 %131, 4 {
	[0x55afeee7a7c0]:  %133 = lshr i32 %132, 4
	}

[0x55afeee9c9e8]:   %133 = trunc i32 %132 to i8 {
	[0x55afeeee8038]:  %134 = trunc i32 %133 to i8
	}

[0x55afeee9ca60]:   %134 = and i8 %133, 1 {
	[0x55afeee80a30]:  %135 = and i8 %134, 1
	}

[0x55afeee9cae0]:   store i8 %134, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee80890]:  store i8 %135, i8* %52, align 1
	}

[0x55afeee9cb60]:   %135 = icmp eq i32 %119, 0 {
	[0x55afeee806c0]:  %136 = icmp eq i32 %120, 0
	}

[0x55afeee9cbc8]:   %136 = zext i1 %135 to i8 {
	[0x55afeeee7b78]:  %137 = zext i1 %136 to i8
	}

[0x55afeee9cc40]:   store i8 %136, i8* %54, align 1, !tbaa !1281 {
	[0x55afeee80560]:  store i8 %137, i8* %55, align 1
	}

[0x55afeee9ccc0]:   %137 = lshr i32 %119, 31 {
	[0x55afeee80400]:  %138 = lshr i32 %120, 31
	}

[0x55afeee9cd28]:   %138 = trunc i32 %137 to i8 {
	[0x55afeeee76b8]:  %139 = trunc i32 %138 to i8
	}

[0x55afeee9cda0]:   store i8 %138, i8* %57, align 1, !tbaa !1282 {
	[0x55afeee802a0]:  store i8 %139, i8* %58, align 1
	}

[0x55afeee9ce20]:   %139 = lshr i32 %113, 31 {
	[0x55afeee7a910]:  %140 = lshr i32 %114, 31
	}

[0x55afeee9cea0]:   %140 = lshr i32 %118, 31 {
	[0x55afeee82430]:  %141 = lshr i32 %119, 31
	}

[0x55afeee9cf20]:   %141 = xor i32 %137, %139 {
	[0x55afeee81280]:  %142 = xor i32 %138, %140
	}

[0x55afeee9cfa0]:   %142 = xor i32 %137, %140 {
	[0x55afeee81120]:  %143 = xor i32 %138, %141
	}

[0x55afeee9d020]:   %143 = add nuw nsw i32 %141, %142 {
	[0x55afeee80f40]:  %144 = add nuw nsw i32 %142, %143
	}

[0x55afeee9d0a0]:   %144 = icmp eq i32 %143, 2 {
	[0x55afeee80ce0]:  %145 = icmp eq i32 %144, 2
	}

[0x55afeee9d108]:   %145 = zext i1 %144 to i8 {
	[0x55afeeee7588]:  %146 = zext i1 %145 to i8
	}

[0x55afeee9d180]:   store i8 %145, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee80b90]:  store i8 %146, i8* %66, align 1
	}

[0x55afeee9d200]:   store i64 %120, i64* %RAX, align 8, !tbaa !1261 {
	[0x55afeee7abb0]:  store i64 %121, i64* %RAX.i, align 8
	}

[0x55afeee9d280]:   %146 = add i64 %110, 9 {
	[0x55afeee82590]:  %147 = add i64 %111, 9
	}

[0x55afeee9d300]:   store i64 %146, i64* %PC, align 8 {
	[0x55afeee83010]:  store i64 %147, i64* %3, align 8
	}

[0x55afeee9d368]:   %147 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55afeeee7458]:  %148 = load i64, i64* %6, align 8
	}

[0x55afeee9d3e0]:   %148 = add i64 %147, 8 {
	[0x55afeee82ea0]:  %149 = add i64 %148, 8
	}

[0x55afeee9d448]:   %149 = inttoptr i64 %147 to i64* {
	[0x55afeeee70c8]:  %150 = inttoptr i64 %148 to i64*
	}

[0x55afeee9d4a8]:   %150 = load i64, i64* %149, align 8 {
	[0x55afeeee9b18]:  %151 = load i64, i64* %150, align 8
	}

[0x55afeee9d520]:   store i64 %150, i64* %RBP, align 8, !tbaa !1261 {
	[0x55afeee82cb0]:  store i64 %151, i64* %RBP.i, align 8
	}

[0x55afeee9d5a0]:   store i64 %148, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee82b50]:  store i64 %149, i64* %6, align 8
	}

[0x55afeee9d620]:   %151 = add i64 %110, 10 {
	[0x55afeee829f0]:  %152 = add i64 %111, 10
	}

[0x55afeee9d6a0]:   store i64 %151, i64* %PC, align 8 {
	[0x55afeee82890]:  store i64 %152, i64* %3, align 8
	}

[0x55afeee9d708]:   %152 = inttoptr i64 %148 to i64* {
	[0x55afeeeece28]:  %153 = inttoptr i64 %149 to i64*
	}

[0x55afeee9d768]:   %153 = load i64, i64* %152, align 8 {
	[0x55afeeeeccf8]:  %154 = load i64, i64* %153, align 8
	}

[0x55afeee9d7e0]:   store i64 %153, i64* %PC, align 8, !tbaa !1261 {
	[0x55afeee826f0]:  store i64 %154, i64* %3, align 8
	}

[0x55afeeeb4e40]: %struct.State* %0 {
	[0x55afeef34e40]:%struct.State.1* %0
	}

[0x55afeeeb4e80]: i64 %1 {
	[0x55afeee6cdb0]:i64 %1
	}

[0x55afeeeb4ec0]: %struct.Memory* %2 {
	[0x55afeeee01c0]:%struct.Memory.32* %2
	}

[0x55afeeeb5108]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55afeee47ab8]:  %RSI.i26 = getelementptr inbounds %union.anon.5, %union.anon.5* %16, i64 0, i32 0
	}

[0x55afeeeb51b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55afeeecd498]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55afeeeb5230]:   %6 = add i64 %1, 1 {
	[0x55afeee46b90]:  %5 = add i64 %1, 1
	}

[0x55afeeed8538]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x55afeee9e3f8]:  %ESI.i29 = bitcast %union.anon.5* %16 to i32*
	}

[0x55afeeed8608]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55afeeeda568]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x55afeeefa4e0]:   %154 = add i64 %147, 16 {
	[0x55afeee831b0]:  %155 = add i64 %148, 16
	}

[0x55afeeefa560]:   store i64 %154, i64* %7, align 8, !tbaa !1261 {
	[0x55afeee7b3b0]:  store i64 %155, i64* %6, align 8
	}

[0x55afeeefa5c8]:   ret %struct.Memory* %2 {
	[0x55afeeeecbc8]:  ret %struct.Memory.32* %2
	}

[0x55afeef00840]:   store i64 %6, i64* %PC, align 8 {
	[0x55afeee6b2f0]:  store i64 %5, i64* %3, align 8
	}

[0x55afeef008a8]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55afeeecd668]:  %7 = load i64, i64* %6, align 8
	}

[0x55afeef01b30]:   %9 = add i64 %8, -8 {
	[0x55afeee6b0b0]:  %8 = add i64 %7, -8
	}

[0x55afeef01b98]:   %10 = inttoptr i64 %9 to i64* {
	[0x55afeee53ff8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55afeef01c10]:   store i64 %5, i64* %10, align 8 {
	[0x55afeee6af60]:  store i64 %4, i64* %9, align 8
	}

[0x55afeef01c90]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x55afeeef4610]:  store i64 %8, i64* %6, align 8
	}

[0x55afeef02308]:   %11 = load i64, i64* %PC, align 8 {
	[0x55afeeeda968]:  %10 = load i64, i64* %3, align 8
	}

[0x55afeef02380]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x55afeeede520]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55afeef02440]:   %12 = add i64 %8, -12 {
	[0x55afeeedcae0]:  %12 = add i64 %7, -12
	}

[0x55afeef024a8]:   %13 = load i32, i32* %EDI, align 4 {
	[0x55afeef143d8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55afeef02520]:   %14 = add i64 %11, 6 {
	[0x55afeeed9ea0]:  %14 = add i64 %10, 6
	}

[0x55afeef025a0]:   store i64 %14, i64* %PC, align 8 {
	[0x55afeee6c7c0]:  store i64 %14, i64* %3, align 8
	}

[0x55afeef02608]:   %15 = inttoptr i64 %12 to i32* {
	[0x55afeef105b8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55afeef02680]:   store i32 %13, i32* %15, align 4 {
	[0x55afeeedfc60]:  store i32 %13, i32* %15, align 4
	}

[0x55afeef026e8]:   %16 = load i64, i64* %RBP, align 8 {
	[0x55afeeef8468]:  %17 = load i64, i64* %RBP.i, align 8
	}

[0x55afeef02760]:   %17 = add i64 %16, -8 {
	[0x55afeeedfb50]:  %18 = add i64 %17, -8
	}

[0x55afeef027c8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x55afeee92d88]:  %19 = load i32, i32* %ESI.i29, align 4
	}

[0x55afeef02828]:   %19 = load i64, i64* %PC, align 8 {
	[0x55afeeedc9e8]:  %20 = load i64, i64* %3, align 8
	}

[0x55afeef028a0]:   %20 = add i64 %19, 3 {
	[0x55afeee6cfc0]:  %21 = add i64 %20, 3
	}

[0x55afeef02920]:   store i64 %20, i64* %PC, align 8 {
	[0x55afeee6ce60]:  store i64 %21, i64* %3, align 8
	}

[0x55afeef02988]:   %21 = inttoptr i64 %17 to i32* {
	[0x55afeeee0b68]:  %22 = inttoptr i64 %18 to i32*
	}

[0x55afeef02a00]:   store i32 %18, i32* %21, align 4 {
	[0x55afeeedf820]:  store i32 %19, i32* %22, align 4
	}

[0x55afeef02a68]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55afeeedebb8]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x55afeef02b20]:   %23 = add i64 %22, -4 {
	[0x55afeee6c910]:  %24 = add i64 %23, -4
	}

[0x55afeef02b88]:   %24 = load i64, i64* %PC, align 8 {
	[0x55afeee6d0c8]:  %25 = load i64, i64* %3, align 8
	}

[0x55afeef02c00]:   %25 = add i64 %24, 3 {
	[0x55afeeedf710]:  %26 = add i64 %25, 3
	}

[0x55afeef02c80]:   store i64 %25, i64* %PC, align 8 {
	[0x55afeeede720]:  store i64 %26, i64* %3, align 8
	}

[0x55afeef02ce8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55afeeef38a8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x55afeef02d48]:   %27 = load i32, i32* %26, align 4 {
	[0x55afeeeddee8]:  %28 = load i32, i32* %27, align 4
	}

[0x55afeef02da8]:   %28 = zext i32 %27 to i64 {
	[0x55afeeeddad8]:  %29 = zext i32 %28 to i64
	}

[0x55afeef02e20]:   store i64 %28, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee6e250]:  store i64 %29, i64* %RSI.i26, align 8
	}

[0x55afeef02ea0]:   %29 = add i64 %22, -8 {
	[0x55afeee6e0f0]:  %30 = add i64 %23, -8
	}

[0x55afeef02f20]:   %30 = add i64 %24, 6 {
	[0x55afeeee00a0]:  %31 = add i64 %25, 6
	}

[0x55afeef02fa0]:   store i64 %30, i64* %PC, align 8 {
	[0x55afeeedea70]:  store i64 %31, i64* %3, align 8
	}

[0x55afeef03008]:   %31 = inttoptr i64 %29 to i32* {
	[0x55afeeedc718]:  %32 = inttoptr i64 %30 to i32*
	}

[0x55afeef03068]:   %32 = load i32, i32* %31, align 4 {
	[0x55afeeee0c98]:  %33 = load i32, i32* %32, align 4
	}

[0x55afeef030e0]:   %33 = add i32 %32, %27 {
	[0x55afeeedfe80]:  %34 = add i32 %33, %28
	}

[0x55afeef03148]:   %34 = zext i32 %33 to i64 {
	[0x55afeeee2418]:  %35 = zext i32 %34 to i64
	}

[0x55afeef031c0]:   store i64 %34, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeeede920]:  store i64 %35, i64* %RSI.i26, align 8
	}

[0x55afeef03240]:   %35 = icmp ult i32 %33, %27 {
	[0x55afeee6d240]:  %36 = icmp ult i32 %34, %28
	}

[0x55afeef032c0]:   %36 = icmp ult i32 %33, %32 {
	[0x55afeeee02c0]:  %37 = icmp ult i32 %34, %33
	}

[0x55afeef03340]:   %37 = or i1 %35, %36 {
	[0x55afeee6eda0]:  %38 = or i1 %36, %37
	}

[0x55afeef033a8]:   %38 = zext i1 %37 to i8 {
	[0x55afeeee22e8]:  %39 = zext i1 %38 to i8
	}

[0x55afeef03420]:   store i8 %38, i8* %39, align 1, !tbaa !1265 {
	[0x55afeeee0700]:  store i8 %39, i8* %40, align 1
	}

[0x55afeef03580]:   %40 = and i32 %33, 255 {
	[0x55afeee6ec50]:  %41 = and i32 %34, 255
	}

[0x55afeef03640]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x55afeefccc70]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55afeef036b8]:   %42 = trunc i32 %41 to i8 {
	[0x55afeeee21b8]:  %43 = trunc i32 %42 to i8
	}

[0x55afeef03770]:   %43 = and i8 %42, 1 {
	[0x55afeeee05f0]:  %44 = and i8 %43, 1
	}

[0x55afeef037f0]:   %44 = xor i8 %43, 1 {
	[0x55afeeee04e0]:  %45 = xor i8 %44, 1
	}

[0x55afeef03870]:   store i8 %44, i8* %45, align 1, !tbaa !1279 {
	[0x55afeee6eaf0]:  store i8 %45, i8* %46, align 1
	}

[0x55afeef03a00]:   %46 = xor i32 %32, %27 {
	[0x55afeee6e990]:  %47 = xor i32 %33, %28
	}

[0x55afeef03a80]:   %47 = xor i32 %46, %33 {
	[0x55afeee6ef00]:  %48 = xor i32 %47, %34
	}

[0x55afeef03b00]:   %48 = lshr i32 %47, 4 {
	[0x55afeeee0850]:  %49 = lshr i32 %48, 4
	}

[0x55afeef03b68]:   %49 = trunc i32 %48 to i8 {
	[0x55afeeee1cf8]:  %50 = trunc i32 %49 to i8
	}

[0x55afeef03be0]:   %50 = and i8 %49, 1 {
	[0x55afeee6f610]:  %51 = and i8 %50, 1
	}

[0x55afeef03c90]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55afeeee84e0]:  %52 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55afeef03d20]:   store i8 %50, i8* %51, align 1, !tbaa !1280 {
	[0x55afeee6f470]:  store i8 %51, i8* %52, align 1
	}

[0x55afeef03ed0]:   %52 = icmp eq i32 %33, 0 {
	[0x55afeee6f310]:  %53 = icmp eq i32 %34, 0
	}

[0x55afeef03f38]:   %53 = zext i1 %52 to i8 {
	[0x55afeeee1968]:  %54 = zext i1 %53 to i8
	}

[0x55afeef03fe0]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55afeee78250]:  %55 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55afeef04070]:   store i8 %53, i8* %54, align 1, !tbaa !1281 {
	[0x55afeeee0a30]:  store i8 %54, i8* %55, align 1
	}

[0x55afeef04220]:   %55 = lshr i32 %33, 31 {
	[0x55afeee6f050]:  %56 = lshr i32 %34, 31
	}

[0x55afeef04288]:   %56 = trunc i32 %55 to i8 {
	[0x55afeeee1708]:  %57 = trunc i32 %56 to i8
	}

[0x55afeef04330]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55afeee732f0]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55afeef043c0]:   store i8 %56, i8* %57, align 1, !tbaa !1282 {
	[0x55afeeee0920]:  store i8 %57, i8* %58, align 1
	}

[0x55afeef04570]:   %58 = lshr i32 %27, 31 {
	[0x55afeee6ff70]:  %59 = lshr i32 %28, 31
	}

[0x55afeef045f0]:   %59 = lshr i32 %32, 31 {
	[0x55afeee717e0]:  %60 = lshr i32 %33, 31
	}

[0x55afeef04670]:   %60 = xor i32 %55, %58 {
	[0x55afeee70900]:  %61 = xor i32 %56, %59
	}

[0x55afeef046f0]:   %61 = xor i32 %55, %59 {
	[0x55afeee70700]:  %62 = xor i32 %56, %60
	}

[0x55afeef04770]:   %62 = add nuw nsw i32 %60, %61 {
	[0x55afeee704d0]:  %63 = add nuw nsw i32 %61, %62
	}

[0x55afeef047f0]:   %63 = icmp eq i32 %62, 2 {
	[0x55afeee70370]:  %64 = icmp eq i32 %63, 2
	}

[0x55afeef04858]:   %64 = zext i1 %63 to i8 {
	[0x55afeeee1028]:  %65 = zext i1 %64 to i8
	}

[0x55afeef04900]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55afeee6fcf0]:  %66 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55afeef04990]:   store i8 %64, i8* %65, align 1, !tbaa !1283 {
	[0x55afeee70220]:  store i8 %65, i8* %66, align 1
	}

[0x55afeef04b40]:   %66 = add i64 %22, -12 {
	[0x55afeee700c0]:  %67 = add i64 %23, -12
	}

[0x55afeef04bc0]:   %67 = add i64 %24, 9 {
	[0x55afeee70d70]:  %68 = add i64 %25, 9
	}

[0x55afeef04c40]:   store i64 %67, i64* %PC, align 8 {
	[0x55afeee72eb0]:  store i64 %68, i64* %3, align 8
	}

[0x55afeef04ca8]:   %68 = inttoptr i64 %66 to i32* {
	[0x55afeeee2ec8]:  %69 = inttoptr i64 %67 to i32*
	}

[0x55afeef04d20]:   store i32 %33, i32* %68, align 4 {
	[0x55afeee71410]:  store i32 %34, i32* %69, align 4
	}

[0x55afeef04d88]:   %69 = load i64, i64* %RBP, align 8 {
	[0x55afeeee4d28]:  %70 = load i64, i64* %RBP.i, align 8
	}

[0x55afeef04e00]:   %70 = add i64 %69, -4 {
	[0x55afeee72b30]:  %71 = add i64 %70, -4
	}

[0x55afeef04e68]:   %71 = load i64, i64* %PC, align 8 {
	[0x55afeeee4738]:  %72 = load i64, i64* %3, align 8
	}

[0x55afeef04ee0]:   %72 = add i64 %71, 3 {
	[0x55afeee712c0]:  %73 = add i64 %72, 3
	}

[0x55afeef04f60]:   store i64 %72, i64* %PC, align 8 {
	[0x55afeee728e0]:  store i64 %73, i64* %3, align 8
	}

[0x55afeef04fc8]:   %73 = inttoptr i64 %70 to i32* {
	[0x55afeeee35e8]:  %74 = inttoptr i64 %71 to i32*
	}

[0x55afeef05028]:   %74 = load i32, i32* %73, align 4 {
	[0x55afeeee34b8]:  %75 = load i32, i32* %74, align 4
	}

[0x55afeef05088]:   %75 = zext i32 %74 to i64 {
	[0x55afeeee3388]:  %76 = zext i32 %75 to i64
	}

[0x55afeef05100]:   store i64 %75, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee70f90]:  store i64 %76, i64* %RSI.i26, align 8
	}

[0x55afeef05180]:   %76 = add i64 %69, -8 {
	[0x55afeee70e80]:  %77 = add i64 %70, -8
	}

[0x55afeef05200]:   %77 = add i64 %71, 6 {
	[0x55afeee711f0]:  %78 = add i64 %72, 6
	}

[0x55afeef05280]:   store i64 %77, i64* %PC, align 8 {
	[0x55afeee75ee0]:  store i64 %78, i64* %3, align 8
	}

[0x55afeef052e8]:   %78 = inttoptr i64 %76 to i32* {
	[0x55afeeee3258]:  %79 = inttoptr i64 %77 to i32*
	}

[0x55afeef05348]:   %79 = load i32, i32* %78, align 4 {
	[0x55afeeee3128]:  %80 = load i32, i32* %79, align 4
	}

[0x55afeef053c0]:   %80 = sub i32 %74, %79 {
	[0x55afeee75d00]:  %81 = sub i32 %75, %80
	}

[0x55afeef05428]:   %81 = zext i32 %80 to i64 {
	[0x55afeeee4e58]:  %82 = zext i32 %81 to i64
	}

[0x55afeef054a0]:   store i64 %81, i64* %RSI, align 8, !tbaa !1261 {
	[0x55afeee75ba0]:  store i64 %82, i64* %RSI.i26, align 8
	}

[0x55afeef05520]:   %82 = icmp ult i32 %74, %79 {
	[0x55afeee75a40]:  %83 = icmp ult i32 %75, %80
	}

[0x55afeef05588]:   %83 = zext i1 %82 to i8 {
	[0x55afeeee5b68]:  %84 = zext i1 %83 to i8
	}

[0x55afeef05600]:   store i8 %83, i8* %39, align 1, !tbaa !1265 {
	[0x55afeee758e0]:  store i8 %84, i8* %40, align 1
	}

[0x55afeef05c90]:   %84 = and i32 %80, 255 {
	[0x55afeee73e30]:  %85 = and i32 %81, 255
	}

[0x55afeef05d50]:   %85 = tail call i32 @llvm.ctpop.i32(i32 %84) #9 {
	[0x55afeeeb44a0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x55afeef05dc8]:   %86 = trunc i32 %85 to i8 {
	[0x55afeeee5a38]:  %87 = trunc i32 %86 to i8
	}

[0x55afeef05e40]:   %87 = and i8 %86, 1 {
	[0x55afeee73670]:  %88 = and i8 %87, 1
	}

[0x55afeef17ed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55afeef2f858]:  %16 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x55afeef18c28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55afeef25838]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55afeef2ff70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55afeeecc560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55afeef30140]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55afeeed01a0]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55afeef35080]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55afeee6ad90]:  %46 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55afeef35190]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55afeefb4ea0]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55afeeeb4f00]: block_400490 {
	[0x55afeee69990]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [add_sub] from mcsema/test.opt.ll
Extracting function [add_sub] from mcsema/test.proposed.opt.ll
Matcher Done...
