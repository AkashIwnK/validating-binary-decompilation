Matching sub_4004c0_main Vs main


[Info] Retrieve Potential Matches...
[0x557a026aa148]:   %7 = inttoptr i64 %6 to i64* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a026aa1c0]:   store i64 %3, i64* %7, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aa228]:   %8 = load i64, i64* %PC, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026aa2a0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x557a026c5ab0]:  %call2_4004d9 = tail call %struct.Memory.32* @sub_400490.add_sub(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x557a0270a4a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x557a0274d850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x557a026aa330]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aa3f0]:   %9 = add i64 %5, -24 {
	[0x557a02734540]:  %11 = add i64 %7, -24
	}

[0x557a026aa470]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aa4f0]:   %10 = icmp ult i64 %6, 16 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026aa558]:   %11 = zext i1 %10 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026aa600]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x557a0280aec0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x557a026aa690]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aa6f8]:   %13 = trunc i64 %9 to i32 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026aa770]:   %14 = and i32 %13, 255 {
	[0x557a026c2ff0]:  %16 = and i32 %15, 255
	[0x557a026c63a0]:  %55 = and i32 %54, 255
	}

[0x557a026aa830]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x557a026c5ab0]:  %call2_4004d9 = tail call %struct.Memory.32* @sub_400490.add_sub(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x557a0270a4a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x557a0274d850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x557a026aa8a8]:   %16 = trunc i32 %15 to i8 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026aa920]:   %17 = and i8 %16, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	[0x557a026c4120]:  %26 = and i8 %25, 1
	[0x557a026c6250]:  %58 = and i8 %57, 1
	[0x557a026c72f0]:  %64 = and i8 %63, 1
	}

[0x557a026aa9a0]:   %18 = xor i8 %17, 1 {
	[0x557a026c60f0]:  %59 = xor i8 %58, 1
	[0x557a02735840]:  %20 = xor i8 %19, 1
	}

[0x557a026aaa50]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x557a0274a250]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x557a026aaae0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aab60]:   %20 = xor i64 %6, 16 {
	[0x557a026c7810]:  %60 = xor i64 %49, 16
	[0x557a02735730]:  %22 = xor i64 %8, 16
	}

[0x557a026aabe0]:   %21 = xor i64 %20, %9 {
	[0x557a026c27f0]:  %23 = xor i64 %22, %11
	[0x557a026c4490]:  %35 = xor i64 %31, %34
	[0x557a026c7440]:  %61 = xor i64 %60, %51
	[0x557a026cbbd0]:  %70 = xor i64 %67, %69
	}

[0x557a026aac60]:   %22 = lshr i64 %21, 4 {
	[0x557a026c8b60]:  %62 = lshr i64 %61, 4
	[0x557a02735c80]:  %24 = lshr i64 %23, 4
	}

[0x557a026aacc8]:   %23 = trunc i64 %22 to i8 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026aad40]:   %24 = and i8 %23, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	[0x557a026c4120]:  %26 = and i8 %25, 1
	[0x557a026c6250]:  %58 = and i8 %57, 1
	[0x557a026c72f0]:  %64 = and i8 %63, 1
	}

[0x557a026aadf0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x557a0273e500]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x557a026aae80]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aaf00]:   %26 = icmp eq i64 %9, 0 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026aaf68]:   %27 = zext i1 %26 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026ab010]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x557a026ce280]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x557a026ab0a0]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ab160]:   %29 = lshr i64 %9, 63 {
	[0x557a026c6da0]:  %67 = lshr i64 %51, 63
	[0x557a026cbd30]:  %69 = lshr i64 %49, 63
	[0x557a02734740]:  %34 = lshr i64 %8, 63
	[0x557a02734940]:  %31 = lshr i64 %11, 63
	}

[0x557a026ab1c8]:   %30 = trunc i64 %29 to i8 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026ab270]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x557a026c9320]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x557a026ab300]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ab380]:   %32 = lshr i64 %6, 63 {
	[0x557a026c6da0]:  %67 = lshr i64 %51, 63
	[0x557a026cbd30]:  %69 = lshr i64 %49, 63
	[0x557a02734740]:  %34 = lshr i64 %8, 63
	[0x557a02734940]:  %31 = lshr i64 %11, 63
	}

[0x557a026ab400]:   %33 = xor i64 %29, %32 {
	[0x557a026c27f0]:  %23 = xor i64 %22, %11
	[0x557a026c4490]:  %35 = xor i64 %31, %34
	[0x557a026c7440]:  %61 = xor i64 %60, %51
	[0x557a026cbbd0]:  %70 = xor i64 %67, %69
	}

[0x557a026ab480]:   %34 = add nuw nsw i64 %33, %32 {
	[0x557a026cba70]:  %71 = add nuw nsw i64 %70, %67
	[0x557a02736720]:  %36 = add nuw nsw i64 %35, %34
	}

[0x557a026ab500]:   %35 = icmp eq i64 %34, 2 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026ab568]:   %36 = zext i1 %35 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026ab610]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x557a026c5d20]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x557a026ab6a0]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ab720]:   store i64 10, i64* %RDI, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ab7e0]:   store i64 20, i64* %RSI, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ab860]:   %38 = add i64 %5, -12 {
	[0x557a026c49c0]:  %40 = add i64 %7, -12
	}

[0x557a026ab920]:   %39 = add i64 %8, 24 {
	[0x557a026cbf10]:  %75 = add i64 %49, 24
	[0x557a027362e0]:  %41 = add i64 %10, 24
	}

[0x557a026ab9a0]:   store i64 %39, i64* %PC, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aba08]:   %40 = inttoptr i64 %38 to i32* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a026aba80]:   store i32 0, i32* %40, align 4 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026abae8]:   %41 = load i64, i64* %PC, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026abba0]:   %42 = add i64 %41, -73 {
	[0x557a026c54a0]:  %44 = add i64 %43, -73
	}

[0x557a026abc20]:   %43 = add i64 %41, 5 {
	[0x557a026c5340]:  %45 = add i64 %43, 5
	[0x557a026c96a0]:  %74 = add i64 %50, 5
	}

[0x557a026abc88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026abd00]:   %45 = add i64 %44, -8 {
	[0x557a026c0f90]:  %8 = add i64 %7, -8
	[0x557a02736a50]:  %47 = add i64 %46, -8
	}

[0x557a026abd68]:   %46 = inttoptr i64 %45 to i64* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a026abde0]:   store i64 %43, i64* %46, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026abe60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026abee0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026abfe0]:   %47 = tail call %struct.Memory* @sub_400490_add_sub(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x557a026c5ab0]:  %call2_4004d9 = tail call %struct.Memory.32* @sub_400490.add_sub(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x557a0270a4a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x557a0274d850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x557a026ac058]:   %48 = load i64, i64* %RSP, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026ac0b8]:   %49 = load i64, i64* %PC, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026ac130]:   %50 = add i64 %48, 16 {
	[0x557a02736870]:  %51 = add i64 %49, 16
	}

[0x557a026ac1b0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ac270]:   %51 = icmp ugt i64 %48, -17 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026ac2d8]:   %52 = zext i1 %51 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026ac350]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ac3b8]:   %53 = trunc i64 %50 to i32 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026ac430]:   %54 = and i32 %53, 255 {
	[0x557a026c2ff0]:  %16 = and i32 %15, 255
	[0x557a026c63a0]:  %55 = and i32 %54, 255
	}

[0x557a026ac4e8]:   %56 = trunc i32 %55 to i8 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026ac560]:   %57 = and i8 %56, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	[0x557a026c4120]:  %26 = and i8 %25, 1
	[0x557a026c6250]:  %58 = and i8 %57, 1
	[0x557a026c72f0]:  %64 = and i8 %63, 1
	}

[0x557a026ac5e0]:   %58 = xor i8 %57, 1 {
	[0x557a026c60f0]:  %59 = xor i8 %58, 1
	[0x557a02735840]:  %20 = xor i8 %19, 1
	}

[0x557a026ac660]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ac6e0]:   %59 = xor i64 %48, 16 {
	[0x557a026c7810]:  %60 = xor i64 %49, 16
	[0x557a02735730]:  %22 = xor i64 %8, 16
	}

[0x557a026ac760]:   %60 = xor i64 %59, %50 {
	[0x557a026c27f0]:  %23 = xor i64 %22, %11
	[0x557a026c4490]:  %35 = xor i64 %31, %34
	[0x557a026c7440]:  %61 = xor i64 %60, %51
	[0x557a026cbbd0]:  %70 = xor i64 %67, %69
	}

[0x557a026ac7e0]:   %61 = lshr i64 %60, 4 {
	[0x557a026c8b60]:  %62 = lshr i64 %61, 4
	[0x557a02735c80]:  %24 = lshr i64 %23, 4
	}

[0x557a026ac848]:   %62 = trunc i64 %61 to i8 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026ac8c0]:   %63 = and i8 %62, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	[0x557a026c4120]:  %26 = and i8 %25, 1
	[0x557a026c6250]:  %58 = and i8 %57, 1
	[0x557a026c72f0]:  %64 = and i8 %63, 1
	}

[0x557a026ac940]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ac9c0]:   %64 = icmp eq i64 %50, 0 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026ace38]:   %65 = zext i1 %64 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026aceb0]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026acf30]:   %66 = lshr i64 %50, 63 {
	[0x557a026c6da0]:  %67 = lshr i64 %51, 63
	[0x557a026cbd30]:  %69 = lshr i64 %49, 63
	[0x557a02734740]:  %34 = lshr i64 %8, 63
	[0x557a02734940]:  %31 = lshr i64 %11, 63
	}

[0x557a026acf98]:   %67 = trunc i64 %66 to i8 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026ad010]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ad090]:   %68 = lshr i64 %48, 63 {
	[0x557a026c6da0]:  %67 = lshr i64 %51, 63
	[0x557a026cbd30]:  %69 = lshr i64 %49, 63
	[0x557a02734740]:  %34 = lshr i64 %8, 63
	[0x557a02734940]:  %31 = lshr i64 %11, 63
	}

[0x557a026ad110]:   %69 = xor i64 %66, %68 {
	[0x557a026c27f0]:  %23 = xor i64 %22, %11
	[0x557a026c4490]:  %35 = xor i64 %31, %34
	[0x557a026c7440]:  %61 = xor i64 %60, %51
	[0x557a026cbbd0]:  %70 = xor i64 %67, %69
	}

[0x557a026ad190]:   %70 = add nuw nsw i64 %69, %66 {
	[0x557a026cba70]:  %71 = add nuw nsw i64 %70, %67
	[0x557a02736720]:  %36 = add nuw nsw i64 %35, %34
	}

[0x557a026ad210]:   %71 = icmp eq i64 %70, 2 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026ad278]:   %72 = zext i1 %71 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026ad2f0]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ad370]:   %73 = add i64 %49, 5 {
	[0x557a026c5340]:  %45 = add i64 %43, 5
	[0x557a026c96a0]:  %74 = add i64 %50, 5
	}

[0x557a026ad3f0]:   store i64 %73, i64* %PC, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026ad470]:   %74 = add i64 %48, 24 {
	[0x557a026cbf10]:  %75 = add i64 %49, 24
	[0x557a027362e0]:  %41 = add i64 %10, 24
	}

[0x557a026ad4d8]:   %75 = inttoptr i64 %50 to i64* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a026ad538]:   %76 = load i64, i64* %75, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026ad5b0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026f9170]: %struct.State* %0 {
	[0x557a026c2f40]:%struct.State.1* %0
	}

[0x557a026f91b0]: i64 %1 {
	[0x557a02734b40]:i64 %1
	}

[0x557a026f91f0]: %struct.Memory* %2 {
	[0x557a026c4e80]:%struct.Memory.32* %2
	}

[0x557a026f93a8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026f9480]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x557a02722560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x557a026f9570]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x557a02725fd0]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x557a026f9660]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x557a02726330]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x557a026f9770]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x557a02726520]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x557a026f9880]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x557a027266f0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x557a026f9930]:   %4 = add i64 %1, 1 {
	[0x557a026c0d60]:  %5 = add i64 %1, 1
	}

[0x557a026f9a00]:   store i64 %4, i64* %PC, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026f9a68]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026f9ae0]:   %6 = add i64 %5, -8 {
	[0x557a026c0f90]:  %8 = add i64 %7, -8
	[0x557a02736a50]:  %47 = add i64 %46, -8
	}

[0x557a02757d10]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a02757d90]:   %77 = add i64 %49, 6 {
	[0x557a026c3920]:  %78 = add i64 %50, 6
	}

[0x557a02757e10]:   store i64 %77, i64* %PC, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a02757e78]:   %78 = inttoptr i64 %74 to i64* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a02757ed8]:   %79 = load i64, i64* %78, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a02757f50]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a02757fd0]:   %80 = add i64 %48, 32 {
	[0x557a026cc320]:  %81 = add i64 %49, 32
	}

[0x557a02758050]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a027580b8]:   ret %struct.Memory* %47 {
	[0x557a02739608]:  ret %struct.Memory.32* %call2_4004d9
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x557a02732738]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x557a026f9a68]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x557a026ab860]:   %38 = add i64 %5, -12


Uprime Matches: [0x557a026c49c0]:   %40 = add i64 %7, -12


Adj: [0x557a026c6730]:   %52 = icmp ugt i64 %49, -17
[0x557a026c7810]:   %60 = xor i64 %49, 16
[0x557a026cbd30]:   %69 = lshr i64 %49, 63
[0x557a026cbf10]:   %75 = add i64 %49, 24
[0x557a026cc320]:   %81 = add i64 %49, 32
[0x557a02736870]:   %51 = add i64 %49, 16


Removing: [0x557a02733f08]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x557a026f9a68]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x557a026ab860]:   %38 = add i64 %5, -12


Uprime Matches: [0x557a026c49c0]:   %40 = add i64 %7, -12


Adj: [0x557a02736a50]:   %47 = add i64 %46, -8


Removing: [0x557a02732a08]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x557a026aa228]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x557a026ab920]:   %39 = add i64 %8, 24


Uprime Matches: [0x557a026cbf10]:   %75 = add i64 %49, 24
[0x557a027362e0]:   %41 = add i64 %10, 24


Adj: [0x557a026c3920]:   %78 = add i64 %50, 6
[0x557a026c96a0]:   %74 = add i64 %50, 5


Removing: [0x557a027498c8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x557a026aa228]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x557a026ab920]:   %39 = add i64 %8, 24


Uprime Matches: [0x557a026cbf10]:   %75 = add i64 %49, 24
[0x557a027362e0]:   %41 = add i64 %10, 24


Adj: [0x557a026c5340]:   %45 = add i64 %43, 5
[0x557a026c54a0]:   %44 = add i64 %43, -73


Removing: [0x557a026e4628]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c2ff0]:   %16 = and i32 %15, 255


Removing: [0x557a026e8d88]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c3270]:   store i8 %32, i8* %33, align 1


Removing: [0x557a02734bd8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c63a0]:   %55 = and i32 %54, 255


Removing: [0x557a02737728]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c8ee0]:   store i8 %68, i8* %33, align 1


Removing: [0x557a026c4120]:   %26 = and i8 %25, 1
From the pot matches of: [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime : [0x557a026aa9a0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x557a026c60f0]:   %59 = xor i8 %58, 1
[0x557a02735840]:   %20 = xor i8 %19, 1


Adj: [0x557a027360c0]:   store i8 %26, i8* %27, align 1


Removing: [0x557a026c72f0]:   %64 = and i8 %63, 1
From the pot matches of: [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime : [0x557a026aa9a0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x557a026c60f0]:   %59 = xor i8 %58, 1
[0x557a02735840]:   %20 = xor i8 %19, 1


Adj: [0x557a026c8910]:   store i8 %64, i8* %27, align 1


Removing: [0x557a0276a3f8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x557a026abae8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x557a026abc20]:   %43 = add i64 %41, 5


Uprime Matches: [0x557a026c5340]:   %45 = add i64 %43, 5
[0x557a026c96a0]:   %74 = add i64 %50, 5


Adj: [0x557a027362e0]:   %41 = add i64 %10, 24


Removing: [0x557a02732a08]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x557a026abae8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x557a026abba0]:   %42 = add i64 %41, -73


Uprime Matches: [0x557a026c54a0]:   %44 = add i64 %43, -73


Adj: [0x557a026c3920]:   %78 = add i64 %50, 6
[0x557a026c96a0]:   %74 = add i64 %50, 5


Removing: [0x557a02732738]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x557a026abc88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x557a026abd00]:   %45 = add i64 %44, -8


Uprime Matches: [0x557a026c0f90]:   %8 = add i64 %7, -8
[0x557a02736a50]:   %47 = add i64 %46, -8


Adj: [0x557a026c6730]:   %52 = icmp ugt i64 %49, -17
[0x557a026c7810]:   %60 = xor i64 %49, 16
[0x557a026cbd30]:   %69 = lshr i64 %49, 63
[0x557a026cbf10]:   %75 = add i64 %49, 24
[0x557a026cc320]:   %81 = add i64 %49, 32
[0x557a02736870]:   %51 = add i64 %49, 16


Removing: [0x557a026c0f90]:   %8 = add i64 %7, -8
From the pot matches of: [0x557a026abd00]:   %45 = add i64 %44, -8


Uprime : [0x557a026abe60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x557a026c3a70]:   store i64 %75, i64* %6, align 8
[0x557a026c6930]:   store i64 %51, i64* %6, align 8
[0x557a026cc060]:   store i64 %81, i64* %6, align 8
[0x557a02732b00]:   store i64 %11, i64* %6, align 8
[0x557a02736940]:   store i64 %47, i64* %6, align 8


Adj: [0x557a026a9ff8]:   %9 = inttoptr i64 %8 to i64*
[0x557a026c1320]:   %12 = icmp ult i64 %8, 16
[0x557a02734740]:   %34 = lshr i64 %8, 63
[0x557a02735730]:   %22 = xor i64 %8, 16
[0x557a0274a850]:   store i64 %8, i64* %RBP.i, align 8


Removing: [0x557a02723668]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x557a026ac058]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x557a02757fd0]:   %80 = add i64 %48, 32


Uprime Matches: [0x557a026cc320]:   %81 = add i64 %49, 32


Adj: [0x557a026c0f90]:   %8 = add i64 %7, -8
[0x557a026c49c0]:   %40 = add i64 %7, -12
[0x557a02734540]:   %11 = add i64 %7, -24


Removing: [0x557a02733f08]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x557a026ac058]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x557a02757fd0]:   %80 = add i64 %48, 32


Uprime Matches: [0x557a026cc320]:   %81 = add i64 %49, 32


Adj: [0x557a02736a50]:   %47 = add i64 %46, -8


Removing: [0x557a027498c8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x557a026ac0b8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x557a02757d90]:   %77 = add i64 %49, 6


Uprime Matches: [0x557a026c3920]:   %78 = add i64 %50, 6


Adj: [0x557a026c5340]:   %45 = add i64 %43, 5
[0x557a026c54a0]:   %44 = add i64 %43, -73


Removing: [0x557a0276a3f8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x557a026ac0b8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x557a02757d90]:   %77 = add i64 %49, 6


Uprime Matches: [0x557a026c3920]:   %78 = add i64 %50, 6


Adj: [0x557a027362e0]:   %41 = add i64 %10, 24


Removing: [0x557a026e4628]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c2ff0]:   %16 = and i32 %15, 255


Removing: [0x557a026e8d88]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c3270]:   store i8 %32, i8* %33, align 1


Removing: [0x557a02734bd8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c63a0]:   %55 = and i32 %54, 255


Removing: [0x557a02737728]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c4120]:   %26 = and i8 %25, 1
[0x557a026c6250]:   %58 = and i8 %57, 1
[0x557a026c72f0]:   %64 = and i8 %63, 1


Adj: [0x557a026c8ee0]:   store i8 %68, i8* %33, align 1


Removing: [0x557a026c4120]:   %26 = and i8 %25, 1
From the pot matches of: [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime : [0x557a026ac5e0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x557a026c60f0]:   %59 = xor i8 %58, 1
[0x557a02735840]:   %20 = xor i8 %19, 1


Adj: [0x557a027360c0]:   store i8 %26, i8* %27, align 1


Removing: [0x557a026c72f0]:   %64 = and i8 %63, 1
From the pot matches of: [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime : [0x557a026ac5e0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x557a026c60f0]:   %59 = xor i8 %58, 1
[0x557a02735840]:   %20 = xor i8 %19, 1


Adj: [0x557a026c8910]:   store i8 %64, i8* %27, align 1

Round: 1

Removing: [0x557a02737d18]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c6250]:   %58 = and i8 %57, 1


Adj: [0x557a026c72f0]:   %64 = and i8 %63, 1


Removing: [0x557a0274d698]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c6250]:   %58 = and i8 %57, 1


Adj: [0x557a026c4120]:   %26 = and i8 %25, 1


Removing: [0x557a02723668]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x557a026abc88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x557a026abd00]:   %45 = add i64 %44, -8


Uprime Matches: [0x557a02736a50]:   %47 = add i64 %46, -8


Adj: [0x557a026c0f90]:   %8 = add i64 %7, -8
[0x557a026c49c0]:   %40 = add i64 %7, -12
[0x557a02734540]:   %11 = add i64 %7, -24


Removing: [0x557a02737d18]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c6250]:   %58 = and i8 %57, 1


Adj: [0x557a026c72f0]:   %64 = and i8 %63, 1


Removing: [0x557a0274d698]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1
[0x557a026c6250]:   %58 = and i8 %57, 1


Adj: [0x557a026c4120]:   %26 = and i8 %25, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x557a026aa148]:   %7 = inttoptr i64 %6 to i64* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x557a026aa1c0]:   store i64 %3, i64* %7, align 8 {
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	}

[0x557a026aa228]:   %8 = load i64, i64* %PC, align 8 {
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026aa2a0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x557a0274d850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x557a026aa330]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aa3f0]:   %9 = add i64 %5, -24 {
	[0x557a02734540]:  %11 = add i64 %7, -24
	}

[0x557a026aa470]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	}

[0x557a026aa4f0]:   %10 = icmp ult i64 %6, 16 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	}

[0x557a026aa558]:   %11 = zext i1 %10 to i8 {
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	}

[0x557a026aa600]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x557a0280aec0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x557a026aa690]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	}

[0x557a026aa6f8]:   %13 = trunc i64 %9 to i32 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	}

[0x557a026aa770]:   %14 = and i32 %13, 255 {
	[0x557a026c2ff0]:  %16 = and i32 %15, 255
	}

[0x557a026aa830]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x557a0270a4a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x557a026aa8a8]:   %16 = trunc i32 %15 to i8 {
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	}

[0x557a026aa920]:   %17 = and i8 %16, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	[0x557a026c6250]:  %58 = and i8 %57, 1
	}

[0x557a026aa9a0]:   %18 = xor i8 %17, 1 {
	[0x557a026c60f0]:  %59 = xor i8 %58, 1
	[0x557a02735840]:  %20 = xor i8 %19, 1
	}

[0x557a026aaa50]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x557a0274a250]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x557a026aaae0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	}

[0x557a026aab60]:   %20 = xor i64 %6, 16 {
	[0x557a02735730]:  %22 = xor i64 %8, 16
	}

[0x557a026aabe0]:   %21 = xor i64 %20, %9 {
	[0x557a026c27f0]:  %23 = xor i64 %22, %11
	}

[0x557a026aac60]:   %22 = lshr i64 %21, 4 {
	[0x557a02735c80]:  %24 = lshr i64 %23, 4
	}

[0x557a026aacc8]:   %23 = trunc i64 %22 to i8 {
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026aad40]:   %24 = and i8 %23, 1 {
	[0x557a026c4120]:  %26 = and i8 %25, 1
	}

[0x557a026aadf0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x557a0273e500]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x557a026aae80]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	}

[0x557a026aaf00]:   %26 = icmp eq i64 %9, 0 {
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026aaf68]:   %27 = zext i1 %26 to i8 {
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026ab010]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x557a026ce280]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x557a026ab0a0]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	}

[0x557a026ab160]:   %29 = lshr i64 %9, 63 {
	[0x557a02734940]:  %31 = lshr i64 %11, 63
	}

[0x557a026ab1c8]:   %30 = trunc i64 %29 to i8 {
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	}

[0x557a026ab270]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x557a026c9320]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x557a026ab300]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	}

[0x557a026ab380]:   %32 = lshr i64 %6, 63 {
	[0x557a02734740]:  %34 = lshr i64 %8, 63
	}

[0x557a026ab400]:   %33 = xor i64 %29, %32 {
	[0x557a026c4490]:  %35 = xor i64 %31, %34
	}

[0x557a026ab480]:   %34 = add nuw nsw i64 %33, %32 {
	[0x557a02736720]:  %36 = add nuw nsw i64 %35, %34
	}

[0x557a026ab500]:   %35 = icmp eq i64 %34, 2 {
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	}

[0x557a026ab568]:   %36 = zext i1 %35 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	}

[0x557a026ab610]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x557a026c5d20]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x557a026ab6a0]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	}

[0x557a026ab720]:   store i64 10, i64* %RDI, align 8, !tbaa !1261 {
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	}

[0x557a026ab7e0]:   store i64 20, i64* %RSI, align 8, !tbaa !1261 {
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	}

[0x557a026ab860]:   %38 = add i64 %5, -12 {
	[0x557a026c49c0]:  %40 = add i64 %7, -12
	}

[0x557a026ab920]:   %39 = add i64 %8, 24 {
	[0x557a027362e0]:  %41 = add i64 %10, 24
	}

[0x557a026ab9a0]:   store i64 %39, i64* %PC, align 8 {
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	}

[0x557a026aba08]:   %40 = inttoptr i64 %38 to i32* {
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x557a026aba80]:   store i32 0, i32* %40, align 4 {
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	}

[0x557a026abae8]:   %41 = load i64, i64* %PC, align 8 {
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	}

[0x557a026abba0]:   %42 = add i64 %41, -73 {
	[0x557a026c54a0]:  %44 = add i64 %43, -73
	}

[0x557a026abc20]:   %43 = add i64 %41, 5 {
	[0x557a026c5340]:  %45 = add i64 %43, 5
	}

[0x557a026abc88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	}

[0x557a026abd00]:   %45 = add i64 %44, -8 {
	[0x557a02736a50]:  %47 = add i64 %46, -8
	}

[0x557a026abd68]:   %46 = inttoptr i64 %45 to i64* {
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	}

[0x557a026abde0]:   store i64 %43, i64* %46, align 8 {
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	}

[0x557a026abe60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	}

[0x557a026abee0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	}

[0x557a026abfe0]:   %47 = tail call %struct.Memory* @sub_400490_add_sub(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x557a026c5ab0]:  %call2_4004d9 = tail call %struct.Memory.32* @sub_400490.add_sub(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x557a026ac058]:   %48 = load i64, i64* %RSP, align 8 {
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	}

[0x557a026ac0b8]:   %49 = load i64, i64* %PC, align 8 {
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	}

[0x557a026ac130]:   %50 = add i64 %48, 16 {
	[0x557a02736870]:  %51 = add i64 %49, 16
	}

[0x557a026ac1b0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	}

[0x557a026ac270]:   %51 = icmp ugt i64 %48, -17 {
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	}

[0x557a026ac2d8]:   %52 = zext i1 %51 to i8 {
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	}

[0x557a026ac350]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	}

[0x557a026ac3b8]:   %53 = trunc i64 %50 to i32 {
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	}

[0x557a026ac430]:   %54 = and i32 %53, 255 {
	[0x557a026c63a0]:  %55 = and i32 %54, 255
	}

[0x557a026ac4e8]:   %56 = trunc i32 %55 to i8 {
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	}

[0x557a026ac560]:   %57 = and i8 %56, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	[0x557a026c6250]:  %58 = and i8 %57, 1
	}

[0x557a026ac5e0]:   %58 = xor i8 %57, 1 {
	[0x557a026c60f0]:  %59 = xor i8 %58, 1
	[0x557a02735840]:  %20 = xor i8 %19, 1
	}

[0x557a026ac660]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	}

[0x557a026ac6e0]:   %59 = xor i64 %48, 16 {
	[0x557a026c7810]:  %60 = xor i64 %49, 16
	}

[0x557a026ac760]:   %60 = xor i64 %59, %50 {
	[0x557a026c7440]:  %61 = xor i64 %60, %51
	}

[0x557a026ac7e0]:   %61 = lshr i64 %60, 4 {
	[0x557a026c8b60]:  %62 = lshr i64 %61, 4
	}

[0x557a026ac848]:   %62 = trunc i64 %61 to i8 {
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	}

[0x557a026ac8c0]:   %63 = and i8 %62, 1 {
	[0x557a026c72f0]:  %64 = and i8 %63, 1
	}

[0x557a026ac940]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	}

[0x557a026ac9c0]:   %64 = icmp eq i64 %50, 0 {
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	}

[0x557a026ace38]:   %65 = zext i1 %64 to i8 {
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	}

[0x557a026aceb0]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	}

[0x557a026acf30]:   %66 = lshr i64 %50, 63 {
	[0x557a026c6da0]:  %67 = lshr i64 %51, 63
	}

[0x557a026acf98]:   %67 = trunc i64 %66 to i8 {
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	}

[0x557a026ad010]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	}

[0x557a026ad090]:   %68 = lshr i64 %48, 63 {
	[0x557a026cbd30]:  %69 = lshr i64 %49, 63
	}

[0x557a026ad110]:   %69 = xor i64 %66, %68 {
	[0x557a026cbbd0]:  %70 = xor i64 %67, %69
	}

[0x557a026ad190]:   %70 = add nuw nsw i64 %69, %66 {
	[0x557a026cba70]:  %71 = add nuw nsw i64 %70, %67
	}

[0x557a026ad210]:   %71 = icmp eq i64 %70, 2 {
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	}

[0x557a026ad278]:   %72 = zext i1 %71 to i8 {
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	}

[0x557a026ad2f0]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	}

[0x557a026ad370]:   %73 = add i64 %49, 5 {
	[0x557a026c96a0]:  %74 = add i64 %50, 5
	}

[0x557a026ad3f0]:   store i64 %73, i64* %PC, align 8 {
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	}

[0x557a026ad470]:   %74 = add i64 %48, 24 {
	[0x557a026cbf10]:  %75 = add i64 %49, 24
	}

[0x557a026ad4d8]:   %75 = inttoptr i64 %50 to i64* {
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	}

[0x557a026ad538]:   %76 = load i64, i64* %75, align 8 {
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	}

[0x557a026ad5b0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x557a026f9170]: %struct.State* %0 {
	[0x557a026c2f40]:%struct.State.1* %0
	}

[0x557a026f91b0]: i64 %1 {
	[0x557a02734b40]:i64 %1
	}

[0x557a026f91f0]: %struct.Memory* %2 {
	[0x557a026c4e80]:%struct.Memory.32* %2
	}

[0x557a026f93a8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x557a026f9480]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x557a02722560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x557a026f9570]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x557a02725fd0]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x557a026f9660]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x557a02726330]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x557a026f9770]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x557a02726520]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x557a026f9880]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x557a027266f0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x557a026f9930]:   %4 = add i64 %1, 1 {
	[0x557a026c0d60]:  %5 = add i64 %1, 1
	}

[0x557a026f9a00]:   store i64 %4, i64* %PC, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	}

[0x557a026f9a68]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	}

[0x557a026f9ae0]:   %6 = add i64 %5, -8 {
	[0x557a026c0f90]:  %8 = add i64 %7, -8
	}

[0x557a02757d10]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	}

[0x557a02757d90]:   %77 = add i64 %49, 6 {
	[0x557a026c3920]:  %78 = add i64 %50, 6
	}

[0x557a02757e10]:   store i64 %77, i64* %PC, align 8 {
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	}

[0x557a02757e78]:   %78 = inttoptr i64 %74 to i64* {
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a02757ed8]:   %79 = load i64, i64* %78, align 8 {
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	}

[0x557a02757f50]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	}

[0x557a02757fd0]:   %80 = add i64 %48, 32 {
	[0x557a026cc320]:  %81 = add i64 %49, 32
	}

[0x557a02758050]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	}

[0x557a027580b8]:   ret %struct.Memory* %47 {
	[0x557a02739608]:  ret %struct.Memory.32* %call2_4004d9
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x557a026f9230]: block_4004c0 {
	[0x557a026bf270]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x557a026c60f0]:   %59 = xor i8 %58, 1
From the pot matches of: [0x557a026aa9a0]:   %18 = xor i8 %17, 1


Uprime : [0x557a026aaae0]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x557a026c2940]:   store i8 %20, i8* %21, align 1


Adj: [0x557a026c5fa0]:   store i8 %59, i8* %21, align 1


Removing: [0x557a02735840]:   %20 = xor i8 %19, 1
From the pot matches of: [0x557a026ac5e0]:   %58 = xor i8 %57, 1


Uprime : [0x557a026ac660]:   store i8 %58, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x557a026c5fa0]:   store i8 %59, i8* %21, align 1


Adj: [0x557a026c2940]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x557a026c6250]:   %58 = and i8 %57, 1
From the pot matches of: [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime : [0x557a026aa9a0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x557a02735840]:   %20 = xor i8 %19, 1


Adj: [0x557a026c60f0]:   %59 = xor i8 %58, 1


Removing: [0x557a026c2e90]:   %19 = and i8 %18, 1
From the pot matches of: [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime : [0x557a026ac5e0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x557a026c60f0]:   %59 = xor i8 %58, 1


Adj: [0x557a02735840]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x557a027381d8]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x557a026aa8a8]:   %16 = trunc i32 %15 to i8


Uprime : [0x557a026aa920]:   %17 = and i8 %16, 1


Uprime Matches: [0x557a026c2e90]:   %19 = and i8 %18, 1


Adj: [0x557a026c6250]:   %58 = and i8 %57, 1


Removing: [0x557a026f43f8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x557a026ac4e8]:   %56 = trunc i32 %55 to i8


Uprime : [0x557a026ac560]:   %57 = and i8 %56, 1


Uprime Matches: [0x557a026c6250]:   %58 = and i8 %57, 1


Adj: [0x557a026c2e90]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x557a026aa148]:   %7 = inttoptr i64 %6 to i64* {
	[0x557a026a9ff8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x557a026aa1c0]:   store i64 %3, i64* %7, align 8 {
	[0x557a0274a660]:  store i64 %4, i64* %9, align 8
	}

[0x557a026aa228]:   %8 = load i64, i64* %PC, align 8 {
	[0x557a0276a3f8]:  %10 = load i64, i64* %3, align 8
	}

[0x557a026aa2a0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x557a0274d850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x557a026aa330]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x557a0274a850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x557a026aa3f0]:   %9 = add i64 %5, -24 {
	[0x557a02734540]:  %11 = add i64 %7, -24
	}

[0x557a026aa470]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02732b00]:  store i64 %11, i64* %6, align 8
	}

[0x557a026aa4f0]:   %10 = icmp ult i64 %6, 16 {
	[0x557a026c1320]:  %12 = icmp ult i64 %8, 16
	}

[0x557a026aa558]:   %11 = zext i1 %10 to i8 {
	[0x557a027665d8]:  %13 = zext i1 %12 to i8
	}

[0x557a026aa600]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x557a0280aec0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x557a026aa690]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x557a02735b70]:  store i8 %13, i8* %14, align 1
	}

[0x557a026aa6f8]:   %13 = trunc i64 %9 to i32 {
	[0x557a026e4628]:  %15 = trunc i64 %11 to i32
	}

[0x557a026aa770]:   %14 = and i32 %13, 255 {
	[0x557a026c2ff0]:  %16 = and i32 %15, 255
	}

[0x557a026aa830]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x557a0270a4a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x557a026aa8a8]:   %16 = trunc i32 %15 to i8 {
	[0x557a026f43f8]:  %18 = trunc i32 %17 to i8
	}

[0x557a026aa920]:   %17 = and i8 %16, 1 {
	[0x557a026c2e90]:  %19 = and i8 %18, 1
	}

[0x557a026aa9a0]:   %18 = xor i8 %17, 1 {
	[0x557a02735840]:  %20 = xor i8 %19, 1
	}

[0x557a026aaa50]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x557a0274a250]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x557a026aaae0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x557a026c2940]:  store i8 %20, i8* %21, align 1
	}

[0x557a026aab60]:   %20 = xor i64 %6, 16 {
	[0x557a02735730]:  %22 = xor i64 %8, 16
	}

[0x557a026aabe0]:   %21 = xor i64 %20, %9 {
	[0x557a026c27f0]:  %23 = xor i64 %22, %11
	}

[0x557a026aac60]:   %22 = lshr i64 %21, 4 {
	[0x557a02735c80]:  %24 = lshr i64 %23, 4
	}

[0x557a026aacc8]:   %23 = trunc i64 %22 to i8 {
	[0x557a0274d698]:  %25 = trunc i64 %24 to i8
	}

[0x557a026aad40]:   %24 = and i8 %23, 1 {
	[0x557a026c4120]:  %26 = and i8 %25, 1
	}

[0x557a026aadf0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x557a0273e500]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x557a026aae80]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x557a027360c0]:  store i8 %26, i8* %27, align 1
	}

[0x557a026aaf00]:   %26 = icmp eq i64 %9, 0 {
	[0x557a02734a90]:  %28 = icmp eq i64 %11, 0
	}

[0x557a026aaf68]:   %27 = zext i1 %26 to i8 {
	[0x557a02800d08]:  %29 = zext i1 %28 to i8
	}

[0x557a026ab010]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x557a026ce280]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x557a026ab0a0]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x557a02735ea0]:  store i8 %29, i8* %30, align 1
	}

[0x557a026ab160]:   %29 = lshr i64 %9, 63 {
	[0x557a02734940]:  %31 = lshr i64 %11, 63
	}

[0x557a026ab1c8]:   %30 = trunc i64 %29 to i8 {
	[0x557a026e8d88]:  %32 = trunc i64 %31 to i8
	}

[0x557a026ab270]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x557a026c9320]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x557a026ab300]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x557a026c3270]:  store i8 %32, i8* %33, align 1
	}

[0x557a026ab380]:   %32 = lshr i64 %6, 63 {
	[0x557a02734740]:  %34 = lshr i64 %8, 63
	}

[0x557a026ab400]:   %33 = xor i64 %29, %32 {
	[0x557a026c4490]:  %35 = xor i64 %31, %34
	}

[0x557a026ab480]:   %34 = add nuw nsw i64 %33, %32 {
	[0x557a02736720]:  %36 = add nuw nsw i64 %35, %34
	}

[0x557a026ab500]:   %35 = icmp eq i64 %34, 2 {
	[0x557a026c4c80]:  %37 = icmp eq i64 %36, 2
	}

[0x557a026ab568]:   %36 = zext i1 %35 to i8 {
	[0x557a02730558]:  %38 = zext i1 %37 to i8
	}

[0x557a026ab610]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x557a026c5d20]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x557a026ab6a0]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x557a02736610]:  store i8 %38, i8* %39, align 1
	}

[0x557a026ab720]:   store i64 10, i64* %RDI, align 8, !tbaa !1261 {
	[0x557a02736500]:  store i64 10, i64* %RDI.i, align 8
	}

[0x557a026ab7e0]:   store i64 20, i64* %RSI, align 8, !tbaa !1261 {
	[0x557a026c4b20]:  store i64 20, i64* %RSI.i, align 8
	}

[0x557a026ab860]:   %38 = add i64 %5, -12 {
	[0x557a026c49c0]:  %40 = add i64 %7, -12
	}

[0x557a026ab920]:   %39 = add i64 %8, 24 {
	[0x557a027362e0]:  %41 = add i64 %10, 24
	}

[0x557a026ab9a0]:   store i64 %39, i64* %PC, align 8 {
	[0x557a026c4dd0]:  store i64 %41, i64* %3, align 8
	}

[0x557a026aba08]:   %40 = inttoptr i64 %38 to i32* {
	[0x557a026c30f8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x557a026aba80]:   store i32 0, i32* %40, align 4 {
	[0x557a026c5640]:  store i32 0, i32* %42, align 4
	}

[0x557a026abae8]:   %41 = load i64, i64* %PC, align 8 {
	[0x557a027498c8]:  %43 = load i64, i64* %3, align 8
	}

[0x557a026abba0]:   %42 = add i64 %41, -73 {
	[0x557a026c54a0]:  %44 = add i64 %43, -73
	}

[0x557a026abc20]:   %43 = add i64 %41, 5 {
	[0x557a026c5340]:  %45 = add i64 %43, 5
	}

[0x557a026abc88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02733f08]:  %46 = load i64, i64* %6, align 8
	}

[0x557a026abd00]:   %45 = add i64 %44, -8 {
	[0x557a02736a50]:  %47 = add i64 %46, -8
	}

[0x557a026abd68]:   %46 = inttoptr i64 %45 to i64* {
	[0x557a02733af8]:  %48 = inttoptr i64 %47 to i64*
	}

[0x557a026abde0]:   store i64 %43, i64* %46, align 8 {
	[0x557a026c5080]:  store i64 %45, i64* %48, align 8
	}

[0x557a026abe60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02736940]:  store i64 %47, i64* %6, align 8
	}

[0x557a026abee0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x557a026c4f30]:  store i64 %44, i64* %3, align 8
	}

[0x557a026abfe0]:   %47 = tail call %struct.Memory* @sub_400490_add_sub(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x557a026c5ab0]:  %call2_4004d9 = tail call %struct.Memory.32* @sub_400490.add_sub(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x557a026ac058]:   %48 = load i64, i64* %RSP, align 8 {
	[0x557a02732738]:  %49 = load i64, i64* %6, align 8
	}

[0x557a026ac0b8]:   %49 = load i64, i64* %PC, align 8 {
	[0x557a02732a08]:  %50 = load i64, i64* %3, align 8
	}

[0x557a026ac130]:   %50 = add i64 %48, 16 {
	[0x557a02736870]:  %51 = add i64 %49, 16
	}

[0x557a026ac1b0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c6930]:  store i64 %51, i64* %6, align 8
	}

[0x557a026ac270]:   %51 = icmp ugt i64 %48, -17 {
	[0x557a026c6730]:  %52 = icmp ugt i64 %49, -17
	}

[0x557a026ac2d8]:   %52 = zext i1 %51 to i8 {
	[0x557a02730988]:  %53 = zext i1 %52 to i8
	}

[0x557a026ac350]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x557a026c6500]:  store i8 %53, i8* %14, align 1
	}

[0x557a026ac3b8]:   %53 = trunc i64 %50 to i32 {
	[0x557a02734bd8]:  %54 = trunc i64 %51 to i32
	}

[0x557a026ac430]:   %54 = and i32 %53, 255 {
	[0x557a026c63a0]:  %55 = and i32 %54, 255
	}

[0x557a026ac4e8]:   %56 = trunc i32 %55 to i8 {
	[0x557a027381d8]:  %57 = trunc i32 %56 to i8
	}

[0x557a026ac560]:   %57 = and i8 %56, 1 {
	[0x557a026c6250]:  %58 = and i8 %57, 1
	}

[0x557a026ac5e0]:   %58 = xor i8 %57, 1 {
	[0x557a026c60f0]:  %59 = xor i8 %58, 1
	}

[0x557a026ac660]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x557a026c5fa0]:  store i8 %59, i8* %21, align 1
	}

[0x557a026ac6e0]:   %59 = xor i64 %48, 16 {
	[0x557a026c7810]:  %60 = xor i64 %49, 16
	}

[0x557a026ac760]:   %60 = xor i64 %59, %50 {
	[0x557a026c7440]:  %61 = xor i64 %60, %51
	}

[0x557a026ac7e0]:   %61 = lshr i64 %60, 4 {
	[0x557a026c8b60]:  %62 = lshr i64 %61, 4
	}

[0x557a026ac848]:   %62 = trunc i64 %61 to i8 {
	[0x557a02737d18]:  %63 = trunc i64 %62 to i8
	}

[0x557a026ac8c0]:   %63 = and i8 %62, 1 {
	[0x557a026c72f0]:  %64 = and i8 %63, 1
	}

[0x557a026ac940]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x557a026c8910]:  store i8 %64, i8* %27, align 1
	}

[0x557a026ac9c0]:   %64 = icmp eq i64 %50, 0 {
	[0x557a026c6fc0]:  %65 = icmp eq i64 %51, 0
	}

[0x557a026ace38]:   %65 = zext i1 %64 to i8 {
	[0x557a02737988]:  %66 = zext i1 %65 to i8
	}

[0x557a026aceb0]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x557a026c6eb0]:  store i8 %66, i8* %30, align 1
	}

[0x557a026acf30]:   %66 = lshr i64 %50, 63 {
	[0x557a026c6da0]:  %67 = lshr i64 %51, 63
	}

[0x557a026acf98]:   %67 = trunc i64 %66 to i8 {
	[0x557a02737728]:  %68 = trunc i64 %67 to i8
	}

[0x557a026ad010]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x557a026c8ee0]:  store i8 %68, i8* %33, align 1
	}

[0x557a026ad090]:   %68 = lshr i64 %48, 63 {
	[0x557a026cbd30]:  %69 = lshr i64 %49, 63
	}

[0x557a026ad110]:   %69 = xor i64 %66, %68 {
	[0x557a026cbbd0]:  %70 = xor i64 %67, %69
	}

[0x557a026ad190]:   %70 = add nuw nsw i64 %69, %66 {
	[0x557a026cba70]:  %71 = add nuw nsw i64 %70, %67
	}

[0x557a026ad210]:   %71 = icmp eq i64 %70, 2 {
	[0x557a026cb910]:  %72 = icmp eq i64 %71, 2
	}

[0x557a026ad278]:   %72 = zext i1 %71 to i8 {
	[0x557a02737048]:  %73 = zext i1 %72 to i8
	}

[0x557a026ad2f0]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x557a026c9e60]:  store i8 %73, i8* %39, align 1
	}

[0x557a026ad370]:   %73 = add i64 %49, 5 {
	[0x557a026c96a0]:  %74 = add i64 %50, 5
	}

[0x557a026ad3f0]:   store i64 %73, i64* %PC, align 8 {
	[0x557a026c7220]:  store i64 %74, i64* %3, align 8
	}

[0x557a026ad470]:   %74 = add i64 %48, 24 {
	[0x557a026cbf10]:  %75 = add i64 %49, 24
	}

[0x557a026ad4d8]:   %75 = inttoptr i64 %50 to i64* {
	[0x557a02736cb8]:  %76 = inttoptr i64 %51 to i64*
	}

[0x557a026ad538]:   %76 = load i64, i64* %75, align 8 {
	[0x557a02736b88]:  %77 = load i64, i64* %76, align 8
	}

[0x557a026ad5b0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x557a026c3b90]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x557a026f9170]: %struct.State* %0 {
	[0x557a026c2f40]:%struct.State.1* %0
	}

[0x557a026f91b0]: i64 %1 {
	[0x557a02734b40]:i64 %1
	}

[0x557a026f91f0]: %struct.Memory* %2 {
	[0x557a026c4e80]:%struct.Memory.32* %2
	}

[0x557a026f93a8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x557a02723498]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x557a026f9480]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x557a02722560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x557a026f9570]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x557a02725fd0]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x557a026f9660]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x557a02726330]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x557a026f9770]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x557a02726520]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x557a026f9880]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x557a027266f0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x557a026f9930]:   %4 = add i64 %1, 1 {
	[0x557a026c0d60]:  %5 = add i64 %1, 1
	}

[0x557a026f9a00]:   store i64 %4, i64* %PC, align 8 {
	[0x557a026c10e0]:  store i64 %5, i64* %3, align 8
	}

[0x557a026f9a68]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a02723668]:  %7 = load i64, i64* %6, align 8
	}

[0x557a026f9ae0]:   %6 = add i64 %5, -8 {
	[0x557a026c0f90]:  %8 = add i64 %7, -8
	}

[0x557a02757d10]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026c3a70]:  store i64 %75, i64* %6, align 8
	}

[0x557a02757d90]:   %77 = add i64 %49, 6 {
	[0x557a026c3920]:  %78 = add i64 %50, 6
	}

[0x557a02757e10]:   store i64 %77, i64* %PC, align 8 {
	[0x557a026c3740]:  store i64 %78, i64* %3, align 8
	}

[0x557a02757e78]:   %78 = inttoptr i64 %74 to i64* {
	[0x557a02738308]:  %79 = inttoptr i64 %75 to i64*
	}

[0x557a02757ed8]:   %79 = load i64, i64* %78, align 8 {
	[0x557a0273a758]:  %80 = load i64, i64* %79, align 8
	}

[0x557a02757f50]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x557a026c3660]:  store i64 %80, i64* %3, align 8
	}

[0x557a02757fd0]:   %80 = add i64 %48, 32 {
	[0x557a026cc320]:  %81 = add i64 %49, 32
	}

[0x557a02758050]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x557a026cc060]:  store i64 %81, i64* %6, align 8
	}

[0x557a027580b8]:   ret %struct.Memory* %47 {
	[0x557a02739608]:  ret %struct.Memory.32* %call2_4004d9
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x557a026f9230]: block_4004c0 {
	[0x557a026bf270]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
