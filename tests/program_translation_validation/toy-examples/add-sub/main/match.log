Matching sub_4004a0_main Vs main


[Info] Retrieve Potential Matches...
[0x55d33f2c44d0]:   %47 = tail call %struct.Memory* @sub_400470_add_sub(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x55d33f2f1c30]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55d33f2fe960]:  %call2_4004b9 = tail call %struct.Memory.31* @sub_400470.add_sub(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x55d33f316480]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x55d33f2c4598]:   %48 = load i64, i64* %RSP, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2c45f8]:   %49 = load i64, i64* %PC, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2c4670]:   %50 = add i64 %48, 16 {
	[0x55d33f3b6de0]:  %51 = add i64 %49, 16
	}

[0x55d33f2c46f0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2c47b0]:   %51 = icmp ugt i64 %48, -17 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2ce840]: %struct.State* %0 {
	[0x55d33f318250]:%struct.State.0* %0
	}

[0x55d33f2ce880]: i64 %1 {
	[0x55d33f31b6c0]:i64 %1
	}

[0x55d33f2ce8c0]: %struct.Memory* %2 {
	[0x55d33f31ea00]:%struct.Memory.31* %2
	}

[0x55d33f2cea48]:   %3 = load i64, i64* %RBP, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2ceb20]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55d33f298c70]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55d33f2cec10]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x55d33f29ac40]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x55d33f2ced00]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55d33f29a4a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55d33f2cee10]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55d33f29a120]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55d33f2cef20]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55d33f299980]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55d33f2cefd0]:   %4 = add i64 %1, 1 {
	[0x55d33f2f33c0]:  %5 = add i64 %1, 1
	}

[0x55d33f2cf0a0]:   store i64 %4, i64* %PC, align 8 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2cf108]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2cf180]:   %6 = add i64 %5, -8 {
	[0x55d33f2f4490]:  %8 = add i64 %7, -8
	[0x55d33f3b42f0]:  %47 = add i64 %46, -8
	}

[0x55d33f2cf1e8]:   %7 = inttoptr i64 %6 to i64* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2cf260]:   store i64 %3, i64* %7, align 8 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2cf2c8]:   %8 = load i64, i64* %PC, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2cf340]:   %17 = and i8 %16, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	[0x55d33f3173c0]:  %64 = and i8 %63, 1
	[0x55d33f317c80]:  %26 = and i8 %25, 1
	}

[0x55d33f2cf3d0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2cf490]:   %9 = add i64 %5, -24 {
	[0x55d33f2f5650]:  %11 = add i64 %7, -24
	}

[0x55d33f2cf510]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2cf590]:   %10 = icmp ult i64 %6, 16 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2cf5f8]:   %11 = zext i1 %10 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2cf6a0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55d33f2f3020]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x55d33f2cf730]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2cf798]:   %13 = trunc i64 %9 to i32 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2cf810]:   %14 = and i32 %13, 255 {
	[0x55d33f314bf0]:  %16 = and i32 %15, 255
	[0x55d33f3c88c0]:  %55 = and i32 %54, 255
	}

[0x55d33f2cf8d0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x55d33f2f1c30]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55d33f2fe960]:  %call2_4004b9 = tail call %struct.Memory.31* @sub_400470.add_sub(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x55d33f316480]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x55d33f2cf948]:   %16 = trunc i32 %15 to i8 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2cf9c0]:   %33 = xor i64 %29, %32 {
	[0x55d33f2f6fd0]:  %23 = xor i64 %22, %11
	[0x55d33f315ef0]:  %35 = xor i64 %31, %34
	[0x55d33f316ef0]:  %61 = xor i64 %60, %51
	[0x55d33f319f90]:  %70 = xor i64 %67, %69
	}

[0x55d33f2cfa40]:   %34 = add nuw nsw i64 %33, %32 {
	[0x55d33f2f9fc0]:  %36 = add nuw nsw i64 %35, %34
	[0x55d33f31b3e0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x55d33f2cfad0]:   %18 = xor i8 %17, 1 {
	[0x55d33f2b1f00]:  %59 = xor i8 %58, 1
	[0x55d33f2f5dc0]:  %20 = xor i8 %19, 1
	}

[0x55d33f2cfb80]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55d33f2f5ce0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x55d33f2cfc10]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2cfc90]:   %20 = xor i64 %6, 16 {
	[0x55d33f25e0e0]:  %60 = xor i64 %49, 16
	[0x55d33f2f6460]:  %22 = xor i64 %8, 16
	}

[0x55d33f2cfd10]:   %21 = xor i64 %20, %9 {
	[0x55d33f2f6fd0]:  %23 = xor i64 %22, %11
	[0x55d33f315ef0]:  %35 = xor i64 %31, %34
	[0x55d33f316ef0]:  %61 = xor i64 %60, %51
	[0x55d33f319f90]:  %70 = xor i64 %67, %69
	}

[0x55d33f2cfd90]:   %22 = lshr i64 %21, 4 {
	[0x55d33f2f4860]:  %24 = lshr i64 %23, 4
	[0x55d33f3172c0]:  %62 = lshr i64 %61, 4
	}

[0x55d33f2cfdf8]:   %23 = trunc i64 %22 to i8 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2cfe70]:   %24 = and i8 %23, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	[0x55d33f3173c0]:  %64 = and i8 %63, 1
	[0x55d33f317c80]:  %26 = and i8 %25, 1
	}

[0x55d33f2cff20]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55d33f2f7570]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x55d33f2cffb0]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0030]:   %26 = icmp eq i64 %9, 0 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2d0098]:   %27 = zext i1 %26 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d0140]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55d33f2fe370]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x55d33f2d01d0]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0250]:   %29 = lshr i64 %9, 63 {
	[0x55d33f315ff0]:  %34 = lshr i64 %8, 63
	[0x55d33f318700]:  %67 = lshr i64 %51, 63
	[0x55d33f31ae60]:  %69 = lshr i64 %49, 63
	[0x55d33f31b8a0]:  %31 = lshr i64 %11, 63
	}

[0x55d33f2d02b8]:   %30 = trunc i64 %29 to i8 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d0360]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55d33f2fe5d0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x55d33f2d03f0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0470]:   %32 = lshr i64 %6, 63 {
	[0x55d33f315ff0]:  %34 = lshr i64 %8, 63
	[0x55d33f318700]:  %67 = lshr i64 %51, 63
	[0x55d33f31ae60]:  %69 = lshr i64 %49, 63
	[0x55d33f31b8a0]:  %31 = lshr i64 %11, 63
	}

[0x55d33f2d04d8]:   %65 = zext i1 %64 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d0550]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d05d0]:   %66 = lshr i64 %50, 63 {
	[0x55d33f315ff0]:  %34 = lshr i64 %8, 63
	[0x55d33f318700]:  %67 = lshr i64 %51, 63
	[0x55d33f31ae60]:  %69 = lshr i64 %49, 63
	[0x55d33f31b8a0]:  %31 = lshr i64 %11, 63
	}

[0x55d33f2d0638]:   %67 = trunc i64 %66 to i8 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d0700]:   %35 = icmp eq i64 %34, 2 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2d0768]:   %36 = zext i1 %35 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d0810]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55d33f2fe700]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x55d33f2d08a0]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0920]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d09e0]:   store i64 20, i64* %RSI, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0a60]:   %38 = add i64 %5, -12 {
	[0x55d33f3349e0]:  %40 = add i64 %7, -12
	}

[0x55d33f2d0b20]:   %39 = add i64 %8, 24 {
	[0x55d33f31e050]:  %75 = add i64 %49, 24
	[0x55d33f3368f0]:  %41 = add i64 %10, 24
	}

[0x55d33f2d0ba0]:   store i64 %39, i64* %PC, align 8 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0c08]:   %40 = inttoptr i64 %38 to i32* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2d0c80]:   store i32 0, i32* %40, align 4 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d0ce8]:   %41 = load i64, i64* %PC, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2d0da0]:   %42 = add i64 %41, -73 {
	[0x55d33f3aedb0]:  %44 = add i64 %43, -73
	}

[0x55d33f2d0e20]:   %43 = add i64 %41, 5 {
	[0x55d33f30a150]:  %74 = add i64 %50, 5
	[0x55d33f3ad8a0]:  %45 = add i64 %43, 5
	}

[0x55d33f2d0e88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2d0f00]:   %45 = add i64 %44, -8 {
	[0x55d33f2f4490]:  %8 = add i64 %7, -8
	[0x55d33f3b42f0]:  %47 = add i64 %46, -8
	}

[0x55d33f2d0f68]:   %46 = inttoptr i64 %45 to i64* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2d0fe0]:   store i64 %43, i64* %46, align 8 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d1060]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d10e0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d1968]:   %52 = zext i1 %51 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d19e0]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d1a48]:   %53 = trunc i64 %50 to i32 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d1ac0]:   %54 = and i32 %53, 255 {
	[0x55d33f314bf0]:  %16 = and i32 %15, 255
	[0x55d33f3c88c0]:  %55 = and i32 %54, 255
	}

[0x55d33f2d1b40]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x55d33f2f1c30]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55d33f2fe960]:  %call2_4004b9 = tail call %struct.Memory.31* @sub_400470.add_sub(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x55d33f316480]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d1c80]:   %57 = and i8 %56, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	[0x55d33f3173c0]:  %64 = and i8 %63, 1
	[0x55d33f317c80]:  %26 = and i8 %25, 1
	}

[0x55d33f2d1d00]:   %58 = xor i8 %57, 1 {
	[0x55d33f2b1f00]:  %59 = xor i8 %58, 1
	[0x55d33f2f5dc0]:  %20 = xor i8 %19, 1
	}

[0x55d33f2d1d80]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d1e00]:   %59 = xor i64 %48, 16 {
	[0x55d33f25e0e0]:  %60 = xor i64 %49, 16
	[0x55d33f2f6460]:  %22 = xor i64 %8, 16
	}

[0x55d33f2d1e80]:   %60 = xor i64 %59, %50 {
	[0x55d33f2f6fd0]:  %23 = xor i64 %22, %11
	[0x55d33f315ef0]:  %35 = xor i64 %31, %34
	[0x55d33f316ef0]:  %61 = xor i64 %60, %51
	[0x55d33f319f90]:  %70 = xor i64 %67, %69
	}

[0x55d33f2d1f00]:   %61 = lshr i64 %60, 4 {
	[0x55d33f2f4860]:  %24 = lshr i64 %23, 4
	[0x55d33f3172c0]:  %62 = lshr i64 %61, 4
	}

[0x55d33f2d1f68]:   %62 = trunc i64 %61 to i8 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d1fe0]:   %63 = and i8 %62, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	[0x55d33f3173c0]:  %64 = and i8 %63, 1
	[0x55d33f317c80]:  %26 = and i8 %25, 1
	}

[0x55d33f2d2060]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d20e0]:   %64 = icmp eq i64 %50, 0 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2d2570]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d25f0]:   %68 = lshr i64 %48, 63 {
	[0x55d33f315ff0]:  %34 = lshr i64 %8, 63
	[0x55d33f318700]:  %67 = lshr i64 %51, 63
	[0x55d33f31ae60]:  %69 = lshr i64 %49, 63
	[0x55d33f31b8a0]:  %31 = lshr i64 %11, 63
	}

[0x55d33f2d2670]:   %69 = xor i64 %66, %68 {
	[0x55d33f2f6fd0]:  %23 = xor i64 %22, %11
	[0x55d33f315ef0]:  %35 = xor i64 %31, %34
	[0x55d33f316ef0]:  %61 = xor i64 %60, %51
	[0x55d33f319f90]:  %70 = xor i64 %67, %69
	}

[0x55d33f2d26f0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x55d33f2f9fc0]:  %36 = add nuw nsw i64 %35, %34
	[0x55d33f31b3e0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x55d33f2d2770]:   %71 = icmp eq i64 %70, 2 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2d27d8]:   %72 = zext i1 %71 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d2850]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d28d0]:   %73 = add i64 %49, 5 {
	[0x55d33f30a150]:  %74 = add i64 %50, 5
	[0x55d33f3ad8a0]:  %45 = add i64 %43, 5
	}

[0x55d33f2d2950]:   store i64 %73, i64* %PC, align 8 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d29d0]:   %74 = add i64 %48, 24 {
	[0x55d33f31e050]:  %75 = add i64 %49, 24
	[0x55d33f3368f0]:  %41 = add i64 %10, 24
	}

[0x55d33f2d2a38]:   %75 = inttoptr i64 %50 to i64* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2d2a98]:   %76 = load i64, i64* %75, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2d2b10]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d2b90]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d2c10]:   %77 = add i64 %49, 6 {
	[0x55d33f31eca0]:  %78 = add i64 %50, 6
	}

[0x55d33f2d2c90]:   store i64 %77, i64* %PC, align 8 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d2cf8]:   %78 = inttoptr i64 %74 to i64* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2d2d58]:   %79 = load i64, i64* %78, align 8 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2d2dd0]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d2e50]:   %80 = add i64 %48, 32 {
	[0x55d33f315950]:  %81 = add i64 %49, 32
	}

[0x55d33f2d2ed0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2d2f38]:   ret %struct.Memory* %47 {
	[0x55d33f2fdc68]:  ret %struct.Memory.31* %call2_4004b9
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55d33f2f9648]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x55d33f2cf108]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x55d33f2d0a60]:   %38 = add i64 %5, -12


Uprime Matches: [0x55d33f3349e0]:   %40 = add i64 %7, -12


Adj: [0x55d33f3b42f0]:   %47 = add i64 %46, -8


Removing: [0x55d33f2fa5c8]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x55d33f2cf108]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x55d33f2d0a60]:   %38 = add i64 %5, -12


Uprime Matches: [0x55d33f3349e0]:   %40 = add i64 %7, -12


Adj: [0x55d33f25e0e0]:   %60 = xor i64 %49, 16
[0x55d33f315950]:   %81 = add i64 %49, 32
[0x55d33f31ae60]:   %69 = lshr i64 %49, 63
[0x55d33f31e050]:   %75 = add i64 %49, 24
[0x55d33f3b6de0]:   %51 = add i64 %49, 16
[0x55d33f3be180]:   %52 = icmp ugt i64 %49, -17


Removing: [0x55d33f2f9518]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x55d33f2cf2c8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x55d33f2d0b20]:   %39 = add i64 %8, 24


Uprime Matches: [0x55d33f31e050]:   %75 = add i64 %49, 24
[0x55d33f3368f0]:   %41 = add i64 %10, 24


Adj: [0x55d33f3ad8a0]:   %45 = add i64 %43, 5
[0x55d33f3aedb0]:   %44 = add i64 %43, -73


Removing: [0x55d33f2fa6f8]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x55d33f2cf2c8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x55d33f2d0b20]:   %39 = add i64 %8, 24


Uprime Matches: [0x55d33f31e050]:   %75 = add i64 %49, 24
[0x55d33f3368f0]:   %41 = add i64 %10, 24


Adj: [0x55d33f30a150]:   %74 = add i64 %50, 5
[0x55d33f31eca0]:   %78 = add i64 %50, 6


Removing: [0x55d33f2f7328]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f314bf0]:   %16 = and i32 %15, 255


Removing: [0x55d33f2f8938]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f31cab0]:   store i8 %32, i8* %33, align 1


Removing: [0x55d33f2fb1a8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f3c88c0]:   %55 = and i32 %54, 255


Removing: [0x55d33f2fbfe8]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f31a530]:   store i8 %68, i8* %33, align 1


Removing: [0x55d33f3173c0]:   %64 = and i8 %63, 1
From the pot matches of: [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime : [0x55d33f2cfad0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1
[0x55d33f2f5dc0]:   %20 = xor i8 %19, 1


Adj: [0x55d33f3177b0]:   store i8 %64, i8* %27, align 1


Removing: [0x55d33f317c80]:   %26 = and i8 %25, 1
From the pot matches of: [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime : [0x55d33f2cfad0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1
[0x55d33f2f5dc0]:   %20 = xor i8 %19, 1


Adj: [0x55d33f318510]:   store i8 %26, i8* %27, align 1


Removing: [0x55d33f2f2968]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d33f2d0ce8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x55d33f2d0e20]:   %43 = add i64 %41, 5


Uprime Matches: [0x55d33f30a150]:   %74 = add i64 %50, 5
[0x55d33f3ad8a0]:   %45 = add i64 %43, 5


Adj: [0x55d33f3368f0]:   %41 = add i64 %10, 24


Removing: [0x55d33f2fa6f8]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x55d33f2d0ce8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x55d33f2d0da0]:   %42 = add i64 %41, -73


Uprime Matches: [0x55d33f3aedb0]:   %44 = add i64 %43, -73


Adj: [0x55d33f30a150]:   %74 = add i64 %50, 5
[0x55d33f31eca0]:   %78 = add i64 %50, 6


Removing: [0x55d33f2fa5c8]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x55d33f2d0e88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x55d33f2d0f00]:   %45 = add i64 %44, -8


Uprime Matches: [0x55d33f2f4490]:   %8 = add i64 %7, -8
[0x55d33f3b42f0]:   %47 = add i64 %46, -8


Adj: [0x55d33f25e0e0]:   %60 = xor i64 %49, 16
[0x55d33f315950]:   %81 = add i64 %49, 32
[0x55d33f31ae60]:   %69 = lshr i64 %49, 63
[0x55d33f31e050]:   %75 = add i64 %49, 24
[0x55d33f3b6de0]:   %51 = add i64 %49, 16
[0x55d33f3be180]:   %52 = icmp ugt i64 %49, -17


Removing: [0x55d33f2f4490]:   %8 = add i64 %7, -8
From the pot matches of: [0x55d33f2d0f00]:   %45 = add i64 %44, -8


Uprime : [0x55d33f2d1060]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x55d33f2f5760]:   store i64 %11, i64* %6, align 8
[0x55d33f318b00]:   store i64 %81, i64* %6, align 8
[0x55d33f31ebb0]:   store i64 %75, i64* %6, align 8
[0x55d33f3b5a90]:   store i64 %47, i64* %6, align 8
[0x55d33f3b9db0]:   store i64 %51, i64* %6, align 8


Adj: [0x55d33f2f0728]:   %9 = inttoptr i64 %8 to i64*
[0x55d33f2f5250]:   store i64 %8, i64* %RBP.i, align 8
[0x55d33f2f5870]:   %12 = icmp ult i64 %8, 16
[0x55d33f2f6460]:   %22 = xor i64 %8, 16
[0x55d33f315ff0]:   %34 = lshr i64 %8, 63


Removing: [0x55d33f2f0698]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55d33f2c4598]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x55d33f2d2e50]:   %80 = add i64 %48, 32


Uprime Matches: [0x55d33f315950]:   %81 = add i64 %49, 32


Adj: [0x55d33f2f4490]:   %8 = add i64 %7, -8
[0x55d33f2f5650]:   %11 = add i64 %7, -24
[0x55d33f3349e0]:   %40 = add i64 %7, -12


Removing: [0x55d33f2f9648]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x55d33f2c4598]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x55d33f2d2e50]:   %80 = add i64 %48, 32


Uprime Matches: [0x55d33f315950]:   %81 = add i64 %49, 32


Adj: [0x55d33f3b42f0]:   %47 = add i64 %46, -8


Removing: [0x55d33f2f2968]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d33f2c45f8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x55d33f2d2c10]:   %77 = add i64 %49, 6


Uprime Matches: [0x55d33f31eca0]:   %78 = add i64 %50, 6


Adj: [0x55d33f3368f0]:   %41 = add i64 %10, 24


Removing: [0x55d33f2f9518]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x55d33f2c45f8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x55d33f2d2c10]:   %77 = add i64 %49, 6


Uprime Matches: [0x55d33f31eca0]:   %78 = add i64 %50, 6


Adj: [0x55d33f3ad8a0]:   %45 = add i64 %43, 5
[0x55d33f3aedb0]:   %44 = add i64 %43, -73


Removing: [0x55d33f2f7328]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f314bf0]:   %16 = and i32 %15, 255


Removing: [0x55d33f2f8938]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f31cab0]:   store i8 %32, i8* %33, align 1


Removing: [0x55d33f2fb1a8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f3c88c0]:   %55 = and i32 %54, 255


Removing: [0x55d33f2fbfe8]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1
[0x55d33f3173c0]:   %64 = and i8 %63, 1
[0x55d33f317c80]:   %26 = and i8 %25, 1


Adj: [0x55d33f31a530]:   store i8 %68, i8* %33, align 1


Removing: [0x55d33f3173c0]:   %64 = and i8 %63, 1
From the pot matches of: [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime : [0x55d33f2d1d00]:   %58 = xor i8 %57, 1


Uprime Matches: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1
[0x55d33f2f5dc0]:   %20 = xor i8 %19, 1


Adj: [0x55d33f3177b0]:   store i8 %64, i8* %27, align 1


Removing: [0x55d33f317c80]:   %26 = and i8 %25, 1
From the pot matches of: [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime : [0x55d33f2d1d00]:   %58 = xor i8 %57, 1


Uprime Matches: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1
[0x55d33f2f5dc0]:   %20 = xor i8 %19, 1


Adj: [0x55d33f318510]:   store i8 %26, i8* %27, align 1

Round: 1

Removing: [0x55d33f2f86d8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1


Adj: [0x55d33f317c80]:   %26 = and i8 %25, 1


Removing: [0x55d33f2fb8c8]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1


Adj: [0x55d33f3173c0]:   %64 = and i8 %63, 1


Removing: [0x55d33f2f0698]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55d33f2d0e88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x55d33f2d0f00]:   %45 = add i64 %44, -8


Uprime Matches: [0x55d33f3b42f0]:   %47 = add i64 %46, -8


Adj: [0x55d33f2f4490]:   %8 = add i64 %7, -8
[0x55d33f2f5650]:   %11 = add i64 %7, -24
[0x55d33f3349e0]:   %40 = add i64 %7, -12


Removing: [0x55d33f2f86d8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1


Adj: [0x55d33f317c80]:   %26 = and i8 %25, 1


Removing: [0x55d33f2fb8c8]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1
[0x55d33f2f5be0]:   %19 = and i8 %18, 1


Adj: [0x55d33f3173c0]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x55d33f2c44d0]:   %47 = tail call %struct.Memory* @sub_400470_add_sub(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x55d33f2fe960]:  %call2_4004b9 = tail call %struct.Memory.31* @sub_400470.add_sub(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x55d33f2c4598]:   %48 = load i64, i64* %RSP, align 8 {
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	}

[0x55d33f2c45f8]:   %49 = load i64, i64* %PC, align 8 {
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	}

[0x55d33f2c4670]:   %50 = add i64 %48, 16 {
	[0x55d33f3b6de0]:  %51 = add i64 %49, 16
	}

[0x55d33f2c46f0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2c47b0]:   %51 = icmp ugt i64 %48, -17 {
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2ce840]: %struct.State* %0 {
	[0x55d33f318250]:%struct.State.0* %0
	}

[0x55d33f2ce880]: i64 %1 {
	[0x55d33f31b6c0]:i64 %1
	}

[0x55d33f2ce8c0]: %struct.Memory* %2 {
	[0x55d33f31ea00]:%struct.Memory.31* %2
	}

[0x55d33f2cea48]:   %3 = load i64, i64* %RBP, align 8 {
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2ceb20]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55d33f298c70]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55d33f2cec10]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x55d33f29ac40]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x55d33f2ced00]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55d33f29a4a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55d33f2cee10]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55d33f29a120]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55d33f2cef20]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55d33f299980]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55d33f2cefd0]:   %4 = add i64 %1, 1 {
	[0x55d33f2f33c0]:  %5 = add i64 %1, 1
	}

[0x55d33f2cf0a0]:   store i64 %4, i64* %PC, align 8 {
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	}

[0x55d33f2cf108]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	}

[0x55d33f2cf180]:   %6 = add i64 %5, -8 {
	[0x55d33f2f4490]:  %8 = add i64 %7, -8
	}

[0x55d33f2cf1e8]:   %7 = inttoptr i64 %6 to i64* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d33f2cf260]:   store i64 %3, i64* %7, align 8 {
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	}

[0x55d33f2cf2c8]:   %8 = load i64, i64* %PC, align 8 {
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	}

[0x55d33f2cf340]:   %17 = and i8 %16, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	}

[0x55d33f2cf3d0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55d33f2cf490]:   %9 = add i64 %5, -24 {
	[0x55d33f2f5650]:  %11 = add i64 %7, -24
	}

[0x55d33f2cf510]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	}

[0x55d33f2cf590]:   %10 = icmp ult i64 %6, 16 {
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	}

[0x55d33f2cf5f8]:   %11 = zext i1 %10 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	}

[0x55d33f2cf6a0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55d33f2f3020]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x55d33f2cf730]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	}

[0x55d33f2cf798]:   %13 = trunc i64 %9 to i32 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	}

[0x55d33f2cf810]:   %14 = and i32 %13, 255 {
	[0x55d33f314bf0]:  %16 = and i32 %15, 255
	}

[0x55d33f2cf8d0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x55d33f2f1c30]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d33f2cf948]:   %16 = trunc i32 %15 to i8 {
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	}

[0x55d33f2cf9c0]:   %33 = xor i64 %29, %32 {
	[0x55d33f315ef0]:  %35 = xor i64 %31, %34
	}

[0x55d33f2cfa40]:   %34 = add nuw nsw i64 %33, %32 {
	[0x55d33f2f9fc0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55d33f2cfad0]:   %18 = xor i8 %17, 1 {
	[0x55d33f2b1f00]:  %59 = xor i8 %58, 1
	[0x55d33f2f5dc0]:  %20 = xor i8 %19, 1
	}

[0x55d33f2cfb80]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55d33f2f5ce0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x55d33f2cfc10]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	}

[0x55d33f2cfc90]:   %20 = xor i64 %6, 16 {
	[0x55d33f2f6460]:  %22 = xor i64 %8, 16
	}

[0x55d33f2cfd10]:   %21 = xor i64 %20, %9 {
	[0x55d33f2f6fd0]:  %23 = xor i64 %22, %11
	}

[0x55d33f2cfd90]:   %22 = lshr i64 %21, 4 {
	[0x55d33f2f4860]:  %24 = lshr i64 %23, 4
	}

[0x55d33f2cfdf8]:   %23 = trunc i64 %22 to i8 {
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	}

[0x55d33f2cfe70]:   %24 = and i8 %23, 1 {
	[0x55d33f317c80]:  %26 = and i8 %25, 1
	}

[0x55d33f2cff20]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55d33f2f7570]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x55d33f2cffb0]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	}

[0x55d33f2d0030]:   %26 = icmp eq i64 %9, 0 {
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	}

[0x55d33f2d0098]:   %27 = zext i1 %26 to i8 {
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	}

[0x55d33f2d0140]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55d33f2fe370]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x55d33f2d01d0]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	}

[0x55d33f2d0250]:   %29 = lshr i64 %9, 63 {
	[0x55d33f31b8a0]:  %31 = lshr i64 %11, 63
	}

[0x55d33f2d02b8]:   %30 = trunc i64 %29 to i8 {
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	}

[0x55d33f2d0360]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55d33f2fe5d0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x55d33f2d03f0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	}

[0x55d33f2d0470]:   %32 = lshr i64 %6, 63 {
	[0x55d33f315ff0]:  %34 = lshr i64 %8, 63
	}

[0x55d33f2d04d8]:   %65 = zext i1 %64 to i8 {
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	}

[0x55d33f2d0550]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	}

[0x55d33f2d05d0]:   %66 = lshr i64 %50, 63 {
	[0x55d33f318700]:  %67 = lshr i64 %51, 63
	}

[0x55d33f2d0638]:   %67 = trunc i64 %66 to i8 {
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d0700]:   %35 = icmp eq i64 %34, 2 {
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	}

[0x55d33f2d0768]:   %36 = zext i1 %35 to i8 {
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	}

[0x55d33f2d0810]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55d33f2fe700]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x55d33f2d08a0]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	}

[0x55d33f2d0920]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	}

[0x55d33f2d09e0]:   store i64 20, i64* %RSI, align 8, !tbaa !1257 {
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	}

[0x55d33f2d0a60]:   %38 = add i64 %5, -12 {
	[0x55d33f3349e0]:  %40 = add i64 %7, -12
	}

[0x55d33f2d0b20]:   %39 = add i64 %8, 24 {
	[0x55d33f3368f0]:  %41 = add i64 %10, 24
	}

[0x55d33f2d0ba0]:   store i64 %39, i64* %PC, align 8 {
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	}

[0x55d33f2d0c08]:   %40 = inttoptr i64 %38 to i32* {
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x55d33f2d0c80]:   store i32 0, i32* %40, align 4 {
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	}

[0x55d33f2d0ce8]:   %41 = load i64, i64* %PC, align 8 {
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	}

[0x55d33f2d0da0]:   %42 = add i64 %41, -73 {
	[0x55d33f3aedb0]:  %44 = add i64 %43, -73
	}

[0x55d33f2d0e20]:   %43 = add i64 %41, 5 {
	[0x55d33f3ad8a0]:  %45 = add i64 %43, 5
	}

[0x55d33f2d0e88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	}

[0x55d33f2d0f00]:   %45 = add i64 %44, -8 {
	[0x55d33f3b42f0]:  %47 = add i64 %46, -8
	}

[0x55d33f2d0f68]:   %46 = inttoptr i64 %45 to i64* {
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	}

[0x55d33f2d0fe0]:   store i64 %43, i64* %46, align 8 {
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	}

[0x55d33f2d1060]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	}

[0x55d33f2d10e0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	}

[0x55d33f2d1968]:   %52 = zext i1 %51 to i8 {
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	}

[0x55d33f2d19e0]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	}

[0x55d33f2d1a48]:   %53 = trunc i64 %50 to i32 {
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	}

[0x55d33f2d1ac0]:   %54 = and i32 %53, 255 {
	[0x55d33f3c88c0]:  %55 = and i32 %54, 255
	}

[0x55d33f2d1b40]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x55d33f316480]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8 {
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	}

[0x55d33f2d1c80]:   %57 = and i8 %56, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	}

[0x55d33f2d1d00]:   %58 = xor i8 %57, 1 {
	[0x55d33f2b1f00]:  %59 = xor i8 %58, 1
	[0x55d33f2f5dc0]:  %20 = xor i8 %19, 1
	}

[0x55d33f2d1d80]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	}

[0x55d33f2d1e00]:   %59 = xor i64 %48, 16 {
	[0x55d33f25e0e0]:  %60 = xor i64 %49, 16
	}

[0x55d33f2d1e80]:   %60 = xor i64 %59, %50 {
	[0x55d33f316ef0]:  %61 = xor i64 %60, %51
	}

[0x55d33f2d1f00]:   %61 = lshr i64 %60, 4 {
	[0x55d33f3172c0]:  %62 = lshr i64 %61, 4
	}

[0x55d33f2d1f68]:   %62 = trunc i64 %61 to i8 {
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	}

[0x55d33f2d1fe0]:   %63 = and i8 %62, 1 {
	[0x55d33f3173c0]:  %64 = and i8 %63, 1
	}

[0x55d33f2d2060]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	}

[0x55d33f2d20e0]:   %64 = icmp eq i64 %50, 0 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	}

[0x55d33f2d2570]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	}

[0x55d33f2d25f0]:   %68 = lshr i64 %48, 63 {
	[0x55d33f31ae60]:  %69 = lshr i64 %49, 63
	}

[0x55d33f2d2670]:   %69 = xor i64 %66, %68 {
	[0x55d33f319f90]:  %70 = xor i64 %67, %69
	}

[0x55d33f2d26f0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x55d33f31b3e0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x55d33f2d2770]:   %71 = icmp eq i64 %70, 2 {
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	}

[0x55d33f2d27d8]:   %72 = zext i1 %71 to i8 {
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d2850]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	}

[0x55d33f2d28d0]:   %73 = add i64 %49, 5 {
	[0x55d33f30a150]:  %74 = add i64 %50, 5
	}

[0x55d33f2d2950]:   store i64 %73, i64* %PC, align 8 {
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	}

[0x55d33f2d29d0]:   %74 = add i64 %48, 24 {
	[0x55d33f31e050]:  %75 = add i64 %49, 24
	}

[0x55d33f2d2a38]:   %75 = inttoptr i64 %50 to i64* {
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	}

[0x55d33f2d2a98]:   %76 = load i64, i64* %75, align 8 {
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x55d33f2d2b10]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x55d33f2d2b90]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	}

[0x55d33f2d2c10]:   %77 = add i64 %49, 6 {
	[0x55d33f31eca0]:  %78 = add i64 %50, 6
	}

[0x55d33f2d2c90]:   store i64 %77, i64* %PC, align 8 {
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	}

[0x55d33f2d2cf8]:   %78 = inttoptr i64 %74 to i64* {
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2d2d58]:   %79 = load i64, i64* %78, align 8 {
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	}

[0x55d33f2d2dd0]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	}

[0x55d33f2d2e50]:   %80 = add i64 %48, 32 {
	[0x55d33f315950]:  %81 = add i64 %49, 32
	}

[0x55d33f2d2ed0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	}

[0x55d33f2d2f38]:   ret %struct.Memory* %47 {
	[0x55d33f2fdc68]:  ret %struct.Memory.31* %call2_4004b9
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55d33f2ce900]: block_4004a0 {
	[0x55d33f313720]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1
From the pot matches of: [0x55d33f2cfad0]:   %18 = xor i8 %17, 1


Uprime : [0x55d33f2cfc10]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x55d33f315470]:   store i8 %20, i8* %21, align 1


Adj: [0x55d33f25a020]:   store i8 %59, i8* %21, align 1


Removing: [0x55d33f2f5dc0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x55d33f2d1d00]:   %58 = xor i8 %57, 1


Uprime : [0x55d33f2d1d80]:   store i8 %58, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x55d33f25a020]:   store i8 %59, i8* %21, align 1


Adj: [0x55d33f315470]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x55d33f2b2360]:   %58 = and i8 %57, 1
From the pot matches of: [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime : [0x55d33f2cfad0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x55d33f2f5dc0]:   %20 = xor i8 %19, 1


Adj: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1


Removing: [0x55d33f2f5be0]:   %19 = and i8 %18, 1
From the pot matches of: [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime : [0x55d33f2d1d00]:   %58 = xor i8 %57, 1


Uprime Matches: [0x55d33f2b1f00]:   %59 = xor i8 %58, 1


Adj: [0x55d33f2f5dc0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x55d33f2fb668]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x55d33f2cf948]:   %16 = trunc i32 %15 to i8


Uprime : [0x55d33f2cf340]:   %17 = and i8 %16, 1


Uprime Matches: [0x55d33f2f5be0]:   %19 = and i8 %18, 1


Adj: [0x55d33f2b2360]:   %58 = and i8 %57, 1


Removing: [0x55d33f2f7e88]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8


Uprime : [0x55d33f2d1c80]:   %57 = and i8 %56, 1


Uprime Matches: [0x55d33f2b2360]:   %58 = and i8 %57, 1


Adj: [0x55d33f2f5be0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x55d33f2c44d0]:   %47 = tail call %struct.Memory* @sub_400470_add_sub(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x55d33f2fe960]:  %call2_4004b9 = tail call %struct.Memory.31* @sub_400470.add_sub(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x55d33f2c4598]:   %48 = load i64, i64* %RSP, align 8 {
	[0x55d33f2fa5c8]:  %49 = load i64, i64* %6, align 8
	}

[0x55d33f2c45f8]:   %49 = load i64, i64* %PC, align 8 {
	[0x55d33f2fa6f8]:  %50 = load i64, i64* %3, align 8
	}

[0x55d33f2c4670]:   %50 = add i64 %48, 16 {
	[0x55d33f3b6de0]:  %51 = add i64 %49, 16
	}

[0x55d33f2c46f0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f3b9db0]:  store i64 %51, i64* %6, align 8
	}

[0x55d33f2c47b0]:   %51 = icmp ugt i64 %48, -17 {
	[0x55d33f3be180]:  %52 = icmp ugt i64 %49, -17
	}

[0x55d33f2ce840]: %struct.State* %0 {
	[0x55d33f318250]:%struct.State.0* %0
	}

[0x55d33f2ce880]: i64 %1 {
	[0x55d33f31b6c0]:i64 %1
	}

[0x55d33f2ce8c0]: %struct.Memory* %2 {
	[0x55d33f31ea00]:%struct.Memory.31* %2
	}

[0x55d33f2cea48]:   %3 = load i64, i64* %RBP, align 8 {
	[0x55d33f333658]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d33f2ceb20]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55d33f298c70]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55d33f2cec10]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x55d33f29ac40]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x55d33f2ced00]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55d33f29a4a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55d33f2cee10]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55d33f29a120]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55d33f2cef20]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55d33f299980]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55d33f2cefd0]:   %4 = add i64 %1, 1 {
	[0x55d33f2f33c0]:  %5 = add i64 %1, 1
	}

[0x55d33f2cf0a0]:   store i64 %4, i64* %PC, align 8 {
	[0x55d33f2f34d0]:  store i64 %5, i64* %3, align 8
	}

[0x55d33f2cf108]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f0698]:  %7 = load i64, i64* %6, align 8
	}

[0x55d33f2cf180]:   %6 = add i64 %5, -8 {
	[0x55d33f2f4490]:  %8 = add i64 %7, -8
	}

[0x55d33f2cf1e8]:   %7 = inttoptr i64 %6 to i64* {
	[0x55d33f2f0728]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d33f2cf260]:   store i64 %3, i64* %7, align 8 {
	[0x55d33f2f2a20]:  store i64 %4, i64* %9, align 8
	}

[0x55d33f2cf2c8]:   %8 = load i64, i64* %PC, align 8 {
	[0x55d33f2f2968]:  %10 = load i64, i64* %3, align 8
	}

[0x55d33f2cf340]:   %17 = and i8 %16, 1 {
	[0x55d33f2f5be0]:  %19 = and i8 %18, 1
	}

[0x55d33f2cf3d0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x55d33f2f5250]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55d33f2cf490]:   %9 = add i64 %5, -24 {
	[0x55d33f2f5650]:  %11 = add i64 %7, -24
	}

[0x55d33f2cf510]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f5760]:  store i64 %11, i64* %6, align 8
	}

[0x55d33f2cf590]:   %10 = icmp ult i64 %6, 16 {
	[0x55d33f2f5870]:  %12 = icmp ult i64 %8, 16
	}

[0x55d33f2cf5f8]:   %11 = zext i1 %10 to i8 {
	[0x55d33f2f20c8]:  %13 = zext i1 %12 to i8
	}

[0x55d33f2cf6a0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55d33f2f3020]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x55d33f2cf730]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x55d33f2f5980]:  store i8 %13, i8* %14, align 1
	}

[0x55d33f2cf798]:   %13 = trunc i64 %9 to i32 {
	[0x55d33f2f7328]:  %15 = trunc i64 %11 to i32
	}

[0x55d33f2cf810]:   %14 = and i32 %13, 255 {
	[0x55d33f314bf0]:  %16 = and i32 %15, 255
	}

[0x55d33f2cf8d0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x55d33f2f1c30]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d33f2cf948]:   %16 = trunc i32 %15 to i8 {
	[0x55d33f2f7e88]:  %18 = trunc i32 %17 to i8
	}

[0x55d33f2cf9c0]:   %33 = xor i64 %29, %32 {
	[0x55d33f315ef0]:  %35 = xor i64 %31, %34
	}

[0x55d33f2cfa40]:   %34 = add nuw nsw i64 %33, %32 {
	[0x55d33f2f9fc0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55d33f2cfad0]:   %18 = xor i8 %17, 1 {
	[0x55d33f2f5dc0]:  %20 = xor i8 %19, 1
	}

[0x55d33f2cfb80]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55d33f2f5ce0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x55d33f2cfc10]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x55d33f315470]:  store i8 %20, i8* %21, align 1
	}

[0x55d33f2cfc90]:   %20 = xor i64 %6, 16 {
	[0x55d33f2f6460]:  %22 = xor i64 %8, 16
	}

[0x55d33f2cfd10]:   %21 = xor i64 %20, %9 {
	[0x55d33f2f6fd0]:  %23 = xor i64 %22, %11
	}

[0x55d33f2cfd90]:   %22 = lshr i64 %21, 4 {
	[0x55d33f2f4860]:  %24 = lshr i64 %23, 4
	}

[0x55d33f2cfdf8]:   %23 = trunc i64 %22 to i8 {
	[0x55d33f2f86d8]:  %25 = trunc i64 %24 to i8
	}

[0x55d33f2cfe70]:   %24 = and i8 %23, 1 {
	[0x55d33f317c80]:  %26 = and i8 %25, 1
	}

[0x55d33f2cff20]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55d33f2f7570]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x55d33f2cffb0]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x55d33f318510]:  store i8 %26, i8* %27, align 1
	}

[0x55d33f2d0030]:   %26 = icmp eq i64 %9, 0 {
	[0x55d33f318400]:  %28 = icmp eq i64 %11, 0
	}

[0x55d33f2d0098]:   %27 = zext i1 %26 to i8 {
	[0x55d33f2f8808]:  %29 = zext i1 %28 to i8
	}

[0x55d33f2d0140]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55d33f2fe370]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x55d33f2d01d0]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x55d33f319560]:  store i8 %29, i8* %30, align 1
	}

[0x55d33f2d0250]:   %29 = lshr i64 %9, 63 {
	[0x55d33f31b8a0]:  %31 = lshr i64 %11, 63
	}

[0x55d33f2d02b8]:   %30 = trunc i64 %29 to i8 {
	[0x55d33f2f8938]:  %32 = trunc i64 %31 to i8
	}

[0x55d33f2d0360]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55d33f2fe5d0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x55d33f2d03f0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x55d33f31cab0]:  store i8 %32, i8* %33, align 1
	}

[0x55d33f2d0470]:   %32 = lshr i64 %6, 63 {
	[0x55d33f315ff0]:  %34 = lshr i64 %8, 63
	}

[0x55d33f2d04d8]:   %65 = zext i1 %64 to i8 {
	[0x55d33f2fbeb8]:  %66 = zext i1 %65 to i8
	}

[0x55d33f2d0550]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x55d33f318310]:  store i8 %66, i8* %30, align 1
	}

[0x55d33f2d05d0]:   %66 = lshr i64 %50, 63 {
	[0x55d33f318700]:  %67 = lshr i64 %51, 63
	}

[0x55d33f2d0638]:   %67 = trunc i64 %66 to i8 {
	[0x55d33f2fbfe8]:  %68 = trunc i64 %67 to i8
	}

[0x55d33f2d0700]:   %35 = icmp eq i64 %34, 2 {
	[0x55d33f3007e0]:  %37 = icmp eq i64 %36, 2
	}

[0x55d33f2d0768]:   %36 = zext i1 %35 to i8 {
	[0x55d33f2f9188]:  %38 = zext i1 %37 to i8
	}

[0x55d33f2d0810]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55d33f2fe700]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x55d33f2d08a0]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x55d33f300910]:  store i8 %38, i8* %39, align 1
	}

[0x55d33f2d0920]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x55d33f300a40]:  store i64 10, i64* %RDI.i, align 8
	}

[0x55d33f2d09e0]:   store i64 20, i64* %RSI, align 8, !tbaa !1257 {
	[0x55d33f300b70]:  store i64 20, i64* %RSI.i, align 8
	}

[0x55d33f2d0a60]:   %38 = add i64 %5, -12 {
	[0x55d33f3349e0]:  %40 = add i64 %7, -12
	}

[0x55d33f2d0b20]:   %39 = add i64 %8, 24 {
	[0x55d33f3368f0]:  %41 = add i64 %10, 24
	}

[0x55d33f2d0ba0]:   store i64 %39, i64* %PC, align 8 {
	[0x55d33f333180]:  store i64 %41, i64* %3, align 8
	}

[0x55d33f2d0c08]:   %40 = inttoptr i64 %38 to i32* {
	[0x55d33f2f93e8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x55d33f2d0c80]:   store i32 0, i32* %40, align 4 {
	[0x55d33f3ac590]:  store i32 0, i32* %42, align 4
	}

[0x55d33f2d0ce8]:   %41 = load i64, i64* %PC, align 8 {
	[0x55d33f2f9518]:  %43 = load i64, i64* %3, align 8
	}

[0x55d33f2d0da0]:   %42 = add i64 %41, -73 {
	[0x55d33f3aedb0]:  %44 = add i64 %43, -73
	}

[0x55d33f2d0e20]:   %43 = add i64 %41, 5 {
	[0x55d33f3ad8a0]:  %45 = add i64 %43, 5
	}

[0x55d33f2d0e88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f2f9648]:  %46 = load i64, i64* %6, align 8
	}

[0x55d33f2d0f00]:   %45 = add i64 %44, -8 {
	[0x55d33f3b42f0]:  %47 = add i64 %46, -8
	}

[0x55d33f2d0f68]:   %46 = inttoptr i64 %45 to i64* {
	[0x55d33f2f7458]:  %48 = inttoptr i64 %47 to i64*
	}

[0x55d33f2d0fe0]:   store i64 %43, i64* %46, align 8 {
	[0x55d33f3b3520]:  store i64 %45, i64* %48, align 8
	}

[0x55d33f2d1060]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f3b5a90]:  store i64 %47, i64* %6, align 8
	}

[0x55d33f2d10e0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x55d33f3b8280]:  store i64 %44, i64* %3, align 8
	}

[0x55d33f2d1968]:   %52 = zext i1 %51 to i8 {
	[0x55d33f2fb078]:  %53 = zext i1 %52 to i8
	}

[0x55d33f2d19e0]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x55d33f32e750]:  store i8 %53, i8* %14, align 1
	}

[0x55d33f2d1a48]:   %53 = trunc i64 %50 to i32 {
	[0x55d33f2fb1a8]:  %54 = trunc i64 %51 to i32
	}

[0x55d33f2d1ac0]:   %54 = and i32 %53, 255 {
	[0x55d33f3c88c0]:  %55 = and i32 %54, 255
	}

[0x55d33f2d1b40]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x55d33f316480]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x55d33f2d1c08]:   %56 = trunc i32 %55 to i8 {
	[0x55d33f2fb668]:  %57 = trunc i32 %56 to i8
	}

[0x55d33f2d1c80]:   %57 = and i8 %56, 1 {
	[0x55d33f2b2360]:  %58 = and i8 %57, 1
	}

[0x55d33f2d1d00]:   %58 = xor i8 %57, 1 {
	[0x55d33f2b1f00]:  %59 = xor i8 %58, 1
	}

[0x55d33f2d1d80]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x55d33f25a020]:  store i8 %59, i8* %21, align 1
	}

[0x55d33f2d1e00]:   %59 = xor i64 %48, 16 {
	[0x55d33f25e0e0]:  %60 = xor i64 %49, 16
	}

[0x55d33f2d1e80]:   %60 = xor i64 %59, %50 {
	[0x55d33f316ef0]:  %61 = xor i64 %60, %51
	}

[0x55d33f2d1f00]:   %61 = lshr i64 %60, 4 {
	[0x55d33f3172c0]:  %62 = lshr i64 %61, 4
	}

[0x55d33f2d1f68]:   %62 = trunc i64 %61 to i8 {
	[0x55d33f2fb8c8]:  %63 = trunc i64 %62 to i8
	}

[0x55d33f2d1fe0]:   %63 = and i8 %62, 1 {
	[0x55d33f3173c0]:  %64 = and i8 %63, 1
	}

[0x55d33f2d2060]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x55d33f3177b0]:  store i8 %64, i8* %27, align 1
	}

[0x55d33f2d20e0]:   %64 = icmp eq i64 %50, 0 {
	[0x55d33f2f4ce0]:  %65 = icmp eq i64 %51, 0
	}

[0x55d33f2d2570]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x55d33f31a530]:  store i8 %68, i8* %33, align 1
	}

[0x55d33f2d25f0]:   %68 = lshr i64 %48, 63 {
	[0x55d33f31ae60]:  %69 = lshr i64 %49, 63
	}

[0x55d33f2d2670]:   %69 = xor i64 %66, %68 {
	[0x55d33f319f90]:  %70 = xor i64 %67, %69
	}

[0x55d33f2d26f0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x55d33f31b3e0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x55d33f2d2770]:   %71 = icmp eq i64 %70, 2 {
	[0x55d33f31ba10]:  %72 = icmp eq i64 %71, 2
	}

[0x55d33f2d27d8]:   %72 = zext i1 %71 to i8 {
	[0x55d33f2fca98]:  %73 = zext i1 %72 to i8
	}

[0x55d33f2d2850]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x55d33f2f4950]:  store i8 %73, i8* %39, align 1
	}

[0x55d33f2d28d0]:   %73 = add i64 %49, 5 {
	[0x55d33f30a150]:  %74 = add i64 %50, 5
	}

[0x55d33f2d2950]:   store i64 %73, i64* %PC, align 8 {
	[0x55d33f2f2e90]:  store i64 %74, i64* %3, align 8
	}

[0x55d33f2d29d0]:   %74 = add i64 %48, 24 {
	[0x55d33f31e050]:  %75 = add i64 %49, 24
	}

[0x55d33f2d2a38]:   %75 = inttoptr i64 %50 to i64* {
	[0x55d33f2fcbc8]:  %76 = inttoptr i64 %51 to i64*
	}

[0x55d33f2d2a98]:   %76 = load i64, i64* %75, align 8 {
	[0x55d33f2fd7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x55d33f2d2b10]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x55d33f31e560]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x55d33f2d2b90]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f31ebb0]:  store i64 %75, i64* %6, align 8
	}

[0x55d33f2d2c10]:   %77 = add i64 %49, 6 {
	[0x55d33f31eca0]:  %78 = add i64 %50, 6
	}

[0x55d33f2d2c90]:   store i64 %77, i64* %PC, align 8 {
	[0x55d33f315650]:  store i64 %78, i64* %3, align 8
	}

[0x55d33f2d2cf8]:   %78 = inttoptr i64 %74 to i64* {
	[0x55d33f2fda08]:  %79 = inttoptr i64 %75 to i64*
	}

[0x55d33f2d2d58]:   %79 = load i64, i64* %78, align 8 {
	[0x55d33f2fdb38]:  %80 = load i64, i64* %79, align 8
	}

[0x55d33f2d2dd0]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x55d33f3157d0]:  store i64 %80, i64* %3, align 8
	}

[0x55d33f2d2e50]:   %80 = add i64 %48, 32 {
	[0x55d33f315950]:  %81 = add i64 %49, 32
	}

[0x55d33f2d2ed0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x55d33f318b00]:  store i64 %81, i64* %6, align 8
	}

[0x55d33f2d2f38]:   ret %struct.Memory* %47 {
	[0x55d33f2fdc68]:  ret %struct.Memory.31* %call2_4004b9
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55d33f2ce900]: block_4004a0 {
	[0x55d33f313720]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
