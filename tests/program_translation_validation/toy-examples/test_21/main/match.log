Writing '/tmp/tmpjvyn8wtd.dot'...
Writing '/tmp/tmpjvyn8wtd.dot':Done

Reading LLVM: /tmp/tmpsc6kwv8o-query.ll
Extracting function [main] from /tmp/tmpsc6kwv8o-query.ll
Dot file generated!
Writing '/tmp/tmp6m86bzul.dot'...
Writing '/tmp/tmp6m86bzul.dot':Done

Reading LLVM: /tmp/tmprxxqg7vq-target.ll
Extracting function [main] from /tmp/tmprxxqg7vq-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 48 %RAX.i44 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 49 store i64 16, i64* %RAX.i44, align 8
- 50 %RCX.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 51 %40 = add i64 %7, -32
- 52 store i64 %40, i64* %RCX.i41, align 8
- 53 %RDX.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 54 store i64 -4294967296, i64* %RDX.i39, align 8
- 55 %41 = add i64 %7, -12
- 56 %42 = add i64 %10, 33
- 57 store i64 %42, i64* %3, align 8
- 58 %43 = inttoptr i64 %41 to i32*
- 59 store i32 0, i32* %43, align 4
- 60 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 61 %EDI.i = bitcast %union.anon* %44 to i32*
- 62 %45 = load i64, i64* %RBP.i, align 8
- 63 %46 = add i64 %45, -8
- 64 %47 = load i32, i32* %EDI.i, align 4
- 65 %48 = load i64, i64* %3, align 8
- 66 %49 = add i64 %48, 3
- 67 store i64 %49, i64* %3, align 8
- 68 %50 = inttoptr i64 %46 to i32*
- 69 store i32 %47, i32* %50, align 4
- 70 %RSI.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 71 %51 = load i64, i64* %RBP.i, align 8
- 72 %52 = add i64 %51, -16
- 73 %53 = load i64, i64* %RSI.i32, align 8
- 74 %54 = load i64, i64* %3, align 8
- 75 %55 = add i64 %54, 4
- 76 store i64 %55, i64* %3, align 8
- 77 %56 = inttoptr i64 %52 to i64*
- 78 store i64 %53, i64* %56, align 8
- 79 %57 = load i64, i64* %RBP.i, align 8
- 80 %58 = add i64 %57, -24
- 81 %59 = load i64, i64* %RDX.i39, align 8
- 82 %60 = load i64, i64* %3, align 8
- 83 %61 = add i64 %60, 4
- 84 store i64 %61, i64* %3, align 8
- 85 %62 = inttoptr i64 %58 to i64*
- 86 store i64 %59, i64* %62, align 8
- 87 %EAX.i27 = bitcast %union.anon* %39 to i32*
- 88 %RDI.i28 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
- 89 %63 = load i32, i32* %EAX.i27, align 4
- 90 %64 = zext i32 %63 to i64
- 91 %65 = load i64, i64* %3, align 8
- 92 store i64 %64, i64* %RDI.i28, align 8
- 93 %66 = load i64, i64* %RCX.i41, align 8
- 94 store i64 %66, i64* %RSI.i32, align 8
- 95 %AL.i23 = bitcast %union.anon* %39 to i8*
- 96 store i8 0, i8* %AL.i23, align 1
- 97 %67 = add i64 %65, 51
- 98 %68 = add i64 %65, 12
- 99 %69 = load i64, i64* %6, align 8
- 100 %70 = add i64 %69, -8
- 101 %71 = inttoptr i64 %70 to i64*
- 102 store i64 %68, i64* %71, align 8
- 103 store i64 %70, i64* %6, align 8
- 104 store i64 %67, i64* %3, align 8
- 105 %call2_400554 = tail call %struct.Memory* @sub_400580.shiftit(%struct.State* %0, i64 %67, %struct.Memory* %2)
- 106 %72 = load i64, i64* %3, align 8
- 107 store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i28, align 8
- 108 %73 = load i64, i64* %RBP.i, align 8
- 109 %74 = add i64 %73, -24
- 110 %75 = add i64 %72, 14
- 111 store i64 %75, i64* %3, align 8
- 112 %76 = inttoptr i64 %74 to i64*
- 113 %77 = load i64, i64* %76, align 8
- 114 store i64 %77, i64* %RSI.i32, align 8
- 115 %78 = add i64 %73, -28
- 116 %79 = load i32, i32* %EAX.i27, align 4
- 117 %80 = add i64 %72, 17
- 118 store i64 %80, i64* %3, align 8
- 119 %81 = inttoptr i64 %78 to i32*
- 120 store i32 %79, i32* %81, align 4
- 121 %82 = load i64, i64* %3, align 8
- 122 store i8 0, i8* %AL.i23, align 1
- 123 %83 = add i64 %82, -330
- 124 %84 = add i64 %82, 7
- 125 %85 = load i64, i64* %6, align 8
- 126 %86 = add i64 %85, -8
- 127 %87 = inttoptr i64 %86 to i64*
- 128 store i64 %84, i64* %87, align 8
- 129 store i64 %86, i64* %6, align 8
- 130 store i64 %83, i64* %3, align 8
- 131 %88 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400554)
- 132 %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 133 %R8D.i9 = bitcast %union.anon* %89 to i32*
- 134 %90 = getelementptr inbounds %union.anon, %union.anon* %89, i64 0, i32 0
- 135 %91 = load i64, i64* %3, align 8
- 136 store i64 0, i64* %90, align 8
- 137 %92 = load i64, i64* %RBP.i, align 8
- 138 %93 = add i64 %92, -32
- 139 %94 = load i32, i32* %EAX.i27, align 4
- 140 %95 = add i64 %91, 6
- 141 store i64 %95, i64* %3, align 8
- 142 %96 = inttoptr i64 %93 to i32*
- 143 store i32 %94, i32* %96, align 4
- 144 %97 = load i32, i32* %R8D.i9, align 4
- 145 %98 = zext i32 %97 to i64
- 146 %99 = load i64, i64* %3, align 8
- 147 store i64 %98, i64* %RAX.i44, align 8
- 148 %100 = load i64, i64* %6, align 8
- 149 %101 = add i64 %100, 32
- 150 store i64 %101, i64* %6, align 8
- 151 %102 = icmp ugt i64 %100, -33
- 152 %103 = zext i1 %102 to i8
- 153 store i8 %103, i8* %14, align 1
- 154 %104 = trunc i64 %101 to i32
- 155 %105 = and i32 %104, 255
- 156 %106 = tail call i32 @llvm.ctpop.i32(i32 %105)
- 157 %107 = trunc i32 %106 to i8
- 158 %108 = and i8 %107, 1
- 159 %109 = xor i8 %108, 1
- 160 store i8 %109, i8* %21, align 1
- 161 %110 = xor i64 %101, %100
- 162 %111 = lshr i64 %110, 4
- 163 %112 = trunc i64 %111 to i8
- 164 %113 = and i8 %112, 1
- 165 store i8 %113, i8* %26, align 1
- 166 %114 = icmp eq i64 %101, 0
- 167 %115 = zext i1 %114 to i8
- 168 store i8 %115, i8* %29, align 1
- 169 %116 = lshr i64 %101, 63
- 170 %117 = trunc i64 %116 to i8
- 171 store i8 %117, i8* %32, align 1
- 172 %118 = lshr i64 %100, 63
- 173 %119 = xor i64 %116, %118
- 174 %120 = add nuw nsw i64 %119, %116
- 175 %121 = icmp eq i64 %120, 2
- 176 %122 = zext i1 %121 to i8
- 177 store i8 %122, i8* %38, align 1
- 178 %123 = add i64 %99, 8
- 179 store i64 %123, i64* %3, align 8
- 180 %124 = add i64 %100, 40
- 181 %125 = inttoptr i64 %101 to i64*
- 182 %126 = load i64, i64* %125, align 8
- 183 store i64 %126, i64* %RBP.i, align 8
- 184 store i64 %124, i64* %6, align 8
- 185 %127 = add i64 %99, 9
- 186 store i64 %127, i64* %3, align 8
- 187 %128 = inttoptr i64 %124 to i64*
- 188 %129 = load i64, i64* %128, align 8
- 189 store i64 %129, i64* %3, align 8
- 190 %130 = add i64 %100, 48
- 191 store i64 %130, i64* %6, align 8
- 192 ret %struct.Memory* %88
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90e0a9ea0>, {0: {0}, 1: {14}, 2: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 3: {16}, 4: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 5: {13}, 6: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 7: {128, 19, 69, 102}, 8: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 9: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 10: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 11: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 12: {24}, 13: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 14: {26}, 15: {167, 45, 176, 145, 152, 56, 27, 93}, 16: {28}, 17: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 18: {33, 163, 40, 170, 49, 154, 157, 30}, 19: {155, 31}, 20: {32, 107, 156, 133}, 21: {33, 163, 40, 170, 49, 154, 157, 30}, 22: {41, 34, 164, 158}, 23: {35, 159}, 24: {36}, 25: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 26: {161, 53, 38, 173}, 27: {162, 39}, 28: {33, 163, 40, 170, 49, 154, 157, 30}, 29: {41, 34, 164, 158}, 30: {42}, 31: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 32: {44, 166}, 33: {167, 45, 176, 145, 152, 56, 27, 93}, 34: {46}, 35: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 36: {48, 169, 172, 52}, 37: {33, 163, 40, 170, 49, 154, 157, 30}, 38: {50}, 39: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 40: {48, 169, 172, 52}, 41: {161, 53, 38, 173}, 42: {174, 54}, 43: {175, 55}, 44: {167, 45, 176, 145, 152, 56, 27, 93}, 45: {57}, 46: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 47: {1}, 48: {8, 12, 134}, 49: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 50: {9}, 51: {138, 60}, 52: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 53: {10}, 54: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 55: {63}, 56: {64}, 57: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 58: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 59: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 60: {4}, 61: {2, 3, 5, 7}, 62: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 63: {128, 19, 69, 102}, 64: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 65: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 66: {72}, 67: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 68: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 69: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 70: {11}, 71: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 72: {77}, 73: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 74: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 75: {80, 88}, 76: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 77: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 78: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 79: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 80: {85, 111}, 81: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 82: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 83: {80, 88}, 84: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 85: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 86: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 87: {2, 3, 5, 7}, 88: {8, 12, 134}, 89: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 90: {167, 45, 176, 145, 152, 56, 27, 93}, 91: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 92: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 93: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 94: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 95: {2, 3, 5, 7}, 96: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 97: {99}, 98: {100}, 99: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 100: {128, 19, 69, 102}, 101: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 102: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 103: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 104: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 105: {32, 107, 156, 133}, 106: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 107: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 108: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 109: {85, 111}, 110: {112}, 111: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 112: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 113: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 114: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 115: {117}, 116: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 117: {119}, 118: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 119: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 120: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 121: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 122: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 123: {125}, 124: {126}, 125: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 126: {128, 19, 69, 102}, 127: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 128: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 129: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 130: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 131: {32, 107, 156, 133}, 132: {6}, 133: {2, 3, 5, 7}, 134: {8, 12, 134}, 135: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 136: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 137: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 138: {138, 60}, 139: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 140: {140}, 141: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 142: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 143: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 144: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 145: {167, 45, 176, 145, 152, 56, 27, 93}, 146: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 147: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 148: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 149: {149}, 150: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 151: {151}, 152: {167, 45, 176, 145, 152, 56, 27, 93}, 153: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 154: {33, 163, 40, 170, 49, 154, 157, 30}, 155: {155, 31}, 156: {32, 107, 156, 133}, 157: {33, 163, 40, 170, 49, 154, 157, 30}, 158: {41, 34, 164, 158}, 159: {35, 159}, 160: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 161: {161, 53, 38, 173}, 162: {162, 39}, 163: {33, 163, 40, 170, 49, 154, 157, 30}, 164: {41, 34, 164, 158}, 165: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 166: {44, 166}, 167: {167, 45, 176, 145, 152, 56, 27, 93}, 168: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 169: {48, 169, 172, 52}, 170: {33, 163, 40, 170, 49, 154, 157, 30}, 171: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 172: {48, 169, 172, 52}, 173: {161, 53, 38, 173}, 174: {174, 54}, 175: {175, 55}, 176: {167, 45, 176, 145, 152, 56, 27, 93}, 177: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 178: {178}, 179: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 180: {180}, 181: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 182: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 183: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 184: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 185: {185}, 186: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 187: {129, 66, 103, 74, 142, 82, 114, 20, 181, 121, 90, 187}, 188: {135, 137, 139, 15, 144, 18, 146, 148, 22, 182, 188, 68, 70, 71, 76, 78, 79, 84, 86, 87, 92, 94, 96, 101, 108, 110, 115, 118, 123, 127}, 189: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 190: {190}, 191: {130, 131, 132, 136, 141, 143, 17, 147, 21, 150, 23, 25, 153, 29, 160, 37, 165, 168, 43, 171, 47, 177, 51, 179, 183, 184, 58, 59, 186, 61, 62, 189, 191, 65, 67, 73, 75, 81, 83, 89, 91, 95, 97, 98, 104, 105, 106, 109, 113, 116, 120, 122, 124}, 192: {192}})
Equivalent! frozenset({79, 87}) {74, 82}
Equivalent! frozenset({80, 88}) {83, 75}
Equivalent! frozenset({81, 89}) {76, 84}
Equivalent! frozenset({98, 124}) {96, 122}
Equivalent! frozenset({101, 127}) {99, 125}
Equivalent! frozenset({128, 102}) {100, 126}
Equivalent! frozenset({105, 131}) {129, 103}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90e0a9ea0>, {0: {0}, 1: {14}, 2: {15}, 3: {16}, 4: {17}, 5: {13}, 6: {18}, 7: {19}, 8: {20}, 9: {21}, 10: {22}, 11: {23}, 12: {24}, 13: {25}, 14: {26}, 15: {27}, 16: {28}, 17: {29}, 18: {30}, 19: {31}, 20: {32}, 21: {33}, 22: {34}, 23: {35}, 24: {36}, 25: {37}, 26: {38}, 27: {39}, 28: {40}, 29: {41}, 30: {42}, 31: {43}, 32: {44}, 33: {45}, 34: {46}, 35: {47}, 36: {48}, 37: {49}, 38: {50}, 39: {51}, 40: {52}, 41: {53}, 42: {54}, 43: {55}, 44: {56}, 45: {57}, 46: {58}, 47: {1}, 48: {8}, 49: {59, 147}, 50: {9}, 51: {60}, 52: {61}, 53: {10}, 54: {62}, 55: {63}, 56: {64}, 57: {65}, 58: {66}, 59: {67}, 60: {4}, 61: {5}, 62: {68}, 63: {69}, 64: {70}, 65: {71}, 66: {72}, 67: {73}, 68: {74}, 69: {75}, 70: {11}, 71: {76}, 72: {77}, 73: {78}, 74: {79}, 75: {88}, 76: {81}, 77: {82}, 78: {83}, 79: {84}, 80: {85}, 81: {86}, 82: {87}, 83: {80}, 84: {89}, 85: {90}, 86: {91}, 87: {3}, 88: {12}, 89: {92}, 90: {93}, 91: {94}, 92: {95}, 93: {96}, 94: {97}, 95: {2}, 96: {98}, 97: {99}, 98: {100}, 99: {101}, 100: {128}, 101: {103}, 102: {104}, 103: {131}, 104: {106}, 105: {107}, 106: {108}, 107: {109, 95}, 108: {110}, 109: {111}, 110: {112}, 111: {113}, 112: {114}, 113: {115}, 114: {116}, 115: {117}, 116: {118}, 117: {119}, 118: {120}, 119: {121}, 120: {122}, 121: {123}, 122: {124}, 123: {125}, 124: {126}, 125: {127}, 126: {102}, 127: {129}, 128: {130}, 129: {105}, 130: {132}, 131: {133}, 132: {6}, 133: {7}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
MORE 49 POT: 2
EXACT 50 getelementptr getelementptr
EXACT 51 add add
EXACT 52 store store
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 add add
EXACT 56 add add
EXACT 57 store store
EXACT 58 inttoptr inttoptr
EXACT 59 store store
EXACT 60 getelementptr getelementptr
EXACT 61 bitcast bitcast
EXACT 62 load load
EXACT 63 add add
EXACT 64 load load
EXACT 65 load load
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 store store
EXACT 70 getelementptr getelementptr
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
EXACT 74 load load
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
EXACT 81 load load
EXACT 82 load load
EXACT 83 add add
EXACT 84 store store
EXACT 85 inttoptr inttoptr
EXACT 86 store store
EXACT 87 bitcast bitcast
EXACT 88 getelementptr getelementptr
EXACT 89 load load
EXACT 90 zext zext
EXACT 91 load load
EXACT 92 store store
EXACT 93 load load
EXACT 94 store store
EXACT 95 bitcast bitcast
EXACT 96 store store
EXACT 97 add add
EXACT 98 add add
EXACT 99 load load
EXACT 100 add add
EXACT 101 inttoptr inttoptr
EXACT 102 store store
EXACT 103 store store
EXACT 104 store store
EXACT 105 tail tail
EXACT 106 load load
MORE 107 POT: 2
EXACT 108 load load
EXACT 109 add add
EXACT 110 add add
EXACT 111 store store
EXACT 112 inttoptr inttoptr
EXACT 113 load load
EXACT 114 store store
EXACT 115 add add
EXACT 116 load load
EXACT 117 add add
EXACT 118 store store
EXACT 119 inttoptr inttoptr
EXACT 120 store store
EXACT 121 load load
EXACT 122 store store
EXACT 123 add add
EXACT 124 add add
EXACT 125 load load
EXACT 126 add add
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 store store
EXACT 130 store store
EXACT 131 tail tail
EXACT 132 getelementptr getelementptr
EXACT 133 bitcast bitcast
EXACT 134 getelementptr getelementptr
EXACT 135 load load
EXACT 136 store store
EXACT 137 load load
EXACT 138 add add
EXACT 139 load load
EXACT 140 add add
EXACT 141 store store
EXACT 142 inttoptr inttoptr
EXACT 143 store store
EXACT 144 load load
EXACT 145 zext zext
EXACT 146 load load
EXACT 147 store store
EXACT 148 load load
EXACT 149 add add
EXACT 150 store store
EXACT 151 icmp icmp
EXACT 152 zext zext
EXACT 153 store store
EXACT 154 trunc trunc
EXACT 155 and and
EXACT 156 tail tail
EXACT 157 trunc trunc
EXACT 158 and and
EXACT 159 xor xor
EXACT 160 store store
EXACT 161 xor xor
EXACT 162 lshr lshr
EXACT 163 trunc trunc
EXACT 164 and and
EXACT 165 store store
EXACT 166 icmp icmp
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 lshr lshr
EXACT 170 trunc trunc
EXACT 171 store store
EXACT 172 lshr lshr
EXACT 173 xor xor
EXACT 174 add add
EXACT 175 icmp icmp
EXACT 176 zext zext
EXACT 177 store store
EXACT 178 add add
EXACT 179 store store
EXACT 180 add add
EXACT 181 inttoptr inttoptr
EXACT 182 load load
EXACT 183 store store
EXACT 184 store store
EXACT 185 add add
EXACT 186 store store
EXACT 187 inttoptr inttoptr
EXACT 188 load load
EXACT 189 store store
EXACT 190 add add
EXACT 191 store store
EXACT 192 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 5 %EDI = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 7 %R8D = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 10 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 11 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 12 %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 13 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 14 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 15 %6 = load i64, i64* %RBP, align 8
- 16 %7 = add i64 %1, 1
- 17 store i64 %7, i64* %PC, align 8
- 18 %8 = load i64, i64* %RSP, align 8
- 19 %9 = add i64 %8, -8
- 20 %10 = inttoptr i64 %9 to i64*
- 21 store i64 %6, i64* %10, align 8
- 22 %11 = load i64, i64* %PC, align 8
- 23 store i64 %9, i64* %RBP, align 8
- 24 %12 = add i64 %8, -40
- 25 store i64 %12, i64* %RSP, align 8
- 26 %13 = icmp ult i64 %9, 32
- 27 %14 = zext i1 %13 to i8
- 28 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 29 store i8 %14, i8* %15, align 1
- 30 %16 = trunc i64 %12 to i32
- 31 %17 = and i32 %16, 255
- 32 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 33 %19 = trunc i32 %18 to i8
- 34 %20 = and i8 %19, 1
- 35 %21 = xor i8 %20, 1
- 36 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 37 store i8 %21, i8* %22, align 1
- 38 %23 = xor i64 %9, %12
- 39 %24 = lshr i64 %23, 4
- 40 %25 = trunc i64 %24 to i8
- 41 %26 = and i8 %25, 1
- 42 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 43 store i8 %26, i8* %27, align 1
- 44 %28 = icmp eq i64 %12, 0
- 45 %29 = zext i1 %28 to i8
- 46 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 47 store i8 %29, i8* %30, align 1
- 48 %31 = lshr i64 %12, 63
- 49 %32 = trunc i64 %31 to i8
- 50 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 51 store i8 %32, i8* %33, align 1
- 52 %34 = lshr i64 %9, 63
- 53 %35 = xor i64 %31, %34
- 54 %36 = add nuw nsw i64 %35, %34
- 55 %37 = icmp eq i64 %36, 2
- 56 %38 = zext i1 %37 to i8
- 57 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 58 store i8 %38, i8* %39, align 1
- 59 store i64 16, i64* %RAX, align 8
- 60 %40 = add i64 %8, -32
- 61 store i64 %40, i64* %RCX, align 8
- 62 store i64 -4294967296, i64* %RDX, align 8
- 63 %41 = add i64 %8, -12
- 64 %42 = add i64 %11, 33
- 65 store i64 %42, i64* %PC, align 8
- 66 %43 = inttoptr i64 %41 to i32*
- 67 store i32 0, i32* %43, align 4
- 68 %44 = load i64, i64* %RBP, align 8
- 69 %45 = add i64 %44, -8
- 70 %46 = load i32, i32* %EDI, align 4
- 71 %47 = load i64, i64* %PC, align 8
- 72 %48 = add i64 %47, 3
- 73 store i64 %48, i64* %PC, align 8
- 74 %49 = inttoptr i64 %45 to i32*
- 75 store i32 %46, i32* %49, align 4
- 76 %50 = load i64, i64* %RBP, align 8
- 77 %51 = add i64 %50, -16
- 78 %52 = load i64, i64* %RSI, align 8
- 79 %53 = load i64, i64* %PC, align 8
- 80 %54 = add i64 %53, 4
- 81 store i64 %54, i64* %PC, align 8
- 82 %55 = inttoptr i64 %51 to i64*
- 83 store i64 %52, i64* %55, align 8
- 84 %56 = load i64, i64* %RBP, align 8
- 85 %57 = add i64 %56, -24
- 86 %58 = load i64, i64* %RDX, align 8
- 87 %59 = load i64, i64* %PC, align 8
- 88 %60 = add i64 %59, 4
- 89 store i64 %60, i64* %PC, align 8
- 90 %61 = inttoptr i64 %57 to i64*
- 91 store i64 %58, i64* %61, align 8
- 92 %62 = load i32, i32* %EAX, align 4
- 93 %63 = zext i32 %62 to i64
- 94 %64 = load i64, i64* %PC, align 8
- 95 store i64 %63, i64* %RDI, align 8
- 96 %65 = load i64, i64* %RCX, align 8
- 97 store i64 %65, i64* %RSI, align 8
- 98 store i8 0, i8* %AL, align 1
- 99 %66 = add i64 %64, 51
- 100 %67 = add i64 %64, 12
- 101 %68 = load i64, i64* %RSP, align 8
- 102 %69 = add i64 %68, -8
- 103 %70 = inttoptr i64 %69 to i64*
- 104 store i64 %67, i64* %70, align 8
- 105 store i64 %69, i64* %RSP, align 8
- 106 store i64 %66, i64* %PC, align 8
- 107 %71 = tail call %struct.Memory* @sub_400580_shiftit_renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
- 108 %72 = load i64, i64* %PC, align 8
- 109 store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
- 110 %73 = load i64, i64* %RBP, align 8
- 111 %74 = add i64 %73, -24
- 112 %75 = add i64 %72, 14
- 113 store i64 %75, i64* %PC, align 8
- 114 %76 = inttoptr i64 %74 to i64*
- 115 %77 = load i64, i64* %76, align 8
- 116 store i64 %77, i64* %RSI, align 8
- 117 %78 = add i64 %73, -28
- 118 %79 = load i32, i32* %EAX, align 4
- 119 %80 = add i64 %72, 17
- 120 store i64 %80, i64* %PC, align 8
- 121 %81 = inttoptr i64 %78 to i32*
- 122 store i32 %79, i32* %81, align 4
- 123 %82 = load i64, i64* %PC, align 8
- 124 store i8 0, i8* %AL, align 1
- 125 %83 = add i64 %82, -330
- 126 %84 = add i64 %82, 7
- 127 %85 = load i64, i64* %RSP, align 8
- 128 %86 = add i64 %85, -8
- 129 %87 = inttoptr i64 %86 to i64*
- 130 store i64 %84, i64* %87, align 8
- 131 store i64 %86, i64* %RSP, align 8
- 132 store i64 %83, i64* %PC, align 8
- 133 %88 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %71)
- 134 %89 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 135 %90 = load i64, i64* %PC, align 8
- 136 store i64 0, i64* %89, align 8
- 137 %91 = load i64, i64* %RBP, align 8
- 138 %92 = add i64 %91, -32
- 139 %93 = load i32, i32* %EAX, align 4
- 140 %94 = add i64 %90, 6
- 141 store i64 %94, i64* %PC, align 8
- 142 %95 = inttoptr i64 %92 to i32*
- 143 store i32 %93, i32* %95, align 4
- 144 %96 = load i32, i32* %R8D, align 4
- 145 %97 = zext i32 %96 to i64
- 146 %98 = load i64, i64* %PC, align 8
- 147 store i64 %97, i64* %RAX, align 8
- 148 %99 = load i64, i64* %RSP, align 8
- 149 %100 = add i64 %99, 32
- 150 store i64 %100, i64* %RSP, align 8
- 151 %101 = icmp ugt i64 %99, -33
- 152 %102 = zext i1 %101 to i8
- 153 store i8 %102, i8* %15, align 1
- 154 %103 = trunc i64 %100 to i32
- 155 %104 = and i32 %103, 255
- 156 %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12
- 157 %106 = trunc i32 %105 to i8
- 158 %107 = and i8 %106, 1
- 159 %108 = xor i8 %107, 1
- 160 store i8 %108, i8* %22, align 1
- 161 %109 = xor i64 %100, %99
- 162 %110 = lshr i64 %109, 4
- 163 %111 = trunc i64 %110 to i8
- 164 %112 = and i8 %111, 1
- 165 store i8 %112, i8* %27, align 1
- 166 %113 = icmp eq i64 %100, 0
- 167 %114 = zext i1 %113 to i8
- 168 store i8 %114, i8* %30, align 1
- 169 %115 = lshr i64 %100, 63
- 170 %116 = trunc i64 %115 to i8
- 171 store i8 %116, i8* %33, align 1
- 172 %117 = lshr i64 %99, 63
- 173 %118 = xor i64 %115, %117
- 174 %119 = add nuw nsw i64 %118, %115
- 175 %120 = icmp eq i64 %119, 2
- 176 %121 = zext i1 %120 to i8
- 177 store i8 %121, i8* %39, align 1
- 178 %122 = add i64 %98, 8
- 179 store i64 %122, i64* %PC, align 8
- 180 %123 = add i64 %99, 40
- 181 %124 = inttoptr i64 %100 to i64*
- 182 %125 = load i64, i64* %124, align 8
- 183 store i64 %125, i64* %RBP, align 8
- 184 store i64 %123, i64* %RSP, align 8
- 185 %126 = add i64 %98, 9
- 186 store i64 %126, i64* %PC, align 8
- 187 %127 = inttoptr i64 %123 to i64*
- 188 %128 = load i64, i64* %127, align 8
- 189 store i64 %128, i64* %PC, align 8
- 190 %129 = add i64 %99, 48
- 191 store i64 %129, i64* %RSP, align 8
- 192 ret %struct.Memory* %88
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90e0a9c80>, {0: {0}, 1: {47}, 2: {133, 61, 95, 87}, 3: {133, 61, 95, 87}, 4: {60}, 5: {133, 61, 95, 87}, 6: {132}, 7: {133, 61, 95, 87}, 8: {48, 88, 134}, 9: {50}, 10: {53}, 11: {70}, 12: {48, 88, 134}, 13: {5}, 14: {1}, 15: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 16: {3}, 17: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 18: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 19: {100, 63, 126, 7}, 20: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 21: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 22: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 23: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 24: {12}, 25: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 26: {14}, 27: {33, 167, 44, 15, 176, 145, 152, 90}, 28: {16}, 29: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 30: {163, 37, 170, 18, 21, 154, 28, 157}, 31: {19, 155}, 32: {105, 131, 20, 156}, 33: {163, 37, 170, 18, 21, 154, 28, 157}, 34: {158, 164, 29, 22}, 35: {159, 23}, 36: {24}, 37: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 38: {41, 26, 161, 173}, 39: {162, 27}, 40: {163, 37, 170, 18, 21, 154, 28, 157}, 41: {158, 164, 29, 22}, 42: {30}, 43: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 44: {32, 166}, 45: {33, 167, 44, 15, 176, 145, 152, 90}, 46: {34}, 47: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 48: {40, 169, 172, 36}, 49: {163, 37, 170, 18, 21, 154, 28, 157}, 50: {38}, 51: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 52: {40, 169, 172, 36}, 53: {41, 26, 161, 173}, 54: {42, 174}, 55: {43, 175}, 56: {33, 167, 44, 15, 176, 145, 152, 90}, 57: {45}, 58: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 59: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 60: {138, 51}, 61: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 62: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 63: {55}, 64: {56}, 65: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 66: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 67: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 68: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 69: {100, 63, 126, 7}, 70: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 71: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 72: {66}, 73: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 74: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 75: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 76: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 77: {72}, 78: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 79: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 80: {83, 75}, 81: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 82: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 83: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 84: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 85: {80, 109}, 86: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 87: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 88: {83, 75}, 89: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 90: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 91: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 92: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 93: {33, 167, 44, 15, 176, 145, 152, 90}, 94: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 95: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 96: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 97: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 98: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 99: {97}, 100: {98}, 101: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 102: {100, 63, 126, 7}, 103: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 104: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 105: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 106: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 107: {105, 131, 20, 156}, 108: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 109: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 110: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 111: {80, 109}, 112: {110}, 113: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 114: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 115: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 116: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 117: {115}, 118: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 119: {117}, 120: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 121: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 122: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 123: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 124: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 125: {123}, 126: {124}, 127: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 128: {100, 63, 126, 7}, 129: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 130: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 131: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 132: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 133: {105, 131, 20, 156}, 134: {48, 88, 134}, 135: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 136: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 137: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 138: {138, 51}, 139: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 140: {140}, 141: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 142: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 143: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 144: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 145: {33, 167, 44, 15, 176, 145, 152, 90}, 146: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 147: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 148: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 149: {149}, 150: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 151: {151}, 152: {33, 167, 44, 15, 176, 145, 152, 90}, 153: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 154: {163, 37, 170, 18, 21, 154, 28, 157}, 155: {19, 155}, 156: {105, 131, 20, 156}, 157: {163, 37, 170, 18, 21, 154, 28, 157}, 158: {158, 164, 29, 22}, 159: {159, 23}, 160: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 161: {41, 26, 161, 173}, 162: {162, 27}, 163: {163, 37, 170, 18, 21, 154, 28, 157}, 164: {158, 164, 29, 22}, 165: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 166: {32, 166}, 167: {33, 167, 44, 15, 176, 145, 152, 90}, 168: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 169: {40, 169, 172, 36}, 170: {163, 37, 170, 18, 21, 154, 28, 157}, 171: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 172: {40, 169, 172, 36}, 173: {41, 26, 161, 173}, 174: {42, 174}, 175: {43, 175}, 176: {33, 167, 44, 15, 176, 145, 152, 90}, 177: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 178: {178}, 179: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 180: {180}, 181: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 182: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 183: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 184: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 185: {185}, 186: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 187: {68, 101, 8, 77, 142, 112, 85, 181, 119, 58, 187, 127}, 188: {2, 6, 135, 137, 10, 139, 144, 146, 148, 182, 188, 62, 64, 65, 71, 73, 74, 79, 81, 82, 89, 91, 93, 99, 106, 108, 113, 116, 121, 125}, 189: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 190: {190}, 191: {128, 129, 130, 4, 136, 9, 11, 13, 141, 143, 17, 147, 150, 25, 153, 31, 160, 35, 165, 39, 168, 171, 46, 49, 177, 179, 52, 54, 183, 184, 57, 186, 59, 189, 191, 67, 69, 76, 78, 84, 86, 92, 94, 96, 102, 103, 104, 107, 111, 114, 118, 120, 122}, 192: {192}})
Equivalent! frozenset({74, 82}) {87, 79}
Equivalent! frozenset({75, 83}) {80, 88}
Equivalent! frozenset({76, 84}) {89, 81}
Equivalent! frozenset({96, 122}) {98, 124}
Equivalent! frozenset({99, 125}) {101, 127}
Equivalent! frozenset({100, 126}) {128, 102}
Equivalent! frozenset({129, 103}) {105, 131}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90e0a9c80>, {0: {0}, 1: {47}, 2: {95}, 3: {87}, 4: {60}, 5: {61}, 6: {132}, 7: {133}, 8: {48}, 9: {50}, 10: {53}, 11: {70}, 12: {88}, 13: {5}, 14: {1}, 15: {2}, 16: {3}, 17: {4}, 18: {6}, 19: {7}, 20: {8}, 21: {9}, 22: {10}, 23: {11}, 24: {12}, 25: {13}, 26: {14}, 27: {15}, 28: {16}, 29: {17}, 30: {18}, 31: {19}, 32: {20}, 33: {21}, 34: {22}, 35: {23}, 36: {24}, 37: {25}, 38: {26}, 39: {27}, 40: {28}, 41: {29}, 42: {30}, 43: {31}, 44: {32}, 45: {33}, 46: {34}, 47: {35}, 48: {36}, 49: {37}, 50: {38}, 51: {39}, 52: {40}, 53: {41}, 54: {42}, 55: {43}, 56: {44}, 57: {45}, 58: {46}, 59: {49, 147}, 60: {51}, 61: {52}, 62: {54}, 63: {55}, 64: {56}, 65: {57}, 66: {58}, 67: {59}, 68: {62}, 69: {63}, 70: {64}, 71: {65}, 72: {66}, 73: {67}, 74: {68}, 75: {69}, 76: {71}, 77: {72}, 78: {73}, 79: {82}, 80: {75}, 81: {84}, 82: {77}, 83: {78}, 84: {79}, 85: {80}, 86: {81}, 87: {74}, 88: {83}, 89: {76}, 90: {85}, 91: {86}, 92: {89}, 93: {90}, 94: {91}, 95: {92}, 96: {93}, 97: {94}, 98: {96}, 99: {97}, 100: {98}, 101: {99}, 102: {126}, 103: {101}, 104: {102}, 105: {129}, 106: {104}, 107: {105}, 108: {106}, 109: {107, 92}, 110: {108}, 111: {109}, 112: {110}, 113: {111}, 114: {112}, 115: {113}, 116: {114}, 117: {115}, 118: {116}, 119: {117}, 120: {118}, 121: {119}, 122: {120}, 123: {121}, 124: {122}, 125: {123}, 126: {124}, 127: {125}, 128: {100}, 129: {127}, 130: {128}, 131: {103}, 132: {130}, 133: {131}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 getelementptr getelementptr
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 load load
EXACT 19 add add
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 load load
EXACT 23 store store
EXACT 24 add add
EXACT 25 store store
EXACT 26 icmp icmp
EXACT 27 zext zext
EXACT 28 getelementptr getelementptr
EXACT 29 store store
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 tail tail
EXACT 33 trunc trunc
EXACT 34 and and
EXACT 35 xor xor
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 xor xor
EXACT 39 lshr lshr
EXACT 40 trunc trunc
EXACT 41 and and
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 trunc trunc
EXACT 50 getelementptr getelementptr
EXACT 51 store store
EXACT 52 lshr lshr
EXACT 53 xor xor
EXACT 54 add add
EXACT 55 icmp icmp
EXACT 56 zext zext
EXACT 57 getelementptr getelementptr
EXACT 58 store store
MORE 59 POT: 2
EXACT 60 add add
EXACT 61 store store
EXACT 62 store store
EXACT 63 add add
EXACT 64 add add
EXACT 65 store store
EXACT 66 inttoptr inttoptr
EXACT 67 store store
EXACT 68 load load
EXACT 69 add add
EXACT 70 load load
EXACT 71 load load
EXACT 72 add add
EXACT 73 store store
EXACT 74 inttoptr inttoptr
EXACT 75 store store
EXACT 76 load load
EXACT 77 add add
EXACT 78 load load
EXACT 79 load load
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 store store
EXACT 84 load load
EXACT 85 add add
EXACT 86 load load
EXACT 87 load load
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 store store
EXACT 92 load load
EXACT 93 zext zext
EXACT 94 load load
EXACT 95 store store
EXACT 96 load load
EXACT 97 store store
EXACT 98 store store
EXACT 99 add add
EXACT 100 add add
EXACT 101 load load
EXACT 102 add add
EXACT 103 inttoptr inttoptr
EXACT 104 store store
EXACT 105 store store
EXACT 106 store store
EXACT 107 tail tail
EXACT 108 load load
MORE 109 POT: 2
EXACT 110 load load
EXACT 111 add add
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 load load
EXACT 116 store store
EXACT 117 add add
EXACT 118 load load
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 store store
EXACT 123 load load
EXACT 124 store store
EXACT 125 add add
EXACT 126 add add
EXACT 127 load load
EXACT 128 add add
EXACT 129 inttoptr inttoptr
EXACT 130 store store
EXACT 131 store store
EXACT 132 store store
EXACT 133 tail tail
EXACT 134 getelementptr getelementptr
EXACT 135 load load
EXACT 136 store store
EXACT 137 load load
EXACT 138 add add
EXACT 139 load load
EXACT 140 add add
EXACT 141 store store
EXACT 142 inttoptr inttoptr
EXACT 143 store store
EXACT 144 load load
EXACT 145 zext zext
EXACT 146 load load
EXACT 147 store store
EXACT 148 load load
EXACT 149 add add
EXACT 150 store store
EXACT 151 icmp icmp
EXACT 152 zext zext
EXACT 153 store store
EXACT 154 trunc trunc
EXACT 155 and and
EXACT 156 tail tail
EXACT 157 trunc trunc
EXACT 158 and and
EXACT 159 xor xor
EXACT 160 store store
EXACT 161 xor xor
EXACT 162 lshr lshr
EXACT 163 trunc trunc
EXACT 164 and and
EXACT 165 store store
EXACT 166 icmp icmp
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 lshr lshr
EXACT 170 trunc trunc
EXACT 171 store store
EXACT 172 lshr lshr
EXACT 173 xor xor
EXACT 174 add add
EXACT 175 icmp icmp
EXACT 176 zext zext
EXACT 177 store store
EXACT 178 add add
EXACT 179 store store
EXACT 180 add add
EXACT 181 inttoptr inttoptr
EXACT 182 load load
EXACT 183 store store
EXACT 184 store store
EXACT 185 add add
EXACT 186 store store
EXACT 187 inttoptr inttoptr
EXACT 188 load load
EXACT 189 store store
EXACT 190 add add
EXACT 191 store store
EXACT 192 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%RCX.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%40 = add i64 %7, -32', 'store i64 %40, i64* %RCX.i41, align 8', '%RDX.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', 'store i64 -4294967296, i64* %RDX.i39, align 8', '%41 = add i64 %7, -12', '%42 = add i64 %10, 33', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%EDI.i = bitcast %union.anon* %44 to i32*', '%45 = load i64, i64* %RBP.i, align 8', '%46 = add i64 %45, -8', '%47 = load i32, i32* %EDI.i, align 4', '%48 = load i64, i64* %3, align 8', '%49 = add i64 %48, 3', 'store i64 %49, i64* %3, align 8', '%50 = inttoptr i64 %46 to i32*', 'store i32 %47, i32* %50, align 4', '%RSI.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%51 = load i64, i64* %RBP.i, align 8', '%52 = add i64 %51, -16', '%53 = load i64, i64* %RSI.i32, align 8', '%54 = load i64, i64* %3, align 8', '%55 = add i64 %54, 4', 'store i64 %55, i64* %3, align 8', '%56 = inttoptr i64 %52 to i64*', 'store i64 %53, i64* %56, align 8', '%57 = load i64, i64* %RBP.i, align 8', '%58 = add i64 %57, -24', '%59 = load i64, i64* %RDX.i39, align 8', '%60 = load i64, i64* %3, align 8', '%61 = add i64 %60, 4', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %58 to i64*', 'store i64 %59, i64* %62, align 8', '%EAX.i27 = bitcast %union.anon* %39 to i32*', '%63 = load i32, i32* %EAX.i27, align 4', '%64 = zext i32 %63 to i64', '%65 = load i64, i64* %3, align 8', 'store i64 %64, i64* %RDI.i28, align 8', '%66 = load i64, i64* %RCX.i41, align 8', 'store i64 %66, i64* %RSI.i32, align 8', '%AL.i23 = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i23, align 1', '%67 = add i64 %65, 51', '%68 = add i64 %65, 12', '%69 = load i64, i64* %6, align 8', '%70 = add i64 %69, -8', '%71 = inttoptr i64 %70 to i64*', 'store i64 %68, i64* %71, align 8', 'store i64 %70, i64* %6, align 8', 'store i64 %67, i64* %3, align 8', '%call2_400554 = tail call %struct.Memory* @sub_400580.shiftit(%struct.State* %0, i64 %67, %struct.Memory* %2)', '%72 = load i64, i64* %3, align 8', '%73 = load i64, i64* %RBP.i, align 8', '%74 = add i64 %73, -24', '%75 = add i64 %72, 14', 'store i64 %75, i64* %3, align 8', '%76 = inttoptr i64 %74 to i64*', '%77 = load i64, i64* %76, align 8', 'store i64 %77, i64* %RSI.i32, align 8', '%78 = add i64 %73, -28', '%79 = load i32, i32* %EAX.i27, align 4', '%80 = add i64 %72, 17', 'store i64 %80, i64* %3, align 8', '%81 = inttoptr i64 %78 to i32*', 'store i32 %79, i32* %81, align 4', '%82 = load i64, i64* %3, align 8', '%83 = add i64 %82, -330', '%84 = add i64 %82, 7', '%85 = load i64, i64* %6, align 8', '%86 = add i64 %85, -8', '%87 = inttoptr i64 %86 to i64*', 'store i64 %84, i64* %87, align 8', 'store i64 %86, i64* %6, align 8', 'store i64 %83, i64* %3, align 8', '%88 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400554)', '%89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8D.i9 = bitcast %union.anon* %89 to i32*', '%90 = getelementptr inbounds %union.anon, %union.anon* %89, i64 0, i32 0', '%91 = load i64, i64* %3, align 8', 'store i64 0, i64* %90, align 8', '%92 = load i64, i64* %RBP.i, align 8', '%93 = add i64 %92, -32', '%94 = load i32, i32* %EAX.i27, align 4', '%95 = add i64 %91, 6', 'store i64 %95, i64* %3, align 8', '%96 = inttoptr i64 %93 to i32*', 'store i32 %94, i32* %96, align 4', '%97 = load i32, i32* %R8D.i9, align 4', '%98 = zext i32 %97 to i64', '%99 = load i64, i64* %3, align 8', 'store i64 %98, i64* %RAX.i44, align 8', '%100 = load i64, i64* %6, align 8', '%101 = add i64 %100, 32', 'store i64 %101, i64* %6, align 8', '%102 = icmp ugt i64 %100, -33', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %14, align 1', '%104 = trunc i64 %101 to i32', '%105 = and i32 %104, 255', '%106 = tail call i32 @llvm.ctpop.i32(i32 %105)', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', '%109 = xor i8 %108, 1', 'store i8 %109, i8* %21, align 1', '%110 = xor i64 %101, %100', '%111 = lshr i64 %110, 4', '%112 = trunc i64 %111 to i8', '%113 = and i8 %112, 1', 'store i8 %113, i8* %26, align 1', '%114 = icmp eq i64 %101, 0', '%115 = zext i1 %114 to i8', 'store i8 %115, i8* %29, align 1', '%116 = lshr i64 %101, 63', '%117 = trunc i64 %116 to i8', 'store i8 %117, i8* %32, align 1', '%118 = lshr i64 %100, 63', '%119 = xor i64 %116, %118', '%120 = add nuw nsw i64 %119, %116', '%121 = icmp eq i64 %120, 2', '%122 = zext i1 %121 to i8', 'store i8 %122, i8* %38, align 1', '%123 = add i64 %99, 8', 'store i64 %123, i64* %3, align 8', '%124 = add i64 %100, 40', '%125 = inttoptr i64 %101 to i64*', '%126 = load i64, i64* %125, align 8', 'store i64 %126, i64* %RBP.i, align 8', 'store i64 %124, i64* %6, align 8', '%127 = add i64 %99, 9', 'store i64 %127, i64* %3, align 8', '%128 = inttoptr i64 %124 to i64*', '%129 = load i64, i64* %128, align 8', 'store i64 %129, i64* %3, align 8', '%130 = add i64 %100, 48', 'store i64 %130, i64* %6, align 8', 'ret %struct.Memory* %88'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i44 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Keep: store i64 16, i64* %RAX.i44, align 8
Found line to remove! %RCX.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %40 = add i64 %7, -32
Found line to remove! store i64 %40, i64* %RCX.i41, align 8
Found line to remove! %RDX.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! store i64 -4294967296, i64* %RDX.i39, align 8
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = add i64 %10, 33
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Keep: %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %44 to i32*
Found line to remove! %45 = load i64, i64* %RBP.i, align 8
Found line to remove! %46 = add i64 %45, -8
Found line to remove! %47 = load i32, i32* %EDI.i, align 4
Found line to remove! %48 = load i64, i64* %3, align 8
Found line to remove! %49 = add i64 %48, 3
Found line to remove! store i64 %49, i64* %3, align 8
Found line to remove! %50 = inttoptr i64 %46 to i32*
Found line to remove! store i32 %47, i32* %50, align 4
Found line to remove! %RSI.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %51 = load i64, i64* %RBP.i, align 8
Found line to remove! %52 = add i64 %51, -16
Found line to remove! %53 = load i64, i64* %RSI.i32, align 8
Found line to remove! %54 = load i64, i64* %3, align 8
Found line to remove! %55 = add i64 %54, 4
Found line to remove! store i64 %55, i64* %3, align 8
Found line to remove! %56 = inttoptr i64 %52 to i64*
Found line to remove! store i64 %53, i64* %56, align 8
Found line to remove! %57 = load i64, i64* %RBP.i, align 8
Found line to remove! %58 = add i64 %57, -24
Found line to remove! %59 = load i64, i64* %RDX.i39, align 8
Found line to remove! %60 = load i64, i64* %3, align 8
Found line to remove! %61 = add i64 %60, 4
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %62 = inttoptr i64 %58 to i64*
Found line to remove! store i64 %59, i64* %62, align 8
Found line to remove! %EAX.i27 = bitcast %union.anon* %39 to i32*
Keep: %RDI.i28 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
Found line to remove! %63 = load i32, i32* %EAX.i27, align 4
Found line to remove! %64 = zext i32 %63 to i64
Found line to remove! %65 = load i64, i64* %3, align 8
Found line to remove! store i64 %64, i64* %RDI.i28, align 8
Found line to remove! %66 = load i64, i64* %RCX.i41, align 8
Found line to remove! store i64 %66, i64* %RSI.i32, align 8
Found line to remove! %AL.i23 = bitcast %union.anon* %39 to i8*
Found line to remove! store i8 0, i8* %AL.i23, align 1
Found line to remove! %67 = add i64 %65, 51
Found line to remove! %68 = add i64 %65, 12
Found line to remove! %69 = load i64, i64* %6, align 8
Found line to remove! %70 = add i64 %69, -8
Found line to remove! %71 = inttoptr i64 %70 to i64*
Found line to remove! store i64 %68, i64* %71, align 8
Found line to remove! store i64 %70, i64* %6, align 8
Found line to remove! store i64 %67, i64* %3, align 8
Found line to remove! %call2_400554 = tail call %struct.Memory* @sub_400580.shiftit(%struct.State* %0, i64 %67, %struct.Memory* %2)
Found line to remove! %72 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i28, align 8
Found line to remove! %73 = load i64, i64* %RBP.i, align 8
Found line to remove! %74 = add i64 %73, -24
Found line to remove! %75 = add i64 %72, 14
Found line to remove! store i64 %75, i64* %3, align 8
Found line to remove! %76 = inttoptr i64 %74 to i64*
Found line to remove! %77 = load i64, i64* %76, align 8
Found line to remove! store i64 %77, i64* %RSI.i32, align 8
Found line to remove! %78 = add i64 %73, -28
Found line to remove! %79 = load i32, i32* %EAX.i27, align 4
Found line to remove! %80 = add i64 %72, 17
Found line to remove! store i64 %80, i64* %3, align 8
Found line to remove! %81 = inttoptr i64 %78 to i32*
Found line to remove! store i32 %79, i32* %81, align 4
Found line to remove! %82 = load i64, i64* %3, align 8
Found line to remove! store i8 0, i8* %AL.i23, align 1
Found line to remove! %83 = add i64 %82, -330
Found line to remove! %84 = add i64 %82, 7
Found line to remove! %85 = load i64, i64* %6, align 8
Found line to remove! %86 = add i64 %85, -8
Found line to remove! %87 = inttoptr i64 %86 to i64*
Found line to remove! store i64 %84, i64* %87, align 8
Found line to remove! store i64 %86, i64* %6, align 8
Found line to remove! store i64 %83, i64* %3, align 8
Found line to remove! %88 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400554)
Found line to remove! %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8D.i9 = bitcast %union.anon* %89 to i32*
Found line to remove! %90 = getelementptr inbounds %union.anon, %union.anon* %89, i64 0, i32 0
Found line to remove! %91 = load i64, i64* %3, align 8
Found line to remove! store i64 0, i64* %90, align 8
Found line to remove! %92 = load i64, i64* %RBP.i, align 8
Found line to remove! %93 = add i64 %92, -32
Found line to remove! %94 = load i32, i32* %EAX.i27, align 4
Found line to remove! %95 = add i64 %91, 6
Found line to remove! store i64 %95, i64* %3, align 8
Found line to remove! %96 = inttoptr i64 %93 to i32*
Found line to remove! store i32 %94, i32* %96, align 4
Found line to remove! %97 = load i32, i32* %R8D.i9, align 4
Found line to remove! %98 = zext i32 %97 to i64
Found line to remove! %99 = load i64, i64* %3, align 8
Found line to remove! store i64 %98, i64* %RAX.i44, align 8
Found line to remove! %100 = load i64, i64* %6, align 8
Found line to remove! %101 = add i64 %100, 32
Found line to remove! store i64 %101, i64* %6, align 8
Found line to remove! %102 = icmp ugt i64 %100, -33
Found line to remove! %103 = zext i1 %102 to i8
Found line to remove! store i8 %103, i8* %14, align 1
Found line to remove! %104 = trunc i64 %101 to i32
Found line to remove! %105 = and i32 %104, 255
Found line to remove! %106 = tail call i32 @llvm.ctpop.i32(i32 %105)
Found line to remove! %107 = trunc i32 %106 to i8
Found line to remove! %108 = and i8 %107, 1
Found line to remove! %109 = xor i8 %108, 1
Found line to remove! store i8 %109, i8* %21, align 1
Found line to remove! %110 = xor i64 %101, %100
Found line to remove! %111 = lshr i64 %110, 4
Found line to remove! %112 = trunc i64 %111 to i8
Found line to remove! %113 = and i8 %112, 1
Found line to remove! store i8 %113, i8* %26, align 1
Found line to remove! %114 = icmp eq i64 %101, 0
Found line to remove! %115 = zext i1 %114 to i8
Found line to remove! store i8 %115, i8* %29, align 1
Found line to remove! %116 = lshr i64 %101, 63
Found line to remove! %117 = trunc i64 %116 to i8
Found line to remove! store i8 %117, i8* %32, align 1
Found line to remove! %118 = lshr i64 %100, 63
Found line to remove! %119 = xor i64 %116, %118
Found line to remove! %120 = add nuw nsw i64 %119, %116
Found line to remove! %121 = icmp eq i64 %120, 2
Found line to remove! %122 = zext i1 %121 to i8
Found line to remove! store i8 %122, i8* %38, align 1
Found line to remove! %123 = add i64 %99, 8
Found line to remove! store i64 %123, i64* %3, align 8
Found line to remove! %124 = add i64 %100, 40
Found line to remove! %125 = inttoptr i64 %101 to i64*
Found line to remove! %126 = load i64, i64* %125, align 8
Found line to remove! store i64 %126, i64* %RBP.i, align 8
Found line to remove! store i64 %124, i64* %6, align 8
Found line to remove! %127 = add i64 %99, 9
Found line to remove! store i64 %127, i64* %3, align 8
Found line to remove! %128 = inttoptr i64 %124 to i64*
Found line to remove! %129 = load i64, i64* %128, align 8
Found line to remove! store i64 %129, i64* %3, align 8
Found line to remove! %130 = add i64 %100, 48
Found line to remove! store i64 %130, i64* %6, align 8
Found line to remove! ret %struct.Memory* %88
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%EDI = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8D = bitcast %union.anon* %5 to i32*', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -32', 'store i64 %40, i64* %RCX, align 8', 'store i64 -4294967296, i64* %RDX, align 8', '%41 = add i64 %8, -12', '%42 = add i64 %11, 33', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = load i64, i64* %RBP, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI, align 4', '%47 = load i64, i64* %PC, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %PC, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%50 = load i64, i64* %RBP, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI, align 8', '%53 = load i64, i64* %PC, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = load i64, i64* %RBP, align 8', '%57 = add i64 %56, -24', '%58 = load i64, i64* %RDX, align 8', '%59 = load i64, i64* %PC, align 8', '%60 = add i64 %59, 4', 'store i64 %60, i64* %PC, align 8', '%61 = inttoptr i64 %57 to i64*', 'store i64 %58, i64* %61, align 8', '%62 = load i32, i32* %EAX, align 4', '%63 = zext i32 %62 to i64', '%64 = load i64, i64* %PC, align 8', 'store i64 %63, i64* %RDI, align 8', '%65 = load i64, i64* %RCX, align 8', 'store i64 %65, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%66 = add i64 %64, 51', '%67 = add i64 %64, 12', '%68 = load i64, i64* %RSP, align 8', '%69 = add i64 %68, -8', '%70 = inttoptr i64 %69 to i64*', 'store i64 %67, i64* %70, align 8', 'store i64 %69, i64* %RSP, align 8', 'store i64 %66, i64* %PC, align 8', '%71 = tail call %struct.Memory* @sub_400580_shiftit_renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)', '%72 = load i64, i64* %PC, align 8', '%73 = load i64, i64* %RBP, align 8', '%74 = add i64 %73, -24', '%75 = add i64 %72, 14', 'store i64 %75, i64* %PC, align 8', '%76 = inttoptr i64 %74 to i64*', '%77 = load i64, i64* %76, align 8', 'store i64 %77, i64* %RSI, align 8', '%78 = add i64 %73, -28', '%79 = load i32, i32* %EAX, align 4', '%80 = add i64 %72, 17', 'store i64 %80, i64* %PC, align 8', '%81 = inttoptr i64 %78 to i32*', 'store i32 %79, i32* %81, align 4', '%82 = load i64, i64* %PC, align 8', '%83 = add i64 %82, -330', '%84 = add i64 %82, 7', '%85 = load i64, i64* %RSP, align 8', '%86 = add i64 %85, -8', '%87 = inttoptr i64 %86 to i64*', 'store i64 %84, i64* %87, align 8', 'store i64 %86, i64* %RSP, align 8', 'store i64 %83, i64* %PC, align 8', '%88 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %71)', '%89 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%90 = load i64, i64* %PC, align 8', 'store i64 0, i64* %89, align 8', '%91 = load i64, i64* %RBP, align 8', '%92 = add i64 %91, -32', '%93 = load i32, i32* %EAX, align 4', '%94 = add i64 %90, 6', 'store i64 %94, i64* %PC, align 8', '%95 = inttoptr i64 %92 to i32*', 'store i32 %93, i32* %95, align 4', '%96 = load i32, i32* %R8D, align 4', '%97 = zext i32 %96 to i64', '%98 = load i64, i64* %PC, align 8', 'store i64 %97, i64* %RAX, align 8', '%99 = load i64, i64* %RSP, align 8', '%100 = add i64 %99, 32', 'store i64 %100, i64* %RSP, align 8', '%101 = icmp ugt i64 %99, -33', '%102 = zext i1 %101 to i8', 'store i8 %102, i8* %15, align 1', '%103 = trunc i64 %100 to i32', '%104 = and i32 %103, 255', '%105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12', '%106 = trunc i32 %105 to i8', '%107 = and i8 %106, 1', '%108 = xor i8 %107, 1', 'store i8 %108, i8* %22, align 1', '%109 = xor i64 %100, %99', '%110 = lshr i64 %109, 4', '%111 = trunc i64 %110 to i8', '%112 = and i8 %111, 1', 'store i8 %112, i8* %27, align 1', '%113 = icmp eq i64 %100, 0', '%114 = zext i1 %113 to i8', 'store i8 %114, i8* %30, align 1', '%115 = lshr i64 %100, 63', '%116 = trunc i64 %115 to i8', 'store i8 %116, i8* %33, align 1', '%117 = lshr i64 %99, 63', '%118 = xor i64 %115, %117', '%119 = add nuw nsw i64 %118, %115', '%120 = icmp eq i64 %119, 2', '%121 = zext i1 %120 to i8', 'store i8 %121, i8* %39, align 1', '%122 = add i64 %98, 8', 'store i64 %122, i64* %PC, align 8', '%123 = add i64 %99, 40', '%124 = inttoptr i64 %100 to i64*', '%125 = load i64, i64* %124, align 8', 'store i64 %125, i64* %RBP, align 8', 'store i64 %123, i64* %RSP, align 8', '%126 = add i64 %98, 9', 'store i64 %126, i64* %PC, align 8', '%127 = inttoptr i64 %123 to i64*', '%128 = load i64, i64* %127, align 8', 'store i64 %128, i64* %PC, align 8', '%129 = add i64 %99, 48', 'store i64 %129, i64* %RSP, align 8', 'ret %struct.Memory* %88'])
Keep: block_400520:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8D = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: store i64 16, i64* %RAX, align 8
Found line to remove! %40 = add i64 %8, -32
Found line to remove! store i64 %40, i64* %RCX, align 8
Found line to remove! store i64 -4294967296, i64* %RDX, align 8
Found line to remove! %41 = add i64 %8, -12
Found line to remove! %42 = add i64 %11, 33
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Found line to remove! %44 = load i64, i64* %RBP, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = load i32, i32* %EDI, align 4
Found line to remove! %47 = load i64, i64* %PC, align 8
Found line to remove! %48 = add i64 %47, 3
Found line to remove! store i64 %48, i64* %PC, align 8
Found line to remove! %49 = inttoptr i64 %45 to i32*
Found line to remove! store i32 %46, i32* %49, align 4
Found line to remove! %50 = load i64, i64* %RBP, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI, align 8
Found line to remove! %53 = load i64, i64* %PC, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! %56 = load i64, i64* %RBP, align 8
Found line to remove! %57 = add i64 %56, -24
Found line to remove! %58 = load i64, i64* %RDX, align 8
Found line to remove! %59 = load i64, i64* %PC, align 8
Found line to remove! %60 = add i64 %59, 4
Found line to remove! store i64 %60, i64* %PC, align 8
Found line to remove! %61 = inttoptr i64 %57 to i64*
Found line to remove! store i64 %58, i64* %61, align 8
Found line to remove! %62 = load i32, i32* %EAX, align 4
Found line to remove! %63 = zext i32 %62 to i64
Found line to remove! %64 = load i64, i64* %PC, align 8
Found line to remove! store i64 %63, i64* %RDI, align 8
Found line to remove! %65 = load i64, i64* %RCX, align 8
Found line to remove! store i64 %65, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %66 = add i64 %64, 51
Found line to remove! %67 = add i64 %64, 12
Found line to remove! %68 = load i64, i64* %RSP, align 8
Found line to remove! %69 = add i64 %68, -8
Found line to remove! %70 = inttoptr i64 %69 to i64*
Found line to remove! store i64 %67, i64* %70, align 8
Found line to remove! store i64 %69, i64* %RSP, align 8
Found line to remove! store i64 %66, i64* %PC, align 8
Found line to remove! %71 = tail call %struct.Memory* @sub_400580_shiftit_renamed_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
Found line to remove! %72 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %73 = load i64, i64* %RBP, align 8
Found line to remove! %74 = add i64 %73, -24
Found line to remove! %75 = add i64 %72, 14
Found line to remove! store i64 %75, i64* %PC, align 8
Found line to remove! %76 = inttoptr i64 %74 to i64*
Found line to remove! %77 = load i64, i64* %76, align 8
Found line to remove! store i64 %77, i64* %RSI, align 8
Found line to remove! %78 = add i64 %73, -28
Found line to remove! %79 = load i32, i32* %EAX, align 4
Found line to remove! %80 = add i64 %72, 17
Found line to remove! store i64 %80, i64* %PC, align 8
Found line to remove! %81 = inttoptr i64 %78 to i32*
Found line to remove! store i32 %79, i32* %81, align 4
Found line to remove! %82 = load i64, i64* %PC, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %83 = add i64 %82, -330
Found line to remove! %84 = add i64 %82, 7
Found line to remove! %85 = load i64, i64* %RSP, align 8
Found line to remove! %86 = add i64 %85, -8
Found line to remove! %87 = inttoptr i64 %86 to i64*
Found line to remove! store i64 %84, i64* %87, align 8
Found line to remove! store i64 %86, i64* %RSP, align 8
Found line to remove! store i64 %83, i64* %PC, align 8
Found line to remove! %88 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %71)
Found line to remove! %89 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove!Writing '/tmp/tmpa5knr16k.dot'...
Writing '/tmp/tmpa5knr16k.dot':Done

Reading LLVM: /tmp/tmpsc6kwv8o-query.ll
Extracting function [main] from /tmp/tmpsc6kwv8o-query.ll
Dot file generated!
Writing '/tmp/tmpkdc3_b0q.dot'...
Writing '/tmp/tmpkdc3_b0q.dot':Done

Reading LLVM: /tmp/tmprxxqg7vq-target.ll
Extracting function [main] from /tmp/tmprxxqg7vq-target.ll
Dot file generated!
 %90 = load i64, i64* %PC, align 8
Found line to remove! store i64 0, i64* %89, align 8
Found line to remove! %91 = load i64, i64* %RBP, align 8
Found line to remove! %92 = add i64 %91, -32
Found line to remove! %93 = load i32, i32* %EAX, align 4
Found line to remove! %94 = add i64 %90, 6
Found line to remove! store i64 %94, i64* %PC, align 8
Found line to remove! %95 = inttoptr i64 %92 to i32*
Found line to remove! store i32 %93, i32* %95, align 4
Found line to remove! %96 = load i32, i32* %R8D, align 4
Found line to remove! %97 = zext i32 %96 to i64
Found line to remove! %98 = load i64, i64* %PC, align 8
Found line to remove! store i64 %97, i64* %RAX, align 8
Found line to remove! %99 = load i64, i64* %RSP, align 8
Found line to remove! %100 = add i64 %99, 32
Found line to remove! store i64 %100, i64* %RSP, align 8
Found line to remove! %101 = icmp ugt i64 %99, -33
Found line to remove! %102 = zext i1 %101 to i8
Found line to remove! store i8 %102, i8* %15, align 1
Found line to remove! %103 = trunc i64 %100 to i32
Found line to remove! %104 = and i32 %103, 255
Found line to remove! %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12
Found line to remove! %106 = trunc i32 %105 to i8
Found line to remove! %107 = and i8 %106, 1
Found line to remove! %108 = xor i8 %107, 1
Found line to remove! store i8 %108, i8* %22, align 1
Found line to remove! %109 = xor i64 %100, %99
Found line to remove! %110 = lshr i64 %109, 4
Found line to remove! %111 = trunc i64 %110 to i8
Found line to remove! %112 = and i8 %111, 1
Found line to remove! store i8 %112, i8* %27, align 1
Found line to remove! %113 = icmp eq i64 %100, 0
Found line to remove! %114 = zext i1 %113 to i8
Found line to remove! store i8 %114, i8* %30, align 1
Found line to remove! %115 = lshr i64 %100, 63
Found line to remove! %116 = trunc i64 %115 to i8
Found line to remove! store i8 %116, i8* %33, align 1
Found line to remove! %117 = lshr i64 %99, 63
Found line to remove! %118 = xor i64 %115, %117
Found line to remove! %119 = add nuw nsw i64 %118, %115
Found line to remove! %120 = icmp eq i64 %119, 2
Found line to remove! %121 = zext i1 %120 to i8
Found line to remove! store i8 %121, i8* %39, align 1
Found line to remove! %122 = add i64 %98, 8
Found line to remove! store i64 %122, i64* %PC, align 8
Found line to remove! %123 = add i64 %99, 40
Found line to remove! %124 = inttoptr i64 %100 to i64*
Found line to remove! %125 = load i64, i64* %124, align 8
Found line to remove! store i64 %125, i64* %RBP, align 8
Found line to remove! store i64 %123, i64* %RSP, align 8
Found line to remove! %126 = add i64 %98, 9
Found line to remove! store i64 %126, i64* %PC, align 8
Found line to remove! %127 = inttoptr i64 %123 to i64*
Found line to remove! %128 = load i64, i64* %127, align 8
Found line to remove! store i64 %128, i64* %PC, align 8
Found line to remove! %129 = add i64 %99, 48
Found line to remove! store i64 %129, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %88
================ Starting round 2
- 0 %RAX.i44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 store i64 16, i64* %RAX.i44, align 8
- 2 %RDI.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 3 store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i28, align 8
- 4 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90df36488>, {0: {0}, 1: {2, 3}, 2: {1}, 3: {2, 3}, 4: {4}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90df36488>, {0: {0}, 1: {2}, 2: {1}, 3: {3}, 4: {4}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 getelementptr getelementptr
EXACT 3 store store
EXACT 4 ret ret
================ Starting round 3
- 0 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 2 store i64 16, i64* %RAX, align 8
- 3 store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
- 4 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90e2d8730>, {0: {0}, 1: {2}, 2: {1, 3}, 3: {1, 3}, 4: {4}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe90e2d8730>, {0: {0}, 1: {2}, 2: {1}, 3: {3}, 4: {4}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 store store
EXACT 3 store store
EXACT 4 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RAX.i44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 16, i64* %RAX.i44, align 8', '%RDI.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i28, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %RAX.i44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 16, i64* %RAX.i44, align 8
Found line to remove! %RDI.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i28, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 16, i64* %RAX, align 8', 'store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8', 'ret %struct.Memory* %2'])
Keep: block_400520:
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 16, i64* %RAX, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_21/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_21/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
