Writing '/tmp/tmpq6d3221b.dot'...
Writing '/tmp/tmpq6d3221b.dot':Done

Reading LLVM: /tmp/tmpyu2vnotx-query.ll
Extracting function [shiftit] from /tmp/tmpyu2vnotx-query.ll
Dot file generated!
Writing '/tmp/tmpdtt7g6a4.dot'...
Writing '/tmp/tmpdtt7g6a4.dot':Done

Reading LLVM: /tmp/tmpk1n5h7om-target.ll
Extracting function [shiftit] from /tmp/tmpk1n5h7om-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 14 %EDI.i37 = bitcast %union.anon* %11 to i32*
- 15 %12 = add i64 %7, -12
- 16 %13 = load i32, i32* %EDI.i37, align 4
- 17 %14 = add i64 %10, 6
- 18 store i64 %14, i64* %3, align 8
- 19 %15 = inttoptr i64 %12 to i32*
- 20 store i32 %13, i32* %15, align 4
- 21 %RSI.i34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 22 %16 = load i64, i64* %RBP.i, align 8
- 23 %17 = add i64 %16, -16
- 24 %18 = load i64, i64* %RSI.i34, align 8
- 25 %19 = load i64, i64* %3, align 8
- 26 %20 = add i64 %19, 4
- 27 store i64 %20, i64* %3, align 8
- 28 %21 = inttoptr i64 %17 to i64*
- 29 store i64 %18, i64* %21, align 8
- 30 %22 = load i64, i64* %RBP.i, align 8
- 31 %23 = add i64 %22, -16
- 32 %24 = load i64, i64* %3, align 8
- 33 %25 = add i64 %24, 4
- 34 store i64 %25, i64* %3, align 8
- 35 %26 = inttoptr i64 %23 to i64*
- 36 %27 = load i64, i64* %26, align 8
- 37 store i64 %27, i64* %RSI.i34, align 8
- 38 %28 = add i64 %24, 7
- 39 store i64 %28, i64* %3, align 8
- 40 %29 = inttoptr i64 %27 to i64*
- 41 %30 = load i64, i64* %29, align 8
- 42 store i64 %30, i64* %RSI.i34, align 8
- 43 %31 = add i64 %22, -24
- 44 %32 = add i64 %24, 11
- 45 store i64 %32, i64* %3, align 8
- 46 %33 = inttoptr i64 %31 to i64*
- 47 store i64 %30, i64* %33, align 8
- 48 %RDI.i23 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
- 49 %34 = load i64, i64* %RBP.i, align 8
- 50 %35 = add i64 %34, -4
- 51 %36 = load i64, i64* %3, align 8
- 52 %37 = add i64 %36, 3
- 53 store i64 %37, i64* %3, align 8
- 54 %38 = inttoptr i64 %35 to i32*
- 55 %39 = load i32, i32* %38, align 4
- 56 %40 = zext i32 %39 to i64
- 57 store i64 %40, i64* %RDI.i23, align 8
- 58 %41 = add i64 %34, -24
- 59 %42 = add i64 %36, 7
- 60 store i64 %42, i64* %3, align 8
- 61 %43 = inttoptr i64 %41 to i64*
- 62 %44 = load i64, i64* %43, align 8
- 63 store i64 %44, i64* %RSI.i34, align 8
- 64 store i64 %40, i64* %RDI.i23, align 8
- 65 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 66 store i64 %40, i64* %RCX.i, align 8
- 67 %45 = add i64 %36, 14
- 68 store i64 %45, i64* %3, align 8
- 69 %46 = trunc i32 %39 to i6
- 70 \<badref\> = switch i6 %46, label %50 [\l    i6 0, label %routine_shrq__cl___rsi.exit\l    i6 1, label %47\l  ]
- 71 %48 = lshr i64 %44, 63
- 72 %49 = trunc i64 %48 to i8
- 73 \<badref\> = br label %55
- 74 %51 = and i32 %39, 63
- 75 %52 = zext i32 %51 to i64
- 76 %53 = add nsw i64 %52, -1
- 77 %54 = lshr i64 %44, %53
- 78 \<badref\> = br label %55
- 79 %56 = phi i64 [ %54, %50 ], [ %44, %47 ]
- 80 %57 = phi i8 [ 0, %50 ], [ %49, %47 ]
- 81 %58 = trunc i64 %56 to i8
- 82 %59 = and i8 %58, 1
- 83 %60 = lshr i64 %56, 1
- 84 store i64 %60, i64* %RSI.i34, align 8
- 85 %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 86 store i8 %59, i8* %61, align 1
- 87 %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 88 %63 = trunc i64 %60 to i32
- 89 %64 = and i32 %63, 255
- 90 %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
- 91 %66 = trunc i32 %65 to i8
- 92 %67 = and i8 %66, 1
- 93 %68 = xor i8 %67, 1
- 94 store i8 %68, i8* %62, align 1
- 95 %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 96 store i8 0, i8* %69, align 1
- 97 %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 98 %71 = icmp eq i64 %60, 0
- 99 %72 = zext i1 %71 to i8
- 100 store i8 %72, i8* %70, align 1
- 101 %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 102 store i8 0, i8* %73, align 1
- 103 %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 104 store i8 %57, i8* %74, align 1
- 105 \<badref\> = br label %routine_shrq__cl___rsi.exit
- 106 %75 = phi i64 [ %60, %55 ], [ %44, %entry ]
- 107 %76 = add i64 %36, 18
- 108 store i64 %76, i64* %3, align 8
- 109 store i64 %75, i64* %43, align 8
- 110 %77 = load i64, i64* %RBP.i, align 8
- 111 %78 = add i64 %77, -24
- 112 %79 = load i64, i64* %3, align 8
- 113 %80 = add i64 %79, 4
- 114 store i64 %80, i64* %3, align 8
- 115 %81 = inttoptr i64 %78 to i64*
- 116 %82 = load i64, i64* %81, align 8
- 117 store i64 %82, i64* %RSI.i34, align 8
- 118 %RAX.i6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 119 %83 = add i64 %77, -16
- 120 %84 = add i64 %79, 8
- 121 store i64 %84, i64* %3, align 8
- 122 %85 = inttoptr i64 %83 to i64*
- 123 %86 = load i64, i64* %85, align 8
- 124 store i64 %86, i64* %RAX.i6, align 8
- 125 %87 = add i64 %79, 11
- 126 store i64 %87, i64* %3, align 8
- 127 %88 = inttoptr i64 %86 to i64*
- 128 store i64 %82, i64* %88, align 8
- 129 %89 = load i64, i64* %3, align 8
- 130 %90 = add i64 %89, 1
- 131 store i64 %90, i64* %3, align 8
- 132 %91 = load i64, i64* %6, align 8
- 133 %92 = add i64 %91, 8
- 134 %93 = inttoptr i64 %91 to i64*
- 135 %94 = load i64, i64* %93, align 8
- 136 store i64 %94, i64* %RBP.i, align 8
- 137 store i64 %92, i64* %6, align 8
- 138 %95 = add i64 %89, 2
- 139 store i64 %95, i64* %3, align 8
- 140 %96 = inttoptr i64 %92 to i64*
- 141 %97 = load i64, i64* %96, align 8
- 142 store i64 %97, i64* %3, align 8
- 143 %98 = add i64 %91, 16
- 144 store i64 %98, i64* %6, align 8
- 145 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba25fbf8>, {0: {0}, 1: {7}, 2: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 3: {9, 130}, 4: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 5: {11}, 6: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 7: {13}, 8: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 9: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 10: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 11: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 12: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 13: {1}, 14: {2}, 15: {19}, 16: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 17: {21}, 18: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 19: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 20: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 21: {5}, 22: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 23: {26, 34, 119}, 24: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 25: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 26: {114, 36, 29}, 27: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 28: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 29: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 30: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 31: {26, 34, 119}, 32: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 33: {114, 36, 29}, 34: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 35: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 36: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 37: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 38: {41, 61}, 39: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 40: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 41: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 42: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 43: {112, 60, 46}, 44: {125, 47}, 45: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 46: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 47: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 48: {6}, 49: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 50: {52}, 51: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 52: {54}, 53: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 54: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 55: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 56: {100, 58, 76}, 57: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 58: {112, 60, 46}, 59: {41, 61}, 60: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 61: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 62: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 63: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 64: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 65: {4}, 66: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 67: {68}, 68: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 69: {70, 73, 82, 89, 92}, 70: {71}, 71: {72}, 72: {70, 73, 82, 89, 92}, 73: {74, 106, 79}, 74: {75}, 75: {100, 58, 76}, 76: {77}, 77: {78}, 78: {74, 106, 79}, 79: {80, 81, 107}, 80: {80, 81, 107}, 81: {70, 73, 82, 89, 92}, 82: {83, 93}, 83: {84}, 84: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 85: {86}, 86: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 87: {88}, 88: {70, 73, 82, 89, 92}, 89: {90}, 90: {91}, 91: {70, 73, 82, 89, 92}, 92: {83, 93}, 93: {94}, 94: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 95: {96}, 96: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 97: {98}, 98: {99}, 99: {100, 58, 76}, 100: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 101: {102}, 102: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 103: {104}, 104: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 105: {74, 106, 79}, 106: {80, 81, 107}, 107: {108}, 108: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 109: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 110: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 111: {112, 60, 46}, 112: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 113: {114, 36, 29}, 114: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 115: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 116: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 117: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 118: {3}, 119: {26, 34, 119}, 120: {120, 133}, 121: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 122: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 123: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 124: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 125: {125, 47}, 126: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 127: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 128: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 129: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 130: {9, 130}, 131: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 132: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 133: {120, 133}, 134: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 135: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 136: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 137: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 138: {138}, 139: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 140: {38, 134, 43, 140, 14, 49, 116, 23, 56, 122, 127, 63, 31}, 141: {129, 132, 135, 8, 12, 141, 17, 20, 25, 27, 28, 33, 35, 39, 44, 51, 53, 57, 64, 111, 113, 117, 123}, 142: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 143: {143}, 144: {128, 131, 136, 137, 10, 139, 142, 15, 16, 144, 18, 22, 24, 30, 32, 37, 40, 42, 45, 48, 50, 55, 59, 62, 65, 66, 67, 69, 85, 87, 95, 97, 101, 103, 105, 109, 110, 115, 118, 121, 124, 126}, 145: {145}})
Equivalent! frozenset({114, 36, 29}) {33, 26, 113}
Equivalent! frozenset({115, 37, 30}) {34, 27, 114}
Equivalent! frozenset({41, 61}) {59, 38}
Equivalent! frozenset({42, 62}) {60, 39}
Equivalent! frozenset({125, 47}) {44, 125}
Equivalent! frozenset({48, 126}) {45, 126}
Equivalent! frozenset({51, 111}) {49, 110}
Equivalent! frozenset({66, 59}) {64, 57}
Equivalent! frozenset({112, 60}) {58, 111}
Equivalent! frozenset({116, 63}) {115, 61}
Equivalent! frozenset({64, 117}) {116, 62}
Equivalent! frozenset({65, 118}) {117, 63}
Equivalent! frozenset({74, 106, 79}) {73, 78, 105}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba25fbf8>, {0: {0}, 1: {7}, 2: {8}, 3: {9, 130}, 4: {10, 131}, 5: {11}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16}, 11: {17}, 12: {18}, 13: {1}, 14: {2}, 15: {19}, 16: {20}, 17: {21}, 18: {22}, 19: {23}, 20: {24}, 21: {5}, 22: {25}, 23: {26}, 24: {27}, 25: {113, 35, 28}, 26: {36}, 27: {37}, 28: {31}, 29: {32}, 30: {33}, 31: {34}, 32: {113, 35, 28, 53}, 33: {114}, 34: {115}, 35: {38}, 36: {39}, 37: {40}, 38: {61}, 39: {62}, 40: {43}, 41: {44}, 42: {45}, 43: {46}, 44: {125}, 45: {48}, 46: {49}, 47: {50}, 48: {6}, 49: {51}, 50: {52}, 51: {35, 53}, 52: {54}, 53: {55}, 54: {56}, 55: {57}, 56: {58}, 57: {59}, 58: {112}, 59: {41}, 60: {42}, 61: {63}, 62: {117}, 63: {118}, 64: {66}, 65: {4}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {72}, 72: {73}, 73: {74}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {106}, 79: {80}, 80: {81}, 81: {82}, 82: {83}, 83: {84}, 84: {85}, 85: {86}, 86: {87}, 87: {88}, 88: {89}, 89: {90}, 90: {91}, 91: {92}, 92: {93}, 93: {94}, 94: {95}, 95: {96}, 96: {97}, 97: {98}, 98: {99}, 99: {100}, 100: {101}, 101: {102}, 102: {103}, 103: {104}, 104: {105}, 105: {79}, 106: {107}, 107: {108}, 108: {109}, 109: {110}, 110: {111}, 111: {60}, 112: {113, 35, 28}, 113: {29}, 114: {30}, 115: {116}, 116: {64}, 117: {65}, 118: {3}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {47}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
MORE 3 POT: 2
MORE 4 POT: 2
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 bitcast bitcast
EXACT 15 add add
EXACT 16 load load
EXACT 17 add add
EXACT 18 store store
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 load load
EXACT 23 add add
EXACT 24 load load
MORE 25 POT: 3
EXACT 26 add add
EXACT 27 store store
EXACT 28 inttoptr inttoptr
EXACT 29 store store
EXACT 30 load load
EXACT 31 add add
MORE 32 POT: 4
EXACT 33 add add
EXACT 34 store store
EXACT 35 inttoptr inttoptr
EXACT 36 load load
EXACT 37 store store
EXACT 38 add add
EXACT 39 store store
EXACT 40 inttoptr inttoptr
EXACT 41 load load
EXACT 42 store store
EXACT 43 add add
EXACT 44 add add
EXACT 45 store store
EXACT 46 inttoptr inttoptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 load load
EXACT 50 add add
MORE 51 POT: 2
EXACT 52 add add
EXACT 53 store store
EXACT 54 inttoptr inttoptr
EXACT 55 load load
EXACT 56 zext zext
EXACT 57 store store
EXACT 58 add add
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 load load
EXACT 63 store store
EXACT 64 store store
EXACT 65 getelementptr getelementptr
EXACT 66 store store
EXACT 67 add add
EXACT 68 store store
EXACT 69 trunc trunc
EXACT 70 switch switch
EXACT 71 lshr lshr
EXACT 72 trunc trunc
EXACT 73 br br
EXACT 74 and and
EXACT 75 zext zext
EXACT 76 add add
EXACT 77 lshr lshr
EXACT 78 br br
EXACT 79 phi phi
EXACT 80 phi phi
EXACT 81 trunc trunc
EXACT 82 and and
EXACT 83 lshr lshr
EXACT 84 store store
EXACT 85 getelementptr getelementptr
EXACT 86 store store
EXACT 87 getelementptr getelementptr
EXACT 88 trunc trunc
EXACT 89 and and
EXACT 90 tail tail
EXACT 91 trunc trunc
EXACT 92 and and
EXACT 93 xor xor
EXACT 94 store store
EXACT 95 getelementptr getelementptr
EXACT 96 store store
EXACT 97 getelementptr getelementptr
EXACT 98 icmp icmp
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 getelementptr getelementptr
EXACT 102 store store
EXACT 103 getelementptr getelementptr
EXACT 104 store store
EXACT 105 br br
EXACT 106 phi phi
EXACT 107 add add
EXACT 108 store store
EXACT 109 store store
EXACT 110 load load
EXACT 111 add add
MORE 112 POT: 3
EXACT 113 add add
EXACT 114 store store
EXACT 115 inttoptr inttoptr
EXACT 116 load load
EXACT 117 store store
EXACT 118 getelementptr getelementptr
EXACT 119 add add
EXACT 120 add add
EXACT 121 store store
EXACT 122 inttoptr inttoptr
EXACT 123 load load
EXACT 124 store store
EXACT 125 add add
EXACT 126 store store
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 load load
EXACT 130 add add
EXACT 131 store store
EXACT 132 load load
EXACT 133 add add
EXACT 134 inttoptr inttoptr
EXACT 135 load load
EXACT 136 store store
EXACT 137 store store
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 load load
EXACT 142 store store
EXACT 143 add add
EXACT 144 store store
EXACT 145 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 2 %EDI = bitcast %union.anon* %3 to i32*
- 3 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 4 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 5 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 6 %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %4 = load i64, i64* %RBP, align 8
- 9 %5 = add i64 %1, 1
- 10 store i64 %5, i64* %PC, align 8
- 11 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %7 = load i64, i64* %6, align 8
- 13 %8 = add i64 %7, -8
- 14 %9 = inttoptr i64 %8 to i64*
- 15 store i64 %4, i64* %9, align 8
- 16 store i64 %8, i64* %6, align 8
- 17 %10 = load i64, i64* %PC, align 8
- 18 store i64 %8, i64* %RBP, align 8
- 19 %11 = add i64 %7, -12
- 20 %12 = load i32, i32* %EDI, align 4
- 21 %13 = add i64 %10, 6
- 22 store i64 %13, i64* %PC, align 8
- 23 %14 = inttoptr i64 %11 to i32*
- 24 store i32 %12, i32* %14, align 4
- 25 %15 = load i64, i64* %RBP, align 8
- 26 %16 = add i64 %15, -16
- 27 %17 = load i64, i64* %RSI, align 8
- 28 %18 = load i64, i64* %PC, align 8
- 29 %19 = add i64 %18, 4
- 30 store i64 %19, i64* %PC, align 8
- 31 %20 = inttoptr i64 %16 to i64*
- 32 store i64 %17, i64* %20, align 8
- 33 %21 = load i64, i64* %RBP, align 8
- 34 %22 = add i64 %21, -16
- 35 %23 = load i64, i64* %PC, align 8
- 36 %24 = add i64 %23, 4
- 37 store i64 %24, i64* %PC, align 8
- 38 %25 = inttoptr i64 %22 to i64*
- 39 %26 = load i64, i64* %25, align 8
- 40 store i64 %26, i64* %RSI, align 8
- 41 %27 = add i64 %23, 7
- 42 store i64 %27, i64* %PC, align 8
- 43 %28 = inttoptr i64 %26 to i64*
- 44 %29 = load i64, i64* %28, align 8
- 45 store i64 %29, i64* %RSI, align 8
- 46 %30 = add i64 %21, -24
- 47 %31 = add i64 %23, 11
- 48 store i64 %31, i64* %PC, align 8
- 49 %32 = inttoptr i64 %30 to i64*
- 50 store i64 %29, i64* %32, align 8
- 51 %33 = load i64, i64* %RBP, align 8
- 52 %34 = add i64 %33, -4
- 53 %35 = load i64, i64* %PC, align 8
- 54 %36 = add i64 %35, 3
- 55 store i64 %36, i64* %PC, align 8
- 56 %37 = inttoptr i64 %34 to i32*
- 57 %38 = load i32, i32* %37, align 4
- 58 %39 = zext i32 %38 to i64
- 59 store i64 %39, i64* %RDI, align 8
- 60 %40 = add i64 %33, -24
- 61 %41 = add i64 %35, 7
- 62 store i64 %41, i64* %PC, align 8
- 63 %42 = inttoptr i64 %40 to i64*
- 64 %43 = load i64, i64* %42, align 8
- 65 store i64 %43, i64* %RSI, align 8
- 66 store i64 %39, i64* %RDI, align 8
- 67 store i64 %39, i64* %RCX, align 8
- 68 %44 = add i64 %35, 14
- 69 store i64 %44, i64* %PC, align 8
- 70 %45 = trunc i32 %38 to i6
- 71 \<badref\> = switch i6 %45, label %49 [\l    i6 0, label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit\l    i6 1, label %46\l  ]
- 72 %47 = lshr i64 %43, 63
- 73 %48 = trunc i64 %47 to i8
- 74 \<badref\> = br label %54
- 75 %50 = and i32 %38, 63
- 76 %51 = zext i32 %50 to i64
- 77 %52 = add nsw i64 %51, -1
- 78 %53 = lshr i64 %43, %52
- 79 \<badref\> = br label %54
- 80 %55 = phi i64 [ %53, %49 ], [ %43, %46 ]
- 81 %56 = phi i8 [ 0, %49 ], [ %48, %46 ]
- 82 %57 = trunc i64 %55 to i8
- 83 %58 = and i8 %57, 1
- 84 %59 = lshr i64 %55, 1
- 85 store i64 %59, i64* %RSI, align 8
- 86 %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 87 store i8 %58, i8* %60, align 1
- 88 %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 89 %62 = trunc i64 %59 to i32
- 90 %63 = and i32 %62, 255
- 91 %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #12
- 92 %65 = trunc i32 %64 to i8
- 93 %66 = and i8 %65, 1
- 94 %67 = xor i8 %66, 1
- 95 store i8 %67, i8* %61, align 1
- 96 %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 97 store i8 0, i8* %68, align 1
- 98 %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 99 %70 = icmp eq i64 %59, 0
- 100 %71 = zext i1 %70 to i8
- 101 store i8 %71, i8* %69, align 1
- 102 %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 103 store i8 0, i8* %72, align 1
- 104 %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 105 store i8 %56, i8* %73, align 1
- 106 \<badref\> = br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
- 107 %74 = phi i64 [ %59, %54 ], [ %43, %block_400580 ]
- 108 %75 = add i64 %35, 18
- 109 store i64 %75, i64* %PC, align 8
- 110 store i64 %74, i64* %42, align 8
- 111 %76 = load i64, i64* %RBP, align 8
- 112 %77 = add i64 %76, -24
- 113 %78 = load i64, i64* %PC, align 8
- 114 %79 = add i64 %78, 4
- 115 store i64 %79, i64* %PC, align 8
- 116 %80 = inttoptr i64 %77 to i64*
- 117 %81 = load i64, i64* %80, align 8
- 118 store i64 %81, i64* %RSI, align 8
- 119 %82 = add i64 %76, -16
- 120 %83 = add i64 %78, 8
- 121 store i64 %83, i64* %PC, align 8
- 122 %84 = inttoptr i64 %82 to i64*
- 123 %85 = load i64, i64* %84, align 8
- 124 store i64 %85, i64* %RAX, align 8
- 125 %86 = add i64 %78, 11
- 126 store i64 %86, i64* %PC, align 8
- 127 %87 = inttoptr i64 %85 to i64*
- 128 store i64 %81, i64* %87, align 8
- 129 %88 = load i64, i64* %PC, align 8
- 130 %89 = add i64 %88, 1
- 131 store i64 %89, i64* %PC, align 8
- 132 %90 = load i64, i64* %6, align 8
- 133 %91 = add i64 %90, 8
- 134 %92 = inttoptr i64 %90 to i64*
- 135 %93 = load i64, i64* %92, align 8
- 136 store i64 %93, i64* %RBP, align 8
- 137 store i64 %91, i64* %6, align 8
- 138 %94 = add i64 %88, 2
- 139 store i64 %94, i64* %PC, align 8
- 140 %95 = inttoptr i64 %91 to i64*
- 141 %96 = load i64, i64* %95, align 8
- 142 store i64 %96, i64* %PC, align 8
- 143 %97 = add i64 %90, 16
- 144 store i64 %97, i64* %6, align 8
- 145 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba25fa60>, {0: {0}, 1: {13}, 2: {14}, 3: {118}, 4: {65}, 5: {21}, 6: {48}, 7: {1}, 8: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 9: {130, 3}, 10: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 11: {5}, 12: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 13: {7}, 14: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 15: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 16: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 17: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 18: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 19: {15}, 20: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 21: {17}, 22: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 23: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 24: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 25: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 26: {31, 119, 23}, 27: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 28: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 29: {33, 26, 113}, 30: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 31: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 32: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 33: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 34: {31, 119, 23}, 35: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 36: {33, 26, 113}, 37: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 38: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 39: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 40: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 41: {59, 38}, 42: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 43: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 44: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 45: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 46: {58, 43, 111}, 47: {44, 125}, 48: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 49: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 50: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 51: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 52: {50}, 53: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 54: {52}, 55: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 56: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 57: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 58: {56, 99, 75}, 59: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 60: {58, 43, 111}, 61: {59, 38}, 62: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 63: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 64: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 65: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 66: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 67: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 68: {67}, 69: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 70: {69, 72, 81, 88, 91}, 71: {70}, 72: {71}, 73: {69, 72, 81, 88, 91}, 74: {73, 78, 105}, 75: {74}, 76: {56, 99, 75}, 77: {76}, 78: {77}, 79: {73, 78, 105}, 80: {80, 106, 79}, 81: {80, 106, 79}, 82: {69, 72, 81, 88, 91}, 83: {82, 92}, 84: {83}, 85: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 86: {85}, 87: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 88: {87}, 89: {69, 72, 81, 88, 91}, 90: {89}, 91: {90}, 92: {69, 72, 81, 88, 91}, 93: {82, 92}, 94: {93}, 95: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 96: {95}, 97: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 98: {97}, 99: {98}, 100: {56, 99, 75}, 101: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 102: {101}, 103: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 104: {103}, 105: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 106: {73, 78, 105}, 107: {80, 106, 79}, 108: {107}, 109: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 110: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 111: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 112: {58, 43, 111}, 113: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 114: {33, 26, 113}, 115: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 116: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 117: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 118: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 119: {31, 119, 23}, 120: {120, 133}, 121: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 122: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 123: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 124: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 125: {44, 125}, 126: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 127: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 128: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 129: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 130: {130, 3}, 131: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 132: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 133: {120, 133}, 134: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 135: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 136: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 137: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 138: {138}, 139: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 140: {35, 134, 8, 40, 140, 46, 19, 115, 54, 122, 28, 61, 127}, 141: {129, 2, 132, 6, 135, 11, 141, 16, 22, 24, 25, 30, 32, 36, 41, 49, 51, 55, 62, 110, 112, 116, 123}, 142: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 143: {143}, 144: {128, 131, 4, 136, 9, 10, 137, 12, 139, 142, 144, 18, 20, 27, 29, 34, 37, 39, 42, 45, 47, 53, 57, 60, 63, 64, 66, 68, 84, 86, 94, 96, 100, 102, 104, 108, 109, 114, 117, 121, 124, 126}, 145: {145}})
Equivalent! frozenset({33, 26, 113}) {114, 36, 29}
Equivalent! frozenset({34, 27, 114}) {115, 37, 30}
Equivalent! frozenset({59, 38}) {41, 61}
Equivalent! frozenset({60, 39}) {42, 62}
Equivalent! frozenset({44, 125}) {125, 47}
Equivalent! frozenset({45, 126}) {48, 126}
Equivalent! frozenset({49, 110}) {51, 111}
Equivalent! frozenset({64, 57}) {66, 59}
Equivalent! frozenset({58, 111}) {112, 60}
Equivalent! frozenset({115, 61}) {116, 63}
Equivalent! frozenset({116, 62}) {64, 117}
Equivalent! frozenset({117, 63}) {65, 118}
Equivalent! frozenset({73, 78, 105}) {74, 106, 79}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba25fa60>, {0: {0}, 1: {13}, 2: {14}, 3: {118}, 4: {65}, 5: {21}, 6: {48}, 7: {1}, 8: {2}, 9: {130, 3}, 10: {131, 4}, 11: {5}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10}, 17: {11}, 18: {12}, 19: {15}, 20: {16}, 21: {17}, 22: {18}, 23: {19}, 24: {20}, 25: {22}, 26: {23}, 27: {24}, 28: {32, 25, 112}, 29: {113}, 30: {114}, 31: {28}, 32: {29}, 33: {30}, 34: {31}, 35: {32, 25, 51, 112}, 36: {26}, 37: {27}, 38: {35}, 39: {36}, 40: {37}, 41: {59}, 42: {60}, 43: {40}, 44: {41}, 45: {42}, 46: {43}, 47: {125}, 48: {45}, 49: {46}, 50: {47}, 51: {49}, 52: {50}, 53: {32, 51}, 54: {52}, 55: {53}, 56: {54}, 57: {55}, 58: {56}, 59: {57}, 60: {111}, 61: {38}, 62: {39}, 63: {61}, 64: {116}, 65: {117}, 66: {64}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {71}, 73: {72}, 74: {73}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {105}, 80: {79}, 81: {80}, 82: {81}, 83: {82}, 84: {83}, 85: {84}, 86: {85}, 87: {86}, 88: {87}, 89: {88}, 90: {89}, 91: {90}, 92: {91}, 93: {92}, 94: {93}, 95: {94}, 96: {95}, 97: {96}, 98: {97}, 99: {98}, 100: {99}, 101: {100}, 102: {101}, 103: {102}, 104: {103}, 105: {104}, 106: {78}, 107: {106}, 108: {107}, 109: {108}, 110: {109}, 111: {110}, 112: {58}, 113: {32, 25, 112}, 114: {33}, 115: {34}, 116: {115}, 117: {62}, 118: {63}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {44}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 load load
MORE 9 POT: 2
MORE 10 POT: 2
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
EXACT 16 store store
EXACT 17 load load
EXACT 18 store store
EXACT 19 add add
EXACT 20 load load
EXACT 21 add add
EXACT 22 store store
EXACT 23 inttoptr inttoptr
EXACT 24 store store
EXACT 25 load load
EXACT 26 add add
EXACT 27 load load
MORE 28 POT: 3
EXACT 29 add add
EXACT 30 store store
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 load load
EXACT 34 add add
MORE 35 POT: 4
EXACT 36 add add
EXACT 37 store store
EXACT 38 inttoptr inttoptr
EXACT 39 load load
EXACT 40 store store
EXACT 41 add add
EXACT 42 store store
EXACT 43 inttoptr inttoptr
EXACT 44 load load
EXACT 45 store store
EXACT 46 add add
EXACT 47 add add
EXACT 48 store store
EXACT 49 inttoptr inttoptr
EXACT 50 store store
EXACT 51 load load
EXACT 52 add add
MORE 53 POT: 2
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 load load
EXACT 58 zext zext
EXACT 59 store store
EXACT 60 add add
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 load load
EXACT 65 store store
EXACT 66 store store
EXACT 67 store store
EXACT 68 add add
EXACT 69 store store
EXACT 70 trunc trunc
EXACT 71 switch switch
EXACT 72 lshr lshr
EXACT 73 trunc trunc
EXACT 74 br br
EXACT 75 and and
EXACT 76 zext zext
EXACT 77 add add
EXACT 78 lshr lshr
EXACT 79 br br
EXACT 80 phi phi
EXACT 81 phi phi
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 lshr lshr
EXACT 85 store store
EXACT 86 getelementptr getelementptr
EXACT 87 store store
EXACT 88 getelementptr getelementptr
EXACT 89 trunc trunc
EXACT 90 and and
EXACT 91 tail tail
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 xor xor
EXACT 95 store store
EXACT 96 getelementptr getelementptr
EXACT 97 store store
EXACT 98 getelementptr getelementptr
EXACT 99 icmp icmp
EXACT 100 zext zext
EXACT 101 store store
EXACT 102 getelementptr getelementptr
EXACT 103 store store
EXACT 104 getelementptr getelementptr
EXACT 105 store store
EXACT 106 br br
EXACT 107 phi phi
EXACT 108 add add
EXACT 109 store store
EXACT 110 store store
EXACT 111 load load
EXACT 112 add add
MORE 113 POT: 3
EXACT 114 add add
EXACT 115 store store
EXACT 116 inttoptr inttoptr
EXACT 117 load load
EXACT 118 store store
EXACT 119 add add
EXACT 120 add add
EXACT 121 store store
EXACT 122 inttoptr inttoptr
EXACT 123 load load
EXACT 124 store store
EXACT 125 add add
EXACT 126 store store
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 load load
EXACT 130 add add
EXACT 131 store store
EXACT 132 load load
EXACT 133 add add
EXACT 134 inttoptr inttoptr
EXACT 135 load load
EXACT 136 store store
EXACT 137 store store
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 load load
EXACT 142 store store
EXACT 143 add add
EXACT 144 store store
EXACT 145 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i37 = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i37, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%RSI.i34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%16 = load i64, i64* %RBP.i, align 8', '%17 = add i64 %16, -16', '%18 = load i64, i64* %RSI.i34, align 8', '%20 = add i64 %19, 4', 'store i64 %20, i64* %3, align 8', '%21 = inttoptr i64 %17 to i64*', 'store i64 %18, i64* %21, align 8', '%22 = load i64, i64* %RBP.i, align 8', '%23 = add i64 %22, -16', '%25 = add i64 %24, 4', 'store i64 %25, i64* %3, align 8', '%26 = inttoptr i64 %23 to i64*', '%27 = load i64, i64* %26, align 8', 'store i64 %27, i64* %RSI.i34, align 8', '%28 = add i64 %24, 7', 'store i64 %28, i64* %3, align 8', '%29 = inttoptr i64 %27 to i64*', '%30 = load i64, i64* %29, align 8', 'store i64 %30, i64* %RSI.i34, align 8', '%31 = add i64 %22, -24', '%32 = add i64 %24, 11', 'store i64 %32, i64* %3, align 8', '%33 = inttoptr i64 %31 to i64*', 'store i64 %30, i64* %33, align 8', '%RDI.i23 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0', '%37 = add i64 %36, 3', 'store i64 %37, i64* %3, align 8', '%40 = zext i32 %39 to i64', 'store i64 %40, i64* %RDI.i23, align 8', '%41 = add i64 %34, -24', '%42 = add i64 %36, 7', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %41 to i64*', '%44 = load i64, i64* %43, align 8', 'store i64 %44, i64* %RSI.i34, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 %40, i64* %RCX.i, align 8', '%45 = add i64 %36, 14', 'store i64 %45, i64* %3, align 8', '%48 = lshr i64 %44, 63', '%49 = trunc i64 %48 to i8', '%51 = and i32 %39, 63', '%52 = zext i32 %51 to i64', '%53 = add nsw i64 %52, -1', '%54 = lshr i64 %44, %53', '%56 = phi i64 [ %54, %50 ], [ %44, %47 ]', '%57 = phi i8 [ 0, %50 ], [ %49, %47 ]', '%58 = trunc i64 %56 to i8', '%59 = and i8 %58, 1', '%60 = lshr i64 %56, 1', 'store i64 %60, i64* %RSI.i34, align 8', '%61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %59, i8* %61, align 1', '%62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%63 = trunc i64 %60 to i32', '%64 = and i32 %63, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64)', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %62, align 1', '%69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 0, i8* %69, align 1', '%70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%71 = icmp eq i64 %60, 0', '%72 = zext i1 %71 to i8', 'store i8 %72, i8* %70, align 1', '%73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 0, i8* %73, align 1', '%74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %57, i8* %74, align 1', '%75 = phi i64 [ %60, %55 ], [ %44, %entry ]', '%76 = add i64 %36, 18', 'store i64 %76, i64* %3, align 8', 'store i64 %75, i64* %43, align 8', '%77 = load i64, i64* %RBP.i, align 8', '%78 = add i64 %77, -24', '%80 = add i64 %79, 4', 'store i64 %80, i64* %3, align 8', '%81 = inttoptr i64 %78 to i64*', '%82 = load i64, i64* %81, align 8', 'store i64 %82, i64* %RSI.i34, align 8', '%RAX.i6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%83 = add i64 %77, -16', '%84 = add i64 %79, 8', 'store i64 %84, i64* %3, align 8', '%85 = inttoptr i64 %83 to i64*', '%86 = load i64, i64* %85, align 8', 'store i64 %86, i64* %RAX.i6, align 8', '%87 = add i64 %79, 11', 'store i64 %87, i64* %3, align 8', '%88 = inttoptr i64 %86 to i64*', 'store i64 %82, i64* %88, align 8', '%89 = load i64, i64* %3, align 8', '%90 = add i64 %89, 1', 'store i64 %90, i64* %3, align 8', '%91 = load i64, i64* %6, align 8', '%92 = add i64 %91, 8', '%93 = inttoptr i64 %91 to i64*', '%94 = load i64, i64* %93, align 8', 'store i64 %94, i64* %RBP.i, align 8', 'store i64 %92, i64* %6, align 8', '%95 = add i64 %89, 2', 'store i64 %95, i64* %3, align 8', '%96 = inttoptr i64 %92 to i64*', '%97 = load i64, i64* %96, align 8', 'store i64 %97, i64* %3, align 8', '%98 = add i64 %91, 16', 'store i64 %98, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Keep: %5 = add i64 %1, 1
Keep: store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i37 = bitcast %union.anon* %11 to i32*
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = load i32, i32* %EDI.i37, align 4
Found line to remove! %14 = add i64 %10, 6
Found line to remove! store i64 %14, i64* %3, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Found line to remove! %RSI.i34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %16 = load i64, i64* %RBP.i, align 8
Found line to remove! %17 = add i64 %16, -16
Found line to remove! %18 = load i64, i64* %RSI.i34, align 8
Keep: %19 = load i64, i64* %3, align 8
Found line to remove! %20 = add i64 %19, 4
Found line to remove! store i64 %20, i64* %3, align 8
Found line to remove! %21 = inttoptr i64 %17 to i64*
Found line to remove! store i64 %18, i64* %21, align 8
Found line to remove! %22 = load i64, i64* %RBP.i, align 8
Found line to remove! %23 = add i64 %22, -16
Keep: %24 = load i64, i64* %3, align 8
Found line to remove! %25 = add i64 %24, 4
Found line to remove! store i64 %25, i64* %3, align 8
Found line to remove! %26 = inttoptr i64 %23 to i64*
Found line to remove! %27 = load i64, i64* %26, align 8
Found line to remove! store i64 %27, i64* %RSI.i34, align 8
Found line to remove! %28 = add i64 %24, 7
Found line to remove! store i64 %28, i64* %3, align 8
Found line to remove! %29 = inttoptr i64 %27 to i64*
Found line to remove! %30 = load i64, i64* %29, align 8
Found line to remove! store i64 %30, i64* %RSI.i34, align 8
Found line to remove! %31 = add i64 %22, -24
Found line to remove! %32 = add i64 %24, 11
Found line to remove! store i64 %32, i64* %3, align 8
Found line to remove! %33 = inttoptr i64 %31 to i64*
Found line to remove! store i64 %30, i64* %33, align 8
Found line to remove! %RDI.i23 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
Keep: %34 = load i64, i64* %RBP.i, align 8
Keep: %35 = add i64 %34, -4
Keep: %36 = load i64, i64* %3, align 8
Found line to remove! %37 = add i64 %36, 3
Found line to remove! store i64 %37, i64* %3, align 8
Keep: %38 = inttoptr i64 %35 to i32*
Keep: %39 = load i32, i32* %38, align 4
Found line to remove! %40 = zext i32 %39 to i64
Found line to remove! store i64 %40, i64* %RDI.i23, align 8
Found line to remove! %41 = add i64 %34, -24
Found line to remove! %42 = add i64 %36, 7
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %41 to i64*
Found line to remove! %44 = load i64, i64* %43, align 8
Found line to remove! store i64 %44, i64* %RSI.i34, align 8
Found line to remove! store i64 %40, i64* %RDI.i23, align 8
Found line to remove! %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 %40, i64* %RCX.i, align 8
Found line to remove! %45 = add i64 %36, 14
Found line to remove! store i64 %45, i64* %3, align 8
Keep: %46 = trunc i32 %39 to i6
Keep: switch i6 %46, label %50 [
Keep: i6 0, label %routine_shrq__cl___rsi.exit
Keep: i6 1, label %47
Keep: ]
Keep: 
Keep: ; <label>:47:                                     ; preds = %entry
Found line to remove! %48 = lshr i64 %44, 63
Found line to remove! %49 = trunc i64 %48 to i8
Keep: br label %55
Keep: 
Keep: ; <label>:50:                                     ; preds = %entry
Found line to remove! %51 = and i32 %39, 63
Found line to remove! %52 = zext i32 %51 to i64
Found line to remove! %53 = add nsw i64 %52, -1
Found line to remove! %54 = lshr i64 %44, %53
Keep: br label %55
Keep: 
Keep: ; <label>:55:                                     ; preds = %50, %47
Found line to remove! %56 = phi i64 [ %54, %50 ], [ %44, %47 ]
Found line to remove! %57 = phi i8 [ 0, %50 ], [ %49, %47 ]
Found line to remove! %58 = trunc i64 %56 to i8
Found line to remove! %59 = and i8 %58, 1
Found line to remove! %60 = lshr i64 %56, 1
Found line to remove! store i64 %60, i64* %RSI.i34, align 8
Found line to remove! %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %59, i8* %61, align 1
Found line to remove! %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %63 = trunc i64 %60 to i32
Found line to remove! %64 = and i32 %63, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %62, align 1
Found line to remove! %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 0, i8* %69, align 1
Found line to remove! %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %71 = icmp eq i64 %60, 0
Found line to remove! %72 = zext i1 %71 to i8
Found line to remove! store i8 %72, i8* %70, align 1
Found line to remove! %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 0, i8* %73, align 1
Found line to remove! %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %57, i8* %74, align 1
Keep: br label %routine_shrq__cl___rsi.exit
Keep: 
Keep: routine_shrq__cl___rsi.exit:                      ; preds = %55, %entry
Found line to remove! %75 = phi i64 [ %60, %55 ], [ %44, %entry ]
Found line to remove! %76 = add i64 %36, 18
Found line to remove! store i64 %76, i64* %3, align 8
Found line to remove! store i64 %75, i64* %43, align 8
Found line to remove! %77 = load i64, i64* %RBP.i, align 8
Found line to remove! %78 = add i64 %77, -24
Keep: %79 = load i64, i64* %3, align 8
Found line to remove! %80 = add i64 %79, 4
Found line to remove! store i64 %80, i64* %3, align 8
Found line to remove! %81 = inttoptr i64 %78 to i64*
Found line to remove! %82 = load i64, i64* %81, align 8
Found line to remove! store i64 %82, i64* %RSI.i34, align 8
Found line to remove! %RAX.i6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %83 = add i64 %77, -16
Found line to remove! %84 = add i64 %79, 8
Found line to remove! store i64 %84, i64* %3, align 8
Found line to remove! %85 = inttoptr i64 %83 to i64*
Found line to remove! %86 = load i64, i64* %85, align 8
Found line to remove! store i64 %86, i64* %RAX.i6, align 8
Found line to remove! %87 = add i64 %79, 11
Found line to remove! store i64 %87, i64* %3, align 8
Found line to remove! %88 = inttoptr i64 %86 to i64*
Found line to remove! store i64 %82, i64* %88, align 8
Found line to remove! %89 = load i64, i64* %3, align 8
Found line to remove! %90 = add i64 %89, 1
Found line to remove! store i64 %90, i64* %3, align 8
Found line to remove! %91 = load i64, i64* %6, align 8
Found line to remove! %92 = add i64 %91, 8
Found line to remove! %93 = inttoptr i64 %91 to i64*
Found line to remove! %94 = load i64, i64* %93, align 8
Found line to remove! store i64 %94, i64* %RBP.i, align 8
Found line to remove! store i64 %92, i64* %6, align 8
Found line to remove! %95 = add i64 %89, 2
Found line to remove! store i64 %95, i64* %3, align 8
Found line to remove! %96 = inttoptr i64 %92 to i64*
Found line to remove! %97 = load i64, i64* %96, align 8
Found line to remove! store i64 %97, i64* %3, align 8
Found line to remove! %98 = add i64 %91, 16
Found line to remove! store i64 %98, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -12', '%12 = load i32, i32* %EDI, align 4', '%13 = add i64 %10, 6', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i32*', 'store i32 %12, i32* %14, align 4', '%15 = load i64, i64* %RBP, align 8', '%16 = add i64 %15, -16', '%17 = load i64, i64* %RSI, align 8', '%19 = add i64 %18, 4', 'store i64 %19, i64* %PC, align 8', '%20 = inttoptr i64 %16 to i64*', 'store i64 %17, i64* %20, align 8', '%21 = load i64, i64* %RBP, align 8', '%22 = add i64 %21, -16', '%24 = add i64 %23, 4', 'store i64 %24, i64* %PC, align 8', '%25 = inttoptr i64 %22 to i64*', '%26 = load i64, i64* %25, align 8', 'store i64 %26, i64* %RSI, align 8', '%27 = add i64 %23, 7', 'store i64 %27, i64* %PC, align 8', '%28 = inttoptr i64 %26 to i64*', '%29 = load i64, i64* %28, align 8', 'store i64 %29, i64* %RSI, align 8', '%30 = add i64 %21, -24', '%31 = add i64 %23, 11', 'store i64 %31, i64* %PC, align 8', '%32 = inttoptr i64 %30 to i64*', 'store i64 %29, i64* %32, align 8', '%36 = add i64 %35, 3', 'store i64 %36, i64* %PC, align 8', '%39 = zext i32 %38 to i64', 'store i64 %39, i64* %RDI, align 8', '%40 = add i64 %33, -24', '%41 = add i64 %35, 7', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i64*', '%43 = load i64, i64* %42, align 8', 'store i64 %43, i64* %RSI, align 8', 'store i64 %39, i64* %RCX, align 8', '%44 = add i64 %35, 14', 'store i64 %44, i64* %PC, align 8', '%47 = lshr i64 %43, 63', '%48 = trunc i64 %47 to i8', '%50 = and i32 %38, 63', '%51 = zext i32 %50 to i64', '%52 = add nsw i64 %51, -1', '%53 = lshr i64 %43, %52', '%55 = phi i64 [ %53, %49 ], [ %43, %46 ]', '%56 = phi i8 [ 0, %49 ], [ %48, %46 ]', '%57 = trunc i64 %55 to i8', '%58 = and i8 %57, 1', '%59 = lshr i64 %55, 1', 'store i64 %59, i64* %RSI, align 8', '%60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %58, i8* %60, align 1', '%61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%62 = trunc i64 %59 to i32', '%63 = and i32 %62, 255', '%64 = tail call i32 @llvm.ctpop.i32(i32 %63) #12', '%65 = trunc i32 %64 to i8', '%66 = and i8 %65, 1', '%67 = xor i8 %66, 1', 'store i8 %67, i8* %61, align 1', '%68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 0, i8* %68, align 1', '%69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%70 = icmp eq i64 %59, 0', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %69, align 1', '%72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 0, i8* %72, align 1', '%73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %56, i8* %73, align 1', '%74 = phi i64 [ %59, %54 ], [ %43, %block_400580 ]', '%75 = add i64 %35, 18', 'store i64 %75, i64* %PC, align 8', 'store i64 %74, i64* %42, align 8', '%76 = load i64, i64* %RBP, align 8', '%77 = add i64 %76, -24', '%79 = add i64 %78, 4', 'store i64 %79, i64* %PC, align 8', '%80 = inttoptr i64 %77 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %RSI, align 8', '%82 = add i64 %76, -16', '%83 = add i64 %78, 8', 'store i64 %83, i64* %PC, align 8', '%84 = inttoptr i64 %82 to i64*', '%85 = load i64, i64* %84, align 8', 'store i64 %85, i64* %RAX, align 8', '%86 = add i64 %78, 11', 'store i64 %86, i64* %PC, align 8', '%87 = inttoptr i64 %85 to i64*', 'store i64 %81, i64* %87, align 8', '%88 = load i64, i64* %PC, align 8', '%89 = add i64 %88, 1', 'store i64 %89, i64* %PC, align 8', '%90 = load i64, i64* %6, align 8', '%91 = add i64 %90, 8', '%92 = inttoptr i64 %90 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %RBP, align 8', 'store i64 %91, i64* %6, align 8', '%94 = add i64 %88, 2', 'store i64 %94, i64* %PC, align 8', '%95 = inttoptr i64 %91 to i64*', '%96 = load i64, i64* %95, align 8', 'store i64 %96, i64* %PC, align 8', '%97 = add i64 %90, 16', 'store i64 %97, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: block_400580:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Keep: %5 = add i64 %1, 1
Keep: store i64 %5, i64* %PC, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -12
Found line to remove! %12 = load i32, i32* %EDI, align 4
Found line to remove! %13 = add i64 %10, 6
Found line to remove! store i64 %13, i64* %PC, align 8
Found line to remove! %14 = inttoptr i64 %11 to i32*
Found line to remove! store i32 %12, i32* %14, align 4
Found line to remove! %15 = load i64, i64* %RBP, align 8
Found line to remove! %16 = add i64 %15, -16
Found line to remove! %17 = load i64, i64* %RSI, align 8
Keep: %18 = load i64, i64* %PC, align 8
Found line to remove! %19 = add i64 %18, 4
Found line to remove! store i64 %19, i64* %PC, align 8
Found line to remove! %20 = inttoptr i64 %16 to i64*
Found line to remove! store i64 %17, i64* %20, align 8
Found line to remove! %21 = load i64, i64* %RBP, align 8
Found line to remove! %22 = add i64 %21, -16
Keep: %23 = load i64, i64* %PC, align 8
Found line to remove! %24 = add i64 %23, 4
Found line to remove! store i64 %24, i64* %PC, align 8
Found line to remove! %25 = inttoptr i64 %22 to i64*
Found line to remove! %26 = load i64, i64* %25, align 8
Found line to remove! store i64 %26, i64* %RSI, align 8
Found line to remove! %27 = add i64 %23, 7
Found line to remove! store i64 %27, i64* %PC, align 8
Found line to remove! %28 = inttoptr i64 %26 to i64*
Found line to remove! %29 = load i64, i64* %28, align 8
Found line to remove! store i64 %29, i64* %RSI, align 8
Found line to remove! %30 = add i64 %21, -24
Found line to remove! %31 = add i64 %23, 11
Found line to remove! store i64 %31, i64* %PC, align 8Writing '/tmp/tmp6ighaiex.dot'...
Writing '/tmp/tmp6ighaiex.dot':Done

Reading LLVM: /tmp/tmpyu2vnotx-query.ll
Extracting function [shiftit] from /tmp/tmpyu2vnotx-query.ll
Dot file generated!
Writing '/tmp/tmp1lai1l7p.dot'...
Writing '/tmp/tmp1lai1l7p.dot':Done

Reading LLVM: /tmp/tmpk1n5h7om-target.ll
Extracting function [shiftit] from /tmp/tmpk1n5h7om-target.ll
Dot file generated!

Found line to remove! %32 = inttoptr i64 %30 to i64*
Found line to remove! store i64 %29, i64* %32, align 8
Keep: %33 = load i64, i64* %RBP, align 8
Keep: %34 = add i64 %33, -4
Keep: %35 = load i64, i64* %PC, align 8
Found line to remove! %36 = add i64 %35, 3
Found line to remove! store i64 %36, i64* %PC, align 8
Keep: %37 = inttoptr i64 %34 to i32*
Keep: %38 = load i32, i32* %37, align 4
Found line to remove! %39 = zext i32 %38 to i64
Found line to remove! store i64 %39, i64* %RDI, align 8
Found line to remove! %40 = add i64 %33, -24
Found line to remove! %41 = add i64 %35, 7
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i64*
Found line to remove! %43 = load i64, i64* %42, align 8
Found line to remove! store i64 %43, i64* %RSI, align 8
Found line to remove! store i64 %39, i64* %RDI, align 8
Found line to remove! store i64 %39, i64* %RCX, align 8
Found line to remove! %44 = add i64 %35, 14
Found line to remove! store i64 %44, i64* %PC, align 8
Keep: %45 = trunc i32 %38 to i6
Keep: switch i6 %45, label %49 [
Keep: i6 0, label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
Keep: i6 1, label %46
Keep: ]
Keep: 
Keep: ; <label>:46:                                     ; preds = %block_400580
Found line to remove! %47 = lshr i64 %43, 63
Found line to remove! %48 = trunc i64 %47 to i8
Keep: br label %54
Keep: 
Keep: ; <label>:49:                                     ; preds = %block_400580
Found line to remove! %50 = and i32 %38, 63
Found line to remove! %51 = zext i32 %50 to i64
Found line to remove! %52 = add nsw i64 %51, -1
Found line to remove! %53 = lshr i64 %43, %52
Keep: br label %54
Keep: 
Keep: ; <label>:54:                                     ; preds = %49, %46
Found line to remove! %55 = phi i64 [ %53, %49 ], [ %43, %46 ]
Found line to remove! %56 = phi i8 [ 0, %49 ], [ %48, %46 ]
Found line to remove! %57 = trunc i64 %55 to i8
Found line to remove! %58 = and i8 %57, 1
Found line to remove! %59 = lshr i64 %55, 1
Found line to remove! store i64 %59, i64* %RSI, align 8
Found line to remove! %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %58, i8* %60, align 1
Found line to remove! %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %62 = trunc i64 %59 to i32
Found line to remove! %63 = and i32 %62, 255
Found line to remove! %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #12
Found line to remove! %65 = trunc i32 %64 to i8
Found line to remove! %66 = and i8 %65, 1
Found line to remove! %67 = xor i8 %66, 1
Found line to remove! store i8 %67, i8* %61, align 1
Found line to remove! %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 0, i8* %68, align 1
Found line to remove! %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %70 = icmp eq i64 %59, 0
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %69, align 1
Found line to remove! %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 0, i8* %72, align 1
Found line to remove! %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %56, i8* %73, align 1
Keep: br label %_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %54, %block_400580
Found line to remove! %74 = phi i64 [ %59, %54 ], [ %43, %block_400580 ]
Found line to remove! %75 = add i64 %35, 18
Found line to remove! store i64 %75, i64* %PC, align 8
Found line to remove! store i64 %74, i64* %42, align 8
Found line to remove! %76 = load i64, i64* %RBP, align 8
Found line to remove! %77 = add i64 %76, -24
Keep: %78 = load i64, i64* %PC, align 8
Found line to remove! %79 = add i64 %78, 4
Found line to remove! store i64 %79, i64* %PC, align 8
Found line to remove! %80 = inttoptr i64 %77 to i64*
Found line to remove! %81 = load i64, i64* %80, align 8
Found line to remove! store i64 %81, i64* %RSI, align 8
Found line to remove! %82 = add i64 %76, -16
Found line to remove! %83 = add i64 %78, 8
Found line to remove! store i64 %83, i64* %PC, align 8
Found line to remove! %84 = inttoptr i64 %82 to i64*
Found line to remove! %85 = load i64, i64* %84, align 8
Found line to remove! store i64 %85, i64* %RAX, align 8
Found line to remove! %86 = add i64 %78, 11
Found line to remove! store i64 %86, i64* %PC, align 8
Found line to remove! %87 = inttoptr i64 %85 to i64*
Found line to remove! store i64 %81, i64* %87, align 8
Found line to remove! %88 = load i64, i64* %PC, align 8
Found line to remove! %89 = add i64 %88, 1
Found line to remove! store i64 %89, i64* %PC, align 8
Found line to remove! %90 = load i64, i64* %6, align 8
Found line to remove! %91 = add i64 %90, 8
Found line to remove! %92 = inttoptr i64 %90 to i64*
Found line to remove! %93 = load i64, i64* %92, align 8
Found line to remove! store i64 %93, i64* %RBP, align 8
Found line to remove! store i64 %91, i64* %6, align 8
Found line to remove! %94 = add i64 %88, 2
Found line to remove! store i64 %94, i64* %PC, align 8
Found line to remove! %95 = inttoptr i64 %91 to i64*
Found line to remove! %96 = load i64, i64* %95, align 8
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = add i64 %90, 16
Found line to remove! store i64 %97, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_5 = add i64 %1, 1
- 2 store i64 %var_2_5, i64* %var_2_3, align 8
- 3 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba1cd6a8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba1cd6a8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
EXACT 0 getelementptr getelementptr
EXACT 1 add add
EXACT 2 store store
EXACT 3 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_5 = add i64 %1, 1
- 2 store i64 %var_2_5, i64* %PC, align 8
- 3 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba456598>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeba456598>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
EXACT 0 getelementptr getelementptr
EXACT 1 add add
EXACT 2 store store
EXACT 3 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%var_2_5 = add i64 %1, 1', 'store i64 %var_2_5, i64* %var_2_3, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_5 = add i64 %1, 1
Found line to remove! store i64 %var_2_5, i64* %var_2_3, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%var_2_5 = add i64 %1, 1', 'store i64 %var_2_5, i64* %PC, align 8', 'ret %struct.Memory* %2'])
Keep: block_400580:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_5 = add i64 %1, 1
Found line to remove! store i64 %var_2_5, i64* %PC, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_21/shiftit/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_21/binary/test.mcsema.calls_renamed.ll shiftit
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
