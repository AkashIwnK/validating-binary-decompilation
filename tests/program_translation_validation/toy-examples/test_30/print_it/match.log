Matching sub_400590_print_it Vs print_it


[Info] Retrieve Potential Matches...
[0x5604437b6f00]: %struct.State* %0 {
	[0x560443770420]:%struct.State.0* %0
	}

[0x5604437b6f40]: i64 %1 {
	[0x560443770280]:i64 %1
	}

[0x5604437b6f80]: %struct.Memory* %2 {
	[0x560443770120]:%struct.Memory.31* %2
	}

[0x5604437b7108]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5604437623a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	[0x5604437e3158]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	[0x5604437e3e68]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x5604437b71e0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5604437605f0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5604437b7258]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5604437623a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	[0x5604437e3158]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	[0x5604437e3e68]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x5604437b7328]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5604437623a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	[0x5604437e3158]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	[0x5604437e3e68]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x5604437b73d8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x560443744128]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	[0x5604437ceaa8]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	}

[0x5604437b7498]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x560443744128]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	[0x5604437ceaa8]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	}

[0x5604437b75a0]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x5604437cb530]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x5604437b76b0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x560443816050]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x5604437b77c0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5604437cda60]:  %RDI.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5604437b78d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560443816220]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5604437b79e0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560443816410]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5604437b7a78]:   %5 = load i64, i64* %RBP, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b7af0]:   %6 = add i64 %1, 1 {
	[0x56044376c050]:  %5 = add i64 %1, 1
	}

[0x5604437b7b70]:   store i64 %6, i64* %PC, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b7bd8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b7c50]:   %8 = add i64 %7, -8 {
	[0x56044376bcc0]:  %8 = add i64 %7, -8
	[0x560443771ee0]:  %55 = add i64 %54, -8
	[0x5604437e1570]:  %47 = add i64 %46, -8
	}

[0x5604437b7cd0]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x56044376ba80]:  %call2_4005b4 = tail call %struct.Memory.31* @sub_400440.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	[0x5604437b1bc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5604437f53a0]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x5604437b7d48]:   %9 = inttoptr i64 %8 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437b7dc0]:   store i64 %5, i64* %9, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b7e28]:   %10 = load i64, i64* %PC, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b7ea0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b7f20]:   %11 = add i64 %7, -24 {
	[0x5604437dd840]:  %11 = add i64 %7, -24
	}

[0x5604437b7fa0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b8020]:   %12 = icmp ult i64 %8, 16 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437b8088]:   %13 = zext i1 %12 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437b8130]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5604438b5fc0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5604437b81c0]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b8228]:   %15 = trunc i64 %11 to i32 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437b82a0]:   %16 = and i32 %15, 255 {
	[0x560443772100]:  %72 = and i32 %71, 255
	[0x5604437e0870]:  %16 = and i32 %15, 255
	}

[0x5604437b8348]:   %18 = trunc i32 %17 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437b83c0]:   %19 = and i8 %18, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	[0x56044376f1c0]:  %26 = and i8 %25, 1
	[0x5604437747e0]:  %75 = and i8 %74, 1
	[0x560443776a50]:  %81 = and i8 %80, 1
	}

[0x5604437b8440]:   %20 = xor i8 %19, 1 {
	[0x56044376dbc0]:  %20 = xor i8 %19, 1
	[0x5604437771a0]:  %76 = xor i8 %75, 1
	}

[0x5604437b84f0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5604437d6f00]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5604437b8580]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b8600]:   %22 = xor i64 %8, 16 {
	[0x56044376d670]:  %22 = xor i64 %8, 16
	[0x560443776e70]:  %77 = xor i64 %67, 16
	}

[0x5604437b8680]:   %23 = xor i64 %22, %11 {
	[0x56044376e860]:  %87 = xor i64 %84, %86
	[0x560443776d10]:  %78 = xor i64 %77, %68
	[0x5604437e0430]:  %23 = xor i64 %22, %11
	[0x5604437e0fe0]:  %35 = xor i64 %31, %34
	}

[0x5604437b8700]:   %24 = lshr i64 %23, 4 {
	[0x560443776bb0]:  %79 = lshr i64 %78, 4
	[0x5604437df480]:  %24 = lshr i64 %23, 4
	}

[0x5604437b8768]:   %25 = trunc i64 %24 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437b87e0]:   %26 = and i8 %25, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	[0x56044376f1c0]:  %26 = and i8 %25, 1
	[0x5604437747e0]:  %75 = and i8 %74, 1
	[0x560443776a50]:  %81 = and i8 %80, 1
	}

[0x5604437b8890]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560443770a50]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5604437b8920]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b89a0]:   %28 = icmp eq i64 %11, 0 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437b8a08]:   %29 = zext i1 %28 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437b8ab0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5604437707e0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5604437b8b40]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b8bc0]:   %31 = lshr i64 %11, 63 {
	[0x56044376dfa0]:  %34 = lshr i64 %8, 63
	[0x56044376e9b0]:  %86 = lshr i64 %67, 63
	[0x56044376ec30]:  %84 = lshr i64 %68, 63
	[0x5604437e0ba0]:  %31 = lshr i64 %11, 63
	}

[0x5604437b8c28]:   %32 = trunc i64 %31 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437b8cd0]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56044376f2d0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5604437b8d60]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b8de0]:   %34 = lshr i64 %8, 63 {
	[0x56044376dfa0]:  %34 = lshr i64 %8, 63
	[0x56044376e9b0]:  %86 = lshr i64 %67, 63
	[0x56044376ec30]:  %84 = lshr i64 %68, 63
	[0x5604437e0ba0]:  %31 = lshr i64 %11, 63
	}

[0x5604437b8e60]:   %35 = xor i64 %31, %34 {
	[0x56044376e860]:  %87 = xor i64 %84, %86
	[0x560443776d10]:  %78 = xor i64 %77, %68
	[0x5604437e0430]:  %23 = xor i64 %22, %11
	[0x5604437e0fe0]:  %35 = xor i64 %31, %34
	}

[0x5604437b8ee0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56044376e680]:  %88 = add nuw nsw i64 %87, %84
	[0x56044376fb00]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5604437b8f60]:   %37 = icmp eq i64 %36, 2 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437b8fc8]:   %38 = zext i1 %37 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437b9070]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56044376c160]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5604437b9100]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b9260]:   store i64 add (i64 ptrtoint (%seg_400650__rodata_type* @seg_400650__rodata to i64), i64 29), i64* %RSI, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b92e0]:   %40 = add i64 %7, -16 {
	[0x5604437e1200]:  %40 = add i64 %7, -16
	}

[0x5604437b9348]:   %41 = load i64, i64* %RDI, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b9400]:   %42 = add i64 %10, 21 {
	[0x56044376f850]:  %42 = add i64 %10, 21
	}

[0x5604437b9480]:   store i64 %42, i64* %PC, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b94e8]:   %43 = inttoptr i64 %40 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437b9560]:   store i64 %41, i64* %43, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b95c8]:   %44 = load i64, i64* %PC, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b9708]:   %46 = load i64, i64* %RBP, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b9780]:   %47 = add i64 %46, -8 {
	[0x56044376bcc0]:  %8 = add i64 %7, -8
	[0x560443771ee0]:  %55 = add i64 %54, -8
	[0x5604437e1570]:  %47 = add i64 %46, -8
	}

[0x5604437b9800]:   %48 = add i64 %44, 12 {
	[0x560443770370]:  %48 = add i64 %44, 12
	}

[0x5604437b9880]:   store i64 %48, i64* %PC, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b98e8]:   %49 = inttoptr i64 %47 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437b9948]:   %50 = load i64, i64* %49, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b99c0]:   store i64 %50, i64* %RDX, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b9a40]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b9b00]:   %51 = add i64 %44, -358 {
	[0x5604437e1640]:  %52 = add i64 %44, -358
	}

[0x5604437b9bc0]:   %52 = add i64 %44, 19 {
	[0x560443770e20]:  %53 = add i64 %44, 19
	}

[0x5604437b9c28]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437b9ca0]:   %54 = add i64 %53, -8 {
	[0x56044376bcc0]:  %8 = add i64 %7, -8
	[0x560443771ee0]:  %55 = add i64 %54, -8
	[0x5604437e1570]:  %47 = add i64 %46, -8
	}

[0x5604437b9d08]:   %55 = inttoptr i64 %54 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437b9d80]:   store i64 %52, i64* %55, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b9e00]:   store i64 %54, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b9e80]:   store i64 %51, i64* %PC, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437ba088]:   %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x56044376ba80]:  %call2_4005b4 = tail call %struct.Memory.31* @sub_400440.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	[0x5604437b1bc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5604437f53a0]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x5604437ba148]:   %57 = load i64, i64* %PC, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437ba1c0]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437ba228]:   %58 = load i64, i64* %RBP, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437ba2e0]:   %59 = add i64 %58, -12 {
	[0x5604437710d0]:  %60 = add i64 %59, -12
	}

[0x5604437ba348]:   %60 = load i32, i32* %EAX, align 4 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437ba3c0]:   %61 = add i64 %57, 5 {
	[0x560443770f80]:  %62 = add i64 %58, 5
	}

[0x5604437ba440]:   store i64 %61, i64* %PC, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437ba4a8]:   %62 = inttoptr i64 %59 to i32* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437ba520]:   store i32 %60, i32* %62, align 4 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437ba588]:   %63 = load i32, i32* %ECX, align 4 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437ba5e8]:   %64 = zext i32 %63 to i64 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437ba648]:   %65 = load i64, i64* %PC, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437ba6c0]:   store i64 %64, i64* %RAX, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437ba728]:   %66 = load i64, i64* %RSP, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437ba7a0]:   %67 = add i64 %66, 16 {
	[0x560443772580]:  %68 = add i64 %67, 16
	}

[0x5604437ba820]:   store i64 %67, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437ba8e0]:   %68 = icmp ugt i64 %66, -17 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437ba948]:   %69 = zext i1 %68 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437ba9c0]:   store i8 %69, i8* %14, align 1, !tbaa !1265 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437baa28]:   %70 = trunc i64 %67 to i32 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437baaa0]:   %71 = and i32 %70, 255 {
	[0x560443772100]:  %72 = and i32 %71, 255
	[0x5604437e0870]:  %16 = and i32 %15, 255
	}

[0x5604437bab40]:   %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9 {
	[0x56044376ba80]:  %call2_4005b4 = tail call %struct.Memory.31* @sub_400440.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	[0x5604437b1bc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5604437f53a0]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x5604437bac08]:   %73 = trunc i32 %72 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437bac80]:   %74 = and i8 %73, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	[0x56044376f1c0]:  %26 = and i8 %25, 1
	[0x5604437747e0]:  %75 = and i8 %74, 1
	[0x560443776a50]:  %81 = and i8 %80, 1
	}

[0x5604437bad00]:   %75 = xor i8 %74, 1 {
	[0x56044376dbc0]:  %20 = xor i8 %19, 1
	[0x5604437771a0]:  %76 = xor i8 %75, 1
	}

[0x5604437bad80]:   store i8 %75, i8* %21, align 1, !tbaa !1279 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bae00]:   %76 = xor i64 %66, 16 {
	[0x56044376d670]:  %22 = xor i64 %8, 16
	[0x560443776e70]:  %77 = xor i64 %67, 16
	}

[0x5604437bae80]:   %77 = xor i64 %76, %67 {
	[0x56044376e860]:  %87 = xor i64 %84, %86
	[0x560443776d10]:  %78 = xor i64 %77, %68
	[0x5604437e0430]:  %23 = xor i64 %22, %11
	[0x5604437e0fe0]:  %35 = xor i64 %31, %34
	}

[0x5604437baf00]:   %78 = lshr i64 %77, 4 {
	[0x560443776bb0]:  %79 = lshr i64 %78, 4
	[0x5604437df480]:  %24 = lshr i64 %23, 4
	}

[0x5604437baf68]:   %79 = trunc i64 %78 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437bafe0]:   %80 = and i8 %79, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	[0x56044376f1c0]:  %26 = and i8 %25, 1
	[0x5604437747e0]:  %75 = and i8 %74, 1
	[0x560443776a50]:  %81 = and i8 %80, 1
	}

[0x5604437bb060]:   store i8 %80, i8* %27, align 1, !tbaa !1280 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb0e0]:   %81 = icmp eq i64 %67, 0 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437bb148]:   %82 = zext i1 %81 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437bb1c0]:   store i8 %82, i8* %30, align 1, !tbaa !1281 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb240]:   %83 = lshr i64 %67, 63 {
	[0x56044376dfa0]:  %34 = lshr i64 %8, 63
	[0x56044376e9b0]:  %86 = lshr i64 %67, 63
	[0x56044376ec30]:  %84 = lshr i64 %68, 63
	[0x5604437e0ba0]:  %31 = lshr i64 %11, 63
	}

[0x5604437bb2a8]:   %84 = trunc i64 %83 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437bb320]:   store i8 %84, i8* %33, align 1, !tbaa !1282 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb3a0]:   %85 = lshr i64 %66, 63 {
	[0x56044376dfa0]:  %34 = lshr i64 %8, 63
	[0x56044376e9b0]:  %86 = lshr i64 %67, 63
	[0x56044376ec30]:  %84 = lshr i64 %68, 63
	[0x5604437e0ba0]:  %31 = lshr i64 %11, 63
	}

[0x5604437bb420]:   %86 = xor i64 %83, %85 {
	[0x56044376e860]:  %87 = xor i64 %84, %86
	[0x560443776d10]:  %78 = xor i64 %77, %68
	[0x5604437e0430]:  %23 = xor i64 %22, %11
	[0x5604437e0fe0]:  %35 = xor i64 %31, %34
	}

[0x5604437bb4a0]:   %87 = add nuw nsw i64 %86, %83 {
	[0x56044376e680]:  %88 = add nuw nsw i64 %87, %84
	[0x56044376fb00]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5604437bb520]:   %88 = icmp eq i64 %87, 2 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437bb588]:   %89 = zext i1 %88 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437bb600]:   store i8 %89, i8* %39, align 1, !tbaa !1283 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb680]:   %90 = add i64 %65, 7 {
	[0x56044377a190]:  %91 = add i64 %66, 7
	}

[0x5604437bb700]:   store i64 %90, i64* %PC, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb780]:   %91 = add i64 %66, 24 {
	[0x560443779f50]:  %92 = add i64 %67, 24
	}

[0x5604437bb7e8]:   %92 = inttoptr i64 %67 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437bb848]:   %93 = load i64, i64* %92, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437bb8c0]:   store i64 %93, i64* %RBP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb940]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bb9c0]:   %94 = add i64 %65, 8 {
	[0x560443779ab0]:  %95 = add i64 %66, 8
	}

[0x5604437bba40]:   store i64 %94, i64* %PC, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bbaa8]:   %95 = inttoptr i64 %91 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437bbb08]:   %96 = load i64, i64* %95, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437bbb80]:   store i64 %96, i64* %PC, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bbc00]:   %97 = add i64 %66, 32 {
	[0x56044377cd70]:  %98 = add i64 %67, 32
	}

[0x5604437bbc80]:   store i64 %97, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437bbce8]:   ret %struct.Memory* %56 {
	[0x5604437e63e8]:  ret %struct.Memory.31* %call2_4005b4
	}

[0x560443820578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x5604437f48d8]:  %51 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x560443821d58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x560443782a68]:  %57 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 5, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5604437e3158]:   %EAX.i = bitcast %union.anon.4* %51 to i32*
From the pot matches of: [0x5604437b7108]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x5604437b9a40]:   store i8 0, i8* %AL, align 1, !tbaa !1284


Uprime Matches: [0x56044376b7a0]:   store i64 %4, i64* %9, align 8
[0x56044376be10]:   store i64 %5, i64* %3, align 8
[0x56044376ead0]:   store i8 %85, i8* %33, align 1
[0x56044376ed90]:   store i8 %83, i8* %30, align 1
[0x56044376f060]:   store i8 %26, i8* %27, align 1
[0x56044376f6f0]:   store i64 %42, i64* %3, align 8
[0x56044376f9b0]:   store i8 %38, i8* %39, align 1
[0x56044376fc60]:   store i64 %41, i64* %43, align 8
[0x56044376fdb0]:   store i8 0, i8* %AL.i, align 1
[0x560443770070]:   store i64 %50, i64* %RDX.i, align 8
[0x5604437701d0]:   store i64 %48, i64* %3, align 8
[0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8
[0x560443771230]:   store i64 0, i64* %RCX.i, align 8
[0x560443771460]:   store i64 %52, i64* %3, align 8
[0x560443771660]:   store i64 %55, i64* %6, align 8
[0x560443771ff0]:   store i64 %62, i64* %3, align 8
[0x560443772360]:   store i32 %61, i32* %63, align 4
[0x560443772950]:   store i64 %53, i64* %56, align 8
[0x560443773a50]:   store i8 %70, i8* %14, align 1
[0x560443773ca0]:   store i64 %68, i64* %6, align 8
[0x560443774020]:   store i64 %65, i64* %RAX.i, align 8
[0x560443774fa0]:   store i8 %81, i8* %27, align 1
[0x560443777050]:   store i8 %76, i8* %21, align 1
[0x5604437797b0]:   store i8 %90, i8* %39, align 1
[0x560443779910]:   store i64 %95, i64* %3, align 8
[0x560443779c10]:   store i64 %92, i64* %6, align 8
[0x560443779d70]:   store i64 %94, i64* %RBP.i, align 8
[0x56044377a0b0]:   store i64 %91, i64* %3, align 8
[0x56044377a620]:   store i64 %97, i64* %3, align 8
[0x56044377cc10]:   store i64 %98, i64* %6, align 8
[0x5604437daba0]:   store i64 %11, i64* %6, align 8
[0x5604437df280]:   store i64 %8, i64* %RBP.i, align 8
[0x5604437df680]:   store i8 %32, i8* %33, align 1
[0x5604437df7d0]:   store i8 %29, i8* %30, align 1
[0x5604437e0540]:   store i8 %20, i8* %21, align 1
[0x5604437e0980]:   store i8 %13, i8* %14, align 1
[0x5604437e1310]:   store i64 4195949, i64* %RSI.i, align 8


Adj: [0x5604437e2ef8]:   %61 = load i32, i32* %EAX.i, align 4


Removing: [0x5604437623a8]:   %AL.i = bitcast %union.anon.4* %51 to i8*
From the pot matches of: [0x5604437b7258]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x5604437ba348]:   %60 = load i32, i32* %EAX, align 4


Uprime Matches: [0x56044376de28]:   %50 = load i64, i64* %49, align 8
[0x56044377a388]:   %97 = load i64, i64* %96, align 8
[0x5604437980e8]:   %10 = load i64, i64* %3, align 8
[0x5604437ca9d8]:   %4 = load i64, i64* %RBP.i, align 8
[0x5604437cabc8]:   %7 = load i64, i64* %6, align 8
[0x5604437de838]:   %41 = load i64, i64* %RDI.i16, align 8
[0x5604437e18a8]:   %46 = load i64, i64* %RBP.i, align 8
[0x5604437e19d8]:   %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
[0x5604437e1d68]:   %44 = load i64, i64* %3, align 8
[0x5604437e26a8]:   %54 = load i64, i64* %6, align 8
[0x5604437e2ef8]:   %61 = load i32, i32* %EAX.i, align 4
[0x5604437e3028]:   %59 = load i64, i64* %RBP.i, align 8
[0x5604437e3c08]:   %58 = load i64, i64* %3, align 8
[0x5604437e40c8]:   %64 = load i32, i32* %ECX.i9, align 4
[0x5604437e5b98]:   %67 = load i64, i64* %6, align 8
[0x5604437e5df8]:   %66 = load i64, i64* %3, align 8
[0x5604437e6e98]:   %94 = load i64, i64* %93, align 8


Adj: [0x56044376fdb0]:   store i8 0, i8* %AL.i, align 1


Removing: [0x5604437e18a8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b7a78]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5604437b7dc0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x56044376b7a0]:   store i64 %4, i64* %9, align 8
[0x56044376be10]:   store i64 %5, i64* %3, align 8
[0x56044376ead0]:   store i8 %85, i8* %33, align 1
[0x56044376ed90]:   store i8 %83, i8* %30, align 1
[0x56044376f060]:   store i8 %26, i8* %27, align 1
[0x56044376f6f0]:   store i64 %42, i64* %3, align 8
[0x56044376f9b0]:   store i8 %38, i8* %39, align 1
[0x56044376fc60]:   store i64 %41, i64* %43, align 8
[0x56044376fdb0]:   store i8 0, i8* %AL.i, align 1
[0x560443770070]:   store i64 %50, i64* %RDX.i, align 8
[0x5604437701d0]:   store i64 %48, i64* %3, align 8
[0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8
[0x560443771230]:   store i64 0, i64* %RCX.i, align 8
[0x560443771460]:   store i64 %52, i64* %3, align 8
[0x560443771660]:   store i64 %55, i64* %6, align 8
[0x560443771ff0]:   store i64 %62, i64* %3, align 8
[0x560443772360]:   store i32 %61, i32* %63, align 4
[0x560443772950]:   store i64 %53, i64* %56, align 8
[0x560443773a50]:   store i8 %70, i8* %14, align 1
[0x560443773ca0]:   store i64 %68, i64* %6, align 8
[0x560443774020]:   store i64 %65, i64* %RAX.i, align 8
[0x560443774fa0]:   store i8 %81, i8* %27, align 1
[0x560443777050]:   store i8 %76, i8* %21, align 1
[0x5604437797b0]:   store i8 %90, i8* %39, align 1
[0x560443779910]:   store i64 %95, i64* %3, align 8
[0x560443779c10]:   store i64 %92, i64* %6, align 8
[0x560443779d70]:   store i64 %94, i64* %RBP.i, align 8
[0x56044377a0b0]:   store i64 %91, i64* %3, align 8
[0x56044377a620]:   store i64 %97, i64* %3, align 8
[0x56044377cc10]:   store i64 %98, i64* %6, align 8
[0x5604437daba0]:   store i64 %11, i64* %6, align 8
[0x5604437df280]:   store i64 %8, i64* %RBP.i, align 8
[0x5604437df680]:   store i8 %32, i8* %33, align 1
[0x5604437df7d0]:   store i8 %29, i8* %30, align 1
[0x5604437e0540]:   store i8 %20, i8* %21, align 1
[0x5604437e0980]:   store i8 %13, i8* %14, align 1
[0x5604437e1310]:   store i64 4195949, i64* %RSI.i, align 8


Adj: [0x5604437e1570]:   %47 = add i64 %46, -8


Removing: [0x5604437e3028]:   %59 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b7a78]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5604437b7dc0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x56044376b7a0]:   store i64 %4, i64* %9, align 8
[0x56044376be10]:   store i64 %5, i64* %3, align 8
[0x56044376ead0]:   store i8 %85, i8* %33, align 1
[0x56044376ed90]:   store i8 %83, i8* %30, align 1
[0x56044376f060]:   store i8 %26, i8* %27, align 1
[0x56044376f6f0]:   store i64 %42, i64* %3, align 8
[0x56044376f9b0]:   store i8 %38, i8* %39, align 1
[0x56044376fc60]:   store i64 %41, i64* %43, align 8
[0x56044376fdb0]:   store i8 0, i8* %AL.i, align 1
[0x560443770070]:   store i64 %50, i64* %RDX.i, align 8
[0x5604437701d0]:   store i64 %48, i64* %3, align 8
[0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8
[0x560443771230]:   store i64 0, i64* %RCX.i, align 8
[0x560443771460]:   store i64 %52, i64* %3, align 8
[0x560443771660]:   store i64 %55, i64* %6, align 8
[0x560443771ff0]:   store i64 %62, i64* %3, align 8
[0x560443772360]:   store i32 %61, i32* %63, align 4
[0x560443772950]:   store i64 %53, i64* %56, align 8
[0x560443773a50]:   store i8 %70, i8* %14, align 1
[0x560443773ca0]:   store i64 %68, i64* %6, align 8
[0x560443774020]:   store i64 %65, i64* %RAX.i, align 8
[0x560443774fa0]:   store i8 %81, i8* %27, align 1
[0x560443777050]:   store i8 %76, i8* %21, align 1
[0x5604437797b0]:   store i8 %90, i8* %39, align 1
[0x560443779910]:   store i64 %95, i64* %3, align 8
[0x560443779c10]:   store i64 %92, i64* %6, align 8
[0x560443779d70]:   store i64 %94, i64* %RBP.i, align 8
[0x56044377a0b0]:   store i64 %91, i64* %3, align 8
[0x56044377a620]:   store i64 %97, i64* %3, align 8
[0x56044377cc10]:   store i64 %98, i64* %6, align 8
[0x5604437daba0]:   store i64 %11, i64* %6, align 8
[0x5604437df280]:   store i64 %8, i64* %RBP.i, align 8
[0x5604437df680]:   store i8 %32, i8* %33, align 1
[0x5604437df7d0]:   store i8 %29, i8* %30, align 1
[0x5604437e0540]:   store i8 %20, i8* %21, align 1
[0x5604437e0980]:   store i8 %13, i8* %14, align 1
[0x5604437e1310]:   store i64 4195949, i64* %RSI.i, align 8


Adj: [0x5604437710d0]:   %60 = add i64 %59, -12


Removing: [0x5604437e26a8]:   %54 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b7bd8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5604437b92e0]:   %40 = add i64 %7, -16


Uprime Matches: [0x5604437e1200]:   %40 = add i64 %7, -16


Adj: [0x560443771ee0]:   %55 = add i64 %54, -8


Removing: [0x5604437e5b98]:   %67 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b7bd8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5604437b92e0]:   %40 = add i64 %7, -16


Uprime Matches: [0x5604437e1200]:   %40 = add i64 %7, -16


Adj: [0x56044376e9b0]:   %86 = lshr i64 %67, 63
[0x560443772430]:   %69 = icmp ugt i64 %67, -17
[0x560443772580]:   %68 = add i64 %67, 16
[0x560443776e70]:   %77 = xor i64 %67, 16
[0x560443779f50]:   %92 = add i64 %67, 24
[0x56044377cd70]:   %98 = add i64 %67, 32


Removing: [0x5604437e1d68]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b7e28]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5604437b9400]:   %42 = add i64 %10, 21


Uprime Matches: [0x56044376f850]:   %42 = add i64 %10, 21


Adj: [0x560443770370]:   %48 = add i64 %44, 12
[0x560443770e20]:   %53 = add i64 %44, 19
[0x5604437e1640]:   %52 = add i64 %44, -358


Removing: [0x5604437e3c08]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b7e28]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5604437b9400]:   %42 = add i64 %10, 21


Uprime Matches: [0x56044376f850]:   %42 = add i64 %10, 21


Adj: [0x560443770f80]:   %62 = add i64 %58, 5


Removing: [0x5604437e5df8]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b7e28]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5604437b9400]:   %42 = add i64 %10, 21


Uprime Matches: [0x56044376f850]:   %42 = add i64 %10, 21


Adj: [0x560443779ab0]:   %95 = add i64 %66, 8
[0x56044377a190]:   %91 = add i64 %66, 7


Removing: [0x5604437dd748]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x5604437e0870]:   %16 = and i32 %15, 255


Removing: [0x5604437e5478]:   %71 = trunc i64 %68 to i32
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x560443772100]:   %72 = and i32 %71, 255


Removing: [0x5604437e7228]:   %85 = trunc i64 %84 to i8
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x56044376ead0]:   store i8 %85, i8* %33, align 1


Removing: [0x5604438106e8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x5604437df680]:   store i8 %32, i8* %33, align 1


Removing: [0x56044376f1c0]:   %26 = and i8 %25, 1
From the pot matches of: [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime : [0x5604437b8440]:   %20 = xor i8 %19, 1


Uprime Matches: [0x56044376dbc0]:   %20 = xor i8 %19, 1
[0x5604437771a0]:   %76 = xor i8 %75, 1


Adj: [0x56044376f060]:   store i8 %26, i8* %27, align 1


Removing: [0x560443776a50]:   %81 = and i8 %80, 1
From the pot matches of: [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime : [0x5604437b8440]:   %20 = xor i8 %19, 1


Uprime Matches: [0x56044376dbc0]:   %20 = xor i8 %19, 1
[0x5604437771a0]:   %76 = xor i8 %75, 1


Adj: [0x560443774fa0]:   store i8 %81, i8* %27, align 1


Removing: [0x5604437980e8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b95c8]:   %44 = load i64, i64* %PC, align 8


Uprime : [0x5604437b9bc0]:   %52 = add i64 %44, 19


Uprime Matches: [0x560443770e20]:   %53 = add i64 %44, 19


Adj: [0x56044376f850]:   %42 = add i64 %10, 21


Removing: [0x5604437e3c08]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b95c8]:   %44 = load i64, i64* %PC, align 8


Uprime : [0x5604437b9bc0]:   %52 = add i64 %44, 19


Uprime Matches: [0x560443770e20]:   %53 = add i64 %44, 19


Adj: [0x560443770f80]:   %62 = add i64 %58, 5


Removing: [0x5604437e5df8]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b95c8]:   %44 = load i64, i64* %PC, align 8


Uprime : [0x5604437b9bc0]:   %52 = add i64 %44, 19


Uprime Matches: [0x560443770e20]:   %53 = add i64 %44, 19


Adj: [0x560443779ab0]:   %95 = add i64 %66, 8
[0x56044377a190]:   %91 = add i64 %66, 7


Removing: [0x56044376de28]:   %50 = load i64, i64* %49, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443770070]:   store i64 %50, i64* %RDX.i, align 8


Removing: [0x56044377a388]:   %97 = load i64, i64* %96, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x56044377a620]:   store i64 %97, i64* %3, align 8


Removing: [0x5604437980e8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x56044376f850]:   %42 = add i64 %10, 21


Removing: [0x5604437ca9d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x56044376b7a0]:   store i64 %4, i64* %9, align 8


Removing: [0x5604437cabc8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x56044376bcc0]:   %8 = add i64 %7, -8
[0x5604437dd840]:   %11 = add i64 %7, -24
[0x5604437e1200]:   %40 = add i64 %7, -16


Removing: [0x5604437de838]:   %41 = load i64, i64* %RDI.i16, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x56044376fc60]:   store i64 %41, i64* %43, align 8


Removing: [0x5604437e18a8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x5604437e1570]:   %47 = add i64 %46, -8


Removing: [0x5604437e1d68]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443770370]:   %48 = add i64 %44, 12
[0x560443770e20]:   %53 = add i64 %44, 19
[0x5604437e1640]:   %52 = add i64 %44, -358


Removing: [0x5604437e26a8]:   %54 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443771ee0]:   %55 = add i64 %54, -8


Removing: [0x5604437e2ef8]:   %61 = load i32, i32* %EAX.i, align 4
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443772360]:   store i32 %61, i32* %63, align 4


Removing: [0x5604437e3028]:   %59 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x5604437710d0]:   %60 = add i64 %59, -12


Removing: [0x5604437e3c08]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443770f80]:   %62 = add i64 %58, 5


Removing: [0x5604437e40c8]:   %64 = load i32, i32* %ECX.i9, align 4
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x5604437e5f28]:   %65 = zext i32 %64 to i64


Removing: [0x5604437e5b98]:   %67 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x56044376e9b0]:   %86 = lshr i64 %67, 63
[0x560443772430]:   %69 = icmp ugt i64 %67, -17
[0x560443772580]:   %68 = add i64 %67, 16
[0x560443776e70]:   %77 = xor i64 %67, 16
[0x560443779f50]:   %92 = add i64 %67, 24
[0x56044377cd70]:   %98 = add i64 %67, 32


Removing: [0x5604437e5df8]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443779ab0]:   %95 = add i64 %66, 8
[0x56044377a190]:   %91 = add i64 %66, 7


Removing: [0x5604437e6e98]:   %94 = load i64, i64* %93, align 8
From the pot matches of: [0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x560443770cd0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x560443779d70]:   store i64 %94, i64* %RBP.i, align 8


Removing: [0x5604437ca9d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b9708]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x5604437b9780]:   %47 = add i64 %46, -8


Uprime Matches: [0x56044376bcc0]:   %8 = add i64 %7, -8
[0x560443771ee0]:   %55 = add i64 %54, -8
[0x5604437e1570]:   %47 = add i64 %46, -8


Adj: [0x56044376b7a0]:   store i64 %4, i64* %9, align 8


Removing: [0x5604437e3028]:   %59 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437b9708]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x5604437b9780]:   %47 = add i64 %46, -8


Uprime Matches: [0x56044376bcc0]:   %8 = add i64 %7, -8
[0x560443771ee0]:   %55 = add i64 %54, -8
[0x5604437e1570]:   %47 = add i64 %46, -8


Adj: [0x5604437710d0]:   %60 = add i64 %59, -12


Removing: [0x5604437e5b98]:   %67 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b9c28]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5604437b9ca0]:   %54 = add i64 %53, -8


Uprime Matches: [0x56044376bcc0]:   %8 = add i64 %7, -8
[0x560443771ee0]:   %55 = add i64 %54, -8
[0x5604437e1570]:   %47 = add i64 %46, -8


Adj: [0x56044376e9b0]:   %86 = lshr i64 %67, 63
[0x560443772430]:   %69 = icmp ugt i64 %67, -17
[0x560443772580]:   %68 = add i64 %67, 16
[0x560443776e70]:   %77 = xor i64 %67, 16
[0x560443779f50]:   %92 = add i64 %67, 24
[0x56044377cd70]:   %98 = add i64 %67, 32


Removing: [0x56044376bcc0]:   %8 = add i64 %7, -8
From the pot matches of: [0x5604437b9ca0]:   %54 = add i64 %53, -8


Uprime : [0x5604437b9e00]:   store i64 %54, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x560443771660]:   store i64 %55, i64* %6, align 8
[0x560443773ca0]:   store i64 %68, i64* %6, align 8
[0x560443779c10]:   store i64 %92, i64* %6, align 8
[0x56044377cc10]:   store i64 %98, i64* %6, align 8
[0x5604437daba0]:   store i64 %11, i64* %6, align 8


Adj: [0x56044376d520]:   %12 = icmp ult i64 %8, 16
[0x56044376d670]:   %22 = xor i64 %8, 16
[0x56044376dfa0]:   %34 = lshr i64 %8, 63
[0x5604437cad98]:   %9 = inttoptr i64 %8 to i64*
[0x5604437df280]:   store i64 %8, i64* %RBP.i, align 8


Removing: [0x5604437980e8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437ba148]:   %57 = load i64, i64* %PC, align 8


Uprime : [0x5604437ba3c0]:   %61 = add i64 %57, 5


Uprime Matches: [0x560443770f80]:   %62 = add i64 %58, 5


Adj: [0x56044376f850]:   %42 = add i64 %10, 21


Removing: [0x5604437e1d68]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437ba148]:   %57 = load i64, i64* %PC, align 8


Uprime : [0x5604437ba3c0]:   %61 = add i64 %57, 5


Uprime Matches: [0x560443770f80]:   %62 = add i64 %58, 5


Adj: [0x560443770370]:   %48 = add i64 %44, 12
[0x560443770e20]:   %53 = add i64 %44, 19
[0x5604437e1640]:   %52 = add i64 %44, -358


Removing: [0x5604437e5df8]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437ba148]:   %57 = load i64, i64* %PC, align 8


Uprime : [0x5604437ba3c0]:   %61 = add i64 %57, 5


Uprime Matches: [0x560443770f80]:   %62 = add i64 %58, 5


Adj: [0x560443779ab0]:   %95 = add i64 %66, 8
[0x56044377a190]:   %91 = add i64 %66, 7


Removing: [0x5604437ca9d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437ba228]:   %58 = load i64, i64* %RBP, align 8


Uprime : [0x5604437ba2e0]:   %59 = add i64 %58, -12


Uprime Matches: [0x5604437710d0]:   %60 = add i64 %59, -12


Adj: [0x56044376b7a0]:   store i64 %4, i64* %9, align 8


Removing: [0x5604437e18a8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5604437ba228]:   %58 = load i64, i64* %RBP, align 8


Uprime : [0x5604437ba2e0]:   %59 = add i64 %58, -12


Uprime Matches: [0x5604437710d0]:   %60 = add i64 %59, -12


Adj: [0x5604437e1570]:   %47 = add i64 %46, -8


Removing: [0x5604437980e8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437ba648]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x5604437bb9c0]:   %94 = add i64 %65, 8


Uprime Matches: [0x560443779ab0]:   %95 = add i64 %66, 8


Adj: [0x56044376f850]:   %42 = add i64 %10, 21


Removing: [0x5604437e1d68]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437ba648]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x5604437bb9c0]:   %94 = add i64 %65, 8


Uprime Matches: [0x560443779ab0]:   %95 = add i64 %66, 8


Adj: [0x560443770370]:   %48 = add i64 %44, 12
[0x560443770e20]:   %53 = add i64 %44, 19
[0x5604437e1640]:   %52 = add i64 %44, -358


Removing: [0x5604437e3c08]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x5604437ba648]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x5604437bb9c0]:   %94 = add i64 %65, 8


Uprime Matches: [0x560443779ab0]:   %95 = add i64 %66, 8


Adj: [0x560443770f80]:   %62 = add i64 %58, 5


Removing: [0x5604437cabc8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437ba728]:   %66 = load i64, i64* %RSP, align 8


Uprime : [0x5604437bbc00]:   %97 = add i64 %66, 32


Uprime Matches: [0x56044377cd70]:   %98 = add i64 %67, 32


Adj: [0x56044376bcc0]:   %8 = add i64 %7, -8
[0x5604437dd840]:   %11 = add i64 %7, -24
[0x5604437e1200]:   %40 = add i64 %7, -16


Removing: [0x5604437e26a8]:   %54 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437ba728]:   %66 = load i64, i64* %RSP, align 8


Uprime : [0x5604437bbc00]:   %97 = add i64 %66, 32


Uprime Matches: [0x56044377cd70]:   %98 = add i64 %67, 32


Adj: [0x560443771ee0]:   %55 = add i64 %54, -8


Removing: [0x5604437dd748]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x5604437e0870]:   %16 = and i32 %15, 255


Removing: [0x5604437e5478]:   %71 = trunc i64 %68 to i32
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x560443772100]:   %72 = and i32 %71, 255


Removing: [0x5604437e7228]:   %85 = trunc i64 %84 to i8
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x56044376ead0]:   store i8 %85, i8* %33, align 1


Removing: [0x5604438106e8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x56044376f1c0]:   %26 = and i8 %25, 1
[0x5604437747e0]:   %75 = and i8 %74, 1
[0x560443776a50]:   %81 = and i8 %80, 1


Adj: [0x5604437df680]:   store i8 %32, i8* %33, align 1


Removing: [0x56044376f1c0]:   %26 = and i8 %25, 1
From the pot matches of: [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime : [0x5604437bad00]:   %75 = xor i8 %74, 1


Uprime Matches: [0x56044376dbc0]:   %20 = xor i8 %19, 1
[0x5604437771a0]:   %76 = xor i8 %75, 1


Adj: [0x56044376f060]:   store i8 %26, i8* %27, align 1


Removing: [0x560443776a50]:   %81 = and i8 %80, 1
From the pot matches of: [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime : [0x5604437bad00]:   %75 = xor i8 %74, 1


Uprime Matches: [0x56044376dbc0]:   %20 = xor i8 %19, 1
[0x5604437771a0]:   %76 = xor i8 %75, 1


Adj: [0x560443774fa0]:   store i8 %81, i8* %27, align 1

Round: 1

Removing: [0x5604437db298]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x5604437747e0]:   %75 = and i8 %74, 1


Adj: [0x56044376f1c0]:   %26 = and i8 %25, 1


Removing: [0x5604437e41f8]:   %80 = trunc i64 %79 to i8
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x5604437747e0]:   %75 = and i8 %74, 1


Adj: [0x560443776a50]:   %81 = and i8 %80, 1


Removing: [0x5604437cabc8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5604437b9c28]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5604437b9ca0]:   %54 = add i64 %53, -8


Uprime Matches: [0x560443771ee0]:   %55 = add i64 %54, -8


Adj: [0x56044376bcc0]:   %8 = add i64 %7, -8
[0x5604437dd840]:   %11 = add i64 %7, -24
[0x5604437e1200]:   %40 = add i64 %7, -16


Removing: [0x5604437db298]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x5604437747e0]:   %75 = and i8 %74, 1


Adj: [0x56044376f1c0]:   %26 = and i8 %25, 1


Removing: [0x5604437e41f8]:   %80 = trunc i64 %79 to i8
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1
[0x5604437747e0]:   %75 = and i8 %74, 1


Adj: [0x560443776a50]:   %81 = and i8 %80, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x5604437b6f00]: %struct.State* %0 {
	[0x560443770420]:%struct.State.0* %0
	}

[0x5604437b6f40]: i64 %1 {
	[0x560443770280]:i64 %1
	}

[0x5604437b6f80]: %struct.Memory* %2 {
	[0x560443770120]:%struct.Memory.31* %2
	}

[0x5604437b7108]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5604437623a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	}

[0x5604437b71e0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5604437605f0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5604437b7258]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5604437e3158]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x5604437b7328]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5604437e3e68]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x5604437b73d8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x560443744128]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	}

[0x5604437b7498]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x5604437ceaa8]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	}

[0x5604437b75a0]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x5604437cb530]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x5604437b76b0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x560443816050]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x5604437b77c0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5604437cda60]:  %RDI.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5604437b78d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560443816220]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5604437b79e0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560443816410]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5604437b7a78]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5604437b7af0]:   %6 = add i64 %1, 1 {
	[0x56044376c050]:  %5 = add i64 %1, 1
	}

[0x5604437b7b70]:   store i64 %6, i64* %PC, align 8 {
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	}

[0x5604437b7bd8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	}

[0x5604437b7c50]:   %8 = add i64 %7, -8 {
	[0x56044376bcc0]:  %8 = add i64 %7, -8
	}

[0x5604437b7cd0]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5604437b1bc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5604437b7d48]:   %9 = inttoptr i64 %8 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5604437b7dc0]:   store i64 %5, i64* %9, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	}

[0x5604437b7e28]:   %10 = load i64, i64* %PC, align 8 {
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	}

[0x5604437b7ea0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5604437b7f20]:   %11 = add i64 %7, -24 {
	[0x5604437dd840]:  %11 = add i64 %7, -24
	}

[0x5604437b7fa0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	}

[0x5604437b8020]:   %12 = icmp ult i64 %8, 16 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	}

[0x5604437b8088]:   %13 = zext i1 %12 to i8 {
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	}

[0x5604437b8130]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5604438b5fc0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5604437b81c0]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	}

[0x5604437b8228]:   %15 = trunc i64 %11 to i32 {
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	}

[0x5604437b82a0]:   %16 = and i32 %15, 255 {
	[0x5604437e0870]:  %16 = and i32 %15, 255
	}

[0x5604437b8348]:   %18 = trunc i32 %17 to i8 {
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	}

[0x5604437b83c0]:   %19 = and i8 %18, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	[0x5604437747e0]:  %75 = and i8 %74, 1
	}

[0x5604437b8440]:   %20 = xor i8 %19, 1 {
	[0x56044376dbc0]:  %20 = xor i8 %19, 1
	[0x5604437771a0]:  %76 = xor i8 %75, 1
	}

[0x5604437b84f0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5604437d6f00]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5604437b8580]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	}

[0x5604437b8600]:   %22 = xor i64 %8, 16 {
	[0x56044376d670]:  %22 = xor i64 %8, 16
	}

[0x5604437b8680]:   %23 = xor i64 %22, %11 {
	[0x5604437e0430]:  %23 = xor i64 %22, %11
	}

[0x5604437b8700]:   %24 = lshr i64 %23, 4 {
	[0x5604437df480]:  %24 = lshr i64 %23, 4
	}

[0x5604437b8768]:   %25 = trunc i64 %24 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	}

[0x5604437b87e0]:   %26 = and i8 %25, 1 {
	[0x56044376f1c0]:  %26 = and i8 %25, 1
	}

[0x5604437b8890]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560443770a50]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5604437b8920]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	}

[0x5604437b89a0]:   %28 = icmp eq i64 %11, 0 {
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	}

[0x5604437b8a08]:   %29 = zext i1 %28 to i8 {
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437b8ab0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5604437707e0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5604437b8b40]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	}

[0x5604437b8bc0]:   %31 = lshr i64 %11, 63 {
	[0x5604437e0ba0]:  %31 = lshr i64 %11, 63
	}

[0x5604437b8c28]:   %32 = trunc i64 %31 to i8 {
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437b8cd0]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56044376f2d0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5604437b8d60]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	}

[0x5604437b8de0]:   %34 = lshr i64 %8, 63 {
	[0x56044376dfa0]:  %34 = lshr i64 %8, 63
	}

[0x5604437b8e60]:   %35 = xor i64 %31, %34 {
	[0x5604437e0fe0]:  %35 = xor i64 %31, %34
	}

[0x5604437b8ee0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56044376fb00]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5604437b8f60]:   %37 = icmp eq i64 %36, 2 {
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437b8fc8]:   %38 = zext i1 %37 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	}

[0x5604437b9070]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56044376c160]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5604437b9100]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	}

[0x5604437b9260]:   store i64 add (i64 ptrtoint (%seg_400650__rodata_type* @seg_400650__rodata to i64), i64 29), i64* %RSI, align 8, !tbaa !1261 {
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b92e0]:   %40 = add i64 %7, -16 {
	[0x5604437e1200]:  %40 = add i64 %7, -16
	}

[0x5604437b9348]:   %41 = load i64, i64* %RDI, align 8 {
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	}

[0x5604437b9400]:   %42 = add i64 %10, 21 {
	[0x56044376f850]:  %42 = add i64 %10, 21
	}

[0x5604437b9480]:   store i64 %42, i64* %PC, align 8 {
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	}

[0x5604437b94e8]:   %43 = inttoptr i64 %40 to i64* {
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	}

[0x5604437b9560]:   store i64 %41, i64* %43, align 8 {
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	}

[0x5604437b95c8]:   %44 = load i64, i64* %PC, align 8 {
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	}

[0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64 {
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	}

[0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261 {
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	}

[0x5604437b9708]:   %46 = load i64, i64* %RBP, align 8 {
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5604437b9780]:   %47 = add i64 %46, -8 {
	[0x5604437e1570]:  %47 = add i64 %46, -8
	}

[0x5604437b9800]:   %48 = add i64 %44, 12 {
	[0x560443770370]:  %48 = add i64 %44, 12
	}

[0x5604437b9880]:   store i64 %48, i64* %PC, align 8 {
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	}

[0x5604437b98e8]:   %49 = inttoptr i64 %47 to i64* {
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	}

[0x5604437b9948]:   %50 = load i64, i64* %49, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	}

[0x5604437b99c0]:   store i64 %50, i64* %RDX, align 8, !tbaa !1261 {
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	}

[0x5604437b9a40]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	}

[0x5604437b9b00]:   %51 = add i64 %44, -358 {
	[0x5604437e1640]:  %52 = add i64 %44, -358
	}

[0x5604437b9bc0]:   %52 = add i64 %44, 19 {
	[0x560443770e20]:  %53 = add i64 %44, 19
	}

[0x5604437b9c28]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	}

[0x5604437b9ca0]:   %54 = add i64 %53, -8 {
	[0x560443771ee0]:  %55 = add i64 %54, -8
	}

[0x5604437b9d08]:   %55 = inttoptr i64 %54 to i64* {
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	}

[0x5604437b9d80]:   store i64 %52, i64* %55, align 8 {
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	}

[0x5604437b9e00]:   store i64 %54, i64* %RSP, align 8, !tbaa !1261 {
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	}

[0x5604437b9e80]:   store i64 %51, i64* %PC, align 8, !tbaa !1261 {
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	}

[0x5604437ba088]:   %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x56044376ba80]:  %call2_4005b4 = tail call %struct.Memory.31* @sub_400440.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	}

[0x5604437ba148]:   %57 = load i64, i64* %PC, align 8 {
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	}

[0x5604437ba1c0]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	}

[0x5604437ba228]:   %58 = load i64, i64* %RBP, align 8 {
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	}

[0x5604437ba2e0]:   %59 = add i64 %58, -12 {
	[0x5604437710d0]:  %60 = add i64 %59, -12
	}

[0x5604437ba348]:   %60 = load i32, i32* %EAX, align 4 {
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	}

[0x5604437ba3c0]:   %61 = add i64 %57, 5 {
	[0x560443770f80]:  %62 = add i64 %58, 5
	}

[0x5604437ba440]:   store i64 %61, i64* %PC, align 8 {
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	}

[0x5604437ba4a8]:   %62 = inttoptr i64 %59 to i32* {
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	}

[0x5604437ba520]:   store i32 %60, i32* %62, align 4 {
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	}

[0x5604437ba588]:   %63 = load i32, i32* %ECX, align 4 {
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	}

[0x5604437ba5e8]:   %64 = zext i32 %63 to i64 {
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	}

[0x5604437ba648]:   %65 = load i64, i64* %PC, align 8 {
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	}

[0x5604437ba6c0]:   store i64 %64, i64* %RAX, align 8, !tbaa !1261 {
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	}

[0x5604437ba728]:   %66 = load i64, i64* %RSP, align 8 {
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	}

[0x5604437ba7a0]:   %67 = add i64 %66, 16 {
	[0x560443772580]:  %68 = add i64 %67, 16
	}

[0x5604437ba820]:   store i64 %67, i64* %RSP, align 8, !tbaa !1261 {
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	}

[0x5604437ba8e0]:   %68 = icmp ugt i64 %66, -17 {
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	}

[0x5604437ba948]:   %69 = zext i1 %68 to i8 {
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	}

[0x5604437ba9c0]:   store i8 %69, i8* %14, align 1, !tbaa !1265 {
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	}

[0x5604437baa28]:   %70 = trunc i64 %67 to i32 {
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	}

[0x5604437baaa0]:   %71 = and i32 %70, 255 {
	[0x560443772100]:  %72 = and i32 %71, 255
	}

[0x5604437bab40]:   %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9 {
	[0x5604437f53a0]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x5604437bac08]:   %73 = trunc i32 %72 to i8 {
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	}

[0x5604437bac80]:   %74 = and i8 %73, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	[0x5604437747e0]:  %75 = and i8 %74, 1
	}

[0x5604437bad00]:   %75 = xor i8 %74, 1 {
	[0x56044376dbc0]:  %20 = xor i8 %19, 1
	[0x5604437771a0]:  %76 = xor i8 %75, 1
	}

[0x5604437bad80]:   store i8 %75, i8* %21, align 1, !tbaa !1279 {
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	}

[0x5604437bae00]:   %76 = xor i64 %66, 16 {
	[0x560443776e70]:  %77 = xor i64 %67, 16
	}

[0x5604437bae80]:   %77 = xor i64 %76, %67 {
	[0x560443776d10]:  %78 = xor i64 %77, %68
	}

[0x5604437baf00]:   %78 = lshr i64 %77, 4 {
	[0x560443776bb0]:  %79 = lshr i64 %78, 4
	}

[0x5604437baf68]:   %79 = trunc i64 %78 to i8 {
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	}

[0x5604437bafe0]:   %80 = and i8 %79, 1 {
	[0x560443776a50]:  %81 = and i8 %80, 1
	}

[0x5604437bb060]:   store i8 %80, i8* %27, align 1, !tbaa !1280 {
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	}

[0x5604437bb0e0]:   %81 = icmp eq i64 %67, 0 {
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	}

[0x5604437bb148]:   %82 = zext i1 %81 to i8 {
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	}

[0x5604437bb1c0]:   store i8 %82, i8* %30, align 1, !tbaa !1281 {
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	}

[0x5604437bb240]:   %83 = lshr i64 %67, 63 {
	[0x56044376ec30]:  %84 = lshr i64 %68, 63
	}

[0x5604437bb2a8]:   %84 = trunc i64 %83 to i8 {
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	}

[0x5604437bb320]:   store i8 %84, i8* %33, align 1, !tbaa !1282 {
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	}

[0x5604437bb3a0]:   %85 = lshr i64 %66, 63 {
	[0x56044376e9b0]:  %86 = lshr i64 %67, 63
	}

[0x5604437bb420]:   %86 = xor i64 %83, %85 {
	[0x56044376e860]:  %87 = xor i64 %84, %86
	}

[0x5604437bb4a0]:   %87 = add nuw nsw i64 %86, %83 {
	[0x56044376e680]:  %88 = add nuw nsw i64 %87, %84
	}

[0x5604437bb520]:   %88 = icmp eq i64 %87, 2 {
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	}

[0x5604437bb588]:   %89 = zext i1 %88 to i8 {
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	}

[0x5604437bb600]:   store i8 %89, i8* %39, align 1, !tbaa !1283 {
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	}

[0x5604437bb680]:   %90 = add i64 %65, 7 {
	[0x56044377a190]:  %91 = add i64 %66, 7
	}

[0x5604437bb700]:   store i64 %90, i64* %PC, align 8 {
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	}

[0x5604437bb780]:   %91 = add i64 %66, 24 {
	[0x560443779f50]:  %92 = add i64 %67, 24
	}

[0x5604437bb7e8]:   %92 = inttoptr i64 %67 to i64* {
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437bb848]:   %93 = load i64, i64* %92, align 8 {
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437bb8c0]:   store i64 %93, i64* %RBP, align 8, !tbaa !1261 {
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	}

[0x5604437bb940]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	}

[0x5604437bb9c0]:   %94 = add i64 %65, 8 {
	[0x560443779ab0]:  %95 = add i64 %66, 8
	}

[0x5604437bba40]:   store i64 %94, i64* %PC, align 8 {
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	}

[0x5604437bbaa8]:   %95 = inttoptr i64 %91 to i64* {
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	}

[0x5604437bbb08]:   %96 = load i64, i64* %95, align 8 {
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	}

[0x5604437bbb80]:   store i64 %96, i64* %PC, align 8, !tbaa !1261 {
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	}

[0x5604437bbc00]:   %97 = add i64 %66, 32 {
	[0x56044377cd70]:  %98 = add i64 %67, 32
	}

[0x5604437bbc80]:   store i64 %97, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	}

[0x5604437bbce8]:   ret %struct.Memory* %56 {
	[0x5604437e63e8]:  ret %struct.Memory.31* %call2_4005b4
	}

[0x560443820578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x5604437f48d8]:  %51 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x560443821d58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x560443782a68]:  %57 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 5, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0

BB match:%block_400590 --> %entry
Corresponding instructions:[0x5604437b7a78]:   %5 = load i64, i64* %RBP, align 8
[0x5604437ca9d8]:   %4 = load i64, i64* %RBP.i, align 8
Retrieved BB Matches...
[0x5604437b6fc0]: block_400590 {
	[0x560443769f40]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5604437771a0]:   %76 = xor i8 %75, 1
From the pot matches of: [0x5604437b8440]:   %20 = xor i8 %19, 1


Uprime : [0x5604437b8580]:   store i8 %20, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x5604437e0540]:   store i8 %20, i8* %21, align 1


Adj: [0x560443777050]:   store i8 %76, i8* %21, align 1


Removing: [0x56044376dbc0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x5604437bad00]:   %75 = xor i8 %74, 1


Uprime : [0x5604437bad80]:   store i8 %75, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x560443777050]:   store i8 %76, i8* %21, align 1


Adj: [0x5604437e0540]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x5604437747e0]:   %75 = and i8 %74, 1
From the pot matches of: [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime : [0x5604437b8440]:   %20 = xor i8 %19, 1


Uprime Matches: [0x56044376dbc0]:   %20 = xor i8 %19, 1


Adj: [0x5604437771a0]:   %76 = xor i8 %75, 1


Removing: [0x56044376dd20]:   %19 = and i8 %18, 1
From the pot matches of: [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime : [0x5604437bad00]:   %75 = xor i8 %74, 1


Uprime Matches: [0x5604437771a0]:   %76 = xor i8 %75, 1


Adj: [0x56044376dbc0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x5604437e4328]:   %74 = trunc i32 %73 to i8
From the pot matches of: [0x5604437b8348]:   %18 = trunc i32 %17 to i8


Uprime : [0x5604437b83c0]:   %19 = and i8 %18, 1


Uprime Matches: [0x56044376dd20]:   %19 = and i8 %18, 1


Adj: [0x5604437747e0]:   %75 = and i8 %74, 1


Removing: [0x5604437db6c8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x5604437bac08]:   %73 = trunc i32 %72 to i8


Uprime : [0x5604437bac80]:   %74 = and i8 %73, 1


Uprime Matches: [0x5604437747e0]:   %75 = and i8 %74, 1


Adj: [0x56044376dd20]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x5604437b6f00]: %struct.State* %0 {
	[0x560443770420]:%struct.State.0* %0
	}

[0x5604437b6f40]: i64 %1 {
	[0x560443770280]:i64 %1
	}

[0x5604437b6f80]: %struct.Memory* %2 {
	[0x560443770120]:%struct.Memory.31* %2
	}

[0x5604437b7108]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5604437623a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	}

[0x5604437b71e0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5604437605f0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5604437b7258]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5604437e3158]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x5604437b7328]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5604437e3e68]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x5604437b73d8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x560443744128]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	}

[0x5604437b7498]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x5604437ceaa8]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	}

[0x5604437b75a0]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x5604437cb530]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x5604437b76b0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x560443816050]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x5604437b77c0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5604437cda60]:  %RDI.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5604437b78d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560443816220]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5604437b79e0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560443816410]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5604437b7a78]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5604437ca9d8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5604437b7af0]:   %6 = add i64 %1, 1 {
	[0x56044376c050]:  %5 = add i64 %1, 1
	}

[0x5604437b7b70]:   store i64 %6, i64* %PC, align 8 {
	[0x56044376be10]:  store i64 %5, i64* %3, align 8
	}

[0x5604437b7bd8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5604437cabc8]:  %7 = load i64, i64* %6, align 8
	}

[0x5604437b7c50]:   %8 = add i64 %7, -8 {
	[0x56044376bcc0]:  %8 = add i64 %7, -8
	}

[0x5604437b7cd0]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5604437b1bc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5604437b7d48]:   %9 = inttoptr i64 %8 to i64* {
	[0x5604437cad98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5604437b7dc0]:   store i64 %5, i64* %9, align 8 {
	[0x56044376b7a0]:  store i64 %4, i64* %9, align 8
	}

[0x5604437b7e28]:   %10 = load i64, i64* %PC, align 8 {
	[0x5604437980e8]:  %10 = load i64, i64* %3, align 8
	}

[0x5604437b7ea0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5604437df280]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5604437b7f20]:   %11 = add i64 %7, -24 {
	[0x5604437dd840]:  %11 = add i64 %7, -24
	}

[0x5604437b7fa0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x5604437daba0]:  store i64 %11, i64* %6, align 8
	}

[0x5604437b8020]:   %12 = icmp ult i64 %8, 16 {
	[0x56044376d520]:  %12 = icmp ult i64 %8, 16
	}

[0x5604437b8088]:   %13 = zext i1 %12 to i8 {
	[0x5604437dd478]:  %13 = zext i1 %12 to i8
	}

[0x5604437b8130]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5604438b5fc0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5604437b81c0]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x5604437e0980]:  store i8 %13, i8* %14, align 1
	}

[0x5604437b8228]:   %15 = trunc i64 %11 to i32 {
	[0x5604437dd748]:  %15 = trunc i64 %11 to i32
	}

[0x5604437b82a0]:   %16 = and i32 %15, 255 {
	[0x5604437e0870]:  %16 = and i32 %15, 255
	}

[0x5604437b8348]:   %18 = trunc i32 %17 to i8 {
	[0x5604437db6c8]:  %18 = trunc i32 %17 to i8
	}

[0x5604437b83c0]:   %19 = and i8 %18, 1 {
	[0x56044376dd20]:  %19 = and i8 %18, 1
	}

[0x5604437b8440]:   %20 = xor i8 %19, 1 {
	[0x56044376dbc0]:  %20 = xor i8 %19, 1
	}

[0x5604437b84f0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5604437d6f00]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5604437b8580]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x5604437e0540]:  store i8 %20, i8* %21, align 1
	}

[0x5604437b8600]:   %22 = xor i64 %8, 16 {
	[0x56044376d670]:  %22 = xor i64 %8, 16
	}

[0x5604437b8680]:   %23 = xor i64 %22, %11 {
	[0x5604437e0430]:  %23 = xor i64 %22, %11
	}

[0x5604437b8700]:   %24 = lshr i64 %23, 4 {
	[0x5604437df480]:  %24 = lshr i64 %23, 4
	}

[0x5604437b8768]:   %25 = trunc i64 %24 to i8 {
	[0x5604437db298]:  %25 = trunc i64 %24 to i8
	}

[0x5604437b87e0]:   %26 = and i8 %25, 1 {
	[0x56044376f1c0]:  %26 = and i8 %25, 1
	}

[0x5604437b8890]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560443770a50]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5604437b8920]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x56044376f060]:  store i8 %26, i8* %27, align 1
	}

[0x5604437b89a0]:   %28 = icmp eq i64 %11, 0 {
	[0x5604437e0dc0]:  %28 = icmp eq i64 %11, 0
	}

[0x5604437b8a08]:   %29 = zext i1 %28 to i8 {
	[0x560443814728]:  %29 = zext i1 %28 to i8
	}

[0x5604437b8ab0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5604437707e0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5604437b8b40]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x5604437df7d0]:  store i8 %29, i8* %30, align 1
	}

[0x5604437b8bc0]:   %31 = lshr i64 %11, 63 {
	[0x5604437e0ba0]:  %31 = lshr i64 %11, 63
	}

[0x5604437b8c28]:   %32 = trunc i64 %31 to i8 {
	[0x5604438106e8]:  %32 = trunc i64 %31 to i8
	}

[0x5604437b8cd0]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56044376f2d0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5604437b8d60]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x5604437df680]:  store i8 %32, i8* %33, align 1
	}

[0x5604437b8de0]:   %34 = lshr i64 %8, 63 {
	[0x56044376dfa0]:  %34 = lshr i64 %8, 63
	}

[0x5604437b8e60]:   %35 = xor i64 %31, %34 {
	[0x5604437e0fe0]:  %35 = xor i64 %31, %34
	}

[0x5604437b8ee0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56044376fb00]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5604437b8f60]:   %37 = icmp eq i64 %36, 2 {
	[0x5604437e1420]:  %37 = icmp eq i64 %36, 2
	}

[0x5604437b8fc8]:   %38 = zext i1 %37 to i8 {
	[0x5604437424a8]:  %38 = zext i1 %37 to i8
	}

[0x5604437b9070]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56044376c160]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5604437b9100]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x56044376f9b0]:  store i8 %38, i8* %39, align 1
	}

[0x5604437b9260]:   store i64 add (i64 ptrtoint (%seg_400650__rodata_type* @seg_400650__rodata to i64), i64 29), i64* %RSI, align 8, !tbaa !1261 {
	[0x5604437e1310]:  store i64 4195949, i64* %RSI.i, align 8
	}

[0x5604437b92e0]:   %40 = add i64 %7, -16 {
	[0x5604437e1200]:  %40 = add i64 %7, -16
	}

[0x5604437b9348]:   %41 = load i64, i64* %RDI, align 8 {
	[0x5604437de838]:  %41 = load i64, i64* %RDI.i16, align 8
	}

[0x5604437b9400]:   %42 = add i64 %10, 21 {
	[0x56044376f850]:  %42 = add i64 %10, 21
	}

[0x5604437b9480]:   store i64 %42, i64* %PC, align 8 {
	[0x56044376f6f0]:  store i64 %42, i64* %3, align 8
	}

[0x5604437b94e8]:   %43 = inttoptr i64 %40 to i64* {
	[0x5604437e2448]:  %43 = inttoptr i64 %40 to i64*
	}

[0x5604437b9560]:   store i64 %41, i64* %43, align 8 {
	[0x56044376fc60]:  store i64 %41, i64* %43, align 8
	}

[0x5604437b95c8]:   %44 = load i64, i64* %PC, align 8 {
	[0x5604437e1d68]:  %44 = load i64, i64* %3, align 8
	}

[0x5604437b9628]:   %45 = load i64, i64* @stderr, align 64 {
	[0x5604437e19d8]:  %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
	}

[0x5604437b96a0]:   store i64 %45, i64* %RDI, align 8, !tbaa !1261 {
	[0x560443770cd0]:  store i64 %45, i64* %RDI.i16, align 8
	}

[0x5604437b9708]:   %46 = load i64, i64* %RBP, align 8 {
	[0x5604437e18a8]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5604437b9780]:   %47 = add i64 %46, -8 {
	[0x5604437e1570]:  %47 = add i64 %46, -8
	}

[0x5604437b9800]:   %48 = add i64 %44, 12 {
	[0x560443770370]:  %48 = add i64 %44, 12
	}

[0x5604437b9880]:   store i64 %48, i64* %PC, align 8 {
	[0x5604437701d0]:  store i64 %48, i64* %3, align 8
	}

[0x5604437b98e8]:   %49 = inttoptr i64 %47 to i64* {
	[0x5604437df918]:  %49 = inttoptr i64 %47 to i64*
	}

[0x5604437b9948]:   %50 = load i64, i64* %49, align 8 {
	[0x56044376de28]:  %50 = load i64, i64* %49, align 8
	}

[0x5604437b99c0]:   store i64 %50, i64* %RDX, align 8, !tbaa !1261 {
	[0x560443770070]:  store i64 %50, i64* %RDX.i, align 8
	}

[0x5604437b9a40]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56044376fdb0]:  store i8 0, i8* %AL.i, align 1
	}

[0x5604437b9b00]:   %51 = add i64 %44, -358 {
	[0x5604437e1640]:  %52 = add i64 %44, -358
	}

[0x5604437b9bc0]:   %52 = add i64 %44, 19 {
	[0x560443770e20]:  %53 = add i64 %44, 19
	}

[0x5604437b9c28]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5604437e26a8]:  %54 = load i64, i64* %6, align 8
	}

[0x5604437b9ca0]:   %54 = add i64 %53, -8 {
	[0x560443771ee0]:  %55 = add i64 %54, -8
	}

[0x5604437b9d08]:   %55 = inttoptr i64 %54 to i64* {
	[0x5604437e3f98]:  %56 = inttoptr i64 %55 to i64*
	}

[0x5604437b9d80]:   store i64 %52, i64* %55, align 8 {
	[0x560443772950]:  store i64 %53, i64* %56, align 8
	}

[0x5604437b9e00]:   store i64 %54, i64* %RSP, align 8, !tbaa !1261 {
	[0x560443771660]:  store i64 %55, i64* %6, align 8
	}

[0x5604437b9e80]:   store i64 %51, i64* %PC, align 8, !tbaa !1261 {
	[0x560443771460]:  store i64 %52, i64* %3, align 8
	}

[0x5604437ba088]:   %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x56044376ba80]:  %call2_4005b4 = tail call %struct.Memory.31* @sub_400440.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	}

[0x5604437ba148]:   %57 = load i64, i64* %PC, align 8 {
	[0x5604437e3c08]:  %58 = load i64, i64* %3, align 8
	}

[0x5604437ba1c0]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x560443771230]:  store i64 0, i64* %RCX.i, align 8
	}

[0x5604437ba228]:   %58 = load i64, i64* %RBP, align 8 {
	[0x5604437e3028]:  %59 = load i64, i64* %RBP.i, align 8
	}

[0x5604437ba2e0]:   %59 = add i64 %58, -12 {
	[0x5604437710d0]:  %60 = add i64 %59, -12
	}

[0x5604437ba348]:   %60 = load i32, i32* %EAX, align 4 {
	[0x5604437e2ef8]:  %61 = load i32, i32* %EAX.i, align 4
	}

[0x5604437ba3c0]:   %61 = add i64 %57, 5 {
	[0x560443770f80]:  %62 = add i64 %58, 5
	}

[0x5604437ba440]:   store i64 %61, i64* %PC, align 8 {
	[0x560443771ff0]:  store i64 %62, i64* %3, align 8
	}

[0x5604437ba4a8]:   %62 = inttoptr i64 %59 to i32* {
	[0x5604437e2a38]:  %63 = inttoptr i64 %60 to i32*
	}

[0x5604437ba520]:   store i32 %60, i32* %62, align 4 {
	[0x560443772360]:  store i32 %61, i32* %63, align 4
	}

[0x5604437ba588]:   %63 = load i32, i32* %ECX, align 4 {
	[0x5604437e40c8]:  %64 = load i32, i32* %ECX.i9, align 4
	}

[0x5604437ba5e8]:   %64 = zext i32 %63 to i64 {
	[0x5604437e5f28]:  %65 = zext i32 %64 to i64
	}

[0x5604437ba648]:   %65 = load i64, i64* %PC, align 8 {
	[0x5604437e5df8]:  %66 = load i64, i64* %3, align 8
	}

[0x5604437ba6c0]:   store i64 %64, i64* %RAX, align 8, !tbaa !1261 {
	[0x560443774020]:  store i64 %65, i64* %RAX.i, align 8
	}

[0x5604437ba728]:   %66 = load i64, i64* %RSP, align 8 {
	[0x5604437e5b98]:  %67 = load i64, i64* %6, align 8
	}

[0x5604437ba7a0]:   %67 = add i64 %66, 16 {
	[0x560443772580]:  %68 = add i64 %67, 16
	}

[0x5604437ba820]:   store i64 %67, i64* %RSP, align 8, !tbaa !1261 {
	[0x560443773ca0]:  store i64 %68, i64* %6, align 8
	}

[0x5604437ba8e0]:   %68 = icmp ugt i64 %66, -17 {
	[0x560443772430]:  %69 = icmp ugt i64 %67, -17
	}

[0x5604437ba948]:   %69 = zext i1 %68 to i8 {
	[0x5604437e5a68]:  %70 = zext i1 %69 to i8
	}

[0x5604437ba9c0]:   store i8 %69, i8* %14, align 1, !tbaa !1265 {
	[0x560443773a50]:  store i8 %70, i8* %14, align 1
	}

[0x5604437baa28]:   %70 = trunc i64 %67 to i32 {
	[0x5604437e5478]:  %71 = trunc i64 %68 to i32
	}

[0x5604437baaa0]:   %71 = and i32 %70, 255 {
	[0x560443772100]:  %72 = and i32 %71, 255
	}

[0x5604437bab40]:   %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9 {
	[0x5604437f53a0]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x5604437bac08]:   %73 = trunc i32 %72 to i8 {
	[0x5604437e4328]:  %74 = trunc i32 %73 to i8
	}

[0x5604437bac80]:   %74 = and i8 %73, 1 {
	[0x5604437747e0]:  %75 = and i8 %74, 1
	}

[0x5604437bad00]:   %75 = xor i8 %74, 1 {
	[0x5604437771a0]:  %76 = xor i8 %75, 1
	}

[0x5604437bad80]:   store i8 %75, i8* %21, align 1, !tbaa !1279 {
	[0x560443777050]:  store i8 %76, i8* %21, align 1
	}

[0x5604437bae00]:   %76 = xor i64 %66, 16 {
	[0x560443776e70]:  %77 = xor i64 %67, 16
	}

[0x5604437bae80]:   %77 = xor i64 %76, %67 {
	[0x560443776d10]:  %78 = xor i64 %77, %68
	}

[0x5604437baf00]:   %78 = lshr i64 %77, 4 {
	[0x560443776bb0]:  %79 = lshr i64 %78, 4
	}

[0x5604437baf68]:   %79 = trunc i64 %78 to i8 {
	[0x5604437e41f8]:  %80 = trunc i64 %79 to i8
	}

[0x5604437bafe0]:   %80 = and i8 %79, 1 {
	[0x560443776a50]:  %81 = and i8 %80, 1
	}

[0x5604437bb060]:   store i8 %80, i8* %27, align 1, !tbaa !1280 {
	[0x560443774fa0]:  store i8 %81, i8* %27, align 1
	}

[0x5604437bb0e0]:   %81 = icmp eq i64 %67, 0 {
	[0x560443777460]:  %82 = icmp eq i64 %68, 0
	}

[0x5604437bb148]:   %82 = zext i1 %81 to i8 {
	[0x5604437e6058]:  %83 = zext i1 %82 to i8
	}

[0x5604437bb1c0]:   store i8 %82, i8* %30, align 1, !tbaa !1281 {
	[0x56044376ed90]:  store i8 %83, i8* %30, align 1
	}

[0x5604437bb240]:   %83 = lshr i64 %67, 63 {
	[0x56044376ec30]:  %84 = lshr i64 %68, 63
	}

[0x5604437bb2a8]:   %84 = trunc i64 %83 to i8 {
	[0x5604437e7228]:  %85 = trunc i64 %84 to i8
	}

[0x5604437bb320]:   store i8 %84, i8* %33, align 1, !tbaa !1282 {
	[0x56044376ead0]:  store i8 %85, i8* %33, align 1
	}

[0x5604437bb3a0]:   %85 = lshr i64 %66, 63 {
	[0x56044376e9b0]:  %86 = lshr i64 %67, 63
	}

[0x5604437bb420]:   %86 = xor i64 %83, %85 {
	[0x56044376e860]:  %87 = xor i64 %84, %86
	}

[0x5604437bb4a0]:   %87 = add nuw nsw i64 %86, %83 {
	[0x56044376e680]:  %88 = add nuw nsw i64 %87, %84
	}

[0x5604437bb520]:   %88 = icmp eq i64 %87, 2 {
	[0x56044376e5a0]:  %89 = icmp eq i64 %88, 2
	}

[0x5604437bb588]:   %89 = zext i1 %88 to i8 {
	[0x5604437e70f8]:  %90 = zext i1 %89 to i8
	}

[0x5604437bb600]:   store i8 %89, i8* %39, align 1, !tbaa !1283 {
	[0x5604437797b0]:  store i8 %90, i8* %39, align 1
	}

[0x5604437bb680]:   %90 = add i64 %65, 7 {
	[0x56044377a190]:  %91 = add i64 %66, 7
	}

[0x5604437bb700]:   store i64 %90, i64* %PC, align 8 {
	[0x56044377a0b0]:  store i64 %91, i64* %3, align 8
	}

[0x5604437bb780]:   %91 = add i64 %66, 24 {
	[0x560443779f50]:  %92 = add i64 %67, 24
	}

[0x5604437bb7e8]:   %92 = inttoptr i64 %67 to i64* {
	[0x5604437e6fc8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x5604437bb848]:   %93 = load i64, i64* %92, align 8 {
	[0x5604437e6e98]:  %94 = load i64, i64* %93, align 8
	}

[0x5604437bb8c0]:   store i64 %93, i64* %RBP, align 8, !tbaa !1261 {
	[0x560443779d70]:  store i64 %94, i64* %RBP.i, align 8
	}

[0x5604437bb940]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x560443779c10]:  store i64 %92, i64* %6, align 8
	}

[0x5604437bb9c0]:   %94 = add i64 %65, 8 {
	[0x560443779ab0]:  %95 = add i64 %66, 8
	}

[0x5604437bba40]:   store i64 %94, i64* %PC, align 8 {
	[0x560443779910]:  store i64 %95, i64* %3, align 8
	}

[0x5604437bbaa8]:   %95 = inttoptr i64 %91 to i64* {
	[0x5604437e6778]:  %96 = inttoptr i64 %92 to i64*
	}

[0x5604437bbb08]:   %96 = load i64, i64* %95, align 8 {
	[0x56044377a388]:  %97 = load i64, i64* %96, align 8
	}

[0x5604437bbb80]:   store i64 %96, i64* %PC, align 8, !tbaa !1261 {
	[0x56044377a620]:  store i64 %97, i64* %3, align 8
	}

[0x5604437bbc00]:   %97 = add i64 %66, 32 {
	[0x56044377cd70]:  %98 = add i64 %67, 32
	}

[0x5604437bbc80]:   store i64 %97, i64* %RSP, align 8, !tbaa !1261 {
	[0x56044377cc10]:  store i64 %98, i64* %6, align 8
	}

[0x5604437bbce8]:   ret %struct.Memory* %56 {
	[0x5604437e63e8]:  ret %struct.Memory.31* %call2_4005b4
	}

[0x560443820578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x5604437f48d8]:  %51 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x560443821d58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x560443782a68]:  %57 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 5, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5604437b6fc0]: block_400590 {
	[0x560443769f40]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [print_it] from mcsema/test.opt.ll
Extracting function [print_it] from mcsema/test.proposed.opt.ll
Matcher Done...
