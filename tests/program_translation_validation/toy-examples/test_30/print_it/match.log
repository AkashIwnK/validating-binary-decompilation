Matching sub_400560_print_it Vs print_it


[Info] Retrieve Potential Matches...
[0x564f0ba6a198]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x564f0baa23a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	[0x564f0baa3458]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	[0x564f0baa3f08]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x564f0ba6f680]: %struct.State* %0 {
	[0x564f0bac7ea0]:%struct.State.0* %0
	}

[0x564f0ba6f790]: i64 %1 {
	[0x564f0bacb010]:i64 %1
	}

[0x564f0ba6f940]: %struct.Memory* %2 {
	[0x564f0bacda70]:%struct.Memory.31* %2
	}

[0x564f0ba71250]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x564f0ba3aab0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x564f0ba71328]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564f0b9ff838]:  %51 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564f0ba71398]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x564f0baa23a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	[0x564f0baa3458]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	[0x564f0baa3f08]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x564f0ba71458]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x564f0ba00268]:  %57 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x564f0ba71518]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x564f0baa23a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	[0x564f0baa3458]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	[0x564f0baa3f08]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x564f0ba715c8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x564f0ba08628]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	[0x564f0ba9c6e8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	}

[0x564f0ba71688]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x564f0ba08628]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	[0x564f0ba9c6e8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	}

[0x564f0ba71790]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x564f0ba40090]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x564f0ba718a0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x564f0ba3f570]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x564f0ba719b0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x564f0ba3f910]:  %RDI.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x564f0ba71ac0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x564f0ba3edf0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x564f0ba71bd0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x564f0ba3ce80]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x564f0ba71c68]:   %5 = load i64, i64* %RBP, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba71ce0]:   %6 = add i64 %1, 1 {
	[0x564f0b9f4010]:  %5 = add i64 %1, 1
	}

[0x564f0ba71d60]:   store i64 %6, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba71dc8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba71e40]:   %8 = add i64 %7, -8 {
	[0x564f0b9f2f70]:  %8 = add i64 %7, -8
	[0x564f0bb4f660]:  %47 = add i64 %46, -8
	[0x564f0bb61090]:  %55 = add i64 %54, -8
	}

[0x564f0ba71ec0]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x564f0baa7460]:  %call2_400584 = tail call %struct.Memory.31* @sub_400420.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	[0x564f0babf310]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x564f0bac3280]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x564f0ba71f38]:   %9 = inttoptr i64 %8 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba71fb0]:   store i64 %5, i64* %9, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72018]:   %10 = load i64, i64* %PC, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba72090]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72110]:   %11 = add i64 %7, -24 {
	[0x564f0ba9d320]:  %11 = add i64 %7, -24
	}

[0x564f0ba72190]:   store i64 %11, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72210]:   %12 = icmp ult i64 %8, 16 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba72278]:   %13 = zext i1 %12 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba72320]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x564f0ba9beb0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x564f0ba723b0]:   store i8 %13, i8* %14, align 1, !tbaa !1261 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72418]:   %15 = trunc i64 %11 to i32 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba72490]:   %16 = and i32 %15, 255 {
	[0x564f0ba9e5f0]:  %16 = and i32 %15, 255
	[0x564f0bac1b40]:  %72 = and i32 %71, 255
	}

[0x564f0ba72510]:   store i8 %32, i8* %33, align 1, !tbaa !1278 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72590]:   %34 = lshr i64 %8, 63 {
	[0x564f0ba9fc80]:  %31 = lshr i64 %11, 63
	[0x564f0bac0710]:  %34 = lshr i64 %8, 63
	[0x564f0bac6ed0]:  %84 = lshr i64 %68, 63
	[0x564f0bac7a30]:  %86 = lshr i64 %67, 63
	}

[0x564f0ba72608]:   %18 = trunc i32 %17 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba72680]:   %19 = and i8 %18, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	[0x564f0babe300]:  %26 = and i8 %25, 1
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	[0x564f0bac4840]:  %81 = and i8 %80, 1
	}

[0x564f0ba72700]:   %20 = xor i8 %19, 1 {
	[0x564f0ba9e810]:  %20 = xor i8 %19, 1
	[0x564f0bac3510]:  %76 = xor i8 %75, 1
	}

[0x564f0ba727b0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x564f0ba9f720]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x564f0ba72840]:   store i8 %20, i8* %21, align 1, !tbaa !1275 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba728c0]:   %22 = xor i64 %8, 16 {
	[0x564f0ba9ea70]:  %22 = xor i64 %8, 16
	[0x564f0bac42f0]:  %77 = xor i64 %67, 16
	}

[0x564f0ba72940]:   %23 = xor i64 %22, %11 {
	[0x564f0ba9d6f0]:  %35 = xor i64 %31, %34
	[0x564f0ba9eb40]:  %23 = xor i64 %22, %11
	[0x564f0bac44a0]:  %78 = xor i64 %77, %68
	[0x564f0bac7b20]:  %87 = xor i64 %84, %86
	}

[0x564f0ba729c0]:   %24 = lshr i64 %23, 4 {
	[0x564f0ba9ec50]:  %24 = lshr i64 %23, 4
	[0x564f0bac4740]:  %79 = lshr i64 %78, 4
	}

[0x564f0ba72a28]:   %25 = trunc i64 %24 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba72aa0]:   %26 = and i8 %25, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	[0x564f0babe300]:  %26 = and i8 %25, 1
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	[0x564f0bac4840]:  %81 = and i8 %80, 1
	}

[0x564f0ba72b50]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x564f0bac1390]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x564f0ba72be0]:   store i8 %26, i8* %27, align 1, !tbaa !1276 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72c60]:   %28 = icmp eq i64 %11, 0 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba72cc8]:   %29 = zext i1 %28 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba72d70]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x564f0bab28a0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x564f0ba72e00]:   store i8 %29, i8* %30, align 1, !tbaa !1277 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba72e80]:   %31 = lshr i64 %11, 63 {
	[0x564f0ba9fc80]:  %31 = lshr i64 %11, 63
	[0x564f0bac0710]:  %34 = lshr i64 %8, 63
	[0x564f0bac6ed0]:  %84 = lshr i64 %68, 63
	[0x564f0bac7a30]:  %86 = lshr i64 %67, 63
	}

[0x564f0ba72ee8]:   %32 = trunc i64 %31 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba72f90]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x564f0baa0400]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x564f0ba89818]:   %65 = load i64, i64* %PC, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba89890]:   store i64 %64, i64* %RAX, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba898f8]:   %66 = load i64, i64* %RSP, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba89970]:   %67 = add i64 %66, 16 {
	[0x564f0bac0640]:  %68 = add i64 %67, 16
	}

[0x564f0ba89a40]:   %35 = xor i64 %31, %34 {
	[0x564f0ba9d6f0]:  %35 = xor i64 %31, %34
	[0x564f0ba9eb40]:  %23 = xor i64 %22, %11
	[0x564f0bac44a0]:  %78 = xor i64 %77, %68
	[0x564f0bac7b20]:  %87 = xor i64 %84, %86
	}

[0x564f0ba89ac0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x564f0babe4e0]:  %88 = add nuw nsw i64 %87, %84
	[0x564f0bac14e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x564f0ba89b40]:   %37 = icmp eq i64 %36, 2 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba89ba8]:   %38 = zext i1 %37 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba89c50]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x564f0baa7200]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x564f0ba89ce0]:   store i8 %38, i8* %39, align 1, !tbaa !1279 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba89dc0]:   store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 29), i64* %RSI, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba89e40]:   %40 = add i64 %7, -16 {
	[0x564f0baa9670]:  %40 = add i64 %7, -16
	}

[0x564f0ba89ea8]:   %41 = load i64, i64* %RDI, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba89f60]:   %42 = add i64 %10, 21 {
	[0x564f0baa97a0]:  %42 = add i64 %10, 21
	}

[0x564f0ba89fe0]:   store i64 %42, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a048]:   %43 = inttoptr i64 %40 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8a0c0]:   store i64 %41, i64* %43, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a128]:   %44 = load i64, i64* %PC, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a268]:   %46 = load i64, i64* %RBP, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a2e0]:   %47 = add i64 %46, -8 {
	[0x564f0b9f2f70]:  %8 = add i64 %7, -8
	[0x564f0bb4f660]:  %47 = add i64 %46, -8
	[0x564f0bb61090]:  %55 = add i64 %54, -8
	}

[0x564f0ba8a360]:   %48 = add i64 %44, 12 {
	[0x564f0bb553a0]:  %48 = add i64 %44, 12
	}

[0x564f0ba8a3e0]:   store i64 %48, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a448]:   %49 = inttoptr i64 %47 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8a4a8]:   %50 = load i64, i64* %49, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a520]:   store i64 %50, i64* %RDX, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a5a0]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a660]:   %51 = add i64 %44, -342 {
	[0x564f0bb5c330]:  %52 = add i64 %44, -342
	}

[0x564f0ba8a720]:   %52 = add i64 %44, 19 {
	[0x564f0bb5e8a0]:  %53 = add i64 %44, 19
	}

[0x564f0ba8a788]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a800]:   %54 = add i64 %53, -8 {
	[0x564f0b9f2f70]:  %8 = add i64 %7, -8
	[0x564f0bb4f660]:  %47 = add i64 %46, -8
	[0x564f0bb61090]:  %55 = add i64 %54, -8
	}

[0x564f0ba8a868]:   %55 = inttoptr i64 %54 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8a8e0]:   store i64 %52, i64* %55, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a960]:   store i64 %54, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8a9e0]:   store i64 %51, i64* %PC, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8abb8]:   %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x564f0baa7460]:  %call2_400584 = tail call %struct.Memory.31* @sub_400420.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	[0x564f0babf310]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x564f0bac3280]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x564f0ba8ac28]:   %57 = load i64, i64* %PC, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8aca0]:   store i64 0, i64* %RCX, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8ad08]:   %58 = load i64, i64* %RBP, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8ad80]:   %59 = add i64 %58, -12 {
	[0x564f0ba579c0]:  %60 = add i64 %59, -12
	}

[0x564f0ba8ade8]:   %60 = load i32, i32* %EAX, align 4 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8ae60]:   %61 = add i64 %57, 5 {
	[0x564f0b9ff670]:  %62 = add i64 %58, 5
	}

[0x564f0ba8aee0]:   store i64 %61, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8af48]:   %62 = inttoptr i64 %59 to i32* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8afc0]:   store i32 %60, i32* %62, align 4 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8b028]:   %63 = load i32, i32* %ECX, align 4 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8b088]:   %64 = zext i32 %63 to i64 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba8b510]:   store i64 %67, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8b590]:   %68 = icmp ugt i64 %66, -17 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba8b5f8]:   %69 = zext i1 %68 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba8b670]:   store i8 %69, i8* %14, align 1, !tbaa !1261 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8b6d8]:   %70 = trunc i64 %67 to i32 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba8b750]:   %71 = and i32 %70, 255 {
	[0x564f0ba9e5f0]:  %16 = and i32 %15, 255
	[0x564f0bac1b40]:  %72 = and i32 %71, 255
	}

[0x564f0ba8b7f0]:   %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9 {
	[0x564f0baa7460]:  %call2_400584 = tail call %struct.Memory.31* @sub_400420.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	[0x564f0babf310]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x564f0bac3280]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x564f0ba8b868]:   %73 = trunc i32 %72 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba8b8e0]:   %74 = and i8 %73, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	[0x564f0babe300]:  %26 = and i8 %25, 1
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	[0x564f0bac4840]:  %81 = and i8 %80, 1
	}

[0x564f0ba8b960]:   %75 = xor i8 %74, 1 {
	[0x564f0ba9e810]:  %20 = xor i8 %19, 1
	[0x564f0bac3510]:  %76 = xor i8 %75, 1
	}

[0x564f0ba8b9e0]:   store i8 %75, i8* %21, align 1, !tbaa !1275 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8ba60]:   %76 = xor i64 %66, 16 {
	[0x564f0ba9ea70]:  %22 = xor i64 %8, 16
	[0x564f0bac42f0]:  %77 = xor i64 %67, 16
	}

[0x564f0ba8bae0]:   %77 = xor i64 %76, %67 {
	[0x564f0ba9d6f0]:  %35 = xor i64 %31, %34
	[0x564f0ba9eb40]:  %23 = xor i64 %22, %11
	[0x564f0bac44a0]:  %78 = xor i64 %77, %68
	[0x564f0bac7b20]:  %87 = xor i64 %84, %86
	}

[0x564f0ba8bb60]:   %78 = lshr i64 %77, 4 {
	[0x564f0ba9ec50]:  %24 = lshr i64 %23, 4
	[0x564f0bac4740]:  %79 = lshr i64 %78, 4
	}

[0x564f0ba8bbc8]:   %79 = trunc i64 %78 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba8bc40]:   %80 = and i8 %79, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	[0x564f0babe300]:  %26 = and i8 %25, 1
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	[0x564f0bac4840]:  %81 = and i8 %80, 1
	}

[0x564f0ba8bcc0]:   store i8 %80, i8* %27, align 1, !tbaa !1276 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8bd40]:   %81 = icmp eq i64 %67, 0 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba8bda8]:   %82 = zext i1 %81 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba8be20]:   store i8 %82, i8* %30, align 1, !tbaa !1277 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8bea0]:   %83 = lshr i64 %67, 63 {
	[0x564f0ba9fc80]:  %31 = lshr i64 %11, 63
	[0x564f0bac0710]:  %34 = lshr i64 %8, 63
	[0x564f0bac6ed0]:  %84 = lshr i64 %68, 63
	[0x564f0bac7a30]:  %86 = lshr i64 %67, 63
	}

[0x564f0ba8bf08]:   %84 = trunc i64 %83 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba8bf80]:   store i8 %84, i8* %33, align 1, !tbaa !1278 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c000]:   %85 = lshr i64 %66, 63 {
	[0x564f0ba9fc80]:  %31 = lshr i64 %11, 63
	[0x564f0bac0710]:  %34 = lshr i64 %8, 63
	[0x564f0bac6ed0]:  %84 = lshr i64 %68, 63
	[0x564f0bac7a30]:  %86 = lshr i64 %67, 63
	}

[0x564f0ba8c080]:   %86 = xor i64 %83, %85 {
	[0x564f0ba9d6f0]:  %35 = xor i64 %31, %34
	[0x564f0ba9eb40]:  %23 = xor i64 %22, %11
	[0x564f0bac44a0]:  %78 = xor i64 %77, %68
	[0x564f0bac7b20]:  %87 = xor i64 %84, %86
	}

[0x564f0ba8c100]:   %87 = add nuw nsw i64 %86, %83 {
	[0x564f0babe4e0]:  %88 = add nuw nsw i64 %87, %84
	[0x564f0bac14e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x564f0ba8c180]:   %88 = icmp eq i64 %87, 2 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba8c1e8]:   %89 = zext i1 %88 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba8c260]:   store i8 %89, i8* %39, align 1, !tbaa !1279 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c2e0]:   %90 = add i64 %65, 7 {
	[0x564f0bac1a40]:  %91 = add i64 %66, 7
	}

[0x564f0ba8c360]:   store i64 %90, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c3e0]:   %91 = add i64 %66, 24 {
	[0x564f0baca530]:  %92 = add i64 %67, 24
	}

[0x564f0ba8c448]:   %92 = inttoptr i64 %67 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8c4a8]:   %93 = load i64, i64* %92, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8c520]:   store i64 %93, i64* %RBP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c5a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c620]:   %94 = add i64 %65, 8 {
	[0x564f0bacab20]:  %95 = add i64 %66, 8
	}

[0x564f0ba8c6a0]:   store i64 %94, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c708]:   %95 = inttoptr i64 %91 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8c768]:   %96 = load i64, i64* %95, align 8 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8c7e0]:   store i64 %96, i64* %PC, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c860]:   %97 = add i64 %66, 32 {
	[0x564f0bacc8e0]:  %98 = add i64 %67, 32
	}

[0x564f0ba8c8e0]:   store i64 %97, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8c948]:   ret %struct.Memory* %56 {
	[0x564f0baa8838]:  ret %struct.Memory.31* %call2_400584
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x564f0baa3f08]:   %EAX.i = bitcast %union.anon.4* %51 to i32*
From the pot matches of: [0x564f0ba6a198]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x564f0ba8a5a0]:   store i8 0, i8* %AL, align 1, !tbaa !1280


Uprime Matches: [0x564f0b9f3730]:   store i64 %5, i64* %3, align 8
[0x564f0ba03730]:   store i64 %62, i64* %3, align 8
[0x564f0ba9b8b0]:   store i64 %11, i64* %6, align 8
[0x564f0ba9bc00]:   store i8 %83, i8* %30, align 1
[0x564f0ba9c250]:   store i64 %4, i64* %9, align 8
[0x564f0ba9c360]:   store i64 %8, i64* %RBP.i, align 8
[0x564f0ba9d7e0]:   store i8 %81, i8* %27, align 1
[0x564f0ba9dde0]:   store i8 %29, i8* %30, align 1
[0x564f0ba9e4e0]:   store i8 %13, i8* %14, align 1
[0x564f0ba9f0d0]:   store i8 %26, i8* %27, align 1
[0x564f0ba9fd90]:   store i8 %32, i8* %33, align 1
[0x564f0baa2e50]:   store i64 4195901, i64* %RSI.i, align 8
[0x564f0baa98d0]:   store i64 %42, i64* %3, align 8
[0x564f0baa9a00]:   store i64 %41, i64* %43, align 8
[0x564f0babda80]:   store i8 %20, i8* %21, align 1
[0x564f0babfd80]:   store i64 %65, i64* %RAX.i, align 8
[0x564f0babfff0]:   store i32 %61, i32* %63, align 4
[0x564f0bac0820]:   store i64 %68, i64* %6, align 8
[0x564f0bac0ee0]:   store i8 %70, i8* %14, align 1
[0x564f0bac17a0]:   store i8 %90, i8* %39, align 1
[0x564f0bac2030]:   store i64 %95, i64* %3, align 8
[0x564f0bac2320]:   store i64 %97, i64* %3, align 8
[0x564f0bac2d20]:   store i8 %76, i8* %21, align 1
[0x564f0bac5930]:   store i8 %38, i8* %39, align 1
[0x564f0bac73e0]:   store i8 %85, i8* %33, align 1
[0x564f0bac9d20]:   store i64 %91, i64* %3, align 8
[0x564f0baca900]:   store i64 %94, i64* %RBP.i, align 8
[0x564f0bacaa30]:   store i64 %92, i64* %6, align 8
[0x564f0bacca60]:   store i64 %98, i64* %6, align 8
[0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8
[0x564f0bb566b0]:   store i64 %50, i64* %RDX.i, align 8
[0x564f0bb57bc0]:   store i64 %48, i64* %3, align 8
[0x564f0bb5d100]:   store i8 0, i8* %AL.i, align 1
[0x564f0bb5fbf0]:   store i64 %53, i64* %56, align 8
[0x564f0bb62bc0]:   store i64 %55, i64* %6, align 8
[0x564f0bb66f90]:   store i64 %52, i64* %3, align 8
[0x564f0bb71650]:   store i64 0, i64* %RCX.i, align 8


Adj: [0x564f0baa44f8]:   %61 = load i32, i32* %EAX.i, align 4


Removing: [0x564f0baa23a8]:   %AL.i = bitcast %union.anon.4* %51 to i8*
From the pot matches of: [0x564f0ba71398]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x564f0ba8ade8]:   %60 = load i32, i32* %EAX, align 4


Uprime Matches: [0x564f0ba5d9b8]:   %7 = load i64, i64* %6, align 8
[0x564f0ba5db98]:   %4 = load i64, i64* %RBP.i, align 8
[0x564f0ba99528]:   %10 = load i64, i64* %3, align 8
[0x564f0baa10a8]:   %41 = load i64, i64* %RDI.i16, align 8
[0x564f0baa1698]:   %44 = load i64, i64* %3, align 8
[0x564f0baa17c8]:   %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
[0x564f0baa2278]:   %50 = load i64, i64* %49, align 8
[0x564f0baa24d8]:   %54 = load i64, i64* %6, align 8
[0x564f0baa2f48]:   %97 = load i64, i64* %96, align 8
[0x564f0baa3588]:   %58 = load i64, i64* %3, align 8
[0x564f0baa4038]:   %59 = load i64, i64* %RBP.i, align 8
[0x564f0baa44f8]:   %61 = load i32, i32* %EAX.i, align 4
[0x564f0baa4888]:   %64 = load i32, i32* %ECX.i9, align 4
[0x564f0baa5928]:   %66 = load i64, i64* %3, align 8
[0x564f0baa5a58]:   %67 = load i64, i64* %6, align 8
[0x564f0baa7348]:   %94 = load i64, i64* %93, align 8
[0x564f0bac4c38]:   %46 = load i64, i64* %RBP.i, align 8


Adj: [0x564f0bb5d100]:   store i8 0, i8* %AL.i, align 1


Removing: [0x564f0baa4038]:   %59 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba71c68]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x564f0ba71fb0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x564f0b9f3730]:   store i64 %5, i64* %3, align 8
[0x564f0ba03730]:   store i64 %62, i64* %3, align 8
[0x564f0ba9b8b0]:   store i64 %11, i64* %6, align 8
[0x564f0ba9bc00]:   store i8 %83, i8* %30, align 1
[0x564f0ba9c250]:   store i64 %4, i64* %9, align 8
[0x564f0ba9c360]:   store i64 %8, i64* %RBP.i, align 8
[0x564f0ba9d7e0]:   store i8 %81, i8* %27, align 1
[0x564f0ba9dde0]:   store i8 %29, i8* %30, align 1
[0x564f0ba9e4e0]:   store i8 %13, i8* %14, align 1
[0x564f0ba9f0d0]:   store i8 %26, i8* %27, align 1
[0x564f0ba9fd90]:   store i8 %32, i8* %33, align 1
[0x564f0baa2e50]:   store i64 4195901, i64* %RSI.i, align 8
[0x564f0baa98d0]:   store i64 %42, i64* %3, align 8
[0x564f0baa9a00]:   store i64 %41, i64* %43, align 8
[0x564f0babda80]:   store i8 %20, i8* %21, align 1
[0x564f0babfd80]:   store i64 %65, i64* %RAX.i, align 8
[0x564f0babfff0]:   store i32 %61, i32* %63, align 4
[0x564f0bac0820]:   store i64 %68, i64* %6, align 8
[0x564f0bac0ee0]:   store i8 %70, i8* %14, align 1
[0x564f0bac17a0]:   store i8 %90, i8* %39, align 1
[0x564f0bac2030]:   store i64 %95, i64* %3, align 8
[0x564f0bac2320]:   store i64 %97, i64* %3, align 8
[0x564f0bac2d20]:   store i8 %76, i8* %21, align 1
[0x564f0bac5930]:   store i8 %38, i8* %39, align 1
[0x564f0bac73e0]:   store i8 %85, i8* %33, align 1
[0x564f0bac9d20]:   store i64 %91, i64* %3, align 8
[0x564f0baca900]:   store i64 %94, i64* %RBP.i, align 8
[0x564f0bacaa30]:   store i64 %92, i64* %6, align 8
[0x564f0bacca60]:   store i64 %98, i64* %6, align 8
[0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8
[0x564f0bb566b0]:   store i64 %50, i64* %RDX.i, align 8
[0x564f0bb57bc0]:   store i64 %48, i64* %3, align 8
[0x564f0bb5d100]:   store i8 0, i8* %AL.i, align 1
[0x564f0bb5fbf0]:   store i64 %53, i64* %56, align 8
[0x564f0bb62bc0]:   store i64 %55, i64* %6, align 8
[0x564f0bb66f90]:   store i64 %52, i64* %3, align 8
[0x564f0bb71650]:   store i64 0, i64* %RCX.i, align 8


Adj: [0x564f0ba579c0]:   %60 = add i64 %59, -12


Removing: [0x564f0bac4c38]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba71c68]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x564f0ba71fb0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x564f0b9f3730]:   store i64 %5, i64* %3, align 8
[0x564f0ba03730]:   store i64 %62, i64* %3, align 8
[0x564f0ba9b8b0]:   store i64 %11, i64* %6, align 8
[0x564f0ba9bc00]:   store i8 %83, i8* %30, align 1
[0x564f0ba9c250]:   store i64 %4, i64* %9, align 8
[0x564f0ba9c360]:   store i64 %8, i64* %RBP.i, align 8
[0x564f0ba9d7e0]:   store i8 %81, i8* %27, align 1
[0x564f0ba9dde0]:   store i8 %29, i8* %30, align 1
[0x564f0ba9e4e0]:   store i8 %13, i8* %14, align 1
[0x564f0ba9f0d0]:   store i8 %26, i8* %27, align 1
[0x564f0ba9fd90]:   store i8 %32, i8* %33, align 1
[0x564f0baa2e50]:   store i64 4195901, i64* %RSI.i, align 8
[0x564f0baa98d0]:   store i64 %42, i64* %3, align 8
[0x564f0baa9a00]:   store i64 %41, i64* %43, align 8
[0x564f0babda80]:   store i8 %20, i8* %21, align 1
[0x564f0babfd80]:   store i64 %65, i64* %RAX.i, align 8
[0x564f0babfff0]:   store i32 %61, i32* %63, align 4
[0x564f0bac0820]:   store i64 %68, i64* %6, align 8
[0x564f0bac0ee0]:   store i8 %70, i8* %14, align 1
[0x564f0bac17a0]:   store i8 %90, i8* %39, align 1
[0x564f0bac2030]:   store i64 %95, i64* %3, align 8
[0x564f0bac2320]:   store i64 %97, i64* %3, align 8
[0x564f0bac2d20]:   store i8 %76, i8* %21, align 1
[0x564f0bac5930]:   store i8 %38, i8* %39, align 1
[0x564f0bac73e0]:   store i8 %85, i8* %33, align 1
[0x564f0bac9d20]:   store i64 %91, i64* %3, align 8
[0x564f0baca900]:   store i64 %94, i64* %RBP.i, align 8
[0x564f0bacaa30]:   store i64 %92, i64* %6, align 8
[0x564f0bacca60]:   store i64 %98, i64* %6, align 8
[0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8
[0x564f0bb566b0]:   store i64 %50, i64* %RDX.i, align 8
[0x564f0bb57bc0]:   store i64 %48, i64* %3, align 8
[0x564f0bb5d100]:   store i8 0, i8* %AL.i, align 1
[0x564f0bb5fbf0]:   store i64 %53, i64* %56, align 8
[0x564f0bb62bc0]:   store i64 %55, i64* %6, align 8
[0x564f0bb66f90]:   store i64 %52, i64* %3, align 8
[0x564f0bb71650]:   store i64 0, i64* %RCX.i, align 8


Adj: [0x564f0bb4f660]:   %47 = add i64 %46, -8


Removing: [0x564f0baa24d8]:   %54 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba71dc8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564f0ba89e40]:   %40 = add i64 %7, -16


Uprime Matches: [0x564f0baa9670]:   %40 = add i64 %7, -16


Adj: [0x564f0bb61090]:   %55 = add i64 %54, -8


Removing: [0x564f0baa5a58]:   %67 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba71dc8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564f0ba89e40]:   %40 = add i64 %7, -16


Uprime Matches: [0x564f0baa9670]:   %40 = add i64 %7, -16


Adj: [0x564f0bac0640]:   %68 = add i64 %67, 16
[0x564f0bac0d50]:   %69 = icmp ugt i64 %67, -17
[0x564f0bac42f0]:   %77 = xor i64 %67, 16
[0x564f0bac7a30]:   %86 = lshr i64 %67, 63
[0x564f0baca530]:   %92 = add i64 %67, 24
[0x564f0bacc8e0]:   %98 = add i64 %67, 32


Removing: [0x564f0baa1698]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba72018]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba89f60]:   %42 = add i64 %10, 21


Uprime Matches: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Adj: [0x564f0bb553a0]:   %48 = add i64 %44, 12
[0x564f0bb5c330]:   %52 = add i64 %44, -342
[0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Removing: [0x564f0baa3588]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba72018]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba89f60]:   %42 = add i64 %10, 21


Uprime Matches: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Adj: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Removing: [0x564f0baa5928]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba72018]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba89f60]:   %42 = add i64 %10, 21


Uprime Matches: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Adj: [0x564f0bac1a40]:   %91 = add i64 %66, 7
[0x564f0bacab20]:   %95 = add i64 %66, 8


Removing: [0x564f0ba9b7f8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0ba9e5f0]:   %16 = and i32 %15, 255


Removing: [0x564f0baa0e48]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0ba9fd90]:   store i8 %32, i8* %33, align 1


Removing: [0x564f0baa6898]:   %71 = trunc i64 %68 to i32
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0bac1b40]:   %72 = and i32 %71, 255


Removing: [0x564f0baa6e88]:   %85 = trunc i64 %84 to i8
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0bac73e0]:   store i8 %85, i8* %33, align 1


Removing: [0x564f0babe300]:   %26 = and i8 %25, 1
From the pot matches of: [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime : [0x564f0ba72700]:   %20 = xor i8 %19, 1


Uprime Matches: [0x564f0ba9e810]:   %20 = xor i8 %19, 1
[0x564f0bac3510]:   %76 = xor i8 %75, 1


Adj: [0x564f0ba9f0d0]:   store i8 %26, i8* %27, align 1


Removing: [0x564f0bac4840]:   %81 = and i8 %80, 1
From the pot matches of: [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime : [0x564f0ba72700]:   %20 = xor i8 %19, 1


Uprime Matches: [0x564f0ba9e810]:   %20 = xor i8 %19, 1
[0x564f0bac3510]:   %76 = xor i8 %75, 1


Adj: [0x564f0ba9d7e0]:   store i8 %81, i8* %27, align 1


Removing: [0x564f0ba99528]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a128]:   %44 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8a720]:   %52 = add i64 %44, 19


Uprime Matches: [0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Adj: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Removing: [0x564f0baa3588]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a128]:   %44 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8a720]:   %52 = add i64 %44, 19


Uprime Matches: [0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Adj: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Removing: [0x564f0baa5928]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a128]:   %44 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8a720]:   %52 = add i64 %44, 19


Uprime Matches: [0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Adj: [0x564f0bac1a40]:   %91 = add i64 %66, 7
[0x564f0bacab20]:   %95 = add i64 %66, 8


Removing: [0x564f0ba5d9b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
[0x564f0ba9d320]:   %11 = add i64 %7, -24
[0x564f0baa9670]:   %40 = add i64 %7, -16


Removing: [0x564f0ba5db98]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0ba9c250]:   store i64 %4, i64* %9, align 8


Removing: [0x564f0ba99528]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Removing: [0x564f0baa10a8]:   %41 = load i64, i64* %RDI.i16, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0baa9a00]:   store i64 %41, i64* %43, align 8


Removing: [0x564f0baa1698]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bb553a0]:   %48 = add i64 %44, 12
[0x564f0bb5c330]:   %52 = add i64 %44, -342
[0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Removing: [0x564f0baa2278]:   %50 = load i64, i64* %49, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bb566b0]:   store i64 %50, i64* %RDX.i, align 8


Removing: [0x564f0baa24d8]:   %54 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bb61090]:   %55 = add i64 %54, -8


Removing: [0x564f0baa2f48]:   %97 = load i64, i64* %96, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bac2320]:   store i64 %97, i64* %3, align 8


Removing: [0x564f0baa3588]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Removing: [0x564f0baa4038]:   %59 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0ba579c0]:   %60 = add i64 %59, -12


Removing: [0x564f0baa44f8]:   %61 = load i32, i32* %EAX.i, align 4
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0babfff0]:   store i32 %61, i32* %63, align 4


Removing: [0x564f0baa4888]:   %64 = load i32, i32* %ECX.i9, align 4
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0baa4e78]:   %65 = zext i32 %64 to i64


Removing: [0x564f0baa5928]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bac1a40]:   %91 = add i64 %66, 7
[0x564f0bacab20]:   %95 = add i64 %66, 8


Removing: [0x564f0baa5a58]:   %67 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bac0640]:   %68 = add i64 %67, 16
[0x564f0bac0d50]:   %69 = icmp ugt i64 %67, -17
[0x564f0bac42f0]:   %77 = xor i64 %67, 16
[0x564f0bac7a30]:   %86 = lshr i64 %67, 63
[0x564f0baca530]:   %92 = add i64 %67, 24
[0x564f0bacc8e0]:   %98 = add i64 %67, 32


Removing: [0x564f0baa7348]:   %94 = load i64, i64* %93, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0baca900]:   store i64 %94, i64* %RBP.i, align 8


Removing: [0x564f0bac4c38]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64


Uprime : [0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x564f0badd8a0]:   store i64 %45, i64* %RDI.i16, align 8


Adj: [0x564f0bb4f660]:   %47 = add i64 %46, -8


Removing: [0x564f0ba5db98]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8a268]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x564f0ba8a2e0]:   %47 = add i64 %46, -8


Uprime Matches: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
[0x564f0bb4f660]:   %47 = add i64 %46, -8
[0x564f0bb61090]:   %55 = add i64 %54, -8


Adj: [0x564f0ba9c250]:   store i64 %4, i64* %9, align 8


Removing: [0x564f0baa4038]:   %59 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8a268]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x564f0ba8a2e0]:   %47 = add i64 %46, -8


Uprime Matches: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
[0x564f0bb4f660]:   %47 = add i64 %46, -8
[0x564f0bb61090]:   %55 = add i64 %54, -8


Adj: [0x564f0ba579c0]:   %60 = add i64 %59, -12


Removing: [0x564f0baa5a58]:   %67 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba8a788]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564f0ba8a800]:   %54 = add i64 %53, -8


Uprime Matches: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
[0x564f0bb4f660]:   %47 = add i64 %46, -8
[0x564f0bb61090]:   %55 = add i64 %54, -8


Adj: [0x564f0bac0640]:   %68 = add i64 %67, 16
[0x564f0bac0d50]:   %69 = icmp ugt i64 %67, -17
[0x564f0bac42f0]:   %77 = xor i64 %67, 16
[0x564f0bac7a30]:   %86 = lshr i64 %67, 63
[0x564f0baca530]:   %92 = add i64 %67, 24
[0x564f0bacc8e0]:   %98 = add i64 %67, 32


Removing: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
From the pot matches of: [0x564f0ba8a800]:   %54 = add i64 %53, -8


Uprime : [0x564f0ba8a960]:   store i64 %54, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x564f0ba9b8b0]:   store i64 %11, i64* %6, align 8
[0x564f0bac0820]:   store i64 %68, i64* %6, align 8
[0x564f0bacaa30]:   store i64 %92, i64* %6, align 8
[0x564f0bacca60]:   store i64 %98, i64* %6, align 8
[0x564f0bb62bc0]:   store i64 %55, i64* %6, align 8


Adj: [0x564f0ba91df8]:   %9 = inttoptr i64 %8 to i64*
[0x564f0ba9c360]:   store i64 %8, i64* %RBP.i, align 8
[0x564f0ba9e0e0]:   %12 = icmp ult i64 %8, 16
[0x564f0ba9ea70]:   %22 = xor i64 %8, 16
[0x564f0bac0710]:   %34 = lshr i64 %8, 63


Removing: [0x564f0ba99528]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8ac28]:   %57 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8ae60]:   %61 = add i64 %57, 5


Uprime Matches: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Adj: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Removing: [0x564f0baa1698]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8ac28]:   %57 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8ae60]:   %61 = add i64 %57, 5


Uprime Matches: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Adj: [0x564f0bb553a0]:   %48 = add i64 %44, 12
[0x564f0bb5c330]:   %52 = add i64 %44, -342
[0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Removing: [0x564f0baa5928]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba8ac28]:   %57 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8ae60]:   %61 = add i64 %57, 5


Uprime Matches: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Adj: [0x564f0bac1a40]:   %91 = add i64 %66, 7
[0x564f0bacab20]:   %95 = add i64 %66, 8


Removing: [0x564f0ba5db98]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8ad08]:   %58 = load i64, i64* %RBP, align 8


Uprime : [0x564f0ba8ad80]:   %59 = add i64 %58, -12


Uprime Matches: [0x564f0ba579c0]:   %60 = add i64 %59, -12


Adj: [0x564f0ba9c250]:   store i64 %4, i64* %9, align 8


Removing: [0x564f0bac4c38]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564f0ba8ad08]:   %58 = load i64, i64* %RBP, align 8


Uprime : [0x564f0ba8ad80]:   %59 = add i64 %58, -12


Uprime Matches: [0x564f0ba579c0]:   %60 = add i64 %59, -12


Adj: [0x564f0bb4f660]:   %47 = add i64 %46, -8


Removing: [0x564f0ba99528]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba89818]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8c620]:   %94 = add i64 %65, 8


Uprime Matches: [0x564f0bacab20]:   %95 = add i64 %66, 8


Adj: [0x564f0baa97a0]:   %42 = add i64 %10, 21


Removing: [0x564f0baa1698]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba89818]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8c620]:   %94 = add i64 %65, 8


Uprime Matches: [0x564f0bacab20]:   %95 = add i64 %66, 8


Adj: [0x564f0bb553a0]:   %48 = add i64 %44, 12
[0x564f0bb5c330]:   %52 = add i64 %44, -342
[0x564f0bb5e8a0]:   %53 = add i64 %44, 19


Removing: [0x564f0baa3588]:   %58 = load i64, i64* %3, align 8
From the pot matches of: [0x564f0ba89818]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x564f0ba8c620]:   %94 = add i64 %65, 8


Uprime Matches: [0x564f0bacab20]:   %95 = add i64 %66, 8


Adj: [0x564f0b9ff670]:   %62 = add i64 %58, 5


Removing: [0x564f0ba5d9b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba898f8]:   %66 = load i64, i64* %RSP, align 8


Uprime : [0x564f0ba8c860]:   %97 = add i64 %66, 32


Uprime Matches: [0x564f0bacc8e0]:   %98 = add i64 %67, 32


Adj: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
[0x564f0ba9d320]:   %11 = add i64 %7, -24
[0x564f0baa9670]:   %40 = add i64 %7, -16


Removing: [0x564f0baa24d8]:   %54 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba898f8]:   %66 = load i64, i64* %RSP, align 8


Uprime : [0x564f0ba8c860]:   %97 = add i64 %66, 32


Uprime Matches: [0x564f0bacc8e0]:   %98 = add i64 %67, 32


Adj: [0x564f0bb61090]:   %55 = add i64 %54, -8


Removing: [0x564f0ba9b7f8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0ba9e5f0]:   %16 = and i32 %15, 255


Removing: [0x564f0baa0e48]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0ba9fd90]:   store i8 %32, i8* %33, align 1


Removing: [0x564f0baa6898]:   %71 = trunc i64 %68 to i32
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0bac1b40]:   %72 = and i32 %71, 255


Removing: [0x564f0baa6e88]:   %85 = trunc i64 %84 to i8
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0babe300]:   %26 = and i8 %25, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1
[0x564f0bac4840]:   %81 = and i8 %80, 1


Adj: [0x564f0bac73e0]:   store i8 %85, i8* %33, align 1


Removing: [0x564f0babe300]:   %26 = and i8 %25, 1
From the pot matches of: [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime : [0x564f0ba8b960]:   %75 = xor i8 %74, 1


Uprime Matches: [0x564f0ba9e810]:   %20 = xor i8 %19, 1
[0x564f0bac3510]:   %76 = xor i8 %75, 1


Adj: [0x564f0ba9f0d0]:   store i8 %26, i8* %27, align 1


Removing: [0x564f0bac4840]:   %81 = and i8 %80, 1
From the pot matches of: [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime : [0x564f0ba8b960]:   %75 = xor i8 %74, 1


Uprime Matches: [0x564f0ba9e810]:   %20 = xor i8 %19, 1
[0x564f0bac3510]:   %76 = xor i8 %75, 1


Adj: [0x564f0ba9d7e0]:   store i8 %81, i8* %27, align 1

Round: 1

Removing: [0x564f0baa0858]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1


Adj: [0x564f0babe300]:   %26 = and i8 %25, 1


Removing: [0x564f0baa6af8]:   %80 = trunc i64 %79 to i8
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1


Adj: [0x564f0bac4840]:   %81 = and i8 %80, 1


Removing: [0x564f0ba5d9b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x564f0ba8a788]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564f0ba8a800]:   %54 = add i64 %53, -8


Uprime Matches: [0x564f0bb61090]:   %55 = add i64 %54, -8


Adj: [0x564f0b9f2f70]:   %8 = add i64 %7, -8
[0x564f0ba9d320]:   %11 = add i64 %7, -24
[0x564f0baa9670]:   %40 = add i64 %7, -16


Removing: [0x564f0baa0858]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1


Adj: [0x564f0babe300]:   %26 = and i8 %25, 1


Removing: [0x564f0baa6af8]:   %80 = trunc i64 %79 to i8
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1
[0x564f0bac3350]:   %75 = and i8 %74, 1


Adj: [0x564f0bac4840]:   %81 = and i8 %80, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x564f0ba6a198]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x564f0baa23a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	}

[0x564f0ba6f680]: %struct.State* %0 {
	[0x564f0bac7ea0]:%struct.State.0* %0
	}

[0x564f0ba6f790]: i64 %1 {
	[0x564f0bacb010]:i64 %1
	}

[0x564f0ba6f940]: %struct.Memory* %2 {
	[0x564f0bacda70]:%struct.Memory.31* %2
	}

[0x564f0ba71250]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x564f0ba3aab0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x564f0ba71328]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564f0b9ff838]:  %51 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564f0ba71398]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x564f0baa3f08]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x564f0ba71458]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x564f0ba00268]:  %57 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x564f0ba71518]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x564f0baa3458]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x564f0ba715c8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x564f0ba9c6e8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	}

[0x564f0ba71688]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x564f0ba08628]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	}

[0x564f0ba71790]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x564f0ba40090]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x564f0ba718a0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x564f0ba3f570]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x564f0ba719b0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x564f0ba3f910]:  %RDI.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x564f0ba71ac0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x564f0ba3edf0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x564f0ba71bd0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x564f0ba3ce80]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x564f0ba71c68]:   %5 = load i64, i64* %RBP, align 8 {
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba71ce0]:   %6 = add i64 %1, 1 {
	[0x564f0b9f4010]:  %5 = add i64 %1, 1
	}

[0x564f0ba71d60]:   store i64 %6, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	}

[0x564f0ba71dc8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	}

[0x564f0ba71e40]:   %8 = add i64 %7, -8 {
	[0x564f0b9f2f70]:  %8 = add i64 %7, -8
	}

[0x564f0ba71ec0]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x564f0babf310]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564f0ba71f38]:   %9 = inttoptr i64 %8 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x564f0ba71fb0]:   store i64 %5, i64* %9, align 8 {
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	}

[0x564f0ba72018]:   %10 = load i64, i64* %PC, align 8 {
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	}

[0x564f0ba72090]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x564f0ba72110]:   %11 = add i64 %7, -24 {
	[0x564f0ba9d320]:  %11 = add i64 %7, -24
	}

[0x564f0ba72190]:   store i64 %11, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	}

[0x564f0ba72210]:   %12 = icmp ult i64 %8, 16 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	}

[0x564f0ba72278]:   %13 = zext i1 %12 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	}

[0x564f0ba72320]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x564f0ba9beb0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x564f0ba723b0]:   store i8 %13, i8* %14, align 1, !tbaa !1261 {
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	}

[0x564f0ba72418]:   %15 = trunc i64 %11 to i32 {
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	}

[0x564f0ba72490]:   %16 = and i32 %15, 255 {
	[0x564f0ba9e5f0]:  %16 = and i32 %15, 255
	}

[0x564f0ba72510]:   store i8 %32, i8* %33, align 1, !tbaa !1278 {
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	}

[0x564f0ba72590]:   %34 = lshr i64 %8, 63 {
	[0x564f0bac0710]:  %34 = lshr i64 %8, 63
	}

[0x564f0ba72608]:   %18 = trunc i32 %17 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	}

[0x564f0ba72680]:   %19 = and i8 %18, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	}

[0x564f0ba72700]:   %20 = xor i8 %19, 1 {
	[0x564f0ba9e810]:  %20 = xor i8 %19, 1
	[0x564f0bac3510]:  %76 = xor i8 %75, 1
	}

[0x564f0ba727b0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x564f0ba9f720]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x564f0ba72840]:   store i8 %20, i8* %21, align 1, !tbaa !1275 {
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	}

[0x564f0ba728c0]:   %22 = xor i64 %8, 16 {
	[0x564f0ba9ea70]:  %22 = xor i64 %8, 16
	}

[0x564f0ba72940]:   %23 = xor i64 %22, %11 {
	[0x564f0ba9eb40]:  %23 = xor i64 %22, %11
	}

[0x564f0ba729c0]:   %24 = lshr i64 %23, 4 {
	[0x564f0ba9ec50]:  %24 = lshr i64 %23, 4
	}

[0x564f0ba72a28]:   %25 = trunc i64 %24 to i8 {
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	}

[0x564f0ba72aa0]:   %26 = and i8 %25, 1 {
	[0x564f0babe300]:  %26 = and i8 %25, 1
	}

[0x564f0ba72b50]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x564f0bac1390]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x564f0ba72be0]:   store i8 %26, i8* %27, align 1, !tbaa !1276 {
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	}

[0x564f0ba72c60]:   %28 = icmp eq i64 %11, 0 {
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	}

[0x564f0ba72cc8]:   %29 = zext i1 %28 to i8 {
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	}

[0x564f0ba72d70]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x564f0bab28a0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x564f0ba72e00]:   store i8 %29, i8* %30, align 1, !tbaa !1277 {
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	}

[0x564f0ba72e80]:   %31 = lshr i64 %11, 63 {
	[0x564f0ba9fc80]:  %31 = lshr i64 %11, 63
	}

[0x564f0ba72ee8]:   %32 = trunc i64 %31 to i8 {
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	}

[0x564f0ba72f90]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x564f0baa0400]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x564f0ba89818]:   %65 = load i64, i64* %PC, align 8 {
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	}

[0x564f0ba89890]:   store i64 %64, i64* %RAX, align 8, !tbaa !1257 {
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	}

[0x564f0ba898f8]:   %66 = load i64, i64* %RSP, align 8 {
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	}

[0x564f0ba89970]:   %67 = add i64 %66, 16 {
	[0x564f0bac0640]:  %68 = add i64 %67, 16
	}

[0x564f0ba89a40]:   %35 = xor i64 %31, %34 {
	[0x564f0ba9d6f0]:  %35 = xor i64 %31, %34
	}

[0x564f0ba89ac0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x564f0bac14e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x564f0ba89b40]:   %37 = icmp eq i64 %36, 2 {
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	}

[0x564f0ba89ba8]:   %38 = zext i1 %37 to i8 {
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	}

[0x564f0ba89c50]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x564f0baa7200]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x564f0ba89ce0]:   store i8 %38, i8* %39, align 1, !tbaa !1279 {
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	}

[0x564f0ba89dc0]:   store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 29), i64* %RSI, align 8, !tbaa !1257 {
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	}

[0x564f0ba89e40]:   %40 = add i64 %7, -16 {
	[0x564f0baa9670]:  %40 = add i64 %7, -16
	}

[0x564f0ba89ea8]:   %41 = load i64, i64* %RDI, align 8 {
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	}

[0x564f0ba89f60]:   %42 = add i64 %10, 21 {
	[0x564f0baa97a0]:  %42 = add i64 %10, 21
	}

[0x564f0ba89fe0]:   store i64 %42, i64* %PC, align 8 {
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	}

[0x564f0ba8a048]:   %43 = inttoptr i64 %40 to i64* {
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	}

[0x564f0ba8a0c0]:   store i64 %41, i64* %43, align 8 {
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	}

[0x564f0ba8a128]:   %44 = load i64, i64* %PC, align 8 {
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	}

[0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64 {
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	}

[0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257 {
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	}

[0x564f0ba8a268]:   %46 = load i64, i64* %RBP, align 8 {
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a2e0]:   %47 = add i64 %46, -8 {
	[0x564f0bb4f660]:  %47 = add i64 %46, -8
	}

[0x564f0ba8a360]:   %48 = add i64 %44, 12 {
	[0x564f0bb553a0]:  %48 = add i64 %44, 12
	}

[0x564f0ba8a3e0]:   store i64 %48, i64* %PC, align 8 {
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	}

[0x564f0ba8a448]:   %49 = inttoptr i64 %47 to i64* {
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	}

[0x564f0ba8a4a8]:   %50 = load i64, i64* %49, align 8 {
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	}

[0x564f0ba8a520]:   store i64 %50, i64* %RDX, align 8, !tbaa !1257 {
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	}

[0x564f0ba8a5a0]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	}

[0x564f0ba8a660]:   %51 = add i64 %44, -342 {
	[0x564f0bb5c330]:  %52 = add i64 %44, -342
	}

[0x564f0ba8a720]:   %52 = add i64 %44, 19 {
	[0x564f0bb5e8a0]:  %53 = add i64 %44, 19
	}

[0x564f0ba8a788]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	}

[0x564f0ba8a800]:   %54 = add i64 %53, -8 {
	[0x564f0bb61090]:  %55 = add i64 %54, -8
	}

[0x564f0ba8a868]:   %55 = inttoptr i64 %54 to i64* {
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	}

[0x564f0ba8a8e0]:   store i64 %52, i64* %55, align 8 {
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	}

[0x564f0ba8a960]:   store i64 %54, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	}

[0x564f0ba8a9e0]:   store i64 %51, i64* %PC, align 8, !tbaa !1257 {
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	}

[0x564f0ba8abb8]:   %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x564f0baa7460]:  %call2_400584 = tail call %struct.Memory.31* @sub_400420.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	}

[0x564f0ba8ac28]:   %57 = load i64, i64* %PC, align 8 {
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	}

[0x564f0ba8aca0]:   store i64 0, i64* %RCX, align 8, !tbaa !1257 {
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8ad08]:   %58 = load i64, i64* %RBP, align 8 {
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8ad80]:   %59 = add i64 %58, -12 {
	[0x564f0ba579c0]:  %60 = add i64 %59, -12
	}

[0x564f0ba8ade8]:   %60 = load i32, i32* %EAX, align 4 {
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	}

[0x564f0ba8ae60]:   %61 = add i64 %57, 5 {
	[0x564f0b9ff670]:  %62 = add i64 %58, 5
	}

[0x564f0ba8aee0]:   store i64 %61, i64* %PC, align 8 {
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	}

[0x564f0ba8af48]:   %62 = inttoptr i64 %59 to i32* {
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	}

[0x564f0ba8afc0]:   store i32 %60, i32* %62, align 4 {
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	}

[0x564f0ba8b028]:   %63 = load i32, i32* %ECX, align 4 {
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	}

[0x564f0ba8b088]:   %64 = zext i32 %63 to i64 {
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	}

[0x564f0ba8b510]:   store i64 %67, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	}

[0x564f0ba8b590]:   %68 = icmp ugt i64 %66, -17 {
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	}

[0x564f0ba8b5f8]:   %69 = zext i1 %68 to i8 {
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	}

[0x564f0ba8b670]:   store i8 %69, i8* %14, align 1, !tbaa !1261 {
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	}

[0x564f0ba8b6d8]:   %70 = trunc i64 %67 to i32 {
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	}

[0x564f0ba8b750]:   %71 = and i32 %70, 255 {
	[0x564f0bac1b40]:  %72 = and i32 %71, 255
	}

[0x564f0ba8b7f0]:   %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9 {
	[0x564f0bac3280]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x564f0ba8b868]:   %73 = trunc i32 %72 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	}

[0x564f0ba8b8e0]:   %74 = and i8 %73, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	}

[0x564f0ba8b960]:   %75 = xor i8 %74, 1 {
	[0x564f0ba9e810]:  %20 = xor i8 %19, 1
	[0x564f0bac3510]:  %76 = xor i8 %75, 1
	}

[0x564f0ba8b9e0]:   store i8 %75, i8* %21, align 1, !tbaa !1275 {
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	}

[0x564f0ba8ba60]:   %76 = xor i64 %66, 16 {
	[0x564f0bac42f0]:  %77 = xor i64 %67, 16
	}

[0x564f0ba8bae0]:   %77 = xor i64 %76, %67 {
	[0x564f0bac44a0]:  %78 = xor i64 %77, %68
	}

[0x564f0ba8bb60]:   %78 = lshr i64 %77, 4 {
	[0x564f0bac4740]:  %79 = lshr i64 %78, 4
	}

[0x564f0ba8bbc8]:   %79 = trunc i64 %78 to i8 {
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	}

[0x564f0ba8bc40]:   %80 = and i8 %79, 1 {
	[0x564f0bac4840]:  %81 = and i8 %80, 1
	}

[0x564f0ba8bcc0]:   store i8 %80, i8* %27, align 1, !tbaa !1276 {
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	}

[0x564f0ba8bd40]:   %81 = icmp eq i64 %67, 0 {
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba8bda8]:   %82 = zext i1 %81 to i8 {
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	}

[0x564f0ba8be20]:   store i8 %82, i8* %30, align 1, !tbaa !1277 {
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	}

[0x564f0ba8bea0]:   %83 = lshr i64 %67, 63 {
	[0x564f0bac6ed0]:  %84 = lshr i64 %68, 63
	}

[0x564f0ba8bf08]:   %84 = trunc i64 %83 to i8 {
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba8bf80]:   store i8 %84, i8* %33, align 1, !tbaa !1278 {
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	}

[0x564f0ba8c000]:   %85 = lshr i64 %66, 63 {
	[0x564f0bac7a30]:  %86 = lshr i64 %67, 63
	}

[0x564f0ba8c080]:   %86 = xor i64 %83, %85 {
	[0x564f0bac7b20]:  %87 = xor i64 %84, %86
	}

[0x564f0ba8c100]:   %87 = add nuw nsw i64 %86, %83 {
	[0x564f0babe4e0]:  %88 = add nuw nsw i64 %87, %84
	}

[0x564f0ba8c180]:   %88 = icmp eq i64 %87, 2 {
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	}

[0x564f0ba8c1e8]:   %89 = zext i1 %88 to i8 {
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba8c260]:   store i8 %89, i8* %39, align 1, !tbaa !1279 {
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	}

[0x564f0ba8c2e0]:   %90 = add i64 %65, 7 {
	[0x564f0bac1a40]:  %91 = add i64 %66, 7
	}

[0x564f0ba8c360]:   store i64 %90, i64* %PC, align 8 {
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	}

[0x564f0ba8c3e0]:   %91 = add i64 %66, 24 {
	[0x564f0baca530]:  %92 = add i64 %67, 24
	}

[0x564f0ba8c448]:   %92 = inttoptr i64 %67 to i64* {
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8c4a8]:   %93 = load i64, i64* %92, align 8 {
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	}

[0x564f0ba8c520]:   store i64 %93, i64* %RBP, align 8, !tbaa !1257 {
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	}

[0x564f0ba8c5a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	}

[0x564f0ba8c620]:   %94 = add i64 %65, 8 {
	[0x564f0bacab20]:  %95 = add i64 %66, 8
	}

[0x564f0ba8c6a0]:   store i64 %94, i64* %PC, align 8 {
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	}

[0x564f0ba8c708]:   %95 = inttoptr i64 %91 to i64* {
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	}

[0x564f0ba8c768]:   %96 = load i64, i64* %95, align 8 {
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	}

[0x564f0ba8c7e0]:   store i64 %96, i64* %PC, align 8, !tbaa !1257 {
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	}

[0x564f0ba8c860]:   %97 = add i64 %66, 32 {
	[0x564f0bacc8e0]:  %98 = add i64 %67, 32
	}

[0x564f0ba8c8e0]:   store i64 %97, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	}

[0x564f0ba8c948]:   ret %struct.Memory* %56 {
	[0x564f0baa8838]:  ret %struct.Memory.31* %call2_400584
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x564f0ba70010]: block_400560 {
	[0x564f0babc0d0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x564f0bac3510]:   %76 = xor i8 %75, 1
From the pot matches of: [0x564f0ba72700]:   %20 = xor i8 %19, 1


Uprime : [0x564f0ba72840]:   store i8 %20, i8* %21, align 1, !tbaa !1275


Uprime Matches: [0x564f0babda80]:   store i8 %20, i8* %21, align 1


Adj: [0x564f0bac2d20]:   store i8 %76, i8* %21, align 1


Removing: [0x564f0ba9e810]:   %20 = xor i8 %19, 1
From the pot matches of: [0x564f0ba8b960]:   %75 = xor i8 %74, 1


Uprime : [0x564f0ba8b9e0]:   store i8 %75, i8* %21, align 1, !tbaa !1275


Uprime Matches: [0x564f0bac2d20]:   store i8 %76, i8* %21, align 1


Adj: [0x564f0babda80]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x564f0bac3350]:   %75 = and i8 %74, 1
From the pot matches of: [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime : [0x564f0ba72700]:   %20 = xor i8 %19, 1


Uprime Matches: [0x564f0ba9e810]:   %20 = xor i8 %19, 1


Adj: [0x564f0bac3510]:   %76 = xor i8 %75, 1


Removing: [0x564f0ba9e700]:   %19 = and i8 %18, 1
From the pot matches of: [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime : [0x564f0ba8b960]:   %75 = xor i8 %74, 1


Uprime Matches: [0x564f0bac3510]:   %76 = xor i8 %75, 1


Adj: [0x564f0ba9e810]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x564f0baa69c8]:   %74 = trunc i32 %73 to i8
From the pot matches of: [0x564f0ba72608]:   %18 = trunc i32 %17 to i8


Uprime : [0x564f0ba72680]:   %19 = and i8 %18, 1


Uprime Matches: [0x564f0ba9e700]:   %19 = and i8 %18, 1


Adj: [0x564f0bac3350]:   %75 = and i8 %74, 1


Removing: [0x564f0ba9af58]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x564f0ba8b868]:   %73 = trunc i32 %72 to i8


Uprime : [0x564f0ba8b8e0]:   %74 = and i8 %73, 1


Uprime Matches: [0x564f0bac3350]:   %75 = and i8 %74, 1


Adj: [0x564f0ba9e700]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x564f0ba6a198]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x564f0baa23a8]:  %AL.i = bitcast %union.anon.4* %51 to i8*
	}

[0x564f0ba6f680]: %struct.State* %0 {
	[0x564f0bac7ea0]:%struct.State.0* %0
	}

[0x564f0ba6f790]: i64 %1 {
	[0x564f0bacb010]:i64 %1
	}

[0x564f0ba6f940]: %struct.Memory* %2 {
	[0x564f0bacda70]:%struct.Memory.31* %2
	}

[0x564f0ba71250]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x564f0ba3aab0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x564f0ba71328]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564f0b9ff838]:  %51 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564f0ba71398]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x564f0baa3f08]:  %EAX.i = bitcast %union.anon.4* %51 to i32*
	}

[0x564f0ba71458]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x564f0ba00268]:  %57 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x564f0ba71518]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x564f0baa3458]:  %ECX.i9 = bitcast %union.anon.4* %57 to i32*
	}

[0x564f0ba715c8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x564f0ba9c6e8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %51, i64 0, i32 0
	}

[0x564f0ba71688]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x564f0ba08628]:  %RCX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %57, i64 0, i32 0
	}

[0x564f0ba71790]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x564f0ba40090]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x564f0ba718a0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x564f0ba3f570]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x564f0ba719b0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x564f0ba3f910]:  %RDI.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x564f0ba71ac0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x564f0ba3edf0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x564f0ba71bd0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x564f0ba3ce80]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x564f0ba71c68]:   %5 = load i64, i64* %RBP, align 8 {
	[0x564f0ba5db98]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba71ce0]:   %6 = add i64 %1, 1 {
	[0x564f0b9f4010]:  %5 = add i64 %1, 1
	}

[0x564f0ba71d60]:   store i64 %6, i64* %PC, align 8 {
	[0x564f0b9f3730]:  store i64 %5, i64* %3, align 8
	}

[0x564f0ba71dc8]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0ba5d9b8]:  %7 = load i64, i64* %6, align 8
	}

[0x564f0ba71e40]:   %8 = add i64 %7, -8 {
	[0x564f0b9f2f70]:  %8 = add i64 %7, -8
	}

[0x564f0ba71ec0]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x564f0babf310]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564f0ba71f38]:   %9 = inttoptr i64 %8 to i64* {
	[0x564f0ba91df8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x564f0ba71fb0]:   store i64 %5, i64* %9, align 8 {
	[0x564f0ba9c250]:  store i64 %4, i64* %9, align 8
	}

[0x564f0ba72018]:   %10 = load i64, i64* %PC, align 8 {
	[0x564f0ba99528]:  %10 = load i64, i64* %3, align 8
	}

[0x564f0ba72090]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x564f0ba9c360]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x564f0ba72110]:   %11 = add i64 %7, -24 {
	[0x564f0ba9d320]:  %11 = add i64 %7, -24
	}

[0x564f0ba72190]:   store i64 %11, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0ba9b8b0]:  store i64 %11, i64* %6, align 8
	}

[0x564f0ba72210]:   %12 = icmp ult i64 %8, 16 {
	[0x564f0ba9e0e0]:  %12 = icmp ult i64 %8, 16
	}

[0x564f0ba72278]:   %13 = zext i1 %12 to i8 {
	[0x564f0ba995b8]:  %13 = zext i1 %12 to i8
	}

[0x564f0ba72320]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x564f0ba9beb0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x564f0ba723b0]:   store i8 %13, i8* %14, align 1, !tbaa !1261 {
	[0x564f0ba9e4e0]:  store i8 %13, i8* %14, align 1
	}

[0x564f0ba72418]:   %15 = trunc i64 %11 to i32 {
	[0x564f0ba9b7f8]:  %15 = trunc i64 %11 to i32
	}

[0x564f0ba72490]:   %16 = and i32 %15, 255 {
	[0x564f0ba9e5f0]:  %16 = and i32 %15, 255
	}

[0x564f0ba72510]:   store i8 %32, i8* %33, align 1, !tbaa !1278 {
	[0x564f0ba9fd90]:  store i8 %32, i8* %33, align 1
	}

[0x564f0ba72590]:   %34 = lshr i64 %8, 63 {
	[0x564f0bac0710]:  %34 = lshr i64 %8, 63
	}

[0x564f0ba72608]:   %18 = trunc i32 %17 to i8 {
	[0x564f0ba9af58]:  %18 = trunc i32 %17 to i8
	}

[0x564f0ba72680]:   %19 = and i8 %18, 1 {
	[0x564f0ba9e700]:  %19 = and i8 %18, 1
	}

[0x564f0ba72700]:   %20 = xor i8 %19, 1 {
	[0x564f0ba9e810]:  %20 = xor i8 %19, 1
	}

[0x564f0ba727b0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x564f0ba9f720]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x564f0ba72840]:   store i8 %20, i8* %21, align 1, !tbaa !1275 {
	[0x564f0babda80]:  store i8 %20, i8* %21, align 1
	}

[0x564f0ba728c0]:   %22 = xor i64 %8, 16 {
	[0x564f0ba9ea70]:  %22 = xor i64 %8, 16
	}

[0x564f0ba72940]:   %23 = xor i64 %22, %11 {
	[0x564f0ba9eb40]:  %23 = xor i64 %22, %11
	}

[0x564f0ba729c0]:   %24 = lshr i64 %23, 4 {
	[0x564f0ba9ec50]:  %24 = lshr i64 %23, 4
	}

[0x564f0ba72a28]:   %25 = trunc i64 %24 to i8 {
	[0x564f0baa0858]:  %25 = trunc i64 %24 to i8
	}

[0x564f0ba72aa0]:   %26 = and i8 %25, 1 {
	[0x564f0babe300]:  %26 = and i8 %25, 1
	}

[0x564f0ba72b50]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x564f0bac1390]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x564f0ba72be0]:   store i8 %26, i8* %27, align 1, !tbaa !1276 {
	[0x564f0ba9f0d0]:  store i8 %26, i8* %27, align 1
	}

[0x564f0ba72c60]:   %28 = icmp eq i64 %11, 0 {
	[0x564f0ba9f1a0]:  %28 = icmp eq i64 %11, 0
	}

[0x564f0ba72cc8]:   %29 = zext i1 %28 to i8 {
	[0x564f0baa0be8]:  %29 = zext i1 %28 to i8
	}

[0x564f0ba72d70]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x564f0bab28a0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x564f0ba72e00]:   store i8 %29, i8* %30, align 1, !tbaa !1277 {
	[0x564f0ba9dde0]:  store i8 %29, i8* %30, align 1
	}

[0x564f0ba72e80]:   %31 = lshr i64 %11, 63 {
	[0x564f0ba9fc80]:  %31 = lshr i64 %11, 63
	}

[0x564f0ba72ee8]:   %32 = trunc i64 %31 to i8 {
	[0x564f0baa0e48]:  %32 = trunc i64 %31 to i8
	}

[0x564f0ba72f90]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x564f0baa0400]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x564f0ba89818]:   %65 = load i64, i64* %PC, align 8 {
	[0x564f0baa5928]:  %66 = load i64, i64* %3, align 8
	}

[0x564f0ba89890]:   store i64 %64, i64* %RAX, align 8, !tbaa !1257 {
	[0x564f0babfd80]:  store i64 %65, i64* %RAX.i, align 8
	}

[0x564f0ba898f8]:   %66 = load i64, i64* %RSP, align 8 {
	[0x564f0baa5a58]:  %67 = load i64, i64* %6, align 8
	}

[0x564f0ba89970]:   %67 = add i64 %66, 16 {
	[0x564f0bac0640]:  %68 = add i64 %67, 16
	}

[0x564f0ba89a40]:   %35 = xor i64 %31, %34 {
	[0x564f0ba9d6f0]:  %35 = xor i64 %31, %34
	}

[0x564f0ba89ac0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x564f0bac14e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x564f0ba89b40]:   %37 = icmp eq i64 %36, 2 {
	[0x564f0bab2760]:  %37 = icmp eq i64 %36, 2
	}

[0x564f0ba89ba8]:   %38 = zext i1 %37 to i8 {
	[0x564f0baa0f78]:  %38 = zext i1 %37 to i8
	}

[0x564f0ba89c50]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x564f0baa7200]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x564f0ba89ce0]:   store i8 %38, i8* %39, align 1, !tbaa !1279 {
	[0x564f0bac5930]:  store i8 %38, i8* %39, align 1
	}

[0x564f0ba89dc0]:   store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 29), i64* %RSI, align 8, !tbaa !1257 {
	[0x564f0baa2e50]:  store i64 4195901, i64* %RSI.i, align 8
	}

[0x564f0ba89e40]:   %40 = add i64 %7, -16 {
	[0x564f0baa9670]:  %40 = add i64 %7, -16
	}

[0x564f0ba89ea8]:   %41 = load i64, i64* %RDI, align 8 {
	[0x564f0baa10a8]:  %41 = load i64, i64* %RDI.i16, align 8
	}

[0x564f0ba89f60]:   %42 = add i64 %10, 21 {
	[0x564f0baa97a0]:  %42 = add i64 %10, 21
	}

[0x564f0ba89fe0]:   store i64 %42, i64* %PC, align 8 {
	[0x564f0baa98d0]:  store i64 %42, i64* %3, align 8
	}

[0x564f0ba8a048]:   %43 = inttoptr i64 %40 to i64* {
	[0x564f0baa11d8]:  %43 = inttoptr i64 %40 to i64*
	}

[0x564f0ba8a0c0]:   store i64 %41, i64* %43, align 8 {
	[0x564f0baa9a00]:  store i64 %41, i64* %43, align 8
	}

[0x564f0ba8a128]:   %44 = load i64, i64* %PC, align 8 {
	[0x564f0baa1698]:  %44 = load i64, i64* %3, align 8
	}

[0x564f0ba8a188]:   %45 = load i64, i64* @stderr, align 64 {
	[0x564f0baa17c8]:  %45 = load i64, i64* inttoptr (i64 6295616 to i64*), align 64
	}

[0x564f0ba8a200]:   store i64 %45, i64* %RDI, align 8, !tbaa !1257 {
	[0x564f0badd8a0]:  store i64 %45, i64* %RDI.i16, align 8
	}

[0x564f0ba8a268]:   %46 = load i64, i64* %RBP, align 8 {
	[0x564f0bac4c38]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8a2e0]:   %47 = add i64 %46, -8 {
	[0x564f0bb4f660]:  %47 = add i64 %46, -8
	}

[0x564f0ba8a360]:   %48 = add i64 %44, 12 {
	[0x564f0bb553a0]:  %48 = add i64 %44, 12
	}

[0x564f0ba8a3e0]:   store i64 %48, i64* %PC, align 8 {
	[0x564f0bb57bc0]:  store i64 %48, i64* %3, align 8
	}

[0x564f0ba8a448]:   %49 = inttoptr i64 %47 to i64* {
	[0x564f0baa2148]:  %49 = inttoptr i64 %47 to i64*
	}

[0x564f0ba8a4a8]:   %50 = load i64, i64* %49, align 8 {
	[0x564f0baa2278]:  %50 = load i64, i64* %49, align 8
	}

[0x564f0ba8a520]:   store i64 %50, i64* %RDX, align 8, !tbaa !1257 {
	[0x564f0bb566b0]:  store i64 %50, i64* %RDX.i, align 8
	}

[0x564f0ba8a5a0]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x564f0bb5d100]:  store i8 0, i8* %AL.i, align 1
	}

[0x564f0ba8a660]:   %51 = add i64 %44, -342 {
	[0x564f0bb5c330]:  %52 = add i64 %44, -342
	}

[0x564f0ba8a720]:   %52 = add i64 %44, 19 {
	[0x564f0bb5e8a0]:  %53 = add i64 %44, 19
	}

[0x564f0ba8a788]:   %53 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0baa24d8]:  %54 = load i64, i64* %6, align 8
	}

[0x564f0ba8a800]:   %54 = add i64 %53, -8 {
	[0x564f0bb61090]:  %55 = add i64 %54, -8
	}

[0x564f0ba8a868]:   %55 = inttoptr i64 %54 to i64* {
	[0x564f0baa02e8]:  %56 = inttoptr i64 %55 to i64*
	}

[0x564f0ba8a8e0]:   store i64 %52, i64* %55, align 8 {
	[0x564f0bb5fbf0]:  store i64 %53, i64* %56, align 8
	}

[0x564f0ba8a960]:   store i64 %54, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bb62bc0]:  store i64 %55, i64* %6, align 8
	}

[0x564f0ba8a9e0]:   store i64 %51, i64* %PC, align 8, !tbaa !1257 {
	[0x564f0bb66f90]:  store i64 %52, i64* %3, align 8
	}

[0x564f0ba8abb8]:   %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x564f0baa7460]:  %call2_400584 = tail call %struct.Memory.31* @sub_400420.fprintf_plt(%struct.State.0* %0, i64 %52, %struct.Memory.31* %2)
	}

[0x564f0ba8ac28]:   %57 = load i64, i64* %PC, align 8 {
	[0x564f0baa3588]:  %58 = load i64, i64* %3, align 8
	}

[0x564f0ba8aca0]:   store i64 0, i64* %RCX, align 8, !tbaa !1257 {
	[0x564f0bb71650]:  store i64 0, i64* %RCX.i, align 8
	}

[0x564f0ba8ad08]:   %58 = load i64, i64* %RBP, align 8 {
	[0x564f0baa4038]:  %59 = load i64, i64* %RBP.i, align 8
	}

[0x564f0ba8ad80]:   %59 = add i64 %58, -12 {
	[0x564f0ba579c0]:  %60 = add i64 %59, -12
	}

[0x564f0ba8ade8]:   %60 = load i32, i32* %EAX, align 4 {
	[0x564f0baa44f8]:  %61 = load i32, i32* %EAX.i, align 4
	}

[0x564f0ba8ae60]:   %61 = add i64 %57, 5 {
	[0x564f0b9ff670]:  %62 = add i64 %58, 5
	}

[0x564f0ba8aee0]:   store i64 %61, i64* %PC, align 8 {
	[0x564f0ba03730]:  store i64 %62, i64* %3, align 8
	}

[0x564f0ba8af48]:   %62 = inttoptr i64 %59 to i32* {
	[0x564f0baa4758]:  %63 = inttoptr i64 %60 to i32*
	}

[0x564f0ba8afc0]:   store i32 %60, i32* %62, align 4 {
	[0x564f0babfff0]:  store i32 %61, i32* %63, align 4
	}

[0x564f0ba8b028]:   %63 = load i32, i32* %ECX, align 4 {
	[0x564f0baa4888]:  %64 = load i32, i32* %ECX.i9, align 4
	}

[0x564f0ba8b088]:   %64 = zext i32 %63 to i64 {
	[0x564f0baa4e78]:  %65 = zext i32 %64 to i64
	}

[0x564f0ba8b510]:   store i64 %67, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bac0820]:  store i64 %68, i64* %6, align 8
	}

[0x564f0ba8b590]:   %68 = icmp ugt i64 %66, -17 {
	[0x564f0bac0d50]:  %69 = icmp ugt i64 %67, -17
	}

[0x564f0ba8b5f8]:   %69 = zext i1 %68 to i8 {
	[0x564f0baa6638]:  %70 = zext i1 %69 to i8
	}

[0x564f0ba8b670]:   store i8 %69, i8* %14, align 1, !tbaa !1261 {
	[0x564f0bac0ee0]:  store i8 %70, i8* %14, align 1
	}

[0x564f0ba8b6d8]:   %70 = trunc i64 %67 to i32 {
	[0x564f0baa6898]:  %71 = trunc i64 %68 to i32
	}

[0x564f0ba8b750]:   %71 = and i32 %70, 255 {
	[0x564f0bac1b40]:  %72 = and i32 %71, 255
	}

[0x564f0ba8b7f0]:   %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9 {
	[0x564f0bac3280]:  %73 = tail call i32 @llvm.ctpop.i32(i32 %72)
	}

[0x564f0ba8b868]:   %73 = trunc i32 %72 to i8 {
	[0x564f0baa69c8]:  %74 = trunc i32 %73 to i8
	}

[0x564f0ba8b8e0]:   %74 = and i8 %73, 1 {
	[0x564f0bac3350]:  %75 = and i8 %74, 1
	}

[0x564f0ba8b960]:   %75 = xor i8 %74, 1 {
	[0x564f0bac3510]:  %76 = xor i8 %75, 1
	}

[0x564f0ba8b9e0]:   store i8 %75, i8* %21, align 1, !tbaa !1275 {
	[0x564f0bac2d20]:  store i8 %76, i8* %21, align 1
	}

[0x564f0ba8ba60]:   %76 = xor i64 %66, 16 {
	[0x564f0bac42f0]:  %77 = xor i64 %67, 16
	}

[0x564f0ba8bae0]:   %77 = xor i64 %76, %67 {
	[0x564f0bac44a0]:  %78 = xor i64 %77, %68
	}

[0x564f0ba8bb60]:   %78 = lshr i64 %77, 4 {
	[0x564f0bac4740]:  %79 = lshr i64 %78, 4
	}

[0x564f0ba8bbc8]:   %79 = trunc i64 %78 to i8 {
	[0x564f0baa6af8]:  %80 = trunc i64 %79 to i8
	}

[0x564f0ba8bc40]:   %80 = and i8 %79, 1 {
	[0x564f0bac4840]:  %81 = and i8 %80, 1
	}

[0x564f0ba8bcc0]:   store i8 %80, i8* %27, align 1, !tbaa !1276 {
	[0x564f0ba9d7e0]:  store i8 %81, i8* %27, align 1
	}

[0x564f0ba8bd40]:   %81 = icmp eq i64 %67, 0 {
	[0x564f0bac4f40]:  %82 = icmp eq i64 %68, 0
	}

[0x564f0ba8bda8]:   %82 = zext i1 %81 to i8 {
	[0x564f0baa6c28]:  %83 = zext i1 %82 to i8
	}

[0x564f0ba8be20]:   store i8 %82, i8* %30, align 1, !tbaa !1277 {
	[0x564f0ba9bc00]:  store i8 %83, i8* %30, align 1
	}

[0x564f0ba8bea0]:   %83 = lshr i64 %67, 63 {
	[0x564f0bac6ed0]:  %84 = lshr i64 %68, 63
	}

[0x564f0ba8bf08]:   %84 = trunc i64 %83 to i8 {
	[0x564f0baa6e88]:  %85 = trunc i64 %84 to i8
	}

[0x564f0ba8bf80]:   store i8 %84, i8* %33, align 1, !tbaa !1278 {
	[0x564f0bac73e0]:  store i8 %85, i8* %33, align 1
	}

[0x564f0ba8c000]:   %85 = lshr i64 %66, 63 {
	[0x564f0bac7a30]:  %86 = lshr i64 %67, 63
	}

[0x564f0ba8c080]:   %86 = xor i64 %83, %85 {
	[0x564f0bac7b20]:  %87 = xor i64 %84, %86
	}

[0x564f0ba8c100]:   %87 = add nuw nsw i64 %86, %83 {
	[0x564f0babe4e0]:  %88 = add nuw nsw i64 %87, %84
	}

[0x564f0ba8c180]:   %88 = icmp eq i64 %87, 2 {
	[0x564f0babe660]:  %89 = icmp eq i64 %88, 2
	}

[0x564f0ba8c1e8]:   %89 = zext i1 %88 to i8 {
	[0x564f0baa6fb8]:  %90 = zext i1 %89 to i8
	}

[0x564f0ba8c260]:   store i8 %89, i8* %39, align 1, !tbaa !1279 {
	[0x564f0bac17a0]:  store i8 %90, i8* %39, align 1
	}

[0x564f0ba8c2e0]:   %90 = add i64 %65, 7 {
	[0x564f0bac1a40]:  %91 = add i64 %66, 7
	}

[0x564f0ba8c360]:   store i64 %90, i64* %PC, align 8 {
	[0x564f0bac9d20]:  store i64 %91, i64* %3, align 8
	}

[0x564f0ba8c3e0]:   %91 = add i64 %66, 24 {
	[0x564f0baca530]:  %92 = add i64 %67, 24
	}

[0x564f0ba8c448]:   %92 = inttoptr i64 %67 to i64* {
	[0x564f0baa70e8]:  %93 = inttoptr i64 %68 to i64*
	}

[0x564f0ba8c4a8]:   %93 = load i64, i64* %92, align 8 {
	[0x564f0baa7348]:  %94 = load i64, i64* %93, align 8
	}

[0x564f0ba8c520]:   store i64 %93, i64* %RBP, align 8, !tbaa !1257 {
	[0x564f0baca900]:  store i64 %94, i64* %RBP.i, align 8
	}

[0x564f0ba8c5a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bacaa30]:  store i64 %92, i64* %6, align 8
	}

[0x564f0ba8c620]:   %94 = add i64 %65, 8 {
	[0x564f0bacab20]:  %95 = add i64 %66, 8
	}

[0x564f0ba8c6a0]:   store i64 %94, i64* %PC, align 8 {
	[0x564f0bac2030]:  store i64 %95, i64* %3, align 8
	}

[0x564f0ba8c708]:   %95 = inttoptr i64 %91 to i64* {
	[0x564f0baa2bb8]:  %96 = inttoptr i64 %92 to i64*
	}

[0x564f0ba8c768]:   %96 = load i64, i64* %95, align 8 {
	[0x564f0baa2f48]:  %97 = load i64, i64* %96, align 8
	}

[0x564f0ba8c7e0]:   store i64 %96, i64* %PC, align 8, !tbaa !1257 {
	[0x564f0bac2320]:  store i64 %97, i64* %3, align 8
	}

[0x564f0ba8c860]:   %97 = add i64 %66, 32 {
	[0x564f0bacc8e0]:  %98 = add i64 %67, 32
	}

[0x564f0ba8c8e0]:   store i64 %97, i64* %RSP, align 8, !tbaa !1257 {
	[0x564f0bacca60]:  store i64 %98, i64* %6, align 8
	}

[0x564f0ba8c948]:   ret %struct.Memory* %56 {
	[0x564f0baa8838]:  ret %struct.Memory.31* %call2_400584
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x564f0ba70010]: block_400560 {
	[0x564f0babc0d0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [print_it] from mcsema/test.opt.ll
Extracting function [print_it] from mcsema/test.proposed.opt.ll
Matcher Done...
