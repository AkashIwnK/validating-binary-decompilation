Writing '/tmp/tmpmz4lfcch.dot'...
Writing '/tmp/tmpmz4lfcch.dot':Done

Reading LLVM: /tmp/tmpejj5nupq-query.ll
Extracting function [print_it] from /tmp/tmpejj5nupq-query.ll
Dot file generated!
Writing '/tmp/tmpifmcdhwz.dot'...
Writing '/tmp/tmpifmcdhwz.dot':Done

Reading LLVM: /tmp/tmpx3dd0iv8-target.ll
Extracting function [print_it] from /tmp/tmpx3dd0iv8-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 49 store i64 ptrtoint (%G__0x40068d_type* @G__0x40068d to i64), i64* %RSI.i, align 8
- 50 %RDI.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 51 %40 = add i64 %7, -16
- 52 %41 = load i64, i64* %RDI.i19, align 8
- 53 %42 = add i64 %10, 21
- 54 store i64 %42, i64* %3, align 8
- 55 %43 = inttoptr i64 %40 to i64*
- 56 store i64 %41, i64* %43, align 8
- 57 %44 = load i64, i64* %3, align 8
- 58 %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
- 59 store i64 %45, i64* %RDI.i19, align 8
- 60 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 61 %46 = load i64, i64* %RBP.i, align 8
- 62 %47 = add i64 %46, -8
- 63 %48 = add i64 %44, 12
- 64 store i64 %48, i64* %3, align 8
- 65 %49 = inttoptr i64 %47 to i64*
- 66 %50 = load i64, i64* %49, align 8
- 67 store i64 %50, i64* %RDX.i, align 8
- 68 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 69 %AL.i = bitcast %union.anon* %51 to i8*
- 70 store i8 0, i8* %AL.i, align 1
- 71 %52 = add i64 %44, -358
- 72 %53 = add i64 %44, 19
- 73 %54 = load i64, i64* %6, align 8
- 74 %55 = add i64 %54, -8
- 75 %56 = inttoptr i64 %55 to i64*
- 76 store i64 %53, i64* %56, align 8
- 77 store i64 %55, i64* %6, align 8
- 78 store i64 %52, i64* %3, align 8
- 79 %57 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
- 80 %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 81 %ECX.i9 = bitcast %union.anon* %58 to i32*
- 82 %RCX.i = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0
- 83 %59 = load i64, i64* %3, align 8
- 84 store i64 0, i64* %RCX.i, align 8
- 85 %EAX.i = bitcast %union.anon* %51 to i32*
- 86 %60 = load i64, i64* %RBP.i, align 8
- 87 %61 = add i64 %60, -12
- 88 %62 = load i32, i32* %EAX.i, align 4
- 89 %63 = add i64 %59, 5
- 90 store i64 %63, i64* %3, align 8
- 91 %64 = inttoptr i64 %61 to i32*
- 92 store i32 %62, i32* %64, align 4
- 93 %RAX.i = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
- 94 %65 = load i32, i32* %ECX.i9, align 4
- 95 %66 = zext i32 %65 to i64
- 96 %67 = load i64, i64* %3, align 8
- 97 store i64 %66, i64* %RAX.i, align 8
- 98 %68 = load i64, i64* %6, align 8
- 99 %69 = add i64 %68, 16
- 100 store i64 %69, i64* %6, align 8
- 101 %70 = icmp ugt i64 %68, -17
- 102 %71 = zext i1 %70 to i8
- 103 store i8 %71, i8* %14, align 1
- 104 %72 = trunc i64 %69 to i32
- 105 %73 = and i32 %72, 255
- 106 %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
- 107 %75 = trunc i32 %74 to i8
- 108 %76 = and i8 %75, 1
- 109 %77 = xor i8 %76, 1
- 110 store i8 %77, i8* %21, align 1
- 111 %78 = xor i64 %68, 16
- 112 %79 = xor i64 %78, %69
- 113 %80 = lshr i64 %79, 4
- 114 %81 = trunc i64 %80 to i8
- 115 %82 = and i8 %81, 1
- 116 store i8 %82, i8* %27, align 1
- 117 %83 = icmp eq i64 %69, 0
- 118 %84 = zext i1 %83 to i8
- 119 store i8 %84, i8* %30, align 1
- 120 %85 = lshr i64 %69, 63
- 121 %86 = trunc i64 %85 to i8
- 122 store i8 %86, i8* %33, align 1
- 123 %87 = lshr i64 %68, 63
- 124 %88 = xor i64 %85, %87
- 125 %89 = add nuw nsw i64 %88, %85
- 126 %90 = icmp eq i64 %89, 2
- 127 %91 = zext i1 %90 to i8
- 128 store i8 %91, i8* %39, align 1
- 129 %92 = add i64 %67, 7
- 130 store i64 %92, i64* %3, align 8
- 131 %93 = add i64 %68, 24
- 132 %94 = inttoptr i64 %69 to i64*
- 133 %95 = load i64, i64* %94, align 8
- 134 store i64 %95, i64* %RBP.i, align 8
- 135 store i64 %93, i64* %6, align 8
- 136 %96 = add i64 %67, 8
- 137 store i64 %96, i64* %3, align 8
- 138 %97 = inttoptr i64 %93 to i64*
- 139 %98 = load i64, i64* %97, align 8
- 140 store i64 %98, i64* %3, align 8
- 141 %99 = add i64 %68, 32
- 142 store i64 %99, i64* %6, align 8
- 143 ret %struct.Memory* %57
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f7d0e22c378>, {0: {0}, 1: {12}, 2: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 3: {14}, 4: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 5: {11}, 6: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 7: {17, 69, 79}, 8: {132, 72, 138, 80, 18, 92, 63}, 9: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 10: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 11: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 12: {22}, 13: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 14: {24}, 15: {102, 44, 118, 55, 25, 127, 95}, 16: {26}, 17: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 18: {39, 104, 107, 48, 114, 121, 28, 31}, 19: {105, 29}, 20: {106, 84, 30}, 21: {39, 104, 107, 48, 114, 121, 28, 31}, 22: {32, 40, 115, 108}, 23: {33, 109}, 24: {34}, 25: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 26: {36, 111}, 27: {112, 124, 52, 37}, 28: {113, 38}, 29: {39, 104, 107, 48, 114, 121, 28, 31}, 30: {32, 40, 115, 108}, 31: {41}, 32: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 33: {43, 117}, 34: {102, 44, 118, 55, 25, 127, 95}, 35: {45}, 36: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 37: {120, 123, 51, 47}, 38: {39, 104, 107, 48, 114, 121, 28, 31}, 39: {49}, 40: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 41: {120, 123, 51, 47}, 42: {112, 124, 52, 37}, 43: {125, 53}, 44: {126, 54}, 45: {102, 44, 118, 55, 25, 127, 95}, 46: {56}, 47: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 48: {9}, 49: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 50: {10}, 51: {59}, 52: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 53: {61}, 54: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 55: {132, 72, 138, 80, 18, 92, 63}, 56: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 57: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 58: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 59: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 60: {8}, 61: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 62: {17, 69, 79}, 63: {70}, 64: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 65: {132, 72, 138, 80, 18, 92, 63}, 66: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 67: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 68: {1}, 69: {2, 3, 5}, 70: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 71: {76}, 72: {77}, 73: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 74: {17, 69, 79}, 75: {132, 72, 138, 80, 18, 92, 63}, 76: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 77: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 78: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 79: {106, 84, 30}, 80: {4}, 81: {2, 3, 5}, 82: {6, 7}, 83: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 84: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 85: {2, 3, 5}, 86: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 87: {88}, 88: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 89: {90}, 90: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 91: {132, 72, 138, 80, 18, 92, 63}, 92: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 93: {6, 7}, 94: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 95: {102, 44, 118, 55, 25, 127, 95}, 96: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 97: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 98: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 99: {99}, 100: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 101: {101}, 102: {102, 44, 118, 55, 25, 127, 95}, 103: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 104: {39, 104, 107, 48, 114, 121, 28, 31}, 105: {105, 29}, 106: {106, 84, 30}, 107: {39, 104, 107, 48, 114, 121, 28, 31}, 108: {32, 40, 115, 108}, 109: {33, 109}, 110: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 111: {36, 111}, 112: {112, 124, 52, 37}, 113: {113, 38}, 114: {39, 104, 107, 48, 114, 121, 28, 31}, 115: {32, 40, 115, 108}, 116: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 117: {43, 117}, 118: {102, 44, 118, 55, 25, 127, 95}, 119: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 120: {120, 123, 51, 47}, 121: {39, 104, 107, 48, 114, 121, 28, 31}, 122: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 123: {120, 123, 51, 47}, 124: {112, 124, 52, 37}, 125: {125, 53}, 126: {126, 54}, 127: {102, 44, 118, 55, 25, 127, 95}, 128: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 129: {129}, 130: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 131: {131}, 132: {132, 72, 138, 80, 18, 92, 63}, 133: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 134: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 135: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 136: {136}, 137: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 138: {132, 72, 138, 80, 18, 92, 63}, 139: {96, 65, 66, 98, 68, 133, 73, 139, 13, 78, 16, 20, 85, 87, 89, 60, 94}, 140: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 141: {141}, 142: {128, 130, 134, 135, 137, 140, 142, 15, 19, 21, 23, 27, 35, 42, 46, 50, 57, 58, 62, 64, 67, 71, 74, 75, 81, 82, 83, 86, 91, 93, 97, 100, 103, 110, 116, 119, 122}, 143: {143}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f7d0e22c378>, {0: {0}, 1: {12}, 2: {13}, 3: {14}, 4: {15}, 5: {11}, 6: {16}, 7: {17}, 8: {18}, 9: {19}, 10: {20}, 11: {21}, 12: {22}, 13: {23}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {30}, 21: {31}, 22: {32}, 23: {33}, 24: {34}, 25: {35}, 26: {36}, 27: {37}, 28: {38}, 29: {39}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {46}, 37: {47}, 38: {48}, 39: {49}, 40: {50}, 41: {51}, 42: {52}, 43: {53}, 44: {54}, 45: {55}, 46: {56}, 47: {57}, 48: {9}, 49: {58}, 50: {10}, 51: {59}, 52: {60}, 53: {61}, 54: {62}, 55: {63}, 56: {64}, 57: {65}, 58: {66}, 59: {67}, 60: {8}, 61: {68}, 62: {69}, 63: {70}, 64: {71}, 65: {72}, 66: {73}, 67: {74}, 68: {1}, 69: {2}, 70: {75}, 71: {76}, 72: {77}, 73: {78}, 74: {79}, 75: {80}, 76: {81}, 77: {82}, 78: {83}, 79: {84}, 80: {4}, 81: {5}, 82: {7}, 83: {85}, 84: {86}, 85: {3}, 86: {87}, 87: {88}, 88: {89}, 89: {90}, 90: {91}, 91: {92}, 92: {93}, 93: {6}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 getelementptr getelementptr
EXACT 51 add add
EXACT 52 load load
EXACT 53 add add
EXACT 54 store store
EXACT 55 inttoptr inttoptr
EXACT 56 store store
EXACT 57 load load
EXACT 58 load load
EXACT 59 store store
EXACT 60 getelementptr getelementptr
EXACT 61 load load
EXACT 62 add add
EXACT 63 add add
EXACT 64 store store
EXACT 65 inttoptr inttoptr
EXACT 66 load load
EXACT 67 store store
EXACT 68 getelementptr getelementptr
EXACT 69 bitcast bitcast
EXACT 70 store store
EXACT 71 add add
EXACT 72 add add
EXACT 73 load load
EXACT 74 add add
EXACT 75 inttoptr inttoptr
EXACT 76 store store
EXACT 77 store store
EXACT 78 store store
EXACT 79 tail tail
EXACT 80 getelementptr getelementptr
EXACT 81 bitcast bitcast
EXACT 82 getelementptr getelementptr
EXACT 83 load load
EXACT 84 store store
EXACT 85 bitcast bitcast
EXACT 86 load load
EXACT 87 add add
EXACT 88 load load
EXACT 89 add add
EXACT 90 store store
EXACT 91 inttoptr inttoptr
EXACT 92 store store
EXACT 93 getelementptr getelementptr
EXACT 94 load load
EXACT 95 zext zext
EXACT 96 load load
EXACT 97 store store
EXACT 98 load load
EXACT 99 add add
EXACT 100 store store
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 trunc trunc
EXACT 105 and and
EXACT 106 tail tail
EXACT 107 trunc trunc
EXACT 108 and and
EXACT 109 xor xor
EXACT 110 store store
EXACT 111 xor xor
EXACT 112 xor xor
EXACT 113 lshr lshr
EXACT 114 trunc trunc
EXACT 115 and and
EXACT 116 store store
EXACT 117 icmp icmp
EXACT 118 zext zext
EXACT 119 store store
EXACT 120 lshr lshr
EXACT 121 trunc trunc
EXACT 122 store store
EXACT 123 lshr lshr
EXACT 124 xor xor
EXACT 125 add add
EXACT 126 icmp icmp
EXACT 127 zext zext
EXACT 128 store store
EXACT 129 add add
EXACT 130 store store
EXACT 131 add add
EXACT 132 inttoptr inttoptr
EXACT 133 load load
EXACT 134 store store
EXACT 135 store store
EXACT 136 add add
EXACT 137 store store
EXACT 138 inttoptr inttoptr
EXACT 139 load load
EXACT 140 store store
EXACT 141 add add
EXACT 142 store store
EXACT 143 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 9 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 10 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %5 = load i64, i64* %RBP, align 8
- 14 %6 = add i64 %1, 1
- 15 store i64 %6, i64* %PC, align 8
- 16 %7 = load i64, i64* %RSP, align 8
- 17 %8 = add i64 %7, -8
- 18 %9 = inttoptr i64 %8 to i64*
- 19 store i64 %5, i64* %9, align 8
- 20 %10 = load i64, i64* %PC, align 8
- 21 store i64 %8, i64* %RBP, align 8
- 22 %11 = add i64 %7, -24
- 23 store i64 %11, i64* %RSP, align 8
- 24 %12 = icmp ult i64 %8, 16
- 25 %13 = zext i1 %12 to i8
- 26 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 27 store i8 %13, i8* %14, align 1
- 28 %15 = trunc i64 %11 to i32
- 29 %16 = and i32 %15, 255
- 30 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 31 %18 = trunc i32 %17 to i8
- 32 %19 = and i8 %18, 1
- 33 %20 = xor i8 %19, 1
- 34 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 35 store i8 %20, i8* %21, align 1
- 36 %22 = xor i64 %8, 16
- 37 %23 = xor i64 %22, %11
- 38 %24 = lshr i64 %23, 4
- 39 %25 = trunc i64 %24 to i8
- 40 %26 = and i8 %25, 1
- 41 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 42 store i8 %26, i8* %27, align 1
- 43 %28 = icmp eq i64 %11, 0
- 44 %29 = zext i1 %28 to i8
- 45 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 store i8 %29, i8* %30, align 1
- 47 %31 = lshr i64 %11, 63
- 48 %32 = trunc i64 %31 to i8
- 49 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 store i8 %32, i8* %33, align 1
- 51 %34 = lshr i64 %8, 63
- 52 %35 = xor i64 %31, %34
- 53 %36 = add nuw nsw i64 %35, %34
- 54 %37 = icmp eq i64 %36, 2
- 55 %38 = zext i1 %37 to i8
- 56 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 57 store i8 %38, i8* %39, align 1
- 58 store i64 add (i64 ptrtoint (%seg_400670__rodata_type* @seg_400670__rodata to i64), i64 29), i64* %RSI, align 8
- 59 %40 = add i64 %7, -16
- 60 %41 = load i64, i64* %RDI, align 8
- 61 %42 = add i64 %10, 21
- 62 store i64 %42, i64* %PC, align 8
- 63 %43 = inttoptr i64 %40 to i64*
- 64 store i64 %41, i64* %43, align 8
- 65 %44 = load i64, i64* %PC, align 8
- 66 %45 = load i64, i64* @stderr, align 64
- 67 store i64 %45, i64* %RDI, align 8
- 68 %46 = load i64, i64* %RBP, align 8
- 69 %47 = add i64 %46, -8
- 70 %48 = add i64 %44, 12
- 71 store i64 %48, i64* %PC, align 8
- 72 %49 = inttoptr i64 %47 to i64*
- 73 %50 = load i64, i64* %49, align 8
- 74 store i64 %50, i64* %RDX, align 8
- 75 store i8 0, i8* %AL, align 1
- 76 %51 = add i64 %44, -358
- 77 %52 = add i64 %44, 19
- 78 %53 = load i64, i64* %RSP, align 8
- 79 %54 = add i64 %53, -8
- 80 %55 = inttoptr i64 %54 to i64*
- 81 store i64 %52, i64* %55, align 8
- 82 store i64 %54, i64* %RSP, align 8
- 83 store i64 %51, i64* %PC, align 8
- 84 %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2)
- 85 %57 = load i64, i64* %PC, align 8
- 86 store i64 0, i64* %RCX, align 8
- 87 %58 = load i64, i64* %RBP, align 8
- 88 %59 = add i64 %58, -12
- 89 %60 = load i32, i32* %EAX, align 4
- 90 %61 = add i64 %57, 5
- 91 store i64 %61, i64* %PC, align 8
- 92 %62 = inttoptr i64 %59 to i32*
- 93 store i32 %60, i32* %62, align 4
- 94 %63 = load i32, i32* %ECX, align 4
- 95 %64 = zext i32 %63 to i64
- 96 %65 = load i64, i64* %PC, align 8
- 97 store i64 %64, i64* %RAX, align 8
- 98 %66 = load i64, i64* %RSP, align 8
- 99 %67 = add i64 %66, 16
- 100 store i64 %67, i64* %RSP, align 8
- 101 %68 = icmp ugt i64 %66, -17
- 102 %69 = zext i1 %68 to i8
- 103 store i8 %69, i8* %14, align 1
- 104 %70 = trunc i64 %67 to i32
- 105 %71 = and i32 %70, 255
- 106 %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
- 107 %73 = trunc i32 %72 to i8
- 108 %74 = and i8 %73, 1
- 109 %75 = xor i8 %74, 1
- 110 store i8 %75, i8* %21, align 1
- 111 %76 = xor i64 %66, 16
- 112 %77 = xor i64 %76, %67
- 113 %78 = lshr i64 %77, 4
- 114 %79 = trunc i64 %78 to i8
- 115 %80 = and i8 %79, 1
- 116 store i8 %80, i8* %27, align 1
- 117 %81 = icmp eq i64 %67, 0
- 118 %82 = zext i1 %81 to i8
- 119 store i8 %82, i8* %30, align 1
- 120 %83 = lshr i64 %67, 63
- 121 %84 = trunc i64 %83 to i8
- 122 store i8 %84, i8* %33, align 1
- 123 %85 = lshr i64 %66, 63
- 124 %86 = xor i64 %83, %85
- 125 %87 = add nuw nsw i64 %86, %83
- 126 %88 = icmp eq i64 %87, 2
- 127 %89 = zext i1 %88 to i8
- 128 store i8 %89, i8* %39, align 1
- 129 %90 = add i64 %65, 7
- 130 store i64 %90, i64* %PC, align 8
- 131 %91 = add i64 %66, 24
- 132 %92 = inttoptr i64 %67 to i64*
- 133 %93 = load i64, i64* %92, align 8
- 134 store i64 %93, i64* %RBP, align 8
- 135 store i64 %91, i64* %RSP, align 8
- 136 %94 = add i64 %65, 8
- 137 store i64 %94, i64* %PC, align 8
- 138 %95 = inttoptr i64 %91 to i64*
- 139 %96 = load i64, i64* %95, align 8
- 140 store i64 %96, i64* %PC, align 8
- 141 %97 = add i64 %66, 32
- 142 store i64 %97, i64* %RSP, align 8
- 143 ret %struct.Memory* %56
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f7d0e22c510>, {0: {0}, 1: {68}, 2: {81, 85, 69}, 3: {81, 85, 69}, 4: {80}, 5: {81, 85, 69}, 6: {82, 93}, 7: {82, 93}, 8: {60}, 9: {48}, 10: {50}, 11: {5}, 12: {1}, 13: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 14: {3}, 15: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 16: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 17: {74, 62, 7}, 18: {65, 132, 8, 138, 75, 55, 91}, 19: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 20: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 21: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 22: {12}, 23: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 24: {14}, 25: {34, 102, 45, 15, 118, 127, 95}, 26: {16}, 27: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 28: {38, 104, 107, 18, 114, 21, 121, 29}, 29: {105, 19}, 30: {106, 20, 79}, 31: {38, 104, 107, 18, 114, 21, 121, 29}, 32: {115, 108, 22, 30}, 33: {109, 23}, 34: {24}, 35: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 36: {26, 111}, 37: {112, 42, 27, 124}, 38: {113, 28}, 39: {38, 104, 107, 18, 114, 21, 121, 29}, 40: {115, 108, 22, 30}, 41: {31}, 42: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 43: {33, 117}, 44: {34, 102, 45, 15, 118, 127, 95}, 45: {35}, 46: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 47: {120, 41, 123, 37}, 48: {38, 104, 107, 18, 114, 21, 121, 29}, 49: {39}, 50: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 51: {120, 41, 123, 37}, 52: {112, 42, 27, 124}, 53: {43, 125}, 54: {44, 126}, 55: {34, 102, 45, 15, 118, 127, 95}, 56: {46}, 57: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 58: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 59: {51}, 60: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 61: {53}, 62: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 63: {65, 132, 8, 138, 75, 55, 91}, 64: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 65: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 66: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 67: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 68: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 69: {74, 62, 7}, 70: {63}, 71: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 72: {65, 132, 8, 138, 75, 55, 91}, 73: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 74: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 75: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 76: {71}, 77: {72}, 78: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 79: {74, 62, 7}, 80: {65, 132, 8, 138, 75, 55, 91}, 81: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 82: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 83: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 84: {106, 20, 79}, 85: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 86: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 87: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 88: {87}, 89: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 90: {89}, 91: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 92: {65, 132, 8, 138, 75, 55, 91}, 93: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 94: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 95: {34, 102, 45, 15, 118, 127, 95}, 96: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 97: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 98: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 99: {99}, 100: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 101: {101}, 102: {34, 102, 45, 15, 118, 127, 95}, 103: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 104: {38, 104, 107, 18, 114, 21, 121, 29}, 105: {105, 19}, 106: {106, 20, 79}, 107: {38, 104, 107, 18, 114, 21, 121, 29}, 108: {115, 108, 22, 30}, 109: {109, 23}, 110: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 111: {26, 111}, 112: {112, 42, 27, 124}, 113: {113, 28}, 114: {38, 104, 107, 18, 114, 21, 121, 29}, 115: {115, 108, 22, 30}, 116: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 117: {33, 117}, 118: {34, 102, 45, 15, 118, 127, 95}, 119: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 120: {120, 41, 123, 37}, 121: {38, 104, 107, 18, 114, 21, 121, 29}, 122: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 123: {120, 41, 123, 37}, 124: {112, 42, 27, 124}, 125: {43, 125}, 126: {44, 126}, 127: {34, 102, 45, 15, 118, 127, 95}, 128: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 129: {129}, 130: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 131: {131}, 132: {65, 132, 8, 138, 75, 55, 91}, 133: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 134: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 135: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 136: {136}, 137: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 138: {65, 132, 8, 138, 75, 55, 91}, 139: {96, 2, 66, 98, 133, 6, 73, 10, 139, 83, 52, 86, 88, 57, 58, 61, 94}, 140: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 141: {141}, 142: {128, 130, 4, 134, 135, 9, 137, 11, 140, 13, 142, 17, 25, 32, 36, 40, 47, 49, 54, 56, 59, 64, 67, 70, 76, 77, 78, 84, 90, 92, 97, 100, 103, 110, 116, 119, 122}, 143: {143}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f7d0e22c510>, {0: {0}, 1: {68}, 2: {69}, 3: {85}, 4: {80}, 5: {81}, 6: {93}, 7: {82}, 8: {60}, 9: {48}, 10: {50}, 11: {5}, 12: {1}, 13: {2}, 14: {3}, 15: {4}, 16: {6}, 17: {7}, 18: {8}, 19: {9}, 20: {10}, 21: {11}, 22: {12}, 23: {13}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {20}, 31: {21}, 32: {22}, 33: {23}, 34: {24}, 35: {25}, 36: {26}, 37: {27}, 38: {28}, 39: {29}, 40: {30}, 41: {31}, 42: {32}, 43: {33}, 44: {34}, 45: {35}, 46: {36}, 47: {37}, 48: {38}, 49: {39}, 50: {40}, 51: {41}, 52: {42}, 53: {43}, 54: {44}, 55: {45}, 56: {46}, 57: {47}, 58: {49}, 59: {51}, 60: {52}, 61: {53}, 62: {54}, 63: {55}, 64: {56}, 65: {57}, 66: {58}, 67: {59}, 68: {61}, 69: {62}, 70: {63}, 71: {64}, 72: {65}, 73: {66}, 74: {67}, 75: {70}, 76: {71}, 77: {72}, 78: {73}, 79: {74}, 80: {75}, 81: {76}, 82: {77}, 83: {78}, 84: {79}, 85: {83}, 86: {84}, 87: {86}, 88: {87}, 89: {88}, 90: {89}, 91: {90}, 92: {91}, 93: {92}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 load load
EXACT 14 add add
EXACT 15 store store
EXACT 16 load load
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 store store
EXACT 22 add add
EXACT 23 store store
EXACT 24 icmp icmp
EXACT 25 zext zext
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 tail tail
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 xor xor
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 xor xor
EXACT 37 xor xor
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 trunc trunc
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 lshr lshr
EXACT 52 xor xor
EXACT 53 add add
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 store store
EXACT 59 add add
EXACT 60 load load
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 load load
EXACT 66 load load
EXACT 67 store store
EXACT 68 load load
EXACT 69 add add
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 store store
EXACT 75 store store
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
EXACT 85 load load
EXACT 86 store store
EXACT 87 load load
EXACT 88 add add
EXACT 89 load load
EXACT 90 add add
EXACT 91 store store
EXACT 92 inttoptr inttoptr
EXACT 93 store store
EXACT 94 load load
EXACT 95 zext zext
EXACT 96 load load
EXACT 97 store store
EXACT 98 load load
EXACT 99 add add
EXACT 100 store store
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 trunc trunc
EXACT 105 and and
EXACT 106 tail tail
EXACT 107 trunc trunc
EXACT 108 and and
EXACT 109 xor xor
EXACT 110 store store
EXACT 111 xor xor
EXACT 112 xor xor
EXACT 113 lshr lshr
EXACT 114 trunc trunc
EXACT 115 and and
EXACT 116 store store
EXACT 117 icmp icmp
EXACT 118 zext zext
EXACT 119 store store
EXACT 120 lshr lshr
EXACT 121 trunc trunc
EXACT 122 store store
EXACT 123 lshr lshr
EXACT 124 xor xor
EXACT 125 add add
EXACT 126 icmp icmp
EXACT 127 zext zext
EXACT 128 store store
EXACT 129 add add
EXACT 130 store store
EXACT 131 add add
EXACT 132 inttoptr inttoptr
EXACT 133 load load
EXACT 134 store store
EXACT 135 store store
EXACT 136 add add
EXACT 137 store store
EXACT 138 inttoptr inttoptr
EXACT 139 load load
EXACT 140 store store
EXACT 141 add add
EXACT 142 store store
EXACT 143 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 ptrtoint (%G__0x40068d_type* @G__0x40068d to i64), i64* %RSI.i, align 8', '%RDI.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%40 = add i64 %7, -16', '%41 = load i64, i64* %RDI.i19, align 8', '%42 = add i64 %10, 21', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %3, align 8', '%45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8', 'store i64 %45, i64* %RDI.i19, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%46 = load i64, i64* %RBP.i, align 8', '%47 = add i64 %46, -8', '%48 = add i64 %44, 12', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %47 to i64*', '%50 = load i64, i64* %49, align 8', 'store i64 %50, i64* %RDX.i, align 8', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %51 to i8*', 'store i8 0, i8* %AL.i, align 1', '%52 = add i64 %44, -358', '%53 = add i64 %44, 19', '%54 = load i64, i64* %6, align 8', '%55 = add i64 %54, -8', '%56 = inttoptr i64 %55 to i64*', 'store i64 %53, i64* %56, align 8', 'store i64 %55, i64* %6, align 8', 'store i64 %52, i64* %3, align 8', '%57 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)', '%58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i9 = bitcast %union.anon* %58 to i32*', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0', '%59 = load i64, i64* %3, align 8', 'store i64 0, i64* %RCX.i, align 8', '%EAX.i = bitcast %union.anon* %51 to i32*', '%60 = load i64, i64* %RBP.i, align 8', '%61 = add i64 %60, -12', '%62 = load i32, i32* %EAX.i, align 4', '%63 = add i64 %59, 5', 'store i64 %63, i64* %3, align 8', '%64 = inttoptr i64 %61 to i32*', 'store i32 %62, i32* %64, align 4', '%RAX.i = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0', '%65 = load i32, i32* %ECX.i9, align 4', '%66 = zext i32 %65 to i64', '%67 = load i64, i64* %3, align 8', 'store i64 %66, i64* %RAX.i, align 8', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, 16', 'store i64 %69, i64* %6, align 8', '%70 = icmp ugt i64 %68, -17', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %14, align 1', '%72 = trunc i64 %69 to i32', '%73 = and i32 %72, 255', '%74 = tail call i32 @llvm.ctpop.i32(i32 %73)', '%75 = trunc i32 %74 to i8', '%76 = and i8 %75, 1', '%77 = xor i8 %76, 1', 'store i8 %77, i8* %21, align 1', '%78 = xor i64 %68, 16', '%79 = xor i64 %78, %69', '%80 = lshr i64 %79, 4', '%81 = trunc i64 %80 to i8', '%82 = and i8 %81, 1', 'store i8 %82, i8* %27, align 1', '%83 = icmp eq i64 %69, 0', '%84 = zext i1 %83 to i8', 'store i8 %84, i8* %30, align 1', '%85 = lshr i64 %69, 63', '%86 = trunc i64 %85 to i8', 'store i8 %86, i8* %33, align 1', '%87 = lshr i64 %68, 63', '%88 = xor i64 %85, %87', '%89 = add nuw nsw i64 %88, %85', '%90 = icmp eq i64 %89, 2', '%91 = zext i1 %90 to i8', 'store i8 %91, i8* %39, align 1', '%92 = add i64 %67, 7', 'store i64 %92, i64* %3, align 8', '%93 = add i64 %68, 24', '%94 = inttoptr i64 %69 to i64*', '%95 = load i64, i64* %94, align 8', 'store i64 %95, i64* %RBP.i, align 8', 'store i64 %93, i64* %6, align 8', '%96 = add i64 %67, 8', 'store i64 %96, i64* %3, align 8', '%97 = inttoptr i64 %93 to i64*', '%98 = load i64, i64* %97, align 8', 'store i64 %98, i64* %3, align 8', '%99 = add i64 %68, 32', 'store i64 %99, i64* %6, align 8', 'ret %struct.Memory* %57'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x40068d_type* @G__0x40068d to i64), i64* %RSI.i, align 8
Found line to remove! %RDI.i19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %40 = add i64 %7, -16
Found line to remove! %41 = load i64, i64* %RDI.i19, align 8
Found line to remove! %42 = add i64 %10, 21
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Found line to remove! %44 = load i64, i64* %3, align 8
Found line to remove! %45 = load i64, i64* bitcast (%G_0x601040_type* @G_0x601040 to i64*), align 8
Found line to remove! store i64 %45, i64* %RDI.i19, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %46 = load i64, i64* %RBP.i, align 8
Found line to remove! %47 = add i64 %46, -8
Found line to remove! %48 = add i64 %44, 12
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %47 to i64*
Found line to remove! %50 = load i64, i64* %49, align 8
Found line to remove! store i64 %50, i64* %RDX.i, align 8
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %51 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %52 = add i64 %44, -358
Found line to remove! %53 = add i64 %44, 19
Found line to remove! %54 = load i64, i64* %6, align 8
Found line to remove! %55 = add i64 %54, -8
Found line to remove! %56 = inttoptr i64 %55 to i64*
Found line to remove! store i64 %53, i64* %56, align 8
Found line to remove! store i64 %55, i64* %6, align 8
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %57 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
Found line to remove! %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX.i9 = bitcast %union.anon* %58 to i32*
Found line to remove! %RCX.i = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0
Found line to remove! %59 = load i64, i64* %3, align 8
Found line to remove! store i64 0, i64* %RCX.i, align 8
Found line to remove! %EAX.i = bitcast %union.anon* %51 to i32*
Found line to remove! %60 = load i64, i64* %RBP.i, align 8
Found line to remove! %61 = add i64 %60, -12
Found line to remove! %62 = load i32, i32* %EAX.i, align 4
Found line to remove! %63 = add i64 %59, 5
Found line to remove! store i64 %63, i64* %3, align 8
Found line to remove! %64 = inttoptr i64 %61 to i32*
Found line to remove! store i32 %62, i32* %64, align 4
Found line to remove! %RAX.i = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
Found line to remove! %65 = load i32, i32* %ECX.i9, align 4
Found line to remove! %66 = zext i32 %65 to i64
Found line to remove! %67 = load i64, i64* %3, align 8
Found line to remove! store i64 %66, i64* %RAX.i, align 8
Found line to remove! %68 = load i64, i64* %6, align 8
Found line to remove! %69 = add i64 %68, 16
Found line to remove! store i64 %69, i64* %6, align 8
Found line to remove! %70 = icmp ugt i64 %68, -17
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %14, align 1
Found line to remove! %72 = trunc i64 %69 to i32
Found line to remove! %73 = and i32 %72, 255
Found line to remove! %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
Found line to remove! %75 = trunc i32 %74 to i8
Found line to remove! %76 = and i8 %75, 1
Found line to remove! %77 = xor i8 %76, 1
Found line to remove! store i8 %77, i8* %21, align 1
Found line to remove! %78 = xor i64 %68, 16
Found line to remove! %79 = xor i64 %78, %69
Found line to remove! %80 = lshr i64 %79, 4
Found line to remove! %81 = trunc i64 %80 to i8
Found line to remove! %82 = and i8 %81, 1
Found line to remove! store i8 %82, i8* %27, align 1
Found line to remove! %83 = icmp eq i64 %69, 0
Found line to remove! %84 = zext i1 %83 to i8
Found line to remove! store i8 %84, i8* %30, align 1
Found line to remove! %85 = lshr i64 %69, 63
Found line to remove! %86 = trunc i64 %85 to i8
Found line to remove! store i8 %86, i8* %33, align 1
Found line to remove! %87 = lshr i64 %68, 63
Found line to remove! %88 = xor i64 %85, %87
Found line to remove! %89 = add nuw nsw i64 %88, %85
Found line to remove! %90 = icmp eq i64 %89, 2
Found line to remove! %91 = zext i1 %90 to i8
Found line to remove! store i8 %91, i8* %39, align 1
Found line to remove! %92 = add i64 %67, 7
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = add i64 %68, 24
Found line to remove! %94 = inttoptr i64 %69 to i64*
Found line to remove! %95 = load i64, i64* %94, align 8
Found line to remove! store i64 %95, i64* %RBP.i, align 8
Found line to remove! store i64 %93, i64* %6, align 8
Found line to remove! %96 = add i64 %67, 8
Found line to remove! store i64 %96, i64* %3, align 8
Found line to remove! %97 = inttoptr i64 %93 to i64*
Found line to remove! %98 = load i64, i64* %97, align 8
Found line to remove! store i64 %98, i64* %3, align 8
Found line to remove! %99 = add i64 %68, 32
Found line to remove! store i64 %99, i64* %6, align 8
Found line to remove! ret %struct.Memory* %57
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', 'store i64 add (i64 ptrtoint (%seg_400670__rodata_type* @seg_400670__rodata to i64), i64 29), i64* %RSI, align 8', '%40 = add i64 %7, -16', '%41 = load i64, i64* %RDI, align 8', '%42 = add i64 %10, 21', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %PC, align 8', '%45 = load i64, i64* @stderr, align 64', 'store i64 %45, i64* %RDI, align 8', '%46 = load i64, i64* %RBP, align 8', '%47 = add i64 %46, -8', '%48 = add i64 %44, 12', 'store i64 %48, i64* %PC, align 8', '%49 = inttoptr i64 %47 to i64*', '%50 = load i64, i64* %49, align 8', 'store i64 %50, i64* %RDX, align 8', 'store i8 0, i8* %AL, align 1', '%51 = add i64 %44, -358', '%52 = add i64 %44, 19', '%53 = load i64, i64* %RSP, align 8', '%54 = add i64 %53, -8', '%55 = inttoptr i64 %54 to i64*', 'store i64 %52, i64* %55, align 8', 'store i64 %54, i64* %RSP, align 8', 'store i64 %51, i64* %PC, align 8', '%56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2)', '%57 = load i64, i64* %PC, align 8', 'store i64 0, i64* %RCX, align 8', '%58 = load i64, i64* %RBP, align 8', '%59 = add i64 %58, -12', '%60 = load i32, i32* %EAX, align 4', '%61 = add i64 %57, 5', 'store i64 %61, i64* %PC, align 8', '%62 = inttoptr i64 %59 to i32*', 'store i32 %60, i32* %62, align 4', '%63 = load i32, i32* %ECX, align 4', '%64 = zext i32 %63 to i64', '%65 = load i64, i64* %PC, align 8', 'store i64 %64, i64* %RAX, align 8', '%66 = load i64, i64* %RSP, align 8', '%67 = add i64 %66, 16', 'store i64 %67, i64* %RSP, align 8', '%68 = icmp ugt i64 %66, -17', '%69 = zext i1 %68 to i8', 'store i8 %69, i8* %14, align 1', '%70 = trunc i64 %67 to i32', '%71 = and i32 %70, 255', '%72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12', '%73 = trunc i32 %72 to i8', '%74 = and i8 %73, 1', '%75 = xor i8 %74, 1', 'store i8 %75, i8* %21, align 1', '%76 = xor i64 %66, 16', '%77 = xor i64 %76, %67', '%78 = lshr i64 %77, 4', '%79 = trunc i64 %78 to i8', '%80 = and i8 %79, 1', 'store i8 %80, i8* %27, align 1', '%81 = icmp eq i64 %67, 0', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %30, align 1', '%83 = lshr i64 %67, 63', '%84 = trunc i64 %83 to i8', 'store i8 %84, i8* %33, align 1', '%85 = lshr i64 %66, 63', '%86 = xor i64 %83, %85', '%87 = add nuw nsw i64 %86, %83', '%88 = icmp eq i64 %87, 2', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %39, align 1', '%90 = add i64 %65, 7', 'store i64 %90, i64* %PC, align 8', '%91 = add i64 %66, 24', '%92 = inttoptr i64 %67 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %RBP, align 8', 'store i64 %91, i64* %RSP, align 8', '%94 = add i64 %65, 8', 'store i64 %94, i64* %PC, align 8', '%95 = inttoptr i64 %91 to i64*', '%96 = load i64, i64* %95, align 8', 'store i64 %96, i64* %PC, align 8', '%97 = add i64 %66, 32', 'store i64 %97, i64* %RSP, align 8', 'ret %struct.Memory* %56'])
Keep: block_4005b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! store i64 add (i64 ptrtoint (%seg_400670__rodata_type* @seg_400670__rodata to i64), i64 29), i64* %RSI, align 8
Found line to remove! %40 = add i64 %7, -16
Found line to remove! %41 = load i64, i64* %RDI, align 8
Found line to remove! %42 = add i64 %10, 21
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Found line to remove! %44 = load i64, i64* %PC, align 8
Found line to remove! %45 = load i64, i64* @stderr, align 64
Found line to remove! store i64 %45, i64* %RDI, align 8
Found line to remove! %46 = load i64, i64* %RBP, align 8
Found line to remove! %47 = add i64 %46, -8
Found line to remove! %48 = add i64 %44, 12
Found line to remove! store i64 %48, i64* %PC, align 8
Found line to remove! %49 = inttoptr i64 %47 to i64*
Found line to remove! %50 = load i64, i64* %49, align 8
Found line to remove! store i64 %50, i64* %RDX, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %51 = add i64 %44, -358
Found line to remove! %52 = add i64 %44, 19
Found line to remove! %53 = load i64, i64* %RSP, align 8
Found line to remove! %54 = add i64 %53, -8
Found line to remove! %55 = inttoptr i64 %54 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! store i64 %54, i64* %RSP, align 8
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %56 = tail call fastcc %struct.Memory* @ext_601058_fprintf(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %57 = load i64, i64* %PC, align 8
Found line to remove! store i64 0, i64* %RCX, align 8
Found line to remove! %58 = load i64, i64* %RBP, align 8
Found line to remove! %59 = add i64 %58, -12
Found line to remove! %60 = load i32, i32* %EAX, align 4
Found line to remove! %61 = add i64 %57, 5
Found line to remove! store i64 %61, i64* %PC, align 8
Found line to remove! %62 = inttoptr i64 %59 to i32*
Found line to remove! store i32 %60, i32* %62, align 4
Found line to remove! %63 = load i32, i32* %ECX, align 4
Found line to remove! %64 = zext i32 %63 to i64
Found line to remove! %65 = load i64, i64* %PC, align 8
Found line to remove! store i64 %64, i64* %RAX, align 8
Found line to remove! %66 = load i64, i64* %RSP, align 8
Found line to remove! %67 = add i64 %66, 16
Found line to remove! store i64 %67, i64* %RSP, align 8
Found line to remove! %68 = icmp ugt i64 %66, -17
Found line to remove! %69 = zext i1 %68 to i8
Found line to remove! store i8 %69, i8* %14, align 1
Found line to remove! %70 = trunc i64 %67 to i32
Found line to remove! %71 = and i32 %70, 255
Found line to remove! %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
Found line to remove! %73 = trunc i32 %72 to i8
Found line to remove! %74 = and i8 %73, 1
Found line to remove! %75 = xor i8 %74, 1
Found line to remove! store i8 %75, i8* %21, align 1
Found line to remove! %76 = xor i64 %66, 16
Found line to remove! %77 = xor i64 %76, %67
Found line to remove! %78 = lshr i64 %77, 4
Found line to remove! %79 = trunc i64 %78 to i8
Found line to remove! %80 = and i8 %79, 1
Found line to remove! store i8 %80, i8* %27, align 1
Found line to remove! %81 = icmp eq i64 %67, 0
Found line to remove! %82 = zext i1 %81 to i8
Found line to remove! store i8 %82, i8* %30, align 1
Found line to remove! %83 = lshr i64 %67, 63
Found line to remove! %84 = trunc i64 %83 to i8
Found line to remove! store i8 %84, i8* %33, align 1
Found line to remove! %85 = lshr i64 %66, 63
Found line to remove! %86 = xor i64 %83, %85
Found line to remove! %87 = add nuw nsw i64 %86, %83
Found line to remove! %88 = icmp eq i64 %87, 2
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %39, align 1
Found line to remove! %90 = add i64 %65, 7
Found line to remove! store i64 %90, i64* %PC, align 8
Found line to remove! %91 = add i64 %66, 24
Found line to remove! %92 = inttoptr i64 %67 to i64*
Found line to remove! %93 = load i64, i64* %92, align 8
Found line to remove! store i64 %93, i64* %RBP, align 8
Found line to remove! store i64 %91, i64* %RSP, align 8
Found line to remove! %94 = add i64 %65, 8
Found line to remove! store i64 %94, i64* %PC, align 8
Found line to remove! %95 = inttoptr i64 %91 to i64*
Found line to remove! %96 = load i64, i64* %95, align 8
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = add i64 %66, 32
Found line to remove! store i64 %97, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %56
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_30/print_it/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_30/binary/test.mcsema.calls_renamed.ll print_it
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
