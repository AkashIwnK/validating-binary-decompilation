Matching sub_400540_stderr_driver Vs stderr_driver


[Info] Retrieve Potential Matches...
[0x555a01875330]:   %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9 {
	[0x555a01886aa0]:  %call2_400552 = tail call %struct.Memory.31* @sub_400590.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	[0x555a018ccbc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x555a019103a0]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x555a018754e0]: %struct.State* %0 {
	[0x555a0188abc0]:%struct.State.0* %0
	}

[0x555a01875520]: i64 %1 {
	[0x555a0188b610]:i64 %1
	}

[0x555a01875560]: %struct.Memory* %2 {
	[0x555a0188b4b0]:%struct.Memory.31* %2
	}

[0x555a01875760]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x555a0187b420]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x555a01875850]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x555a01931220]:  %RDI.i10 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x555a01875960]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x555a01931410]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x555a01875a70]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x555a019315e0]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x555a01875b08]:   %4 = load i64, i64* %RBP, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01875bd0]:   %5 = add i64 %1, 1 {
	[0x555a01941750]:  %5 = add i64 %1, 1
	}

[0x555a01875c50]:   store i64 %5, i64* %PC, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01875cb8]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01875d30]:   %7 = add i64 %6, -8 {
	[0x555a01886ce0]:  %8 = add i64 %7, -8
	[0x555a0188a700]:  %45 = add i64 %44, -8
	[0x555a0188adc0]:  %54 = add i64 %53, -8
	}

[0x555a01875d98]:   %8 = inttoptr i64 %7 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a01875e10]:   store i64 %4, i64* %8, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01875e78]:   %9 = load i64, i64* %PC, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01875ef0]:   store i64 %7, i64* %RBP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01875f70]:   %10 = add i64 %6, -24 {
	[0x555a018f8850]:  %11 = add i64 %7, -24
	}

[0x555a01875ff0]:   store i64 %10, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01876070]:   %11 = icmp ult i64 %7, 16 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a018760d8]:   %12 = zext i1 %11 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a01876180]:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x555a019d0fa0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x555a01876210]:   store i8 %12, i8* %13, align 1, !tbaa !1265 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a018cf8a0]:   %75 = lshr i64 %55, 63 {
	[0x555a01889f20]:  %31 = lshr i64 %11, 63
	[0x555a01891e80]:  %76 = lshr i64 %56, 63
	[0x555a018921b0]:  %74 = lshr i64 %58, 63
	[0x555a018fa7b0]:  %34 = lshr i64 %8, 63
	}

[0x555a018cf920]:   %76 = xor i64 %73, %75 {
	[0x555a01888fc0]:  %35 = xor i64 %31, %34
	[0x555a0188d590]:  %68 = xor i64 %67, %58
	[0x555a01891d20]:  %77 = xor i64 %74, %76
	[0x555a018fb440]:  %23 = xor i64 %22, %11
	}

[0x555a018cf9a0]:   %77 = add nuw nsw i64 %76, %73 {
	[0x555a01891bc0]:  %78 = add nuw nsw i64 %77, %74
	[0x555a018fbff0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x555a018cfa20]:   %78 = icmp eq i64 %77, 2 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a018cfa88]:   %79 = zext i1 %78 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a018cfb00]:   store i8 %79, i8* %38, align 1, !tbaa !1283 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a018cfb80]:   %80 = add i64 %56, 5 {
	[0x555a01892470]:  %81 = add i64 %57, 5
	}

[0x555a018cfc00]:   store i64 %80, i64* %PC, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a018cfc80]:   %81 = add i64 %55, 24 {
	[0x555a01889b20]:  %82 = add i64 %56, 24
	}

[0x555a018cfce8]:   %82 = inttoptr i64 %57 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a018cfd48]:   %83 = load i64, i64* %82, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a018cfdc0]:   store i64 %83, i64* %RBP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a018cfe40]:   store i64 %81, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a018cfec0]:   %84 = add i64 %56, 6 {
	[0x555a01889750]:  %85 = add i64 %57, 6
	}

[0x555a018cff40]:   store i64 %84, i64* %PC, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a018cffa8]:   %85 = inttoptr i64 %81 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a018d0008]:   %86 = load i64, i64* %85, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a018dd948]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x555a018fc8b8]:  %AL.i = bitcast %union.anon.4* %50 to i8*
	}

[0x555a01927bf8]:   %14 = trunc i64 %10 to i32 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01927c70]:   %15 = and i32 %14, 255 {
	[0x555a0188c0e0]:  %62 = and i32 %61, 255
	[0x555a018fb990]:  %16 = and i32 %15, 255
	}

[0x555a01927d30]:   %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9 {
	[0x555a01886aa0]:  %call2_400552 = tail call %struct.Memory.31* @sub_400590.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	[0x555a018ccbc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x555a019103a0]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x555a01927da8]:   %17 = trunc i32 %16 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01927e20]:   %18 = and i8 %17, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	[0x555a0188d440]:  %71 = and i8 %70, 1
	[0x555a018fa460]:  %19 = and i8 %18, 1
	[0x555a018fa5b0]:  %26 = and i8 %25, 1
	}

[0x555a01927ea0]:   %19 = xor i8 %18, 1 {
	[0x555a0188d000]:  %66 = xor i8 %65, 1
	[0x555a018fb880]:  %20 = xor i8 %19, 1
	}

[0x555a01927f50]:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x555a018f1f10]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x555a01927fe0]:   store i8 %19, i8* %20, align 1, !tbaa !1279 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928060]:   %21 = xor i64 %7, 16 {
	[0x555a01888690]:  %22 = xor i64 %8, 16
	[0x555a0188f030]:  %67 = xor i64 %56, 16
	}

[0x555a019280e0]:   %22 = xor i64 %21, %10 {
	[0x555a01888fc0]:  %35 = xor i64 %31, %34
	[0x555a0188d590]:  %68 = xor i64 %67, %58
	[0x555a01891d20]:  %77 = xor i64 %74, %76
	[0x555a018fb440]:  %23 = xor i64 %22, %11
	}

[0x555a01928160]:   %23 = lshr i64 %22, 4 {
	[0x555a01888540]:  %24 = lshr i64 %23, 4
	[0x555a0188ecb0]:  %69 = lshr i64 %68, 4
	}

[0x555a019281c8]:   %24 = trunc i64 %23 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01928240]:   %25 = and i8 %24, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	[0x555a0188d440]:  %71 = and i8 %70, 1
	[0x555a018fa460]:  %19 = and i8 %18, 1
	[0x555a018fa5b0]:  %26 = and i8 %25, 1
	}

[0x555a019282f0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x555a0188ba60]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x555a01928380]:   store i8 %25, i8* %26, align 1, !tbaa !1280 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928400]:   %27 = icmp eq i64 %10, 0 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a01928468]:   %28 = zext i1 %27 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a01928510]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x555a0188b7f0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x555a019285a0]:   store i8 %28, i8* %29, align 1, !tbaa !1281 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928620]:   %30 = lshr i64 %10, 63 {
	[0x555a01889f20]:  %31 = lshr i64 %11, 63
	[0x555a01891e80]:  %76 = lshr i64 %56, 63
	[0x555a018921b0]:  %74 = lshr i64 %58, 63
	[0x555a018fa7b0]:  %34 = lshr i64 %8, 63
	}

[0x555a01928688]:   %31 = trunc i64 %30 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01928730]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x555a0188a2e0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x555a019287c0]:   store i8 %31, i8* %32, align 1, !tbaa !1282 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928840]:   %33 = lshr i64 %7, 63 {
	[0x555a01889f20]:  %31 = lshr i64 %11, 63
	[0x555a01891e80]:  %76 = lshr i64 %56, 63
	[0x555a018921b0]:  %74 = lshr i64 %58, 63
	[0x555a018fa7b0]:  %34 = lshr i64 %8, 63
	}

[0x555a019288c0]:   %34 = xor i64 %30, %33 {
	[0x555a01888fc0]:  %35 = xor i64 %31, %34
	[0x555a0188d590]:  %68 = xor i64 %67, %58
	[0x555a01891d20]:  %77 = xor i64 %74, %76
	[0x555a018fb440]:  %23 = xor i64 %22, %11
	}

[0x555a01928940]:   %35 = add nuw nsw i64 %34, %33 {
	[0x555a01891bc0]:  %78 = add nuw nsw i64 %77, %74
	[0x555a018fbff0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x555a019289c0]:   %36 = icmp eq i64 %35, 2 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a01928a28]:   %37 = zext i1 %36 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a01928ad0]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x555a01887180]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x555a01928b60]:   store i8 %37, i8* %38, align 1, !tbaa !1283 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928be0]:   %39 = add i64 %6, -16 {
	[0x555a0188a9c0]:  %40 = add i64 %7, -16
	}

[0x555a01928c48]:   %40 = load i64, i64* %RDI, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01928cc0]:   %41 = add i64 %9, 11 {
	[0x555a0188b080]:  %52 = add i64 %46, 11
	[0x555a018fc320]:  %42 = add i64 %10, 11
	}

[0x555a01928d40]:   store i64 %41, i64* %PC, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928da8]:   %42 = inttoptr i64 %39 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a01928e20]:   store i64 %40, i64* %42, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01928e88]:   %43 = load i64, i64* %RBP, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01928f00]:   %44 = add i64 %43, -8 {
	[0x555a01886ce0]:  %8 = add i64 %7, -8
	[0x555a0188a700]:  %45 = add i64 %44, -8
	[0x555a0188adc0]:  %54 = add i64 %53, -8
	}

[0x555a01928f68]:   %45 = load i64, i64* %PC, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01928fe0]:   %46 = add i64 %45, 4 {
	[0x555a0188ac70]:  %47 = add i64 %46, 4
	}

[0x555a01929060]:   store i64 %46, i64* %PC, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a019290c8]:   %47 = inttoptr i64 %44 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a01929128]:   %48 = load i64, i64* %47, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a019291a0]:   store i64 %48, i64* %RDI, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01929220]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a019292e0]:   %49 = add i64 %45, 68 {
	[0x555a0188b1e0]:  %51 = add i64 %46, 68
	}

[0x555a01929360]:   %50 = add i64 %45, 11 {
	[0x555a0188b080]:  %52 = add i64 %46, 11
	[0x555a018fc320]:  %42 = add i64 %10, 11
	}

[0x555a019293c8]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01929440]:   %52 = add i64 %51, -8 {
	[0x555a01886ce0]:  %8 = add i64 %7, -8
	[0x555a0188a700]:  %45 = add i64 %44, -8
	[0x555a0188adc0]:  %54 = add i64 %53, -8
	}

[0x555a019294a8]:   %53 = inttoptr i64 %52 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a01929520]:   store i64 %50, i64* %53, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a019295a0]:   store i64 %52, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01929620]:   store i64 %49, i64* %PC, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a019296f0]:   %54 = tail call %struct.Memory* @sub_400590_print_it(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2) {
	[0x555a01886aa0]:  %call2_400552 = tail call %struct.Memory.31* @sub_400590.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	[0x555a018ccbc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x555a019103a0]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x555a019297b8]:   %55 = load i64, i64* %RSP, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01929818]:   %56 = load i64, i64* %PC, align 8 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a01929890]:   %57 = add i64 %55, 16 {
	[0x555a0188d960]:  %58 = add i64 %56, 16
	}

[0x555a01929910]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01929990]:   %58 = icmp ugt i64 %55, -17 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a019299f8]:   %59 = zext i1 %58 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a01929a70]:   store i8 %59, i8* %13, align 1, !tbaa !1265 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01929ad8]:   %60 = trunc i64 %57 to i32 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01929b50]:   %61 = and i32 %60, 255 {
	[0x555a0188c0e0]:  %62 = and i32 %61, 255
	[0x555a018fb990]:  %16 = and i32 %15, 255
	}

[0x555a01929c08]:   %63 = trunc i32 %62 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01929c80]:   %64 = and i8 %63, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	[0x555a0188d440]:  %71 = and i8 %70, 1
	[0x555a018fa460]:  %19 = and i8 %18, 1
	[0x555a018fa5b0]:  %26 = and i8 %25, 1
	}

[0x555a01929d00]:   %65 = xor i8 %64, 1 {
	[0x555a0188d000]:  %66 = xor i8 %65, 1
	[0x555a018fb880]:  %20 = xor i8 %19, 1
	}

[0x555a01929d80]:   store i8 %65, i8* %20, align 1, !tbaa !1279 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a01929e00]:   %66 = xor i64 %55, 16 {
	[0x555a01888690]:  %22 = xor i64 %8, 16
	[0x555a0188f030]:  %67 = xor i64 %56, 16
	}

[0x555a01929e80]:   %67 = xor i64 %66, %57 {
	[0x555a01888fc0]:  %35 = xor i64 %31, %34
	[0x555a0188d590]:  %68 = xor i64 %67, %58
	[0x555a01891d20]:  %77 = xor i64 %74, %76
	[0x555a018fb440]:  %23 = xor i64 %22, %11
	}

[0x555a01929f00]:   %68 = lshr i64 %67, 4 {
	[0x555a01888540]:  %24 = lshr i64 %23, 4
	[0x555a0188ecb0]:  %69 = lshr i64 %68, 4
	}

[0x555a01929f68]:   %69 = trunc i64 %68 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01929fe0]:   %70 = and i8 %69, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	[0x555a0188d440]:  %71 = and i8 %70, 1
	[0x555a018fa460]:  %19 = and i8 %18, 1
	[0x555a018fa5b0]:  %26 = and i8 %25, 1
	}

[0x555a0192a060]:   store i8 %70, i8* %26, align 1, !tbaa !1280 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a0192a0e0]:   %71 = icmp eq i64 %57, 0 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a0192a148]:   %72 = zext i1 %71 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a0192a1c0]:   store i8 %72, i8* %29, align 1, !tbaa !1281 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a0192a240]:   %73 = lshr i64 %57, 63 {
	[0x555a01889f20]:  %31 = lshr i64 %11, 63
	[0x555a01891e80]:  %76 = lshr i64 %56, 63
	[0x555a018921b0]:  %74 = lshr i64 %58, 63
	[0x555a018fa7b0]:  %34 = lshr i64 %8, 63
	}

[0x555a0192a2a8]:   %74 = trunc i64 %73 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a0192a320]:   store i8 %74, i8* %32, align 1, !tbaa !1282 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a0192b3e0]:   store i64 %86, i64* %PC, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a0192b460]:   %87 = add i64 %55, 32 {
	[0x555a018947c0]:  %88 = add i64 %56, 32
	}

[0x555a0192b4e0]:   store i64 %87, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a0192b548]:   ret %struct.Memory* %54 {
	[0x555a01889dc8]:  ret %struct.Memory.31* %call2_400552
	}

[0x555a0193d838]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x555a0190f8d8]:  %50 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x555a018fd6b8]:   %44 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555a01875b08]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x555a01875e10]:   store i64 %4, i64* %8, align 8


Uprime Matches: [0x555a018867c0]:   store i64 %4, i64* %9, align 8
[0x555a01886e30]:   store i64 %5, i64* %3, align 8
[0x555a01887070]:   store i8 %13, i8* %14, align 1
[0x555a01889490]:   store i64 %87, i64* %3, align 8
[0x555a01889570]:   store i64 %85, i64* %3, align 8
[0x555a018898a0]:   store i64 %82, i64* %6, align 8
[0x555a018899c0]:   store i64 %84, i64* %RBP.i, align 8
[0x555a01889c80]:   store i64 %81, i64* %3, align 8
[0x555a0188a1d0]:   store i8 %26, i8* %27, align 1
[0x555a0188a860]:   store i64 %41, i64* %43, align 8
[0x555a0188b380]:   store i8 0, i8* %AL.i, align 1
[0x555a0188bce0]:   store i64 %47, i64* %3, align 8
[0x555a0188be30]:   store i64 %54, i64* %6, align 8
[0x555a0188c240]:   store i8 %60, i8* %14, align 1
[0x555a0188c670]:   store i64 %58, i64* %6, align 8
[0x555a0188cef0]:   store i64 %51, i64* %3, align 8
[0x555a0188d370]:   store i8 %66, i8* %21, align 1
[0x555a0188ea60]:   store i8 %71, i8* %27, align 1
[0x555a0188f7f0]:   store i8 %73, i8* %30, align 1
[0x555a0188ffb0]:   store i8 %80, i8* %39, align 1
[0x555a01892060]:   store i8 %75, i8* %33, align 1
[0x555a018951a0]:   store i64 %88, i64* %6, align 8
[0x555a018f5bb0]:   store i64 %11, i64* %6, align 8
[0x555a018fa290]:   store i64 %8, i64* %RBP.i, align 8
[0x555a018fb550]:   store i8 %20, i8* %21, align 1
[0x555a018fbbb0]:   store i8 %32, i8* %33, align 1
[0x555a018fbdd0]:   store i8 %29, i8* %30, align 1
[0x555a018fc210]:   store i64 %42, i64* %3, align 8
[0x555a018fc430]:   store i8 %38, i8* %39, align 1
[0x555a018fc580]:   store i64 %49, i64* %RDI.i10, align 8
[0x555a018fc650]:   store i64 %52, i64* %55, align 8


Adj: [0x555a0188a700]:   %45 = add i64 %44, -8


Removing: [0x555a0187d3c8]:   %53 = load i64, i64* %6, align 8
From the pot matches of: [0x555a01875cb8]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x555a01928be0]:   %39 = add i64 %6, -16


Uprime Matches: [0x555a0188a9c0]:   %40 = add i64 %7, -16


Adj: [0x555a0188adc0]:   %54 = add i64 %53, -8


Removing: [0x555a018ff208]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x555a01875cb8]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x555a01928be0]:   %39 = add i64 %6, -16


Uprime Matches: [0x555a0188a9c0]:   %40 = add i64 %7, -16


Adj: [0x555a01889b20]:   %82 = add i64 %56, 24
[0x555a0188c470]:   %59 = icmp ugt i64 %56, -17
[0x555a0188d960]:   %58 = add i64 %56, 16
[0x555a0188f030]:   %67 = xor i64 %56, 16
[0x555a01891e80]:   %76 = lshr i64 %56, 63
[0x555a018947c0]:   %88 = add i64 %56, 32


Removing: [0x555a018ff0d8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x555a01875e78]:   %9 = load i64, i64* %PC, align 8


Uprime : [0x555a01928cc0]:   %41 = add i64 %9, 11


Uprime Matches: [0x555a0188b080]:   %52 = add i64 %46, 11
[0x555a018fc320]:   %42 = add i64 %10, 11


Adj: [0x555a01889750]:   %85 = add i64 %57, 6
[0x555a01892470]:   %81 = add i64 %57, 5


Removing: [0x555a018f8758]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a018fb990]:   %16 = and i32 %15, 255


Removing: [0x555a018fee78]:   %61 = trunc i64 %58 to i32
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a0188c0e0]:   %62 = and i32 %61, 255


Removing: [0x555a018ff338]:   %75 = trunc i64 %74 to i8
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a01892060]:   store i8 %75, i8* %33, align 1


Removing: [0x555a0192b6b8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a018fbbb0]:   store i8 %32, i8* %33, align 1


Removing: [0x555a0188d440]:   %71 = and i8 %70, 1
From the pot matches of: [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime : [0x555a01927ea0]:   %19 = xor i8 %18, 1


Uprime Matches: [0x555a0188d000]:   %66 = xor i8 %65, 1
[0x555a018fb880]:   %20 = xor i8 %19, 1


Adj: [0x555a0188ea60]:   store i8 %71, i8* %27, align 1


Removing: [0x555a018fa5b0]:   %26 = and i8 %25, 1
From the pot matches of: [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime : [0x555a01927ea0]:   %19 = xor i8 %18, 1


Uprime Matches: [0x555a0188d000]:   %66 = xor i8 %65, 1
[0x555a018fb880]:   %20 = xor i8 %19, 1


Adj: [0x555a0188a1d0]:   store i8 %26, i8* %27, align 1


Removing: [0x555a0188b080]:   %52 = add i64 %46, 11
From the pot matches of: [0x555a01928cc0]:   %41 = add i64 %9, 11


Uprime : [0x555a01928d40]:   store i64 %41, i64* %PC, align 8


Uprime Matches: [0x555a01886e30]:   store i64 %5, i64* %3, align 8
[0x555a01889490]:   store i64 %87, i64* %3, align 8
[0x555a01889570]:   store i64 %85, i64* %3, align 8
[0x555a01889c80]:   store i64 %81, i64* %3, align 8
[0x555a0188bce0]:   store i64 %47, i64* %3, align 8
[0x555a0188cef0]:   store i64 %51, i64* %3, align 8
[0x555a018fc210]:   store i64 %42, i64* %3, align 8


Adj: [0x555a018fc650]:   store i64 %52, i64* %55, align 8


Removing: [0x555a018e5bc8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555a01928e88]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x555a01928f00]:   %44 = add i64 %43, -8


Uprime Matches: [0x555a01886ce0]:   %8 = add i64 %7, -8
[0x555a0188a700]:   %45 = add i64 %44, -8
[0x555a0188adc0]:   %54 = add i64 %53, -8


Adj: [0x555a018867c0]:   store i64 %4, i64* %9, align 8


Removing: [0x555a018ff0d8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x555a01928f68]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x555a01929360]:   %50 = add i64 %45, 11


Uprime Matches: [0x555a0188b080]:   %52 = add i64 %46, 11
[0x555a018fc320]:   %42 = add i64 %10, 11


Adj: [0x555a01889750]:   %85 = add i64 %57, 6
[0x555a01892470]:   %81 = add i64 %57, 5


Removing: [0x555a018b30e8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x555a01928f68]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x555a019292e0]:   %49 = add i64 %45, 68


Uprime Matches: [0x555a0188b1e0]:   %51 = add i64 %46, 68


Adj: [0x555a018fc320]:   %42 = add i64 %10, 11


Removing: [0x555a018ff208]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x555a019293c8]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x555a01929440]:   %52 = add i64 %51, -8


Uprime Matches: [0x555a01886ce0]:   %8 = add i64 %7, -8
[0x555a0188a700]:   %45 = add i64 %44, -8
[0x555a0188adc0]:   %54 = add i64 %53, -8


Adj: [0x555a01889b20]:   %82 = add i64 %56, 24
[0x555a0188c470]:   %59 = icmp ugt i64 %56, -17
[0x555a0188d960]:   %58 = add i64 %56, 16
[0x555a0188f030]:   %67 = xor i64 %56, 16
[0x555a01891e80]:   %76 = lshr i64 %56, 63
[0x555a018947c0]:   %88 = add i64 %56, 32


Removing: [0x555a01886ce0]:   %8 = add i64 %7, -8
From the pot matches of: [0x555a01929440]:   %52 = add i64 %51, -8


Uprime : [0x555a019295a0]:   store i64 %52, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x555a018898a0]:   store i64 %82, i64* %6, align 8
[0x555a0188be30]:   store i64 %54, i64* %6, align 8
[0x555a0188c670]:   store i64 %58, i64* %6, align 8
[0x555a018951a0]:   store i64 %88, i64* %6, align 8
[0x555a018f5bb0]:   store i64 %11, i64* %6, align 8


Adj: [0x555a01888690]:   %22 = xor i64 %8, 16
[0x555a018e5f28]:   %9 = inttoptr i64 %8 to i64*
[0x555a018fa290]:   store i64 %8, i64* %RBP.i, align 8
[0x555a018fa7b0]:   %34 = lshr i64 %8, 63
[0x555a01948000]:   %12 = icmp ult i64 %8, 16


Removing: [0x555a0187d3c8]:   %53 = load i64, i64* %6, align 8
From the pot matches of: [0x555a019297b8]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x555a0192b460]:   %87 = add i64 %55, 32


Uprime Matches: [0x555a018947c0]:   %88 = add i64 %56, 32


Adj: [0x555a0188adc0]:   %54 = add i64 %53, -8


Removing: [0x555a018e5d98]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x555a019297b8]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x555a0192b460]:   %87 = add i64 %55, 32


Uprime Matches: [0x555a018947c0]:   %88 = add i64 %56, 32


Adj: [0x555a01886ce0]:   %8 = add i64 %7, -8
[0x555a0188a9c0]:   %40 = add i64 %7, -16
[0x555a018f8850]:   %11 = add i64 %7, -24


Removing: [0x555a018b30e8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x555a01929818]:   %56 = load i64, i64* %PC, align 8


Uprime : [0x555a018cfec0]:   %84 = add i64 %56, 6


Uprime Matches: [0x555a01889750]:   %85 = add i64 %57, 6


Adj: [0x555a018fc320]:   %42 = add i64 %10, 11


Removing: [0x555a018fd458]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x555a01929818]:   %56 = load i64, i64* %PC, align 8


Uprime : [0x555a018cfec0]:   %84 = add i64 %56, 6


Uprime Matches: [0x555a01889750]:   %85 = add i64 %57, 6


Adj: [0x555a0188ac70]:   %47 = add i64 %46, 4
[0x555a0188b080]:   %52 = add i64 %46, 11
[0x555a0188b1e0]:   %51 = add i64 %46, 68


Removing: [0x555a018f8758]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a018fb990]:   %16 = and i32 %15, 255


Removing: [0x555a018fee78]:   %61 = trunc i64 %58 to i32
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a0188c0e0]:   %62 = and i32 %61, 255


Removing: [0x555a018ff338]:   %75 = trunc i64 %74 to i8
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a01892060]:   store i8 %75, i8* %33, align 1


Removing: [0x555a0192b6b8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a0188d440]:   %71 = and i8 %70, 1
[0x555a018fa460]:   %19 = and i8 %18, 1
[0x555a018fa5b0]:   %26 = and i8 %25, 1


Adj: [0x555a018fbbb0]:   store i8 %32, i8* %33, align 1


Removing: [0x555a0188d440]:   %71 = and i8 %70, 1
From the pot matches of: [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime : [0x555a01929d00]:   %65 = xor i8 %64, 1


Uprime Matches: [0x555a0188d000]:   %66 = xor i8 %65, 1
[0x555a018fb880]:   %20 = xor i8 %19, 1


Adj: [0x555a0188ea60]:   store i8 %71, i8* %27, align 1


Removing: [0x555a018fa5b0]:   %26 = and i8 %25, 1
From the pot matches of: [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime : [0x555a01929d00]:   %65 = xor i8 %64, 1


Uprime Matches: [0x555a0188d000]:   %66 = xor i8 %65, 1
[0x555a018fb880]:   %20 = xor i8 %19, 1


Adj: [0x555a0188a1d0]:   store i8 %26, i8* %27, align 1

Round: 1

Removing: [0x555a018fd458]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x555a01875e78]:   %9 = load i64, i64* %PC, align 8


Uprime : [0x555a01928cc0]:   %41 = add i64 %9, 11


Uprime Matches: [0x555a018fc320]:   %42 = add i64 %10, 11


Adj: [0x555a0188ac70]:   %47 = add i64 %46, 4
[0x555a0188b080]:   %52 = add i64 %46, 11
[0x555a0188b1e0]:   %51 = add i64 %46, 68


Removing: [0x555a018f62a8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a018fa460]:   %19 = and i8 %18, 1


Adj: [0x555a018fa5b0]:   %26 = and i8 %25, 1


Removing: [0x555a018fe168]:   %70 = trunc i64 %69 to i8
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a018fa460]:   %19 = and i8 %18, 1


Adj: [0x555a0188d440]:   %71 = and i8 %70, 1


Removing: [0x555a018e5d98]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x555a019293c8]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x555a01929440]:   %52 = add i64 %51, -8


Uprime Matches: [0x555a0188adc0]:   %54 = add i64 %53, -8


Adj: [0x555a01886ce0]:   %8 = add i64 %7, -8
[0x555a0188a9c0]:   %40 = add i64 %7, -16
[0x555a018f8850]:   %11 = add i64 %7, -24


Removing: [0x555a018f62a8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a018fa460]:   %19 = and i8 %18, 1


Adj: [0x555a018fa5b0]:   %26 = and i8 %25, 1


Removing: [0x555a018fe168]:   %70 = trunc i64 %69 to i8
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1
[0x555a018fa460]:   %19 = and i8 %18, 1


Adj: [0x555a0188d440]:   %71 = and i8 %70, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x555a01875330]:   %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9 {
	[0x555a019103a0]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x555a018754e0]: %struct.State* %0 {
	[0x555a0188abc0]:%struct.State.0* %0
	}

[0x555a01875520]: i64 %1 {
	[0x555a0188b610]:i64 %1
	}

[0x555a01875560]: %struct.Memory* %2 {
	[0x555a0188b4b0]:%struct.Memory.31* %2
	}

[0x555a01875760]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x555a0187b420]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x555a01875850]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x555a01931220]:  %RDI.i10 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x555a01875960]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x555a01931410]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x555a01875a70]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x555a019315e0]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x555a01875b08]:   %4 = load i64, i64* %RBP, align 8 {
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x555a01875bd0]:   %5 = add i64 %1, 1 {
	[0x555a01941750]:  %5 = add i64 %1, 1
	}

[0x555a01875c50]:   store i64 %5, i64* %PC, align 8 {
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	}

[0x555a01875cb8]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	}

[0x555a01875d30]:   %7 = add i64 %6, -8 {
	[0x555a01886ce0]:  %8 = add i64 %7, -8
	}

[0x555a01875d98]:   %8 = inttoptr i64 %7 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	}

[0x555a01875e10]:   store i64 %4, i64* %8, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	}

[0x555a01875e78]:   %9 = load i64, i64* %PC, align 8 {
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	}

[0x555a01875ef0]:   store i64 %7, i64* %RBP, align 8, !tbaa !1261 {
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x555a01875f70]:   %10 = add i64 %6, -24 {
	[0x555a018f8850]:  %11 = add i64 %7, -24
	}

[0x555a01875ff0]:   store i64 %10, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	}

[0x555a01876070]:   %11 = icmp ult i64 %7, 16 {
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a018760d8]:   %12 = zext i1 %11 to i8 {
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	}

[0x555a01876180]:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x555a019d0fa0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x555a01876210]:   store i8 %12, i8* %13, align 1, !tbaa !1265 {
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	}

[0x555a018cf8a0]:   %75 = lshr i64 %55, 63 {
	[0x555a01891e80]:  %76 = lshr i64 %56, 63
	}

[0x555a018cf920]:   %76 = xor i64 %73, %75 {
	[0x555a01891d20]:  %77 = xor i64 %74, %76
	}

[0x555a018cf9a0]:   %77 = add nuw nsw i64 %76, %73 {
	[0x555a01891bc0]:  %78 = add nuw nsw i64 %77, %74
	}

[0x555a018cfa20]:   %78 = icmp eq i64 %77, 2 {
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	}

[0x555a018cfa88]:   %79 = zext i1 %78 to i8 {
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	}

[0x555a018cfb00]:   store i8 %79, i8* %38, align 1, !tbaa !1283 {
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	}

[0x555a018cfb80]:   %80 = add i64 %56, 5 {
	[0x555a01892470]:  %81 = add i64 %57, 5
	}

[0x555a018cfc00]:   store i64 %80, i64* %PC, align 8 {
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	}

[0x555a018cfc80]:   %81 = add i64 %55, 24 {
	[0x555a01889b20]:  %82 = add i64 %56, 24
	}

[0x555a018cfce8]:   %82 = inttoptr i64 %57 to i64* {
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a018cfd48]:   %83 = load i64, i64* %82, align 8 {
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a018cfdc0]:   store i64 %83, i64* %RBP, align 8, !tbaa !1261 {
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	}

[0x555a018cfe40]:   store i64 %81, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	}

[0x555a018cfec0]:   %84 = add i64 %56, 6 {
	[0x555a01889750]:  %85 = add i64 %57, 6
	}

[0x555a018cff40]:   store i64 %84, i64* %PC, align 8 {
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	}

[0x555a018cffa8]:   %85 = inttoptr i64 %81 to i64* {
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	}

[0x555a018d0008]:   %86 = load i64, i64* %85, align 8 {
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	}

[0x555a018dd948]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x555a018fc8b8]:  %AL.i = bitcast %union.anon.4* %50 to i8*
	}

[0x555a01927bf8]:   %14 = trunc i64 %10 to i32 {
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	}

[0x555a01927c70]:   %15 = and i32 %14, 255 {
	[0x555a018fb990]:  %16 = and i32 %15, 255
	}

[0x555a01927d30]:   %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9 {
	[0x555a018ccbc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x555a01927da8]:   %17 = trunc i32 %16 to i8 {
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	}

[0x555a01927e20]:   %18 = and i8 %17, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	[0x555a018fa460]:  %19 = and i8 %18, 1
	}

[0x555a01927ea0]:   %19 = xor i8 %18, 1 {
	[0x555a0188d000]:  %66 = xor i8 %65, 1
	[0x555a018fb880]:  %20 = xor i8 %19, 1
	}

[0x555a01927f50]:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x555a018f1f10]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x555a01927fe0]:   store i8 %19, i8* %20, align 1, !tbaa !1279 {
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	}

[0x555a01928060]:   %21 = xor i64 %7, 16 {
	[0x555a01888690]:  %22 = xor i64 %8, 16
	}

[0x555a019280e0]:   %22 = xor i64 %21, %10 {
	[0x555a018fb440]:  %23 = xor i64 %22, %11
	}

[0x555a01928160]:   %23 = lshr i64 %22, 4 {
	[0x555a01888540]:  %24 = lshr i64 %23, 4
	}

[0x555a019281c8]:   %24 = trunc i64 %23 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	}

[0x555a01928240]:   %25 = and i8 %24, 1 {
	[0x555a018fa5b0]:  %26 = and i8 %25, 1
	}

[0x555a019282f0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x555a0188ba60]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x555a01928380]:   store i8 %25, i8* %26, align 1, !tbaa !1280 {
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	}

[0x555a01928400]:   %27 = icmp eq i64 %10, 0 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	}

[0x555a01928468]:   %28 = zext i1 %27 to i8 {
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a01928510]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x555a0188b7f0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x555a019285a0]:   store i8 %28, i8* %29, align 1, !tbaa !1281 {
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	}

[0x555a01928620]:   %30 = lshr i64 %10, 63 {
	[0x555a01889f20]:  %31 = lshr i64 %11, 63
	}

[0x555a01928688]:   %31 = trunc i64 %30 to i8 {
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01928730]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x555a0188a2e0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x555a019287c0]:   store i8 %31, i8* %32, align 1, !tbaa !1282 {
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	}

[0x555a01928840]:   %33 = lshr i64 %7, 63 {
	[0x555a018fa7b0]:  %34 = lshr i64 %8, 63
	}

[0x555a019288c0]:   %34 = xor i64 %30, %33 {
	[0x555a01888fc0]:  %35 = xor i64 %31, %34
	}

[0x555a01928940]:   %35 = add nuw nsw i64 %34, %33 {
	[0x555a018fbff0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x555a019289c0]:   %36 = icmp eq i64 %35, 2 {
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	}

[0x555a01928a28]:   %37 = zext i1 %36 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	}

[0x555a01928ad0]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x555a01887180]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x555a01928b60]:   store i8 %37, i8* %38, align 1, !tbaa !1283 {
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	}

[0x555a01928be0]:   %39 = add i64 %6, -16 {
	[0x555a0188a9c0]:  %40 = add i64 %7, -16
	}

[0x555a01928c48]:   %40 = load i64, i64* %RDI, align 8 {
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	}

[0x555a01928cc0]:   %41 = add i64 %9, 11 {
	[0x555a018fc320]:  %42 = add i64 %10, 11
	}

[0x555a01928d40]:   store i64 %41, i64* %PC, align 8 {
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	}

[0x555a01928da8]:   %42 = inttoptr i64 %39 to i64* {
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	}

[0x555a01928e20]:   store i64 %40, i64* %42, align 8 {
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	}

[0x555a01928e88]:   %43 = load i64, i64* %RBP, align 8 {
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x555a01928f00]:   %44 = add i64 %43, -8 {
	[0x555a0188a700]:  %45 = add i64 %44, -8
	}

[0x555a01928f68]:   %45 = load i64, i64* %PC, align 8 {
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	}

[0x555a01928fe0]:   %46 = add i64 %45, 4 {
	[0x555a0188ac70]:  %47 = add i64 %46, 4
	}

[0x555a01929060]:   store i64 %46, i64* %PC, align 8 {
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	}

[0x555a019290c8]:   %47 = inttoptr i64 %44 to i64* {
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	}

[0x555a01929128]:   %48 = load i64, i64* %47, align 8 {
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	}

[0x555a019291a0]:   store i64 %48, i64* %RDI, align 8, !tbaa !1261 {
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	}

[0x555a01929220]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	}

[0x555a019292e0]:   %49 = add i64 %45, 68 {
	[0x555a0188b1e0]:  %51 = add i64 %46, 68
	}

[0x555a01929360]:   %50 = add i64 %45, 11 {
	[0x555a0188b080]:  %52 = add i64 %46, 11
	}

[0x555a019293c8]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	}

[0x555a01929440]:   %52 = add i64 %51, -8 {
	[0x555a0188adc0]:  %54 = add i64 %53, -8
	}

[0x555a019294a8]:   %53 = inttoptr i64 %52 to i64* {
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	}

[0x555a01929520]:   store i64 %50, i64* %53, align 8 {
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a019295a0]:   store i64 %52, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	}

[0x555a01929620]:   store i64 %49, i64* %PC, align 8, !tbaa !1261 {
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	}

[0x555a019296f0]:   %54 = tail call %struct.Memory* @sub_400590_print_it(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2) {
	[0x555a01886aa0]:  %call2_400552 = tail call %struct.Memory.31* @sub_400590.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	}

[0x555a019297b8]:   %55 = load i64, i64* %RSP, align 8 {
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	}

[0x555a01929818]:   %56 = load i64, i64* %PC, align 8 {
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	}

[0x555a01929890]:   %57 = add i64 %55, 16 {
	[0x555a0188d960]:  %58 = add i64 %56, 16
	}

[0x555a01929910]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	}

[0x555a01929990]:   %58 = icmp ugt i64 %55, -17 {
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	}

[0x555a019299f8]:   %59 = zext i1 %58 to i8 {
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	}

[0x555a01929a70]:   store i8 %59, i8* %13, align 1, !tbaa !1265 {
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	}

[0x555a01929ad8]:   %60 = trunc i64 %57 to i32 {
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	}

[0x555a01929b50]:   %61 = and i32 %60, 255 {
	[0x555a0188c0e0]:  %62 = and i32 %61, 255
	}

[0x555a01929c08]:   %63 = trunc i32 %62 to i8 {
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	}

[0x555a01929c80]:   %64 = and i8 %63, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	[0x555a018fa460]:  %19 = and i8 %18, 1
	}

[0x555a01929d00]:   %65 = xor i8 %64, 1 {
	[0x555a0188d000]:  %66 = xor i8 %65, 1
	[0x555a018fb880]:  %20 = xor i8 %19, 1
	}

[0x555a01929d80]:   store i8 %65, i8* %20, align 1, !tbaa !1279 {
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	}

[0x555a01929e00]:   %66 = xor i64 %55, 16 {
	[0x555a0188f030]:  %67 = xor i64 %56, 16
	}

[0x555a01929e80]:   %67 = xor i64 %66, %57 {
	[0x555a0188d590]:  %68 = xor i64 %67, %58
	}

[0x555a01929f00]:   %68 = lshr i64 %67, 4 {
	[0x555a0188ecb0]:  %69 = lshr i64 %68, 4
	}

[0x555a01929f68]:   %69 = trunc i64 %68 to i8 {
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	}

[0x555a01929fe0]:   %70 = and i8 %69, 1 {
	[0x555a0188d440]:  %71 = and i8 %70, 1
	}

[0x555a0192a060]:   store i8 %70, i8* %26, align 1, !tbaa !1280 {
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	}

[0x555a0192a0e0]:   %71 = icmp eq i64 %57, 0 {
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	}

[0x555a0192a148]:   %72 = zext i1 %71 to i8 {
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	}

[0x555a0192a1c0]:   store i8 %72, i8* %29, align 1, !tbaa !1281 {
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	}

[0x555a0192a240]:   %73 = lshr i64 %57, 63 {
	[0x555a018921b0]:  %74 = lshr i64 %58, 63
	}

[0x555a0192a2a8]:   %74 = trunc i64 %73 to i8 {
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	}

[0x555a0192a320]:   store i8 %74, i8* %32, align 1, !tbaa !1282 {
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	}

[0x555a0192b3e0]:   store i64 %86, i64* %PC, align 8, !tbaa !1261 {
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	}

[0x555a0192b460]:   %87 = add i64 %55, 32 {
	[0x555a018947c0]:  %88 = add i64 %56, 32
	}

[0x555a0192b4e0]:   store i64 %87, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	}

[0x555a0192b548]:   ret %struct.Memory* %54 {
	[0x555a01889dc8]:  ret %struct.Memory.31* %call2_400552
	}

[0x555a0193d838]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x555a0190f8d8]:  %50 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x555a018755a0]: block_400540 {
	[0x555a01884f60]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x555a0188d000]:   %66 = xor i8 %65, 1
From the pot matches of: [0x555a01927ea0]:   %19 = xor i8 %18, 1


Uprime : [0x555a01927fe0]:   store i8 %19, i8* %20, align 1, !tbaa !1279


Uprime Matches: [0x555a018fb550]:   store i8 %20, i8* %21, align 1


Adj: [0x555a0188d370]:   store i8 %66, i8* %21, align 1


Removing: [0x555a018fb880]:   %20 = xor i8 %19, 1
From the pot matches of: [0x555a01929d00]:   %65 = xor i8 %64, 1


Uprime : [0x555a01929d80]:   store i8 %65, i8* %20, align 1, !tbaa !1279


Uprime Matches: [0x555a0188d370]:   store i8 %66, i8* %21, align 1


Adj: [0x555a018fb550]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x555a0188bf90]:   %65 = and i8 %64, 1
From the pot matches of: [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime : [0x555a01927ea0]:   %19 = xor i8 %18, 1


Uprime Matches: [0x555a018fb880]:   %20 = xor i8 %19, 1


Adj: [0x555a0188d000]:   %66 = xor i8 %65, 1


Removing: [0x555a018fa460]:   %19 = and i8 %18, 1
From the pot matches of: [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime : [0x555a01929d00]:   %65 = xor i8 %64, 1


Uprime Matches: [0x555a0188d000]:   %66 = xor i8 %65, 1


Adj: [0x555a018fb880]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x555a018fec18]:   %64 = trunc i32 %63 to i8
From the pot matches of: [0x555a01927da8]:   %17 = trunc i32 %16 to i8


Uprime : [0x555a01927e20]:   %18 = and i8 %17, 1


Uprime Matches: [0x555a018fa460]:   %19 = and i8 %18, 1


Adj: [0x555a0188bf90]:   %65 = and i8 %64, 1


Removing: [0x555a018f66d8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x555a01929c08]:   %63 = trunc i32 %62 to i8


Uprime : [0x555a01929c80]:   %64 = and i8 %63, 1


Uprime Matches: [0x555a0188bf90]:   %65 = and i8 %64, 1


Adj: [0x555a018fa460]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x555a01875330]:   %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9 {
	[0x555a019103a0]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x555a018754e0]: %struct.State* %0 {
	[0x555a0188abc0]:%struct.State.0* %0
	}

[0x555a01875520]: i64 %1 {
	[0x555a0188b610]:i64 %1
	}

[0x555a01875560]: %struct.Memory* %2 {
	[0x555a0188b4b0]:%struct.Memory.31* %2
	}

[0x555a01875760]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x555a0187b420]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x555a01875850]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x555a01931220]:  %RDI.i10 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x555a01875960]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x555a01931410]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x555a01875a70]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x555a019315e0]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x555a01875b08]:   %4 = load i64, i64* %RBP, align 8 {
	[0x555a018e5bc8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x555a01875bd0]:   %5 = add i64 %1, 1 {
	[0x555a01941750]:  %5 = add i64 %1, 1
	}

[0x555a01875c50]:   store i64 %5, i64* %PC, align 8 {
	[0x555a01886e30]:  store i64 %5, i64* %3, align 8
	}

[0x555a01875cb8]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018e5d98]:  %7 = load i64, i64* %6, align 8
	}

[0x555a01875d30]:   %7 = add i64 %6, -8 {
	[0x555a01886ce0]:  %8 = add i64 %7, -8
	}

[0x555a01875d98]:   %8 = inttoptr i64 %7 to i64* {
	[0x555a018e5f28]:  %9 = inttoptr i64 %8 to i64*
	}

[0x555a01875e10]:   store i64 %4, i64* %8, align 8 {
	[0x555a018867c0]:  store i64 %4, i64* %9, align 8
	}

[0x555a01875e78]:   %9 = load i64, i64* %PC, align 8 {
	[0x555a018b30e8]:  %10 = load i64, i64* %3, align 8
	}

[0x555a01875ef0]:   store i64 %7, i64* %RBP, align 8, !tbaa !1261 {
	[0x555a018fa290]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x555a01875f70]:   %10 = add i64 %6, -24 {
	[0x555a018f8850]:  %11 = add i64 %7, -24
	}

[0x555a01875ff0]:   store i64 %10, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018f5bb0]:  store i64 %11, i64* %6, align 8
	}

[0x555a01876070]:   %11 = icmp ult i64 %7, 16 {
	[0x555a01948000]:  %12 = icmp ult i64 %8, 16
	}

[0x555a018760d8]:   %12 = zext i1 %11 to i8 {
	[0x555a018f8488]:  %13 = zext i1 %12 to i8
	}

[0x555a01876180]:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x555a019d0fa0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x555a01876210]:   store i8 %12, i8* %13, align 1, !tbaa !1265 {
	[0x555a01887070]:  store i8 %13, i8* %14, align 1
	}

[0x555a018cf8a0]:   %75 = lshr i64 %55, 63 {
	[0x555a01891e80]:  %76 = lshr i64 %56, 63
	}

[0x555a018cf920]:   %76 = xor i64 %73, %75 {
	[0x555a01891d20]:  %77 = xor i64 %74, %76
	}

[0x555a018cf9a0]:   %77 = add nuw nsw i64 %76, %73 {
	[0x555a01891bc0]:  %78 = add nuw nsw i64 %77, %74
	}

[0x555a018cfa20]:   %78 = icmp eq i64 %77, 2 {
	[0x555a01891a60]:  %79 = icmp eq i64 %78, 2
	}

[0x555a018cfa88]:   %79 = zext i1 %78 to i8 {
	[0x555a01901068]:  %80 = zext i1 %79 to i8
	}

[0x555a018cfb00]:   store i8 %79, i8* %38, align 1, !tbaa !1283 {
	[0x555a0188ffb0]:  store i8 %80, i8* %39, align 1
	}

[0x555a018cfb80]:   %80 = add i64 %56, 5 {
	[0x555a01892470]:  %81 = add i64 %57, 5
	}

[0x555a018cfc00]:   store i64 %80, i64* %PC, align 8 {
	[0x555a01889c80]:  store i64 %81, i64* %3, align 8
	}

[0x555a018cfc80]:   %81 = add i64 %55, 24 {
	[0x555a01889b20]:  %82 = add i64 %56, 24
	}

[0x555a018cfce8]:   %82 = inttoptr i64 %57 to i64* {
	[0x555a01900f38]:  %83 = inttoptr i64 %58 to i64*
	}

[0x555a018cfd48]:   %83 = load i64, i64* %82, align 8 {
	[0x555a01900e08]:  %84 = load i64, i64* %83, align 8
	}

[0x555a018cfdc0]:   store i64 %83, i64* %RBP, align 8, !tbaa !1261 {
	[0x555a018899c0]:  store i64 %84, i64* %RBP.i, align 8
	}

[0x555a018cfe40]:   store i64 %81, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018898a0]:  store i64 %82, i64* %6, align 8
	}

[0x555a018cfec0]:   %84 = add i64 %56, 6 {
	[0x555a01889750]:  %85 = add i64 %57, 6
	}

[0x555a018cff40]:   store i64 %84, i64* %PC, align 8 {
	[0x555a01889570]:  store i64 %85, i64* %3, align 8
	}

[0x555a018cffa8]:   %85 = inttoptr i64 %81 to i64* {
	[0x555a01900ba8]:  %86 = inttoptr i64 %82 to i64*
	}

[0x555a018d0008]:   %86 = load i64, i64* %85, align 8 {
	[0x555a01900a78]:  %87 = load i64, i64* %86, align 8
	}

[0x555a018dd948]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x555a018fc8b8]:  %AL.i = bitcast %union.anon.4* %50 to i8*
	}

[0x555a01927bf8]:   %14 = trunc i64 %10 to i32 {
	[0x555a018f8758]:  %15 = trunc i64 %11 to i32
	}

[0x555a01927c70]:   %15 = and i32 %14, 255 {
	[0x555a018fb990]:  %16 = and i32 %15, 255
	}

[0x555a01927d30]:   %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9 {
	[0x555a018ccbc0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x555a01927da8]:   %17 = trunc i32 %16 to i8 {
	[0x555a018f66d8]:  %18 = trunc i32 %17 to i8
	}

[0x555a01927e20]:   %18 = and i8 %17, 1 {
	[0x555a018fa460]:  %19 = and i8 %18, 1
	}

[0x555a01927ea0]:   %19 = xor i8 %18, 1 {
	[0x555a018fb880]:  %20 = xor i8 %19, 1
	}

[0x555a01927f50]:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x555a018f1f10]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x555a01927fe0]:   store i8 %19, i8* %20, align 1, !tbaa !1279 {
	[0x555a018fb550]:  store i8 %20, i8* %21, align 1
	}

[0x555a01928060]:   %21 = xor i64 %7, 16 {
	[0x555a01888690]:  %22 = xor i64 %8, 16
	}

[0x555a019280e0]:   %22 = xor i64 %21, %10 {
	[0x555a018fb440]:  %23 = xor i64 %22, %11
	}

[0x555a01928160]:   %23 = lshr i64 %22, 4 {
	[0x555a01888540]:  %24 = lshr i64 %23, 4
	}

[0x555a019281c8]:   %24 = trunc i64 %23 to i8 {
	[0x555a018f62a8]:  %25 = trunc i64 %24 to i8
	}

[0x555a01928240]:   %25 = and i8 %24, 1 {
	[0x555a018fa5b0]:  %26 = and i8 %25, 1
	}

[0x555a019282f0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x555a0188ba60]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x555a01928380]:   store i8 %25, i8* %26, align 1, !tbaa !1280 {
	[0x555a0188a1d0]:  store i8 %26, i8* %27, align 1
	}

[0x555a01928400]:   %27 = icmp eq i64 %10, 0 {
	[0x555a0188a070]:  %28 = icmp eq i64 %11, 0
	}

[0x555a01928468]:   %28 = zext i1 %27 to i8 {
	[0x555a0192f6c8]:  %29 = zext i1 %28 to i8
	}

[0x555a01928510]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x555a0188b7f0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x555a019285a0]:   store i8 %28, i8* %29, align 1, !tbaa !1281 {
	[0x555a018fbdd0]:  store i8 %29, i8* %30, align 1
	}

[0x555a01928620]:   %30 = lshr i64 %10, 63 {
	[0x555a01889f20]:  %31 = lshr i64 %11, 63
	}

[0x555a01928688]:   %31 = trunc i64 %30 to i8 {
	[0x555a0192b6b8]:  %32 = trunc i64 %31 to i8
	}

[0x555a01928730]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x555a0188a2e0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x555a019287c0]:   store i8 %31, i8* %32, align 1, !tbaa !1282 {
	[0x555a018fbbb0]:  store i8 %32, i8* %33, align 1
	}

[0x555a01928840]:   %33 = lshr i64 %7, 63 {
	[0x555a018fa7b0]:  %34 = lshr i64 %8, 63
	}

[0x555a019288c0]:   %34 = xor i64 %30, %33 {
	[0x555a01888fc0]:  %35 = xor i64 %31, %34
	}

[0x555a01928940]:   %35 = add nuw nsw i64 %34, %33 {
	[0x555a018fbff0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x555a019289c0]:   %36 = icmp eq i64 %35, 2 {
	[0x555a0188ab10]:  %37 = icmp eq i64 %36, 2
	}

[0x555a01928a28]:   %37 = zext i1 %36 to i8 {
	[0x555a0185d4a8]:  %38 = zext i1 %37 to i8
	}

[0x555a01928ad0]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x555a01887180]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x555a01928b60]:   store i8 %37, i8* %38, align 1, !tbaa !1283 {
	[0x555a018fc430]:  store i8 %38, i8* %39, align 1
	}

[0x555a01928be0]:   %39 = add i64 %6, -16 {
	[0x555a0188a9c0]:  %40 = add i64 %7, -16
	}

[0x555a01928c48]:   %40 = load i64, i64* %RDI, align 8 {
	[0x555a018f9848]:  %41 = load i64, i64* %RDI.i10, align 8
	}

[0x555a01928cc0]:   %41 = add i64 %9, 11 {
	[0x555a018fc320]:  %42 = add i64 %10, 11
	}

[0x555a01928d40]:   store i64 %41, i64* %PC, align 8 {
	[0x555a018fc210]:  store i64 %42, i64* %3, align 8
	}

[0x555a01928da8]:   %42 = inttoptr i64 %39 to i64* {
	[0x555a018fda48]:  %43 = inttoptr i64 %40 to i64*
	}

[0x555a01928e20]:   store i64 %40, i64* %42, align 8 {
	[0x555a0188a860]:  store i64 %41, i64* %43, align 8
	}

[0x555a01928e88]:   %43 = load i64, i64* %RBP, align 8 {
	[0x555a018fd6b8]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x555a01928f00]:   %44 = add i64 %43, -8 {
	[0x555a0188a700]:  %45 = add i64 %44, -8
	}

[0x555a01928f68]:   %45 = load i64, i64* %PC, align 8 {
	[0x555a018fd458]:  %46 = load i64, i64* %3, align 8
	}

[0x555a01928fe0]:   %46 = add i64 %45, 4 {
	[0x555a0188ac70]:  %47 = add i64 %46, 4
	}

[0x555a01929060]:   store i64 %46, i64* %PC, align 8 {
	[0x555a0188bce0]:  store i64 %47, i64* %3, align 8
	}

[0x555a019290c8]:   %47 = inttoptr i64 %44 to i64* {
	[0x555a018fcd78]:  %48 = inttoptr i64 %45 to i64*
	}

[0x555a01929128]:   %48 = load i64, i64* %47, align 8 {
	[0x555a018fc9e8]:  %49 = load i64, i64* %48, align 8
	}

[0x555a019291a0]:   store i64 %48, i64* %RDI, align 8, !tbaa !1261 {
	[0x555a018fc580]:  store i64 %49, i64* %RDI.i10, align 8
	}

[0x555a01929220]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x555a0188b380]:  store i8 0, i8* %AL.i, align 1
	}

[0x555a019292e0]:   %49 = add i64 %45, 68 {
	[0x555a0188b1e0]:  %51 = add i64 %46, 68
	}

[0x555a01929360]:   %50 = add i64 %45, 11 {
	[0x555a0188b080]:  %52 = add i64 %46, 11
	}

[0x555a019293c8]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0187d3c8]:  %53 = load i64, i64* %6, align 8
	}

[0x555a01929440]:   %52 = add i64 %51, -8 {
	[0x555a0188adc0]:  %54 = add i64 %53, -8
	}

[0x555a019294a8]:   %53 = inttoptr i64 %52 to i64* {
	[0x555a018fdf08]:  %55 = inttoptr i64 %54 to i64*
	}

[0x555a01929520]:   store i64 %50, i64* %53, align 8 {
	[0x555a018fc650]:  store i64 %52, i64* %55, align 8
	}

[0x555a019295a0]:   store i64 %52, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0188be30]:  store i64 %54, i64* %6, align 8
	}

[0x555a01929620]:   store i64 %49, i64* %PC, align 8, !tbaa !1261 {
	[0x555a0188cef0]:  store i64 %51, i64* %3, align 8
	}

[0x555a019296f0]:   %54 = tail call %struct.Memory* @sub_400590_print_it(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2) {
	[0x555a01886aa0]:  %call2_400552 = tail call %struct.Memory.31* @sub_400590.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	}

[0x555a019297b8]:   %55 = load i64, i64* %RSP, align 8 {
	[0x555a018ff208]:  %56 = load i64, i64* %6, align 8
	}

[0x555a01929818]:   %56 = load i64, i64* %PC, align 8 {
	[0x555a018ff0d8]:  %57 = load i64, i64* %3, align 8
	}

[0x555a01929890]:   %57 = add i64 %55, 16 {
	[0x555a0188d960]:  %58 = add i64 %56, 16
	}

[0x555a01929910]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a0188c670]:  store i64 %58, i64* %6, align 8
	}

[0x555a01929990]:   %58 = icmp ugt i64 %55, -17 {
	[0x555a0188c470]:  %59 = icmp ugt i64 %56, -17
	}

[0x555a019299f8]:   %59 = zext i1 %58 to i8 {
	[0x555a018fefa8]:  %60 = zext i1 %59 to i8
	}

[0x555a01929a70]:   store i8 %59, i8* %13, align 1, !tbaa !1265 {
	[0x555a0188c240]:  store i8 %60, i8* %14, align 1
	}

[0x555a01929ad8]:   %60 = trunc i64 %57 to i32 {
	[0x555a018fee78]:  %61 = trunc i64 %58 to i32
	}

[0x555a01929b50]:   %61 = and i32 %60, 255 {
	[0x555a0188c0e0]:  %62 = and i32 %61, 255
	}

[0x555a01929c08]:   %63 = trunc i32 %62 to i8 {
	[0x555a018fec18]:  %64 = trunc i32 %63 to i8
	}

[0x555a01929c80]:   %64 = and i8 %63, 1 {
	[0x555a0188bf90]:  %65 = and i8 %64, 1
	}

[0x555a01929d00]:   %65 = xor i8 %64, 1 {
	[0x555a0188d000]:  %66 = xor i8 %65, 1
	}

[0x555a01929d80]:   store i8 %65, i8* %20, align 1, !tbaa !1279 {
	[0x555a0188d370]:  store i8 %66, i8* %21, align 1
	}

[0x555a01929e00]:   %66 = xor i64 %55, 16 {
	[0x555a0188f030]:  %67 = xor i64 %56, 16
	}

[0x555a01929e80]:   %67 = xor i64 %66, %57 {
	[0x555a0188d590]:  %68 = xor i64 %67, %58
	}

[0x555a01929f00]:   %68 = lshr i64 %67, 4 {
	[0x555a0188ecb0]:  %69 = lshr i64 %68, 4
	}

[0x555a01929f68]:   %69 = trunc i64 %68 to i8 {
	[0x555a018fe168]:  %70 = trunc i64 %69 to i8
	}

[0x555a01929fe0]:   %70 = and i8 %69, 1 {
	[0x555a0188d440]:  %71 = and i8 %70, 1
	}

[0x555a0192a060]:   store i8 %70, i8* %26, align 1, !tbaa !1280 {
	[0x555a0188ea60]:  store i8 %71, i8* %27, align 1
	}

[0x555a0192a0e0]:   %71 = icmp eq i64 %57, 0 {
	[0x555a0188d110]:  %72 = icmp eq i64 %58, 0
	}

[0x555a0192a148]:   %72 = zext i1 %71 to i8 {
	[0x555a018fe038]:  %73 = zext i1 %72 to i8
	}

[0x555a0192a1c0]:   store i8 %72, i8* %29, align 1, !tbaa !1281 {
	[0x555a0188f7f0]:  store i8 %73, i8* %30, align 1
	}

[0x555a0192a240]:   %73 = lshr i64 %57, 63 {
	[0x555a018921b0]:  %74 = lshr i64 %58, 63
	}

[0x555a0192a2a8]:   %74 = trunc i64 %73 to i8 {
	[0x555a018ff338]:  %75 = trunc i64 %74 to i8
	}

[0x555a0192a320]:   store i8 %74, i8* %32, align 1, !tbaa !1282 {
	[0x555a01892060]:  store i8 %75, i8* %33, align 1
	}

[0x555a0192b3e0]:   store i64 %86, i64* %PC, align 8, !tbaa !1261 {
	[0x555a01889490]:  store i64 %87, i64* %3, align 8
	}

[0x555a0192b460]:   %87 = add i64 %55, 32 {
	[0x555a018947c0]:  %88 = add i64 %56, 32
	}

[0x555a0192b4e0]:   store i64 %87, i64* %RSP, align 8, !tbaa !1261 {
	[0x555a018951a0]:  store i64 %88, i64* %6, align 8
	}

[0x555a0192b548]:   ret %struct.Memory* %54 {
	[0x555a01889dc8]:  ret %struct.Memory.31* %call2_400552
	}

[0x555a0193d838]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x555a0190f8d8]:  %50 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x555a018755a0]: block_400540 {
	[0x555a01884f60]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [stderr_driver] from mcsema/test.opt.ll
Extracting function [stderr_driver] from mcsema/test.proposed.opt.ll
Matcher Done...
