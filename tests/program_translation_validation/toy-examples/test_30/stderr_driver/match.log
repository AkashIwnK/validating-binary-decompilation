Matching sub_400510_stderr_driver Vs stderr_driver


[Info] Retrieve Potential Matches...
[0x564d8fa3b220]: %struct.State* %0 {
	[0x564d8faa78b0]:%struct.State.0* %0
	}

[0x564d8fa3b260]: i64 %1 {
	[0x564d8faa9940]:i64 %1
	}

[0x564d8fa3b2a0]: %struct.Memory* %2 {
	[0x564d8faa4170]:%struct.Memory.31* %2
	}

[0x564d8fa3b900]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x564d8fa1f410]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x564d8fa3b9d8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564d8f9e1838]:  %50 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564d8fa3d340]:   %11 = icmp ult i64 %7, 16 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa3d3a8]:   %12 = zext i1 %11 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa3d450]:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x564d8fa7dec0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x564d8fa3d4e0]:   store i8 %12, i8* %13, align 1, !tbaa !1261 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa3d548]:   %14 = trunc i64 %10 to i32 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa3d5c0]:   %15 = and i32 %14, 255 {
	[0x564d8f9e6d30]:  %62 = and i32 %61, 255
	[0x564d8fa80600]:  %16 = and i32 %15, 255
	}

[0x564d8fa3d680]:   %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9 {
	[0x564d8fa89470]:  %call2_400522 = tail call %struct.Memory.31* @sub_400560.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	[0x564d8faa1d90]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	[0x564d8faa2000]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564d8fa3d710]:   store i8 %31, i8* %32, align 1, !tbaa !1278 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa3d790]:   %33 = lshr i64 %7, 63 {
	[0x564d8fa7f700]:  %34 = lshr i64 %8, 63
	[0x564d8fa7f7f0]:  %74 = lshr i64 %58, 63
	[0x564d8fa81da0]:  %31 = lshr i64 %11, 63
	[0x564d8faa8ea0]:  %76 = lshr i64 %56, 63
	}

[0x564d8fa3d820]:   %18 = and i8 %17, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	[0x564d8fa810e0]:  %26 = and i8 %25, 1
	[0x564d8faa5380]:  %71 = and i8 %70, 1
	}

[0x564d8fa3d8a0]:   %19 = xor i8 %18, 1 {
	[0x564d8fa80820]:  %20 = xor i8 %19, 1
	[0x564d8faa2650]:  %66 = xor i8 %65, 1
	}

[0x564d8fa44ff8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x564d8fa843b8]:  %AL.i = bitcast %union.anon.4* %50 to i8*
	}

[0x564d8fa494a0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x564d8fa21ea0]:  %RDI.i10 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x564d8fa495b0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x564d8fa21b00]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x564d8fa496c0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x564d8fa21380]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x564d8fa49758]:   %4 = load i64, i64* %RBP, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa49820]:   %5 = add i64 %1, 1 {
	[0x564d8f9d6010]:  %5 = add i64 %1, 1
	}

[0x564d8fa498a0]:   store i64 %5, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa49908]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa49980]:   %7 = add i64 %6, -8 {
	[0x564d8f9d4f70]:  %8 = add i64 %7, -8
	[0x564d8fa8db90]:  %45 = add i64 %44, -8
	[0x564d8fb3f130]:  %54 = add i64 %53, -8
	}

[0x564d8fa499e8]:   %8 = inttoptr i64 %7 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa49a48]:   %17 = trunc i32 %16 to i8 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa49af0]:   store i64 %4, i64* %8, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa49b58]:   %9 = load i64, i64* %PC, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa49bd0]:   store i64 %7, i64* %RBP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa49c50]:   %10 = add i64 %6, -24 {
	[0x564d8fa7f330]:  %11 = add i64 %7, -24
	}

[0x564d8fa49cd0]:   store i64 %10, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4a390]:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x564d8fa80b80]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x564d8fa4a420]:   store i8 %19, i8* %20, align 1, !tbaa !1275 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4a4a0]:   %21 = xor i64 %7, 16 {
	[0x564d8fa80a80]:  %22 = xor i64 %8, 16
	[0x564d8faa1380]:  %67 = xor i64 %56, 16
	}

[0x564d8fa4a520]:   %22 = xor i64 %21, %10 {
	[0x564d8fa80c60]:  %23 = xor i64 %22, %11
	[0x564d8fa94770]:  %35 = xor i64 %31, %34
	[0x564d8faa3520]:  %68 = xor i64 %67, %58
	[0x564d8faa93b0]:  %77 = xor i64 %74, %76
	}

[0x564d8fa4a5a0]:   %23 = lshr i64 %22, 4 {
	[0x564d8faa0310]:  %24 = lshr i64 %23, 4
	[0x564d8faa4ff0]:  %69 = lshr i64 %68, 4
	}

[0x564d8fa4a608]:   %24 = trunc i64 %23 to i8 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4a680]:   %25 = and i8 %24, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	[0x564d8fa810e0]:  %26 = and i8 %25, 1
	[0x564d8faa5380]:  %71 = and i8 %70, 1
	}

[0x564d8fa4a730]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x564d8fa81730]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x564d8fa4a7c0]:   store i8 %25, i8* %26, align 1, !tbaa !1276 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4a840]:   %27 = icmp eq i64 %10, 0 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4a8a8]:   %28 = zext i1 %27 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4a950]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x564d8fa948b0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x564d8fa4a9e0]:   store i8 %28, i8* %29, align 1, !tbaa !1277 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4ae70]:   %30 = lshr i64 %10, 63 {
	[0x564d8fa7f700]:  %34 = lshr i64 %8, 63
	[0x564d8fa7f7f0]:  %74 = lshr i64 %58, 63
	[0x564d8fa81da0]:  %31 = lshr i64 %11, 63
	[0x564d8faa8ea0]:  %76 = lshr i64 %56, 63
	}

[0x564d8fa4aed8]:   %31 = trunc i64 %30 to i8 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4af80]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x564d8fa82410]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x564d8fa4b010]:   %65 = xor i8 %64, 1 {
	[0x564d8fa80820]:  %20 = xor i8 %19, 1
	[0x564d8faa2650]:  %66 = xor i8 %65, 1
	}

[0x564d8fa4b090]:   store i8 %65, i8* %20, align 1, !tbaa !1275 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4b110]:   %66 = xor i64 %55, 16 {
	[0x564d8fa80a80]:  %22 = xor i64 %8, 16
	[0x564d8faa1380]:  %67 = xor i64 %56, 16
	}

[0x564d8fa4b190]:   %67 = xor i64 %66, %57 {
	[0x564d8fa80c60]:  %23 = xor i64 %22, %11
	[0x564d8fa94770]:  %35 = xor i64 %31, %34
	[0x564d8faa3520]:  %68 = xor i64 %67, %58
	[0x564d8faa93b0]:  %77 = xor i64 %74, %76
	}

[0x564d8fa4b220]:   %34 = xor i64 %30, %33 {
	[0x564d8fa80c60]:  %23 = xor i64 %22, %11
	[0x564d8fa94770]:  %35 = xor i64 %31, %34
	[0x564d8faa3520]:  %68 = xor i64 %67, %58
	[0x564d8faa93b0]:  %77 = xor i64 %74, %76
	}

[0x564d8fa4b2a0]:   %35 = add nuw nsw i64 %34, %33 {
	[0x564d8faa6750]:  %36 = add nuw nsw i64 %35, %34
	[0x564d8faa9a00]:  %78 = add nuw nsw i64 %77, %74
	}

[0x564d8fa4b320]:   %36 = icmp eq i64 %35, 2 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4b388]:   %37 = zext i1 %36 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4b430]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x564d8fa89210]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x564d8fa4b4c0]:   store i8 %37, i8* %38, align 1, !tbaa !1279 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4b540]:   %39 = add i64 %6, -16 {
	[0x564d8fa8b7b0]:  %40 = add i64 %7, -16
	}

[0x564d8fa4b5a8]:   %40 = load i64, i64* %RDI, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4b620]:   %41 = add i64 %9, 11 {
	[0x564d8fa8b8e0]:  %42 = add i64 %10, 11
	[0x564d8fb386e0]:  %52 = add i64 %46, 11
	}

[0x564d8fa4b6a0]:   store i64 %41, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4b708]:   %42 = inttoptr i64 %39 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4b780]:   store i64 %40, i64* %42, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4b7e8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4b860]:   %44 = add i64 %43, -8 {
	[0x564d8f9d4f70]:  %8 = add i64 %7, -8
	[0x564d8fa8db90]:  %45 = add i64 %44, -8
	[0x564d8fb3f130]:  %54 = add i64 %53, -8
	}

[0x564d8fa4b8c8]:   %45 = load i64, i64* %PC, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4b940]:   %46 = add i64 %45, 4 {
	[0x564d8fa8dcc0]:  %47 = add i64 %46, 4
	}

[0x564d8fa4b9c0]:   store i64 %46, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4ba28]:   %47 = inttoptr i64 %44 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4ba88]:   %48 = load i64, i64* %47, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4bb00]:   store i64 %48, i64* %RDI, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4bb80]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4bd50]:   %49 = add i64 %45, 68 {
	[0x564d8fb39bf0]:  %51 = add i64 %46, 68
	}

[0x564d8fa4bdd0]:   %50 = add i64 %45, 11 {
	[0x564d8fa8b8e0]:  %42 = add i64 %10, 11
	[0x564d8fb386e0]:  %52 = add i64 %46, 11
	}

[0x564d8fa4be38]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4beb0]:   %52 = add i64 %51, -8 {
	[0x564d8f9d4f70]:  %8 = add i64 %7, -8
	[0x564d8fa8db90]:  %45 = add i64 %44, -8
	[0x564d8fb3f130]:  %54 = add i64 %53, -8
	}

[0x564d8fa4bf18]:   %53 = inttoptr i64 %52 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4bf90]:   store i64 %50, i64* %53, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c010]:   store i64 %52, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c090]:   store i64 %49, i64* %PC, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c270]:   %54 = tail call %struct.Memory* @sub_400560_print_it(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2) {
	[0x564d8fa89470]:  %call2_400522 = tail call %struct.Memory.31* @sub_400560.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	[0x564d8faa1d90]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	[0x564d8faa2000]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564d8fa4c338]:   %55 = load i64, i64* %RSP, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4c398]:   %56 = load i64, i64* %PC, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4c410]:   %57 = add i64 %55, 16 {
	[0x564d8fb41c20]:  %58 = add i64 %56, 16
	}

[0x564d8fa4c490]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c510]:   %58 = icmp ugt i64 %55, -17 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4c578]:   %59 = zext i1 %58 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4c5f0]:   store i8 %59, i8* %13, align 1, !tbaa !1261 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c658]:   %60 = trunc i64 %57 to i32 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4c6d0]:   %61 = and i32 %60, 255 {
	[0x564d8f9e6d30]:  %62 = and i32 %61, 255
	[0x564d8fa80600]:  %16 = and i32 %15, 255
	}

[0x564d8fa4c770]:   %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9 {
	[0x564d8fa89470]:  %call2_400522 = tail call %struct.Memory.31* @sub_400560.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	[0x564d8faa1d90]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	[0x564d8faa2000]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564d8fa4c838]:   %63 = trunc i32 %62 to i8 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4c8b0]:   %64 = and i8 %63, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	[0x564d8fa810e0]:  %26 = and i8 %25, 1
	[0x564d8faa5380]:  %71 = and i8 %70, 1
	}

[0x564d8fa4cd40]:   %68 = lshr i64 %67, 4 {
	[0x564d8faa0310]:  %24 = lshr i64 %23, 4
	[0x564d8faa4ff0]:  %69 = lshr i64 %68, 4
	}

[0x564d8fa4cda8]:   %69 = trunc i64 %68 to i8 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4ce20]:   %70 = and i8 %69, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	[0x564d8fa810e0]:  %26 = and i8 %25, 1
	[0x564d8faa5380]:  %71 = and i8 %70, 1
	}

[0x564d8fa4cea0]:   store i8 %70, i8* %26, align 1, !tbaa !1276 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4cf20]:   %71 = icmp eq i64 %57, 0 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4cf88]:   %72 = zext i1 %71 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4d000]:   store i8 %72, i8* %29, align 1, !tbaa !1277 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d080]:   %73 = lshr i64 %57, 63 {
	[0x564d8fa7f700]:  %34 = lshr i64 %8, 63
	[0x564d8fa7f7f0]:  %74 = lshr i64 %58, 63
	[0x564d8fa81da0]:  %31 = lshr i64 %11, 63
	[0x564d8faa8ea0]:  %76 = lshr i64 %56, 63
	}

[0x564d8fa4d0e8]:   %74 = trunc i64 %73 to i8 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4d160]:   store i8 %74, i8* %32, align 1, !tbaa !1278 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d1e0]:   %75 = lshr i64 %55, 63 {
	[0x564d8fa7f700]:  %34 = lshr i64 %8, 63
	[0x564d8fa7f7f0]:  %74 = lshr i64 %58, 63
	[0x564d8fa81da0]:  %31 = lshr i64 %11, 63
	[0x564d8faa8ea0]:  %76 = lshr i64 %56, 63
	}

[0x564d8fa4d260]:   %76 = xor i64 %73, %75 {
	[0x564d8fa80c60]:  %23 = xor i64 %22, %11
	[0x564d8fa94770]:  %35 = xor i64 %31, %34
	[0x564d8faa3520]:  %68 = xor i64 %67, %58
	[0x564d8faa93b0]:  %77 = xor i64 %74, %76
	}

[0x564d8fa4d2e0]:   %77 = add nuw nsw i64 %76, %73 {
	[0x564d8faa6750]:  %36 = add nuw nsw i64 %35, %34
	[0x564d8faa9a00]:  %78 = add nuw nsw i64 %77, %74
	}

[0x564d8fa4d360]:   %78 = icmp eq i64 %77, 2 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4d3c8]:   %79 = zext i1 %78 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4d440]:   store i8 %79, i8* %38, align 1, !tbaa !1279 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d4c0]:   %80 = add i64 %56, 5 {
	[0x564d8faa0670]:  %81 = add i64 %57, 5
	}

[0x564d8fa4d540]:   store i64 %80, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d5c0]:   %81 = add i64 %55, 24 {
	[0x564d8faa07f0]:  %82 = add i64 %56, 24
	}

[0x564d8fa4d628]:   %82 = inttoptr i64 %57 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4d688]:   %83 = load i64, i64* %82, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4d700]:   store i64 %83, i64* %RBP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d780]:   store i64 %81, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d800]:   %84 = add i64 %56, 6 {
	[0x564d8faac220]:  %85 = add i64 %57, 6
	}

[0x564d8fa4d880]:   store i64 %84, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4d8e8]:   %85 = inttoptr i64 %81 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4d948]:   %86 = load i64, i64* %85, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4d9c0]:   store i64 %86, i64* %PC, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4da40]:   %87 = add i64 %55, 32 {
	[0x564d8faaea50]:  %88 = add i64 %56, 32
	}

[0x564d8fa4dac0]:   store i64 %87, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4db28]:   ret %struct.Memory* %54 {
	[0x564d8fa88fc8]:  ret %struct.Memory.31* %call2_400522
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x564d8fa83578]:   %44 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564d8fa49758]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x564d8fa49af0]:   store i64 %4, i64* %8, align 8


Uprime Matches: [0x564d8f9d5730]:   store i64 %5, i64* %3, align 8
[0x564d8fa399c0]:   store i8 %60, i8* %14, align 1
[0x564d8fa7d8c0]:   store i64 %11, i64* %6, align 8
[0x564d8fa7e260]:   store i64 %4, i64* %9, align 8
[0x564d8fa7e370]:   store i64 %8, i64* %RBP.i, align 8
[0x564d8fa804f0]:   store i8 %13, i8* %14, align 1
[0x564d8fa811b0]:   store i8 %26, i8* %27, align 1
[0x564d8fa81c90]:   store i8 %29, i8* %30, align 1
[0x564d8fa8b680]:   store i8 %38, i8* %39, align 1
[0x564d8fa8ba10]:   store i64 %42, i64* %3, align 8
[0x564d8fa8da60]:   store i64 %41, i64* %43, align 8
[0x564d8fa8ddf0]:   store i64 %47, i64* %3, align 8
[0x564d8fa9fa90]:   store i8 %20, i8* %21, align 1
[0x564d8faa04f0]:   store i8 %80, i8* %39, align 1
[0x564d8faa0a00]:   store i64 %81, i64* %3, align 8
[0x564d8faa2720]:   store i8 %32, i8* %33, align 1
[0x564d8faa2830]:   store i8 %66, i8* %21, align 1
[0x564d8faa5cb0]:   store i8 %71, i8* %27, align 1
[0x564d8faa6230]:   store i8 %73, i8* %30, align 1
[0x564d8faa6870]:   store i8 %75, i8* %33, align 1
[0x564d8faab870]:   store i64 %85, i64* %3, align 8
[0x564d8faabd10]:   store i64 %84, i64* %RBP.i, align 8
[0x564d8faac520]:   store i64 %82, i64* %6, align 8
[0x564d8faacb10]:   store i64 %87, i64* %3, align 8
[0x564d8faaede0]:   store i64 %88, i64* %6, align 8
[0x564d8fabf850]:   store i64 %49, i64* %RDI.i10, align 8
[0x564d8fb373d0]:   store i8 0, i8* %AL.i, align 1
[0x564d8fb3e360]:   store i64 %52, i64* %55, align 8
[0x564d8fb408d0]:   store i64 %54, i64* %6, align 8
[0x564d8fb430c0]:   store i64 %51, i64* %3, align 8
[0x564d8fb44bf0]:   store i64 %58, i64* %6, align 8


Adj: [0x564d8fa8db90]:   %45 = add i64 %44, -8


Removing: [0x564d8fa844e8]:   %53 = load i64, i64* %6, align 8
From the pot matches of: [0x564d8fa49908]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564d8fa4b540]:   %39 = add i64 %6, -16


Uprime Matches: [0x564d8fa8b7b0]:   %40 = add i64 %7, -16


Adj: [0x564d8fb3f130]:   %54 = add i64 %53, -8


Removing: [0x564d8fa85468]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x564d8fa49908]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564d8fa4b540]:   %39 = add i64 %6, -16


Uprime Matches: [0x564d8fa8b7b0]:   %40 = add i64 %7, -16


Adj: [0x564d8faa07f0]:   %82 = add i64 %56, 24
[0x564d8faa1380]:   %67 = xor i64 %56, 16
[0x564d8faa8ea0]:   %76 = lshr i64 %56, 63
[0x564d8faaea50]:   %88 = add i64 %56, 32
[0x564d8fb41c20]:   %58 = add i64 %56, 16
[0x564d8fb48fc0]:   %59 = icmp ugt i64 %56, -17


Removing: [0x564d8fa85598]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x564d8fa49b58]:   %9 = load i64, i64* %PC, align 8


Uprime : [0x564d8fa4b620]:   %41 = add i64 %9, 11


Uprime Matches: [0x564d8fa8b8e0]:   %42 = add i64 %10, 11
[0x564d8fb386e0]:   %52 = add i64 %46, 11


Adj: [0x564d8faa0670]:   %81 = add i64 %57, 5
[0x564d8faac220]:   %85 = add i64 %57, 6


Removing: [0x564d8fa7b538]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8fa80600]:   %16 = and i32 %15, 255


Removing: [0x564d8fa82868]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8faa2720]:   store i8 %32, i8* %33, align 1


Removing: [0x564d8fa86048]:   %61 = trunc i64 %58 to i32
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8f9e6d30]:   %62 = and i32 %61, 255


Removing: [0x564d8fa88648]:   %75 = trunc i64 %74 to i8
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8faa6870]:   store i8 %75, i8* %33, align 1


Removing: [0x564d8fa810e0]:   %26 = and i8 %25, 1
From the pot matches of: [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime : [0x564d8fa3d8a0]:   %19 = xor i8 %18, 1


Uprime Matches: [0x564d8fa80820]:   %20 = xor i8 %19, 1
[0x564d8faa2650]:   %66 = xor i8 %65, 1


Adj: [0x564d8fa811b0]:   store i8 %26, i8* %27, align 1


Removing: [0x564d8faa5380]:   %71 = and i8 %70, 1
From the pot matches of: [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime : [0x564d8fa3d8a0]:   %19 = xor i8 %18, 1


Uprime Matches: [0x564d8fa80820]:   %20 = xor i8 %19, 1
[0x564d8faa2650]:   %66 = xor i8 %65, 1


Adj: [0x564d8faa5cb0]:   store i8 %71, i8* %27, align 1


Removing: [0x564d8fb386e0]:   %52 = add i64 %46, 11
From the pot matches of: [0x564d8fa4b620]:   %41 = add i64 %9, 11


Uprime : [0x564d8fa4b6a0]:   store i64 %41, i64* %PC, align 8


Uprime Matches: [0x564d8f9d5730]:   store i64 %5, i64* %3, align 8
[0x564d8fa8ba10]:   store i64 %42, i64* %3, align 8
[0x564d8fa8ddf0]:   store i64 %47, i64* %3, align 8
[0x564d8faa0a00]:   store i64 %81, i64* %3, align 8
[0x564d8faab870]:   store i64 %85, i64* %3, align 8
[0x564d8faacb10]:   store i64 %87, i64* %3, align 8
[0x564d8fb430c0]:   store i64 %51, i64* %3, align 8


Adj: [0x564d8fb3e360]:   store i64 %52, i64* %55, align 8


Removing: [0x564d8f9e6508]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x564d8fa4b7e8]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x564d8fa4b860]:   %44 = add i64 %43, -8


Uprime Matches: [0x564d8f9d4f70]:   %8 = add i64 %7, -8
[0x564d8fa8db90]:   %45 = add i64 %44, -8
[0x564d8fb3f130]:   %54 = add i64 %53, -8


Adj: [0x564d8fa7e260]:   store i64 %4, i64* %9, align 8


Removing: [0x564d8fa85598]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x564d8fa4b8c8]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x564d8fa4bdd0]:   %50 = add i64 %45, 11


Uprime Matches: [0x564d8fa8b8e0]:   %42 = add i64 %10, 11
[0x564d8fb386e0]:   %52 = add i64 %46, 11


Adj: [0x564d8faa0670]:   %81 = add i64 %57, 5
[0x564d8faac220]:   %85 = add i64 %57, 6


Removing: [0x564d8f9e9bf8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x564d8fa4b8c8]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x564d8fa4bd50]:   %49 = add i64 %45, 68


Uprime Matches: [0x564d8fb39bf0]:   %51 = add i64 %46, 68


Adj: [0x564d8fa8b8e0]:   %42 = add i64 %10, 11


Removing: [0x564d8fa85468]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x564d8fa4be38]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564d8fa4beb0]:   %52 = add i64 %51, -8


Uprime Matches: [0x564d8f9d4f70]:   %8 = add i64 %7, -8
[0x564d8fa8db90]:   %45 = add i64 %44, -8
[0x564d8fb3f130]:   %54 = add i64 %53, -8


Adj: [0x564d8faa07f0]:   %82 = add i64 %56, 24
[0x564d8faa1380]:   %67 = xor i64 %56, 16
[0x564d8faa8ea0]:   %76 = lshr i64 %56, 63
[0x564d8faaea50]:   %88 = add i64 %56, 32
[0x564d8fb41c20]:   %58 = add i64 %56, 16
[0x564d8fb48fc0]:   %59 = icmp ugt i64 %56, -17


Removing: [0x564d8f9d4f70]:   %8 = add i64 %7, -8
From the pot matches of: [0x564d8fa4beb0]:   %52 = add i64 %51, -8


Uprime : [0x564d8fa4c010]:   store i64 %52, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x564d8fa7d8c0]:   store i64 %11, i64* %6, align 8
[0x564d8faac520]:   store i64 %82, i64* %6, align 8
[0x564d8faaede0]:   store i64 %88, i64* %6, align 8
[0x564d8fb408d0]:   store i64 %54, i64* %6, align 8
[0x564d8fb44bf0]:   store i64 %58, i64* %6, align 8


Adj: [0x564d8fa3fb98]:   %9 = inttoptr i64 %8 to i64*
[0x564d8fa7e370]:   store i64 %8, i64* %RBP.i, align 8
[0x564d8fa7f700]:   %34 = lshr i64 %8, 63
[0x564d8fa800f0]:   %12 = icmp ult i64 %8, 16
[0x564d8fa80a80]:   %22 = xor i64 %8, 16


Removing: [0x564d8f9e73a8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x564d8fa4c338]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x564d8fa4da40]:   %87 = add i64 %55, 32


Uprime Matches: [0x564d8faaea50]:   %88 = add i64 %56, 32


Adj: [0x564d8f9d4f70]:   %8 = add i64 %7, -8
[0x564d8fa7f330]:   %11 = add i64 %7, -24
[0x564d8fa8b7b0]:   %40 = add i64 %7, -16


Removing: [0x564d8fa844e8]:   %53 = load i64, i64* %6, align 8
From the pot matches of: [0x564d8fa4c338]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x564d8fa4da40]:   %87 = add i64 %55, 32


Uprime Matches: [0x564d8faaea50]:   %88 = add i64 %56, 32


Adj: [0x564d8fb3f130]:   %54 = add i64 %53, -8


Removing: [0x564d8f9e9bf8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x564d8fa4c398]:   %56 = load i64, i64* %PC, align 8


Uprime : [0x564d8fa4d800]:   %84 = add i64 %56, 6


Uprime Matches: [0x564d8faac220]:   %85 = add i64 %57, 6


Adj: [0x564d8fa8b8e0]:   %42 = add i64 %10, 11


Removing: [0x564d8fa836a8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x564d8fa4c398]:   %56 = load i64, i64* %PC, align 8


Uprime : [0x564d8fa4d800]:   %84 = add i64 %56, 6


Uprime Matches: [0x564d8faac220]:   %85 = add i64 %57, 6


Adj: [0x564d8fa8dcc0]:   %47 = add i64 %46, 4
[0x564d8fb386e0]:   %52 = add i64 %46, 11
[0x564d8fb39bf0]:   %51 = add i64 %46, 68


Removing: [0x564d8fa7b538]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8fa80600]:   %16 = and i32 %15, 255


Removing: [0x564d8fa82868]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8faa2720]:   store i8 %32, i8* %33, align 1


Removing: [0x564d8fa86048]:   %61 = trunc i64 %58 to i32
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8f9e6d30]:   %62 = and i32 %61, 255


Removing: [0x564d8fa88648]:   %75 = trunc i64 %74 to i8
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1
[0x564d8fa810e0]:   %26 = and i8 %25, 1
[0x564d8faa5380]:   %71 = and i8 %70, 1


Adj: [0x564d8faa6870]:   store i8 %75, i8* %33, align 1


Removing: [0x564d8fa810e0]:   %26 = and i8 %25, 1
From the pot matches of: [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime : [0x564d8fa4b010]:   %65 = xor i8 %64, 1


Uprime Matches: [0x564d8fa80820]:   %20 = xor i8 %19, 1
[0x564d8faa2650]:   %66 = xor i8 %65, 1


Adj: [0x564d8fa811b0]:   store i8 %26, i8* %27, align 1


Removing: [0x564d8faa5380]:   %71 = and i8 %70, 1
From the pot matches of: [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime : [0x564d8fa4b010]:   %65 = xor i8 %64, 1


Uprime Matches: [0x564d8fa80820]:   %20 = xor i8 %19, 1
[0x564d8faa2650]:   %66 = xor i8 %65, 1


Adj: [0x564d8faa5cb0]:   store i8 %71, i8* %27, align 1

Round: 1

Removing: [0x564d8fa836a8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x564d8fa49b58]:   %9 = load i64, i64* %PC, align 8


Uprime : [0x564d8fa4b620]:   %41 = add i64 %9, 11


Uprime Matches: [0x564d8fa8b8e0]:   %42 = add i64 %10, 11


Adj: [0x564d8fa8dcc0]:   %47 = add i64 %46, 4
[0x564d8fb386e0]:   %52 = add i64 %46, 11
[0x564d8fb39bf0]:   %51 = add i64 %46, 68


Removing: [0x564d8fa7d808]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1


Adj: [0x564d8fa810e0]:   %26 = and i8 %25, 1


Removing: [0x564d8fa86768]:   %70 = trunc i64 %69 to i8
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1


Adj: [0x564d8faa5380]:   %71 = and i8 %70, 1


Removing: [0x564d8f9e73a8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x564d8fa4be38]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x564d8fa4beb0]:   %52 = add i64 %51, -8


Uprime Matches: [0x564d8fb3f130]:   %54 = add i64 %53, -8


Adj: [0x564d8f9d4f70]:   %8 = add i64 %7, -8
[0x564d8fa7f330]:   %11 = add i64 %7, -24
[0x564d8fa8b7b0]:   %40 = add i64 %7, -16


Removing: [0x564d8fa7d808]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1


Adj: [0x564d8fa810e0]:   %26 = and i8 %25, 1


Removing: [0x564d8fa86768]:   %70 = trunc i64 %69 to i8
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1
[0x564d8fa80710]:   %19 = and i8 %18, 1


Adj: [0x564d8faa5380]:   %71 = and i8 %70, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x564d8fa3b220]: %struct.State* %0 {
	[0x564d8faa78b0]:%struct.State.0* %0
	}

[0x564d8fa3b260]: i64 %1 {
	[0x564d8faa9940]:i64 %1
	}

[0x564d8fa3b2a0]: %struct.Memory* %2 {
	[0x564d8faa4170]:%struct.Memory.31* %2
	}

[0x564d8fa3b900]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x564d8fa1f410]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x564d8fa3b9d8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564d8f9e1838]:  %50 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564d8fa3d340]:   %11 = icmp ult i64 %7, 16 {
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	}

[0x564d8fa3d3a8]:   %12 = zext i1 %11 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	}

[0x564d8fa3d450]:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x564d8fa7dec0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x564d8fa3d4e0]:   store i8 %12, i8* %13, align 1, !tbaa !1261 {
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	}

[0x564d8fa3d548]:   %14 = trunc i64 %10 to i32 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	}

[0x564d8fa3d5c0]:   %15 = and i32 %14, 255 {
	[0x564d8fa80600]:  %16 = and i32 %15, 255
	}

[0x564d8fa3d680]:   %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9 {
	[0x564d8faa2000]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564d8fa3d710]:   store i8 %31, i8* %32, align 1, !tbaa !1278 {
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	}

[0x564d8fa3d790]:   %33 = lshr i64 %7, 63 {
	[0x564d8fa7f700]:  %34 = lshr i64 %8, 63
	}

[0x564d8fa3d820]:   %18 = and i8 %17, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	}

[0x564d8fa3d8a0]:   %19 = xor i8 %18, 1 {
	[0x564d8fa80820]:  %20 = xor i8 %19, 1
	[0x564d8faa2650]:  %66 = xor i8 %65, 1
	}

[0x564d8fa44ff8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x564d8fa843b8]:  %AL.i = bitcast %union.anon.4* %50 to i8*
	}

[0x564d8fa494a0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x564d8fa21ea0]:  %RDI.i10 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x564d8fa495b0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x564d8fa21b00]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x564d8fa496c0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x564d8fa21380]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x564d8fa49758]:   %4 = load i64, i64* %RBP, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x564d8fa49820]:   %5 = add i64 %1, 1 {
	[0x564d8f9d6010]:  %5 = add i64 %1, 1
	}

[0x564d8fa498a0]:   store i64 %5, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	}

[0x564d8fa49908]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	}

[0x564d8fa49980]:   %7 = add i64 %6, -8 {
	[0x564d8f9d4f70]:  %8 = add i64 %7, -8
	}

[0x564d8fa499e8]:   %8 = inttoptr i64 %7 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x564d8fa49a48]:   %17 = trunc i32 %16 to i8 {
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	}

[0x564d8fa49af0]:   store i64 %4, i64* %8, align 8 {
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	}

[0x564d8fa49b58]:   %9 = load i64, i64* %PC, align 8 {
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	}

[0x564d8fa49bd0]:   store i64 %7, i64* %RBP, align 8, !tbaa !1257 {
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x564d8fa49c50]:   %10 = add i64 %6, -24 {
	[0x564d8fa7f330]:  %11 = add i64 %7, -24
	}

[0x564d8fa49cd0]:   store i64 %10, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	}

[0x564d8fa4a390]:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x564d8fa80b80]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x564d8fa4a420]:   store i8 %19, i8* %20, align 1, !tbaa !1275 {
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	}

[0x564d8fa4a4a0]:   %21 = xor i64 %7, 16 {
	[0x564d8fa80a80]:  %22 = xor i64 %8, 16
	}

[0x564d8fa4a520]:   %22 = xor i64 %21, %10 {
	[0x564d8fa80c60]:  %23 = xor i64 %22, %11
	}

[0x564d8fa4a5a0]:   %23 = lshr i64 %22, 4 {
	[0x564d8faa0310]:  %24 = lshr i64 %23, 4
	}

[0x564d8fa4a608]:   %24 = trunc i64 %23 to i8 {
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	}

[0x564d8fa4a680]:   %25 = and i8 %24, 1 {
	[0x564d8fa810e0]:  %26 = and i8 %25, 1
	}

[0x564d8fa4a730]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x564d8fa81730]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x564d8fa4a7c0]:   store i8 %25, i8* %26, align 1, !tbaa !1276 {
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	}

[0x564d8fa4a840]:   %27 = icmp eq i64 %10, 0 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	}

[0x564d8fa4a8a8]:   %28 = zext i1 %27 to i8 {
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	}

[0x564d8fa4a950]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x564d8fa948b0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x564d8fa4a9e0]:   store i8 %28, i8* %29, align 1, !tbaa !1277 {
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	}

[0x564d8fa4ae70]:   %30 = lshr i64 %10, 63 {
	[0x564d8fa81da0]:  %31 = lshr i64 %11, 63
	}

[0x564d8fa4aed8]:   %31 = trunc i64 %30 to i8 {
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	}

[0x564d8fa4af80]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x564d8fa82410]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x564d8fa4b010]:   %65 = xor i8 %64, 1 {
	[0x564d8fa80820]:  %20 = xor i8 %19, 1
	[0x564d8faa2650]:  %66 = xor i8 %65, 1
	}

[0x564d8fa4b090]:   store i8 %65, i8* %20, align 1, !tbaa !1275 {
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	}

[0x564d8fa4b110]:   %66 = xor i64 %55, 16 {
	[0x564d8faa1380]:  %67 = xor i64 %56, 16
	}

[0x564d8fa4b190]:   %67 = xor i64 %66, %57 {
	[0x564d8faa3520]:  %68 = xor i64 %67, %58
	}

[0x564d8fa4b220]:   %34 = xor i64 %30, %33 {
	[0x564d8fa94770]:  %35 = xor i64 %31, %34
	}

[0x564d8fa4b2a0]:   %35 = add nuw nsw i64 %34, %33 {
	[0x564d8faa6750]:  %36 = add nuw nsw i64 %35, %34
	}

[0x564d8fa4b320]:   %36 = icmp eq i64 %35, 2 {
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	}

[0x564d8fa4b388]:   %37 = zext i1 %36 to i8 {
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	}

[0x564d8fa4b430]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x564d8fa89210]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x564d8fa4b4c0]:   store i8 %37, i8* %38, align 1, !tbaa !1279 {
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	}

[0x564d8fa4b540]:   %39 = add i64 %6, -16 {
	[0x564d8fa8b7b0]:  %40 = add i64 %7, -16
	}

[0x564d8fa4b5a8]:   %40 = load i64, i64* %RDI, align 8 {
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	}

[0x564d8fa4b620]:   %41 = add i64 %9, 11 {
	[0x564d8fa8b8e0]:  %42 = add i64 %10, 11
	}

[0x564d8fa4b6a0]:   store i64 %41, i64* %PC, align 8 {
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	}

[0x564d8fa4b708]:   %42 = inttoptr i64 %39 to i64* {
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	}

[0x564d8fa4b780]:   store i64 %40, i64* %42, align 8 {
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	}

[0x564d8fa4b7e8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x564d8fa4b860]:   %44 = add i64 %43, -8 {
	[0x564d8fa8db90]:  %45 = add i64 %44, -8
	}

[0x564d8fa4b8c8]:   %45 = load i64, i64* %PC, align 8 {
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	}

[0x564d8fa4b940]:   %46 = add i64 %45, 4 {
	[0x564d8fa8dcc0]:  %47 = add i64 %46, 4
	}

[0x564d8fa4b9c0]:   store i64 %46, i64* %PC, align 8 {
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	}

[0x564d8fa4ba28]:   %47 = inttoptr i64 %44 to i64* {
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	}

[0x564d8fa4ba88]:   %48 = load i64, i64* %47, align 8 {
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4bb00]:   store i64 %48, i64* %RDI, align 8, !tbaa !1257 {
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	}

[0x564d8fa4bb80]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	}

[0x564d8fa4bd50]:   %49 = add i64 %45, 68 {
	[0x564d8fb39bf0]:  %51 = add i64 %46, 68
	}

[0x564d8fa4bdd0]:   %50 = add i64 %45, 11 {
	[0x564d8fb386e0]:  %52 = add i64 %46, 11
	}

[0x564d8fa4be38]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	}

[0x564d8fa4beb0]:   %52 = add i64 %51, -8 {
	[0x564d8fb3f130]:  %54 = add i64 %53, -8
	}

[0x564d8fa4bf18]:   %53 = inttoptr i64 %52 to i64* {
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	}

[0x564d8fa4bf90]:   store i64 %50, i64* %53, align 8 {
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	}

[0x564d8fa4c010]:   store i64 %52, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	}

[0x564d8fa4c090]:   store i64 %49, i64* %PC, align 8, !tbaa !1257 {
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	}

[0x564d8fa4c270]:   %54 = tail call %struct.Memory* @sub_400560_print_it(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2) {
	[0x564d8fa89470]:  %call2_400522 = tail call %struct.Memory.31* @sub_400560.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	}

[0x564d8fa4c338]:   %55 = load i64, i64* %RSP, align 8 {
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	}

[0x564d8fa4c398]:   %56 = load i64, i64* %PC, align 8 {
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	}

[0x564d8fa4c410]:   %57 = add i64 %55, 16 {
	[0x564d8fb41c20]:  %58 = add i64 %56, 16
	}

[0x564d8fa4c490]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c510]:   %58 = icmp ugt i64 %55, -17 {
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4c578]:   %59 = zext i1 %58 to i8 {
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	}

[0x564d8fa4c5f0]:   store i8 %59, i8* %13, align 1, !tbaa !1261 {
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	}

[0x564d8fa4c658]:   %60 = trunc i64 %57 to i32 {
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	}

[0x564d8fa4c6d0]:   %61 = and i32 %60, 255 {
	[0x564d8f9e6d30]:  %62 = and i32 %61, 255
	}

[0x564d8fa4c770]:   %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9 {
	[0x564d8faa1d90]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x564d8fa4c838]:   %63 = trunc i32 %62 to i8 {
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	}

[0x564d8fa4c8b0]:   %64 = and i8 %63, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	}

[0x564d8fa4cd40]:   %68 = lshr i64 %67, 4 {
	[0x564d8faa4ff0]:  %69 = lshr i64 %68, 4
	}

[0x564d8fa4cda8]:   %69 = trunc i64 %68 to i8 {
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	}

[0x564d8fa4ce20]:   %70 = and i8 %69, 1 {
	[0x564d8faa5380]:  %71 = and i8 %70, 1
	}

[0x564d8fa4cea0]:   store i8 %70, i8* %26, align 1, !tbaa !1276 {
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	}

[0x564d8fa4cf20]:   %71 = icmp eq i64 %57, 0 {
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	}

[0x564d8fa4cf88]:   %72 = zext i1 %71 to i8 {
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	}

[0x564d8fa4d000]:   store i8 %72, i8* %29, align 1, !tbaa !1277 {
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	}

[0x564d8fa4d080]:   %73 = lshr i64 %57, 63 {
	[0x564d8fa7f7f0]:  %74 = lshr i64 %58, 63
	}

[0x564d8fa4d0e8]:   %74 = trunc i64 %73 to i8 {
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4d160]:   store i8 %74, i8* %32, align 1, !tbaa !1278 {
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	}

[0x564d8fa4d1e0]:   %75 = lshr i64 %55, 63 {
	[0x564d8faa8ea0]:  %76 = lshr i64 %56, 63
	}

[0x564d8fa4d260]:   %76 = xor i64 %73, %75 {
	[0x564d8faa93b0]:  %77 = xor i64 %74, %76
	}

[0x564d8fa4d2e0]:   %77 = add nuw nsw i64 %76, %73 {
	[0x564d8faa9a00]:  %78 = add nuw nsw i64 %77, %74
	}

[0x564d8fa4d360]:   %78 = icmp eq i64 %77, 2 {
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	}

[0x564d8fa4d3c8]:   %79 = zext i1 %78 to i8 {
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4d440]:   store i8 %79, i8* %38, align 1, !tbaa !1279 {
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	}

[0x564d8fa4d4c0]:   %80 = add i64 %56, 5 {
	[0x564d8faa0670]:  %81 = add i64 %57, 5
	}

[0x564d8fa4d540]:   store i64 %80, i64* %PC, align 8 {
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	}

[0x564d8fa4d5c0]:   %81 = add i64 %55, 24 {
	[0x564d8faa07f0]:  %82 = add i64 %56, 24
	}

[0x564d8fa4d628]:   %82 = inttoptr i64 %57 to i64* {
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	}

[0x564d8fa4d688]:   %83 = load i64, i64* %82, align 8 {
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	}

[0x564d8fa4d700]:   store i64 %83, i64* %RBP, align 8, !tbaa !1257 {
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	}

[0x564d8fa4d780]:   store i64 %81, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	}

[0x564d8fa4d800]:   %84 = add i64 %56, 6 {
	[0x564d8faac220]:  %85 = add i64 %57, 6
	}

[0x564d8fa4d880]:   store i64 %84, i64* %PC, align 8 {
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	}

[0x564d8fa4d8e8]:   %85 = inttoptr i64 %81 to i64* {
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4d948]:   %86 = load i64, i64* %85, align 8 {
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	}

[0x564d8fa4d9c0]:   store i64 %86, i64* %PC, align 8, !tbaa !1257 {
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	}

[0x564d8fa4da40]:   %87 = add i64 %55, 32 {
	[0x564d8faaea50]:  %88 = add i64 %56, 32
	}

[0x564d8fa4dac0]:   store i64 %87, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	}

[0x564d8fa4db28]:   ret %struct.Memory* %54 {
	[0x564d8fa88fc8]:  ret %struct.Memory.31* %call2_400522
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x564d8fa3b740]: block_400510 {
	[0x564d8fa9e0e0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x564d8faa2650]:   %66 = xor i8 %65, 1
From the pot matches of: [0x564d8fa3d8a0]:   %19 = xor i8 %18, 1


Uprime : [0x564d8fa4a420]:   store i8 %19, i8* %20, align 1, !tbaa !1275


Uprime Matches: [0x564d8fa9fa90]:   store i8 %20, i8* %21, align 1


Adj: [0x564d8faa2830]:   store i8 %66, i8* %21, align 1


Removing: [0x564d8fa80820]:   %20 = xor i8 %19, 1
From the pot matches of: [0x564d8fa4b010]:   %65 = xor i8 %64, 1


Uprime : [0x564d8fa4b090]:   store i8 %65, i8* %20, align 1, !tbaa !1275


Uprime Matches: [0x564d8faa2830]:   store i8 %66, i8* %21, align 1


Adj: [0x564d8fa9fa90]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x564d8f9e1670]:   %65 = and i8 %64, 1
From the pot matches of: [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime : [0x564d8fa3d8a0]:   %19 = xor i8 %18, 1


Uprime Matches: [0x564d8fa80820]:   %20 = xor i8 %19, 1


Adj: [0x564d8faa2650]:   %66 = xor i8 %65, 1


Removing: [0x564d8fa80710]:   %19 = and i8 %18, 1
From the pot matches of: [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime : [0x564d8fa4b010]:   %65 = xor i8 %64, 1


Uprime Matches: [0x564d8faa2650]:   %66 = xor i8 %65, 1


Adj: [0x564d8fa80820]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x564d8fa86508]:   %64 = trunc i32 %63 to i8
From the pot matches of: [0x564d8fa49a48]:   %17 = trunc i32 %16 to i8


Uprime : [0x564d8fa3d820]:   %18 = and i8 %17, 1


Uprime Matches: [0x564d8fa80710]:   %19 = and i8 %18, 1


Adj: [0x564d8f9e1670]:   %65 = and i8 %64, 1


Removing: [0x564d8fa7b5c8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x564d8fa4c838]:   %63 = trunc i32 %62 to i8


Uprime : [0x564d8fa4c8b0]:   %64 = and i8 %63, 1


Uprime Matches: [0x564d8f9e1670]:   %65 = and i8 %64, 1


Adj: [0x564d8fa80710]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x564d8fa3b220]: %struct.State* %0 {
	[0x564d8faa78b0]:%struct.State.0* %0
	}

[0x564d8fa3b260]: i64 %1 {
	[0x564d8faa9940]:i64 %1
	}

[0x564d8fa3b2a0]: %struct.Memory* %2 {
	[0x564d8faa4170]:%struct.Memory.31* %2
	}

[0x564d8fa3b900]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x564d8fa1f410]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x564d8fa3b9d8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564d8f9e1838]:  %50 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564d8fa3d340]:   %11 = icmp ult i64 %7, 16 {
	[0x564d8fa800f0]:  %12 = icmp ult i64 %8, 16
	}

[0x564d8fa3d3a8]:   %12 = zext i1 %11 to i8 {
	[0x564d8fa73e08]:  %13 = zext i1 %12 to i8
	}

[0x564d8fa3d450]:   %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x564d8fa7dec0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x564d8fa3d4e0]:   store i8 %12, i8* %13, align 1, !tbaa !1261 {
	[0x564d8fa804f0]:  store i8 %13, i8* %14, align 1
	}

[0x564d8fa3d548]:   %14 = trunc i64 %10 to i32 {
	[0x564d8fa7b538]:  %15 = trunc i64 %11 to i32
	}

[0x564d8fa3d5c0]:   %15 = and i32 %14, 255 {
	[0x564d8fa80600]:  %16 = and i32 %15, 255
	}

[0x564d8fa3d680]:   %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9 {
	[0x564d8faa2000]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x564d8fa3d710]:   store i8 %31, i8* %32, align 1, !tbaa !1278 {
	[0x564d8faa2720]:  store i8 %32, i8* %33, align 1
	}

[0x564d8fa3d790]:   %33 = lshr i64 %7, 63 {
	[0x564d8fa7f700]:  %34 = lshr i64 %8, 63
	}

[0x564d8fa3d820]:   %18 = and i8 %17, 1 {
	[0x564d8fa80710]:  %19 = and i8 %18, 1
	}

[0x564d8fa3d8a0]:   %19 = xor i8 %18, 1 {
	[0x564d8fa80820]:  %20 = xor i8 %19, 1
	}

[0x564d8fa44ff8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x564d8fa843b8]:  %AL.i = bitcast %union.anon.4* %50 to i8*
	}

[0x564d8fa494a0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x564d8fa21ea0]:  %RDI.i10 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x564d8fa495b0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x564d8fa21b00]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x564d8fa496c0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x564d8fa21380]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x564d8fa49758]:   %4 = load i64, i64* %RBP, align 8 {
	[0x564d8f9e6508]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x564d8fa49820]:   %5 = add i64 %1, 1 {
	[0x564d8f9d6010]:  %5 = add i64 %1, 1
	}

[0x564d8fa498a0]:   store i64 %5, i64* %PC, align 8 {
	[0x564d8f9d5730]:  store i64 %5, i64* %3, align 8
	}

[0x564d8fa49908]:   %6 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8f9e73a8]:  %7 = load i64, i64* %6, align 8
	}

[0x564d8fa49980]:   %7 = add i64 %6, -8 {
	[0x564d8f9d4f70]:  %8 = add i64 %7, -8
	}

[0x564d8fa499e8]:   %8 = inttoptr i64 %7 to i64* {
	[0x564d8fa3fb98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x564d8fa49a48]:   %17 = trunc i32 %16 to i8 {
	[0x564d8fa7b5c8]:  %18 = trunc i32 %17 to i8
	}

[0x564d8fa49af0]:   store i64 %4, i64* %8, align 8 {
	[0x564d8fa7e260]:  store i64 %4, i64* %9, align 8
	}

[0x564d8fa49b58]:   %9 = load i64, i64* %PC, align 8 {
	[0x564d8f9e9bf8]:  %10 = load i64, i64* %3, align 8
	}

[0x564d8fa49bd0]:   store i64 %7, i64* %RBP, align 8, !tbaa !1257 {
	[0x564d8fa7e370]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x564d8fa49c50]:   %10 = add i64 %6, -24 {
	[0x564d8fa7f330]:  %11 = add i64 %7, -24
	}

[0x564d8fa49cd0]:   store i64 %10, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fa7d8c0]:  store i64 %11, i64* %6, align 8
	}

[0x564d8fa4a390]:   %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x564d8fa80b80]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x564d8fa4a420]:   store i8 %19, i8* %20, align 1, !tbaa !1275 {
	[0x564d8fa9fa90]:  store i8 %20, i8* %21, align 1
	}

[0x564d8fa4a4a0]:   %21 = xor i64 %7, 16 {
	[0x564d8fa80a80]:  %22 = xor i64 %8, 16
	}

[0x564d8fa4a520]:   %22 = xor i64 %21, %10 {
	[0x564d8fa80c60]:  %23 = xor i64 %22, %11
	}

[0x564d8fa4a5a0]:   %23 = lshr i64 %22, 4 {
	[0x564d8faa0310]:  %24 = lshr i64 %23, 4
	}

[0x564d8fa4a608]:   %24 = trunc i64 %23 to i8 {
	[0x564d8fa7d808]:  %25 = trunc i64 %24 to i8
	}

[0x564d8fa4a680]:   %25 = and i8 %24, 1 {
	[0x564d8fa810e0]:  %26 = and i8 %25, 1
	}

[0x564d8fa4a730]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x564d8fa81730]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x564d8fa4a7c0]:   store i8 %25, i8* %26, align 1, !tbaa !1276 {
	[0x564d8fa811b0]:  store i8 %26, i8* %27, align 1
	}

[0x564d8fa4a840]:   %27 = icmp eq i64 %10, 0 {
	[0x564d8fa7fdf0]:  %28 = icmp eq i64 %11, 0
	}

[0x564d8fa4a8a8]:   %28 = zext i1 %27 to i8 {
	[0x564d8fa7cf68]:  %29 = zext i1 %28 to i8
	}

[0x564d8fa4a950]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x564d8fa948b0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x564d8fa4a9e0]:   store i8 %28, i8* %29, align 1, !tbaa !1277 {
	[0x564d8fa81c90]:  store i8 %29, i8* %30, align 1
	}

[0x564d8fa4ae70]:   %30 = lshr i64 %10, 63 {
	[0x564d8fa81da0]:  %31 = lshr i64 %11, 63
	}

[0x564d8fa4aed8]:   %31 = trunc i64 %30 to i8 {
	[0x564d8fa82868]:  %32 = trunc i64 %31 to i8
	}

[0x564d8fa4af80]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x564d8fa82410]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x564d8fa4b010]:   %65 = xor i8 %64, 1 {
	[0x564d8faa2650]:  %66 = xor i8 %65, 1
	}

[0x564d8fa4b090]:   store i8 %65, i8* %20, align 1, !tbaa !1275 {
	[0x564d8faa2830]:  store i8 %66, i8* %21, align 1
	}

[0x564d8fa4b110]:   %66 = xor i64 %55, 16 {
	[0x564d8faa1380]:  %67 = xor i64 %56, 16
	}

[0x564d8fa4b190]:   %67 = xor i64 %66, %57 {
	[0x564d8faa3520]:  %68 = xor i64 %67, %58
	}

[0x564d8fa4b220]:   %34 = xor i64 %30, %33 {
	[0x564d8fa94770]:  %35 = xor i64 %31, %34
	}

[0x564d8fa4b2a0]:   %35 = add nuw nsw i64 %34, %33 {
	[0x564d8faa6750]:  %36 = add nuw nsw i64 %35, %34
	}

[0x564d8fa4b320]:   %36 = icmp eq i64 %35, 2 {
	[0x564d8fa84e60]:  %37 = icmp eq i64 %36, 2
	}

[0x564d8fa4b388]:   %37 = zext i1 %36 to i8 {
	[0x564d8fa82bf8]:  %38 = zext i1 %37 to i8
	}

[0x564d8fa4b430]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x564d8fa89210]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x564d8fa4b4c0]:   store i8 %37, i8* %38, align 1, !tbaa !1279 {
	[0x564d8fa8b680]:  store i8 %38, i8* %39, align 1
	}

[0x564d8fa4b540]:   %39 = add i64 %6, -16 {
	[0x564d8fa8b7b0]:  %40 = add i64 %7, -16
	}

[0x564d8fa4b5a8]:   %40 = load i64, i64* %RDI, align 8 {
	[0x564d8fa82d28]:  %41 = load i64, i64* %RDI.i10, align 8
	}

[0x564d8fa4b620]:   %41 = add i64 %9, 11 {
	[0x564d8fa8b8e0]:  %42 = add i64 %10, 11
	}

[0x564d8fa4b6a0]:   store i64 %41, i64* %PC, align 8 {
	[0x564d8fa8ba10]:  store i64 %42, i64* %3, align 8
	}

[0x564d8fa4b708]:   %42 = inttoptr i64 %39 to i64* {
	[0x564d8fa83448]:  %43 = inttoptr i64 %40 to i64*
	}

[0x564d8fa4b780]:   store i64 %40, i64* %42, align 8 {
	[0x564d8fa8da60]:  store i64 %41, i64* %43, align 8
	}

[0x564d8fa4b7e8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x564d8fa83578]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x564d8fa4b860]:   %44 = add i64 %43, -8 {
	[0x564d8fa8db90]:  %45 = add i64 %44, -8
	}

[0x564d8fa4b8c8]:   %45 = load i64, i64* %PC, align 8 {
	[0x564d8fa836a8]:  %46 = load i64, i64* %3, align 8
	}

[0x564d8fa4b940]:   %46 = add i64 %45, 4 {
	[0x564d8fa8dcc0]:  %47 = add i64 %46, 4
	}

[0x564d8fa4b9c0]:   store i64 %46, i64* %PC, align 8 {
	[0x564d8fa8ddf0]:  store i64 %47, i64* %3, align 8
	}

[0x564d8fa4ba28]:   %47 = inttoptr i64 %44 to i64* {
	[0x564d8fa837d8]:  %48 = inttoptr i64 %45 to i64*
	}

[0x564d8fa4ba88]:   %48 = load i64, i64* %47, align 8 {
	[0x564d8faa6668]:  %49 = load i64, i64* %48, align 8
	}

[0x564d8fa4bb00]:   store i64 %48, i64* %RDI, align 8, !tbaa !1257 {
	[0x564d8fabf850]:  store i64 %49, i64* %RDI.i10, align 8
	}

[0x564d8fa4bb80]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x564d8fb373d0]:  store i8 0, i8* %AL.i, align 1
	}

[0x564d8fa4bd50]:   %49 = add i64 %45, 68 {
	[0x564d8fb39bf0]:  %51 = add i64 %46, 68
	}

[0x564d8fa4bdd0]:   %50 = add i64 %45, 11 {
	[0x564d8fb386e0]:  %52 = add i64 %46, 11
	}

[0x564d8fa4be38]:   %51 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fa844e8]:  %53 = load i64, i64* %6, align 8
	}

[0x564d8fa4beb0]:   %52 = add i64 %51, -8 {
	[0x564d8fb3f130]:  %54 = add i64 %53, -8
	}

[0x564d8fa4bf18]:   %53 = inttoptr i64 %52 to i64* {
	[0x564d8fa822f8]:  %55 = inttoptr i64 %54 to i64*
	}

[0x564d8fa4bf90]:   store i64 %50, i64* %53, align 8 {
	[0x564d8fb3e360]:  store i64 %52, i64* %55, align 8
	}

[0x564d8fa4c010]:   store i64 %52, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fb408d0]:  store i64 %54, i64* %6, align 8
	}

[0x564d8fa4c090]:   store i64 %49, i64* %PC, align 8, !tbaa !1257 {
	[0x564d8fb430c0]:  store i64 %51, i64* %3, align 8
	}

[0x564d8fa4c270]:   %54 = tail call %struct.Memory* @sub_400560_print_it(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2) {
	[0x564d8fa89470]:  %call2_400522 = tail call %struct.Memory.31* @sub_400560.print_it(%struct.State.0* %0, i64 %51, %struct.Memory.31* %2)
	}

[0x564d8fa4c338]:   %55 = load i64, i64* %RSP, align 8 {
	[0x564d8fa85468]:  %56 = load i64, i64* %6, align 8
	}

[0x564d8fa4c398]:   %56 = load i64, i64* %PC, align 8 {
	[0x564d8fa85598]:  %57 = load i64, i64* %3, align 8
	}

[0x564d8fa4c410]:   %57 = add i64 %55, 16 {
	[0x564d8fb41c20]:  %58 = add i64 %56, 16
	}

[0x564d8fa4c490]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8fb44bf0]:  store i64 %58, i64* %6, align 8
	}

[0x564d8fa4c510]:   %58 = icmp ugt i64 %55, -17 {
	[0x564d8fb48fc0]:  %59 = icmp ugt i64 %56, -17
	}

[0x564d8fa4c578]:   %59 = zext i1 %58 to i8 {
	[0x564d8fa85f18]:  %60 = zext i1 %59 to i8
	}

[0x564d8fa4c5f0]:   store i8 %59, i8* %13, align 1, !tbaa !1261 {
	[0x564d8fa399c0]:  store i8 %60, i8* %14, align 1
	}

[0x564d8fa4c658]:   %60 = trunc i64 %57 to i32 {
	[0x564d8fa86048]:  %61 = trunc i64 %58 to i32
	}

[0x564d8fa4c6d0]:   %61 = and i32 %60, 255 {
	[0x564d8f9e6d30]:  %62 = and i32 %61, 255
	}

[0x564d8fa4c770]:   %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9 {
	[0x564d8faa1d90]:  %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
	}

[0x564d8fa4c838]:   %63 = trunc i32 %62 to i8 {
	[0x564d8fa86508]:  %64 = trunc i32 %63 to i8
	}

[0x564d8fa4c8b0]:   %64 = and i8 %63, 1 {
	[0x564d8f9e1670]:  %65 = and i8 %64, 1
	}

[0x564d8fa4cd40]:   %68 = lshr i64 %67, 4 {
	[0x564d8faa4ff0]:  %69 = lshr i64 %68, 4
	}

[0x564d8fa4cda8]:   %69 = trunc i64 %68 to i8 {
	[0x564d8fa86768]:  %70 = trunc i64 %69 to i8
	}

[0x564d8fa4ce20]:   %70 = and i8 %69, 1 {
	[0x564d8faa5380]:  %71 = and i8 %70, 1
	}

[0x564d8fa4cea0]:   store i8 %70, i8* %26, align 1, !tbaa !1276 {
	[0x564d8faa5cb0]:  store i8 %71, i8* %27, align 1
	}

[0x564d8fa4cf20]:   %71 = icmp eq i64 %57, 0 {
	[0x564d8faa4da0]:  %72 = icmp eq i64 %58, 0
	}

[0x564d8fa4cf88]:   %72 = zext i1 %71 to i8 {
	[0x564d8fa87a68]:  %73 = zext i1 %72 to i8
	}

[0x564d8fa4d000]:   store i8 %72, i8* %29, align 1, !tbaa !1277 {
	[0x564d8faa6230]:  store i8 %73, i8* %30, align 1
	}

[0x564d8fa4d080]:   %73 = lshr i64 %57, 63 {
	[0x564d8fa7f7f0]:  %74 = lshr i64 %58, 63
	}

[0x564d8fa4d0e8]:   %74 = trunc i64 %73 to i8 {
	[0x564d8fa88648]:  %75 = trunc i64 %74 to i8
	}

[0x564d8fa4d160]:   store i8 %74, i8* %32, align 1, !tbaa !1278 {
	[0x564d8faa6870]:  store i8 %75, i8* %33, align 1
	}

[0x564d8fa4d1e0]:   %75 = lshr i64 %55, 63 {
	[0x564d8faa8ea0]:  %76 = lshr i64 %56, 63
	}

[0x564d8fa4d260]:   %76 = xor i64 %73, %75 {
	[0x564d8faa93b0]:  %77 = xor i64 %74, %76
	}

[0x564d8fa4d2e0]:   %77 = add nuw nsw i64 %76, %73 {
	[0x564d8faa9a00]:  %78 = add nuw nsw i64 %77, %74
	}

[0x564d8fa4d360]:   %78 = icmp eq i64 %77, 2 {
	[0x564d8faa9af0]:  %79 = icmp eq i64 %78, 2
	}

[0x564d8fa4d3c8]:   %79 = zext i1 %78 to i8 {
	[0x564d8fa888a8]:  %80 = zext i1 %79 to i8
	}

[0x564d8fa4d440]:   store i8 %79, i8* %38, align 1, !tbaa !1279 {
	[0x564d8faa04f0]:  store i8 %80, i8* %39, align 1
	}

[0x564d8fa4d4c0]:   %80 = add i64 %56, 5 {
	[0x564d8faa0670]:  %81 = add i64 %57, 5
	}

[0x564d8fa4d540]:   store i64 %80, i64* %PC, align 8 {
	[0x564d8faa0a00]:  store i64 %81, i64* %3, align 8
	}

[0x564d8fa4d5c0]:   %81 = add i64 %55, 24 {
	[0x564d8faa07f0]:  %82 = add i64 %56, 24
	}

[0x564d8fa4d628]:   %82 = inttoptr i64 %57 to i64* {
	[0x564d8fa889d8]:  %83 = inttoptr i64 %58 to i64*
	}

[0x564d8fa4d688]:   %83 = load i64, i64* %82, align 8 {
	[0x564d8fa88b08]:  %84 = load i64, i64* %83, align 8
	}

[0x564d8fa4d700]:   store i64 %83, i64* %RBP, align 8, !tbaa !1257 {
	[0x564d8faabd10]:  store i64 %84, i64* %RBP.i, align 8
	}

[0x564d8fa4d780]:   store i64 %81, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8faac520]:  store i64 %82, i64* %6, align 8
	}

[0x564d8fa4d800]:   %84 = add i64 %56, 6 {
	[0x564d8faac220]:  %85 = add i64 %57, 6
	}

[0x564d8fa4d880]:   store i64 %84, i64* %PC, align 8 {
	[0x564d8faab870]:  store i64 %85, i64* %3, align 8
	}

[0x564d8fa4d8e8]:   %85 = inttoptr i64 %81 to i64* {
	[0x564d8fa88c38]:  %86 = inttoptr i64 %82 to i64*
	}

[0x564d8fa4d948]:   %86 = load i64, i64* %85, align 8 {
	[0x564d8fa88e98]:  %87 = load i64, i64* %86, align 8
	}

[0x564d8fa4d9c0]:   store i64 %86, i64* %PC, align 8, !tbaa !1257 {
	[0x564d8faacb10]:  store i64 %87, i64* %3, align 8
	}

[0x564d8fa4da40]:   %87 = add i64 %55, 32 {
	[0x564d8faaea50]:  %88 = add i64 %56, 32
	}

[0x564d8fa4dac0]:   store i64 %87, i64* %RSP, align 8, !tbaa !1257 {
	[0x564d8faaede0]:  store i64 %88, i64* %6, align 8
	}

[0x564d8fa4db28]:   ret %struct.Memory* %54 {
	[0x564d8fa88fc8]:  ret %struct.Memory.31* %call2_400522
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x564d8fa3b740]: block_400510 {
	[0x564d8fa9e0e0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [stderr_driver] from mcsema/test.opt.ll
Extracting function [stderr_driver] from mcsema/test.proposed.opt.ll
Matcher Done...
