Writing '/tmp/tmpr8h0dwma.dot'...
Writing '/tmp/tmpr8h0dwma.dot':Done

Reading LLVM: /tmp/tmp69jy3wn1-query.ll
Extracting function [stderr_driver] from /tmp/tmp69jy3wn1-query.ll
Dot file generated!
Writing '/tmp/tmpslk452__.dot'...
Writing '/tmp/tmpslk452__.dot':Done

Reading LLVM: /tmp/tmpfjcwfbjd-target.ll
Extracting function [stderr_driver] from /tmp/tmpfjcwfbjd-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %RDI.i10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 49 %40 = add i64 %7, -16
- 50 %41 = load i64, i64* %RDI.i10, align 8
- 51 %42 = add i64 %10, 11
- 52 store i64 %42, i64* %3, align 8
- 53 %43 = inttoptr i64 %40 to i64*
- 54 store i64 %41, i64* %43, align 8
- 55 %44 = load i64, i64* %RBP.i, align 8
- 56 %45 = add i64 %44, -8
- 57 %46 = load i64, i64* %3, align 8
- 58 %47 = add i64 %46, 4
- 59 store i64 %47, i64* %3, align 8
- 60 %48 = inttoptr i64 %45 to i64*
- 61 %49 = load i64, i64* %48, align 8
- 62 store i64 %49, i64* %RDI.i10, align 8
- 63 %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 64 %AL.i = bitcast %union.anon* %50 to i8*
- 65 store i8 0, i8* %AL.i, align 1
- 66 %51 = add i64 %46, 68
- 67 %52 = add i64 %46, 11
- 68 %53 = load i64, i64* %6, align 8
- 69 %54 = add i64 %53, -8
- 70 %55 = inttoptr i64 %54 to i64*
- 71 store i64 %52, i64* %55, align 8
- 72 store i64 %54, i64* %6, align 8
- 73 store i64 %51, i64* %3, align 8
- 74 %call2_400572 = tail call %struct.Memory* @sub_4005b0.print_it(%struct.State* %0, i64 %51, %struct.Memory* %2)
- 75 %56 = load i64, i64* %6, align 8
- 76 %57 = load i64, i64* %3, align 8
- 77 %58 = add i64 %56, 16
- 78 store i64 %58, i64* %6, align 8
- 79 %59 = icmp ugt i64 %56, -17
- 80 %60 = zext i1 %59 to i8
- 81 store i8 %60, i8* %14, align 1
- 82 %61 = trunc i64 %58 to i32
- 83 %62 = and i32 %61, 255
- 84 %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
- 85 %64 = trunc i32 %63 to i8
- 86 %65 = and i8 %64, 1
- 87 %66 = xor i8 %65, 1
- 88 store i8 %66, i8* %21, align 1
- 89 %67 = xor i64 %56, 16
- 90 %68 = xor i64 %67, %58
- 91 %69 = lshr i64 %68, 4
- 92 %70 = trunc i64 %69 to i8
- 93 %71 = and i8 %70, 1
- 94 store i8 %71, i8* %27, align 1
- 95 %72 = icmp eq i64 %58, 0
- 96 %73 = zext i1 %72 to i8
- 97 store i8 %73, i8* %30, align 1
- 98 %74 = lshr i64 %58, 63
- 99 %75 = trunc i64 %74 to i8
- 100 store i8 %75, i8* %33, align 1
- 101 %76 = lshr i64 %56, 63
- 102 %77 = xor i64 %74, %76
- 103 %78 = add nuw nsw i64 %77, %74
- 104 %79 = icmp eq i64 %78, 2
- 105 %80 = zext i1 %79 to i8
- 106 store i8 %80, i8* %39, align 1
- 107 %81 = add i64 %57, 5
- 108 store i64 %81, i64* %3, align 8
- 109 %82 = add i64 %56, 24
- 110 %83 = inttoptr i64 %58 to i64*
- 111 %84 = load i64, i64* %83, align 8
- 112 store i64 %84, i64* %RBP.i, align 8
- 113 store i64 %82, i64* %6, align 8
- 114 %85 = add i64 %57, 6
- 115 store i64 %85, i64* %3, align 8
- 116 %86 = inttoptr i64 %82 to i64*
- 117 %87 = load i64, i64* %86, align 8
- 118 store i64 %87, i64* %3, align 8
- 119 %88 = add i64 %56, 32
- 120 store i64 %88, i64* %6, align 8
- 121 ret %struct.Memory* %call2_400572
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f5948d378>, {0: {0}, 1: {5}, 2: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 3: {7}, 4: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 5: {4}, 6: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 7: {10, 58, 69}, 8: {70, 11, 110, 116, 55, 62}, 9: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 10: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 11: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 12: {15}, 13: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 14: {17}, 15: {96, 37, 105, 48, 80, 18}, 16: {19}, 17: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 18: {32, 99, 41, 82, 21, 85, 24, 92}, 19: {83, 22}, 20: {74, 84, 23}, 21: {32, 99, 41, 82, 21, 85, 24, 92}, 22: {25, 93, 86, 33}, 23: {26, 87}, 24: {27}, 25: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 26: {89, 29}, 27: {90, 102, 45, 30}, 28: {91, 31}, 29: {32, 99, 41, 82, 21, 85, 24, 92}, 30: {25, 93, 86, 33}, 31: {34}, 32: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 33: {36, 95}, 34: {96, 37, 105, 48, 80, 18}, 35: {38}, 36: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 37: {40, 98, 44, 101}, 38: {32, 99, 41, 82, 21, 85, 24, 92}, 39: {42}, 40: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 41: {40, 98, 44, 101}, 42: {90, 102, 45, 30}, 43: {46, 103}, 44: {104, 47}, 45: {96, 37, 105, 48, 80, 18}, 46: {49}, 47: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 48: {3}, 49: {51}, 50: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 51: {67, 53}, 52: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 53: {70, 11, 110, 116, 55, 62}, 54: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 55: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 56: {10, 58, 69}, 57: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 58: {60}, 59: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 60: {70, 11, 110, 116, 55, 62}, 61: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 62: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 63: {1}, 64: {2}, 65: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 66: {66}, 67: {67, 53}, 68: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 69: {10, 58, 69}, 70: {70, 11, 110, 116, 55, 62}, 71: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 72: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 73: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 74: {74, 84, 23}, 75: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 76: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 77: {77}, 78: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 79: {79}, 80: {96, 37, 105, 48, 80, 18}, 81: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 82: {32, 99, 41, 82, 21, 85, 24, 92}, 83: {83, 22}, 84: {74, 84, 23}, 85: {32, 99, 41, 82, 21, 85, 24, 92}, 86: {25, 93, 86, 33}, 87: {26, 87}, 88: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 89: {89, 29}, 90: {90, 102, 45, 30}, 91: {91, 31}, 92: {32, 99, 41, 82, 21, 85, 24, 92}, 93: {25, 93, 86, 33}, 94: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 95: {36, 95}, 96: {96, 37, 105, 48, 80, 18}, 97: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 98: {40, 98, 44, 101}, 99: {32, 99, 41, 82, 21, 85, 24, 92}, 100: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 101: {40, 98, 44, 101}, 102: {90, 102, 45, 30}, 103: {46, 103}, 104: {104, 47}, 105: {96, 37, 105, 48, 80, 18}, 106: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 107: {107}, 108: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 109: {109}, 110: {70, 11, 110, 116, 55, 62}, 111: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 112: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 113: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 114: {114}, 115: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 116: {70, 11, 110, 116, 55, 62}, 117: {68, 6, 9, 75, 76, 13, 111, 52, 117, 57, 59, 63}, 118: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 119: {119}, 120: {8, 12, 14, 16, 20, 28, 35, 39, 43, 50, 54, 56, 61, 64, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 121: {121}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f5948d378>, {0: {0}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {4}, 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {14}, 12: {15}, 13: {16}, 14: {17}, 15: {18}, 16: {19}, 17: {20}, 18: {21}, 19: {22}, 20: {23}, 21: {24}, 22: {25}, 23: {26}, 24: {27}, 25: {28}, 26: {29}, 27: {30}, 28: {31}, 29: {32}, 30: {33}, 31: {34}, 32: {35}, 33: {36}, 34: {37}, 35: {38}, 36: {39}, 37: {40}, 38: {41}, 39: {42}, 40: {43}, 41: {44}, 42: {45}, 43: {46}, 44: {47}, 45: {48}, 46: {49}, 47: {50}, 48: {3}, 49: {51}, 50: {52}, 51: {53}, 52: {54}, 53: {55}, 54: {56}, 55: {57}, 56: {58}, 57: {59}, 58: {60}, 59: {61}, 60: {62}, 61: {63}, 62: {64}, 63: {1}, 64: {2}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 add add
EXACT 50 load load
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 load load
EXACT 62 store store
EXACT 63 getelementptr getelementptr
EXACT 64 bitcast bitcast
EXACT 65 store store
EXACT 66 add add
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 store store
EXACT 73 store store
EXACT 74 tail tail
EXACT 75 load load
EXACT 76 load load
EXACT 77 add add
EXACT 78 store store
EXACT 79 icmp icmp
EXACT 80 zext zext
EXACT 81 store store
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 tail tail
EXACT 85 trunc trunc
EXACT 86 and and
EXACT 87 xor xor
EXACT 88 store store
EXACT 89 xor xor
EXACT 90 xor xor
EXACT 91 lshr lshr
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 store store
EXACT 95 icmp icmp
EXACT 96 zext zext
EXACT 97 store store
EXACT 98 lshr lshr
EXACT 99 trunc trunc
EXACT 100 store store
EXACT 101 lshr lshr
EXACT 102 xor xor
EXACT 103 add add
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 add add
EXACT 108 store store
EXACT 109 add add
EXACT 110 inttoptr inttoptr
EXACT 111 load load
EXACT 112 store store
EXACT 113 store store
EXACT 114 add add
EXACT 115 store store
EXACT 116 inttoptr inttoptr
EXACT 117 load load
EXACT 118 store store
EXACT 119 add add
EXACT 120 store store
EXACT 121 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %4 = load i64, i64* %RBP, align 8
- 7 %5 = add i64 %1, 1
- 8 store i64 %5, i64* %PC, align 8
- 9 %6 = load i64, i64* %RSP, align 8
- 10 %7 = add i64 %6, -8
- 11 %8 = inttoptr i64 %7 to i64*
- 12 store i64 %4, i64* %8, align 8
- 13 %9 = load i64, i64* %PC, align 8
- 14 store i64 %7, i64* %RBP, align 8
- 15 %10 = add i64 %6, -24
- 16 store i64 %10, i64* %RSP, align 8
- 17 %11 = icmp ult i64 %7, 16
- 18 %12 = zext i1 %11 to i8
- 19 %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 20 store i8 %12, i8* %13, align 1
- 21 %14 = trunc i64 %10 to i32
- 22 %15 = and i32 %14, 255
- 23 %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
- 24 %17 = trunc i32 %16 to i8
- 25 %18 = and i8 %17, 1
- 26 %19 = xor i8 %18, 1
- 27 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 28 store i8 %19, i8* %20, align 1
- 29 %21 = xor i64 %7, 16
- 30 %22 = xor i64 %21, %10
- 31 %23 = lshr i64 %22, 4
- 32 %24 = trunc i64 %23 to i8
- 33 %25 = and i8 %24, 1
- 34 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 35 store i8 %25, i8* %26, align 1
- 36 %27 = icmp eq i64 %10, 0
- 37 %28 = zext i1 %27 to i8
- 38 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 39 store i8 %28, i8* %29, align 1
- 40 %30 = lshr i64 %10, 63
- 41 %31 = trunc i64 %30 to i8
- 42 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 43 store i8 %31, i8* %32, align 1
- 44 %33 = lshr i64 %7, 63
- 45 %34 = xor i64 %30, %33
- 46 %35 = add nuw nsw i64 %34, %33
- 47 %36 = icmp eq i64 %35, 2
- 48 %37 = zext i1 %36 to i8
- 49 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 50 store i8 %37, i8* %38, align 1
- 51 %39 = add i64 %6, -16
- 52 %40 = load i64, i64* %RDI, align 8
- 53 %41 = add i64 %9, 11
- 54 store i64 %41, i64* %PC, align 8
- 55 %42 = inttoptr i64 %39 to i64*
- 56 store i64 %40, i64* %42, align 8
- 57 %43 = load i64, i64* %RBP, align 8
- 58 %44 = add i64 %43, -8
- 59 %45 = load i64, i64* %PC, align 8
- 60 %46 = add i64 %45, 4
- 61 store i64 %46, i64* %PC, align 8
- 62 %47 = inttoptr i64 %44 to i64*
- 63 %48 = load i64, i64* %47, align 8
- 64 store i64 %48, i64* %RDI, align 8
- 65 store i8 0, i8* %AL, align 1
- 66 %49 = add i64 %45, 68
- 67 %50 = add i64 %45, 11
- 68 %51 = load i64, i64* %RSP, align 8
- 69 %52 = add i64 %51, -8
- 70 %53 = inttoptr i64 %52 to i64*
- 71 store i64 %50, i64* %53, align 8
- 72 store i64 %52, i64* %RSP, align 8
- 73 store i64 %49, i64* %PC, align 8
- 74 %54 = tail call %struct.Memory* @sub_4005b0_print_it_renamed_(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2)
- 75 %55 = load i64, i64* %RSP, align 8
- 76 %56 = load i64, i64* %PC, align 8
- 77 %57 = add i64 %55, 16
- 78 store i64 %57, i64* %RSP, align 8
- 79 %58 = icmp ugt i64 %55, -17
- 80 %59 = zext i1 %58 to i8
- 81 store i8 %59, i8* %13, align 1
- 82 %60 = trunc i64 %57 to i32
- 83 %61 = and i32 %60, 255
- 84 %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #12
- 85 %63 = trunc i32 %62 to i8
- 86 %64 = and i8 %63, 1
- 87 %65 = xor i8 %64, 1
- 88 store i8 %65, i8* %20, align 1
- 89 %66 = xor i64 %55, 16
- 90 %67 = xor i64 %66, %57
- 91 %68 = lshr i64 %67, 4
- 92 %69 = trunc i64 %68 to i8
- 93 %70 = and i8 %69, 1
- 94 store i8 %70, i8* %26, align 1
- 95 %71 = icmp eq i64 %57, 0
- 96 %72 = zext i1 %71 to i8
- 97 store i8 %72, i8* %29, align 1
- 98 %73 = lshr i64 %57, 63
- 99 %74 = trunc i64 %73 to i8
- 100 store i8 %74, i8* %32, align 1
- 101 %75 = lshr i64 %55, 63
- 102 %76 = xor i64 %73, %75
- 103 %77 = add nuw nsw i64 %76, %73
- 104 %78 = icmp eq i64 %77, 2
- 105 %79 = zext i1 %78 to i8
- 106 store i8 %79, i8* %38, align 1
- 107 %80 = add i64 %56, 5
- 108 store i64 %80, i64* %PC, align 8
- 109 %81 = add i64 %55, 24
- 110 %82 = inttoptr i64 %57 to i64*
- 111 %83 = load i64, i64* %82, align 8
- 112 store i64 %83, i64* %RBP, align 8
- 113 store i64 %81, i64* %RSP, align 8
- 114 %84 = add i64 %56, 6
- 115 store i64 %84, i64* %PC, align 8
- 116 %85 = inttoptr i64 %81 to i64*
- 117 %86 = load i64, i64* %85, align 8
- 118 store i64 %86, i64* %PC, align 8
- 119 %87 = add i64 %55, 32
- 120 store i64 %87, i64* %RSP, align 8
- 121 ret %struct.Memory* %54
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f5948d510>, {0: {0}, 1: {63}, 2: {64}, 3: {48}, 4: {5}, 5: {1}, 6: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 7: {3}, 8: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 9: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 10: {56, 69, 7}, 11: {70, 8, 110, 116, 53, 60}, 12: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 13: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 14: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 15: {12}, 16: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 17: {14}, 18: {96, 34, 105, 45, 15, 80}, 19: {16}, 20: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 21: {99, 38, 82, 18, 21, 85, 92, 29}, 22: {83, 19}, 23: {74, 20, 84}, 24: {99, 38, 82, 18, 21, 85, 92, 29}, 25: {86, 93, 22, 30}, 26: {87, 23}, 27: {24}, 28: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 29: {89, 26}, 30: {42, 27, 90, 102}, 31: {91, 28}, 32: {99, 38, 82, 18, 21, 85, 92, 29}, 33: {86, 93, 22, 30}, 34: {31}, 35: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 36: {33, 95}, 37: {96, 34, 105, 45, 15, 80}, 38: {35}, 39: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 40: {41, 98, 101, 37}, 41: {99, 38, 82, 18, 21, 85, 92, 29}, 42: {39}, 43: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 44: {41, 98, 101, 37}, 45: {42, 27, 90, 102}, 46: {43, 103}, 47: {104, 44}, 48: {96, 34, 105, 45, 15, 80}, 49: {46}, 50: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 51: {49}, 52: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 53: {67, 51}, 54: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 55: {70, 8, 110, 116, 53, 60}, 56: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 57: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 58: {56, 69, 7}, 59: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 60: {58}, 61: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 62: {70, 8, 110, 116, 53, 60}, 63: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 64: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 65: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 66: {66}, 67: {67, 51}, 68: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 69: {56, 69, 7}, 70: {70, 8, 110, 116, 53, 60}, 71: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 72: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 73: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 74: {74, 20, 84}, 75: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 76: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 77: {77}, 78: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 79: {79}, 80: {96, 34, 105, 45, 15, 80}, 81: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 82: {99, 38, 82, 18, 21, 85, 92, 29}, 83: {83, 19}, 84: {74, 20, 84}, 85: {99, 38, 82, 18, 21, 85, 92, 29}, 86: {86, 93, 22, 30}, 87: {87, 23}, 88: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 89: {89, 26}, 90: {42, 27, 90, 102}, 91: {91, 28}, 92: {99, 38, 82, 18, 21, 85, 92, 29}, 93: {86, 93, 22, 30}, 94: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 95: {33, 95}, 96: {96, 34, 105, 45, 15, 80}, 97: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 98: {41, 98, 101, 37}, 99: {99, 38, 82, 18, 21, 85, 92, 29}, 100: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 101: {41, 98, 101, 37}, 102: {42, 27, 90, 102}, 103: {43, 103}, 104: {104, 44}, 105: {96, 34, 105, 45, 15, 80}, 106: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 107: {107}, 108: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 109: {109}, 110: {70, 8, 110, 116, 53, 60}, 111: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 112: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 113: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 114: {114}, 115: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 116: {70, 8, 110, 116, 53, 60}, 117: {2, 68, 6, 10, 75, 76, 111, 50, 117, 55, 57, 61}, 118: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 119: {119}, 120: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 52, 54, 59, 62, 65, 71, 72, 73, 78, 81, 88, 94, 97, 100, 106, 108, 112, 113, 115, 118, 120}, 121: {121}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9f5948d510>, {0: {0}, 1: {63}, 2: {64}, 3: {48}, 4: {5}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: {11}, 15: {12}, 16: {13}, 17: {14}, 18: {15}, 19: {16}, 20: {17}, 21: {18}, 22: {19}, 23: {20}, 24: {21}, 25: {22}, 26: {23}, 27: {24}, 28: {25}, 29: {26}, 30: {27}, 31: {28}, 32: {29}, 33: {30}, 34: {31}, 35: {32}, 36: {33}, 37: {34}, 38: {35}, 39: {36}, 40: {37}, 41: {38}, 42: {39}, 43: {40}, 44: {41}, 45: {42}, 46: {43}, 47: {44}, 48: {45}, 49: {46}, 50: {47}, 51: {49}, 52: {50}, 53: {51}, 54: {52}, 55: {53}, 56: {54}, 57: {55}, 58: {56}, 59: {57}, 60: {58}, 61: {59}, 62: {60}, 63: {61}, 64: {62}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 store store
EXACT 17 icmp icmp
EXACT 18 zext zext
EXACT 19 getelementptr getelementptr
EXACT 20 store store
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 tail tail
EXACT 24 trunc trunc
EXACT 25 and and
EXACT 26 xor xor
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 xor xor
EXACT 30 xor xor
EXACT 31 lshr lshr
EXACT 32 trunc trunc
EXACT 33 and and
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 icmp icmp
EXACT 37 zext zext
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 trunc trunc
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 xor xor
EXACT 46 add add
EXACT 47 icmp icmp
EXACT 48 zext zext
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 add add
EXACT 52 load load
EXACT 53 add add
EXACT 54 store store
EXACT 55 inttoptr inttoptr
EXACT 56 store store
EXACT 57 load load
EXACT 58 add add
EXACT 59 load load
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 load load
EXACT 64 store store
EXACT 65 store store
EXACT 66 add add
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 store store
EXACT 73 store store
EXACT 74 tail tail
EXACT 75 load load
EXACT 76 load load
EXACT 77 add add
EXACT 78 store store
EXACT 79 icmp icmp
EXACT 80 zext zext
EXACT 81 store store
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 tail tail
EXACT 85 trunc trunc
EXACT 86 and and
EXACT 87 xor xor
EXACT 88 store store
EXACT 89 xor xor
EXACT 90 xor xor
EXACT 91 lshr lshr
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 store store
EXACT 95 icmp icmp
EXACT 96 zext zext
EXACT 97 store store
EXACT 98 lshr lshr
EXACT 99 trunc trunc
EXACT 100 store store
EXACT 101 lshr lshr
EXACT 102 xor xor
EXACT 103 add add
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 add add
EXACT 108 store store
EXACT 109 add add
EXACT 110 inttoptr inttoptr
EXACT 111 load load
EXACT 112 store store
EXACT 113 store store
EXACT 114 add add
EXACT 115 store store
EXACT 116 inttoptr inttoptr
EXACT 117 load load
EXACT 118 store store
EXACT 119 add add
EXACT 120 store store
EXACT 121 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%RDI.i10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%40 = add i64 %7, -16', '%41 = load i64, i64* %RDI.i10, align 8', '%42 = add i64 %10, 11', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -8', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %45 to i64*', '%49 = load i64, i64* %48, align 8', 'store i64 %49, i64* %RDI.i10, align 8', '%50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %50 to i8*', 'store i8 0, i8* %AL.i, align 1', '%51 = add i64 %46, 68', '%52 = add i64 %46, 11', '%53 = load i64, i64* %6, align 8', '%54 = add i64 %53, -8', '%55 = inttoptr i64 %54 to i64*', 'store i64 %52, i64* %55, align 8', 'store i64 %54, i64* %6, align 8', 'store i64 %51, i64* %3, align 8', '%call2_400572 = tail call %struct.Memory* @sub_4005b0.print_it(%struct.State* %0, i64 %51, %struct.Memory* %2)', '%56 = load i64, i64* %6, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %56, 16', 'store i64 %58, i64* %6, align 8', '%59 = icmp ugt i64 %56, -17', '%60 = zext i1 %59 to i8', 'store i8 %60, i8* %14, align 1', '%61 = trunc i64 %58 to i32', '%62 = and i32 %61, 255', '%63 = tail call i32 @llvm.ctpop.i32(i32 %62)', '%64 = trunc i32 %63 to i8', '%65 = and i8 %64, 1', '%66 = xor i8 %65, 1', 'store i8 %66, i8* %21, align 1', '%67 = xor i64 %56, 16', '%68 = xor i64 %67, %58', '%69 = lshr i64 %68, 4', '%70 = trunc i64 %69 to i8', '%71 = and i8 %70, 1', 'store i8 %71, i8* %27, align 1', '%72 = icmp eq i64 %58, 0', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %30, align 1', '%74 = lshr i64 %58, 63', '%75 = trunc i64 %74 to i8', 'store i8 %75, i8* %33, align 1', '%76 = lshr i64 %56, 63', '%77 = xor i64 %74, %76', '%78 = add nuw nsw i64 %77, %74', '%79 = icmp eq i64 %78, 2', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %39, align 1', '%81 = add i64 %57, 5', 'store i64 %81, i64* %3, align 8', '%82 = add i64 %56, 24', '%83 = inttoptr i64 %58 to i64*', '%84 = load i64, i64* %83, align 8', 'store i64 %84, i64* %RBP.i, align 8', 'store i64 %82, i64* %6, align 8', '%85 = add i64 %57, 6', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %82 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %3, align 8', '%88 = add i64 %56, 32', 'store i64 %88, i64* %6, align 8', 'ret %struct.Memory* %call2_400572'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %RDI.i10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %40 = add i64 %7, -16
Found line to remove! %41 = load i64, i64* %RDI.i10, align 8
Found line to remove! %42 = add i64 %10, 11
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %45 to i64*
Found line to remove! %49 = load i64, i64* %48, align 8
Found line to remove! store i64 %49, i64* %RDI.i10, align 8
Found line to remove! %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %50 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %51 = add i64 %46, 68
Found line to remove! %52 = add i64 %46, 11
Found line to remove! %53 = load i64, i64* %6, align 8
Found line to remove! %54 = add i64 %53, -8
Found line to remove! %55 = inttoptr i64 %54 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! store i64 %54, i64* %6, align 8
Found line to remove! store i64 %51, i64* %3, align 8
Found line to remove! %call2_400572 = tail call %struct.Memory* @sub_4005b0.print_it(%struct.State* %0, i64 %51, %struct.Memory* %2)
Found line to remove! %56 = load i64, i64* %6, align 8
Found line to remove! %57 = load i64, i64* %3, align 8
Found line to remove! %58 = add i64 %56, 16
Found line to remove! store i64 %58, i64* %6, align 8
Found line to remove! %59 = icmp ugt i64 %56, -17
Found line to remove! %60 = zext i1 %59 to i8
Found line to remove! store i8 %60, i8* %14, align 1
Found line to remove! %61 = trunc i64 %58 to i32
Found line to remove! %62 = and i32 %61, 255
Found line to remove! %63 = tail call i32 @llvm.ctpop.i32(i32 %62)
Found line to remove! %64 = trunc i32 %63 to i8
Found line to remove! %65 = and i8 %64, 1
Found line to remove! %66 = xor i8 %65, 1
Found line to remove! store i8 %66, i8* %21, align 1
Found line to remove! %67 = xor i64 %56, 16
Found line to remove! %68 = xor i64 %67, %58
Found line to remove! %69 = lshr i64 %68, 4
Found line to remove! %70 = trunc i64 %69 to i8
Found line to remove! %71 = and i8 %70, 1
Found line to remove! store i8 %71, i8* %27, align 1
Found line to remove! %72 = icmp eq i64 %58, 0
Found line to remove! %73 = zext i1 %72 to i8
Found line to remove! store i8 %73, i8* %30, align 1
Found line to remove! %74 = lshr i64 %58, 63
Found line to remove! %75 = trunc i64 %74 to i8
Found line to remove! store i8 %75, i8* %33, align 1
Found line to remove! %76 = lshr i64 %56, 63
Found line to remove! %77 = xor i64 %74, %76
Found line to remove! %78 = add nuw nsw i64 %77, %74
Found line to remove! %79 = icmp eq i64 %78, 2
Found line to remove! %80 = zext i1 %79 to i8
Found line to remove! store i8 %80, i8* %39, align 1
Found line to remove! %81 = add i64 %57, 5
Found line to remove! store i64 %81, i64* %3, align 8
Found line to remove! %82 = add i64 %56, 24
Found line to remove! %83 = inttoptr i64 %58 to i64*
Found line to remove! %84 = load i64, i64* %83, align 8
Found line to remove! store i64 %84, i64* %RBP.i, align 8
Found line to remove! store i64 %82, i64* %6, align 8
Found line to remove! %85 = add i64 %57, 6
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! %86 = inttoptr i64 %82 to i64*
Found line to remove! %87 = load i64, i64* %86, align 8
Found line to remove! store i64 %87, i64* %3, align 8
Found line to remove! %88 = add i64 %56, 32
Found line to remove! store i64 %88, i64* %6, align 8
Found line to remove! ret %struct.Memory* %call2_400572
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = load i64, i64* %RSP, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %4, i64* %8, align 8', '%9 = load i64, i64* %PC, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -24', 'store i64 %10, i64* %RSP, align 8', '%11 = icmp ult i64 %7, 16', '%12 = zext i1 %11 to i8', '%13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %12, i8* %13, align 1', '%14 = trunc i64 %10 to i32', '%15 = and i32 %14, 255', '%16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12', '%17 = trunc i32 %16 to i8', '%18 = and i8 %17, 1', '%19 = xor i8 %18, 1', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %19, i8* %20, align 1', '%21 = xor i64 %7, 16', '%22 = xor i64 %21, %10', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %10, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %10, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %7, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %6, -16', '%40 = load i64, i64* %RDI, align 8', '%41 = add i64 %9, 11', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 4', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %44 to i64*', '%48 = load i64, i64* %47, align 8', 'store i64 %48, i64* %RDI, align 8', 'store i8 0, i8* %AL, align 1', '%49 = add i64 %45, 68', '%50 = add i64 %45, 11', '%51 = load i64, i64* %RSP, align 8', '%52 = add i64 %51, -8', '%53 = inttoptr i64 %52 to i64*', 'store i64 %50, i64* %53, align 8', 'store i64 %52, i64* %RSP, align 8', 'store i64 %49, i64* %PC, align 8', '%54 = tail call %struct.Memory* @sub_4005b0_print_it_renamed_(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2)', '%55 = load i64, i64* %RSP, align 8', '%56 = load i64, i64* %PC, align 8', '%57 = add i64 %55, 16', 'store i64 %57, i64* %RSP, align 8', '%58 = icmp ugt i64 %55, -17', '%59 = zext i1 %58 to i8', 'store i8 %59, i8* %13, align 1', '%60 = trunc i64 %57 to i32', '%61 = and i32 %60, 255', '%62 = tail call i32 @llvm.ctpop.i32(i32 %61) #12', '%63 = trunc i32 %62 to i8', '%64 = and i8 %63, 1', '%65 = xor i8 %64, 1', 'store i8 %65, i8* %20, align 1', '%66 = xor i64 %55, 16', '%67 = xor i64 %66, %57', '%68 = lshr i64 %67, 4', '%69 = trunc i64 %68 to i8', '%70 = and i8 %69, 1', 'store i8 %70, i8* %26, align 1', '%71 = icmp eq i64 %57, 0', '%72 = zext i1 %71 to i8', 'store i8 %72, i8* %29, align 1', '%73 = lshr i64 %57, 63', '%74 = trunc i64 %73 to i8', 'store i8 %74, i8* %32, align 1', '%75 = lshr i64 %55, 63', '%76 = xor i64 %73, %75', '%77 = add nuw nsw i64 %76, %73', '%78 = icmp eq i64 %77, 2', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %38, align 1', '%80 = add i64 %56, 5', 'store i64 %80, i64* %PC, align 8', '%81 = add i64 %55, 24', '%82 = inttoptr i64 %57 to i64*', '%83 = load i64, i64* %82, align 8', 'store i64 %83, i64* %RBP, align 8', 'store i64 %81, i64* %RSP, align 8', '%84 = add i64 %56, 6', 'store i64 %84, i64* %PC, align 8', '%85 = inttoptr i64 %81 to i64*', '%86 = load i64, i64* %85, align 8', 'store i64 %86, i64* %PC, align 8', '%87 = add i64 %55, 32', 'store i64 %87, i64* %RSP, align 8', 'ret %struct.Memory* %54'])
Keep: block_400560:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %PC, align 8
Found line to remove! %6 = load i64, i64* %RSP, align 8
Found line to remove! %7 = add i64 %6, -8
Found line to remove! %8 = inttoptr i64 %7 to i64*
Found line to remove! store i64 %4, i64* %8, align 8
Found line to remove! %9 = load i64, i64* %PC, align 8
Found line to remove! store i64 %7, i64* %RBP, align 8
Found line to remove! %10 = add i64 %6, -24
Found line to remove! store i64 %10, i64* %RSP, align 8
Found line to remove! %11 = icmp ult i64 %7, 16
Found line to remove! %12 = zext i1 %11 to i8
Found line to remove! %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %12, i8* %13, align 1
Found line to remove! %14 = trunc i64 %10 to i32
Found line to remove! %15 = and i32 %14, 255
Found line to remove! %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
Found line to remove! %17 = trunc i32 %16 to i8
Found line to remove! %18 = and i8 %17, 1
Found line to remove! %19 = xor i8 %18, 1
Found line to remove! %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %19, i8* %20, align 1
Found line to remove! %21 = xor i64 %7, 16
Found line to remove! %22 = xor i64 %21, %10
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %10, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %10, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %7, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %6, -16
Found line to remove! %40 = load i64, i64* %RDI, align 8
Found line to remove! %41 = add i64 %9, 11
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i64, i64* %PC, align 8
Found line to remove! %46 = add i64 %45, 4
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = inttoptr i64 %44 to i64*
Found line to remove! %48 = load i64, i64* %47, align 8
Found line to remove! store i64 %48, i64* %RDI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %49 = add i64 %45, 68
Found line to remove! %50 = add i64 %45, 11
Found line to remove! %51 = load i64, i64* %RSP, align 8
Found line to remove! %52 = add i64 %51, -8
Found line to remove! %53 = inttoptr i64 %52 to i64*
Found line to remove! store i64 %50, i64* %53, align 8
Found line to remove! store i64 %52, i64* %RSP, align 8
Found line to remove! store i64 %49, i64* %PC, align 8
Found line to remove! %54 = tail call %struct.Memory* @sub_4005b0_print_it_renamed_(%struct.State* nonnull %0, i64 %49, %struct.Memory* %2)
Found line to remove! %55 = load i64, i64* %RSP, align 8
Found line to remove! %56 = load i64, i64* %PC, align 8
Found line to remove! %57 = add i64 %55, 16
Found line to remove! store i64 %57, i64* %RSP, align 8
Found line to remove! %58 = icmp ugt i64 %55, -17
Found line to remove! %59 = zext i1 %58 to i8
Found line to remove! store i8 %59, i8* %13, align 1
Found line to remove! %60 = trunc i64 %57 to i32
Found line to remove! %61 = and i32 %60, 255
Found line to remove! %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #12
Found line to remove! %63 = trunc i32 %62 to i8
Found line to remove! %64 = and i8 %63, 1
Found line to remove! %65 = xor i8 %64, 1
Found line to remove! store i8 %65, i8* %20, align 1
Found line to remove! %66 = xor i64 %55, 16
Found line to remove! %67 = xor i64 %66, %57
Found line to remove! %68 = lshr i64 %67, 4
Found line to remove! %69 = trunc i64 %68 to i8
Found line to remove! %70 = and i8 %69, 1
Found line to remove! store i8 %70, i8* %26, align 1
Found line to remove! %71 = icmp eq i64 %57, 0
Found line to remove! %72 = zext i1 %71 to i8
Found line to remove! store i8 %72, i8* %29, align 1
Found line to remove! %73 = lshr i64 %57, 63
Found line to remove! %74 = trunc i64 %73 to i8
Found line to remove! store i8 %74, i8* %32, align 1
Found line to remove! %75 = lshr i64 %55, 63
Found line to remove! %76 = xor i64 %73, %75
Found line to remove! %77 = add nuw nsw i64 %76, %73
Found line to remove! %78 = icmp eq i64 %77, 2
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %38, align 1
Found line to remove! %80 = add i64 %56, 5
Found line to remove! store i64 %80, i64* %PC, align 8
Found line to remove! %81 = add i64 %55, 24
Found line to remove! %82 = inttoptr i64 %57 to i64*
Found line to remove! %83 = load i64, i64* %82, align 8
Found line to remove! store i64 %83, i64* %RBP, align 8
Found line to remove! store i64 %81, i64* %RSP, align 8
Found line to remove! %84 = add i64 %56, 6
Found line to remove! store i64 %84, i64* %PC, align 8
Found line to remove! %85 = inttoptr i64 %81 to i64*
Found line to remove! %86 = load i64, i64* %85, align 8
Found line to remove! store i64 %86, i64* %PC, align 8
Found line to remove! %87 = add i64 %55, 32
Found line to remove! store i64 %87, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %54
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_30/stderr_driver/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_30/binary/test.mcsema.calls_renamed.ll stderr_driver
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
