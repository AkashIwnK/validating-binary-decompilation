Writing '/tmp/tmpd0cfxvuz.dot'...
Writing '/tmp/tmpd0cfxvuz.dot':Done

Reading LLVM: /tmp/tmpf_4psb9o-query.ll
Extracting function [main] from /tmp/tmpf_4psb9o-query.ll
Dot file generated!
Writing '/tmp/tmpbmtojyey.dot'...
Writing '/tmp/tmpbmtojyey.dot':Done

Reading LLVM: /tmp/tmpu13hr5d_-target.ll
Extracting function [main] from /tmp/tmpu13hr5d_-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -56
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 15 %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 17 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 18 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 19 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 20 %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 21 %18 = add i64 %7, -24
- 22 store i64 %18, i64* %RDI.i41, align 8
- 23 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 24 %EAX.i54 = bitcast %union.anon* %19 to i32*
- 25 %RAX.i55 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
- 26 store i64 0, i64* %RAX.i55, align 8
- 27 store i8 0, i8* %12, align 1
- 28 store i8 1, i8* %13, align 1
- 29 store i8 1, i8* %15, align 1
- 30 store i8 0, i8* %16, align 1
- 31 store i8 0, i8* %17, align 1
- 32 store i8 0, i8* %14, align 1
- 33 %RCX.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 34 store i64 0, i64* %RCX.i52, align 8
- 35 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 36 store i64 add (i64 ptrtoint (%G__0x400620_type* @G__0x400620 to i64), i64 200), i64* %RDX.i, align 8
- 37 %20 = add i64 %7, -12
- 38 %21 = add i64 %10, 32
- 39 store i64 %21, i64* %3, align 8
- 40 %22 = inttoptr i64 %20 to i32*
- 41 store i32 0, i32* %22, align 4
- 42 %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 43 %RSI.i46 = getelementptr inbounds %union.anon, %union.anon* %23, i64 0, i32 0
- 44 %24 = load i64, i64* %RCX.i52, align 8
- 45 %25 = load i64, i64* %3, align 8
- 46 store i64 %24, i64* %RSI.i46, align 8
- 47 %26 = add i64 %25, -369
- 48 %27 = add i64 %25, 8
- 49 %28 = load i64, i64* %6, align 8
- 50 %29 = add i64 %28, -8
- 51 %30 = inttoptr i64 %29 to i64*
- 52 store i64 %27, i64* %30, align 8
- 53 store i64 %29, i64* %6, align 8
- 54 store i64 %26, i64* %3, align 8
- 55 %31 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64)* @pthread_create to i64), %struct.Memory* %2)
- 56 %32 = load i64, i64* %RBP.i, align 8
- 57 %33 = add i64 %32, -24
- 58 %34 = load i64, i64* %3, align 8
- 59 store i64 %33, i64* %RCX.i52, align 8
- 60 %35 = add i64 %32, -16
- 61 %36 = add i64 %34, 8
- 62 store i64 %36, i64* %3, align 8
- 63 %37 = inttoptr i64 %35 to i64*
- 64 %38 = load i64, i64* %37, align 8
- 65 store i64 %38, i64* %RDI.i41, align 8
- 66 store i64 %33, i64* %RSI.i46, align 8
- 67 %39 = add i64 %32, -28
- 68 %40 = load i32, i32* %EAX.i54, align 4
- 69 %41 = add i64 %34, 14
- 70 store i64 %41, i64* %3, align 8
- 71 %42 = inttoptr i64 %39 to i32*
- 72 store i32 %40, i32* %42, align 4
- 73 %43 = load i64, i64* %3, align 8
- 74 %44 = add i64 %43, -359
- 75 %45 = add i64 %43, 5
- 76 %46 = load i64, i64* %6, align 8
- 77 %47 = add i64 %46, -8
- 78 %48 = inttoptr i64 %47 to i64*
- 79 store i64 %45, i64* %48, align 8
- 80 store i64 %47, i64* %6, align 8
- 81 store i64 %44, i64* %3, align 8
- 82 %49 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @pthread_join to i64), %struct.Memory* %31)
- 83 %50 = load i64, i64* %3, align 8
- 84 store i64 ptrtoint (%G__0x400744_type* @G__0x400744 to i64), i64* %RDI.i41, align 8
- 85 %51 = load i64, i64* %RBP.i, align 8
- 86 %52 = add i64 %51, -24
- 87 %53 = add i64 %50, 14
- 88 store i64 %53, i64* %3, align 8
- 89 %54 = inttoptr i64 %52 to i64*
- 90 %55 = load i64, i64* %54, align 8
- 91 store i64 %55, i64* %RCX.i52, align 8
- 92 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 93 %57 = and i64 %55, 4294967295
- 94 store i64 %57, i64* %56, align 8
- 95 store i64 %57, i64* %RSI.i46, align 8
- 96 %58 = add i64 %51, -32
- 97 %59 = load i32, i32* %EAX.i54, align 4
- 98 %60 = add i64 %50, 23
- 99 store i64 %60, i64* %3, align 8
- 100 %61 = inttoptr i64 %58 to i32*
- 101 store i32 %59, i32* %61, align 4
- 102 %AL.i = bitcast %union.anon* %19 to i8*
- 103 %62 = load i64, i64* %3, align 8
- 104 store i8 0, i8* %AL.i, align 1
- 105 %63 = add i64 %62, -403
- 106 %64 = add i64 %62, 7
- 107 %65 = load i64, i64* %6, align 8
- 108 %66 = add i64 %65, -8
- 109 %67 = inttoptr i64 %66 to i64*
- 110 store i64 %64, i64* %67, align 8
- 111 store i64 %66, i64* %6, align 8
- 112 store i64 %63, i64* %3, align 8
- 113 %68 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %49)
- 114 %ESI.i9 = bitcast %union.anon* %23 to i32*
- 115 %69 = load i64, i64* %3, align 8
- 116 store i64 0, i64* %RSI.i46, align 8
- 117 %70 = load i64, i64* %RBP.i, align 8
- 118 %71 = add i64 %70, -36
- 119 %72 = load i32, i32* %EAX.i54, align 4
- 120 %73 = add i64 %69, 5
- 121 store i64 %73, i64* %3, align 8
- 122 %74 = inttoptr i64 %71 to i32*
- 123 store i32 %72, i32* %74, align 4
- 124 %75 = load i32, i32* %ESI.i9, align 4
- 125 %76 = zext i32 %75 to i64
- 126 %77 = load i64, i64* %3, align 8
- 127 store i64 %76, i64* %RAX.i55, align 8
- 128 %78 = load i64, i64* %6, align 8
- 129 %79 = add i64 %78, 48
- 130 store i64 %79, i64* %6, align 8
- 131 %80 = icmp ugt i64 %78, -49
- 132 %81 = zext i1 %80 to i8
- 133 store i8 %81, i8* %12, align 1
- 134 %82 = trunc i64 %79 to i32
- 135 %83 = and i32 %82, 255
- 136 %84 = tail call i32 @llvm.ctpop.i32(i32 %83)
- 137 %85 = trunc i32 %84 to i8
- 138 %86 = and i8 %85, 1
- 139 %87 = xor i8 %86, 1
- 140 store i8 %87, i8* %13, align 1
- 141 %88 = xor i64 %78, 16
- 142 %89 = xor i64 %88, %79
- 143 %90 = lshr i64 %89, 4
- 144 %91 = trunc i64 %90 to i8
- 145 %92 = and i8 %91, 1
- 146 store i8 %92, i8* %14, align 1
- 147 %93 = icmp eq i64 %79, 0
- 148 %94 = zext i1 %93 to i8
- 149 store i8 %94, i8* %15, align 1
- 150 %95 = lshr i64 %79, 63
- 151 %96 = trunc i64 %95 to i8
- 152 store i8 %96, i8* %16, align 1
- 153 %97 = lshr i64 %78, 63
- 154 %98 = xor i64 %95, %97
- 155 %99 = add nuw nsw i64 %98, %95
- 156 %100 = icmp eq i64 %99, 2
- 157 %101 = zext i1 %100 to i8
- 158 store i8 %101, i8* %17, align 1
- 159 %102 = add i64 %77, 7
- 160 store i64 %102, i64* %3, align 8
- 161 %103 = add i64 %78, 56
- 162 %104 = inttoptr i64 %79 to i64*
- 163 %105 = load i64, i64* %104, align 8
- 164 store i64 %105, i64* %RBP.i, align 8
- 165 store i64 %103, i64* %6, align 8
- 166 %106 = add i64 %77, 8
- 167 store i64 %106, i64* %3, align 8
- 168 %107 = inttoptr i64 %103 to i64*
- 169 %108 = load i64, i64* %107, align 8
- 170 store i64 %108, i64* %3, align 8
- 171 %109 = add i64 %78, 64
- 172 store i64 %109, i64* %6, align 8
- 173 ret %struct.Memory* %68
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6492f036a8>, {0: {0}, 1: {12}, 2: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 3: {14}, 4: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 5: {11}, 6: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 7: {17, 52, 109, 79}, 8: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 9: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 10: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 11: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 12: {22}, 13: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {10}, 21: {88, 59, 30}, 22: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 23: {1}, 24: {2, 3, 5}, 25: {9, 6}, 26: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 27: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 28: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 29: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 30: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 31: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 32: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 33: {7}, 34: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 35: {8}, 36: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 37: {41}, 38: {42}, 39: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 40: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 41: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 42: {4}, 43: {9, 6}, 44: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 45: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 46: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 47: {49}, 48: {50, 166, 63}, 49: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 50: {17, 52, 109, 79}, 51: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 52: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 53: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 54: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 55: {136, 57, 114, 84}, 56: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 57: {88, 59, 30}, 58: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 59: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 60: {62}, 61: {50, 166, 63}, 62: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 63: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 64: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 65: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 66: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 67: {69}, 68: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 69: {89, 71}, 70: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 71: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 72: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 73: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 74: {76}, 75: {120, 77}, 76: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 77: {17, 52, 109, 79}, 78: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 79: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 80: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 81: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 82: {136, 57, 114, 84}, 83: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 84: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 85: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 86: {88, 59, 30}, 87: {89, 71}, 88: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 89: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 90: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 91: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 92: {94}, 93: {95}, 94: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 95: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 96: {98}, 97: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 98: {100}, 99: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 100: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 101: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 102: {2, 3, 5}, 103: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 104: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 105: {106}, 106: {107, 159}, 107: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 108: {17, 52, 109, 79}, 109: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 110: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 111: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 112: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 113: {136, 57, 114, 84}, 114: {2, 3, 5}, 115: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 116: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 117: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 118: {118}, 119: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 120: {120, 77}, 121: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 122: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 123: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 124: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 125: {148, 132, 125, 157}, 126: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 127: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 128: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 129: {129}, 130: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 131: {131}, 132: {148, 132, 125, 157}, 133: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 134: {144, 137, 134, 151}, 135: {135}, 136: {136, 57, 114, 84}, 137: {144, 137, 134, 151}, 138: {145, 138}, 139: {139}, 140: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 141: {141}, 142: {154, 142}, 143: {143}, 144: {144, 137, 134, 151}, 145: {145, 138}, 146: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 147: {147}, 148: {148, 132, 125, 157}, 149: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 150: {153, 150}, 151: {144, 137, 134, 151}, 152: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 153: {153, 150}, 154: {154, 142}, 155: {155}, 156: {156}, 157: {148, 132, 125, 157}, 158: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 159: {107, 159}, 160: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 161: {161}, 162: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 163: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 164: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 165: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 166: {50, 166, 63}, 167: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 168: {65, 162, 102, 168, 73, 44, 110, 80, 18, 53, 122, 91}, 169: {128, 13, 16, 20, 163, 169, 46, 47, 51, 58, 60, 66, 70, 75, 78, 85, 87, 92, 99, 104, 108, 115, 117, 119, 124, 126}, 170: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 171: {171}, 172: {130, 133, 140, 15, 146, 19, 21, 149, 23, 152, 158, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 160, 164, 43, 165, 45, 167, 170, 48, 172, 54, 55, 56, 61, 64, 67, 68, 72, 74, 81, 82, 83, 86, 90, 93, 96, 97, 101, 103, 105, 111, 112, 113, 116, 121, 123, 127}, 173: {173}})
Equivalent! frozenset({51, 108, 78}) {49, 107, 76}
Equivalent! frozenset({52, 109, 79}) {50, 108, 77}
Equivalent! frozenset({112, 82, 55}) {80, 53, 111}
Equivalent! frozenset({166, 63}) {61, 166}
Equivalent! frozenset({64, 167}) {62, 167}
Equivalent! frozenset({89, 71}) {69, 87}
Equivalent! frozenset({72, 90}) {88, 70}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6492f036a8>, {0: {0}, 1: {12}, 2: {13}, 3: {14}, 4: {15}, 5: {11}, 6: {16}, 7: {17}, 8: {18}, 9: {19}, 10: {20}, 11: {21}, 12: {22}, 13: {23}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {10}, 21: {30}, 22: {31}, 23: {1}, 24: {3}, 25: {6}, 26: {32, 127}, 27: {33, 133}, 28: {34, 140}, 29: {35, 149}, 30: {152, 36}, 31: {37, 158}, 32: {146, 38}, 33: {7}, 34: {61, 93, 39}, 35: {8}, 36: {40}, 37: {41}, 38: {42}, 39: {43}, 40: {44}, 41: {45}, 42: {4}, 43: {9}, 44: {46}, 45: {47}, 46: {48}, 47: {49}, 48: {50}, 49: {51}, 50: {52}, 51: {53}, 52: {54}, 53: {82}, 54: {56}, 55: {57}, 56: {58}, 57: {59}, 58: {60, 85, 126}, 59: {61}, 60: {62}, 61: {166}, 62: {64}, 63: {65}, 64: {66}, 65: {67}, 66: {68}, 67: {69}, 68: {70}, 69: {89}, 70: {90}, 71: {73}, 72: {74}, 73: {75}, 74: {76}, 75: {77}, 76: {78}, 77: {79}, 78: {80}, 79: {81}, 80: {112}, 81: {83}, 82: {84}, 83: {60, 85}, 84: {67, 86, 31}, 85: {87}, 86: {88}, 87: {71}, 88: {72}, 89: {91}, 90: {92}, 91: {93}, 92: {94}, 93: {95}, 94: {96}, 95: {97}, 96: {98}, 97: {99}, 98: {100}, 99: {101}, 100: {102}, 101: {103}, 102: {2}, 103: {104}, 104: {105}, 105: {106}, 106: {107}, 107: {108}, 108: {109}, 109: {110}, 110: {111}, 111: {55}, 112: {113}, 113: {114}, 114: {5}, 115: {115}, 116: {48, 97, 116, 68}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {60, 126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {63}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 getelementptr getelementptr
EXACT 15 getelementptr getelementptr
EXACT 16 getelementptr getelementptr
EXACT 17 getelementptr getelementptr
EXACT 18 getelementptr getelementptr
EXACT 19 getelementptr getelementptr
EXACT 20 getelementptr getelementptr
EXACT 21 add add
EXACT 22 store store
EXACT 23 getelementptr getelementptr
EXACT 24 bitcast bitcast
EXACT 25 getelementptr getelementptr
MORE 26 POT: 2
MORE 27 POT: 2
MORE 28 POT: 2
MORE 29 POT: 2
MORE 30 POT: 2
MORE 31 POT: 2
MORE 32 POT: 2
EXACT 33 getelementptr getelementptr
MORE 34 POT: 3
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 add add
EXACT 38 add add
EXACT 39 store store
EXACT 40 inttoptr inttoptr
EXACT 41 store store
EXACT 42 getelementptr getelementptr
EXACT 43 getelementptr getelementptr
EXACT 44 load load
EXACT 45 load load
EXACT 46 store store
EXACT 47 add add
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 inttoptr inttoptr
EXACT 52 store store
EXACT 53 store store
EXACT 54 store store
EXACT 55 tail tail
EXACT 56 load load
EXACT 57 add add
MORE 58 POT: 3
EXACT 59 store store
EXACT 60 add add
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 load load
EXACT 65 store store
EXACT 66 store store
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 inttoptr inttoptr
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 add add
EXACT 76 load load
EXACT 77 add add
EXACT 78 inttoptr inttoptr
EXACT 79 store store
EXACT 80 store store
EXACT 81 store store
EXACT 82 tail tail
MORE 83 POT: 2
MORE 84 POT: 3
EXACT 85 load load
EXACT 86 add add
EXACT 87 add add
EXACT 88 store store
EXACT 89 inttoptr inttoptr
EXACT 90 load load
EXACT 91 store store
EXACT 92 getelementptr getelementptr
EXACT 93 and and
EXACT 94 store store
EXACT 95 store store
EXACT 96 add add
EXACT 97 load load
EXACT 98 add add
EXACT 99 store store
EXACT 100 inttoptr inttoptr
EXACT 101 store store
EXACT 102 bitcast bitcast
EXACT 103 load load
EXACT 104 store store
EXACT 105 add add
EXACT 106 add add
EXACT 107 load load
EXACT 108 add add
EXACT 109 inttoptr inttoptr
EXACT 110 store store
EXACT 111 store store
EXACT 112 store store
EXACT 113 tail tail
EXACT 114 bitcast bitcast
EXACT 115 load load
MORE 116 POT: 4
EXACT 117 load load
EXACT 118 add add
EXACT 119 load load
EXACT 120 add add
EXACT 121 store store
EXACT 122 inttoptr inttoptr
EXACT 123 store store
EXACT 124 load load
EXACT 125 zext zext
MORE 126 POT: 2
EXACT 127 store store
EXACT 128 load load
EXACT 129 add add
EXACT 130 store store
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 trunc trunc
EXACT 135 and and
EXACT 136 tail tail
EXACT 137 trunc trunc
EXACT 138 and and
EXACT 139 xor xor
EXACT 140 store store
EXACT 141 xor xor
EXACT 142 xor xor
EXACT 143 lshr lshr
EXACT 144 trunc trunc
EXACT 145 and and
EXACT 146 store store
EXACT 147 icmp icmp
EXACT 148 zext zext
EXACT 149 store store
EXACT 150 lshr lshr
EXACT 151 trunc trunc
EXACT 152 store store
EXACT 153 lshr lshr
EXACT 154 xor xor
EXACT 155 add add
EXACT 156 icmp icmp
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 add add
EXACT 160 store store
EXACT 161 add add
EXACT 162 inttoptr inttoptr
EXACT 163 load load
EXACT 164 store store
EXACT 165 store store
EXACT 166 add add
EXACT 167 store store
EXACT 168 inttoptr inttoptr
EXACT 169 load load
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 5 %ESI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 8 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 9 %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %5 = load i64, i64* %RBP, align 8
- 14 %6 = add i64 %1, 1
- 15 store i64 %6, i64* %PC, align 8
- 16 %7 = load i64, i64* %RSP, align 8
- 17 %8 = add i64 %7, -8
- 18 %9 = inttoptr i64 %8 to i64*
- 19 store i64 %5, i64* %9, align 8
- 20 %10 = load i64, i64* %PC, align 8
- 21 store i64 %8, i64* %RBP, align 8
- 22 %11 = add i64 %7, -56
- 23 store i64 %11, i64* %RSP, align 8
- 24 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 26 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 27 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 28 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 29 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 30 %18 = add i64 %7, -24
- 31 store i64 %18, i64* %RDI, align 8
- 32 store i64 0, i64* %RAX, align 8
- 33 store i8 0, i8* %12, align 1
- 34 store i8 1, i8* %13, align 1
- 35 store i8 1, i8* %15, align 1
- 36 store i8 0, i8* %16, align 1
- 37 store i8 0, i8* %17, align 1
- 38 store i8 0, i8* %14, align 1
- 39 store i64 0, i64* %RCX, align 8
- 40 store i64 ptrtoint (void ()* @f to i64), i64* %RDX, align 8
- 41 %19 = add i64 %7, -12
- 42 %20 = add i64 %10, 32
- 43 store i64 %20, i64* %PC, align 8
- 44 %21 = inttoptr i64 %19 to i32*
- 45 store i32 0, i32* %21, align 4
- 46 %22 = load i64, i64* %RCX, align 8
- 47 %23 = load i64, i64* %PC, align 8
- 48 store i64 %22, i64* %RSI, align 8
- 49 %24 = add i64 %23, -369
- 50 %25 = add i64 %23, 8
- 51 %26 = load i64, i64* %RSP, align 8
- 52 %27 = add i64 %26, -8
- 53 %28 = inttoptr i64 %27 to i64*
- 54 store i64 %25, i64* %28, align 8
- 55 store i64 %27, i64* %RSP, align 8
- 56 store i64 %24, i64* %PC, align 8
- 57 %29 = tail call fastcc %struct.Memory* @ext_601068_pthread_create(%struct.State* nonnull %0, %struct.Memory* %2)
- 58 %30 = load i64, i64* %RBP, align 8
- 59 %31 = add i64 %30, -24
- 60 %32 = load i64, i64* %PC, align 8
- 61 store i64 %31, i64* %RCX, align 8
- 62 %33 = add i64 %30, -16
- 63 %34 = add i64 %32, 8
- 64 store i64 %34, i64* %PC, align 8
- 65 %35 = inttoptr i64 %33 to i64*
- 66 %36 = load i64, i64* %35, align 8
- 67 store i64 %36, i64* %RDI, align 8
- 68 store i64 %31, i64* %RSI, align 8
- 69 %37 = add i64 %30, -28
- 70 %38 = load i32, i32* %EAX, align 4
- 71 %39 = add i64 %32, 14
- 72 store i64 %39, i64* %PC, align 8
- 73 %40 = inttoptr i64 %37 to i32*
- 74 store i32 %38, i32* %40, align 4
- 75 %41 = load i64, i64* %PC, align 8
- 76 %42 = add i64 %41, -359
- 77 %43 = add i64 %41, 5
- 78 %44 = load i64, i64* %RSP, align 8
- 79 %45 = add i64 %44, -8
- 80 %46 = inttoptr i64 %45 to i64*
- 81 store i64 %43, i64* %46, align 8
- 82 store i64 %45, i64* %RSP, align 8
- 83 store i64 %42, i64* %PC, align 8
- 84 %47 = tail call fastcc %struct.Memory* @ext_400520_pthread_join(%struct.State* nonnull %0, %struct.Memory* %29)
- 85 %48 = load i64, i64* %PC, align 8
- 86 store i64 add (i64 ptrtoint (%seg_400740__rodata_type* @seg_400740__rodata to i64), i64 4), i64* %RDI, align 8
- 87 %49 = load i64, i64* %RBP, align 8
- 88 %50 = add i64 %49, -24
- 89 %51 = add i64 %48, 14
- 90 store i64 %51, i64* %PC, align 8
- 91 %52 = inttoptr i64 %50 to i64*
- 92 %53 = load i64, i64* %52, align 8
- 93 store i64 %53, i64* %RCX, align 8
- 94 %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 95 %55 = and i64 %53, 4294967295
- 96 store i64 %55, i64* %54, align 8
- 97 store i64 %55, i64* %RSI, align 8
- 98 %56 = add i64 %49, -32
- 99 %57 = load i32, i32* %EAX, align 4
- 100 %58 = add i64 %48, 23
- 101 store i64 %58, i64* %PC, align 8
- 102 %59 = inttoptr i64 %56 to i32*
- 103 store i32 %57, i32* %59, align 4
- 104 %60 = load i64, i64* %PC, align 8
- 105 store i8 0, i8* %AL, align 1
- 106 %61 = add i64 %60, -403
- 107 %62 = add i64 %60, 7
- 108 %63 = load i64, i64* %RSP, align 8
- 109 %64 = add i64 %63, -8
- 110 %65 = inttoptr i64 %64 to i64*
- 111 store i64 %62, i64* %65, align 8
- 112 store i64 %64, i64* %RSP, align 8
- 113 store i64 %61, i64* %PC, align 8
- 114 %66 = tail call fastcc %struct.Memory* @ext_601070_printf(%struct.State* nonnull %0, %struct.Memory* %47)
- 115 %67 = load i64, i64* %PC, align 8
- 116 store i64 0, i64* %RSI, align 8
- 117 %68 = load i64, i64* %RBP, align 8
- 118 %69 = add i64 %68, -36
- 119 %70 = load i32, i32* %EAX, align 4
- 120 %71 = add i64 %67, 5
- 121 store i64 %71, i64* %PC, align 8
- 122 %72 = inttoptr i64 %69 to i32*
- 123 store i32 %70, i32* %72, align 4
- 124 %73 = load i32, i32* %ESI, align 4
- 125 %74 = zext i32 %73 to i64
- 126 %75 = load i64, i64* %PC, align 8
- 127 store i64 %74, i64* %RAX, align 8
- 128 %76 = load i64, i64* %RSP, align 8
- 129 %77 = add i64 %76, 48
- 130 store i64 %77, i64* %RSP, align 8
- 131 %78 = icmp ugt i64 %76, -49
- 132 %79 = zext i1 %78 to i8
- 133 store i8 %79, i8* %12, align 1
- 134 %80 = trunc i64 %77 to i32
- 135 %81 = and i32 %80, 255
- 136 %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #11
- 137 %83 = trunc i32 %82 to i8
- 138 %84 = and i8 %83, 1
- 139 %85 = xor i8 %84, 1
- 140 store i8 %85, i8* %13, align 1
- 141 %86 = xor i64 %76, 16
- 142 %87 = xor i64 %86, %77
- 143 %88 = lshr i64 %87, 4
- 144 %89 = trunc i64 %88 to i8
- 145 %90 = and i8 %89, 1
- 146 store i8 %90, i8* %14, align 1
- 147 %91 = icmp eq i64 %77, 0
- 148 %92 = zext i1 %91 to i8
- 149 store i8 %92, i8* %15, align 1
- 150 %93 = lshr i64 %77, 63
- 151 %94 = trunc i64 %93 to i8
- 152 store i8 %94, i8* %16, align 1
- 153 %95 = lshr i64 %76, 63
- 154 %96 = xor i64 %93, %95
- 155 %97 = add nuw nsw i64 %96, %93
- 156 %98 = icmp eq i64 %97, 2
- 157 %99 = zext i1 %98 to i8
- 158 store i8 %99, i8* %17, align 1
- 159 %100 = add i64 %75, 7
- 160 store i64 %100, i64* %PC, align 8
- 161 %101 = add i64 %76, 56
- 162 %102 = inttoptr i64 %77 to i64*
- 163 %103 = load i64, i64* %102, align 8
- 164 store i64 %103, i64* %RBP, align 8
- 165 store i64 %101, i64* %RSP, align 8
- 166 %104 = add i64 %75, 8
- 167 store i64 %104, i64* %PC, align 8
- 168 %105 = inttoptr i64 %101 to i64*
- 169 %106 = load i64, i64* %105, align 8
- 170 store i64 %106, i64* %PC, align 8
- 171 %107 = add i64 %76, 64
- 172 store i64 %107, i64* %RSP, align 8
- 173 ret %struct.Memory* %66
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6492f03488>, {0: {0}, 1: {23}, 2: {24, 114, 102}, 3: {24, 114, 102}, 4: {42}, 5: {24, 114, 102}, 6: {25, 43}, 7: {33}, 8: {35}, 9: {25, 43}, 10: {20}, 11: {5}, 12: {1}, 13: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 14: {3}, 15: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 16: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 17: {50, 108, 77, 7}, 18: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 19: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 20: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 21: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 22: {12}, 23: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {57, 21, 86}, 31: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 32: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 33: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 34: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 35: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 36: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 37: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 38: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 39: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 40: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 41: {37}, 42: {38}, 43: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 44: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 45: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 46: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 47: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 48: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 49: {47}, 50: {48, 61, 166}, 51: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 52: {50, 108, 77, 7}, 53: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 54: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 55: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 56: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 57: {136, 113, 82, 55}, 58: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 59: {57, 21, 86}, 60: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 61: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 62: {60}, 63: {48, 61, 166}, 64: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 65: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 66: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 67: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 68: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 69: {67}, 70: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 71: {69, 87}, 72: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 73: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 74: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 75: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 76: {74}, 77: {120, 75}, 78: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 79: {50, 108, 77, 7}, 80: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 81: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 82: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 83: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 84: {136, 113, 82, 55}, 85: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 86: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 87: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 88: {57, 21, 86}, 89: {69, 87}, 90: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 91: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 92: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 93: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 94: {92}, 95: {93}, 96: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 97: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 98: {96}, 99: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 100: {98}, 101: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 102: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 103: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 104: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 105: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 106: {105}, 107: {106, 159}, 108: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 109: {50, 108, 77, 7}, 110: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 111: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 112: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 113: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 114: {136, 113, 82, 55}, 115: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 116: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 117: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 118: {118}, 119: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 120: {120, 75}, 121: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 122: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 123: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 124: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 125: {148, 132, 125, 157}, 126: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 127: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 128: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 129: {129}, 130: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 131: {131}, 132: {148, 132, 125, 157}, 133: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 134: {144, 137, 134, 151}, 135: {135}, 136: {136, 113, 82, 55}, 137: {144, 137, 134, 151}, 138: {145, 138}, 139: {139}, 140: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 141: {141}, 142: {154, 142}, 143: {143}, 144: {144, 137, 134, 151}, 145: {145, 138}, 146: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 147: {147}, 148: {148, 132, 125, 157}, 149: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 150: {153, 150}, 151: {144, 137, 134, 151}, 152: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 153: {153, 150}, 154: {154, 142}, 155: {155}, 156: {156}, 157: {148, 132, 125, 157}, 158: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 159: {106, 159}, 160: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 161: {161}, 162: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 163: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 164: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 165: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 166: {48, 61, 166}, 167: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 168: {162, 100, 71, 8, 40, 168, 109, 78, 51, 89, 122, 63}, 169: {128, 2, 6, 10, 163, 169, 44, 45, 49, 56, 58, 64, 68, 73, 76, 83, 85, 90, 97, 103, 107, 115, 117, 119, 124, 126}, 170: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 171: {171}, 172: {130, 4, 133, 9, 11, 140, 13, 146, 149, 22, 152, 26, 27, 28, 29, 30, 31, 32, 158, 34, 160, 36, 164, 165, 39, 167, 41, 170, 172, 46, 52, 53, 54, 59, 62, 65, 66, 70, 72, 79, 80, 81, 84, 88, 91, 94, 95, 99, 101, 104, 110, 111, 112, 116, 121, 123, 127}, 173: {173}})
Equivalent! frozenset({49, 107, 76}) {51, 108, 78}
Equivalent! frozenset({50, 108, 77}) {52, 109, 79}
Equivalent! frozenset({80, 53, 111}) {112, 82, 55}
Equivalent! frozenset({61, 166}) {166, 63}
Equivalent! frozenset({62, 167}) {64, 167}
Equivalent! frozenset({69, 87}) {89, 71}
Equivalent! frozenset({88, 70}) {72, 90}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6492f03488>, {0: {0}, 1: {23}, 2: {102}, 3: {24}, 4: {42}, 5: {114}, 6: {25}, 7: {33}, 8: {35}, 9: {43}, 10: {20}, 11: {5}, 12: {1}, 13: {2}, 14: {3}, 15: {4}, 16: {6}, 17: {7}, 18: {8}, 19: {9}, 20: {10}, 21: {11}, 22: {12}, 23: {13}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {21}, 31: {22}, 32: {26, 127}, 33: {27, 133}, 34: {140, 28}, 35: {29, 149}, 36: {152, 30}, 37: {158, 31}, 38: {32, 146}, 39: {59, 34, 91}, 40: {36}, 41: {37}, 42: {38}, 43: {39}, 44: {40}, 45: {41}, 46: {44}, 47: {45}, 48: {46}, 49: {47}, 50: {48}, 51: {49}, 52: {50}, 53: {51}, 54: {52}, 55: {111}, 56: {54}, 57: {55}, 58: {56}, 59: {57}, 60: {58, 83, 126}, 61: {59}, 62: {60}, 63: {166}, 64: {62}, 65: {63}, 66: {64}, 67: {65}, 68: {66}, 69: {67}, 70: {68}, 71: {87}, 72: {88}, 73: {71}, 74: {72}, 75: {73}, 76: {74}, 77: {75}, 78: {76}, 79: {77}, 80: {78}, 81: {79}, 82: {53}, 83: {81}, 84: {82}, 85: {58, 83}, 86: {65, 84, 22}, 87: {85}, 88: {86}, 89: {69}, 90: {70}, 91: {89}, 92: {90}, 93: {91}, 94: {92}, 95: {93}, 96: {94}, 97: {95}, 98: {96}, 99: {97}, 100: {98}, 101: {99}, 102: {100}, 103: {101}, 104: {103}, 105: {104}, 106: {105}, 107: {106}, 108: {107}, 109: {108}, 110: {109}, 111: {110}, 112: {80}, 113: {112}, 114: {113}, 115: {115}, 116: {66, 116, 46, 95}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {58, 126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {61}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 load load
EXACT 14 add add
EXACT 15 store store
EXACT 16 load load
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 store store
EXACT 22 add add
EXACT 23 store store
EXACT 24 getelementptr getelementptr
EXACT 25 getelementptr getelementptr
EXACT 26 getelementptr getelementptr
EXACT 27 getelementptr getelementptr
EXACT 28 getelementptr getelementptr
EXACT 29 getelementptr getelementptr
EXACT 30 add add
EXACT 31 store store
MORE 32 POT: 2
MORE 33 POT: 2
MORE 34 POT: 2
MORE 35 POT: 2
MORE 36 POT: 2
MORE 37 POT: 2
MORE 38 POT: 2
MORE 39 POT: 3
EXACT 40 store store
EXACT 41 add add
EXACT 42 add add
EXACT 43 store store
EXACT 44 inttoptr inttoptr
EXACT 45 store store
EXACT 46 load load
EXACT 47 load load
EXACT 48 store store
EXACT 49 add add
EXACT 50 add add
EXACT 51 load load
EXACT 52 add add
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 store store
EXACT 56 store store
EXACT 57 tail tail
EXACT 58 load load
EXACT 59 add add
MORE 60 POT: 3
EXACT 61 store store
EXACT 62 add add
EXACT 63 add add
EXACT 64 store store
EXACT 65 inttoptr inttoptr
EXACT 66 load load
EXACT 67 store store
EXACT 68 store store
EXACT 69 add add
EXACT 70 load load
EXACT 71 add add
EXACT 72 store store
EXACT 73 inttoptr inttoptr
EXACT 74 store store
EXACT 75 load load
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
MORE 85 POT: 2
MORE 86 POT: 3
EXACT 87 load load
EXACT 88 add add
EXACT 89 add add
EXACT 90 store store
EXACT 91 inttoptr inttoptr
EXACT 92 load load
EXACT 93 store store
EXACT 94 getelementptr getelementptr
EXACT 95 and and
EXACT 96 store store
EXACT 97 store store
EXACT 98 add add
EXACT 99 load load
EXACT 100 add add
EXACT 101 store store
EXACT 102 inttoptr inttoptr
EXACT 103 store store
EXACT 104 load load
EXACT 105 store store
EXACT 106 add add
EXACT 107 add add
EXACT 108 load load
EXACT 109 add add
EXACT 110 inttoptr inttoptr
EXACT 111 store store
EXACT 112 store store
EXACT 113 store store
EXACT 114 tail tail
EXACT 115 load load
MORE 116 POT: 4
EXACT 117 load load
EXACT 118 add add
EXACT 119 load load
EXACT 120 add add
EXACT 121 store store
EXACT 122 inttoptr inttoptr
EXACT 123 store store
EXACT 124 load load
EXACT 125 zext zext
MORE 126 POT: 2
EXACT 127 store store
EXACT 128 load load
EXACT 129 add add
EXACT 130 store store
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 trunc trunc
EXACT 135 and and
EXACT 136 tail tail
EXACT 137 trunc trunc
EXACT 138 and and
EXACT 139 xor xor
EXACT 140 store store
EXACT 141 xor xor
EXACT 142 xor xor
EXACT 143 lshr lshr
EXACT 144 trunc trunc
EXACT 145 and and
EXACT 146 store store
EXACT 147 icmp icmp
EXACT 148 zext zext
EXACT 149 store store
EXACT 150 lshr lshr
EXACT 151 trunc trunc
EXACT 152 store store
EXACT 153 lshr lshr
EXACT 154 xor xor
EXACT 155 add add
EXACT 156 icmp icmp
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 add add
EXACT 160 store store
EXACT 161 add add
EXACT 162 inttoptr inttoptr
EXACT 163 load load
EXACT 164 store store
EXACT 165 store store
EXACT 166 add add
EXACT 167 store store
EXACT 168 inttoptr inttoptr
EXACT 169 load load
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%18 = add i64 %7, -24', 'store i64 %18, i64* %RDI.i41, align 8', '%EAX.i54 = bitcast %union.anon* %19 to i32*', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%G__0x400620_type* @G__0x400620 to i64), i64 200), i64* %RDX.i, align 8', '%20 = add i64 %7, -12', '%21 = add i64 %10, 32', 'store i64 %21, i64* %3, align 8', '%22 = inttoptr i64 %20 to i32*', 'store i32 0, i32* %22, align 4', '%24 = load i64, i64* %RCX.i52, align 8', '%25 = load i64, i64* %3, align 8', 'store i64 %24, i64* %RSI.i46, align 8', '%26 = add i64 %25, -369', '%27 = add i64 %25, 8', '%28 = load i64, i64* %6, align 8', '%29 = add i64 %28, -8', '%30 = inttoptr i64 %29 to i64*', 'store i64 %27, i64* %30, align 8', 'store i64 %29, i64* %6, align 8', 'store i64 %26, i64* %3, align 8', '%31 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64)* @pthread_create to i64), %struct.Memory* %2)', '%32 = load i64, i64* %RBP.i, align 8', '%33 = add i64 %32, -24', 'store i64 %33, i64* %RCX.i52, align 8', '%35 = add i64 %32, -16', '%36 = add i64 %34, 8', 'store i64 %36, i64* %3, align 8', '%37 = inttoptr i64 %35 to i64*', '%38 = load i64, i64* %37, align 8', 'store i64 %38, i64* %RDI.i41, align 8', 'store i64 %33, i64* %RSI.i46, align 8', '%39 = add i64 %32, -28', '%40 = load i32, i32* %EAX.i54, align 4', '%41 = add i64 %34, 14', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i32*', 'store i32 %40, i32* %42, align 4', '%43 = load i64, i64* %3, align 8', '%44 = add i64 %43, -359', '%45 = add i64 %43, 5', '%46 = load i64, i64* %6, align 8', '%47 = add i64 %46, -8', '%48 = inttoptr i64 %47 to i64*', 'store i64 %45, i64* %48, align 8', 'store i64 %47, i64* %6, align 8', 'store i64 %44, i64* %3, align 8', '%49 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @pthread_join to i64), %struct.Memory* %31)', '%51 = load i64, i64* %RBP.i, align 8', '%52 = add i64 %51, -24', '%53 = add i64 %50, 14', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %52 to i64*', '%55 = load i64, i64* %54, align 8', 'store i64 %55, i64* %RCX.i52, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', '%57 = and i64 %55, 4294967295', 'store i64 %57, i64* %56, align 8', 'store i64 %57, i64* %RSI.i46, align 8', '%58 = add i64 %51, -32', '%59 = load i32, i32* %EAX.i54, align 4', '%60 = add i64 %50, 23', 'store i64 %60, i64* %3, align 8', '%61 = inttoptr i64 %58 to i32*', 'store i32 %59, i32* %61, align 4', '%AL.i = bitcast %union.anon* %19 to i8*', '%62 = load i64, i64* %3, align 8', 'store i8 0, i8* %AL.i, align 1', '%63 = add i64 %62, -403', '%64 = add i64 %62, 7', '%65 = load i64, i64* %6, align 8', '%66 = add i64 %65, -8', '%67 = inttoptr i64 %66 to i64*', 'store i64 %64, i64* %67, align 8', 'store i64 %66, i64* %6, align 8', 'store i64 %63, i64* %3, align 8', '%68 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %49)', '%ESI.i9 = bitcast %union.anon* %23 to i32*', '%69 = load i64, i64* %3, align 8', '%70 = load i64, i64* %RBP.i, align 8', '%71 = add i64 %70, -36', '%72 = load i32, i32* %EAX.i54, align 4', '%73 = add i64 %69, 5', 'store i64 %73, i64* %3, align 8', '%74 = inttoptr i64 %71 to i32*', 'store i32 %72, i32* %74, align 4', '%75 = load i32, i32* %ESI.i9, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RAX.i55, align 8', '%78 = load i64, i64* %6, align 8', '%79 = add i64 %78, 48', 'store i64 %79, i64* %6, align 8', '%80 = icmp ugt i64 %78, -49', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %12, align 1', '%82 = trunc i64 %79 to i32', '%83 = and i32 %82, 255', '%84 = tail call i32 @llvm.ctpop.i32(i32 %83)', '%85 = trunc i32 %84 to i8', '%86 = and i8 %85, 1', '%87 = xor i8 %86, 1', 'store i8 %87, i8* %13, align 1', '%88 = xor i64 %78, 16', '%89 = xor i64 %88, %79', '%90 = lshr i64 %89, 4', '%91 = trunc i64 %90 to i8', '%92 = and i8 %91, 1', 'store i8 %92, i8* %14, align 1', '%93 = icmp eq i64 %79, 0', '%94 = zext i1 %93 to i8', 'store i8 %94, i8* %15, align 1', '%95 = lshr i64 %79, 63', '%96 = trunc i64 %95 to i8', 'store i8 %96, i8* %16, align 1', '%97 = lshr i64 %78, 63', '%98 = xor i64 %95, %97', '%99 = add nuw nsw i64 %98, %95', '%100 = icmp eq i64 %99, 2', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %17, align 1', '%102 = add i64 %77, 7', 'store i64 %102, i64* %3, align 8', '%103 = add i64 %78, 56', '%104 = inttoptr i64 %79 to i64*', '%105 = load i64, i64* %104, align 8', 'store i64 %105, i64* %RBP.i, align 8', 'store i64 %103, i64* %6, align 8', '%106 = add i64 %77, 8', 'store i64 %106, i64* %3, align 8', '%107 = inttoptr i64 %103 to i64*', '%108 = load i64, i64* %107, align 8', 'store i64 %108, i64* %3, align 8', '%109 = add i64 %78, 64', 'store i64 %109, i64* %6, align 8', 'ret %struct.Memory* %68'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -56
Found line to remove! store i64 %11, i64* %6, align 8
Keep: %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Keep: %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Keep: %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Keep: %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %18 = add i64 %7, -24
Found line to remove! store i64 %18, i64* %RDI.i41, align 8
Keep: %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX.i54 = bitcast %union.anon* %19 to i32*
Keep: %RAX.i55 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
Keep: store i64 0, i64* %RAX.i55, align 8
Keep: store i8 0, i8* %12, align 1
Keep: store i8 1, i8* %13, align 1
Keep: store i8 1, i8* %15, align 1
Keep: store i8 0, i8* %16, align 1
Keep: store i8 0, i8* %17, align 1
Keep: store i8 0, i8* %14, align 1
Keep: %RCX.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Keep: store i64 0, i64* %RCX.i52, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! store i64 add (i64 ptrtoint (%G__0x400620_type* @G__0x400620 to i64), i64 200), i64* %RDX.i, align 8
Found line to remove! %20 = add i64 %7, -12
Found line to remove! %21 = add i64 %10, 32
Found line to remove! store i64 %21, i64* %3, align 8
Found line to remove! %22 = inttoptr i64 %20 to i32*
Found line to remove! store i32 0, i32* %22, align 4
Keep: %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Keep: %RSI.i46 = getelementptr inbounds %union.anon, %union.anon* %23, i64 0, i32 0
Found line to remove! %24 = load i64, i64* %RCX.i52, align 8
Found line to remove! %25 = load i64, i64* %3, align 8
Found line to remove! store i64 %24, i64* %RSI.i46, align 8
Found line to remove! %26 = add i64 %25, -369
Found line to remove! %27 = add i64 %25, 8
Found line to remove! %28 = load i64, i64* %6, align 8
Found line to remove! %29 = add i64 %28, -8
Found line to remove! %30 = inttoptr i64 %29 to i64*
Found line to remove! store i64 %27, i64* %30, align 8
Found line to remove! store i64 %29, i64* %6, align 8
Found line to remove! store i64 %26, i64* %3, align 8
Found line to remove! %31 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64)* @pthread_create to i64), %struct.Memory* %2)
Found line to remove! %32 = load i64, i64* %RBP.i, align 8
Found line to remove! %33 = add i64 %32, -24
Keep: %34 = load i64, i64* %3, align 8
Found line to remove! store i64 %33, i64* %RCX.i52, align 8
Found line to remove! %35 = add i64 %32, -16
Found line to remove! %36 = add i64 %34, 8
Found line to remove! store i64 %36, i64* %3, align 8
Found line to remove! %37 = inttoptr i64 %35 to i64*
Found line to remove! %38 = load i64, i64* %37, align 8
Found line to remove! store i64 %38, i64* %RDI.i41, align 8
Found line to remove! store i64 %33, i64* %RSI.i46, align 8
Found line to remove! %39 = add i64 %32, -28
Found line to remove! %40 = load i32, i32* %EAX.i54, align 4
Found line to remove! %41 = add i64 %34, 14
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i32*
Found line to remove! store i32 %40, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %3, align 8
Found line to remove! %44 = add i64 %43, -359
Found line to remove! %45 = add i64 %43, 5
Found line to remove! %46 = load i64, i64* %6, align 8
Found line to remove! %47 = add i64 %46, -8
Found line to remove! %48 = inttoptr i64 %47 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! store i64 %47, i64* %6, align 8
Found line to remove! store i64 %44, i64* %3, align 8
Found line to remove! %49 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @pthread_join to i64), %struct.Memory* %31)
Keep: %50 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x400744_type* @G__0x400744 to i64), i64* %RDI.i41, align 8
Found line to remove! %51 = load i64, i64* %RBP.i, align 8
Found line to remove! %52 = add i64 %51, -24
Found line to remove! %53 = add i64 %50, 14
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = inttoptr i64 %52 to i64*
Found line to remove! %55 = load i64, i64* %54, align 8
Found line to remove! store i64 %55, i64* %RCX.i52, align 8
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! %57 = and i64 %55, 4294967295
Found line to remove! store i64 %57, i64* %56, align 8
Found line to remove! store i64 %57, i64* %RSI.i46, align 8
Found line to remove! %58 = add i64 %51, -32
Found line to remove! %59 = load i32, i32* %EAX.i54, align 4
Found line to remove! %60 = add i64 %50, 23
Found line to remove! store i64 %60, i64* %3, align 8
Found line to remove! %61 = inttoptr i64 %58 to i32*
Found line to remove! store i32 %59, i32* %61, align 4
Found line to remove! %AL.i = bitcast %union.anon* %19 to i8*
Found line to remove! %62 = load i64, i64* %3, align 8
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %63 = add i64 %62, -403
Found line to remove! %64 = add i64 %62, 7
Found line to remove! %65 = load i64, i64* %6, align 8
Found line to remove! %66 = add i64 %65, -8
Found line to remove! %67 = inttoptr i64 %66 to i64*
Found line to remove! store i64 %64, i64* %67, align 8
Found line to remove! store i64 %66, i64* %6, align 8
Found line to remove! store i64 %63, i64* %3, align 8
Found line to remove! %68 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %49)
Found line to remove! %ESI.i9 = bitcast %union.anon* %23 to i32*
Found line to remove! %69 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RSI.i46, align 8
Found line to remove! %70 = load i64, i64* %RBP.i, align 8
Found line to remove! %71 = add i64 %70, -36
Found line to remove! %72 = load i32, i32* %EAX.i54, align 4
Found line to remove! %73 = add i64 %69, 5
Found line to remove! store i64 %73, i64* %3, align 8
Found line to remove! %74 = inttoptr i64 %71 to i32*
Found line to remove! store i32 %72, i32* %74, align 4
Found line to remove! %75 = load i32, i32* %ESI.i9, align 4
Found line to remove! %76 = zext i32 %75 to i64
Keep: %77 = load i64, i64* %3, align 8
Found line to remove! store i64 %76, i64* %RAX.i55, align 8
Found line to remove! %78 = load i64, i64* %6, align 8
Found line to remove! %79 = add i64 %78, 48
Found line to remove! store i64 %79, i64* %6, align 8
Found line to remove! %80 = icmp ugt i64 %78, -49
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %12, align 1
Found line to remove! %82 = trunc i64 %79 to i32
Found line to remove! %83 = and i32 %82, 255
Found line to remove! %84 = tail call i32 @llvm.ctpop.i32(i32 %83)
Found line to remove! %85 = trunc i32 %84 to i8
Found line to remove! %86 = and i8 %85, 1
Found line to remove! %87 = xor i8 %86, 1
Found line to remove! store i8 %87, i8* %13, align 1
Found line to remove! %88 = xor i64 %78, 16
Found line to remove! %89 = xor i64 %88, %79
Found line to remove! %90 = lshr i64 %89, 4
Found line to remove! %91 = trunc i64 %90 to i8
Found line to remove! %92 = and i8 %91, 1
Found line to remove! store i8 %92, i8* %14, align 1
Found line to remove! %93 = icmp eq i64 %79, 0
Found line to remove! %94 = zext i1 %93 to i8
Found line to remove! store i8 %94, i8* %15, align 1
Found line to remove! %95 = lshr i64 %79, 63
Found line to remove! %96 = trunc i64 %95 to i8
Found line to remove! store i8 %96, i8* %16, align 1
Found line to remove! %97 = lshr i64 %78, 63
Found line to remove! %98 = xor i64 %95, %97
Found line to remove! %99 = add nuw nsw i64 %98, %95
Found line to remove! %100 = icmp eq i64 %99, 2
Found line to remove! %101 = zext i1 %100 to i8
Found line to remove! store i8 %101, i8* %17, align 1
Found line to remove! %102 = add i64 %77, 7
Found line to remove! store i64 %102, i64* %3, align 8
Found line to remove! %103 = add i64 %78, 56
Found line to remove! %104 = inttoptr i64 %79 to i64*
Found line to remove! %105 = load i64, i64* %104, align 8
Found line to remove! store i64 %105, i64* %RBP.i, align 8
Found line to remove! store i64 %103, i64* %6, align 8
Found line to remove! %106 = add i64 %77, 8
Found line to remove! store i64 %106, i64* %3, align 8
Found line to remove! %107 = inttoptr i64 %103 to i64*
Found line to remove! %108 = load i64, i64* %107, align 8
Found line to remove! store i64 %108, i64* %3, align 8
Found line to remove! %109 = add i64 %78, 64
Found line to remove! store i64 %109, i64* %6, align 8
Found line to remove! ret %struct.Memory* %68
TO REMOVE: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ESI = bitcast %union.anon* %4 to i32*', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %RSP, align 8', '%18 = add i64 %7, -24', 'store i64 %18, i64* %RDI, align 8', 'store i64 ptrtoint (void ()* @f to i64), i64* %RDX, align 8', '%19 = add i64 %7, -12', '%20 = add i64 %10, 32', 'store i64 %20, i64* %PC, align 8', '%21 = inttoptr i64 %19 to i32*', 'store i32 0, i32* %21, align 4', '%22 = load i64, i64* %RCX, align 8', '%23 = load i64, i64* %PC, align 8', 'store i64 %22, i64* %RSI, align 8', '%24 = add i64 %23, -369', '%25 = add i64 %23, 8', '%26 = load i64, i64* %RSP, align 8', '%27 = add i64 %26, -8', '%28 = inttoptr i64 %27 to i64*', 'store i64 %25, i64* %28, align 8', 'store i64 %27, i64* %RSP, align 8', 'store i64 %24, i64* %PC, align 8', '%29 = tail call fastcc %struct.Memory* @ext_601068_pthread_create(%struct.State* nonnull %0, %struct.Memory* %2)', '%30 = load i64, i64* %RBP, align 8', '%31 = add i64 %30, -24', 'store i64 %31, i64* %RCX, align 8', '%33 = add i64 %30, -16', '%34 = add i64 %32, 8', 'store i64 %34, i64* %PC, align 8', '%35 = inttoptr i64 %33 to i64*', '%36 = load i64, i64* %35, align 8', 'store i64 %36, i64* %RDI, align 8', 'store i64 %31, i64* %RSI, align 8', '%37 = add i64 %30, -28', '%38 = load i32, i32* %EAX, align 4', '%39 = add i64 %32, 14', 'store i64 %39, i64* %PC, align 8', '%40 = inttoptr i64 %37 to i32*', 'store i32 %38, i32* %40, align 4', '%41 = load i64, i64* %PC, align 8', '%42 = add i64 %41, -359', '%43 = add i64 %41, 5', '%44 = load i64, i64* %RSP, align 8', '%45 = add i64 %44, -8', '%46 = inttoptr i64 %45 to i64*', 'store i64 %43, i64* %46, align 8', 'store i64 %45, i64* %RSP, align 8', 'store i64 %42, i64* %PC, align 8', '%47 = tail call fastcc %struct.Memory* @ext_400520_pthread_join(%struct.State* nonnull %0, %struct.Memory* %29)', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -24', '%51 = add i64 %48, 14', 'store i64 %51, i64* %PC, align 8', '%52 = inttoptr i64 %50 to i64*', '%53 = load i64, i64* %52, align 8', 'store i64 %53, i64* %RCX, align 8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', '%55 = and i64 %53, 4294967295', 'store i64 %55, i64* %54, align 8', 'store i64 %55, i64* %RSI, align 8', '%56 = add i64 %49, -32', '%57 = load i32, i32* %EAX, align 4', '%58 = add i64 %48, 23', 'store i64 %58, i64* %PC, align 8', '%59 = inttoptr i64 %56 to i32*', 'store i32 %57, i32* %59, align 4', '%60 = load i64, i64* %PC, align 8', 'store i8 0, i8* %AL, align 1', '%61 = add i64 %60, -403', '%62 = add i64 %60, 7', '%63 = load i64, i64* %RSP, align 8', '%64 = add i64 %63, -8', '%65 = inttoptr i64 %64 to i64*', 'store i64 %62, i64* %65, align 8', 'store i64 %64, i64* %RSP, align 8', 'store i64 %61, i64* %PC, align 8', '%66 = tail call fastcc %struct.Memory* @ext_601070_printf(%struct.State* nonnull %0, %struct.Memory* %47)', '%67 = load i64, i64* %PC, align 8', '%68 = load i64, i64* %RBP, align 8', '%69 = add i64 %68, -36', '%70 = load i32, i32* %EAX, align 4', '%71 = add i64 %67, 5', 'store i64 %71, i64* %PC, align 8', '%72 = inttoptr i64 %69 to i32*', 'store i32 %70, i32* %72, align 4', '%73 = load i32, i32* %ESI, align 4', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX, align 8', '%76 = load i64, i64* %RSP, align 8', '%77 = add i64 %76, 48', 'store i64 %77, i64* %RSP, align 8', '%78 = icmp ugt i64 %76, -49', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %12, align 1', '%80 = trunc i64 %77 to i32', '%81 = and i32 %80, 255', '%82 = tail call i32 @llvm.ctpop.i32(i32 %81) #11', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', '%85 = xor i8 %84, 1', 'store i8 %85, i8* %13, align 1', '%86 = xor i64 %76, 16', '%87 = xor i64 %86, %77', '%88 = lshr i64 %87, 4', '%89 = trunc i64 %88 to i8', '%90 = and i8 %89, 1', 'store i8 %90, i8* %14, align 1', '%91 = icmp eq i64 %77, 0', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %15, align 1', '%93 = lshr i64 %77, 63', '%94 = trunc i64 %93 to i8', 'store i8 %94, i8* %16, align 1', '%95 = lshr i64 %76, 63', '%96 = xor i64 %93, %95', '%97 = add nuw nsw i64 %96, %93', '%98 = icmp eq i64 %97, 2', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %17, align 1', '%100 = add i64 %75, 7', 'store i64 %100, i64* %PC, align 8', '%101 = add i64 %76, 56', '%102 = inttoptr i64 %77 to i64*', '%103 = load i64, i64* %102, align 8', 'store i64 %103, i64* %RBP, align 8', 'store i64 %101, i64* %RSP, align 8', '%104 = add i64 %75, 8', 'store i64 %104, i64* %PC, align 8', '%105 = inttoptr i64 %101 to i64*', '%106 = load i64, i64* %105, align 8', 'store i64 %106, i64* %PC, align 8', '%107 = add i64 %76, 64', 'store i64 %107, i64* %RSP, align 8', 'ret %struct.Memory* %66'])
Keep: block_400650:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %4 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Keep: %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -56
Found line to remove! store i64 %11, i64* %RSP, align 8
Keep: %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Keep: %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Keep: %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Keep: %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %18 = add i64 %7, -24
Found line to remove! store i64 %18, i64* %RDI, align 8
Keep: store i64 0, i64* %RAX, align 8
Keep: store i8 0, i8* %12, align 1
Keep: store i8 1, i8* %13, align 1
Keep: store i8 1, i8* %15, align 1
Keep: store i8 0, i8* %16, align 1
Keep: store i8 0, i8* %17, align 1
Keep: store i8 0, i8* %14, align 1
Keep: store i64 0, i64* %RCX, align 8
Found line to remove! store i64 ptrtoint (void ()* @f to i64), i64* %RDX, align 8
Found line to remove! %19 = add i64 %7, -12
Found line to remove! %20 = add i64 %10, 32
Found line to remove! store i64 %20, i64* %PC, align 8
Found line to remove! %21 = inttoptr i64 %19 to i32*
Found line to remove! store i32 0, i32* %21, align 4
Found line to remove! %22 = load i64, i64* %RCX, align 8
Found line to remove! %23 = load i64, i64* %PC, align 8
Found line to remove! store i64 %22, i64* %RSI, align 8
Found line to remove! %24 = add i64 %23, -369
Found line to remove! %25 = add i64 %23, 8
Found line to remove! %26 = load i64, i64* %RSP, align 8
Found line to remove! %27 = add i64 %26, -8
Found line to remove! %28 = inttoptr i64 %27 to i64*
Found line to remove! store i64 %25, i64* %28, align 8
Found line to remove! store i64 %27, i64* %RSP, align 8
Found line to remove! store i64 %24, i64* %PC, align 8
Found line to remove! %29 = tail call fastcc %struct.Memory* @ext_601068_pthread_create(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %30 = load i64, i64* %RBP, align 8
Found line to remove! %31 = add i64 %30, -24
Keep: %32 = load i64, i64* %PC, align 8
Found line to remove! store i64 %31, i64* %RCX, align 8
Found line to remove! %33 = add i64 %30, -16
Found line to remove! %34 = add i64 %32, 8
Found line to remove! store i64 %34, i64* %PC, align 8
Found line to remove! %35 = inttoptr i64 %33 to i64*
Found line to remove! %36 = load i64, i64* %35, align 8
Found line to remove! store i64 %36, i64* %RDI, align 8
Found line to remove! store i64 %31, i64* %RSI, align 8
Found line to remove! %37 = add i64 %30, -28
Found line to remove! %38 = load i32, i32* %EAX, align 4
Found line to remove! %39 = add i64 %32, 14
Found line to remove! store i64 %39, i64* %PC, align 8
Found line to remove! %40 = inttoptr i64 %37 to i32*
Found line to remove! store i32 %38, i32* %40, align 4
Found line to remove! %41 = load i64, i64* %PC, align 8
Found line to remove! %42 = add i64 %41, -359
Found line to remove! %43 = add i64 %41, 5
Found line to remove! %44 = load i64, i64* %RSP, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %43, i64* %46, align 8
Found line to remove! store i64 %45, i64* %RSP, align 8
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %47 = tail call fastcc %struct.Memory* @ext_400520_pthread_join(%struct.State* nonnull %0, %struct.Memory* %29)
Keep: %48 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_400740__rodata_type* @seg_400740__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -24
Found line to remove! %51 = add i64 %48, 14
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = inttoptr i64 %50 to i64*
Found line to remove! %53 = load i64, i64* %52, align 8
Found line to remove! store i64 %53, i64* %RCX, align 8
Found line to remove! %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! %55 = and i64 %53, 4294967295
Found line to remove! store i64 %55, i64* %54, align 8
Found line to remove! store i64 %55, i64* %RSI, align 8
Found line to remove! %56 = add i64 %49, -32
Found line to remove! %57 = load i32, i32* %EAX, align 4
Found line to remove! %58 = add i64 %48, 23
Found line to remove! store i64 %58, i64* %PC, align 8
Found line to remove! %59 = inttoptr i64 %56 to i32*
Found line to remove! store i32 %57, i32* %59, align 4
Found line to remove! %60 = load i64, i64* %PC, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %61 = add i64 %60, -403
Found line to remove! %62 = add i64 %60, 7
Found line to remove! %63 = load i64, i64* %RSP, align 8
Found line to remove! %64 = add i64 %63, -8
Found line to remove! %65 = inttoptr i64 %64 to i64*
Found line to remove! store i64 %62, i64* %65, align 8
Found line to remove! store i64 %64, i64* %RSP, align 8
Found line to remove! store i64 %61, i64* %PC, align 8
Found line to remove! %66 = tail call fastcc %struct.Memory* @ext_601070_printf(%struct.State* nonnull %0, %struct.Memory* %47)
Found line to remove! %67 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RSI, align 8
Found line to remove! %68 = load i64, i64* %RBP, align 8
Found line to remove! %69 = add i64 %68, -36
Found line to remove! %70 = load i32, i32* %EAX, align 4
Found line to remove! %71 = add i64 %67, 5
Found line to remove! store i64 %71, i64* %PC, align 8
Found line to remove! %72 = inttoptr i64 %69 to i32*
Found line to remove! store i32 %70, i32* %72, align 4
Found line to remove! %73 = load i32, i32* %ESI, align 4
Found line to remove! %74 = zext i32 %73 to i64
Keep: %75 = load i64, i64* %PC, align 8
Found line to remove! store i64 %74, i64* %RAX, align 8
Found line to remove! %76 = load i64, i64* %RSP, align 8
Found line to remove! %77 = add i64 %76, 48
Found line to remove! store i64 %77, i64* %RSP, align 8
Found line to remove! %78 = icmp ugt i64 %76, -49
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %12, align 1
Found line to remove! %80 = trunc i64 %77 to i32
Found line to remove! %81 = and i32 %80, 255
Found line to remove! %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #11
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! %85 = xor i8 %84, 1
Found line to remove! store i8 %85, i8* %13, align 1
Found line to remove! %86 = xor i64 %76, 16
Found line to remove! %87 = xor i64 %86, %77
Found line to remove! %88 = lshr i64 %87, 4
Found line to remove! %89 = trunc i64 %88 to i8
Found line to remove! %90 = and i8 %89, 1
Found line to remove! store i8 %90, i8* %14, align 1
Found line to remove! %91 = icmp eq i64 %77, 0
Found line to remove! %92 = zext i1 %91 to i8
Found line to remove! store i8 %92, i8* %15, align 1
Found line to remove! %93 = lshr i64 %77, 63
Found line to remove! %94 = trunc i64 %93 to i8
Found line to remove! store i8 %94, i8* %16, align 1
Found line to remove! %95 = lshr i64 %76, 63
Found line to remove! %96 = xor i64 %93, %95
Found line to remove! %97 = add nuw nsw i64 %96, %93
Found line to remove! %98 = icmp eq i64 %97, 2
Found line to remove!Writing '/tmp/tmpyjvxn7ar.dot'...
Writing '/tmp/tmpyjvxn7ar.dot':Done

Reading LLVM: /tmp/tmpf_4psb9o-query.ll
Extracting function [main] from /tmp/tmpf_4psb9o-query.ll
Dot file generated!
Writing '/tmp/tmp6rppcfns.dot'...
Writing '/tmp/tmp6rppcfns.dot':Done

Reading LLVM: /tmp/tmpu13hr5d_-target.ll
Extracting function [main] from /tmp/tmpu13hr5d_-target.ll
Dot file generated!
 %99 = zext i1 %98 to i8
Found line to remove! store i8 %99, i8* %17, align 1
Found line to remove! %100 = add i64 %75, 7
Found line to remove! store i64 %100, i64* %PC, align 8
Found line to remove! %101 = add i64 %76, 56
Found line to remove! %102 = inttoptr i64 %77 to i64*
Found line to remove! %103 = load i64, i64* %102, align 8
Found line to remove! store i64 %103, i64* %RBP, align 8
Found line to remove! store i64 %101, i64* %RSP, align 8
Found line to remove! %104 = add i64 %75, 8
Found line to remove! store i64 %104, i64* %PC, align 8
Found line to remove! %105 = inttoptr i64 %101 to i64*
Found line to remove! %106 = load i64, i64* %105, align 8
Found line to remove! store i64 %106, i64* %PC, align 8
Found line to remove! %107 = add i64 %76, 64
Found line to remove! store i64 %107, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %66
================ Starting round 2
MAPPING:
- 0 %var_2_12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 1 %var_2_13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 2 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 4 %var_2_16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 5 %var_2_17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 6 %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 7 %RAX.i55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 8 store i64 0, i64* %RAX.i55, align 8
- 9 store i8 0, i8* %var_2_12, align 1
- 10 store i8 1, i8* %var_2_13, align 1
- 11 store i8 1, i8* %var_2_15, align 1
- 12 store i8 0, i8* %var_2_16, align 1
- 13 store i8 0, i8* %var_2_17, align 1
- 14 store i8 0, i8* %var_2_14, align 1
- 15 %RCX.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 16 store i64 0, i64* %RCX.i52, align 8
- 17 %RSI.i46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 18 store i64 ptrtoint (%G__0x400744_type* @G__0x400744 to i64), i64* %RDI.i41, align 8
- 19 store i64 0, i64* %RSI.i46, align 8
- 20 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f649313aea0>, {0: {4}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {9}, 6: {3}, 7: {0}, 8: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 9: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 10: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 11: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 12: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 13: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 14: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 15: {1}, 16: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 17: {2}, 18: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 19: {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 20: {20}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f649313aea0>, {0: {4}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {9}, 6: {3}, 7: {0}, 8: {10}, 9: {11}, 10: {12}, 11: {13}, 12: {14}, 13: {15}, 14: {16}, 15: {1}, 16: {17}, 17: {2}, 18: {18}, 19: {19}, 20: {20}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 store store
EXACT 9 store store
EXACT 10 store store
EXACT 11 store store
EXACT 12 store store
EXACT 13 store store
EXACT 14 store store
EXACT 15 getelementptr getelementptr
EXACT 16 store store
EXACT 17 getelementptr getelementptr
EXACT 18 store store
EXACT 19 store store
EXACT 20 ret ret
================ Starting round 3
MAPPING:
- 0 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 2 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 3 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 %var_2_12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 5 %var_2_13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 6 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 7 %var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 8 %var_2_16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 9 %var_2_17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 10 store i64 0, i64* %RAX, align 8
- 11 store i8 0, i8* %var_2_12, align 1
- 12 store i8 1, i8* %var_2_13, align 1
- 13 store i8 1, i8* %var_2_15, align 1
- 14 store i8 0, i8* %var_2_16, align 1
- 15 store i8 0, i8* %var_2_17, align 1
- 16 store i8 0, i8* %var_2_14, align 1
- 17 store i64 0, i64* %RCX, align 8
- 18 store i64 add (i64 ptrtoint (%seg_400740__rodata_type* @seg_400740__rodata to i64), i64 4), i64* %RDI, align 8
- 19 store i64 0, i64* %RSI, align 8
- 20 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6492fc9510>, {0: {7}, 1: {15}, 2: {17}, 3: {6}, 4: {0}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {5}, 10: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 11: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 12: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 13: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 14: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 15: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 16: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 17: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 18: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 19: {8, 9, 10, 11, 12, 13, 14, 16, 18, 19}, 20: {20}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6492fc9510>, {0: {7}, 1: {15}, 2: {17}, 3: {6}, 4: {0}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {5}, 10: {8}, 11: {9}, 12: {10}, 13: {11}, 14: {12}, 15: {13}, 16: {14}, 17: {16}, 18: {18}, 19: {19}, 20: {20}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 store store
EXACT 11 store store
EXACT 12 store store
EXACT 13 store store
EXACT 14 store store
EXACT 15 store store
EXACT 16 store store
EXACT 17 store store
EXACT 18 store store
EXACT 19 store store
EXACT 20 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%var_2_16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RAX.i55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX.i55, align 8', 'store i8 0, i8* %var_2_12, align 1', 'store i8 1, i8* %var_2_13, align 1', 'store i8 1, i8* %var_2_15, align 1', 'store i8 0, i8* %var_2_16, align 1', 'store i8 0, i8* %var_2_17, align 1', 'store i8 0, i8* %var_2_14, align 1', '%RCX.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 0, i64* %RCX.i52, align 8', '%RSI.i46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 ptrtoint (%G__0x400744_type* @G__0x400744 to i64), i64* %RDI.i41, align 8', 'store i64 0, i64* %RSI.i46, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %var_2_12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RAX.i55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 0, i64* %RAX.i55, align 8
Found line to remove! store i8 0, i8* %var_2_12, align 1
Found line to remove! store i8 1, i8* %var_2_13, align 1
Found line to remove! store i8 1, i8* %var_2_15, align 1
Found line to remove! store i8 0, i8* %var_2_16, align 1
Found line to remove! store i8 0, i8* %var_2_17, align 1
Found line to remove! store i8 0, i8* %var_2_14, align 1
Found line to remove! %RCX.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 0, i64* %RCX.i52, align 8
Found line to remove! %RSI.i46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x400744_type* @G__0x400744 to i64), i64* %RDI.i41, align 8
Found line to remove! store i64 0, i64* %RSI.i46, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%var_2_12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%var_2_16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i64 0, i64* %RAX, align 8', 'store i8 0, i8* %var_2_12, align 1', 'store i8 1, i8* %var_2_13, align 1', 'store i8 1, i8* %var_2_15, align 1', 'store i8 0, i8* %var_2_16, align 1', 'store i8 0, i8* %var_2_17, align 1', 'store i8 0, i8* %var_2_14, align 1', 'store i64 0, i64* %RCX, align 8', 'store i64 add (i64 ptrtoint (%seg_400740__rodata_type* @seg_400740__rodata to i64), i64 4), i64* %RDI, align 8', 'store i64 0, i64* %RSI, align 8', 'ret %struct.Memory* %2'])
Keep: block_400650:
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %var_2_12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i64 0, i64* %RAX, align 8
Found line to remove! store i8 0, i8* %var_2_12, align 1
Found line to remove! store i8 1, i8* %var_2_13, align 1
Found line to remove! store i8 1, i8* %var_2_15, align 1
Found line to remove! store i8 0, i8* %var_2_16, align 1
Found line to remove! store i8 0, i8* %var_2_17, align 1
Found line to remove! store i8 0, i8* %var_2_14, align 1
Found line to remove! store i64 0, i64* %RCX, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_400740__rodata_type* @seg_400740__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! store i64 0, i64* %RSI, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_35/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_35/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
