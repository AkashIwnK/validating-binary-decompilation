Writing '/tmp/tmpskfn5qrh.dot'...
Writing '/tmp/tmpskfn5qrh.dot':Done

Reading LLVM: /tmp/tmpffs1yn13-query.ll
Extracting function [f] from /tmp/tmpffs1yn13-query.ll
Dot file generated!
Writing '/tmp/tmp8mdhshvw.dot'...
Writing '/tmp/tmp8mdhshvw.dot':Done

Reading LLVM: /tmp/tmpqj_xqyg6-target.ll
Extracting function [f] from /tmp/tmpqj_xqyg6-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %RDI.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 14 %11 = add i64 %7, -16
- 15 %12 = load i64, i64* %RDI.i13, align 8
- 16 %13 = add i64 %10, 7
- 17 store i64 %13, i64* %3, align 8
- 18 %14 = inttoptr i64 %11 to i64*
- 19 store i64 %12, i64* %14, align 8
- 20 %FS_BASE.i11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0
- 21 %15 = load i64, i64* %FS_BASE.i11, align 8
- 22 %16 = add i64 %15, -8
- 23 %17 = load i64, i64* %3, align 8
- 24 %18 = add i64 %17, 9
- 25 store i64 %18, i64* %3, align 8
- 26 %19 = inttoptr i64 %16 to i64*
- 27 %20 = load i64, i64* %19, align 8
- 28 %21 = add i64 %20, 1
- 29 store i64 %21, i64* %RDI.i13, align 8
- 30 %22 = trunc i64 %21 to i32
- 31 %23 = and i32 %22, 255
- 32 %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
- 33 %25 = trunc i32 %24 to i8
- 34 %26 = and i8 %25, 1
- 35 %27 = xor i8 %26, 1
- 36 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 37 store i8 %27, i8* %28, align 1
- 38 %29 = xor i64 %21, %20
- 39 %30 = lshr i64 %29, 4
- 40 %31 = trunc i64 %30 to i8
- 41 %32 = and i8 %31, 1
- 42 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 43 store i8 %32, i8* %33, align 1
- 44 %34 = icmp eq i64 %21, 0
- 45 %35 = zext i1 %34 to i8
- 46 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 47 store i8 %35, i8* %36, align 1
- 48 %37 = lshr i64 %21, 63
- 49 %38 = trunc i64 %37 to i8
- 50 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 51 store i8 %38, i8* %39, align 1
- 52 %40 = lshr i64 %20, 63
- 53 %41 = xor i64 %37, %40
- 54 %42 = add nuw nsw i64 %41, %37
- 55 %43 = icmp eq i64 %42, 2
- 56 %44 = zext i1 %43 to i8
- 57 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 58 store i8 %44, i8* %45, align 1
- 59 %46 = add i64 %17, 21
- 60 store i64 %46, i64* %3, align 8
- 61 store i64 %21, i64* %19, align 8
- 62 %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 63 %47 = load i64, i64* %FS_BASE.i11, align 8
- 64 %48 = add i64 %47, -8
- 65 %49 = load i64, i64* %3, align 8
- 66 %50 = add i64 %49, 9
- 67 store i64 %50, i64* %3, align 8
- 68 %51 = inttoptr i64 %48 to i64*
- 69 %52 = load i64, i64* %51, align 8
- 70 store i64 %52, i64* %RAX.i, align 8
- 71 %53 = add i64 %49, 10
- 72 store i64 %53, i64* %3, align 8
- 73 %54 = load i64, i64* %6, align 8
- 74 %55 = add i64 %54, 8
- 75 %56 = inttoptr i64 %54 to i64*
- 76 %57 = load i64, i64* %56, align 8
- 77 store i64 %57, i64* %RBP.i, align 8
- 78 store i64 %55, i64* %6, align 8
- 79 %58 = add i64 %49, 11
- 80 store i64 %58, i64* %3, align 8
- 81 %59 = inttoptr i64 %55 to i64*
- 82 %60 = load i64, i64* %59, align 8
- 83 store i64 %60, i64* %3, align 8
- 84 %61 = add i64 %54, 16
- 85 store i64 %61, i64* %6, align 8
- 86 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f0b336c72f0>, {0: {0}, 1: {3}, 2: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 3: {29, 6}, 4: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 5: {8}, 6: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 7: {64, 10, 23}, 8: {68, 75, 11, 81, 20, 27}, 9: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 10: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 11: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 12: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 13: {2}, 14: {16}, 15: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 16: {18}, 17: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 18: {68, 75, 11, 81, 20, 27}, 19: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 20: {4}, 21: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 22: {64, 10, 23}, 23: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 24: {25, 66}, 25: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 26: {68, 75, 11, 81, 20, 27}, 27: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 28: {29, 6}, 29: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 30: {41, 34, 50, 31}, 31: {32}, 32: {33}, 33: {41, 34, 50, 31}, 34: {42, 35}, 35: {36}, 36: {37}, 37: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 38: {54, 39}, 39: {40}, 40: {41, 34, 50, 31}, 41: {42, 35}, 42: {43}, 43: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 44: {45}, 45: {57, 46}, 46: {47}, 47: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 48: {49, 53}, 49: {41, 34, 50, 31}, 50: {51}, 51: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 52: {49, 53}, 53: {54, 39}, 54: {55}, 55: {56}, 56: {57, 46}, 57: {58}, 58: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 59: {60}, 60: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 61: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 62: {1}, 63: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 64: {64, 10, 23}, 65: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 66: {25, 66}, 67: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 68: {68, 75, 11, 81, 20, 27}, 69: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 70: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 71: {71}, 72: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 73: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 74: {74}, 75: {68, 75, 11, 81, 20, 27}, 76: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 77: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 78: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 79: {79}, 80: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 81: {68, 75, 11, 81, 20, 27}, 82: {65, 5, 69, 9, 73, 76, 14, 17, 82, 22, 24, 28, 63}, 83: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 84: {84}, 85: {7, 12, 13, 15, 19, 21, 26, 30, 38, 44, 48, 52, 59, 61, 62, 67, 70, 72, 77, 78, 80, 83, 85}, 86: {86}})
Equivalent! frozenset({24, 65}) {65, 23}
Equivalent! frozenset({25, 66}) {24, 66}
Equivalent! frozenset({26, 67}) {25, 67}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f0b336c72f0>, {0: {0}, 1: {3}, 2: {5}, 3: {6}, 4: {7}, 5: {8}, 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {14}, 12: {15}, 13: {2}, 14: {16}, 15: {17}, 16: {18}, 17: {19}, 18: {20}, 19: {21}, 20: {4}, 21: {22}, 22: {23}, 23: {65}, 24: {25}, 25: {26}, 26: {27}, 27: {28}, 28: {29}, 29: {30}, 30: {31}, 31: {32}, 32: {33}, 33: {34}, 34: {35}, 35: {36}, 36: {37}, 37: {38}, 38: {39}, 39: {40}, 40: {41}, 41: {42}, 42: {43}, 43: {44}, 44: {45}, 45: {46}, 46: {47}, 47: {48}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {56}, 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {1}, 63: {63}, 64: {64}, 65: {24}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 getelementptr getelementptr
EXACT 21 load load
EXACT 22 add add
EXACT 23 load load
EXACT 24 add add
EXACT 25 store store
EXACT 26 inttoptr inttoptr
EXACT 27 load load
EXACT 28 add add
EXACT 29 store store
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 tail tail
EXACT 33 trunc trunc
EXACT 34 and and
EXACT 35 xor xor
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 xor xor
EXACT 39 lshr lshr
EXACT 40 trunc trunc
EXACT 41 and and
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 trunc trunc
EXACT 50 getelementptr getelementptr
EXACT 51 store store
EXACT 52 lshr lshr
EXACT 53 xor xor
EXACT 54 add add
EXACT 55 icmp icmp
EXACT 56 zext zext
EXACT 57 getelementptr getelementptr
EXACT 58 store store
EXACT 59 add add
EXACT 60 store store
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 load load
EXACT 70 store store
EXACT 71 add add
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 store store
EXACT 78 store store
EXACT 79 add add
EXACT 80 store store
EXACT 81 inttoptr inttoptr
EXACT 82 load load
EXACT 83 store store
EXACT 84 add add
EXACT 85 store store
EXACT 86 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 3 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 4 %FS_BASE = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0
- 5 %3 = load i64, i64* %RBP, align 8
- 6 %4 = add i64 %1, 1
- 7 store i64 %4, i64* %PC, align 8
- 8 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 9 %6 = load i64, i64* %5, align 8
- 10 %7 = add i64 %6, -8
- 11 %8 = inttoptr i64 %7 to i64*
- 12 store i64 %3, i64* %8, align 8
- 13 store i64 %7, i64* %5, align 8
- 14 %9 = load i64, i64* %PC, align 8
- 15 store i64 %7, i64* %RBP, align 8
- 16 %10 = add i64 %6, -16
- 17 %11 = load i64, i64* %RDI, align 8
- 18 %12 = add i64 %9, 7
- 19 store i64 %12, i64* %PC, align 8
- 20 %13 = inttoptr i64 %10 to i64*
- 21 store i64 %11, i64* %13, align 8
- 22 %14 = load i64, i64* %FS_BASE, align 8
- 23 %15 = add i64 %14, -8
- 24 %16 = load i64, i64* %PC, align 8
- 25 %17 = add i64 %16, 9
- 26 store i64 %17, i64* %PC, align 8
- 27 %18 = inttoptr i64 %15 to i64*
- 28 %19 = load i64, i64* %18, align 8
- 29 %20 = add i64 %19, 1
- 30 store i64 %20, i64* %RDI, align 8
- 31 %21 = trunc i64 %20 to i32
- 32 %22 = and i32 %21, 255
- 33 %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #11
- 34 %24 = trunc i32 %23 to i8
- 35 %25 = and i8 %24, 1
- 36 %26 = xor i8 %25, 1
- 37 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 38 store i8 %26, i8* %27, align 1
- 39 %28 = xor i64 %20, %19
- 40 %29 = lshr i64 %28, 4
- 41 %30 = trunc i64 %29 to i8
- 42 %31 = and i8 %30, 1
- 43 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 44 store i8 %31, i8* %32, align 1
- 45 %33 = icmp eq i64 %20, 0
- 46 %34 = zext i1 %33 to i8
- 47 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 48 store i8 %34, i8* %35, align 1
- 49 %36 = lshr i64 %20, 63
- 50 %37 = trunc i64 %36 to i8
- 51 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 52 store i8 %37, i8* %38, align 1
- 53 %39 = lshr i64 %19, 63
- 54 %40 = xor i64 %36, %39
- 55 %41 = add nuw nsw i64 %40, %36
- 56 %42 = icmp eq i64 %41, 2
- 57 %43 = zext i1 %42 to i8
- 58 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 59 store i8 %43, i8* %44, align 1
- 60 %45 = add i64 %16, 21
- 61 store i64 %45, i64* %PC, align 8
- 62 store i64 %20, i64* %18, align 8
- 63 %46 = load i64, i64* %FS_BASE, align 8
- 64 %47 = add i64 %46, -8
- 65 %48 = load i64, i64* %PC, align 8
- 66 %49 = add i64 %48, 9
- 67 store i64 %49, i64* %PC, align 8
- 68 %50 = inttoptr i64 %47 to i64*
- 69 %51 = load i64, i64* %50, align 8
- 70 store i64 %51, i64* %RAX, align 8
- 71 %52 = add i64 %48, 10
- 72 store i64 %52, i64* %PC, align 8
- 73 %53 = load i64, i64* %5, align 8
- 74 %54 = add i64 %53, 8
- 75 %55 = inttoptr i64 %53 to i64*
- 76 %56 = load i64, i64* %55, align 8
- 77 store i64 %56, i64* %RBP, align 8
- 78 store i64 %54, i64* %5, align 8
- 79 %57 = add i64 %48, 11
- 80 store i64 %57, i64* %PC, align 8
- 81 %58 = inttoptr i64 %54 to i64*
- 82 %59 = load i64, i64* %58, align 8
- 83 store i64 %59, i64* %PC, align 8
- 84 %60 = add i64 %53, 16
- 85 store i64 %60, i64* %5, align 8
- 86 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f0b336c76a8>, {0: {0}, 1: {62}, 2: {13}, 3: {1}, 4: {20}, 5: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 6: {3, 28}, 7: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 8: {5}, 9: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 10: {64, 22, 7}, 11: {68, 8, 75, 81, 18, 26}, 12: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 13: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 14: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 15: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 16: {14}, 17: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 18: {16}, 19: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 20: {68, 8, 75, 81, 18, 26}, 21: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 22: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 23: {64, 22, 7}, 24: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 25: {24, 66}, 26: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 27: {68, 8, 75, 81, 18, 26}, 28: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 29: {3, 28}, 30: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 31: {40, 33, 30, 49}, 32: {31}, 33: {32}, 34: {40, 33, 30, 49}, 35: {41, 34}, 36: {35}, 37: {36}, 38: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 39: {53, 38}, 40: {39}, 41: {40, 33, 30, 49}, 42: {41, 34}, 43: {42}, 44: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 45: {44}, 46: {56, 45}, 47: {46}, 48: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 49: {48, 52}, 50: {40, 33, 30, 49}, 51: {50}, 52: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 53: {48, 52}, 54: {53, 38}, 55: {54}, 56: {55}, 57: {56, 45}, 58: {57}, 59: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 60: {59}, 61: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 62: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 63: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 64: {64, 22, 7}, 65: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 66: {24, 66}, 67: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 68: {68, 8, 75, 81, 18, 26}, 69: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 70: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 71: {71}, 72: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 73: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 74: {74}, 75: {68, 8, 75, 81, 18, 26}, 76: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 77: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 78: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 79: {79}, 80: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 81: {68, 8, 75, 81, 18, 26}, 82: {65, 2, 69, 6, 73, 11, 76, 15, 82, 21, 23, 27, 63}, 83: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 84: {84}, 85: {4, 9, 10, 12, 17, 19, 25, 29, 37, 43, 47, 51, 58, 60, 61, 67, 70, 72, 77, 78, 80, 83, 85}, 86: {86}})
Equivalent! frozenset({65, 23}) {24, 65}
Equivalent! frozenset({24, 66}) {25, 66}
Equivalent! frozenset({25, 67}) {26, 67}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f0b336c76a8>, {0: {0}, 1: {62}, 2: {13}, 3: {1}, 4: {20}, 5: {2}, 6: {3}, 7: {4}, 8: {5}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: {11}, 15: {12}, 16: {14}, 17: {15}, 18: {16}, 19: {17}, 20: {18}, 21: {19}, 22: {21}, 23: {22}, 24: {65}, 25: {24}, 26: {25}, 27: {26}, 28: {27}, 29: {28}, 30: {29}, 31: {30}, 32: {31}, 33: {32}, 34: {33}, 35: {34}, 36: {35}, 37: {36}, 38: {37}, 39: {38}, 40: {39}, 41: {40}, 42: {41}, 43: {42}, 44: {43}, 45: {44}, 46: {45}, 47: {46}, 48: {47}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {63}, 64: {64}, 65: {23}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 store store
EXACT 8 getelementptr getelementptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 store store
EXACT 13 store store
EXACT 14 load load
EXACT 15 store store
EXACT 16 add add
EXACT 17 load load
EXACT 18 add add
EXACT 19 store store
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 load load
EXACT 23 add add
EXACT 24 load load
EXACT 25 add add
EXACT 26 store store
EXACT 27 inttoptr inttoptr
EXACT 28 load load
EXACT 29 add add
EXACT 30 store store
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 tail tail
EXACT 34 trunc trunc
EXACT 35 and and
EXACT 36 xor xor
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 xor xor
EXACT 40 lshr lshr
EXACT 41 trunc trunc
EXACT 42 and and
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 icmp icmp
EXACT 46 zext zext
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 trunc trunc
EXACT 51 getelementptr getelementptr
EXACT 52 store store
EXACT 53 lshr lshr
EXACT 54 xor xor
EXACT 55 add add
EXACT 56 icmp icmp
EXACT 57 zext zext
EXACT 58 getelementptr getelementptr
EXACT 59 store store
EXACT 60 add add
EXACT 61 store store
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 load load
EXACT 70 store store
EXACT 71 add add
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 store store
EXACT 78 store store
EXACT 79 add add
EXACT 80 store store
EXACT 81 inttoptr inttoptr
EXACT 82 load load
EXACT 83 store store
EXACT 84 add add
EXACT 85 store store
EXACT 86 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i13, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %3, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%FS_BASE.i11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0', '%15 = load i64, i64* %FS_BASE.i11, align 8', '%16 = add i64 %15, -8', '%17 = load i64, i64* %3, align 8', '%18 = add i64 %17, 9', 'store i64 %18, i64* %3, align 8', '%19 = inttoptr i64 %16 to i64*', '%20 = load i64, i64* %19, align 8', '%21 = add i64 %20, 1', 'store i64 %21, i64* %RDI.i13, align 8', '%22 = trunc i64 %21 to i32', '%23 = and i32 %22, 255', '%24 = tail call i32 @llvm.ctpop.i32(i32 %23)', '%25 = trunc i32 %24 to i8', '%26 = and i8 %25, 1', '%27 = xor i8 %26, 1', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %27, i8* %28, align 1', '%29 = xor i64 %21, %20', '%30 = lshr i64 %29, 4', '%31 = trunc i64 %30 to i8', '%32 = and i8 %31, 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %32, i8* %33, align 1', '%34 = icmp eq i64 %21, 0', '%35 = zext i1 %34 to i8', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %35, i8* %36, align 1', '%37 = lshr i64 %21, 63', '%38 = trunc i64 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %38, i8* %39, align 1', '%40 = lshr i64 %20, 63', '%41 = xor i64 %37, %40', '%42 = add nuw nsw i64 %41, %37', '%43 = icmp eq i64 %42, 2', '%44 = zext i1 %43 to i8', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %44, i8* %45, align 1', '%46 = add i64 %17, 21', 'store i64 %46, i64* %3, align 8', 'store i64 %21, i64* %19, align 8', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%47 = load i64, i64* %FS_BASE.i11, align 8', '%48 = add i64 %47, -8', '%49 = load i64, i64* %3, align 8', '%50 = add i64 %49, 9', 'store i64 %50, i64* %3, align 8', '%51 = inttoptr i64 %48 to i64*', '%52 = load i64, i64* %51, align 8', 'store i64 %52, i64* %RAX.i, align 8', '%53 = add i64 %49, 10', 'store i64 %53, i64* %3, align 8', '%54 = load i64, i64* %6, align 8', '%55 = add i64 %54, 8', '%56 = inttoptr i64 %54 to i64*', '%57 = load i64, i64* %56, align 8', 'store i64 %57, i64* %RBP.i, align 8', 'store i64 %55, i64* %6, align 8', '%58 = add i64 %49, 11', 'store i64 %58, i64* %3, align 8', '%59 = inttoptr i64 %55 to i64*', '%60 = load i64, i64* %59, align 8', 'store i64 %60, i64* %3, align 8', '%61 = add i64 %54, 16', 'store i64 %61, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %RDI.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI.i13, align 8
Found line to remove! %13 = add i64 %10, 7
Found line to remove! store i64 %13, i64* %3, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Found line to remove! %FS_BASE.i11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0
Found line to remove! %15 = load i64, i64* %FS_BASE.i11, align 8
Found line to remove! %16 = add i64 %15, -8
Found line to remove! %17 = load i64, i64* %3, align 8
Found line to remove! %18 = add i64 %17, 9
Found line to remove! store i64 %18, i64* %3, align 8
Found line to remove! %19 = inttoptr i64 %16 to i64*
Found line to remove! %20 = load i64, i64* %19, align 8
Found line to remove! %21 = add i64 %20, 1
Found line to remove! store i64 %21, i64* %RDI.i13, align 8
Found line to remove! %22 = trunc i64 %21 to i32
Found line to remove! %23 = and i32 %22, 255
Found line to remove! %24 = tail call i32 @llvm.ctpop.i32(i32 %23)
Found line to remove! %25 = trunc i32 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = xor i8 %26, 1
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = xor i64 %21, %20
Found line to remove! %30 = lshr i64 %29, 4
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = and i8 %31, 1
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = icmp eq i64 %21, 0
Found line to remove! %35 = zext i1 %34 to i8
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %35, i8* %36, align 1
Found line to remove! %37 = lshr i64 %21, 63
Found line to remove! %38 = trunc i64 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = lshr i64 %20, 63
Found line to remove! %41 = xor i64 %37, %40
Found line to remove! %42 = add nuw nsw i64 %41, %37
Found line to remove! %43 = icmp eq i64 %42, 2
Found line to remove! %44 = zext i1 %43 to i8
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %44, i8* %45, align 1
Found line to remove! %46 = add i64 %17, 21
Found line to remove! store i64 %46, i64* %3, align 8
Found line to remove! store i64 %21, i64* %19, align 8
Found line to remove! %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %47 = load i64, i64* %FS_BASE.i11, align 8
Found line to remove! %48 = add i64 %47, -8
Found line to remove! %49 = load i64, i64* %3, align 8
Found line to remove! %50 = add i64 %49, 9
Found line to remove! store i64 %50, i64* %3, align 8
Found line to remove! %51 = inttoptr i64 %48 to i64*
Found line to remove! %52 = load i64, i64* %51, align 8
Found line to remove! store i64 %52, i64* %RAX.i, align 8
Found line to remove! %53 = add i64 %49, 10
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = load i64, i64* %6, align 8
Found line to remove! %55 = add i64 %54, 8
Found line to remove! %56 = inttoptr i64 %54 to i64*
Found line to remove! %57 = load i64, i64* %56, align 8
Found line to remove! store i64 %57, i64* %RBP.i, align 8
Found line to remove! store i64 %55, i64* %6, align 8
Found line to remove! %58 = add i64 %49, 11
Found line to remove! store i64 %58, i64* %3, align 8
Found line to remove! %59 = inttoptr i64 %55 to i64*
Found line to remove! %60 = load i64, i64* %59, align 8
Found line to remove! store i64 %60, i64* %3, align 8
Found line to remove! %61 = add i64 %54, 16
Found line to remove! store i64 %61, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i13, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %3, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%FS_BASE.i11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0', '%15 = load i64, i64* %FS_BASE.i11, align 8', '%16 = add i64 %15, -8', '%17 = load i64, i64* %3, align 8', '%18 = add i64 %17, 9', 'store i64 %18, i64* %3, align 8', '%19 = inttoptr i64 %16 to i64*', '%20 = load i64, i64* %19, align 8', '%21 = add i64 %20, 1', 'store i64 %21, i64* %RDI.i13, align 8', '%22 = trunc i64 %21 to i32', '%23 = and i32 %22, 255', '%24 = tail call i32 @llvm.ctpop.i32(i32 %23)', '%25 = trunc i32 %24 to i8', '%26 = and i8 %25, 1', '%27 = xor i8 %26, 1', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %27, i8* %28, align 1', '%29 = xor i64 %21, %20', '%30 = lshr i64 %29, 4', '%31 = trunc i64 %30 to i8', '%32 = and i8 %31, 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %32, i8* %33, align 1', '%34 = icmp eq i64 %21, 0', '%35 = zext i1 %34 to i8', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %35, i8* %36, align 1', '%37 = lshr i64 %21, 63', '%38 = trunc i64 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %38, i8* %39, align 1', '%40 = lshr i64 %20, 63', '%41 = xor i64 %37, %40', '%42 = add nuw nsw i64 %41, %37', '%43 = icmp eq i64 %42, 2', '%44 = zext i1 %43 to i8', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %44, i8* %45, align 1', '%46 = add i64 %17, 21', 'store i64 %46, i64* %3, align 8', 'store i64 %21, i64* %19, align 8', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%47 = load i64, i64* %FS_BASE.i11, align 8', '%48 = add i64 %47, -8', '%49 = load i64, i64* %3, align 8', '%50 = add i64 %49, 9', 'store i64 %50, i64* %3, align 8', '%51 = inttoptr i64 %48 to i64*', '%52 = load i64, i64* %51, align 8', 'store i64 %52, i64* %RAX.i, align 8', '%53 = add i64 %49, 10', 'store i64 %53, i64* %3, align 8', '%54 = load i64, i64* %6, align 8', '%55 = add i64 %54, 8', '%56 = inttoptr i64 %54 to i64*', '%57 = load i64, i64* %56, align 8', 'store i64 %57, i64* %RBP.i, align 8', 'store i64 %55, i64* %6, align 8', '%58 = add i64 %49, 11', 'store i64 %58, i64* %3, align 8', '%59 = inttoptr i64 %55 to i64*', '%60 = load i64, i64* %59, align 8', 'store i64 %60, i64* %3, align 8', '%61 = add i64 %54, 16', 'store i64 %61, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%FS_BASE = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %5, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %3, i64* %8, align 8', 'store i64 %7, i64* %5, align 8', '%9 = load i64, i64* %PC, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -16', '%11 = load i64, i64* %RDI, align 8', '%12 = add i64 %9, 7', 'store i64 %12, i64* %PC, align 8', '%13 = inttoptr i64 %10 to i64*', 'store i64 %11, i64* %13, align 8', '%14 = load i64, i64* %FS_BASE, align 8', '%15 = add i64 %14, -8', '%16 = load i64, i64* %PC, align 8', '%17 = add i64 %16, 9', 'store i64 %17, i64* %PC, align 8', '%18 = inttoptr i64 %15 to i64*', '%19 = load i64, i64* %18, align 8', '%20 = add i64 %19, 1', 'store i64 %20, i64* %RDI, align 8', '%21 = trunc i64 %20 to i32', '%22 = and i32 %21, 255', '%23 = tail call i32 @llvm.ctpop.i32(i32 %22) #11', '%24 = trunc i32 %23 to i8', '%25 = and i8 %24, 1', '%26 = xor i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %26, i8* %27, align 1', '%28 = xor i64 %20, %19', '%29 = lshr i64 %28, 4', '%30 = trunc i64 %29 to i8', '%31 = and i8 %30, 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %31, i8* %32, align 1', '%33 = icmp eq i64 %20, 0', '%34 = zext i1 %33 to i8', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %34, i8* %35, align 1', '%36 = lshr i64 %20, 63', '%37 = trunc i64 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %37, i8* %38, align 1', '%39 = lshr i64 %19, 63', '%40 = xor i64 %36, %39', '%41 = add nuw nsw i64 %40, %36', '%42 = icmp eq i64 %41, 2', '%43 = zext i1 %42 to i8', '%44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %43, i8* %44, align 1', '%45 = add i64 %16, 21', 'store i64 %45, i64* %PC, align 8', 'store i64 %20, i64* %18, align 8', '%46 = load i64, i64* %FS_BASE, align 8', '%47 = add i64 %46, -8', '%48 = load i64, i64* %PC, align 8', '%49 = add i64 %48, 9', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %47 to i64*', '%51 = load i64, i64* %50, align 8', 'store i64 %51, i64* %RAX, align 8', '%52 = add i64 %48, 10', 'store i64 %52, i64* %PC, align 8', '%53 = load i64, i64* %5, align 8', '%54 = add i64 %53, 8', '%55 = inttoptr i64 %53 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RBP, align 8', 'store i64 %54, i64* %5, align 8', '%57 = add i64 %48, 11', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %54 to i64*', '%59 = load i64, i64* %58, align 8', 'store i64 %59, i64* %PC, align 8', '%60 = add i64 %53, 16', 'store i64 %60, i64* %5, align 8'])
Keep: block_400620:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %FS_BASE = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %5, align 8
Found line to remove! %7 = add i64 %6, -8
Found line to remove! %8 = inttoptr i64 %7 to i64*
Found line to remove! store i64 %3, i64* %8, align 8
Found line to remove! store i64 %7, i64* %5, align 8
Found line to remove! %9 = load i64, i64* %PC, align 8
Found line to remove! store i64 %7, i64* %RBP, align 8
Found line to remove! %10 = add i64 %6, -16
Found line to remove! %11 = load i64, i64* %RDI, align 8
Found line to remove! %12 = add i64 %9, 7
Found line to remove! store i64 %12, i64* %PC, align 8
Found line to remove! %13 = inttoptr i64 %10 to i64*
Found line to remove! store i64 %11, i64* %13, align 8
Found line to remove! %14 = load i64, i64* %FS_BASE, align 8
Found line to remove! %15 = add i64 %14, -8
Found line to remove! %16 = load i64, i64* %PC, align 8
Found line to remove! %17 = add i64 %16, 9
Found line to remove! store i64 %17, i64* %PC, align 8
Found line to remove! %18 = inttoptr i64 %15 to i64*
Found line to remove! %19 = load i64, i64* %18, align 8
Found line to remove! %20 = add i64 %19, 1
Found line to remove! store i64 %20, i64* %RDI, align 8
Found line to remove! %21 = trunc i64 %20 to i32
Found line to remove! %22 = and i32 %21, 255
Found line to remove! %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #11
Found line to remove! %24 = trunc i32 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = xor i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = xor i64 %20, %19
Found line to remove! %29 = lshr i64 %28, 4
Found line to remove! %30 = trunc i64 %29 to i8
Found line to remove! %31 = and i8 %30, 1
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = icmp eq i64 %20, 0
Found line to remove! %34 = zext i1 %33 to i8
Found line to remove! %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %34, i8* %35, align 1
Found line to remove! %36 = lshr i64 %20, 63
Found line to remove! %37 = trunc i64 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = lshr i64 %19, 63
Found line to remove! %40 = xor i64 %36, %39
Found line to remove! %41 = add nuw nsw i64 %40, %36
Found line to remove! %42 = icmp eq i64 %41, 2
Found line to remove! %43 = zext i1 %42 to i8
Found line to remove! %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %43, i8* %44, align 1
Found line to remove! %45 = add i64 %16, 21
Found line to remove! store i64 %45, i64* %PC, align 8
Found line to remove! store i64 %20, i64* %18, align 8
Found line to remove! %46 = load i64, i64* %FS_BASE, align 8
Found line to remove! %47 = add i64 %46, -8
Found line to remove! %48 = load i64, i64* %PC, align 8
Found line to remove! %49 = add i64 %48, 9
Found line to remove! store i64 %49, i64* %PC, align 8
Found line to remove! %50 = inttoptr i64 %47 to i64*
Found line to remove! %51 = load i64, i64* %50, align 8
Found line to remove! store i64 %51, i64* %RAX, align 8
Found line to remove! %52 = add i64 %48, 10
Found line to remove! store i64 %52, i64* %PC, align 8
Found line to remove! %53 = load i64, i64* %5, align 8
Found line to remove! %54 = add i64 %53, 8
Found line to remove! %55 = inttoptr i64 %53 to i64*
Found line to remove! %56 = load i64, i64* %55, align 8
Found line to remove! store i64 %56, i64* %RBP, align 8
Found line to remove! store i64 %54, i64* %5, align 8
Found line to remove! %57 = add i64 %48, 11
Found line to remove! store i64 %57, i64* %PC, align 8
Found line to remove! %58 = inttoptr i64 %54 to i64*
Found line to remove! %59 = load i64, i64* %58, align 8
Found line to remove! store i64 %59, i64* %PC, align 8
Found line to remove! %60 = add i64 %53, 16
Found line to remove! store i64 %60, i64* %5, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%FS_BASE = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 5, i32 7, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %5, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %3, i64* %8, align 8', 'store i64 %7, i64* %5, align 8', '%9 = load i64, i64* %PC, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -16', '%11 = load i64, i64* %RDI, align 8', '%12 = add i64 %9, 7', 'store i64 %12, i64* %PC, align 8', '%13 = inttoptr i64 %10 to i64*', 'store i64 %11, i64* %13, align 8', '%14 = load i64, i64* %FS_BASE, align 8', '%15 = add i64 %14, -8', '%16 = load i64, i64* %PC, align 8', '%17 = add i64 %16, 9', 'store i64 %17, i64* %PC, align 8', '%18 = inttoptr i64 %15 to i64*', '%19 = load i64, i64* %18, align 8', '%20 = add i64 %19, 1', 'store i64 %20, i64* %RDI, align 8', '%21 = trunc i64 %20 to i32', '%22 = and i32 %21, 255', '%23 = tail call i32 @llvm.ctpop.i32(i32 %22) #11', '%24 = trunc i32 %23 to i8', '%25 = and i8 %24, 1', '%26 = xor i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %26, i8* %27, align 1', '%28 = xor i64 %20, %19', '%29 = lshr i64 %28, 4', '%30 = trunc i64 %29 to i8', '%31 = and i8 %30, 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %31, i8* %32, align 1', '%33 = icmp eq i64 %20, 0', '%34 = zext i1 %33 to i8', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %34, i8* %35, align 1', '%36 = lshr i64 %20, 63', '%37 = trunc i64 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %37, i8* %38, align 1', '%39 = lshr i64 %19, 63', '%40 = xor i64 %36, %39', '%41 = add nuw nsw i64 %40, %36', '%42 = icmp eq i64 %41, 2', '%43 = zext i1 %42 to i8', '%44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %43, i8* %44, align 1', '%45 = add i64 %16, 21', 'store i64 %45, i64* %PC, align 8', 'store i64 %20, i64* %18, align 8', '%46 = load i64, i64* %FS_BASE, align 8', '%47 = add i64 %46, -8', '%48 = load i64, i64* %PC, align 8', '%49 = add i64 %48, 9', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %47 to i64*', '%51 = load i64, i64* %50, align 8', 'store i64 %51, i64* %RAX, align 8', '%52 = add i64 %48, 10', 'store i64 %52, i64* %PC, align 8', '%53 = load i64, i64* %5, align 8', '%54 = add i64 %53, 8', '%55 = inttoptr i64 %53 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RBP, align 8', 'store i64 %54, i64* %5, align 8', '%57 = add i64 %48, 11', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %54 to i64*', '%59 = load i64, i64* %58, align 8', 'store i64 %59, i64* %PC, align 8', '%60 = add i64 %53, 16', 'store i64 %60, i64* %5, align 8'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_35/f/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_35/binary/test.mcsema.calls_renamed.ll f
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
