Writing '/tmp/tmpsuvczu0y.dot'...
Writing '/tmp/tmpsuvczu0y.dot':Done

Reading LLVM: /tmp/tmpj8gd6gsi-query.ll
Extracting function [main] from /tmp/tmpj8gd6gsi-query.ll
Dot file generated!
Writing '/tmp/tmppx6qi1cx.dot'...
Writing '/tmp/tmppx6qi1cx.dot':Done

Reading LLVM: /tmp/tmpmgxtoxre-target.ll
Extracting function [main] from /tmp/tmpmgxtoxre-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -88
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 80
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 49 %RSI.i52 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
- 50 store i64 10, i64* %RSI.i52, align 8
- 51 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 52 %RAX.i49 = getelementptr inbounds %union.anon, %union.anon* %41, i64 0, i32 0
- 53 %42 = add i64 %7, -56
- 54 store i64 %42, i64* %RAX.i49, align 8
- 55 %RCX.i47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 56 store i64 ptrtoint (%G__0x4006d0_type* @G__0x4006d0 to i64), i64* %RCX.i47, align 8
- 57 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 58 store i64 40, i64* %RDX.i, align 8
- 59 %43 = add i64 %7, -12
- 60 %44 = add i64 %10, 38
- 61 store i64 %44, i64* %3, align 8
- 62 %45 = inttoptr i64 %43 to i32*
- 63 store i32 0, i32* %45, align 4
- 64 %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 65 %46 = load i64, i64* %RAX.i49, align 8
- 66 %47 = load i64, i64* %3, align 8
- 67 store i64 %46, i64* %RDI.i42, align 8
- 68 %ESI.i38 = bitcast %union.anon* %40 to i32*
- 69 %48 = load i64, i64* %RBP.i, align 8
- 70 %49 = add i64 %48, -56
- 71 %50 = load i32, i32* %ESI.i38, align 4
- 72 %51 = add i64 %47, 6
- 73 store i64 %51, i64* %3, align 8
- 74 %52 = inttoptr i64 %49 to i32*
- 75 store i32 %50, i32* %52, align 4
- 76 %53 = load i64, i64* %RCX.i47, align 8
- 77 %54 = load i64, i64* %3, align 8
- 78 store i64 %53, i64* %RSI.i52, align 8
- 79 %55 = load i64, i64* %RBP.i, align 8
- 80 %56 = add i64 %55, -64
- 81 %57 = load i64, i64* %RAX.i49, align 8
- 82 %58 = add i64 %54, 7
- 83 store i64 %58, i64* %3, align 8
- 84 %59 = inttoptr i64 %56 to i64*
- 85 store i64 %57, i64* %59, align 8
- 86 %60 = load i64, i64* %3, align 8
- 87 %61 = add i64 %60, -388
- 88 %62 = add i64 %60, 5
- 89 %63 = load i64, i64* %6, align 8
- 90 %64 = add i64 %63, -8
- 91 %65 = inttoptr i64 %64 to i64*
- 92 store i64 %62, i64* %65, align 8
- 93 store i64 %64, i64* %6, align 8
- 94 store i64 %61, i64* %3, align 8
- 95 %66 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
- 96 %67 = load i64, i64* %RBP.i, align 8
- 97 %68 = add i64 %67, -64
- 98 %69 = load i64, i64* %3, align 8
- 99 %70 = add i64 %69, 4
- 100 store i64 %70, i64* %3, align 8
- 101 %71 = inttoptr i64 %68 to i64*
- 102 %72 = load i64, i64* %71, align 8
- 103 store i64 %72, i64* %RDI.i42, align 8
- 104 %73 = add i64 %67, -56
- 105 %74 = add i64 %69, 7
- 106 store i64 %74, i64* %3, align 8
- 107 %75 = inttoptr i64 %73 to i32*
- 108 %76 = load i32, i32* %75, align 4
- 109 %77 = zext i32 %76 to i64
- 110 store i64 %77, i64* %RSI.i52, align 8
- 111 %78 = add i64 %69, -137
- 112 %79 = add i64 %69, 12
- 113 %80 = load i64, i64* %6, align 8
- 114 %81 = add i64 %80, -8
- 115 %82 = inttoptr i64 %81 to i64*
- 116 store i64 %79, i64* %82, align 8
- 117 store i64 %81, i64* %6, align 8
- 118 store i64 %78, i64* %3, align 8
- 119 %call2_400610 = tail call %struct.Memory* @sub_400580.foo(%struct.State* %0, i64 %78, %struct.Memory* %66)
- 120 %83 = load i64, i64* %3, align 8
- 121 store i64 ptrtoint (%G__0x4006f8_type* @G__0x4006f8 to i64), i64* %RDI.i42, align 8
- 122 %EAX.i19 = bitcast %union.anon* %41 to i32*
- 123 %84 = load i64, i64* %RBP.i, align 8
- 124 %85 = add i64 %84, -52
- 125 %86 = load i32, i32* %EAX.i19, align 4
- 126 %87 = add i64 %83, 13
- 127 store i64 %87, i64* %3, align 8
- 128 %88 = inttoptr i64 %85 to i32*
- 129 store i32 %86, i32* %88, align 4
- 130 %89 = load i64, i64* %RBP.i, align 8
- 131 %90 = add i64 %89, -52
- 132 %91 = load i64, i64* %3, align 8
- 133 %92 = add i64 %91, 3
- 134 store i64 %92, i64* %3, align 8
- 135 %93 = inttoptr i64 %90 to i32*
- 136 %94 = load i32, i32* %93, align 4
- 137 %95 = zext i32 %94 to i64
- 138 store i64 %95, i64* %RSI.i52, align 8
- 139 %AL.i = bitcast %union.anon* %41 to i8*
- 140 store i8 0, i8* %AL.i, align 1
- 141 %96 = add i64 %91, -434
- 142 %97 = add i64 %91, 10
- 143 %98 = load i64, i64* %6, align 8
- 144 %99 = add i64 %98, -8
- 145 %100 = inttoptr i64 %99 to i64*
- 146 store i64 %97, i64* %100, align 8
- 147 store i64 %99, i64* %6, align 8
- 148 store i64 %96, i64* %3, align 8
- 149 %101 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400610)
- 150 %102 = load i64, i64* %RBP.i, align 8
- 151 %103 = add i64 %102, -52
- 152 %104 = load i64, i64* %3, align 8
- 153 %105 = add i64 %104, 3
- 154 store i64 %105, i64* %3, align 8
- 155 %106 = inttoptr i64 %103 to i32*
- 156 %107 = load i32, i32* %106, align 4
- 157 %108 = zext i32 %107 to i64
- 158 store i64 %108, i64* %RSI.i52, align 8
- 159 %109 = add i64 %102, -68
- 160 %110 = load i32, i32* %EAX.i19, align 4
- 161 %111 = add i64 %104, 6
- 162 store i64 %111, i64* %3, align 8
- 163 %112 = inttoptr i64 %109 to i32*
- 164 store i32 %110, i32* %112, align 4
- 165 %113 = load i32, i32* %ESI.i38, align 4
- 166 %114 = zext i32 %113 to i64
- 167 %115 = load i64, i64* %3, align 8
- 168 store i64 %114, i64* %RAX.i49, align 8
- 169 %116 = load i64, i64* %6, align 8
- 170 %117 = add i64 %116, 80
- 171 store i64 %117, i64* %6, align 8
- 172 %118 = icmp ugt i64 %116, -81
- 173 %119 = zext i1 %118 to i8
- 174 store i8 %119, i8* %14, align 1
- 175 %120 = trunc i64 %117 to i32
- 176 %121 = and i32 %120, 255
- 177 %122 = tail call i32 @llvm.ctpop.i32(i32 %121)
- 178 %123 = trunc i32 %122 to i8
- 179 %124 = and i8 %123, 1
- 180 %125 = xor i8 %124, 1
- 181 store i8 %125, i8* %21, align 1
- 182 %126 = xor i64 %116, 16
- 183 %127 = xor i64 %126, %117
- 184 %128 = lshr i64 %127, 4
- 185 %129 = trunc i64 %128 to i8
- 186 %130 = and i8 %129, 1
- 187 store i8 %130, i8* %27, align 1
- 188 %131 = icmp eq i64 %117, 0
- 189 %132 = zext i1 %131 to i8
- 190 store i8 %132, i8* %30, align 1
- 191 %133 = lshr i64 %117, 63
- 192 %134 = trunc i64 %133 to i8
- 193 store i8 %134, i8* %33, align 1
- 194 %135 = lshr i64 %116, 63
- 195 %136 = xor i64 %133, %135
- 196 %137 = add nuw nsw i64 %136, %133
- 197 %138 = icmp eq i64 %137, 2
- 198 %139 = zext i1 %138 to i8
- 199 store i8 %139, i8* %39, align 1
- 200 %140 = add i64 %115, 7
- 201 store i64 %140, i64* %3, align 8
- 202 %141 = add i64 %116, 88
- 203 %142 = inttoptr i64 %117 to i64*
- 204 %143 = load i64, i64* %142, align 8
- 205 store i64 %143, i64* %RBP.i, align 8
- 206 store i64 %141, i64* %6, align 8
- 207 %144 = add i64 %115, 8
- 208 store i64 %144, i64* %3, align 8
- 209 %145 = inttoptr i64 %141 to i64*
- 210 %146 = load i64, i64* %145, align 8
- 211 store i64 %146, i64* %3, align 8
- 212 %147 = add i64 %116, 96
- 213 store i64 %147, i64* %6, align 8
- 214 ret %struct.Memory* %101
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d2db2268>, {0: {0}, 1: {12}, 2: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 3: {14}, 4: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 5: {11}, 6: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 7: {116, 17, 92, 144}, 8: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 9: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 10: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 11: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 12: {22}, 13: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 14: {24}, 15: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 16: {26}, 17: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 18: {192, 39, 175, 48, 178, 185, 28, 31}, 19: {176, 29}, 20: {97, 177, 149, 121, 30}, 21: {192, 39, 175, 48, 178, 185, 28, 31}, 22: {32, 186, 40, 179}, 23: {33, 180}, 24: {34}, 25: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 26: {36, 182}, 27: {195, 52, 37, 183}, 28: {184, 38}, 29: {192, 39, 175, 48, 178, 185, 28, 31}, 30: {32, 186, 40, 179}, 31: {41}, 32: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 33: {43, 188}, 34: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 35: {45}, 36: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 37: {191, 194, 51, 47}, 38: {192, 39, 175, 48, 178, 185, 28, 31}, 39: {49}, 40: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 41: {191, 194, 51, 47}, 42: {195, 52, 37, 183}, 43: {196, 53}, 44: {197, 54}, 45: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 46: {56}, 47: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 48: {4}, 49: {9, 6}, 50: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 51: {1}, 52: {9, 6}, 53: {72, 106, 59}, 54: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 55: {7}, 56: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 57: {8}, 58: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 59: {63}, 60: {64}, 61: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 62: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 63: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 64: {10}, 65: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 66: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 67: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 68: {2, 3, 5}, 69: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 70: {72, 106, 59}, 71: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 72: {161, 74}, 73: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 74: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 75: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 76: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 77: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 78: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 79: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 80: {82, 99}, 81: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 82: {200, 107, 84}, 83: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 84: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 85: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 86: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 87: {89}, 88: {90}, 89: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 90: {116, 17, 92, 144}, 91: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 92: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 93: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 94: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 95: {97, 177, 149, 121, 30}, 96: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 97: {82, 99}, 98: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 99: {101}, 100: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 101: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 102: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 103: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 104: {72, 106, 59}, 105: {200, 107, 84}, 106: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 107: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 108: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 109: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 110: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 111: {113}, 112: {114}, 113: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 114: {116, 17, 92, 144}, 115: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 116: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 117: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 118: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 119: {97, 177, 149, 121, 30}, 120: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 121: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 122: {2, 3, 5}, 123: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 124: {132, 125, 151}, 125: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 126: {127}, 127: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 128: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 129: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 130: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 131: {132, 125, 151}, 132: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 133: {153, 134}, 134: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 135: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 136: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 137: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 138: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 139: {2, 3, 5}, 140: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 141: {141}, 142: {142}, 143: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 144: {116, 17, 92, 144}, 145: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 146: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 147: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 148: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 149: {97, 177, 149, 121, 30}, 150: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 151: {132, 125, 151}, 152: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 153: {153, 134}, 154: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 155: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 156: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 157: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 158: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 159: {159}, 160: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 161: {161, 74}, 162: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 163: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 164: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 165: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 166: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 167: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 168: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 169: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 170: {170}, 171: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 172: {172}, 173: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 174: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 175: {192, 39, 175, 48, 178, 185, 28, 31}, 176: {176, 29}, 177: {97, 177, 149, 121, 30}, 178: {192, 39, 175, 48, 178, 185, 28, 31}, 179: {32, 186, 40, 179}, 180: {33, 180}, 181: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 182: {36, 182}, 183: {195, 52, 37, 183}, 184: {184, 38}, 185: {192, 39, 175, 48, 178, 185, 28, 31}, 186: {32, 186, 40, 179}, 187: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 188: {43, 188}, 189: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 190: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 191: {191, 194, 51, 47}, 192: {192, 39, 175, 48, 178, 185, 28, 31}, 193: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 194: {191, 194, 51, 47}, 195: {195, 52, 37, 183}, 196: {196, 53}, 197: {197, 54}, 198: {166, 198, 138, 44, 173, 111, 189, 55, 25, 157}, 199: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 200: {200, 107, 84}, 201: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 202: {202}, 203: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 204: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 205: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 206: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 207: {207}, 208: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 209: {129, 66, 163, 103, 136, 203, 76, 109, 145, 18, 209, 117, 86, 155, 93}, 210: {131, 133, 137, 13, 143, 16, 20, 150, 152, 156, 160, 165, 167, 169, 68, 69, 71, 73, 204, 78, 79, 81, 210, 83, 88, 91, 98, 100, 104, 110, 115, 122, 124, 126}, 211: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 212: {212}, 213: {128, 130, 135, 139, 140, 15, 146, 19, 147, 21, 148, 23, 154, 27, 158, 162, 35, 164, 168, 42, 171, 46, 174, 50, 181, 57, 58, 187, 60, 61, 62, 190, 65, 193, 67, 70, 199, 201, 75, 77, 205, 206, 80, 208, 211, 85, 213, 87, 94, 95, 96, 102, 105, 108, 112, 118, 119, 120, 123}, 214: {214}})
Equivalent! frozenset({161, 74}) {72, 161}
Equivalent! frozenset({162, 75}) {73, 162}
Equivalent! frozenset({167, 100, 79}) {98, 77, 167}
Equivalent! frozenset({200, 107, 84}) {200, 105, 82}
Equivalent! frozenset({201, 108, 85}) {201, 106, 83}
Equivalent! frozenset({115, 91, 143}) {89, 113, 143}
Equivalent! frozenset({144, 116, 92}) {144, 90, 114}
Equivalent! frozenset({147, 119, 95}) {117, 147, 93}
Equivalent! frozenset({131, 150}) {130, 150}
Equivalent! frozenset({132, 151}) {131, 151}
Equivalent! frozenset({153, 134}) {153, 133}
Equivalent! frozenset({154, 135}) {154, 134}
Equivalent! frozenset({136, 155}) {155, 135}
Equivalent! frozenset({137, 156}) {136, 156}
Equivalent! frozenset({138, 157}) {137, 157}
Equivalent! frozenset({139, 158}) {138, 158}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d2db2268>, {0: {0}, 1: {12}, 2: {13}, 3: {14}, 4: {15}, 5: {11}, 6: {16}, 7: {17}, 8: {18}, 9: {19}, 10: {20}, 11: {21}, 12: {22}, 13: {23}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {30}, 21: {31}, 22: {32}, 23: {33}, 24: {34}, 25: {35}, 26: {36}, 27: {37}, 28: {38}, 29: {39}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {46}, 37: {47}, 38: {48}, 39: {49}, 40: {50}, 41: {51}, 42: {52}, 43: {53}, 44: {54}, 45: {55}, 46: {56}, 47: {57}, 48: {4}, 49: {9}, 50: {139, 112, 80, 58, 158}, 51: {1}, 52: {6}, 53: {59}, 54: {60}, 55: {7}, 56: {61}, 57: {8}, 58: {62}, 59: {63}, 60: {64}, 61: {65}, 62: {66}, 63: {67}, 64: {10}, 65: {68}, 66: {152, 69}, 67: {70}, 68: {5}, 69: {71}, 70: {72}, 71: {73}, 72: {161}, 73: {162}, 74: {76}, 75: {77}, 76: {78}, 77: {100}, 78: {80}, 79: {81}, 80: {82}, 81: {83}, 82: {84}, 83: {85}, 84: {86}, 85: {87}, 86: {88}, 87: {89}, 88: {90}, 89: {115}, 90: {116}, 91: {93}, 92: {94}, 93: {95}, 94: {96}, 95: {97}, 96: {98}, 97: {99}, 98: {167}, 99: {101}, 100: {102}, 101: {103}, 102: {104}, 103: {105}, 104: {106}, 105: {107}, 106: {108}, 107: {109}, 108: {110}, 109: {111}, 110: {112}, 111: {113}, 112: {114}, 113: {91}, 114: {92}, 115: {117}, 116: {118}, 117: {147}, 118: {120}, 119: {121}, 120: {122}, 121: {105, 123, 70}, 122: {3}, 123: {124}, 124: {125}, 125: {126}, 126: {127}, 127: {128}, 128: {129}, 129: {130}, 130: {131}, 131: {132}, 132: {152, 133}, 133: {134}, 134: {135}, 135: {155}, 136: {137}, 137: {138}, 138: {139}, 139: {2}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {119}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152, 69, 133}, 153: {153}, 154: {154}, 155: {136}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {74}, 162: {75}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {79}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 getelementptr getelementptr
MORE 50 POT: 5
EXACT 51 getelementptr getelementptr
EXACT 52 getelementptr getelementptr
EXACT 53 add add
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 store store
EXACT 57 getelementptr getelementptr
EXACT 58 store store
EXACT 59 add add
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
EXACT 64 getelementptr getelementptr
EXACT 65 load load
MORE 66 POT: 2
EXACT 67 store store
EXACT 68 bitcast bitcast
EXACT 69 load load
EXACT 70 add add
EXACT 71 load load
EXACT 72 add add
EXACT 73 store store
EXACT 74 inttoptr inttoptr
EXACT 75 store store
EXACT 76 load load
EXACT 77 load load
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
EXACT 81 load load
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 store store
EXACT 86 load load
EXACT 87 add add
EXACT 88 add add
EXACT 89 load load
EXACT 90 add add
EXACT 91 inttoptr inttoptr
EXACT 92 store store
EXACT 93 store store
EXACT 94 store store
EXACT 95 tail tail
EXACT 96 load load
EXACT 97 add add
EXACT 98 load load
EXACT 99 add add
EXACT 100 store store
EXACT 101 inttoptr inttoptr
EXACT 102 load load
EXACT 103 store store
EXACT 104 add add
EXACT 105 add add
EXACT 106 store store
EXACT 107 inttoptr inttoptr
EXACT 108 load load
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 add add
EXACT 112 add add
EXACT 113 load load
EXACT 114 add add
EXACT 115 inttoptr inttoptr
EXACT 116 store store
EXACT 117 store store
EXACT 118 store store
EXACT 119 tail tail
EXACT 120 load load
MORE 121 POT: 3
EXACT 122 bitcast bitcast
EXACT 123 load load
EXACT 124 add add
EXACT 125 load load
EXACT 126 add add
EXACT 127 store store
EXACT 128 inttoptr inttoptr
EXACT 129 store store
EXACT 130 load load
EXACT 131 add add
MORE 132 POT: 2
EXACT 133 add add
EXACT 134 store store
EXACT 135 inttoptr inttoptr
EXACT 136 load load
EXACT 137 zext zext
EXACT 138 store store
EXACT 139 bitcast bitcast
EXACT 140 store store
EXACT 141 add add
EXACT 142 add add
EXACT 143 load load
EXACT 144 add add
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 store store
EXACT 148 store store
EXACT 149 tail tail
EXACT 150 load load
EXACT 151 add add
MORE 152 POT: 3
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 load load
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 add add
EXACT 160 load load
EXACT 161 add add
EXACT 162 store store
EXACT 163 inttoptr inttoptr
EXACT 164 store store
EXACT 165 load load
EXACT 166 zext zext
EXACT 167 load load
EXACT 168 store store
EXACT 169 load load
EXACT 170 add add
EXACT 171 store store
EXACT 172 icmp icmp
EXACT 173 zext zext
EXACT 174 store store
EXACT 175 trunc trunc
EXACT 176 and and
EXACT 177 tail tail
EXACT 178 trunc trunc
EXACT 179 and and
EXACT 180 xor xor
EXACT 181 store store
EXACT 182 xor xor
EXACT 183 xor xor
EXACT 184 lshr lshr
EXACT 185 trunc trunc
EXACT 186 and and
EXACT 187 store store
EXACT 188 icmp icmp
EXACT 189 zext zext
EXACT 190 store store
EXACT 191 lshr lshr
EXACT 192 trunc trunc
EXACT 193 store store
EXACT 194 lshr lshr
EXACT 195 xor xor
EXACT 196 add add
EXACT 197 icmp icmp
EXACT 198 zext zext
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 add add
EXACT 203 inttoptr inttoptr
EXACT 204 load load
EXACT 205 store store
EXACT 206 store store
EXACT 207 add add
EXACT 208 store store
EXACT 209 inttoptr inttoptr
EXACT 210 load load
EXACT 211 store store
EXACT 212 add add
EXACT 213 store store
EXACT 214 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 5 %ESI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 8 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 9 %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %5 = load i64, i64* %RBP, align 8
- 14 %6 = add i64 %1, 1
- 15 store i64 %6, i64* %PC, align 8
- 16 %7 = load i64, i64* %RSP, align 8
- 17 %8 = add i64 %7, -8
- 18 %9 = inttoptr i64 %8 to i64*
- 19 store i64 %5, i64* %9, align 8
- 20 %10 = load i64, i64* %PC, align 8
- 21 store i64 %8, i64* %RBP, align 8
- 22 %11 = add i64 %7, -88
- 23 store i64 %11, i64* %RSP, align 8
- 24 %12 = icmp ult i64 %8, 80
- 25 %13 = zext i1 %12 to i8
- 26 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 27 store i8 %13, i8* %14, align 1
- 28 %15 = trunc i64 %11 to i32
- 29 %16 = and i32 %15, 255
- 30 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 31 %18 = trunc i32 %17 to i8
- 32 %19 = and i8 %18, 1
- 33 %20 = xor i8 %19, 1
- 34 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 35 store i8 %20, i8* %21, align 1
- 36 %22 = xor i64 %8, 16
- 37 %23 = xor i64 %22, %11
- 38 %24 = lshr i64 %23, 4
- 39 %25 = trunc i64 %24 to i8
- 40 %26 = and i8 %25, 1
- 41 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 42 store i8 %26, i8* %27, align 1
- 43 %28 = icmp eq i64 %11, 0
- 44 %29 = zext i1 %28 to i8
- 45 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 store i8 %29, i8* %30, align 1
- 47 %31 = lshr i64 %11, 63
- 48 %32 = trunc i64 %31 to i8
- 49 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 store i8 %32, i8* %33, align 1
- 51 %34 = lshr i64 %8, 63
- 52 %35 = xor i64 %31, %34
- 53 %36 = add nuw nsw i64 %35, %34
- 54 %37 = icmp eq i64 %36, 2
- 55 %38 = zext i1 %37 to i8
- 56 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 57 store i8 %38, i8* %39, align 1
- 58 store i64 10, i64* %RSI, align 8
- 59 %40 = add i64 %7, -56
- 60 store i64 %40, i64* %RAX, align 8
- 61 store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 16), i64* %RCX, align 8
- 62 store i64 40, i64* %RDX, align 8
- 63 %41 = add i64 %7, -12
- 64 %42 = add i64 %10, 38
- 65 store i64 %42, i64* %PC, align 8
- 66 %43 = inttoptr i64 %41 to i32*
- 67 store i32 0, i32* %43, align 4
- 68 %44 = load i64, i64* %RAX, align 8
- 69 %45 = load i64, i64* %PC, align 8
- 70 store i64 %44, i64* %RDI, align 8
- 71 %46 = load i64, i64* %RBP, align 8
- 72 %47 = add i64 %46, -56
- 73 %48 = load i32, i32* %ESI, align 4
- 74 %49 = add i64 %45, 6
- 75 store i64 %49, i64* %PC, align 8
- 76 %50 = inttoptr i64 %47 to i32*
- 77 store i32 %48, i32* %50, align 4
- 78 %51 = load i64, i64* %RCX, align 8
- 79 %52 = load i64, i64* %PC, align 8
- 80 store i64 %51, i64* %RSI, align 8
- 81 %53 = load i64, i64* %RBP, align 8
- 82 %54 = add i64 %53, -64
- 83 %55 = load i64, i64* %RAX, align 8
- 84 %56 = add i64 %52, 7
- 85 store i64 %56, i64* %PC, align 8
- 86 %57 = inttoptr i64 %54 to i64*
- 87 store i64 %55, i64* %57, align 8
- 88 %58 = load i64, i64* %PC, align 8
- 89 %59 = add i64 %58, -388
- 90 %60 = add i64 %58, 5
- 91 %61 = load i64, i64* %RSP, align 8
- 92 %62 = add i64 %61, -8
- 93 %63 = inttoptr i64 %62 to i64*
- 94 store i64 %60, i64* %63, align 8
- 95 store i64 %62, i64* %RSP, align 8
- 96 store i64 %59, i64* %PC, align 8
- 97 %64 = tail call fastcc %struct.Memory* @ext_601068_memcpy(%struct.State* nonnull %0, %struct.Memory* %2)
- 98 %65 = load i64, i64* %RBP, align 8
- 99 %66 = add i64 %65, -64
- 100 %67 = load i64, i64* %PC, align 8
- 101 %68 = add i64 %67, 4
- 102 store i64 %68, i64* %PC, align 8
- 103 %69 = inttoptr i64 %66 to i64*
- 104 %70 = load i64, i64* %69, align 8
- 105 store i64 %70, i64* %RDI, align 8
- 106 %71 = add i64 %65, -56
- 107 %72 = add i64 %67, 7
- 108 store i64 %72, i64* %PC, align 8
- 109 %73 = inttoptr i64 %71 to i32*
- 110 %74 = load i32, i32* %73, align 4
- 111 %75 = zext i32 %74 to i64
- 112 store i64 %75, i64* %RSI, align 8
- 113 %76 = add i64 %67, -137
- 114 %77 = add i64 %67, 12
- 115 %78 = load i64, i64* %RSP, align 8
- 116 %79 = add i64 %78, -8
- 117 %80 = inttoptr i64 %79 to i64*
- 118 store i64 %77, i64* %80, align 8
- 119 store i64 %79, i64* %RSP, align 8
- 120 store i64 %76, i64* %PC, align 8
- 121 %81 = tail call %struct.Memory* @sub_400580_foo_renamed_(%struct.State* nonnull %0, i64 %76, %struct.Memory* %64)
- 122 %82 = load i64, i64* %PC, align 8
- 123 store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 56), i64* %RDI, align 8
- 124 %83 = load i64, i64* %RBP, align 8
- 125 %84 = add i64 %83, -52
- 126 %85 = load i32, i32* %EAX, align 4
- 127 %86 = add i64 %82, 13
- 128 store i64 %86, i64* %PC, align 8
- 129 %87 = inttoptr i64 %84 to i32*
- 130 store i32 %85, i32* %87, align 4
- 131 %88 = load i64, i64* %RBP, align 8
- 132 %89 = add i64 %88, -52
- 133 %90 = load i64, i64* %PC, align 8
- 134 %91 = add i64 %90, 3
- 135 store i64 %91, i64* %PC, align 8
- 136 %92 = inttoptr i64 %89 to i32*
- 137 %93 = load i32, i32* %92, align 4
- 138 %94 = zext i32 %93 to i64
- 139 store i64 %94, i64* %RSI, align 8
- 140 store i8 0, i8* %AL, align 1
- 141 %95 = add i64 %90, -434
- 142 %96 = add i64 %90, 10
- 143 %97 = load i64, i64* %RSP, align 8
- 144 %98 = add i64 %97, -8
- 145 %99 = inttoptr i64 %98 to i64*
- 146 store i64 %96, i64* %99, align 8
- 147 store i64 %98, i64* %RSP, align 8
- 148 store i64 %95, i64* %PC, align 8
- 149 %100 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %81)
- 150 %101 = load i64, i64* %RBP, align 8
- 151 %102 = add i64 %101, -52
- 152 %103 = load i64, i64* %PC, align 8
- 153 %104 = add i64 %103, 3
- 154 store i64 %104, i64* %PC, align 8
- 155 %105 = inttoptr i64 %102 to i32*
- 156 %106 = load i32, i32* %105, align 4
- 157 %107 = zext i32 %106 to i64
- 158 store i64 %107, i64* %RSI, align 8
- 159 %108 = add i64 %101, -68
- 160 %109 = load i32, i32* %EAX, align 4
- 161 %110 = add i64 %103, 6
- 162 store i64 %110, i64* %PC, align 8
- 163 %111 = inttoptr i64 %108 to i32*
- 164 store i32 %109, i32* %111, align 4
- 165 %112 = load i32, i32* %ESI, align 4
- 166 %113 = zext i32 %112 to i64
- 167 %114 = load i64, i64* %PC, align 8
- 168 store i64 %113, i64* %RAX, align 8
- 169 %115 = load i64, i64* %RSP, align 8
- 170 %116 = add i64 %115, 80
- 171 store i64 %116, i64* %RSP, align 8
- 172 %117 = icmp ugt i64 %115, -81
- 173 %118 = zext i1 %117 to i8
- 174 store i8 %118, i8* %14, align 1
- 175 %119 = trunc i64 %116 to i32
- 176 %120 = and i32 %119, 255
- 177 %121 = tail call i32 @llvm.ctpop.i32(i32 %120) #12
- 178 %122 = trunc i32 %121 to i8
- 179 %123 = and i8 %122, 1
- 180 %124 = xor i8 %123, 1
- 181 store i8 %124, i8* %21, align 1
- 182 %125 = xor i64 %115, 16
- 183 %126 = xor i64 %125, %116
- 184 %127 = lshr i64 %126, 4
- 185 %128 = trunc i64 %127 to i8
- 186 %129 = and i8 %128, 1
- 187 store i8 %129, i8* %27, align 1
- 188 %130 = icmp eq i64 %116, 0
- 189 %131 = zext i1 %130 to i8
- 190 store i8 %131, i8* %30, align 1
- 191 %132 = lshr i64 %116, 63
- 192 %133 = trunc i64 %132 to i8
- 193 store i8 %133, i8* %33, align 1
- 194 %134 = lshr i64 %115, 63
- 195 %135 = xor i64 %132, %134
- 196 %136 = add nuw nsw i64 %135, %132
- 197 %137 = icmp eq i64 %136, 2
- 198 %138 = zext i1 %137 to i8
- 199 store i8 %138, i8* %39, align 1
- 200 %139 = add i64 %114, 7
- 201 store i64 %139, i64* %PC, align 8
- 202 %140 = add i64 %115, 88
- 203 %141 = inttoptr i64 %116 to i64*
- 204 %142 = load i64, i64* %141, align 8
- 205 store i64 %142, i64* %RBP, align 8
- 206 store i64 %140, i64* %RSP, align 8
- 207 %143 = add i64 %114, 8
- 208 store i64 %143, i64* %PC, align 8
- 209 %144 = inttoptr i64 %140 to i64*
- 210 %145 = load i64, i64* %144, align 8
- 211 store i64 %145, i64* %PC, align 8
- 212 %146 = add i64 %115, 96
- 213 store i64 %146, i64* %RSP, align 8
- 214 ret %struct.Memory* %100
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d2db2400>, {0: {0}, 1: {51}, 2: {122, 139, 68}, 3: {122, 139, 68}, 4: {48}, 5: {122, 139, 68}, 6: {49, 52}, 7: {55}, 8: {57}, 9: {49, 52}, 10: {64}, 11: {5}, 12: {1}, 13: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 14: {3}, 15: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 16: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 17: {144, 90, 114, 7}, 18: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 19: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 20: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 21: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 22: {12}, 23: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 24: {14}, 25: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 26: {16}, 27: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 28: {192, 38, 175, 18, 178, 21, 185, 29}, 29: {176, 19}, 30: {177, 20, 149, 119, 95}, 31: {192, 38, 175, 18, 178, 21, 185, 29}, 32: {186, 179, 22, 30}, 33: {180, 23}, 34: {24}, 35: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 36: {26, 182}, 37: {42, 27, 195, 183}, 38: {184, 28}, 39: {192, 38, 175, 18, 178, 21, 185, 29}, 40: {186, 179, 22, 30}, 41: {31}, 42: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 43: {33, 188}, 44: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 45: {35}, 46: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 47: {41, 194, 37, 191}, 48: {192, 38, 175, 18, 178, 21, 185, 29}, 49: {39}, 50: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 51: {41, 194, 37, 191}, 52: {42, 27, 195, 183}, 53: {43, 196}, 54: {44, 197}, 55: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 56: {46}, 57: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 58: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 59: {104, 53, 70}, 60: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 61: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 62: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 63: {59}, 64: {60}, 65: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 66: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 67: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 68: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 69: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 70: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 71: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 72: {104, 53, 70}, 73: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 74: {72, 161}, 75: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 76: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 77: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 78: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 79: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 80: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 81: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 82: {80, 97}, 83: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 84: {200, 105, 82}, 85: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 86: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 87: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 88: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 89: {87}, 90: {88}, 91: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 92: {144, 90, 114, 7}, 93: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 94: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 95: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 96: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 97: {177, 20, 149, 119, 95}, 98: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 99: {80, 97}, 100: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 101: {99}, 102: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 103: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 104: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 105: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 106: {104, 53, 70}, 107: {200, 105, 82}, 108: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 109: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 110: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 111: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 112: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 113: {111}, 114: {112}, 115: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 116: {144, 90, 114, 7}, 117: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 118: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 119: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 120: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 121: {177, 20, 149, 119, 95}, 122: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 123: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 124: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 125: {131, 124, 151}, 126: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 127: {126}, 128: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 129: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 130: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 131: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 132: {131, 124, 151}, 133: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 134: {153, 133}, 135: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 136: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 137: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 138: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 139: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 140: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 141: {141}, 142: {142}, 143: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 144: {144, 90, 114, 7}, 145: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 146: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 147: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 148: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 149: {177, 20, 149, 119, 95}, 150: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 151: {131, 124, 151}, 152: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 153: {153, 133}, 154: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 155: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 156: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 157: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 158: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 159: {159}, 160: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 161: {72, 161}, 162: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 163: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 164: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 165: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 166: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 167: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 168: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 169: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 170: {170}, 171: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 172: {172}, 173: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 174: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 175: {192, 38, 175, 18, 178, 21, 185, 29}, 176: {176, 19}, 177: {177, 20, 149, 119, 95}, 178: {192, 38, 175, 18, 178, 21, 185, 29}, 179: {186, 179, 22, 30}, 180: {180, 23}, 181: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 182: {26, 182}, 183: {42, 27, 195, 183}, 184: {184, 28}, 185: {192, 38, 175, 18, 178, 21, 185, 29}, 186: {186, 179, 22, 30}, 187: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 188: {33, 188}, 189: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 190: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 191: {41, 194, 37, 191}, 192: {192, 38, 175, 18, 178, 21, 185, 29}, 193: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 194: {41, 194, 37, 191}, 195: {42, 27, 195, 183}, 196: {43, 196}, 197: {44, 197}, 198: {34, 166, 198, 137, 109, 45, 15, 173, 189, 157}, 199: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 200: {200, 105, 82}, 201: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 202: {202}, 203: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 204: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 205: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 206: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 207: {207}, 208: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 209: {128, 163, 101, 135, 8, 74, 107, 155, 203, 145, 209, 115, 84, 91, 62}, 210: {2, 130, 132, 6, 136, 10, 143, 150, 152, 156, 160, 165, 167, 169, 65, 66, 69, 71, 76, 77, 204, 79, 81, 210, 86, 89, 96, 98, 102, 108, 113, 120, 123, 125}, 211: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 212: {212}, 213: {129, 4, 134, 9, 138, 11, 140, 13, 17, 146, 147, 148, 25, 154, 158, 32, 162, 36, 164, 40, 168, 171, 174, 47, 50, 181, 54, 56, 58, 187, 61, 190, 63, 193, 67, 199, 73, 201, 75, 205, 78, 206, 208, 83, 211, 85, 213, 92, 93, 94, 100, 103, 106, 110, 116, 117, 118, 121, 127}, 214: {214}})
Equivalent! frozenset({72, 161}) {161, 74}
Equivalent! frozenset({73, 162}) {162, 75}
Equivalent! frozenset({98, 77, 167}) {167, 100, 79}
Equivalent! frozenset({200, 105, 82}) {200, 107, 84}
Equivalent! frozenset({201, 106, 83}) {201, 108, 85}
Equivalent! frozenset({89, 113, 143}) {115, 91, 143}
Equivalent! frozenset({144, 90, 114}) {116, 92, 144}
Equivalent! frozenset({147, 93, 117}) {147, 119, 95}
Equivalent! frozenset({130, 150}) {131, 150}
Equivalent! frozenset({131, 151}) {132, 151}
Equivalent! frozenset({153, 133}) {153, 134}
Equivalent! frozenset({154, 134}) {154, 135}
Equivalent! frozenset({155, 135}) {136, 155}
Equivalent! frozenset({136, 156}) {137, 156}
Equivalent! frozenset({137, 157}) {138, 157}
Equivalent! frozenset({138, 158}) {139, 158}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d2db2400>, {0: {0}, 1: {51}, 2: {139}, 3: {122}, 4: {48}, 5: {68}, 6: {52}, 7: {55}, 8: {57}, 9: {49}, 10: {64}, 11: {5}, 12: {1}, 13: {2}, 14: {3}, 15: {4}, 16: {6}, 17: {7}, 18: {8}, 19: {9}, 20: {10}, 21: {11}, 22: {12}, 23: {13}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {20}, 31: {21}, 32: {22}, 33: {23}, 34: {24}, 35: {25}, 36: {26}, 37: {27}, 38: {28}, 39: {29}, 40: {30}, 41: {31}, 42: {32}, 43: {33}, 44: {34}, 45: {35}, 46: {36}, 47: {37}, 48: {38}, 49: {39}, 50: {40}, 51: {41}, 52: {42}, 53: {43}, 54: {44}, 55: {45}, 56: {46}, 57: {47}, 58: {138, 110, 78, 50, 158}, 59: {53}, 60: {54}, 61: {56}, 62: {58}, 63: {59}, 64: {60}, 65: {61}, 66: {62}, 67: {63}, 68: {65}, 69: {152, 66}, 70: {67}, 71: {69}, 72: {70}, 73: {71}, 74: {161}, 75: {162}, 76: {74}, 77: {75}, 78: {76}, 79: {167}, 80: {78}, 81: {79}, 82: {80}, 83: {81}, 84: {82}, 85: {83}, 86: {84}, 87: {85}, 88: {86}, 89: {87}, 90: {88}, 91: {113}, 92: {90}, 93: {91}, 94: {92}, 95: {117}, 96: {94}, 97: {95}, 98: {96}, 99: {97}, 100: {77}, 101: {99}, 102: {100}, 103: {101}, 104: {102}, 105: {103}, 106: {104}, 107: {105}, 108: {106}, 109: {107}, 110: {108}, 111: {109}, 112: {110}, 113: {111}, 114: {112}, 115: {89}, 116: {144}, 117: {115}, 118: {116}, 119: {93}, 120: {118}, 121: {119}, 122: {120}, 123: {121, 67, 103}, 124: {123}, 125: {124}, 126: {125}, 127: {126}, 128: {127}, 129: {128}, 130: {129}, 131: {130}, 132: {131}, 133: {152, 132}, 134: {133}, 135: {134}, 136: {155}, 137: {136}, 138: {137}, 139: {138}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {114}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152, 66, 132}, 153: {153}, 154: {154}, 155: {135}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {72}, 162: {73}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {98}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 load load
EXACT 14 add add
EXACT 15 store store
EXACT 16 load load
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 store store
EXACT 22 add add
EXACT 23 store store
EXACT 24 icmp icmp
EXACT 25 zext zext
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 tail tail
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 xor xor
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 xor xor
EXACT 37 xor xor
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 trunc trunc
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 lshr lshr
EXACT 52 xor xor
EXACT 53 add add
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
MORE 58 POT: 5
EXACT 59 add add
EXACT 60 store store
EXACT 61 store store
EXACT 62 store store
EXACT 63 add add
EXACT 64 add add
EXACT 65 store store
EXACT 66 inttoptr inttoptr
EXACT 67 store store
EXACT 68 load load
MORE 69 POT: 2
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
EXACT 76 inttoptr inttoptr
EXACT 77 store store
EXACT 78 load load
EXACT 79 load load
EXACT 80 store store
EXACT 81 load load
EXACT 82 add add
EXACT 83 load load
EXACT 84 add add
EXACT 85 store store
EXACT 86 inttoptr inttoptr
EXACT 87 store store
EXACT 88 load load
EXACT 89 add add
EXACT 90 add add
EXACT 91 load load
EXACT 92 add add
EXACT 93 inttoptr inttoptr
EXACT 94 store store
EXACT 95 store store
EXACT 96 store store
EXACT 97 tail tail
EXACT 98 load load
EXACT 99 add add
EXACT 100 load load
EXACT 101 add add
EXACT 102 store store
EXACT 103 inttoptr inttoptr
EXACT 104 load load
EXACT 105 store store
EXACT 106 add add
EXACT 107 add add
EXACT 108 store store
EXACT 109 inttoptr inttoptr
EXACT 110 load load
EXACT 111 zext zext
EXACT 112 store store
EXACT 113 add add
EXACT 114 add add
EXACT 115 load load
EXACT 116 add add
EXACT 117 inttoptr inttoptr
EXACT 118 store store
EXACT 119 store store
EXACT 120 store store
EXACT 121 tail tail
EXACT 122 load load
MORE 123 POT: 3
EXACT 124 load load
EXACT 125 add add
EXACT 126 load load
EXACT 127 add add
EXACT 128 store store
EXACT 129 inttoptr inttoptr
EXACT 130 store store
EXACT 131 load load
EXACT 132 add add
MORE 133 POT: 2
EXACT 134 add add
EXACT 135 store store
EXACT 136 inttoptr inttoptr
EXACT 137 load load
EXACT 138 zext zext
EXACT 139 store store
EXACT 140 store store
EXACT 141 add add
EXACT 142 add add
EXACT 143 load load
EXACT 144 add add
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 store store
EXACT 148 store store
EXACT 149 tail tail
EXACT 150 load load
EXACT 151 add add
MORE 152 POT: 3
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 load load
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 add add
EXACT 160 load load
EXACT 161 add add
EXACT 162 store store
EXACT 163 inttoptr inttoptr
EXACT 164 store store
EXACT 165 load load
EXACT 166 zext zext
EXACT 167 load load
EXACT 168 store store
EXACT 169 load load
EXACT 170 add add
EXACT 171 store store
EXACT 172 icmp icmp
EXACT 173 zext zext
EXACT 174 store store
EXACT 175 trunc trunc
EXACT 176 and and
EXACT 177 tail tail
EXACT 178 trunc trunc
EXACT 179 and and
EXACT 180 xor xor
EXACT 181 store store
EXACT 182 xor xor
EXACT 183 xor xor
EXACT 184 lshr lshr
EXACT 185 trunc trunc
EXACT 186 and and
EXACT 187 store store
EXACT 188 icmp icmp
EXACT 189 zext zext
EXACT 190 store store
EXACT 191 lshr lshr
EXACT 192 trunc trunc
EXACT 193 store store
EXACT 194 lshr lshr
EXACT 195 xor xor
EXACT 196 add add
EXACT 197 icmp icmp
EXACT 198 zext zext
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 add add
EXACT 203 inttoptr inttoptr
EXACT 204 load load
EXACT 205 store store
EXACT 206 store store
EXACT 207 add add
EXACT 208 store store
EXACT 209 inttoptr inttoptr
EXACT 210 load load
EXACT 211 store store
EXACT 212 add add
EXACT 213 store store
EXACT 214 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -88', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 80', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i49 = getelementptr inbounds %union.anon, %union.anon* %41, i64 0, i32 0', '%42 = add i64 %7, -56', 'store i64 %42, i64* %RAX.i49, align 8', '%RCX.i47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 ptrtoint (%G__0x4006d0_type* @G__0x4006d0 to i64), i64* %RCX.i47, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', 'store i64 40, i64* %RDX.i, align 8', '%43 = add i64 %7, -12', '%44 = add i64 %10, 38', 'store i64 %44, i64* %3, align 8', '%45 = inttoptr i64 %43 to i32*', 'store i32 0, i32* %45, align 4', '%46 = load i64, i64* %RAX.i49, align 8', 'store i64 %46, i64* %RDI.i42, align 8', '%ESI.i38 = bitcast %union.anon* %40 to i32*', '%48 = load i64, i64* %RBP.i, align 8', '%49 = add i64 %48, -56', '%50 = load i32, i32* %ESI.i38, align 4', '%51 = add i64 %47, 6', 'store i64 %51, i64* %3, align 8', '%52 = inttoptr i64 %49 to i32*', 'store i32 %50, i32* %52, align 4', '%53 = load i64, i64* %RCX.i47, align 8', '%54 = load i64, i64* %3, align 8', 'store i64 %53, i64* %RSI.i52, align 8', '%55 = load i64, i64* %RBP.i, align 8', '%56 = add i64 %55, -64', '%57 = load i64, i64* %RAX.i49, align 8', '%58 = add i64 %54, 7', 'store i64 %58, i64* %3, align 8', '%59 = inttoptr i64 %56 to i64*', 'store i64 %57, i64* %59, align 8', '%60 = load i64, i64* %3, align 8', '%61 = add i64 %60, -388', '%62 = add i64 %60, 5', '%63 = load i64, i64* %6, align 8', '%64 = add i64 %63, -8', '%65 = inttoptr i64 %64 to i64*', 'store i64 %62, i64* %65, align 8', 'store i64 %64, i64* %6, align 8', 'store i64 %61, i64* %3, align 8', '%66 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)', '%67 = load i64, i64* %RBP.i, align 8', '%68 = add i64 %67, -64', '%69 = load i64, i64* %3, align 8', '%70 = add i64 %69, 4', 'store i64 %70, i64* %3, align 8', '%71 = inttoptr i64 %68 to i64*', '%72 = load i64, i64* %71, align 8', 'store i64 %72, i64* %RDI.i42, align 8', '%73 = add i64 %67, -56', '%74 = add i64 %69, 7', 'store i64 %74, i64* %3, align 8', '%75 = inttoptr i64 %73 to i32*', '%76 = load i32, i32* %75, align 4', '%77 = zext i32 %76 to i64', 'store i64 %77, i64* %RSI.i52, align 8', '%78 = add i64 %69, -137', '%79 = add i64 %69, 12', '%80 = load i64, i64* %6, align 8', '%81 = add i64 %80, -8', '%82 = inttoptr i64 %81 to i64*', 'store i64 %79, i64* %82, align 8', 'store i64 %81, i64* %6, align 8', 'store i64 %78, i64* %3, align 8', '%call2_400610 = tail call %struct.Memory* @sub_400580.foo(%struct.State* %0, i64 %78, %struct.Memory* %66)', '%83 = load i64, i64* %3, align 8', '%EAX.i19 = bitcast %union.anon* %41 to i32*', '%84 = load i64, i64* %RBP.i, align 8', '%85 = add i64 %84, -52', '%86 = load i32, i32* %EAX.i19, align 4', '%87 = add i64 %83, 13', 'store i64 %87, i64* %3, align 8', '%88 = inttoptr i64 %85 to i32*', 'store i32 %86, i32* %88, align 4', '%89 = load i64, i64* %RBP.i, align 8', '%90 = add i64 %89, -52', '%92 = add i64 %91, 3', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %90 to i32*', '%94 = load i32, i32* %93, align 4', '%95 = zext i32 %94 to i64', 'store i64 %95, i64* %RSI.i52, align 8', '%AL.i = bitcast %union.anon* %41 to i8*', 'store i8 0, i8* %AL.i, align 1', '%96 = add i64 %91, -434', '%97 = add i64 %91, 10', '%98 = load i64, i64* %6, align 8', '%99 = add i64 %98, -8', '%100 = inttoptr i64 %99 to i64*', 'store i64 %97, i64* %100, align 8', 'store i64 %99, i64* %6, align 8', 'store i64 %96, i64* %3, align 8', '%101 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400610)', '%102 = load i64, i64* %RBP.i, align 8', '%103 = add i64 %102, -52', '%105 = add i64 %104, 3', 'store i64 %105, i64* %3, align 8', '%106 = inttoptr i64 %103 to i32*', '%107 = load i32, i32* %106, align 4', '%108 = zext i32 %107 to i64', 'store i64 %108, i64* %RSI.i52, align 8', '%109 = add i64 %102, -68', '%110 = load i32, i32* %EAX.i19, align 4', '%111 = add i64 %104, 6', 'store i64 %111, i64* %3, align 8', '%112 = inttoptr i64 %109 to i32*', 'store i32 %110, i32* %112, align 4', '%113 = load i32, i32* %ESI.i38, align 4', '%114 = zext i32 %113 to i64', '%115 = load i64, i64* %3, align 8', 'store i64 %114, i64* %RAX.i49, align 8', '%116 = load i64, i64* %6, align 8', '%117 = add i64 %116, 80', 'store i64 %117, i64* %6, align 8', '%118 = icmp ugt i64 %116, -81', '%119 = zext i1 %118 to i8', 'store i8 %119, i8* %14, align 1', '%120 = trunc i64 %117 to i32', '%121 = and i32 %120, 255', '%122 = tail call i32 @llvm.ctpop.i32(i32 %121)', '%123 = trunc i32 %122 to i8', '%124 = and i8 %123, 1', '%125 = xor i8 %124, 1', 'store i8 %125, i8* %21, align 1', '%126 = xor i64 %116, 16', '%127 = xor i64 %126, %117', '%128 = lshr i64 %127, 4', '%129 = trunc i64 %128 to i8', '%130 = and i8 %129, 1', 'store i8 %130, i8* %27, align 1', '%131 = icmp eq i64 %117, 0', '%132 = zext i1 %131 to i8', 'store i8 %132, i8* %30, align 1', '%133 = lshr i64 %117, 63', '%134 = trunc i64 %133 to i8', 'store i8 %134, i8* %33, align 1', '%135 = lshr i64 %116, 63', '%136 = xor i64 %133, %135', '%137 = add nuw nsw i64 %136, %133', '%138 = icmp eq i64 %137, 2', '%139 = zext i1 %138 to i8', 'store i8 %139, i8* %39, align 1', '%140 = add i64 %115, 7', 'store i64 %140, i64* %3, align 8', '%141 = add i64 %116, 88', '%142 = inttoptr i64 %117 to i64*', '%143 = load i64, i64* %142, align 8', 'store i64 %143, i64* %RBP.i, align 8', 'store i64 %141, i64* %6, align 8', '%144 = add i64 %115, 8', 'store i64 %144, i64* %3, align 8', '%145 = inttoptr i64 %141 to i64*', '%146 = load i64, i64* %145, align 8', 'store i64 %146, i64* %3, align 8', '%147 = add i64 %116, 96', 'store i64 %147, i64* %6, align 8', 'ret %struct.Memory* %101'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -88
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 80
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Keep: %RSI.i52 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
Keep: store i64 10, i64* %RSI.i52, align 8
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i49 = getelementptr inbounds %union.anon, %union.anon* %41, i64 0, i32 0
Found line to remove! %42 = add i64 %7, -56
Found line to remove! store i64 %42, i64* %RAX.i49, align 8
Found line to remove! %RCX.i47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x4006d0_type* @G__0x4006d0 to i64), i64* %RCX.i47, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! store i64 40, i64* %RDX.i, align 8
Found line to remove! %43 = add i64 %7, -12
Found line to remove! %44 = add i64 %10, 38
Found line to remove! store i64 %44, i64* %3, align 8
Found line to remove! %45 = inttoptr i64 %43 to i32*
Found line to remove! store i32 0, i32* %45, align 4
Keep: %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %46 = load i64, i64* %RAX.i49, align 8
Keep: %47 = load i64, i64* %3, align 8
Found line to remove! store i64 %46, i64* %RDI.i42, align 8
Found line to remove! %ESI.i38 = bitcast %union.anon* %40 to i32*
Found line to remove! %48 = load i64, i64* %RBP.i, align 8
Found line to remove! %49 = add i64 %48, -56
Found line to remove! %50 = load i32, i32* %ESI.i38, align 4
Found line to remove! %51 = add i64 %47, 6
Found line to remove! store i64 %51, i64* %3, align 8
Found line to remove! %52 = inttoptr i64 %49 to i32*
Found line to remove! store i32 %50, i32* %52, align 4
Found line to remove! %53 = load i64, i64* %RCX.i47, align 8
Found line to remove! %54 = load i64, i64* %3, align 8
Found line to remove! store i64 %53, i64* %RSI.i52, align 8
Found line to remove! %55 = load i64, i64* %RBP.i, align 8
Found line to remove! %56 = add i64 %55, -64
Found line to remove! %57 = load i64, i64* %RAX.i49, align 8
Found line to remove! %58 = add i64 %54, 7
Found line to remove! store i64 %58, i64* %3, align 8
Found line to remove! %59 = inttoptr i64 %56 to i64*
Found line to remove! store i64 %57, i64* %59, align 8
Found line to remove! %60 = load i64, i64* %3, align 8
Found line to remove! %61 = add i64 %60, -388
Found line to remove! %62 = add i64 %60, 5
Found line to remove! %63 = load i64, i64* %6, align 8
Found line to remove! %64 = add i64 %63, -8
Found line to remove! %65 = inttoptr i64 %64 to i64*
Found line to remove! store i64 %62, i64* %65, align 8
Found line to remove! store i64 %64, i64* %6, align 8
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %66 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
Found line to remove! %67 = load i64, i64* %RBP.i, align 8
Found line to remove! %68 = add i64 %67, -64
Found line to remove! %69 = load i64, i64* %3, align 8
Found line to remove! %70 = add i64 %69, 4
Found line to remove! store i64 %70, i64* %3, align 8
Found line to remove! %71 = inttoptr i64 %68 to i64*
Found line to remove! %72 = load i64, i64* %71, align 8
Found line to remove! store i64 %72, i64* %RDI.i42, align 8
Found line to remove! %73 = add i64 %67, -56
Found line to remove! %74 = add i64 %69, 7
Found line to remove! store i64 %74, i64* %3, align 8
Found line to remove! %75 = inttoptr i64 %73 to i32*
Found line to remove! %76 = load i32, i32* %75, align 4
Found line to remove! %77 = zext i32 %76 to i64
Found line to remove! store i64 %77, i64* %RSI.i52, align 8
Found line to remove! %78 = add i64 %69, -137
Found line to remove! %79 = add i64 %69, 12
Found line to remove! %80 = load i64, i64* %6, align 8
Found line to remove! %81 = add i64 %80, -8
Found line to remove! %82 = inttoptr i64 %81 to i64*
Found line to remove! store i64 %79, i64* %82, align 8
Found line to remove! store i64 %81, i64* %6, align 8
Found line to remove! store i64 %78, i64* %3, align 8
Found line to remove! %call2_400610 = tail call %struct.Memory* @sub_400580.foo(%struct.State* %0, i64 %78, %struct.Memory* %66)
Found line to remove! %83 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x4006f8_type* @G__0x4006f8 to i64), i64* %RDI.i42, align 8
Found line to remove! %EAX.i19 = bitcast %union.anon* %41 to i32*
Found line to remove! %84 = load i64, i64* %RBP.i, align 8
Found line to remove! %85 = add i64 %84, -52
Found line to remove! %86 = load i32, i32* %EAX.i19, align 4
Found line to remove! %87 = add i64 %83, 13
Found line to remove! store i64 %87, i64* %3, align 8
Found line to remove! %88 = inttoptr i64 %85 to i32*
Found line to remove! store i32 %86, i32* %88, align 4
Found line to remove! %89 = load i64, i64* %RBP.i, align 8
Found line to remove! %90 = add i64 %89, -52
Keep: %91 = load i64, i64* %3, align 8
Found line to remove! %92 = add i64 %91, 3
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = inttoptr i64 %90 to i32*
Found line to remove! %94 = load i32, i32* %93, align 4
Found line to remove! %95 = zext i32 %94 to i64
Found line to remove! store i64 %95, i64* %RSI.i52, align 8
Found line to remove! %AL.i = bitcast %union.anon* %41 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %96 = add i64 %91, -434
Found line to remove! %97 = add i64 %91, 10
Found line to remove! %98 = load i64, i64* %6, align 8
Found line to remove! %99 = add i64 %98, -8
Found line to remove! %100 = inttoptr i64 %99 to i64*
Found line to remove! store i64 %97, i64* %100, align 8
Found line to remove! store i64 %99, i64* %6, align 8
Found line to remove! store i64 %96, i64* %3, align 8
Found line to remove! %101 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400610)
Found line to remove! %102 = load i64, i64* %RBP.i, align 8
Found line to remove! %103 = add i64 %102, -52
Keep: %104 = load i64, i64* %3, align 8
Found line to remove! %105 = add i64 %104, 3
Found line to remove! store i64 %105, i64* %3, align 8
Found line to remove! %106 = inttoptr i64 %103 to i32*
Found line to remove! %107 = load i32, i32* %106, align 4
Found line to remove! %108 = zext i32 %107 to i64
Found line to remove! store i64 %108, i64* %RSI.i52, align 8
Found line to remove! %109 = add i64 %102, -68
Found line to remove! %110 = load i32, i32* %EAX.i19, align 4
Found line to remove! %111 = add i64 %104, 6
Found line to remove! store i64 %111, i64* %3, align 8
Found line to remove! %112 = inttoptr i64 %109 to i32*
Found line to remove! store i32 %110, i32* %112, align 4
Found line to remove! %113 = load i32, i32* %ESI.i38, align 4
Found line to remove! %114 = zext i32 %113 to i64
Found line to remove! %115 = load i64, i64* %3, align 8
Found line to remove! store i64 %114, i64* %RAX.i49, align 8
Found line to remove! %116 = load i64, i64* %6, align 8
Found line to remove! %117 = add i64 %116, 80
Found line to remove! store i64 %117, i64* %6, align 8
Found line to remove! %118 = icmp ugt i64 %116, -81
Found line to remove! %119 = zext i1 %118 to i8
Found line to remove! store i8 %119, i8* %14, align 1
Found line to remove! %120 = trunc i64 %117 to i32
Found line to remove! %121 = and i32 %120, 255
Found line to remove! %122 = tail call i32 @llvm.ctpop.i32(i32 %121)
Found line to remove! %123 = trunc i32 %122 to i8
Found line to remove! %124 = and i8 %123, 1
Found line to remove! %125 = xor i8 %124, 1
Found line to remove! store i8 %125, i8* %21, align 1
Found line to remove! %126 = xor i64 %116, 16
Found line to remove! %127 = xor i64 %126, %117
Found line to remove! %128 = lshr i64 %127, 4
Found line to remove! %129 = trunc i64 %128 to i8
Found line to remove! %130 = and i8 %129, 1
Found line to remove! store i8 %130, i8* %27, align 1
Found line to remove! %131 = icmp eq i64 %117, 0
Found line to remove! %132 = zext i1 %131 to i8
Found line to remove! store i8 %132, i8* %30, align 1
Found line to remove! %133 = lshr i64 %117, 63
Found line to remove! %134 = trunc i64 %133 to i8
Found line to remove! store i8 %134, i8* %33, align 1
Found line to remove! %135 = lshr i64 %116, 63
Found line to remove! %136 = xor i64 %133, %135
Found line to remove! %137 = add nuw nsw i64 %136, %133
Found line to remove! %138 = icmp eq i64 %137, 2
Found line to remove! %139 = zext i1 %138 to i8
Found line to remove! store i8 %139, i8* %39, align 1
Found line to remove! %140 = add i64 %115, 7
Found line to remove! store i64 %140, i64* %3, align 8
Found line to remove! %141 = add i64 %116, 88
Found line to remove! %142 = inttoptr i64 %117 to i64*
Found line to remove! %143 = load i64, i64* %142, align 8
Found line to remove! store i64 %143, i64* %RBP.i, align 8
Found line to remove! store i64 %141, i64* %6, align 8
Found line to remove! %144 = add i64 %115, 8
Found line to remove! store i64 %144, i64* %3, align 8
Found line to remove! %145 = inttoptr i64 %141 to i64*
Found line to remove! %146 = load i64, i64* %145, align 8
Found line to remove! store i64 %146, i64* %3, align 8
Found line to remove! %147 = add i64 %116, 96
Found line to remove! store i64 %147, i64* %6, align 8
Found line to remove! ret %struct.Memory* %101
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ESI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -88', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 80', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -56', 'store i64 %40, i64* %RAX, align 8', 'store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 16), i64* %RCX, align 8', 'store i64 40, i64* %RDX, align 8', '%41 = add i64 %7, -12', '%42 = add i64 %10, 38', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = load i64, i64* %RAX, align 8', 'store i64 %44, i64* %RDI, align 8', '%46 = load i64, i64* %RBP, align 8', '%47 = add i64 %46, -56', '%48 = load i32, i32* %ESI, align 4', '%49 = add i64 %45, 6', 'store i64 %49, i64* %PC, align 8', '%50 = inttoptr i64 %47 to i32*', 'store i32 %48, i32* %50, align 4', '%51 = load i64, i64* %RCX, align 8', '%52 = load i64, i64* %PC, align 8', 'store i64 %51, i64* %RSI, align 8', '%53 = load i64, i64* %RBP, align 8', '%54 = add i64 %53, -64', '%55 = load i64, i64* %RAX, align 8', '%56 = add i64 %52, 7', 'store i64 %56, i64* %PC, align 8', '%57 = inttoptr i64 %54 to i64*', 'store i64 %55, i64* %57, align 8', '%58 = load i64, i64* %PC, align 8', '%59 = add i64 %58, -388', '%60 = add i64 %58, 5', '%61 = load i64, i64* %RSP, align 8', '%62 = add i64 %61, -8', '%63 = inttoptr i64 %62 to i64*', 'store i64 %60, i64* %63, align 8', 'store i64 %62, i64* %RSP, align 8', 'store i64 %59, i64* %PC, align 8', '%64 = tail call fastcc %struct.Memory* @ext_601068_memcpy(%struct.State* nonnull %0, %struct.Memory* %2)', '%65 = load i64, i64* %RBP, align 8', '%66 = add i64 %65, -64', '%67 = load i64, i64* %PC, align 8', '%68 = add i64 %67, 4', 'store i64 %68, i64* %PC, align 8', '%69 = inttoptr i64 %66 to i64*', '%70 = load i64, i64* %69, align 8', 'store i64 %70, i64* %RDI, align 8', '%71 = add i64 %65, -56', '%72 = add i64 %67, 7', 'store i64 %72, i64* %PC, align 8', '%73 = inttoptr i64 %71 to i32*', '%74 = load i32, i32* %73, align 4', '%75 = zext i32 %74 to i64', 'store i64 %75, i64* %RSI, align 8', '%76 = add i64 %67, -137', '%77 = add i64 %67, 12', '%78 = load i64, i64* %RSP, align 8', '%79 = add i64 %78, -8', '%80 = inttoptr i64 %79 to i64*', 'store i64 %77, i64* %80, align 8', 'store i64 %79, i64* %RSP, align 8', 'store i64 %76, i64* %PC, align 8', '%81 = tail call %struct.Memory* @sub_400580_foo_renamed_(%struct.State* nonnull %0, i64 %76, %struct.Memory* %64)', '%82 = load i64, i64* %PC, align 8', '%83 = load i64, i64* %RBP, align 8', '%84 = add i64 %83, -52', '%85 = load i32, i32* %EAX, align 4', '%86 = add i64 %82, 13', 'store i64 %86, i64* %PC, align 8', '%87 = inttoptr i64 %84 to i32*', 'store i32 %85, i32* %87, align 4', '%88 = load i64, i64* %RBP, align 8', '%89 = add i64 %88, -52', '%91 = add i64 %90, 3', 'store i64 %91, i64* %PC, align 8', '%92 = inttoptr i64 %89 to i32*', '%93 = load i32, i32* %92, align 4', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%95 = add i64 %90, -434', '%96 = add i64 %90, 10', '%97 = load i64, i64* %RSP, align 8', '%98 = add i64 %97, -8', '%99 = inttoptr i64 %98 to i64*', 'store i64 %96, i64* %99, align 8', 'store i64 %98, i64* %RSP, align 8', 'store i64 %95, i64* %PC, align 8', '%100 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %81)', '%101 = load i64, i64* %RBP, align 8', '%102 = add i64 %101, -52', '%104 = add i64 %103, 3', 'store i64 %104, i64* %PC, align 8', '%105 = inttoptr i64 %102 to i32*', '%106 = load i32, i32* %105, align 4', '%107 = zext i32 %106 to i64', 'store i64 %107, i64* %RSI, align 8', '%108 = add i64 %101, -68', '%109 = load i32, i32* %EAX, align 4', '%110 = add i64 %103, 6', 'store i64 %110, i64* %PC, align 8', '%111 = inttoptr i64 %108 to i32*', 'store i32 %109, i32* %111, align 4', '%112 = load i32, i32* %ESI, align 4', '%113 = zext i32 %112 to i64', '%114 = load i64, i64* %PC, align 8', 'store i64 %113, i64* %RAX, align 8', '%115 = load i64, i64* %RSP, align 8', '%116 = add i64 %115, 80', 'store i64 %116, i64* %RSP, align 8', '%117 = icmp ugt i64 %115, -81', '%118 = zext i1 %117 to i8', 'store i8 %118, i8* %14, align 1', '%119 = trunc i64 %116 to i32', '%120 = and i32 %119, 255', '%121 = tail call i32 @llvm.ctpop.i32(i32 %120) #12', '%122 = trunc i32 %121 to i8', '%123 = and i8 %122, 1', '%124 = xor i8 %123, 1', 'store i8 %124, i8* %21, align 1', '%125 = xor i64 %115, 16', '%126 = xor i64 %125, %116', '%127 = lshr i64 %126, 4', '%128 = trunc i64 %127 to i8', '%129 = and i8 %128, 1', 'store i8 %129, i8* %27, align 1', '%130 = icmp eq i64 %116, 0', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %30, align 1', '%132 = lshr i64 %116, 63', '%133 = trunc i64 %132 to i8', 'store i8 %133, i8* %33, align 1', '%134 = lshr i64 %115, 63', '%135 = xor i64 %132, %134', '%136 = add nuw nsw i64 %135, %132', '%137 = icmp eq i64 %136, 2', '%138 = zext i1 %137 to i8', 'store i8 %138, i8* %39, align 1', '%139 = add i64 %114, 7', 'store i64 %139, i64* %PC, align 8', '%140 = add i64 %115, 88', '%141 = inttoptr i64 %116 to i64*', '%142 = load i64, i64* %141, align 8', 'store i64 %142, i64* %RBP, align 8', 'store i64 %140, i64* %RSP, align 8', '%143 = add i64 %114, 8', 'store i64 %143, i64* %PC, align 8', '%144 = inttoptr i64 %140 to i64*', '%145 = load i64, i64* %144, align 8', 'store i64 %145, i64* %PC, align 8', '%146 = add i64 %115, 96', 'store i64 %146, i64* %RSP, align 8', 'ret %struct.Memory* %100'])
Keep: block_4005d0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Keep: %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -88
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 80
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: store i64 10, i64* %RSI, align 8
Found line to remove! %40 = add i64 %7, -56
Found line to remove! store i64 %40, i64* %RAX, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 16), i64* %RCX, align 8
Found line to remove! store i64 40, i64* %RDX, align 8
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = add i64 %10, 38
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Found line to remove! %44 = load i64, i64* %RAX, align 8
Keep: %45 = load i64, i64* %PC, align 8
Found line to remove! store i64 %44, i64* %RDI, align 8
Found line to remove! %46 = load i64, i64* %RBP, align 8
Found line to remove! %47 = add i64 %46, -56
Found line to remove! %48 = load i32, i32* %ESI, align 4
Found line to remove! %49 = add i64 %45, 6
Found line to remove! store i64 %49, i64* %PC, align 8
Found line to remove! %50 = inttoptr i64 %47 to i32*
Found line to remove! store i32 %48, i32* %50, align 4
Found line to remove! %51 = load i64, i64* %RCX, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! store i64 %51, i64* %RSI, align 8
Found line to remove! %53 = load i64, i64* %RBP, align 8
Found line to remove! %54 = add i64 %53, -64
Found line to remove! %55 = load i64, i64* %RAX, align 8
Found line to remove! %56 = add i64 %52, 7
Found line to remove! store i64 %56, i64* %PC, align 8
Found line to remove! %57 = inttoptr i64 %54 to i64*
Found line to remove! store i64 %55, i64* %57, align 8
Found line to remove! %58 = load i64, i64* %PC, align 8
Found line to remove! %59 = add i64 %58, -388
Found line to remove! %60 = add i64 %58, 5
Found line to remove! %61 = load i64, i64* %RSP, align 8
Found line to remove! %62 = add i64 %61, -8
Found line to remove! %63 = inttoptr i64 %62 to i64*
Found line to remove! store i64 %60, i64* %63, align 8
Found line to remove! store i64 %62, i64* %RSP, align 8
Found line to remove! store i64 %59, i64* %PC, align 8
Found line to remove! %64 = tail call fastcc %struct.Memory* @ext_601068_memcpy(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %65 = load i64, i64* %RBP, align 8
Found line to remove! %66 = add i64 %65, -64
Found line to remove! %67 = load i64, i64* %PC, align 8
Found line to remove! %68 = add i64 %67, 4
Found line to remove! store i64 %68, i64* %PC, align 8
Found line to remove! %69 = inttoptr i64 %66 to i64*
Found line to remove! %70 = load i64, i64* %69, align 8
Found line to remove! store i64 %70, i64* %RDI, align 8
Found line to remove! %71 = add i64 %65, -56
Found line to remove! %72 = add i64 %67, 7
Found line to remove! store i64 %72, i64* %PC, align 8
Found line to remove! %73 = inttoptr i64 %71 to i32*
Found line to remove! %74 = load i32, i32* %73, align 4
Found line to remove! %75 = zext i32 %74 to i64
Found line to remove! store i64 %75, i64* %RSI, align 8
Found line to remove! %76 = add i64 %67, -137
Found line to remove! %77 = add i64 %67, 12
Found line to remove! %78 = load i64, i64* %RSP, align 8
Found line to remove! %79 = add i64 %78, -8
Found line to remove! %80 = inttoptr i64 %79 to i64*
Found line to remove! store i64 %77, i64* %80, align 8
Found line to remove! store i64 %79, i64* %RSP, align 8
Found line to remove! store i64 %76, i64* %PC, align 8
Found line to remove! %81 = tail call %struct.Memory* @sub_400580_foo_renamed_(%struct.State* nonnull %0, i64 %76, %struct.Memory* %64)
Found line to remove! %82 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 56), i64* %RDI, align 8
Found line to remove! %83 = load i64, i64* %RBP, align 8
Found line to remove! %84 = add i64 %83, -52
Found line to remove! %85 = load i32, i32* %EAX, align 4
Found line to remove! %86 = add i64 %82, 13
Found line to remove! store i64 %86, i64* %PC, align 8
Found line to remove! %87 = inttoptr i64 %84 to i32*
Found line to remove! store i32 %85, i32* %87, align 4
Found line to remove! %88 = load i64, i64* %RBP, align 8
Found line to remove! %89 = add i64 %88, -52
Keep: %90 = load i64, i64* %PC, align 8
Found line to remove! %91 = add i64 %90, 3
Found line to remove! store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %89 to i32*Writing '/tmp/tmpq2gmla4p.dot'...
Writing '/tmp/tmpq2gmla4p.dot':Done

Reading LLVM: /tmp/tmpj8gd6gsi-query.ll
Extracting function [main] from /tmp/tmpj8gd6gsi-query.ll
Dot file generated!
Writing '/tmp/tmppunye7pc.dot'...
Writing '/tmp/tmppunye7pc.dot':Done

Reading LLVM: /tmp/tmpmgxtoxre-target.ll
Extracting function [main] from /tmp/tmpmgxtoxre-target.ll
Dot file generated!

Found line to remove! %93 = load i32, i32* %92, align 4
Found line to remove! %94 = zext i32 %93 to i64
Found line to remove! store i64 %94, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %95 = add i64 %90, -434
Found line to remove! %96 = add i64 %90, 10
Found line to remove! %97 = load i64, i64* %RSP, align 8
Found line to remove! %98 = add i64 %97, -8
Found line to remove! %99 = inttoptr i64 %98 to i64*
Found line to remove! store i64 %96, i64* %99, align 8
Found line to remove! store i64 %98, i64* %RSP, align 8
Found line to remove! store i64 %95, i64* %PC, align 8
Found line to remove! %100 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %81)
Found line to remove! %101 = load i64, i64* %RBP, align 8
Found line to remove! %102 = add i64 %101, -52
Keep: %103 = load i64, i64* %PC, align 8
Found line to remove! %104 = add i64 %103, 3
Found line to remove! store i64 %104, i64* %PC, align 8
Found line to remove! %105 = inttoptr i64 %102 to i32*
Found line to remove! %106 = load i32, i32* %105, align 4
Found line to remove! %107 = zext i32 %106 to i64
Found line to remove! store i64 %107, i64* %RSI, align 8
Found line to remove! %108 = add i64 %101, -68
Found line to remove! %109 = load i32, i32* %EAX, align 4
Found line to remove! %110 = add i64 %103, 6
Found line to remove! store i64 %110, i64* %PC, align 8
Found line to remove! %111 = inttoptr i64 %108 to i32*
Found line to remove! store i32 %109, i32* %111, align 4
Found line to remove! %112 = load i32, i32* %ESI, align 4
Found line to remove! %113 = zext i32 %112 to i64
Found line to remove! %114 = load i64, i64* %PC, align 8
Found line to remove! store i64 %113, i64* %RAX, align 8
Found line to remove! %115 = load i64, i64* %RSP, align 8
Found line to remove! %116 = add i64 %115, 80
Found line to remove! store i64 %116, i64* %RSP, align 8
Found line to remove! %117 = icmp ugt i64 %115, -81
Found line to remove! %118 = zext i1 %117 to i8
Found line to remove! store i8 %118, i8* %14, align 1
Found line to remove! %119 = trunc i64 %116 to i32
Found line to remove! %120 = and i32 %119, 255
Found line to remove! %121 = tail call i32 @llvm.ctpop.i32(i32 %120) #12
Found line to remove! %122 = trunc i32 %121 to i8
Found line to remove! %123 = and i8 %122, 1
Found line to remove! %124 = xor i8 %123, 1
Found line to remove! store i8 %124, i8* %21, align 1
Found line to remove! %125 = xor i64 %115, 16
Found line to remove! %126 = xor i64 %125, %116
Found line to remove! %127 = lshr i64 %126, 4
Found line to remove! %128 = trunc i64 %127 to i8
Found line to remove! %129 = and i8 %128, 1
Found line to remove! store i8 %129, i8* %27, align 1
Found line to remove! %130 = icmp eq i64 %116, 0
Found line to remove! %131 = zext i1 %130 to i8
Found line to remove! store i8 %131, i8* %30, align 1
Found line to remove! %132 = lshr i64 %116, 63
Found line to remove! %133 = trunc i64 %132 to i8
Found line to remove! store i8 %133, i8* %33, align 1
Found line to remove! %134 = lshr i64 %115, 63
Found line to remove! %135 = xor i64 %132, %134
Found line to remove! %136 = add nuw nsw i64 %135, %132
Found line to remove! %137 = icmp eq i64 %136, 2
Found line to remove! %138 = zext i1 %137 to i8
Found line to remove! store i8 %138, i8* %39, align 1
Found line to remove! %139 = add i64 %114, 7
Found line to remove! store i64 %139, i64* %PC, align 8
Found line to remove! %140 = add i64 %115, 88
Found line to remove! %141 = inttoptr i64 %116 to i64*
Found line to remove! %142 = load i64, i64* %141, align 8
Found line to remove! store i64 %142, i64* %RBP, align 8
Found line to remove! store i64 %140, i64* %RSP, align 8
Found line to remove! %143 = add i64 %114, 8
Found line to remove! store i64 %143, i64* %PC, align 8
Found line to remove! %144 = inttoptr i64 %140 to i64*
Found line to remove! %145 = load i64, i64* %144, align 8
Found line to remove! store i64 %145, i64* %PC, align 8
Found line to remove! %146 = add i64 %115, 96
Found line to remove! store i64 %146, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %100
================ Starting round 2
- 0 %RSI.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 1 store i64 10, i64* %RSI.i52, align 8
- 2 %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 3 store i64 ptrtoint (%G__0x4006f8_type* @G__0x4006f8 to i64), i64* %RDI.i42, align 8
- 4 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d2742950>, {0: {0}, 1: {2, 3}, 2: {1}, 3: {2, 3}, 4: {4}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d2742950>, {0: {0}, 1: {2}, 2: {1}, 3: {3}, 4: {4}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 getelementptr getelementptr
EXACT 3 store store
EXACT 4 ret ret
================ Starting round 3
- 0 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 1 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 2 store i64 10, i64* %RSI, align 8
- 3 store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 56), i64* %RDI, align 8
- 4 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d260bae8>, {0: {0}, 1: {2}, 2: {1, 3}, 3: {1, 3}, 4: {4}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f75d260bae8>, {0: {0}, 1: {2}, 2: {1}, 3: {3}, 4: {4}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 store store
EXACT 3 store store
EXACT 4 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RSI.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 10, i64* %RSI.i52, align 8', '%RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x4006f8_type* @G__0x4006f8 to i64), i64* %RDI.i42, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %RSI.i52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 10, i64* %RSI.i52, align 8
Found line to remove! %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x4006f8_type* @G__0x4006f8 to i64), i64* %RDI.i42, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 10, i64* %RSI, align 8', 'store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 56), i64* %RDI, align 8', 'ret %struct.Memory* %2'])
Keep: block_4005d0:
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 10, i64* %RSI, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 56), i64* %RDI, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_3/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_3/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
