Matching sub_400470_get_sign Vs get_sign


[Info] Retrieve Potential Matches...
[0x55f2960956e0]: %struct.State* %0 {
	[0x55f2960f32e0]:%struct.State.0* %0
	}

[0x55f296095720]: i64 %1 {
	[0x55f2960f3690]:i64 %1
	}

[0x55f296095760]: %struct.Memory* %2 {
	[0x55f2960f3590]:%struct.Memory.31* %2
	}

[0x55f2960958e8]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x55f2960ca7e8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	}

[0x55f2960959c0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55f296073710]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55f296095a98]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55f296035a58]:  %11 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55f296095b80]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55f296075e00]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55f296095c70]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55f296074420]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55f296095d08]:   %4 = load i64, i64* %RBP, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296095dd0]:   %5 = add i64 %1, 1 {
	[0x55f2960cb240]:  %5 = add i64 %1, 1
	}

[0x55f296095e50]:   store i64 %5, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296095f30]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55f2960756e0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55f296095fa8]:   %7 = load i64, i64* %6, align 8, !tbaa !1257 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296096020]:   %8 = add i64 %7, -8 {
	[0x55f2960cc310]:  %8 = add i64 %7, -8
	[0x55f2960cda60]:  %17 = add i64 %16, -8
	}

[0x55f296096088]:   %17 = load i64, i64* %PC, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296096118]:   %9 = inttoptr i64 %8 to i64* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296096190]:   store i64 %4, i64* %9, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096210]:   store i64 %8, i64* %6, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096278]:   %10 = load i64, i64* %PC, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f2960962f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096370]:   %11 = add i64 %7, -16 {
	[0x55f2960cd5e0]:  %12 = add i64 %7, -16
	}

[0x55f2960963d8]:   %12 = load i32, i32* %EDI, align 4 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296096450]:   %13 = add i64 %10, 6 {
	[0x55f2960cd6f0]:  %14 = add i64 %10, 6
	}

[0x55f2960964d0]:   store i64 %13, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096538]:   %14 = inttoptr i64 %11 to i32* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f2960965b0]:   store i32 %12, i32* %14, align 4 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096618]:   %15 = load i64, i64* %RBP, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296096690]:   %16 = add i64 %15, -8 {
	[0x55f2960cc310]:  %8 = add i64 %7, -8
	[0x55f2960cda60]:  %17 = add i64 %16, -8
	}

[0x55f2960966f8]:   %33 = trunc i32 %32 to i8 {
	[0x55f2960d1398]:  %28 = trunc i32 %27 to i8
	[0x55f2960d14c8]:  %34 = trunc i32 %33 to i8
	[0x55f2960d2448]:  %41 = trunc i32 %40 to i8
	}

[0x55f296096770]:   %34 = and i8 %33, 1 {
	[0x55f2960cec70]:  %29 = and i8 %28, 1
	[0x55f2960f13a0]:  %35 = and i8 %34, 1
	}

[0x55f296096820]:   %18 = add i64 %17, 4 {
	[0x55f2960cdb30]:  %19 = add i64 %18, 4
	[0x55f2960ef630]:  %64 = add i64 %57, 4
	}

[0x55f2960968a0]:   store i64 %18, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096908]:   %19 = inttoptr i64 %16 to i32* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296096968]:   %20 = load i32, i32* %19, align 4 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296096a20]:   %21 = add i32 %20, -1 {
	[0x55f2960ed2f0]:  %22 = add i32 %21, -1
	}

[0x55f296096aa0]:   %22 = icmp eq i32 %20, 0 {
	[0x55f2960ce0c0]:  %23 = icmp eq i32 %21, 0
	[0x55f2960f17e0]:  %37 = icmp eq i32 %22, 0
	[0x55f29610d190]:  %49 = icmp ne i8 %41, 0
	[0x55f29610d690]:  %46 = icmp eq i32 %45, 2
	}

[0x55f296096b08]:   %23 = zext i1 %22 to i8 {
	[0x55f2960cf2d8]:  %38 = zext i1 %37 to i8
	[0x55f2960d07b8]:  %24 = zext i1 %23 to i8
	[0x55f2960d2578]:  %47 = zext i1 %46 to i8
	[0x55f2960d53c8]:  %63 = zext i32 %62 to i64
	}

[0x55f296096bb0]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55f2960caea0]:  %25 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x55f296096c40]:   store i8 %23, i8* %24, align 1, !tbaa !1261 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296096cc0]:   %25 = and i32 %21, 255 {
	[0x55f2960ccdd0]:  %26 = and i32 %22, 255
	}

[0x55f296096d80]:   %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #9 {
	[0x55f2960ee300]:  %27 = tail call i32 @llvm.ctpop.i32(i32 %26)
	}

[0x55f296096df8]:   %27 = trunc i32 %26 to i8 {
	[0x55f2960d1398]:  %28 = trunc i32 %27 to i8
	[0x55f2960d14c8]:  %34 = trunc i32 %33 to i8
	[0x55f2960d2448]:  %41 = trunc i32 %40 to i8
	}

[0x55f296096e70]:   %28 = and i8 %27, 1 {
	[0x55f2960cec70]:  %29 = and i8 %28, 1
	[0x55f2960f13a0]:  %35 = and i8 %34, 1
	}

[0x55f296096ef0]:   %29 = xor i8 %28, 1 {
	[0x55f2960ced80]:  %30 = xor i8 %29, 1
	}

[0x55f296096fa0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55f2960ce710]:  %31 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x55f296097030]:   store i8 %29, i8* %30, align 1, !tbaa !1275 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f2960970b0]:   %31 = xor i32 %21, %20 {
	[0x55f2960cc6e0]:  %32 = xor i32 %22, %21
	[0x55f2960d89f0]:  %44 = xor i32 %40, %43
	[0x55f296186960]:  %50 = xor i1 %49, %46
	}

[0x55f296097130]:   %32 = lshr i32 %31, 4 {
	[0x55f2960f0100]:  %33 = lshr i32 %32, 4
	}

[0x55f296097198]:   %65 = load i64, i64* %64, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296097210]:   store i64 %65, i64* %RBP, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296097290]:   store i64 %63, i64* %6, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296097310]:   %66 = add i64 %54, 5 {
	[0x55f2960f23c0]:  %69 = add i64 %57, 5
	}

[0x55f2960973f0]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55f2960d0d90]:  %36 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x55f296097480]:   store i8 %34, i8* %35, align 1, !tbaa !1276 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296097500]:   %36 = icmp eq i32 %21, 0 {
	[0x55f2960ce0c0]:  %23 = icmp eq i32 %21, 0
	[0x55f2960f17e0]:  %37 = icmp eq i32 %22, 0
	[0x55f29610d190]:  %49 = icmp ne i8 %41, 0
	[0x55f29610d690]:  %46 = icmp eq i32 %45, 2
	}

[0x55f296097568]:   %37 = zext i1 %36 to i8 {
	[0x55f2960cf2d8]:  %38 = zext i1 %37 to i8
	[0x55f2960d07b8]:  %24 = zext i1 %23 to i8
	[0x55f2960d2578]:  %47 = zext i1 %46 to i8
	[0x55f2960d53c8]:  %63 = zext i32 %62 to i64
	}

[0x55f296097610]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55f2960cf3f0]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x55f2960976a0]:   store i8 %37, i8* %38, align 1, !tbaa !1277 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296097720]:   %39 = lshr i32 %21, 31 {
	[0x55f2960d88c0]:  %43 = lshr i32 %21, 31
	[0x55f2960f3770]:  %40 = lshr i32 %22, 31
	}

[0x55f296097788]:   %40 = trunc i32 %39 to i8 {
	[0x55f2960d1398]:  %28 = trunc i32 %27 to i8
	[0x55f2960d14c8]:  %34 = trunc i32 %33 to i8
	[0x55f2960d2448]:  %41 = trunc i32 %40 to i8
	}

[0x55f296097830]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55f2960d6450]:  %42 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x55f2960978c0]:   store i8 %40, i8* %41, align 1, !tbaa !1278 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296097940]:   %42 = lshr i32 %20, 31 {
	[0x55f2960d88c0]:  %43 = lshr i32 %21, 31
	[0x55f2960f3770]:  %40 = lshr i32 %22, 31
	}

[0x55f2960979c0]:   %43 = xor i32 %39, %42 {
	[0x55f2960cc6e0]:  %32 = xor i32 %22, %21
	[0x55f2960d89f0]:  %44 = xor i32 %40, %43
	[0x55f296186960]:  %50 = xor i1 %49, %46
	}

[0x55f296097a40]:   %44 = add nuw nsw i32 %43, %42 {
	[0x55f29610e740]:  %45 = add nuw nsw i32 %44, %43
	[0x55f296114a80]:  %51 = add i64 %18, %.v
	}

[0x55f296097ac0]:   %45 = icmp eq i32 %44, 2 {
	[0x55f2960ce0c0]:  %23 = icmp eq i32 %21, 0
	[0x55f2960f17e0]:  %37 = icmp eq i32 %22, 0
	[0x55f29610d190]:  %49 = icmp ne i8 %41, 0
	[0x55f29610d690]:  %46 = icmp eq i32 %45, 2
	}

[0x55f296097b28]:   %46 = zext i1 %45 to i8 {
	[0x55f2960cf2d8]:  %38 = zext i1 %37 to i8
	[0x55f2960d07b8]:  %24 = zext i1 %23 to i8
	[0x55f2960d2578]:  %47 = zext i1 %46 to i8
	[0x55f2960d53c8]:  %63 = zext i32 %62 to i64
	}

[0x55f296097bd0]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55f2960d6910]:  %48 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x55f296097c60]:   store i8 %46, i8* %47, align 1, !tbaa !1279 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296097ce0]:   %48 = icmp ne i8 %40, 0 {
	[0x55f2960ce0c0]:  %23 = icmp eq i32 %21, 0
	[0x55f2960f17e0]:  %37 = icmp eq i32 %22, 0
	[0x55f29610d190]:  %49 = icmp ne i8 %41, 0
	[0x55f29610d690]:  %46 = icmp eq i32 %45, 2
	}

[0x55f296097d60]:   %49 = xor i1 %48, %45 {
	[0x55f2960cc6e0]:  %32 = xor i32 %22, %21
	[0x55f2960d89f0]:  %44 = xor i32 %40, %43
	[0x55f296186960]:  %50 = xor i1 %49, %46
	}

[0x55f296097e38]:   %.v = select i1 %49, i64 10, i64 22 {
	[0x55f2960eeff8]:  %.v = select i1 %50, i64 10, i64 22
	}

[0x55f296097eb0]:   %50 = add i64 %17, %.v {
	[0x55f29610e740]:  %45 = add nuw nsw i32 %44, %43
	[0x55f296114a80]:  %51 = add i64 %18, %.v
	}

[0x55f296097f70]:   %51 = add i64 %15, -4 {
	[0x55f2960fe680]:  %52 = add i64 %16, -4
	[0x55f2961a0670]:  %59 = add i64 %58, -4
	}

[0x55f296097ff0]:   %52 = add i64 %50, 7 {
	[0x55f29618c070]:  %53 = add i64 %51, 7
	}

[0x55f296098070]:   store i64 %52, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f2960980d8]:   %53 = inttoptr i64 %51 to i32* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296098188]:   %70 = load i64, i64* %PC, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296098238]:   %.pre = load i64, i64* %PC, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f2960982c8]:   br i1 %49, label %block_400481, label %block_40048d {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}

[0x55f296098340]:   store i32 0, i32* %53, align 4 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296098408]:   %54 = phi i64 [ %71, %block_400481 ], [ %.pre, %block_40048d ] {
	[0x55f2960d3738]:  %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]
	}

[0x55f296098478]:   br label %block_400494 {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}

[0x55f2960985a8]:   %55 = load i64, i64* %RBP, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296098620]:   %56 = add i64 %55, -4 {
	[0x55f2960fe680]:  %52 = add i64 %16, -4
	[0x55f2961a0670]:  %59 = add i64 %58, -4
	}

[0x55f2960986a0]:   %57 = add i64 %54, 3 {
	[0x55f29608d390]:  %60 = add i64 %57, 3
	}

[0x55f296098720]:   store i64 %57, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296098788]:   %58 = inttoptr i64 %56 to i32* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f2960987e8]:   %59 = load i32, i32* %58, align 4 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296098848]:   %60 = zext i32 %59 to i64 {
	[0x55f2960cf2d8]:  %38 = zext i1 %37 to i8
	[0x55f2960d07b8]:  %24 = zext i1 %23 to i8
	[0x55f2960d2578]:  %47 = zext i1 %46 to i8
	[0x55f2960d53c8]:  %63 = zext i32 %62 to i64
	}

[0x55f2960988c0]:   store i64 %60, i64* %RAX, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296098940]:   %61 = add i64 %54, 4 {
	[0x55f2960cdb30]:  %19 = add i64 %18, 4
	[0x55f2960ef630]:  %64 = add i64 %57, 4
	}

[0x55f2960989c0]:   store i64 %61, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296098a28]:   %62 = load i64, i64* %6, align 8, !tbaa !1257 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f296098aa0]:   %63 = add i64 %62, 8 {
	[0x55f2960efd40]:  %66 = add i64 %65, 8
	}

[0x55f296098b08]:   %64 = inttoptr i64 %62 to i64* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296098f90]:   store i64 %66, i64* %PC, align 8 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296098ff8]:   %67 = inttoptr i64 %63 to i64* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296099058]:   %68 = load i64, i64* %67, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f2960990d0]:   store i64 %68, i64* %PC, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296099150]:   %69 = add i64 %62, 16 {
	[0x55f2960cac60]:  %72 = add i64 %65, 16
	}

[0x55f2960991d0]:   store i64 %69, i64* %6, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296099238]:   ret %struct.Memory* %2 {
	[0x55f2960d5c18]:  ret %struct.Memory.31* %2
	}

[0x55f2960992b0]:   store i32 1, i32* %53, align 4 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296099330]:   %71 = add i64 %70, 12 {
	[0x55f296195f30]:  %56 = add i64 %55, 12
	}

[0x55f2960993b0]:   store i64 %71, i64* %PC, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296099418]:   br label %block_400494 {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55f2960cf848]:   %16 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55f296095d08]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x55f296096190]:   store i64 %4, i64* %9, align 8


Uprime Matches: [0x55f296035050]:   store i64 %63, i64* %RAX.i, align 8
[0x55f29608cf30]:   store i64 %60, i64* %3, align 8
[0x55f2960ca8a0]:   store i64 %4, i64* %9, align 8
[0x55f2960cb350]:   store i64 %5, i64* %3, align 8
[0x55f2960cc7d0]:   store i64 %72, i64* %6, align 8
[0x55f2960cd0d0]:   store i64 %8, i64* %6, align 8
[0x55f2960cd4d0]:   store i64 %8, i64* %RBP.i, align 8
[0x55f2960cd800]:   store i64 %14, i64* %3, align 8
[0x55f2960cdc40]:   store i64 %19, i64* %3, align 8
[0x55f2960ce190]:   store i8 %24, i8* %25, align 1
[0x55f2960d8790]:   store i8 %41, i8* %42, align 1
[0x55f2960eca70]:   store i32 %13, i32* %15, align 4
[0x55f2960ef700]:   store i8 %30, i8* %31, align 1
[0x55f2960ef810]:   store i64 %64, i64* %3, align 8
[0x55f2960f0680]:   store i64 %68, i64* %RBP.i, align 8
[0x55f2960f16d0]:   store i8 %35, i8* %36, align 1
[0x55f2960f1c60]:   store i8 %38, i8* %39, align 1
[0x55f2960f22f0]:   store i64 %66, i64* %6, align 8
[0x55f2960f2580]:   store i64 %69, i64* %3, align 8
[0x55f2960f3440]:   store i64 %71, i64* %3, align 8
[0x55f296104ac0]:   store i64 %56, i64* %3, align 8
[0x55f296106c00]:   store i32 0, i32* %54, align 4
[0x55f29610d870]:   store i8 %47, i8* %48, align 1
[0x55f296190080]:   store i64 %53, i64* %3, align 8
[0x55f296191b20]:   store i32 1, i32* %54, align 4


Adj: [0x55f2960cda60]:   %17 = add i64 %16, -8
[0x55f2960fe680]:   %52 = add i64 %16, -4


Removing: [0x55f2960d3e68]:   %58 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55f296095d08]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x55f296096190]:   store i64 %4, i64* %9, align 8


Uprime Matches: [0x55f296035050]:   store i64 %63, i64* %RAX.i, align 8
[0x55f29608cf30]:   store i64 %60, i64* %3, align 8
[0x55f2960ca8a0]:   store i64 %4, i64* %9, align 8
[0x55f2960cb350]:   store i64 %5, i64* %3, align 8
[0x55f2960cc7d0]:   store i64 %72, i64* %6, align 8
[0x55f2960cd0d0]:   store i64 %8, i64* %6, align 8
[0x55f2960cd4d0]:   store i64 %8, i64* %RBP.i, align 8
[0x55f2960cd800]:   store i64 %14, i64* %3, align 8
[0x55f2960cdc40]:   store i64 %19, i64* %3, align 8
[0x55f2960ce190]:   store i8 %24, i8* %25, align 1
[0x55f2960d8790]:   store i8 %41, i8* %42, align 1
[0x55f2960eca70]:   store i32 %13, i32* %15, align 4
[0x55f2960ef700]:   store i8 %30, i8* %31, align 1
[0x55f2960ef810]:   store i64 %64, i64* %3, align 8
[0x55f2960f0680]:   store i64 %68, i64* %RBP.i, align 8
[0x55f2960f16d0]:   store i8 %35, i8* %36, align 1
[0x55f2960f1c60]:   store i8 %38, i8* %39, align 1
[0x55f2960f22f0]:   store i64 %66, i64* %6, align 8
[0x55f2960f2580]:   store i64 %69, i64* %3, align 8
[0x55f2960f3440]:   store i64 %71, i64* %3, align 8
[0x55f296104ac0]:   store i64 %56, i64* %3, align 8
[0x55f296106c00]:   store i32 0, i32* %54, align 4
[0x55f29610d870]:   store i8 %47, i8* %48, align 1
[0x55f296190080]:   store i64 %53, i64* %3, align 8
[0x55f296191b20]:   store i32 1, i32* %54, align 4


Adj: [0x55f2961a0670]:   %59 = add i64 %58, -4


Removing: [0x55f2960d54f8]:   %65 = load i64, i64* %6, align 8
From the pot matches of: [0x55f296095fa8]:   %7 = load i64, i64* %6, align 8, !tbaa !1257


Uprime : [0x55f296096370]:   %11 = add i64 %7, -16


Uprime Matches: [0x55f2960cd5e0]:   %12 = add i64 %7, -16


Adj: [0x55f2960cac60]:   %72 = add i64 %65, 16
[0x55f2960d5628]:   %67 = inttoptr i64 %65 to i64*
[0x55f2960efd40]:   %66 = add i64 %65, 8


Removing: [0x55f2960cfd08]:   %18 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296096278]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55f296096450]:   %13 = add i64 %10, 6


Uprime Matches: [0x55f2960cd6f0]:   %14 = add i64 %10, 6


Adj: [0x55f2960cdb30]:   %19 = add i64 %18, 4
[0x55f296114a80]:   %51 = add i64 %18, %.v


Removing: [0x55f2960d3028]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296096278]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55f296096450]:   %13 = add i64 %10, 6


Uprime Matches: [0x55f2960cd6f0]:   %14 = add i64 %10, 6


Adj: [0x55f296195f30]:   %56 = add i64 %55, 12


Removing: [0x55f2960d34e8]:   %.pre = load i64, i64* %3, align 8
From the pot matches of: [0x55f296096278]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55f296096450]:   %13 = add i64 %10, 6


Uprime Matches: [0x55f2960cd6f0]:   %14 = add i64 %10, 6


Adj: [0x55f2960d3738]:   %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]


Removing: [0x55f29603ad88]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55f296096618]:   %15 = load i64, i64* %RBP, align 8


Uprime : [0x55f296097f70]:   %51 = add i64 %15, -4


Uprime Matches: [0x55f2960fe680]:   %52 = add i64 %16, -4
[0x55f2961a0670]:   %59 = add i64 %58, -4


Adj: [0x55f2960ca8a0]:   store i64 %4, i64* %9, align 8


Removing: [0x55f2960d3e68]:   %58 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55f296096618]:   %15 = load i64, i64* %RBP, align 8


Uprime : [0x55f296096690]:   %16 = add i64 %15, -8


Uprime Matches: [0x55f2960cc310]:   %8 = add i64 %7, -8
[0x55f2960cda60]:   %17 = add i64 %16, -8


Adj: [0x55f2961a0670]:   %59 = add i64 %58, -4


Removing: [0x55f2960c85a8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296096088]:   %17 = load i64, i64* %PC, align 8


Uprime : [0x55f296097eb0]:   %50 = add i64 %17, %.v


Uprime Matches: [0x55f29610e740]:   %45 = add nuw nsw i32 %44, %43
[0x55f296114a80]:   %51 = add i64 %18, %.v


Adj: [0x55f2960cd6f0]:   %14 = add i64 %10, 6


Removing: [0x55f2960d3028]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296096088]:   %17 = load i64, i64* %PC, align 8


Uprime : [0x55f296097eb0]:   %50 = add i64 %17, %.v


Uprime Matches: [0x55f29610e740]:   %45 = add nuw nsw i32 %44, %43
[0x55f296114a80]:   %51 = add i64 %18, %.v


Adj: [0x55f296195f30]:   %56 = add i64 %55, 12


Removing: [0x55f2960d34e8]:   %.pre = load i64, i64* %3, align 8
From the pot matches of: [0x55f296096088]:   %17 = load i64, i64* %PC, align 8


Uprime : [0x55f296097eb0]:   %50 = add i64 %17, %.v


Uprime Matches: [0x55f29610e740]:   %45 = add nuw nsw i32 %44, %43
[0x55f296114a80]:   %51 = add i64 %18, %.v


Adj: [0x55f2960d3738]:   %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]


Removing: [0x55f2960d2448]:   %41 = trunc i32 %40 to i8
From the pot matches of: [0x55f296096df8]:   %27 = trunc i32 %26 to i8


Uprime : [0x55f296096e70]:   %28 = and i8 %27, 1


Uprime Matches: [0x55f2960cec70]:   %29 = and i8 %28, 1
[0x55f2960f13a0]:   %35 = and i8 %34, 1


Adj: [0x55f2960d8790]:   store i8 %41, i8* %42, align 1
[0x55f29610d190]:   %49 = icmp ne i8 %41, 0


Removing: [0x55f2960f13a0]:   %35 = and i8 %34, 1
From the pot matches of: [0x55f296096e70]:   %28 = and i8 %27, 1


Uprime : [0x55f296096ef0]:   %29 = xor i8 %28, 1


Uprime Matches: [0x55f2960ced80]:   %30 = xor i8 %29, 1


Adj: [0x55f2960f16d0]:   store i8 %35, i8* %36, align 1


Removing: [0x55f2960d4dd8]:   %61 = inttoptr i64 %59 to i32*
From the pot matches of: [0x55f2960980d8]:   %53 = inttoptr i64 %51 to i32*


Uprime : [0x55f2960992b0]:   store i32 1, i32* %53, align 4


Uprime Matches: [0x55f296035050]:   store i64 %63, i64* %RAX.i, align 8
[0x55f29608cf30]:   store i64 %60, i64* %3, align 8
[0x55f2960ca8a0]:   store i64 %4, i64* %9, align 8
[0x55f2960cb350]:   store i64 %5, i64* %3, align 8
[0x55f2960cc7d0]:   store i64 %72, i64* %6, align 8
[0x55f2960cd0d0]:   store i64 %8, i64* %6, align 8
[0x55f2960cd4d0]:   store i64 %8, i64* %RBP.i, align 8
[0x55f2960cd800]:   store i64 %14, i64* %3, align 8
[0x55f2960cdc40]:   store i64 %19, i64* %3, align 8
[0x55f2960ce190]:   store i8 %24, i8* %25, align 1
[0x55f2960d8790]:   store i8 %41, i8* %42, align 1
[0x55f2960eca70]:   store i32 %13, i32* %15, align 4
[0x55f2960ef700]:   store i8 %30, i8* %31, align 1
[0x55f2960ef810]:   store i64 %64, i64* %3, align 8
[0x55f2960f0680]:   store i64 %68, i64* %RBP.i, align 8
[0x55f2960f16d0]:   store i8 %35, i8* %36, align 1
[0x55f2960f1c60]:   store i8 %38, i8* %39, align 1
[0x55f2960f22f0]:   store i64 %66, i64* %6, align 8
[0x55f2960f2580]:   store i64 %69, i64* %3, align 8
[0x55f2960f3440]:   store i64 %71, i64* %3, align 8
[0x55f296104ac0]:   store i64 %56, i64* %3, align 8
[0x55f296106c00]:   store i32 0, i32* %54, align 4
[0x55f29610d870]:   store i8 %47, i8* %48, align 1
[0x55f296190080]:   store i64 %53, i64* %3, align 8
[0x55f296191b20]:   store i32 1, i32* %54, align 4


Adj: [0x55f2960d5298]:   %62 = load i32, i32* %61, align 4


Removing: [0x55f2960c85a8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296098238]:   %.pre = load i64, i64* %PC, align 8


Uprime : [0x55f296098408]:   %54 = phi i64 [ %71, %block_400481 ], [ %.pre, %block_40048d ]


Uprime Matches: [0x55f2960d3738]:   %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]


Adj: [0x55f2960cd6f0]:   %14 = add i64 %10, 6


Removing: [0x55f2960cfd08]:   %18 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296098238]:   %.pre = load i64, i64* %PC, align 8


Uprime : [0x55f296098408]:   %54 = phi i64 [ %71, %block_400481 ], [ %.pre, %block_40048d ]


Uprime Matches: [0x55f2960d3738]:   %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]


Adj: [0x55f2960cdb30]:   %19 = add i64 %18, 4
[0x55f296114a80]:   %51 = add i64 %18, %.v


Removing: [0x55f2960d3028]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296098238]:   %.pre = load i64, i64* %PC, align 8


Uprime : [0x55f296098408]:   %54 = phi i64 [ %71, %block_400481 ], [ %.pre, %block_40048d ]


Uprime Matches: [0x55f2960d3738]:   %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]


Adj: [0x55f296195f30]:   %56 = add i64 %55, 12


Removing: [0x55f29603ad88]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55f2960985a8]:   %55 = load i64, i64* %RBP, align 8


Uprime : [0x55f296098620]:   %56 = add i64 %55, -4


Uprime Matches: [0x55f2960fe680]:   %52 = add i64 %16, -4
[0x55f2961a0670]:   %59 = add i64 %58, -4


Adj: [0x55f2960ca8a0]:   store i64 %4, i64* %9, align 8


Removing: [0x55f2960d2ef8]:   %54 = inttoptr i64 %52 to i32*
From the pot matches of: [0x55f296098788]:   %58 = inttoptr i64 %56 to i32*


Uprime : [0x55f2960987e8]:   %59 = load i32, i32* %58, align 4


Uprime Matches: [0x55f29603ad88]:   %4 = load i64, i64* %RBP.i, align 8
[0x55f29603d5d8]:   %7 = load i64, i64* %6, align 8
[0x55f2960c85a8]:   %10 = load i64, i64* %3, align 8
[0x55f2960c9f48]:   %13 = load i32, i32* %EDI.i, align 4
[0x55f2960cf848]:   %16 = load i64, i64* %RBP.i, align 8
[0x55f2960cfd08]:   %18 = load i64, i64* %3, align 8
[0x55f2960d0688]:   %21 = load i32, i32* %20, align 4
[0x55f2960d3028]:   %55 = load i64, i64* %3, align 8
[0x55f2960d34e8]:   %.pre = load i64, i64* %3, align 8
[0x55f2960d3e68]:   %58 = load i64, i64* %RBP.i, align 8
[0x55f2960d5298]:   %62 = load i32, i32* %61, align 4
[0x55f2960d54f8]:   %65 = load i64, i64* %6, align 8
[0x55f2960d5758]:   %68 = load i64, i64* %67, align 8
[0x55f2960d59b8]:   %71 = load i64, i64* %70, align 8


Adj: [0x55f296106c00]:   store i32 0, i32* %54, align 4
[0x55f296191b20]:   store i32 1, i32* %54, align 4


Removing: [0x55f29603d5d8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55f296098a28]:   %62 = load i64, i64* %6, align 8, !tbaa !1257


Uprime : [0x55f296099150]:   %69 = add i64 %62, 16


Uprime Matches: [0x55f2960cac60]:   %72 = add i64 %65, 16


Adj: [0x55f2960cc310]:   %8 = add i64 %7, -8
[0x55f2960cd5e0]:   %12 = add i64 %7, -16


Removing: [0x55f2960c85a8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296098188]:   %70 = load i64, i64* %PC, align 8


Uprime : [0x55f296099330]:   %71 = add i64 %70, 12


Uprime Matches: [0x55f296195f30]:   %56 = add i64 %55, 12


Adj: [0x55f2960cd6f0]:   %14 = add i64 %10, 6


Removing: [0x55f2960cfd08]:   %18 = load i64, i64* %3, align 8
From the pot matches of: [0x55f296098188]:   %70 = load i64, i64* %PC, align 8


Uprime : [0x55f296099330]:   %71 = add i64 %70, 12


Uprime Matches: [0x55f296195f30]:   %56 = add i64 %55, 12


Adj: [0x55f2960cdb30]:   %19 = add i64 %18, 4
[0x55f296114a80]:   %51 = add i64 %18, %.v


Removing: [0x55f2960d34e8]:   %.pre = load i64, i64* %3, align 8
From the pot matches of: [0x55f296098188]:   %70 = load i64, i64* %PC, align 8


Uprime : [0x55f296099330]:   %71 = add i64 %70, 12


Uprime Matches: [0x55f296195f30]:   %56 = add i64 %55, 12


Adj: [0x55f2960d3738]:   %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]

Round: 1

Removing: [0x55f2960d14c8]:   %34 = trunc i32 %33 to i8
From the pot matches of: [0x55f296096df8]:   %27 = trunc i32 %26 to i8


Uprime : [0x55f296096e70]:   %28 = and i8 %27, 1


Uprime Matches: [0x55f2960cec70]:   %29 = and i8 %28, 1


Adj: [0x55f2960f13a0]:   %35 = and i8 %34, 1


Removing: [0x55f2960fe680]:   %52 = add i64 %16, -4
From the pot matches of: [0x55f296098620]:   %56 = add i64 %55, -4


Uprime : [0x55f296098788]:   %58 = inttoptr i64 %56 to i32*


Uprime Matches: [0x55f2960d4dd8]:   %61 = inttoptr i64 %59 to i32*


Adj: [0x55f2960d2ef8]:   %54 = inttoptr i64 %52 to i32*

Round: 2

Removing: [0x55f2960cf848]:   %16 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55f2960985a8]:   %55 = load i64, i64* %RBP, align 8


Uprime : [0x55f296098620]:   %56 = add i64 %55, -4


Uprime Matches: [0x55f2961a0670]:   %59 = add i64 %58, -4


Adj: [0x55f2960cda60]:   %17 = add i64 %16, -8
[0x55f2960fe680]:   %52 = add i64 %16, -4

Round: 3


[Info] After Dual Simulation: Round: 0
[0x55f2960956e0]: %struct.State* %0 {
	[0x55f2960f32e0]:%struct.State.0* %0
	}

[0x55f296095720]: i64 %1 {
	[0x55f2960f3690]:i64 %1
	}

[0x55f296095760]: %struct.Memory* %2 {
	[0x55f2960f3590]:%struct.Memory.31* %2
	}

[0x55f2960958e8]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x55f2960ca7e8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	}

[0x55f2960959c0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55f296073710]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55f296095a98]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55f296035a58]:  %11 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55f296095b80]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55f296075e00]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55f296095c70]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55f296074420]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55f296095d08]:   %4 = load i64, i64* %RBP, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55f296095dd0]:   %5 = add i64 %1, 1 {
	[0x55f2960cb240]:  %5 = add i64 %1, 1
	}

[0x55f296095e50]:   store i64 %5, i64* %PC, align 8 {
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	}

[0x55f296095f30]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55f2960756e0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55f296095fa8]:   %7 = load i64, i64* %6, align 8, !tbaa !1257 {
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	}

[0x55f296096020]:   %8 = add i64 %7, -8 {
	[0x55f2960cc310]:  %8 = add i64 %7, -8
	}

[0x55f296096088]:   %17 = load i64, i64* %PC, align 8 {
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	}

[0x55f296096118]:   %9 = inttoptr i64 %8 to i64* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55f296096190]:   store i64 %4, i64* %9, align 8 {
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	}

[0x55f296096210]:   store i64 %8, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	}

[0x55f296096278]:   %10 = load i64, i64* %PC, align 8 {
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	}

[0x55f2960962f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55f296096370]:   %11 = add i64 %7, -16 {
	[0x55f2960cd5e0]:  %12 = add i64 %7, -16
	}

[0x55f2960963d8]:   %12 = load i32, i32* %EDI, align 4 {
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55f296096450]:   %13 = add i64 %10, 6 {
	[0x55f2960cd6f0]:  %14 = add i64 %10, 6
	}

[0x55f2960964d0]:   store i64 %13, i64* %PC, align 8 {
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	}

[0x55f296096538]:   %14 = inttoptr i64 %11 to i32* {
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55f2960965b0]:   store i32 %12, i32* %14, align 4 {
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	}

[0x55f296096618]:   %15 = load i64, i64* %RBP, align 8 {
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	}

[0x55f296096690]:   %16 = add i64 %15, -8 {
	[0x55f2960cda60]:  %17 = add i64 %16, -8
	}

[0x55f2960966f8]:   %33 = trunc i32 %32 to i8 {
	[0x55f2960d14c8]:  %34 = trunc i32 %33 to i8
	}

[0x55f296096770]:   %34 = and i8 %33, 1 {
	[0x55f2960f13a0]:  %35 = and i8 %34, 1
	}

[0x55f296096820]:   %18 = add i64 %17, 4 {
	[0x55f2960cdb30]:  %19 = add i64 %18, 4
	}

[0x55f2960968a0]:   store i64 %18, i64* %PC, align 8 {
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	}

[0x55f296096908]:   %19 = inttoptr i64 %16 to i32* {
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	}

[0x55f296096968]:   %20 = load i32, i32* %19, align 4 {
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	}

[0x55f296096a20]:   %21 = add i32 %20, -1 {
	[0x55f2960ed2f0]:  %22 = add i32 %21, -1
	}

[0x55f296096aa0]:   %22 = icmp eq i32 %20, 0 {
	[0x55f2960ce0c0]:  %23 = icmp eq i32 %21, 0
	}

[0x55f296096b08]:   %23 = zext i1 %22 to i8 {
	[0x55f2960d07b8]:  %24 = zext i1 %23 to i8
	}

[0x55f296096bb0]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55f2960caea0]:  %25 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x55f296096c40]:   store i8 %23, i8* %24, align 1, !tbaa !1261 {
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	}

[0x55f296096cc0]:   %25 = and i32 %21, 255 {
	[0x55f2960ccdd0]:  %26 = and i32 %22, 255
	}

[0x55f296096d80]:   %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #9 {
	[0x55f2960ee300]:  %27 = tail call i32 @llvm.ctpop.i32(i32 %26)
	}

[0x55f296096df8]:   %27 = trunc i32 %26 to i8 {
	[0x55f2960d1398]:  %28 = trunc i32 %27 to i8
	}

[0x55f296096e70]:   %28 = and i8 %27, 1 {
	[0x55f2960cec70]:  %29 = and i8 %28, 1
	}

[0x55f296096ef0]:   %29 = xor i8 %28, 1 {
	[0x55f2960ced80]:  %30 = xor i8 %29, 1
	}

[0x55f296096fa0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55f2960ce710]:  %31 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x55f296097030]:   store i8 %29, i8* %30, align 1, !tbaa !1275 {
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	}

[0x55f2960970b0]:   %31 = xor i32 %21, %20 {
	[0x55f2960cc6e0]:  %32 = xor i32 %22, %21
	}

[0x55f296097130]:   %32 = lshr i32 %31, 4 {
	[0x55f2960f0100]:  %33 = lshr i32 %32, 4
	}

[0x55f296097198]:   %65 = load i64, i64* %64, align 8 {
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	}

[0x55f296097210]:   store i64 %65, i64* %RBP, align 8, !tbaa !1257 {
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	}

[0x55f296097290]:   store i64 %63, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	}

[0x55f296097310]:   %66 = add i64 %54, 5 {
	[0x55f2960f23c0]:  %69 = add i64 %57, 5
	}

[0x55f2960973f0]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55f2960d0d90]:  %36 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x55f296097480]:   store i8 %34, i8* %35, align 1, !tbaa !1276 {
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	}

[0x55f296097500]:   %36 = icmp eq i32 %21, 0 {
	[0x55f2960f17e0]:  %37 = icmp eq i32 %22, 0
	}

[0x55f296097568]:   %37 = zext i1 %36 to i8 {
	[0x55f2960cf2d8]:  %38 = zext i1 %37 to i8
	}

[0x55f296097610]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55f2960cf3f0]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x55f2960976a0]:   store i8 %37, i8* %38, align 1, !tbaa !1277 {
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	}

[0x55f296097720]:   %39 = lshr i32 %21, 31 {
	[0x55f2960f3770]:  %40 = lshr i32 %22, 31
	}

[0x55f296097788]:   %40 = trunc i32 %39 to i8 {
	[0x55f2960d2448]:  %41 = trunc i32 %40 to i8
	}

[0x55f296097830]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55f2960d6450]:  %42 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x55f2960978c0]:   store i8 %40, i8* %41, align 1, !tbaa !1278 {
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	}

[0x55f296097940]:   %42 = lshr i32 %20, 31 {
	[0x55f2960d88c0]:  %43 = lshr i32 %21, 31
	}

[0x55f2960979c0]:   %43 = xor i32 %39, %42 {
	[0x55f2960d89f0]:  %44 = xor i32 %40, %43
	}

[0x55f296097a40]:   %44 = add nuw nsw i32 %43, %42 {
	[0x55f29610e740]:  %45 = add nuw nsw i32 %44, %43
	}

[0x55f296097ac0]:   %45 = icmp eq i32 %44, 2 {
	[0x55f29610d690]:  %46 = icmp eq i32 %45, 2
	}

[0x55f296097b28]:   %46 = zext i1 %45 to i8 {
	[0x55f2960d2578]:  %47 = zext i1 %46 to i8
	}

[0x55f296097bd0]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55f2960d6910]:  %48 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x55f296097c60]:   store i8 %46, i8* %47, align 1, !tbaa !1279 {
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	}

[0x55f296097ce0]:   %48 = icmp ne i8 %40, 0 {
	[0x55f29610d190]:  %49 = icmp ne i8 %41, 0
	}

[0x55f296097d60]:   %49 = xor i1 %48, %45 {
	[0x55f296186960]:  %50 = xor i1 %49, %46
	}

[0x55f296097e38]:   %.v = select i1 %49, i64 10, i64 22 {
	[0x55f2960eeff8]:  %.v = select i1 %50, i64 10, i64 22
	}

[0x55f296097eb0]:   %50 = add i64 %17, %.v {
	[0x55f296114a80]:  %51 = add i64 %18, %.v
	}

[0x55f296097f70]:   %51 = add i64 %15, -4 {
	[0x55f2960fe680]:  %52 = add i64 %16, -4
	}

[0x55f296097ff0]:   %52 = add i64 %50, 7 {
	[0x55f29618c070]:  %53 = add i64 %51, 7
	}

[0x55f296098070]:   store i64 %52, i64* %PC, align 8 {
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	}

[0x55f2960980d8]:   %53 = inttoptr i64 %51 to i32* {
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	}

[0x55f296098188]:   %70 = load i64, i64* %PC, align 8 {
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	}

[0x55f296098238]:   %.pre = load i64, i64* %PC, align 8 {
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	}

[0x55f2960982c8]:   br i1 %49, label %block_400481, label %block_40048d {
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}

[0x55f296098340]:   store i32 0, i32* %53, align 4 {
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296098408]:   %54 = phi i64 [ %71, %block_400481 ], [ %.pre, %block_40048d ] {
	[0x55f2960d3738]:  %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]
	}

[0x55f296098478]:   br label %block_400494 {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}

[0x55f2960985a8]:   %55 = load i64, i64* %RBP, align 8 {
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	}

[0x55f296098620]:   %56 = add i64 %55, -4 {
	[0x55f2961a0670]:  %59 = add i64 %58, -4
	}

[0x55f2960986a0]:   %57 = add i64 %54, 3 {
	[0x55f29608d390]:  %60 = add i64 %57, 3
	}

[0x55f296098720]:   store i64 %57, i64* %PC, align 8 {
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	}

[0x55f296098788]:   %58 = inttoptr i64 %56 to i32* {
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	}

[0x55f2960987e8]:   %59 = load i32, i32* %58, align 4 {
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	}

[0x55f296098848]:   %60 = zext i32 %59 to i64 {
	[0x55f2960d53c8]:  %63 = zext i32 %62 to i64
	}

[0x55f2960988c0]:   store i64 %60, i64* %RAX, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	}

[0x55f296098940]:   %61 = add i64 %54, 4 {
	[0x55f2960ef630]:  %64 = add i64 %57, 4
	}

[0x55f2960989c0]:   store i64 %61, i64* %PC, align 8 {
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	}

[0x55f296098a28]:   %62 = load i64, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	}

[0x55f296098aa0]:   %63 = add i64 %62, 8 {
	[0x55f2960efd40]:  %66 = add i64 %65, 8
	}

[0x55f296098b08]:   %64 = inttoptr i64 %62 to i64* {
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	}

[0x55f296098f90]:   store i64 %66, i64* %PC, align 8 {
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	}

[0x55f296098ff8]:   %67 = inttoptr i64 %63 to i64* {
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296099058]:   %68 = load i64, i64* %67, align 8 {
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f2960990d0]:   store i64 %68, i64* %PC, align 8, !tbaa !1257 {
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	}

[0x55f296099150]:   %69 = add i64 %62, 16 {
	[0x55f2960cac60]:  %72 = add i64 %65, 16
	}

[0x55f2960991d0]:   store i64 %69, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	}

[0x55f296099238]:   ret %struct.Memory* %2 {
	[0x55f2960d5c18]:  ret %struct.Memory.31* %2
	}

[0x55f2960992b0]:   store i32 1, i32* %53, align 4 {
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296099330]:   %71 = add i64 %70, 12 {
	[0x55f296195f30]:  %56 = add i64 %55, 12
	}

[0x55f2960993b0]:   store i64 %71, i64* %PC, align 8, !tbaa !1257 {
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	}

[0x55f296099418]:   br label %block_400494 {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55f2960957a0]: block_400470 {
	[0x55f2960cd010]:entry
	}

[0x55f296098120]: block_400481 {
	[0x55f2960eb5a0]:block_400481
	}

[0x55f2960981d0]: block_40048d {
	[0x55f2960c9b50]:block_.L_40048d
	}

[0x55f2960983b0]: block_400494 {
	[0x55f2960ee900]:block_.L_400494
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0


[Info] After Dual Simulation: Round: 1
[0x55f2960956e0]: %struct.State* %0 {
	[0x55f2960f32e0]:%struct.State.0* %0
	}

[0x55f296095720]: i64 %1 {
	[0x55f2960f3690]:i64 %1
	}

[0x55f296095760]: %struct.Memory* %2 {
	[0x55f2960f3590]:%struct.Memory.31* %2
	}

[0x55f2960958e8]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x55f2960ca7e8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	}

[0x55f2960959c0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55f296073710]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55f296095a98]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55f296035a58]:  %11 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55f296095b80]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55f296075e00]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55f296095c70]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55f296074420]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55f296095d08]:   %4 = load i64, i64* %RBP, align 8 {
	[0x55f29603ad88]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55f296095dd0]:   %5 = add i64 %1, 1 {
	[0x55f2960cb240]:  %5 = add i64 %1, 1
	}

[0x55f296095e50]:   store i64 %5, i64* %PC, align 8 {
	[0x55f2960cb350]:  store i64 %5, i64* %3, align 8
	}

[0x55f296095f30]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55f2960756e0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55f296095fa8]:   %7 = load i64, i64* %6, align 8, !tbaa !1257 {
	[0x55f29603d5d8]:  %7 = load i64, i64* %6, align 8
	}

[0x55f296096020]:   %8 = add i64 %7, -8 {
	[0x55f2960cc310]:  %8 = add i64 %7, -8
	}

[0x55f296096088]:   %17 = load i64, i64* %PC, align 8 {
	[0x55f2960cfd08]:  %18 = load i64, i64* %3, align 8
	}

[0x55f296096118]:   %9 = inttoptr i64 %8 to i64* {
	[0x55f2960c8518]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55f296096190]:   store i64 %4, i64* %9, align 8 {
	[0x55f2960ca8a0]:  store i64 %4, i64* %9, align 8
	}

[0x55f296096210]:   store i64 %8, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960cd0d0]:  store i64 %8, i64* %6, align 8
	}

[0x55f296096278]:   %10 = load i64, i64* %PC, align 8 {
	[0x55f2960c85a8]:  %10 = load i64, i64* %3, align 8
	}

[0x55f2960962f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x55f2960cd4d0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55f296096370]:   %11 = add i64 %7, -16 {
	[0x55f2960cd5e0]:  %12 = add i64 %7, -16
	}

[0x55f2960963d8]:   %12 = load i32, i32* %EDI, align 4 {
	[0x55f2960c9f48]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55f296096450]:   %13 = add i64 %10, 6 {
	[0x55f2960cd6f0]:  %14 = add i64 %10, 6
	}

[0x55f2960964d0]:   store i64 %13, i64* %PC, align 8 {
	[0x55f2960cd800]:  store i64 %14, i64* %3, align 8
	}

[0x55f296096538]:   %14 = inttoptr i64 %11 to i32* {
	[0x55f2960cf5e8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55f2960965b0]:   store i32 %12, i32* %14, align 4 {
	[0x55f2960eca70]:  store i32 %13, i32* %15, align 4
	}

[0x55f296096618]:   %15 = load i64, i64* %RBP, align 8 {
	[0x55f2960cf848]:  %16 = load i64, i64* %RBP.i, align 8
	}

[0x55f296096690]:   %16 = add i64 %15, -8 {
	[0x55f2960cda60]:  %17 = add i64 %16, -8
	}

[0x55f2960966f8]:   %33 = trunc i32 %32 to i8 {
	[0x55f2960d14c8]:  %34 = trunc i32 %33 to i8
	}

[0x55f296096770]:   %34 = and i8 %33, 1 {
	[0x55f2960f13a0]:  %35 = and i8 %34, 1
	}

[0x55f296096820]:   %18 = add i64 %17, 4 {
	[0x55f2960cdb30]:  %19 = add i64 %18, 4
	}

[0x55f2960968a0]:   store i64 %18, i64* %PC, align 8 {
	[0x55f2960cdc40]:  store i64 %19, i64* %3, align 8
	}

[0x55f296096908]:   %19 = inttoptr i64 %16 to i32* {
	[0x55f2960d0558]:  %20 = inttoptr i64 %17 to i32*
	}

[0x55f296096968]:   %20 = load i32, i32* %19, align 4 {
	[0x55f2960d0688]:  %21 = load i32, i32* %20, align 4
	}

[0x55f296096a20]:   %21 = add i32 %20, -1 {
	[0x55f2960ed2f0]:  %22 = add i32 %21, -1
	}

[0x55f296096aa0]:   %22 = icmp eq i32 %20, 0 {
	[0x55f2960ce0c0]:  %23 = icmp eq i32 %21, 0
	}

[0x55f296096b08]:   %23 = zext i1 %22 to i8 {
	[0x55f2960d07b8]:  %24 = zext i1 %23 to i8
	}

[0x55f296096bb0]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55f2960caea0]:  %25 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x55f296096c40]:   store i8 %23, i8* %24, align 1, !tbaa !1261 {
	[0x55f2960ce190]:  store i8 %24, i8* %25, align 1
	}

[0x55f296096cc0]:   %25 = and i32 %21, 255 {
	[0x55f2960ccdd0]:  %26 = and i32 %22, 255
	}

[0x55f296096d80]:   %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #9 {
	[0x55f2960ee300]:  %27 = tail call i32 @llvm.ctpop.i32(i32 %26)
	}

[0x55f296096df8]:   %27 = trunc i32 %26 to i8 {
	[0x55f2960d1398]:  %28 = trunc i32 %27 to i8
	}

[0x55f296096e70]:   %28 = and i8 %27, 1 {
	[0x55f2960cec70]:  %29 = and i8 %28, 1
	}

[0x55f296096ef0]:   %29 = xor i8 %28, 1 {
	[0x55f2960ced80]:  %30 = xor i8 %29, 1
	}

[0x55f296096fa0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55f2960ce710]:  %31 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x55f296097030]:   store i8 %29, i8* %30, align 1, !tbaa !1275 {
	[0x55f2960ef700]:  store i8 %30, i8* %31, align 1
	}

[0x55f2960970b0]:   %31 = xor i32 %21, %20 {
	[0x55f2960cc6e0]:  %32 = xor i32 %22, %21
	}

[0x55f296097130]:   %32 = lshr i32 %31, 4 {
	[0x55f2960f0100]:  %33 = lshr i32 %32, 4
	}

[0x55f296097198]:   %65 = load i64, i64* %64, align 8 {
	[0x55f2960d5758]:  %68 = load i64, i64* %67, align 8
	}

[0x55f296097210]:   store i64 %65, i64* %RBP, align 8, !tbaa !1257 {
	[0x55f2960f0680]:  store i64 %68, i64* %RBP.i, align 8
	}

[0x55f296097290]:   store i64 %63, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960f22f0]:  store i64 %66, i64* %6, align 8
	}

[0x55f296097310]:   %66 = add i64 %54, 5 {
	[0x55f2960f23c0]:  %69 = add i64 %57, 5
	}

[0x55f2960973f0]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55f2960d0d90]:  %36 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x55f296097480]:   store i8 %34, i8* %35, align 1, !tbaa !1276 {
	[0x55f2960f16d0]:  store i8 %35, i8* %36, align 1
	}

[0x55f296097500]:   %36 = icmp eq i32 %21, 0 {
	[0x55f2960f17e0]:  %37 = icmp eq i32 %22, 0
	}

[0x55f296097568]:   %37 = zext i1 %36 to i8 {
	[0x55f2960cf2d8]:  %38 = zext i1 %37 to i8
	}

[0x55f296097610]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55f2960cf3f0]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x55f2960976a0]:   store i8 %37, i8* %38, align 1, !tbaa !1277 {
	[0x55f2960f1c60]:  store i8 %38, i8* %39, align 1
	}

[0x55f296097720]:   %39 = lshr i32 %21, 31 {
	[0x55f2960f3770]:  %40 = lshr i32 %22, 31
	}

[0x55f296097788]:   %40 = trunc i32 %39 to i8 {
	[0x55f2960d2448]:  %41 = trunc i32 %40 to i8
	}

[0x55f296097830]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55f2960d6450]:  %42 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x55f2960978c0]:   store i8 %40, i8* %41, align 1, !tbaa !1278 {
	[0x55f2960d8790]:  store i8 %41, i8* %42, align 1
	}

[0x55f296097940]:   %42 = lshr i32 %20, 31 {
	[0x55f2960d88c0]:  %43 = lshr i32 %21, 31
	}

[0x55f2960979c0]:   %43 = xor i32 %39, %42 {
	[0x55f2960d89f0]:  %44 = xor i32 %40, %43
	}

[0x55f296097a40]:   %44 = add nuw nsw i32 %43, %42 {
	[0x55f29610e740]:  %45 = add nuw nsw i32 %44, %43
	}

[0x55f296097ac0]:   %45 = icmp eq i32 %44, 2 {
	[0x55f29610d690]:  %46 = icmp eq i32 %45, 2
	}

[0x55f296097b28]:   %46 = zext i1 %45 to i8 {
	[0x55f2960d2578]:  %47 = zext i1 %46 to i8
	}

[0x55f296097bd0]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55f2960d6910]:  %48 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x55f296097c60]:   store i8 %46, i8* %47, align 1, !tbaa !1279 {
	[0x55f29610d870]:  store i8 %47, i8* %48, align 1
	}

[0x55f296097ce0]:   %48 = icmp ne i8 %40, 0 {
	[0x55f29610d190]:  %49 = icmp ne i8 %41, 0
	}

[0x55f296097d60]:   %49 = xor i1 %48, %45 {
	[0x55f296186960]:  %50 = xor i1 %49, %46
	}

[0x55f296097e38]:   %.v = select i1 %49, i64 10, i64 22 {
	[0x55f2960eeff8]:  %.v = select i1 %50, i64 10, i64 22
	}

[0x55f296097eb0]:   %50 = add i64 %17, %.v {
	[0x55f296114a80]:  %51 = add i64 %18, %.v
	}

[0x55f296097f70]:   %51 = add i64 %15, -4 {
	[0x55f2960fe680]:  %52 = add i64 %16, -4
	}

[0x55f296097ff0]:   %52 = add i64 %50, 7 {
	[0x55f29618c070]:  %53 = add i64 %51, 7
	}

[0x55f296098070]:   store i64 %52, i64* %PC, align 8 {
	[0x55f296190080]:  store i64 %53, i64* %3, align 8
	}

[0x55f2960980d8]:   %53 = inttoptr i64 %51 to i32* {
	[0x55f2960d2ef8]:  %54 = inttoptr i64 %52 to i32*
	}

[0x55f296098188]:   %70 = load i64, i64* %PC, align 8 {
	[0x55f2960d3028]:  %55 = load i64, i64* %3, align 8
	}

[0x55f296098238]:   %.pre = load i64, i64* %PC, align 8 {
	[0x55f2960d34e8]:  %.pre = load i64, i64* %3, align 8
	}

[0x55f2960982c8]:   br i1 %49, label %block_400481, label %block_40048d {
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}

[0x55f296098340]:   store i32 0, i32* %53, align 4 {
	[0x55f296106c00]:  store i32 0, i32* %54, align 4
	}

[0x55f296098408]:   %54 = phi i64 [ %71, %block_400481 ], [ %.pre, %block_40048d ] {
	[0x55f2960d3738]:  %57 = phi i64 [ %.pre, %block_.L_40048d ], [ %56, %block_400481 ]
	}

[0x55f296098478]:   br label %block_400494 {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}

[0x55f2960985a8]:   %55 = load i64, i64* %RBP, align 8 {
	[0x55f2960d3e68]:  %58 = load i64, i64* %RBP.i, align 8
	}

[0x55f296098620]:   %56 = add i64 %55, -4 {
	[0x55f2961a0670]:  %59 = add i64 %58, -4
	}

[0x55f2960986a0]:   %57 = add i64 %54, 3 {
	[0x55f29608d390]:  %60 = add i64 %57, 3
	}

[0x55f296098720]:   store i64 %57, i64* %PC, align 8 {
	[0x55f29608cf30]:  store i64 %60, i64* %3, align 8
	}

[0x55f296098788]:   %58 = inttoptr i64 %56 to i32* {
	[0x55f2960d4dd8]:  %61 = inttoptr i64 %59 to i32*
	}

[0x55f2960987e8]:   %59 = load i32, i32* %58, align 4 {
	[0x55f2960d5298]:  %62 = load i32, i32* %61, align 4
	}

[0x55f296098848]:   %60 = zext i32 %59 to i64 {
	[0x55f2960d53c8]:  %63 = zext i32 %62 to i64
	}

[0x55f2960988c0]:   store i64 %60, i64* %RAX, align 8, !tbaa !1257 {
	[0x55f296035050]:  store i64 %63, i64* %RAX.i, align 8
	}

[0x55f296098940]:   %61 = add i64 %54, 4 {
	[0x55f2960ef630]:  %64 = add i64 %57, 4
	}

[0x55f2960989c0]:   store i64 %61, i64* %PC, align 8 {
	[0x55f2960ef810]:  store i64 %64, i64* %3, align 8
	}

[0x55f296098a28]:   %62 = load i64, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960d54f8]:  %65 = load i64, i64* %6, align 8
	}

[0x55f296098aa0]:   %63 = add i64 %62, 8 {
	[0x55f2960efd40]:  %66 = add i64 %65, 8
	}

[0x55f296098b08]:   %64 = inttoptr i64 %62 to i64* {
	[0x55f2960d5628]:  %67 = inttoptr i64 %65 to i64*
	}

[0x55f296098f90]:   store i64 %66, i64* %PC, align 8 {
	[0x55f2960f2580]:  store i64 %69, i64* %3, align 8
	}

[0x55f296098ff8]:   %67 = inttoptr i64 %63 to i64* {
	[0x55f2960d5888]:  %70 = inttoptr i64 %66 to i64*
	}

[0x55f296099058]:   %68 = load i64, i64* %67, align 8 {
	[0x55f2960d59b8]:  %71 = load i64, i64* %70, align 8
	}

[0x55f2960990d0]:   store i64 %68, i64* %PC, align 8, !tbaa !1257 {
	[0x55f2960f3440]:  store i64 %71, i64* %3, align 8
	}

[0x55f296099150]:   %69 = add i64 %62, 16 {
	[0x55f2960cac60]:  %72 = add i64 %65, 16
	}

[0x55f2960991d0]:   store i64 %69, i64* %6, align 8, !tbaa !1257 {
	[0x55f2960cc7d0]:  store i64 %72, i64* %6, align 8
	}

[0x55f296099238]:   ret %struct.Memory* %2 {
	[0x55f2960d5c18]:  ret %struct.Memory.31* %2
	}

[0x55f2960992b0]:   store i32 1, i32* %53, align 4 {
	[0x55f296191b20]:  store i32 1, i32* %54, align 4
	}

[0x55f296099330]:   %71 = add i64 %70, 12 {
	[0x55f296195f30]:  %56 = add i64 %55, 12
	}

[0x55f2960993b0]:   store i64 %71, i64* %PC, align 8, !tbaa !1257 {
	[0x55f296104ac0]:  store i64 %56, i64* %3, align 8
	}

[0x55f296099418]:   br label %block_400494 {
	[0x55f2960d3878]:  br label %block_.L_400494
	[0x55f2960d3d38]:  br label %block_.L_400494
	[0x55f2960eed88]:  br i1 %50, label %block_400481, label %block_.L_40048d
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55f2960957a0]: block_400470 {
	[0x55f2960cd010]:entry
	}

[0x55f296098120]: block_400481 {
	[0x55f2960eb5a0]:block_400481
	}

[0x55f2960981d0]: block_40048d {
	[0x55f2960c9b50]:block_.L_40048d
	}

[0x55f2960983b0]: block_400494 {
	[0x55f2960ee900]:block_.L_400494
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [get_sign] from mcsema/test.opt.ll
Extracting function [get_sign] from mcsema/test.proposed.opt.ll
Exiting Simple Matcher ...
