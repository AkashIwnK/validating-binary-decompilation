Matching sub_400490_get_sign Vs get_sign


[Info] Retrieve Potential Matches...
[0x5586f846c0d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5586f84e4e70]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5586f84a6b10]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5586f84e4ce0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5586f84ccf50]: %struct.State* %0 {
	[0x5586f851f7a0]:%struct.State.1* %0
	}

[0x5586f84ccf90]: i64 %1 {
	[0x5586f8481f60]:i64 %1
	}

[0x5586f84ccfd0]: %struct.Memory* %2 {
	[0x5586f84833e0]:%struct.Memory.32* %2
	}

[0x5586f84cd200]:   %5 = add i64 %1, 1 {
	[0x5586f852d9f0]:  %5 = add i64 %1, 1
	}

[0x5586f84cd280]:   store i64 %5, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f84cd2e8]:   %7 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f84f0538]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x5586f84e5a48]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x5586f84f0608]:   %4 = load i64, i64* %RBP, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f85124e0]:   %51 = add i64 %15, -4 {
	[0x5586f8484340]:  %52 = add i64 %16, -4
	[0x5586f8485730]:  %59 = add i64 %58, -4
	}

[0x5586f8512560]:   %52 = add i64 %50, 7 {
	[0x5586f84f5a60]:  %53 = add i64 %51, 7
	}

[0x5586f85125e0]:   store i64 %52, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f8512648]:   %53 = inttoptr i64 %51 to i32* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f85126f8]:   %70 = load i64, i64* %PC, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f85127d8]:   %.pre = load i64, i64* %PC, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f8512868]:   br i1 %49, label %block_4004a1, label %block_4004ad {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f85128e0]:   store i32 0, i32* %53, align 4 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f85129d8]:   %54 = phi i64 [ %71, %block_4004a1 ], [ %.pre, %block_4004ad ] {
	[0x5586f84f2d28]:  %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]
	}

[0x5586f8512a48]:   br label %block_4004b4 {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f8519a10]:   %8 = add i64 %7, -8 {
	[0x5586f8480340]:  %8 = add i64 %7, -8
	[0x5586f84f4c90]:  %17 = add i64 %16, -8
	}

[0x5586f8519b08]:   %9 = inttoptr i64 %8 to i64* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f8519b80]:   store i64 %4, i64* %9, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f8519c00]:   store i64 %8, i64* %6, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851a278]:   %10 = load i64, i64* %PC, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a2f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851a3b0]:   %11 = add i64 %7, -16 {
	[0x5586f84f3510]:  %12 = add i64 %7, -16
	}

[0x5586f851a418]:   %12 = load i32, i32* %EDI, align 4 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a490]:   %13 = add i64 %10, 6 {
	[0x5586f84f1930]:  %14 = add i64 %10, 6
	}

[0x5586f851a510]:   store i64 %13, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851a578]:   %14 = inttoptr i64 %11 to i32* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851a5f0]:   store i32 %12, i32* %14, align 4 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851a658]:   %15 = load i64, i64* %RBP, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a6d0]:   %16 = add i64 %15, -8 {
	[0x5586f8480340]:  %8 = add i64 %7, -8
	[0x5586f84f4c90]:  %17 = add i64 %16, -8
	}

[0x5586f851a738]:   %17 = load i64, i64* %PC, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a7b0]:   %18 = add i64 %17, 4 {
	[0x5586f84850f0]:  %64 = add i64 %57, 4
	[0x5586f84f4b80]:  %19 = add i64 %18, 4
	}

[0x5586f851a830]:   store i64 %18, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851a898]:   %19 = inttoptr i64 %16 to i32* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851a8f8]:   %20 = load i32, i32* %19, align 4 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a9b0]:   %21 = add i32 %20, -1 {
	[0x5586f8481eb0]:  %22 = add i32 %21, -1
	}

[0x5586f851aa30]:   %22 = icmp eq i32 %20, 0 {
	[0x5586f84839c0]:  %46 = icmp eq i32 %45, 2
	[0x5586f84f4850]:  %23 = icmp eq i32 %21, 0
	[0x5586f84f52f0]:  %37 = icmp eq i32 %22, 0
	[0x5586f84f5880]:  %49 = icmp ne i8 %41, 0
	}

[0x5586f851aa98]:   %23 = zext i1 %22 to i8 {
	[0x5586f84dbc18]:  %24 = zext i1 %23 to i8
	[0x5586f84f5b98]:  %47 = zext i1 %46 to i8
	[0x5586f84f6058]:  %38 = zext i1 %37 to i8
	[0x5586f84f6d28]:  %63 = zext i32 %62 to i64
	}

[0x5586f851ab10]:   store i8 %23, i8* %24, align 1, !tbaa !1265 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851ac70]:   %25 = and i32 %21, 255 {
	[0x5586f8482290]:  %26 = and i32 %22, 255
	}

[0x5586f851ad30]:   %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #9 {
	[0x5586f85bee40]:  %27 = tail call i32 @llvm.ctpop.i32(i32 %26)
	}

[0x5586f851ada8]:   %27 = trunc i32 %26 to i8 {
	[0x5586f84f2928]:  %34 = trunc i32 %33 to i8
	[0x5586f84f5cc8]:  %41 = trunc i32 %40 to i8
	[0x5586f85105e8]:  %28 = trunc i32 %27 to i8
	}

[0x5586f851ae60]:   %28 = and i8 %27, 1 {
	[0x5586f8483490]:  %29 = and i8 %28, 1
	[0x5586f84f4eb0]:  %35 = and i8 %34, 1
	}

[0x5586f851aee0]:   %29 = xor i8 %28, 1 {
	[0x5586f8483330]:  %30 = xor i8 %29, 1
	}

[0x5586f851af60]:   store i8 %29, i8* %30, align 1, !tbaa !1279 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851b0f0]:   %31 = xor i32 %21, %20 {
	[0x5586f8483240]:  %32 = xor i32 %22, %21
	[0x5586f8484640]:  %50 = xor i1 %49, %46
	[0x5586f84f5510]:  %44 = xor i32 %40, %43
	}

[0x5586f851b170]:   %32 = lshr i32 %31, 4 {
	[0x5586f84f3a60]:  %33 = lshr i32 %32, 4
	}

[0x5586f851b1d8]:   %33 = trunc i32 %32 to i8 {
	[0x5586f84f2928]:  %34 = trunc i32 %33 to i8
	[0x5586f84f5cc8]:  %41 = trunc i32 %40 to i8
	[0x5586f85105e8]:  %28 = trunc i32 %27 to i8
	}

[0x5586f851b250]:   %34 = and i8 %33, 1 {
	[0x5586f8483490]:  %29 = and i8 %28, 1
	[0x5586f84f4eb0]:  %35 = and i8 %34, 1
	}

[0x5586f851b300]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5586f84fd9d0]:  %36 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5586f851b390]:   store i8 %34, i8* %35, align 1, !tbaa !1280 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851b540]:   %36 = icmp eq i32 %21, 0 {
	[0x5586f84839c0]:  %46 = icmp eq i32 %45, 2
	[0x5586f84f4850]:  %23 = icmp eq i32 %21, 0
	[0x5586f84f52f0]:  %37 = icmp eq i32 %22, 0
	[0x5586f84f5880]:  %49 = icmp ne i8 %41, 0
	}

[0x5586f851b5a8]:   %37 = zext i1 %36 to i8 {
	[0x5586f84dbc18]:  %24 = zext i1 %23 to i8
	[0x5586f84f5b98]:  %47 = zext i1 %46 to i8
	[0x5586f84f6058]:  %38 = zext i1 %37 to i8
	[0x5586f84f6d28]:  %63 = zext i32 %62 to i64
	}

[0x5586f851b650]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5586f848d280]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5586f851b6e0]:   store i8 %37, i8* %38, align 1, !tbaa !1281 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851b890]:   %39 = lshr i32 %21, 31 {
	[0x5586f84f5620]:  %43 = lshr i32 %21, 31
	[0x5586f84f5730]:  %40 = lshr i32 %22, 31
	}

[0x5586f851b8f8]:   %40 = trunc i32 %39 to i8 {
	[0x5586f84f2928]:  %34 = trunc i32 %33 to i8
	[0x5586f84f5cc8]:  %41 = trunc i32 %40 to i8
	[0x5586f85105e8]:  %28 = trunc i32 %27 to i8
	}

[0x5586f851b9a0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5586f8488320]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5586f851ba30]:   store i8 %40, i8* %41, align 1, !tbaa !1282 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851bbe0]:   %42 = lshr i32 %20, 31 {
	[0x5586f84f5620]:  %43 = lshr i32 %21, 31
	[0x5586f84f5730]:  %40 = lshr i32 %22, 31
	}

[0x5586f851bc60]:   %43 = xor i32 %39, %42 {
	[0x5586f8483240]:  %32 = xor i32 %22, %21
	[0x5586f8484640]:  %50 = xor i1 %49, %46
	[0x5586f84f5510]:  %44 = xor i32 %40, %43
	}

[0x5586f851bce0]:   %44 = add nuw nsw i32 %43, %42 {
	[0x5586f8483b20]:  %45 = add nuw nsw i32 %44, %43
	[0x5586f84844a0]:  %51 = add i64 %18, %.v
	}

[0x5586f851bd60]:   %45 = icmp eq i32 %44, 2 {
	[0x5586f84839c0]:  %46 = icmp eq i32 %45, 2
	[0x5586f84f4850]:  %23 = icmp eq i32 %21, 0
	[0x5586f84f52f0]:  %37 = icmp eq i32 %22, 0
	[0x5586f84f5880]:  %49 = icmp ne i8 %41, 0
	}

[0x5586f851bdc8]:   %46 = zext i1 %45 to i8 {
	[0x5586f84dbc18]:  %24 = zext i1 %23 to i8
	[0x5586f84f5b98]:  %47 = zext i1 %46 to i8
	[0x5586f84f6058]:  %38 = zext i1 %37 to i8
	[0x5586f84f6d28]:  %63 = zext i32 %62 to i64
	}

[0x5586f851be70]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5586f8484d20]:  %48 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5586f851bf00]:   store i8 %46, i8* %47, align 1, !tbaa !1283 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851c0b0]:   %48 = icmp ne i8 %40, 0 {
	[0x5586f84839c0]:  %46 = icmp eq i32 %45, 2
	[0x5586f84f4850]:  %23 = icmp eq i32 %21, 0
	[0x5586f84f52f0]:  %37 = icmp eq i32 %22, 0
	[0x5586f84f5880]:  %49 = icmp ne i8 %41, 0
	}

[0x5586f851c130]:   %49 = xor i1 %48, %45 {
	[0x5586f8483240]:  %32 = xor i32 %22, %21
	[0x5586f8484640]:  %50 = xor i1 %49, %46
	[0x5586f84f5510]:  %44 = xor i32 %40, %43
	}

[0x5586f851c208]:   %.v = select i1 %49, i64 10, i64 22 {
	[0x5586f84cc578]:  %.v = select i1 %50, i64 10, i64 22
	}

[0x5586f851c2a0]:   %50 = add i64 %17, %.v {
	[0x5586f8483b20]:  %45 = add nuw nsw i32 %44, %43
	[0x5586f84844a0]:  %51 = add i64 %18, %.v
	}

[0x5586f851cfe8]:   %55 = load i64, i64* %RBP, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851d060]:   %56 = add i64 %55, -4 {
	[0x5586f8484340]:  %52 = add i64 %16, -4
	[0x5586f8485730]:  %59 = add i64 %58, -4
	}

[0x5586f851d0e0]:   %57 = add i64 %54, 3 {
	[0x5586f8485500]:  %60 = add i64 %57, 3
	}

[0x5586f851d160]:   store i64 %57, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d1c8]:   %58 = inttoptr i64 %56 to i32* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851d228]:   %59 = load i32, i32* %58, align 4 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851d288]:   %60 = zext i32 %59 to i64 {
	[0x5586f84dbc18]:  %24 = zext i1 %23 to i8
	[0x5586f84f5b98]:  %47 = zext i1 %46 to i8
	[0x5586f84f6058]:  %38 = zext i1 %37 to i8
	[0x5586f84f6d28]:  %63 = zext i32 %62 to i64
	}

[0x5586f851d300]:   store i64 %60, i64* %RAX, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d380]:   %61 = add i64 %54, 4 {
	[0x5586f84850f0]:  %64 = add i64 %57, 4
	[0x5586f84f4b80]:  %19 = add i64 %18, 4
	}

[0x5586f851d400]:   store i64 %61, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d468]:   %62 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851d4e0]:   %63 = add i64 %62, 8 {
	[0x5586f8487ee0]:  %66 = add i64 %65, 8
	}

[0x5586f851d548]:   %64 = inttoptr i64 %62 to i64* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851d5a8]:   %65 = load i64, i64* %64, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851d620]:   store i64 %65, i64* %RBP, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d6a0]:   store i64 %63, i64* %6, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d720]:   %66 = add i64 %54, 5 {
	[0x5586f84862f0]:  %69 = add i64 %57, 5
	}

[0x5586f851d7a0]:   store i64 %66, i64* %PC, align 8 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d808]:   %67 = inttoptr i64 %63 to i64* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851d868]:   %68 = load i64, i64* %67, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851d8e0]:   store i64 %68, i64* %PC, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851d9a0]:   %69 = add i64 %62, 16 {
	[0x5586f8485eb0]:  %72 = add i64 %65, 16
	}

[0x5586f851da20]:   store i64 %69, i64* %6, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851da88]:   ret %struct.Memory* %2 {
	[0x5586f8482fb8]:  ret %struct.Memory.32* %2
	}

[0x5586f851db00]:   store i32 1, i32* %53, align 4 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851db80]:   %71 = add i64 %70, 12 {
	[0x5586f8484fa0]:  %56 = add i64 %55, 12
	}

[0x5586f851dc00]:   store i64 %71, i64* %PC, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851dc68]:   br label %block_4004b4 {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f852fed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x5586f853d2c8]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x5586f8547f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5586f8478400]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5586f8548140]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5586f84e4b10]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5586f854d080]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5586f8509260]:  %31 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5586f854d190]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5586f85c9e70]:  %25 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5586f84f1838]:   %16 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5586f84f0608]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x5586f8519b80]:   store i64 %4, i64* %9, align 8


Uprime Matches: [0x5586f847fac0]:   store i64 %8, i64* %RBP.i, align 8
[0x5586f847ffb0]:   store i64 %8, i64* %6, align 8
[0x5586f8480100]:   store i64 %4, i64* %9, align 8
[0x5586f8481810]:   store i64 %5, i64* %3, align 8
[0x5586f8481960]:   store i8 %24, i8* %25, align 1
[0x5586f8482010]:   store i64 %19, i64* %3, align 8
[0x5586f8483c80]:   store i8 %41, i8* %42, align 1
[0x5586f8483dd0]:   store i8 %38, i8* %39, align 1
[0x5586f8483f30]:   store i8 %47, i8* %48, align 1
[0x5586f8484080]:   store i64 %53, i64* %3, align 8
[0x5586f8485250]:   store i64 %63, i64* %RAX.i, align 8
[0x5586f84853a0]:   store i64 %60, i64* %3, align 8
[0x5586f8485930]:   store i32 0, i32* %54, align 4
[0x5586f8485da0]:   store i64 %64, i64* %3, align 8
[0x5586f8485fc0]:   store i64 %71, i64* %3, align 8
[0x5586f8486220]:   store i64 %72, i64* %6, align 8
[0x5586f8486440]:   store i64 %68, i64* %RBP.i, align 8
[0x5586f8486810]:   store i64 %56, i64* %3, align 8
[0x5586f8487910]:   store i64 %69, i64* %3, align 8
[0x5586f8487b60]:   store i64 %66, i64* %6, align 8
[0x5586f84f3710]:   store i32 %13, i32* %15, align 4
[0x5586f84f3910]:   store i8 %35, i8* %36, align 1
[0x5586f84f4740]:   store i64 %14, i64* %3, align 8
[0x5586f84f50d0]:   store i8 %30, i8* %31, align 1
[0x5586f84f5950]:   store i32 1, i32* %54, align 4


Adj: [0x5586f8484340]:   %52 = add i64 %16, -4
[0x5586f84f4c90]:   %17 = add i64 %16, -8


Removing: [0x5586f84f7448]:   %58 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5586f84f0608]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x5586f8519b80]:   store i64 %4, i64* %9, align 8


Uprime Matches: [0x5586f847fac0]:   store i64 %8, i64* %RBP.i, align 8
[0x5586f847ffb0]:   store i64 %8, i64* %6, align 8
[0x5586f8480100]:   store i64 %4, i64* %9, align 8
[0x5586f8481810]:   store i64 %5, i64* %3, align 8
[0x5586f8481960]:   store i8 %24, i8* %25, align 1
[0x5586f8482010]:   store i64 %19, i64* %3, align 8
[0x5586f8483c80]:   store i8 %41, i8* %42, align 1
[0x5586f8483dd0]:   store i8 %38, i8* %39, align 1
[0x5586f8483f30]:   store i8 %47, i8* %48, align 1
[0x5586f8484080]:   store i64 %53, i64* %3, align 8
[0x5586f8485250]:   store i64 %63, i64* %RAX.i, align 8
[0x5586f84853a0]:   store i64 %60, i64* %3, align 8
[0x5586f8485930]:   store i32 0, i32* %54, align 4
[0x5586f8485da0]:   store i64 %64, i64* %3, align 8
[0x5586f8485fc0]:   store i64 %71, i64* %3, align 8
[0x5586f8486220]:   store i64 %72, i64* %6, align 8
[0x5586f8486440]:   store i64 %68, i64* %RBP.i, align 8
[0x5586f8486810]:   store i64 %56, i64* %3, align 8
[0x5586f8487910]:   store i64 %69, i64* %3, align 8
[0x5586f8487b60]:   store i64 %66, i64* %6, align 8
[0x5586f84f3710]:   store i32 %13, i32* %15, align 4
[0x5586f84f3910]:   store i8 %35, i8* %36, align 1
[0x5586f84f4740]:   store i64 %14, i64* %3, align 8
[0x5586f84f50d0]:   store i8 %30, i8* %31, align 1
[0x5586f84f5950]:   store i32 1, i32* %54, align 4


Adj: [0x5586f8485730]:   %59 = add i64 %58, -4


Removing: [0x5586f84f6998]:   %65 = load i64, i64* %6, align 8
From the pot matches of: [0x5586f84cd2e8]:   %7 = load i64, i64* %6, align 8, !tbaa !1261


Uprime : [0x5586f851a3b0]:   %11 = add i64 %7, -16


Uprime Matches: [0x5586f84f3510]:   %12 = add i64 %7, -16


Adj: [0x5586f8485eb0]:   %72 = add i64 %65, 16
[0x5586f8487ee0]:   %66 = add i64 %65, 8
[0x5586f852de48]:   %67 = inttoptr i64 %65 to i64*


Removing: [0x5586f84f8158]:   %.pre = load i64, i64* %3, align 8
From the pot matches of: [0x5586f851a278]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5586f851a490]:   %13 = add i64 %10, 6


Uprime Matches: [0x5586f84f1930]:   %14 = add i64 %10, 6


Adj: [0x5586f84f2d28]:   %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]


Removing: [0x5586f85088d8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f851a278]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5586f851a490]:   %13 = add i64 %10, 6


Uprime Matches: [0x5586f84f1930]:   %14 = add i64 %10, 6


Adj: [0x5586f8484fa0]:   %56 = add i64 %55, 12


Removing: [0x5586f852e518]:   %18 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f851a278]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5586f851a490]:   %13 = add i64 %10, 6


Uprime Matches: [0x5586f84f1930]:   %14 = add i64 %10, 6


Adj: [0x5586f84844a0]:   %51 = add i64 %18, %.v
[0x5586f84f4b80]:   %19 = add i64 %18, 4


Removing: [0x5586f84a7f78]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5586f851a658]:   %15 = load i64, i64* %RBP, align 8


Uprime : [0x5586f85124e0]:   %51 = add i64 %15, -4


Uprime Matches: [0x5586f8484340]:   %52 = add i64 %16, -4
[0x5586f8485730]:   %59 = add i64 %58, -4


Adj: [0x5586f8480100]:   store i64 %4, i64* %9, align 8


Removing: [0x5586f84f7448]:   %58 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5586f851a658]:   %15 = load i64, i64* %RBP, align 8


Uprime : [0x5586f851a6d0]:   %16 = add i64 %15, -8


Uprime Matches: [0x5586f8480340]:   %8 = add i64 %7, -8
[0x5586f84f4c90]:   %17 = add i64 %16, -8


Adj: [0x5586f8485730]:   %59 = add i64 %58, -4


Removing: [0x5586f84e5858]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f851a738]:   %17 = load i64, i64* %PC, align 8


Uprime : [0x5586f851c2a0]:   %50 = add i64 %17, %.v


Uprime Matches: [0x5586f8483b20]:   %45 = add nuw nsw i32 %44, %43
[0x5586f84844a0]:   %51 = add i64 %18, %.v


Adj: [0x5586f84f1930]:   %14 = add i64 %10, 6


Removing: [0x5586f84f8158]:   %.pre = load i64, i64* %3, align 8
From the pot matches of: [0x5586f851a738]:   %17 = load i64, i64* %PC, align 8


Uprime : [0x5586f851c2a0]:   %50 = add i64 %17, %.v


Uprime Matches: [0x5586f8483b20]:   %45 = add nuw nsw i32 %44, %43
[0x5586f84844a0]:   %51 = add i64 %18, %.v


Adj: [0x5586f84f2d28]:   %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]


Removing: [0x5586f85088d8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f851a738]:   %17 = load i64, i64* %PC, align 8


Uprime : [0x5586f851c2a0]:   %50 = add i64 %17, %.v


Uprime Matches: [0x5586f8483b20]:   %45 = add nuw nsw i32 %44, %43
[0x5586f84844a0]:   %51 = add i64 %18, %.v


Adj: [0x5586f8484fa0]:   %56 = add i64 %55, 12


Removing: [0x5586f84f5cc8]:   %41 = trunc i32 %40 to i8
From the pot matches of: [0x5586f851ada8]:   %27 = trunc i32 %26 to i8


Uprime : [0x5586f851ae60]:   %28 = and i8 %27, 1


Uprime Matches: [0x5586f8483490]:   %29 = and i8 %28, 1
[0x5586f84f4eb0]:   %35 = and i8 %34, 1


Adj: [0x5586f8483c80]:   store i8 %41, i8* %42, align 1
[0x5586f84f5880]:   %49 = icmp ne i8 %41, 0


Removing: [0x5586f84f4eb0]:   %35 = and i8 %34, 1
From the pot matches of: [0x5586f851ae60]:   %28 = and i8 %27, 1


Uprime : [0x5586f851aee0]:   %29 = xor i8 %28, 1


Uprime Matches: [0x5586f8483330]:   %30 = xor i8 %29, 1


Adj: [0x5586f84f3910]:   store i8 %35, i8* %36, align 1


Removing: [0x5586f84f7318]:   %61 = inttoptr i64 %59 to i32*
From the pot matches of: [0x5586f8512648]:   %53 = inttoptr i64 %51 to i32*


Uprime : [0x5586f851db00]:   store i32 1, i32* %53, align 4


Uprime Matches: [0x5586f847fac0]:   store i64 %8, i64* %RBP.i, align 8
[0x5586f847ffb0]:   store i64 %8, i64* %6, align 8
[0x5586f8480100]:   store i64 %4, i64* %9, align 8
[0x5586f8481810]:   store i64 %5, i64* %3, align 8
[0x5586f8481960]:   store i8 %24, i8* %25, align 1
[0x5586f8482010]:   store i64 %19, i64* %3, align 8
[0x5586f8483c80]:   store i8 %41, i8* %42, align 1
[0x5586f8483dd0]:   store i8 %38, i8* %39, align 1
[0x5586f8483f30]:   store i8 %47, i8* %48, align 1
[0x5586f8484080]:   store i64 %53, i64* %3, align 8
[0x5586f8485250]:   store i64 %63, i64* %RAX.i, align 8
[0x5586f84853a0]:   store i64 %60, i64* %3, align 8
[0x5586f8485930]:   store i32 0, i32* %54, align 4
[0x5586f8485da0]:   store i64 %64, i64* %3, align 8
[0x5586f8485fc0]:   store i64 %71, i64* %3, align 8
[0x5586f8486220]:   store i64 %72, i64* %6, align 8
[0x5586f8486440]:   store i64 %68, i64* %RBP.i, align 8
[0x5586f8486810]:   store i64 %56, i64* %3, align 8
[0x5586f8487910]:   store i64 %69, i64* %3, align 8
[0x5586f8487b60]:   store i64 %66, i64* %6, align 8
[0x5586f84f3710]:   store i32 %13, i32* %15, align 4
[0x5586f84f3910]:   store i8 %35, i8* %36, align 1
[0x5586f84f4740]:   store i64 %14, i64* %3, align 8
[0x5586f84f50d0]:   store i8 %30, i8* %31, align 1
[0x5586f84f5950]:   store i32 1, i32* %54, align 4


Adj: [0x5586f84f71e8]:   %62 = load i32, i32* %61, align 4


Removing: [0x5586f84e5858]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f85127d8]:   %.pre = load i64, i64* %PC, align 8


Uprime : [0x5586f85129d8]:   %54 = phi i64 [ %71, %block_4004a1 ], [ %.pre, %block_4004ad ]


Uprime Matches: [0x5586f84f2d28]:   %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]


Adj: [0x5586f84f1930]:   %14 = add i64 %10, 6


Removing: [0x5586f85088d8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f85127d8]:   %.pre = load i64, i64* %PC, align 8


Uprime : [0x5586f85129d8]:   %54 = phi i64 [ %71, %block_4004a1 ], [ %.pre, %block_4004ad ]


Uprime Matches: [0x5586f84f2d28]:   %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]


Adj: [0x5586f8484fa0]:   %56 = add i64 %55, 12


Removing: [0x5586f852e518]:   %18 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f85127d8]:   %.pre = load i64, i64* %PC, align 8


Uprime : [0x5586f85129d8]:   %54 = phi i64 [ %71, %block_4004a1 ], [ %.pre, %block_4004ad ]


Uprime Matches: [0x5586f84f2d28]:   %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]


Adj: [0x5586f84844a0]:   %51 = add i64 %18, %.v
[0x5586f84f4b80]:   %19 = add i64 %18, 4


Removing: [0x5586f84a7f78]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5586f851cfe8]:   %55 = load i64, i64* %RBP, align 8


Uprime : [0x5586f851d060]:   %56 = add i64 %55, -4


Uprime Matches: [0x5586f8484340]:   %52 = add i64 %16, -4
[0x5586f8485730]:   %59 = add i64 %58, -4


Adj: [0x5586f8480100]:   store i64 %4, i64* %9, align 8


Removing: [0x5586f8482118]:   %54 = inttoptr i64 %52 to i32*
From the pot matches of: [0x5586f851d1c8]:   %58 = inttoptr i64 %56 to i32*


Uprime : [0x5586f851d228]:   %59 = load i32, i32* %58, align 4


Uprime Matches: [0x5586f84a7f78]:   %4 = load i64, i64* %RBP.i, align 8
[0x5586f84aad88]:   %13 = load i32, i32* %EDI.i, align 4
[0x5586f84de228]:   %7 = load i64, i64* %6, align 8
[0x5586f84e5858]:   %10 = load i64, i64* %3, align 8
[0x5586f84f1838]:   %16 = load i64, i64* %RBP.i, align 8
[0x5586f84f6998]:   %65 = load i64, i64* %6, align 8
[0x5586f84f71e8]:   %62 = load i32, i32* %61, align 4
[0x5586f84f7448]:   %58 = load i64, i64* %RBP.i, align 8
[0x5586f84f8158]:   %.pre = load i64, i64* %3, align 8
[0x5586f84f8288]:   %68 = load i64, i64* %67, align 8
[0x5586f84f9d58]:   %71 = load i64, i64* %70, align 8
[0x5586f85088d8]:   %55 = load i64, i64* %3, align 8
[0x5586f85293a8]:   %21 = load i32, i32* %20, align 4
[0x5586f852e518]:   %18 = load i64, i64* %3, align 8


Adj: [0x5586f8485930]:   store i32 0, i32* %54, align 4
[0x5586f84f5950]:   store i32 1, i32* %54, align 4


Removing: [0x5586f84de228]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5586f851d468]:   %62 = load i64, i64* %6, align 8, !tbaa !1261


Uprime : [0x5586f851d9a0]:   %69 = add i64 %62, 16


Uprime Matches: [0x5586f8485eb0]:   %72 = add i64 %65, 16


Adj: [0x5586f8480340]:   %8 = add i64 %7, -8
[0x5586f84f3510]:   %12 = add i64 %7, -16


Removing: [0x5586f84e5858]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f85126f8]:   %70 = load i64, i64* %PC, align 8


Uprime : [0x5586f851db80]:   %71 = add i64 %70, 12


Uprime Matches: [0x5586f8484fa0]:   %56 = add i64 %55, 12


Adj: [0x5586f84f1930]:   %14 = add i64 %10, 6


Removing: [0x5586f84f8158]:   %.pre = load i64, i64* %3, align 8
From the pot matches of: [0x5586f85126f8]:   %70 = load i64, i64* %PC, align 8


Uprime : [0x5586f851db80]:   %71 = add i64 %70, 12


Uprime Matches: [0x5586f8484fa0]:   %56 = add i64 %55, 12


Adj: [0x5586f84f2d28]:   %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]


Removing: [0x5586f852e518]:   %18 = load i64, i64* %3, align 8
From the pot matches of: [0x5586f85126f8]:   %70 = load i64, i64* %PC, align 8


Uprime : [0x5586f851db80]:   %71 = add i64 %70, 12


Uprime Matches: [0x5586f8484fa0]:   %56 = add i64 %55, 12


Adj: [0x5586f84844a0]:   %51 = add i64 %18, %.v
[0x5586f84f4b80]:   %19 = add i64 %18, 4

Round: 1

Removing: [0x5586f84f2928]:   %34 = trunc i32 %33 to i8
From the pot matches of: [0x5586f851ada8]:   %27 = trunc i32 %26 to i8


Uprime : [0x5586f851ae60]:   %28 = and i8 %27, 1


Uprime Matches: [0x5586f8483490]:   %29 = and i8 %28, 1


Adj: [0x5586f84f4eb0]:   %35 = and i8 %34, 1


Removing: [0x5586f8484340]:   %52 = add i64 %16, -4
From the pot matches of: [0x5586f851d060]:   %56 = add i64 %55, -4


Uprime : [0x5586f851d1c8]:   %58 = inttoptr i64 %56 to i32*


Uprime Matches: [0x5586f84f7318]:   %61 = inttoptr i64 %59 to i32*


Adj: [0x5586f8482118]:   %54 = inttoptr i64 %52 to i32*

Round: 2

Removing: [0x5586f84f1838]:   %16 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5586f851cfe8]:   %55 = load i64, i64* %RBP, align 8


Uprime : [0x5586f851d060]:   %56 = add i64 %55, -4


Uprime Matches: [0x5586f8485730]:   %59 = add i64 %58, -4


Adj: [0x5586f8484340]:   %52 = add i64 %16, -4
[0x5586f84f4c90]:   %17 = add i64 %16, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x5586f846c0d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5586f84e4e70]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5586f84a6b10]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5586f84e4ce0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5586f84ccf50]: %struct.State* %0 {
	[0x5586f851f7a0]:%struct.State.1* %0
	}

[0x5586f84ccf90]: i64 %1 {
	[0x5586f8481f60]:i64 %1
	}

[0x5586f84ccfd0]: %struct.Memory* %2 {
	[0x5586f84833e0]:%struct.Memory.32* %2
	}

[0x5586f84cd200]:   %5 = add i64 %1, 1 {
	[0x5586f852d9f0]:  %5 = add i64 %1, 1
	}

[0x5586f84cd280]:   store i64 %5, i64* %PC, align 8 {
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	}

[0x5586f84cd2e8]:   %7 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	}

[0x5586f84f0538]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x5586f84e5a48]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x5586f84f0608]:   %4 = load i64, i64* %RBP, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5586f85124e0]:   %51 = add i64 %15, -4 {
	[0x5586f8484340]:  %52 = add i64 %16, -4
	}

[0x5586f8512560]:   %52 = add i64 %50, 7 {
	[0x5586f84f5a60]:  %53 = add i64 %51, 7
	}

[0x5586f85125e0]:   store i64 %52, i64* %PC, align 8 {
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	}

[0x5586f8512648]:   %53 = inttoptr i64 %51 to i32* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	}

[0x5586f85126f8]:   %70 = load i64, i64* %PC, align 8 {
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	}

[0x5586f85127d8]:   %.pre = load i64, i64* %PC, align 8 {
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	}

[0x5586f8512868]:   br i1 %49, label %block_4004a1, label %block_4004ad {
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f85128e0]:   store i32 0, i32* %53, align 4 {
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f85129d8]:   %54 = phi i64 [ %71, %block_4004a1 ], [ %.pre, %block_4004ad ] {
	[0x5586f84f2d28]:  %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]
	}

[0x5586f8512a48]:   br label %block_4004b4 {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f8519a10]:   %8 = add i64 %7, -8 {
	[0x5586f8480340]:  %8 = add i64 %7, -8
	}

[0x5586f8519b08]:   %9 = inttoptr i64 %8 to i64* {
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5586f8519b80]:   store i64 %4, i64* %9, align 8 {
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	}

[0x5586f8519c00]:   store i64 %8, i64* %6, align 8, !tbaa !1261 {
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	}

[0x5586f851a278]:   %10 = load i64, i64* %PC, align 8 {
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	}

[0x5586f851a2f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5586f851a3b0]:   %11 = add i64 %7, -16 {
	[0x5586f84f3510]:  %12 = add i64 %7, -16
	}

[0x5586f851a418]:   %12 = load i32, i32* %EDI, align 4 {
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x5586f851a490]:   %13 = add i64 %10, 6 {
	[0x5586f84f1930]:  %14 = add i64 %10, 6
	}

[0x5586f851a510]:   store i64 %13, i64* %PC, align 8 {
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	}

[0x5586f851a578]:   %14 = inttoptr i64 %11 to i32* {
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	}

[0x5586f851a5f0]:   store i32 %12, i32* %14, align 4 {
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	}

[0x5586f851a658]:   %15 = load i64, i64* %RBP, align 8 {
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	}

[0x5586f851a6d0]:   %16 = add i64 %15, -8 {
	[0x5586f84f4c90]:  %17 = add i64 %16, -8
	}

[0x5586f851a738]:   %17 = load i64, i64* %PC, align 8 {
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a7b0]:   %18 = add i64 %17, 4 {
	[0x5586f84f4b80]:  %19 = add i64 %18, 4
	}

[0x5586f851a830]:   store i64 %18, i64* %PC, align 8 {
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	}

[0x5586f851a898]:   %19 = inttoptr i64 %16 to i32* {
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851a8f8]:   %20 = load i32, i32* %19, align 4 {
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	}

[0x5586f851a9b0]:   %21 = add i32 %20, -1 {
	[0x5586f8481eb0]:  %22 = add i32 %21, -1
	}

[0x5586f851aa30]:   %22 = icmp eq i32 %20, 0 {
	[0x5586f84f4850]:  %23 = icmp eq i32 %21, 0
	}

[0x5586f851aa98]:   %23 = zext i1 %22 to i8 {
	[0x5586f84dbc18]:  %24 = zext i1 %23 to i8
	}

[0x5586f851ab10]:   store i8 %23, i8* %24, align 1, !tbaa !1265 {
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	}

[0x5586f851ac70]:   %25 = and i32 %21, 255 {
	[0x5586f8482290]:  %26 = and i32 %22, 255
	}

[0x5586f851ad30]:   %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #9 {
	[0x5586f85bee40]:  %27 = tail call i32 @llvm.ctpop.i32(i32 %26)
	}

[0x5586f851ada8]:   %27 = trunc i32 %26 to i8 {
	[0x5586f85105e8]:  %28 = trunc i32 %27 to i8
	}

[0x5586f851ae60]:   %28 = and i8 %27, 1 {
	[0x5586f8483490]:  %29 = and i8 %28, 1
	}

[0x5586f851aee0]:   %29 = xor i8 %28, 1 {
	[0x5586f8483330]:  %30 = xor i8 %29, 1
	}

[0x5586f851af60]:   store i8 %29, i8* %30, align 1, !tbaa !1279 {
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	}

[0x5586f851b0f0]:   %31 = xor i32 %21, %20 {
	[0x5586f8483240]:  %32 = xor i32 %22, %21
	}

[0x5586f851b170]:   %32 = lshr i32 %31, 4 {
	[0x5586f84f3a60]:  %33 = lshr i32 %32, 4
	}

[0x5586f851b1d8]:   %33 = trunc i32 %32 to i8 {
	[0x5586f84f2928]:  %34 = trunc i32 %33 to i8
	}

[0x5586f851b250]:   %34 = and i8 %33, 1 {
	[0x5586f84f4eb0]:  %35 = and i8 %34, 1
	}

[0x5586f851b300]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5586f84fd9d0]:  %36 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5586f851b390]:   store i8 %34, i8* %35, align 1, !tbaa !1280 {
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	}

[0x5586f851b540]:   %36 = icmp eq i32 %21, 0 {
	[0x5586f84f52f0]:  %37 = icmp eq i32 %22, 0
	}

[0x5586f851b5a8]:   %37 = zext i1 %36 to i8 {
	[0x5586f84f6058]:  %38 = zext i1 %37 to i8
	}

[0x5586f851b650]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5586f848d280]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5586f851b6e0]:   store i8 %37, i8* %38, align 1, !tbaa !1281 {
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	}

[0x5586f851b890]:   %39 = lshr i32 %21, 31 {
	[0x5586f84f5730]:  %40 = lshr i32 %22, 31
	}

[0x5586f851b8f8]:   %40 = trunc i32 %39 to i8 {
	[0x5586f84f5cc8]:  %41 = trunc i32 %40 to i8
	}

[0x5586f851b9a0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5586f8488320]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5586f851ba30]:   store i8 %40, i8* %41, align 1, !tbaa !1282 {
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	}

[0x5586f851bbe0]:   %42 = lshr i32 %20, 31 {
	[0x5586f84f5620]:  %43 = lshr i32 %21, 31
	}

[0x5586f851bc60]:   %43 = xor i32 %39, %42 {
	[0x5586f84f5510]:  %44 = xor i32 %40, %43
	}

[0x5586f851bce0]:   %44 = add nuw nsw i32 %43, %42 {
	[0x5586f8483b20]:  %45 = add nuw nsw i32 %44, %43
	}

[0x5586f851bd60]:   %45 = icmp eq i32 %44, 2 {
	[0x5586f84839c0]:  %46 = icmp eq i32 %45, 2
	}

[0x5586f851bdc8]:   %46 = zext i1 %45 to i8 {
	[0x5586f84f5b98]:  %47 = zext i1 %46 to i8
	}

[0x5586f851be70]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5586f8484d20]:  %48 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5586f851bf00]:   store i8 %46, i8* %47, align 1, !tbaa !1283 {
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	}

[0x5586f851c0b0]:   %48 = icmp ne i8 %40, 0 {
	[0x5586f84f5880]:  %49 = icmp ne i8 %41, 0
	}

[0x5586f851c130]:   %49 = xor i1 %48, %45 {
	[0x5586f8484640]:  %50 = xor i1 %49, %46
	}

[0x5586f851c208]:   %.v = select i1 %49, i64 10, i64 22 {
	[0x5586f84cc578]:  %.v = select i1 %50, i64 10, i64 22
	}

[0x5586f851c2a0]:   %50 = add i64 %17, %.v {
	[0x5586f84844a0]:  %51 = add i64 %18, %.v
	}

[0x5586f851cfe8]:   %55 = load i64, i64* %RBP, align 8 {
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	}

[0x5586f851d060]:   %56 = add i64 %55, -4 {
	[0x5586f8485730]:  %59 = add i64 %58, -4
	}

[0x5586f851d0e0]:   %57 = add i64 %54, 3 {
	[0x5586f8485500]:  %60 = add i64 %57, 3
	}

[0x5586f851d160]:   store i64 %57, i64* %PC, align 8 {
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	}

[0x5586f851d1c8]:   %58 = inttoptr i64 %56 to i32* {
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	}

[0x5586f851d228]:   %59 = load i32, i32* %58, align 4 {
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	}

[0x5586f851d288]:   %60 = zext i32 %59 to i64 {
	[0x5586f84f6d28]:  %63 = zext i32 %62 to i64
	}

[0x5586f851d300]:   store i64 %60, i64* %RAX, align 8, !tbaa !1261 {
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	}

[0x5586f851d380]:   %61 = add i64 %54, 4 {
	[0x5586f84850f0]:  %64 = add i64 %57, 4
	}

[0x5586f851d400]:   store i64 %61, i64* %PC, align 8 {
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	}

[0x5586f851d468]:   %62 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	}

[0x5586f851d4e0]:   %63 = add i64 %62, 8 {
	[0x5586f8487ee0]:  %66 = add i64 %65, 8
	}

[0x5586f851d548]:   %64 = inttoptr i64 %62 to i64* {
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	}

[0x5586f851d5a8]:   %65 = load i64, i64* %64, align 8 {
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	}

[0x5586f851d620]:   store i64 %65, i64* %RBP, align 8, !tbaa !1261 {
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	}

[0x5586f851d6a0]:   store i64 %63, i64* %6, align 8, !tbaa !1261 {
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	}

[0x5586f851d720]:   %66 = add i64 %54, 5 {
	[0x5586f84862f0]:  %69 = add i64 %57, 5
	}

[0x5586f851d7a0]:   store i64 %66, i64* %PC, align 8 {
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	}

[0x5586f851d808]:   %67 = inttoptr i64 %63 to i64* {
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	}

[0x5586f851d868]:   %68 = load i64, i64* %67, align 8 {
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	}

[0x5586f851d8e0]:   store i64 %68, i64* %PC, align 8, !tbaa !1261 {
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	}

[0x5586f851d9a0]:   %69 = add i64 %62, 16 {
	[0x5586f8485eb0]:  %72 = add i64 %65, 16
	}

[0x5586f851da20]:   store i64 %69, i64* %6, align 8, !tbaa !1261 {
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	}

[0x5586f851da88]:   ret %struct.Memory* %2 {
	[0x5586f8482fb8]:  ret %struct.Memory.32* %2
	}

[0x5586f851db00]:   store i32 1, i32* %53, align 4 {
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851db80]:   %71 = add i64 %70, 12 {
	[0x5586f8484fa0]:  %56 = add i64 %55, 12
	}

[0x5586f851dc00]:   store i64 %71, i64* %PC, align 8, !tbaa !1261 {
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	}

[0x5586f851dc68]:   br label %block_4004b4 {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f852fed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x5586f853d2c8]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x5586f8547f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5586f8478400]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5586f8548140]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5586f84e4b10]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5586f854d080]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5586f8509260]:  %31 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5586f854d190]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5586f85c9e70]:  %25 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5586f84cd010]: block_400490 {
	[0x5586f847e980]:entry
	}

[0x5586f8512690]: block_4004a1 {
	[0x5586f8504d30]:block_4004a1
	}

[0x5586f8512740]: block_4004ad {
	[0x5586f854cbc0]:block_.L_4004ad
	}

[0x5586f8512950]: block_4004b4 {
	[0x5586f846cc40]:block_.L_4004b4
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0


[Info] After Dual Simulation: Round: 1
[0x5586f846c0d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5586f84e4e70]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5586f84a6b10]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5586f84e4ce0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5586f84ccf50]: %struct.State* %0 {
	[0x5586f851f7a0]:%struct.State.1* %0
	}

[0x5586f84ccf90]: i64 %1 {
	[0x5586f8481f60]:i64 %1
	}

[0x5586f84ccfd0]: %struct.Memory* %2 {
	[0x5586f84833e0]:%struct.Memory.32* %2
	}

[0x5586f84cd200]:   %5 = add i64 %1, 1 {
	[0x5586f852d9f0]:  %5 = add i64 %1, 1
	}

[0x5586f84cd280]:   store i64 %5, i64* %PC, align 8 {
	[0x5586f8481810]:  store i64 %5, i64* %3, align 8
	}

[0x5586f84cd2e8]:   %7 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x5586f84de228]:  %7 = load i64, i64* %6, align 8
	}

[0x5586f84f0538]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x5586f84e5a48]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x5586f84f0608]:   %4 = load i64, i64* %RBP, align 8 {
	[0x5586f84a7f78]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5586f85124e0]:   %51 = add i64 %15, -4 {
	[0x5586f8484340]:  %52 = add i64 %16, -4
	}

[0x5586f8512560]:   %52 = add i64 %50, 7 {
	[0x5586f84f5a60]:  %53 = add i64 %51, 7
	}

[0x5586f85125e0]:   store i64 %52, i64* %PC, align 8 {
	[0x5586f8484080]:  store i64 %53, i64* %3, align 8
	}

[0x5586f8512648]:   %53 = inttoptr i64 %51 to i32* {
	[0x5586f8482118]:  %54 = inttoptr i64 %52 to i32*
	}

[0x5586f85126f8]:   %70 = load i64, i64* %PC, align 8 {
	[0x5586f85088d8]:  %55 = load i64, i64* %3, align 8
	}

[0x5586f85127d8]:   %.pre = load i64, i64* %PC, align 8 {
	[0x5586f84f8158]:  %.pre = load i64, i64* %3, align 8
	}

[0x5586f8512868]:   br i1 %49, label %block_4004a1, label %block_4004ad {
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f85128e0]:   store i32 0, i32* %53, align 4 {
	[0x5586f8485930]:  store i32 0, i32* %54, align 4
	}

[0x5586f85129d8]:   %54 = phi i64 [ %71, %block_4004a1 ], [ %.pre, %block_4004ad ] {
	[0x5586f84f2d28]:  %57 = phi i64 [ %.pre, %block_.L_4004ad ], [ %56, %block_4004a1 ]
	}

[0x5586f8512a48]:   br label %block_4004b4 {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f8519a10]:   %8 = add i64 %7, -8 {
	[0x5586f8480340]:  %8 = add i64 %7, -8
	}

[0x5586f8519b08]:   %9 = inttoptr i64 %8 to i64* {
	[0x5586f84e56c8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5586f8519b80]:   store i64 %4, i64* %9, align 8 {
	[0x5586f8480100]:  store i64 %4, i64* %9, align 8
	}

[0x5586f8519c00]:   store i64 %8, i64* %6, align 8, !tbaa !1261 {
	[0x5586f847ffb0]:  store i64 %8, i64* %6, align 8
	}

[0x5586f851a278]:   %10 = load i64, i64* %PC, align 8 {
	[0x5586f84e5858]:  %10 = load i64, i64* %3, align 8
	}

[0x5586f851a2f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5586f847fac0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5586f851a3b0]:   %11 = add i64 %7, -16 {
	[0x5586f84f3510]:  %12 = add i64 %7, -16
	}

[0x5586f851a418]:   %12 = load i32, i32* %EDI, align 4 {
	[0x5586f84aad88]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x5586f851a490]:   %13 = add i64 %10, 6 {
	[0x5586f84f1930]:  %14 = add i64 %10, 6
	}

[0x5586f851a510]:   store i64 %13, i64* %PC, align 8 {
	[0x5586f84f4740]:  store i64 %14, i64* %3, align 8
	}

[0x5586f851a578]:   %14 = inttoptr i64 %11 to i32* {
	[0x5586f84f1568]:  %15 = inttoptr i64 %12 to i32*
	}

[0x5586f851a5f0]:   store i32 %12, i32* %14, align 4 {
	[0x5586f84f3710]:  store i32 %13, i32* %15, align 4
	}

[0x5586f851a658]:   %15 = load i64, i64* %RBP, align 8 {
	[0x5586f84f1838]:  %16 = load i64, i64* %RBP.i, align 8
	}

[0x5586f851a6d0]:   %16 = add i64 %15, -8 {
	[0x5586f84f4c90]:  %17 = add i64 %16, -8
	}

[0x5586f851a738]:   %17 = load i64, i64* %PC, align 8 {
	[0x5586f852e518]:  %18 = load i64, i64* %3, align 8
	}

[0x5586f851a7b0]:   %18 = add i64 %17, 4 {
	[0x5586f84f4b80]:  %19 = add i64 %18, 4
	}

[0x5586f851a830]:   store i64 %18, i64* %PC, align 8 {
	[0x5586f8482010]:  store i64 %19, i64* %3, align 8
	}

[0x5586f851a898]:   %19 = inttoptr i64 %16 to i32* {
	[0x5586f852e0e8]:  %20 = inttoptr i64 %17 to i32*
	}

[0x5586f851a8f8]:   %20 = load i32, i32* %19, align 4 {
	[0x5586f85293a8]:  %21 = load i32, i32* %20, align 4
	}

[0x5586f851a9b0]:   %21 = add i32 %20, -1 {
	[0x5586f8481eb0]:  %22 = add i32 %21, -1
	}

[0x5586f851aa30]:   %22 = icmp eq i32 %20, 0 {
	[0x5586f84f4850]:  %23 = icmp eq i32 %21, 0
	}

[0x5586f851aa98]:   %23 = zext i1 %22 to i8 {
	[0x5586f84dbc18]:  %24 = zext i1 %23 to i8
	}

[0x5586f851ab10]:   store i8 %23, i8* %24, align 1, !tbaa !1265 {
	[0x5586f8481960]:  store i8 %24, i8* %25, align 1
	}

[0x5586f851ac70]:   %25 = and i32 %21, 255 {
	[0x5586f8482290]:  %26 = and i32 %22, 255
	}

[0x5586f851ad30]:   %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #9 {
	[0x5586f85bee40]:  %27 = tail call i32 @llvm.ctpop.i32(i32 %26)
	}

[0x5586f851ada8]:   %27 = trunc i32 %26 to i8 {
	[0x5586f85105e8]:  %28 = trunc i32 %27 to i8
	}

[0x5586f851ae60]:   %28 = and i8 %27, 1 {
	[0x5586f8483490]:  %29 = and i8 %28, 1
	}

[0x5586f851aee0]:   %29 = xor i8 %28, 1 {
	[0x5586f8483330]:  %30 = xor i8 %29, 1
	}

[0x5586f851af60]:   store i8 %29, i8* %30, align 1, !tbaa !1279 {
	[0x5586f84f50d0]:  store i8 %30, i8* %31, align 1
	}

[0x5586f851b0f0]:   %31 = xor i32 %21, %20 {
	[0x5586f8483240]:  %32 = xor i32 %22, %21
	}

[0x5586f851b170]:   %32 = lshr i32 %31, 4 {
	[0x5586f84f3a60]:  %33 = lshr i32 %32, 4
	}

[0x5586f851b1d8]:   %33 = trunc i32 %32 to i8 {
	[0x5586f84f2928]:  %34 = trunc i32 %33 to i8
	}

[0x5586f851b250]:   %34 = and i8 %33, 1 {
	[0x5586f84f4eb0]:  %35 = and i8 %34, 1
	}

[0x5586f851b300]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5586f84fd9d0]:  %36 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5586f851b390]:   store i8 %34, i8* %35, align 1, !tbaa !1280 {
	[0x5586f84f3910]:  store i8 %35, i8* %36, align 1
	}

[0x5586f851b540]:   %36 = icmp eq i32 %21, 0 {
	[0x5586f84f52f0]:  %37 = icmp eq i32 %22, 0
	}

[0x5586f851b5a8]:   %37 = zext i1 %36 to i8 {
	[0x5586f84f6058]:  %38 = zext i1 %37 to i8
	}

[0x5586f851b650]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5586f848d280]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5586f851b6e0]:   store i8 %37, i8* %38, align 1, !tbaa !1281 {
	[0x5586f8483dd0]:  store i8 %38, i8* %39, align 1
	}

[0x5586f851b890]:   %39 = lshr i32 %21, 31 {
	[0x5586f84f5730]:  %40 = lshr i32 %22, 31
	}

[0x5586f851b8f8]:   %40 = trunc i32 %39 to i8 {
	[0x5586f84f5cc8]:  %41 = trunc i32 %40 to i8
	}

[0x5586f851b9a0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5586f8488320]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5586f851ba30]:   store i8 %40, i8* %41, align 1, !tbaa !1282 {
	[0x5586f8483c80]:  store i8 %41, i8* %42, align 1
	}

[0x5586f851bbe0]:   %42 = lshr i32 %20, 31 {
	[0x5586f84f5620]:  %43 = lshr i32 %21, 31
	}

[0x5586f851bc60]:   %43 = xor i32 %39, %42 {
	[0x5586f84f5510]:  %44 = xor i32 %40, %43
	}

[0x5586f851bce0]:   %44 = add nuw nsw i32 %43, %42 {
	[0x5586f8483b20]:  %45 = add nuw nsw i32 %44, %43
	}

[0x5586f851bd60]:   %45 = icmp eq i32 %44, 2 {
	[0x5586f84839c0]:  %46 = icmp eq i32 %45, 2
	}

[0x5586f851bdc8]:   %46 = zext i1 %45 to i8 {
	[0x5586f84f5b98]:  %47 = zext i1 %46 to i8
	}

[0x5586f851be70]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5586f8484d20]:  %48 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5586f851bf00]:   store i8 %46, i8* %47, align 1, !tbaa !1283 {
	[0x5586f8483f30]:  store i8 %47, i8* %48, align 1
	}

[0x5586f851c0b0]:   %48 = icmp ne i8 %40, 0 {
	[0x5586f84f5880]:  %49 = icmp ne i8 %41, 0
	}

[0x5586f851c130]:   %49 = xor i1 %48, %45 {
	[0x5586f8484640]:  %50 = xor i1 %49, %46
	}

[0x5586f851c208]:   %.v = select i1 %49, i64 10, i64 22 {
	[0x5586f84cc578]:  %.v = select i1 %50, i64 10, i64 22
	}

[0x5586f851c2a0]:   %50 = add i64 %17, %.v {
	[0x5586f84844a0]:  %51 = add i64 %18, %.v
	}

[0x5586f851cfe8]:   %55 = load i64, i64* %RBP, align 8 {
	[0x5586f84f7448]:  %58 = load i64, i64* %RBP.i, align 8
	}

[0x5586f851d060]:   %56 = add i64 %55, -4 {
	[0x5586f8485730]:  %59 = add i64 %58, -4
	}

[0x5586f851d0e0]:   %57 = add i64 %54, 3 {
	[0x5586f8485500]:  %60 = add i64 %57, 3
	}

[0x5586f851d160]:   store i64 %57, i64* %PC, align 8 {
	[0x5586f84853a0]:  store i64 %60, i64* %3, align 8
	}

[0x5586f851d1c8]:   %58 = inttoptr i64 %56 to i32* {
	[0x5586f84f7318]:  %61 = inttoptr i64 %59 to i32*
	}

[0x5586f851d228]:   %59 = load i32, i32* %58, align 4 {
	[0x5586f84f71e8]:  %62 = load i32, i32* %61, align 4
	}

[0x5586f851d288]:   %60 = zext i32 %59 to i64 {
	[0x5586f84f6d28]:  %63 = zext i32 %62 to i64
	}

[0x5586f851d300]:   store i64 %60, i64* %RAX, align 8, !tbaa !1261 {
	[0x5586f8485250]:  store i64 %63, i64* %RAX.i, align 8
	}

[0x5586f851d380]:   %61 = add i64 %54, 4 {
	[0x5586f84850f0]:  %64 = add i64 %57, 4
	}

[0x5586f851d400]:   store i64 %61, i64* %PC, align 8 {
	[0x5586f8485da0]:  store i64 %64, i64* %3, align 8
	}

[0x5586f851d468]:   %62 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x5586f84f6998]:  %65 = load i64, i64* %6, align 8
	}

[0x5586f851d4e0]:   %63 = add i64 %62, 8 {
	[0x5586f8487ee0]:  %66 = add i64 %65, 8
	}

[0x5586f851d548]:   %64 = inttoptr i64 %62 to i64* {
	[0x5586f852de48]:  %67 = inttoptr i64 %65 to i64*
	}

[0x5586f851d5a8]:   %65 = load i64, i64* %64, align 8 {
	[0x5586f84f8288]:  %68 = load i64, i64* %67, align 8
	}

[0x5586f851d620]:   store i64 %65, i64* %RBP, align 8, !tbaa !1261 {
	[0x5586f8486440]:  store i64 %68, i64* %RBP.i, align 8
	}

[0x5586f851d6a0]:   store i64 %63, i64* %6, align 8, !tbaa !1261 {
	[0x5586f8487b60]:  store i64 %66, i64* %6, align 8
	}

[0x5586f851d720]:   %66 = add i64 %54, 5 {
	[0x5586f84862f0]:  %69 = add i64 %57, 5
	}

[0x5586f851d7a0]:   store i64 %66, i64* %PC, align 8 {
	[0x5586f8487910]:  store i64 %69, i64* %3, align 8
	}

[0x5586f851d808]:   %67 = inttoptr i64 %63 to i64* {
	[0x5586f84f9e88]:  %70 = inttoptr i64 %66 to i64*
	}

[0x5586f851d868]:   %68 = load i64, i64* %67, align 8 {
	[0x5586f84f9d58]:  %71 = load i64, i64* %70, align 8
	}

[0x5586f851d8e0]:   store i64 %68, i64* %PC, align 8, !tbaa !1261 {
	[0x5586f8485fc0]:  store i64 %71, i64* %3, align 8
	}

[0x5586f851d9a0]:   %69 = add i64 %62, 16 {
	[0x5586f8485eb0]:  %72 = add i64 %65, 16
	}

[0x5586f851da20]:   store i64 %69, i64* %6, align 8, !tbaa !1261 {
	[0x5586f8486220]:  store i64 %72, i64* %6, align 8
	}

[0x5586f851da88]:   ret %struct.Memory* %2 {
	[0x5586f8482fb8]:  ret %struct.Memory.32* %2
	}

[0x5586f851db00]:   store i32 1, i32* %53, align 4 {
	[0x5586f84f5950]:  store i32 1, i32* %54, align 4
	}

[0x5586f851db80]:   %71 = add i64 %70, 12 {
	[0x5586f8484fa0]:  %56 = add i64 %55, 12
	}

[0x5586f851dc00]:   store i64 %71, i64* %PC, align 8, !tbaa !1261 {
	[0x5586f8486810]:  store i64 %56, i64* %3, align 8
	}

[0x5586f851dc68]:   br label %block_4004b4 {
	[0x5586f84f6738]:  br label %block_.L_4004b4
	[0x5586f84f7ef8]:  br label %block_.L_4004b4
	[0x5586f850fbd8]:  br i1 %50, label %block_4004a1, label %block_.L_4004ad
	}

[0x5586f852fed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x5586f853d2c8]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x5586f8547f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5586f8478400]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5586f8548140]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5586f84e4b10]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5586f854d080]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5586f8509260]:  %31 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5586f854d190]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5586f85c9e70]:  %25 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5586f84cd010]: block_400490 {
	[0x5586f847e980]:entry
	}

[0x5586f8512690]: block_4004a1 {
	[0x5586f8504d30]:block_4004a1
	}

[0x5586f8512740]: block_4004ad {
	[0x5586f854cbc0]:block_.L_4004ad
	}

[0x5586f8512950]: block_4004b4 {
	[0x5586f846cc40]:block_.L_4004b4
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [get_sign] from mcsema/test.opt.ll
Extracting function [get_sign] from mcsema/test.proposed.opt.ll
Matcher Done...
