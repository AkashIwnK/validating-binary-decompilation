Matching sub_4004a0_main Vs main


[Info] Retrieve Potential Matches...
[0x5556b6c0e760]: i64 %1 {
	[0x5556b6cceb70]:i64 %1
	}

[0x5556b6c0e7a0]: %struct.Memory* %2 {
	[0x5556b6cd9a30]:%struct.Memory.31* %2
	}

[0x5556b6c0e978]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c0ea20]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5556b6cabea0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5556b6c85c90]:   %38 = add i64 %5, -12 {
	[0x5556b6cb99f0]:  %40 = add i64 %7, -12
	}

[0x5556b6c85d50]:   %39 = add i64 %8, 19 {
	[0x5556b6cef7f0]:  %41 = add i64 %10, 19
	}

[0x5556b6c85dd0]:   store i64 %39, i64* %PC, align 8 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c85e38]:   %40 = inttoptr i64 %38 to i32* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c85eb0]:   store i32 0, i32* %40, align 4 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c85f18]:   %41 = load i64, i64* %PC, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c85fd0]:   %42 = add i64 %41, -68 {
	[0x5556b6d66790]:  %44 = add i64 %43, -68
	}

[0x5556b6c86050]:   %43 = add i64 %41, 5 {
	[0x5556b6cd4550]:  %74 = add i64 %50, 5
	[0x5556b6cdf6c0]:  %45 = add i64 %43, 5
	}

[0x5556b6c860b8]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c86130]:   %45 = add i64 %44, -8 {
	[0x5556b6cac350]:  %8 = add i64 %7, -8
	[0x5556b6d6d1b0]:  %47 = add i64 %46, -8
	}

[0x5556b6c86198]:   %46 = inttoptr i64 %45 to i64* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c86210]:   store i64 %43, i64* %46, align 8 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c86290]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c86310]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c86410]:   %47 = tail call %struct.Memory* @sub_400470_get_sign(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5556b6cadc50]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5556b6cb77e0]:  %call2_4004b4 = tail call %struct.Memory.31* @sub_400470.get_sign(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x5556b6ccf300]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5556b6c864d8]:   %48 = load i64, i64* %RSP, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c86538]:   %49 = load i64, i64* %PC, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c865b0]:   %50 = add i64 %48, 16 {
	[0x5556b6d6fca0]:  %51 = add i64 %49, 16
	}

[0x5556b6c86630]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c866f0]:   %51 = icmp ugt i64 %48, -17 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c86758]:   %52 = zext i1 %51 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c867d0]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c90f30]: %struct.State* %0 {
	[0x5556b6cd7560]:%struct.State.0* %0
	}

[0x5556b6c91dd0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5556b6c151e0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5556b6c91ec0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5556b6c559a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5556b6c91fb0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5556b6c54700]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5556b6c920c0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5556b6c53a50]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5556b6c92170]:   %4 = add i64 %1, 1 {
	[0x5556b6c098e0]:  %5 = add i64 %1, 1
	}

[0x5556b6c92240]:   store i64 %4, i64* %PC, align 8 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c922a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c92320]:   %6 = add i64 %5, -8 {
	[0x5556b6cac350]:  %8 = add i64 %7, -8
	[0x5556b6d6d1b0]:  %47 = add i64 %46, -8
	}

[0x5556b6c92388]:   %7 = inttoptr i64 %6 to i64* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c92400]:   store i64 %3, i64* %7, align 8 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c92468]:   %8 = load i64, i64* %PC, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c924e0]:   %17 = and i8 %16, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	[0x5556b6cafe50]:  %26 = and i8 %25, 1
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	[0x5556b6cd0630]:  %64 = and i8 %63, 1
	}

[0x5556b6c92570]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c925f0]:   %9 = add i64 %5, -24 {
	[0x5556b6cae0d0]:  %11 = add i64 %7, -24
	}

[0x5556b6c92670]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c926f0]:   %10 = icmp ult i64 %6, 16 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c92758]:   %11 = zext i1 %10 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c927d0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c92838]:   %13 = trunc i64 %9 to i32 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c928b0]:   %14 = and i32 %13, 255 {
	[0x5556b6cae800]:  %16 = and i32 %15, 255
	[0x5556b6d81780]:  %55 = and i32 %54, 255
	}

[0x5556b6c92970]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5556b6cadc50]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5556b6cb77e0]:  %call2_4004b4 = tail call %struct.Memory.31* @sub_400470.get_sign(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x5556b6ccf300]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5556b6c929e8]:   %16 = trunc i32 %15 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c92a60]:   %33 = xor i64 %29, %32 {
	[0x5556b6caf0c0]:  %23 = xor i64 %22, %11
	[0x5556b6ccba80]:  %70 = xor i64 %67, %69
	[0x5556b6cced70]:  %35 = xor i64 %31, %34
	[0x5556b6cd0140]:  %61 = xor i64 %60, %51
	}

[0x5556b6c92ae0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5556b6cb2e40]:  %36 = add nuw nsw i64 %35, %34
	[0x5556b6cd3db0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5556b6c92b70]:   %18 = xor i8 %17, 1 {
	[0x5556b6c6e150]:  %59 = xor i8 %58, 1
	[0x5556b6caea60]:  %20 = xor i8 %19, 1
	}

[0x5556b6c92c20]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5556b6caeb60]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5556b6c92cb0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c92d30]:   %20 = xor i64 %6, 16 {
	[0x5556b6cce2f0]:  %22 = xor i64 %8, 16
	[0x5556b6ccfd70]:  %60 = xor i64 %49, 16
	}

[0x5556b6c92db0]:   %21 = xor i64 %20, %9 {
	[0x5556b6caf0c0]:  %23 = xor i64 %22, %11
	[0x5556b6ccba80]:  %70 = xor i64 %67, %69
	[0x5556b6cced70]:  %35 = xor i64 %31, %34
	[0x5556b6cd0140]:  %61 = xor i64 %60, %51
	}

[0x5556b6c92e30]:   %22 = lshr i64 %21, 4 {
	[0x5556b6caf190]:  %24 = lshr i64 %23, 4
	[0x5556b6cd0240]:  %62 = lshr i64 %61, 4
	}

[0x5556b6c92e98]:   %23 = trunc i64 %22 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c92f10]:   %24 = and i8 %23, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	[0x5556b6cafe50]:  %26 = and i8 %25, 1
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	[0x5556b6cd0630]:  %64 = and i8 %63, 1
	}

[0x5556b6c92fc0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5556b6cb03f0]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5556b6c93050]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c930d0]:   %26 = icmp eq i64 %9, 0 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c93138]:   %27 = zext i1 %26 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c931e0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5556b6cb71f0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5556b6c93270]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c932f0]:   %29 = lshr i64 %9, 63 {
	[0x5556b6ccb990]:  %69 = lshr i64 %49, 63
	[0x5556b6ccee70]:  %34 = lshr i64 %8, 63
	[0x5556b6cd1790]:  %67 = lshr i64 %51, 63
	[0x5556b6cd2360]:  %31 = lshr i64 %11, 63
	}

[0x5556b6c93358]:   %30 = trunc i64 %29 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c93400]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5556b6cb7450]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5556b6c93490]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c93510]:   %32 = lshr i64 %6, 63 {
	[0x5556b6ccb990]:  %69 = lshr i64 %49, 63
	[0x5556b6ccee70]:  %34 = lshr i64 %8, 63
	[0x5556b6cd1790]:  %67 = lshr i64 %51, 63
	[0x5556b6cd2360]:  %31 = lshr i64 %11, 63
	}

[0x5556b6c93578]:   %65 = zext i1 %64 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c935f0]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c93670]:   %66 = lshr i64 %50, 63 {
	[0x5556b6ccb990]:  %69 = lshr i64 %49, 63
	[0x5556b6ccee70]:  %34 = lshr i64 %8, 63
	[0x5556b6cd1790]:  %67 = lshr i64 %51, 63
	[0x5556b6cd2360]:  %31 = lshr i64 %11, 63
	}

[0x5556b6c936d8]:   %67 = trunc i64 %66 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c937a0]:   %35 = icmp eq i64 %34, 2 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c93808]:   %36 = zext i1 %35 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c938b0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5556b6cb7580]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5556b6c93940]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c939c0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c95238]:   %53 = trunc i64 %50 to i32 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c952b0]:   %54 = and i32 %53, 255 {
	[0x5556b6cae800]:  %16 = and i32 %15, 255
	[0x5556b6d81780]:  %55 = and i32 %54, 255
	}

[0x5556b6c95330]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x5556b6cadc50]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5556b6cb77e0]:  %call2_4004b4 = tail call %struct.Memory.31* @sub_400470.get_sign(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x5556b6ccf300]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5556b6c953f8]:   %56 = trunc i32 %55 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c95470]:   %57 = and i8 %56, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	[0x5556b6cafe50]:  %26 = and i8 %25, 1
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	[0x5556b6cd0630]:  %64 = and i8 %63, 1
	}

[0x5556b6c954f0]:   %58 = xor i8 %57, 1 {
	[0x5556b6c6e150]:  %59 = xor i8 %58, 1
	[0x5556b6caea60]:  %20 = xor i8 %19, 1
	}

[0x5556b6c95570]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c955f0]:   %59 = xor i64 %48, 16 {
	[0x5556b6cce2f0]:  %22 = xor i64 %8, 16
	[0x5556b6ccfd70]:  %60 = xor i64 %49, 16
	}

[0x5556b6c95670]:   %60 = xor i64 %59, %50 {
	[0x5556b6caf0c0]:  %23 = xor i64 %22, %11
	[0x5556b6ccba80]:  %70 = xor i64 %67, %69
	[0x5556b6cced70]:  %35 = xor i64 %31, %34
	[0x5556b6cd0140]:  %61 = xor i64 %60, %51
	}

[0x5556b6c956f0]:   %61 = lshr i64 %60, 4 {
	[0x5556b6caf190]:  %24 = lshr i64 %23, 4
	[0x5556b6cd0240]:  %62 = lshr i64 %61, 4
	}

[0x5556b6c95758]:   %62 = trunc i64 %61 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c957d0]:   %63 = and i8 %62, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	[0x5556b6cafe50]:  %26 = and i8 %25, 1
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	[0x5556b6cd0630]:  %64 = and i8 %63, 1
	}

[0x5556b6c95850]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c958d0]:   %64 = icmp eq i64 %50, 0 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c95d60]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c95de0]:   %68 = lshr i64 %48, 63 {
	[0x5556b6ccb990]:  %69 = lshr i64 %49, 63
	[0x5556b6ccee70]:  %34 = lshr i64 %8, 63
	[0x5556b6cd1790]:  %67 = lshr i64 %51, 63
	[0x5556b6cd2360]:  %31 = lshr i64 %11, 63
	}

[0x5556b6c95e60]:   %69 = xor i64 %66, %68 {
	[0x5556b6caf0c0]:  %23 = xor i64 %22, %11
	[0x5556b6ccba80]:  %70 = xor i64 %67, %69
	[0x5556b6cced70]:  %35 = xor i64 %31, %34
	[0x5556b6cd0140]:  %61 = xor i64 %60, %51
	}

[0x5556b6c95ee0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x5556b6cb2e40]:  %36 = add nuw nsw i64 %35, %34
	[0x5556b6cd3db0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5556b6c95f60]:   %71 = icmp eq i64 %70, 2 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c95fc8]:   %72 = zext i1 %71 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c96040]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c960c0]:   %73 = add i64 %49, 5 {
	[0x5556b6cd4550]:  %74 = add i64 %50, 5
	[0x5556b6cdf6c0]:  %45 = add i64 %43, 5
	}

[0x5556b6c96140]:   store i64 %73, i64* %PC, align 8 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c961c0]:   %74 = add i64 %48, 24 {
	[0x5556b6cd4860]:  %75 = add i64 %49, 24
	}

[0x5556b6c96228]:   %75 = inttoptr i64 %50 to i64* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c96288]:   %76 = load i64, i64* %75, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c96300]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c96380]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c96400]:   %77 = add i64 %49, 6 {
	[0x5556b6cd6f00]:  %78 = add i64 %50, 6
	}

[0x5556b6c96480]:   store i64 %77, i64* %PC, align 8 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c964e8]:   %78 = inttoptr i64 %74 to i64* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c96548]:   %79 = load i64, i64* %78, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c965c0]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c96640]:   %80 = add i64 %48, 32 {
	[0x5556b6cd7b50]:  %81 = add i64 %49, 32
	}

[0x5556b6c966c0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c96728]:   ret %struct.Memory* %47 {
	[0x5556b6cb6628]:  ret %struct.Memory.31* %call2_4004b4
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5556b6cb12f8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x5556b6c922a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5556b6c85c90]:   %38 = add i64 %5, -12


Uprime Matches: [0x5556b6cb99f0]:   %40 = add i64 %7, -12


Adj: [0x5556b6d6d1b0]:   %47 = add i64 %46, -8


Removing: [0x5556b6cb17b8]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x5556b6c922a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5556b6c85c90]:   %38 = add i64 %5, -12


Uprime Matches: [0x5556b6cb99f0]:   %40 = add i64 %7, -12


Adj: [0x5556b6ccb990]:   %69 = lshr i64 %49, 63
[0x5556b6ccfd70]:   %60 = xor i64 %49, 16
[0x5556b6cd4860]:   %75 = add i64 %49, 24
[0x5556b6cd7b50]:   %81 = add i64 %49, 32
[0x5556b6d6fca0]:   %51 = add i64 %49, 16
[0x5556b6d77040]:   %52 = icmp ugt i64 %49, -17


Removing: [0x5556b6cb11c8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x5556b6c92468]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x5556b6c85d50]:   %39 = add i64 %8, 19


Uprime Matches: [0x5556b6cef7f0]:   %41 = add i64 %10, 19


Adj: [0x5556b6cdf6c0]:   %45 = add i64 %43, 5
[0x5556b6d66790]:   %44 = add i64 %43, -68


Removing: [0x5556b6cb2398]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x5556b6c92468]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x5556b6c85d50]:   %39 = add i64 %8, 19


Uprime Matches: [0x5556b6cef7f0]:   %41 = add i64 %10, 19


Adj: [0x5556b6cd4550]:   %74 = add i64 %50, 5
[0x5556b6cd6f00]:   %78 = add i64 %50, 6


Removing: [0x5556b6cab7e8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6cae800]:   %16 = and i32 %15, 255


Removing: [0x5556b6cb02d8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6d81780]:   %55 = and i32 %54, 255


Removing: [0x5556b6cb0e38]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6cd2690]:   store i8 %32, i8* %33, align 1


Removing: [0x5556b6cb4028]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6cc2840]:   store i8 %68, i8* %33, align 1


Removing: [0x5556b6cafe50]:   %26 = and i8 %25, 1
From the pot matches of: [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime : [0x5556b6c92b70]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5556b6c6e150]:   %59 = xor i8 %58, 1
[0x5556b6caea60]:   %20 = xor i8 %19, 1


Adj: [0x5556b6cad6e0]:   store i8 %26, i8* %27, align 1


Removing: [0x5556b6cd0630]:   %64 = and i8 %63, 1
From the pot matches of: [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime : [0x5556b6c92b70]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5556b6c6e150]:   %59 = xor i8 %58, 1
[0x5556b6caea60]:   %20 = xor i8 %19, 1


Adj: [0x5556b6cd0ef0]:   store i8 %64, i8* %27, align 1


Removing: [0x5556b6ca9518]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5556b6c85f18]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x5556b6c86050]:   %43 = add i64 %41, 5


Uprime Matches: [0x5556b6cd4550]:   %74 = add i64 %50, 5
[0x5556b6cdf6c0]:   %45 = add i64 %43, 5


Adj: [0x5556b6cef7f0]:   %41 = add i64 %10, 19


Removing: [0x5556b6cb2398]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x5556b6c85f18]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x5556b6c85fd0]:   %42 = add i64 %41, -68


Uprime Matches: [0x5556b6d66790]:   %44 = add i64 %43, -68


Adj: [0x5556b6cd4550]:   %74 = add i64 %50, 5
[0x5556b6cd6f00]:   %78 = add i64 %50, 6


Removing: [0x5556b6cb17b8]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x5556b6c860b8]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5556b6c86130]:   %45 = add i64 %44, -8


Uprime Matches: [0x5556b6cac350]:   %8 = add i64 %7, -8
[0x5556b6d6d1b0]:   %47 = add i64 %46, -8


Adj: [0x5556b6ccb990]:   %69 = lshr i64 %49, 63
[0x5556b6ccfd70]:   %60 = xor i64 %49, 16
[0x5556b6cd4860]:   %75 = add i64 %49, 24
[0x5556b6cd7b50]:   %81 = add i64 %49, 32
[0x5556b6d6fca0]:   %51 = add i64 %49, 16
[0x5556b6d77040]:   %52 = icmp ugt i64 %49, -17


Removing: [0x5556b6cac350]:   %8 = add i64 %7, -8
From the pot matches of: [0x5556b6c86130]:   %45 = add i64 %44, -8


Uprime : [0x5556b6c86290]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x5556b6cae4d0]:   store i64 %11, i64* %6, align 8
[0x5556b6cce4d0]:   store i64 %81, i64* %6, align 8
[0x5556b6cd5870]:   store i64 %75, i64* %6, align 8
[0x5556b6d6e950]:   store i64 %47, i64* %6, align 8
[0x5556b6d72c70]:   store i64 %51, i64* %6, align 8


Adj: [0x5556b6c084e8]:   %9 = inttoptr i64 %8 to i64*
[0x5556b6cab8a0]:   store i64 %8, i64* %RBP.i, align 8
[0x5556b6cae5e0]:   %12 = icmp ult i64 %8, 16
[0x5556b6cce2f0]:   %22 = xor i64 %8, 16
[0x5556b6ccee70]:   %34 = lshr i64 %8, 63


Removing: [0x5556b6c1e5c8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5556b6c864d8]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x5556b6c96640]:   %80 = add i64 %48, 32


Uprime Matches: [0x5556b6cd7b50]:   %81 = add i64 %49, 32


Adj: [0x5556b6cac350]:   %8 = add i64 %7, -8
[0x5556b6cae0d0]:   %11 = add i64 %7, -24
[0x5556b6cb99f0]:   %40 = add i64 %7, -12


Removing: [0x5556b6cb12f8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x5556b6c864d8]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x5556b6c96640]:   %80 = add i64 %48, 32


Uprime Matches: [0x5556b6cd7b50]:   %81 = add i64 %49, 32


Adj: [0x5556b6d6d1b0]:   %47 = add i64 %46, -8


Removing: [0x5556b6ca9518]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5556b6c86538]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x5556b6c96400]:   %77 = add i64 %49, 6


Uprime Matches: [0x5556b6cd6f00]:   %78 = add i64 %50, 6


Adj: [0x5556b6cef7f0]:   %41 = add i64 %10, 19


Removing: [0x5556b6cb11c8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x5556b6c86538]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x5556b6c96400]:   %77 = add i64 %49, 6


Uprime Matches: [0x5556b6cd6f00]:   %78 = add i64 %50, 6


Adj: [0x5556b6cdf6c0]:   %45 = add i64 %43, 5
[0x5556b6d66790]:   %44 = add i64 %43, -68


Removing: [0x5556b6cab7e8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6cae800]:   %16 = and i32 %15, 255


Removing: [0x5556b6cb02d8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6d81780]:   %55 = and i32 %54, 255


Removing: [0x5556b6cb0e38]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6cd2690]:   store i8 %32, i8* %33, align 1


Removing: [0x5556b6cb4028]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6cafe50]:   %26 = and i8 %25, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1
[0x5556b6cd0630]:   %64 = and i8 %63, 1


Adj: [0x5556b6cc2840]:   store i8 %68, i8* %33, align 1


Removing: [0x5556b6cafe50]:   %26 = and i8 %25, 1
From the pot matches of: [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime : [0x5556b6c954f0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x5556b6c6e150]:   %59 = xor i8 %58, 1
[0x5556b6caea60]:   %20 = xor i8 %19, 1


Adj: [0x5556b6cad6e0]:   store i8 %26, i8* %27, align 1


Removing: [0x5556b6cd0630]:   %64 = and i8 %63, 1
From the pot matches of: [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime : [0x5556b6c954f0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x5556b6c6e150]:   %59 = xor i8 %58, 1
[0x5556b6caea60]:   %20 = xor i8 %19, 1


Adj: [0x5556b6cd0ef0]:   store i8 %64, i8* %27, align 1

Round: 1

Removing: [0x5556b6cb01a8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1


Adj: [0x5556b6cafe50]:   %26 = and i8 %25, 1


Removing: [0x5556b6cb3578]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1


Adj: [0x5556b6cd0630]:   %64 = and i8 %63, 1


Removing: [0x5556b6c1e5c8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5556b6c860b8]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5556b6c86130]:   %45 = add i64 %44, -8


Uprime Matches: [0x5556b6d6d1b0]:   %47 = add i64 %46, -8


Adj: [0x5556b6cac350]:   %8 = add i64 %7, -8
[0x5556b6cae0d0]:   %11 = add i64 %7, -24
[0x5556b6cb99f0]:   %40 = add i64 %7, -12


Removing: [0x5556b6cb01a8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1


Adj: [0x5556b6cafe50]:   %26 = and i8 %25, 1


Removing: [0x5556b6cb3578]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
[0x5556b6ccda70]:   %19 = and i8 %18, 1


Adj: [0x5556b6cd0630]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x5556b6c0e760]: i64 %1 {
	[0x5556b6cceb70]:i64 %1
	}

[0x5556b6c0e7a0]: %struct.Memory* %2 {
	[0x5556b6cd9a30]:%struct.Memory.31* %2
	}

[0x5556b6c0e978]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5556b6c0ea20]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5556b6cabea0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5556b6c85c90]:   %38 = add i64 %5, -12 {
	[0x5556b6cb99f0]:  %40 = add i64 %7, -12
	}

[0x5556b6c85d50]:   %39 = add i64 %8, 19 {
	[0x5556b6cef7f0]:  %41 = add i64 %10, 19
	}

[0x5556b6c85dd0]:   store i64 %39, i64* %PC, align 8 {
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	}

[0x5556b6c85e38]:   %40 = inttoptr i64 %38 to i32* {
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	}

[0x5556b6c85eb0]:   store i32 0, i32* %40, align 4 {
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	}

[0x5556b6c85f18]:   %41 = load i64, i64* %PC, align 8 {
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	}

[0x5556b6c85fd0]:   %42 = add i64 %41, -68 {
	[0x5556b6d66790]:  %44 = add i64 %43, -68
	}

[0x5556b6c86050]:   %43 = add i64 %41, 5 {
	[0x5556b6cdf6c0]:  %45 = add i64 %43, 5
	}

[0x5556b6c860b8]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	}

[0x5556b6c86130]:   %45 = add i64 %44, -8 {
	[0x5556b6d6d1b0]:  %47 = add i64 %46, -8
	}

[0x5556b6c86198]:   %46 = inttoptr i64 %45 to i64* {
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5556b6c86210]:   store i64 %43, i64* %46, align 8 {
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	}

[0x5556b6c86290]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	}

[0x5556b6c86310]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	}

[0x5556b6c86410]:   %47 = tail call %struct.Memory* @sub_400470_get_sign(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5556b6cb77e0]:  %call2_4004b4 = tail call %struct.Memory.31* @sub_400470.get_sign(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x5556b6c864d8]:   %48 = load i64, i64* %RSP, align 8 {
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	}

[0x5556b6c86538]:   %49 = load i64, i64* %PC, align 8 {
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	}

[0x5556b6c865b0]:   %50 = add i64 %48, 16 {
	[0x5556b6d6fca0]:  %51 = add i64 %49, 16
	}

[0x5556b6c86630]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c866f0]:   %51 = icmp ugt i64 %48, -17 {
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c86758]:   %52 = zext i1 %51 to i8 {
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	}

[0x5556b6c867d0]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	}

[0x5556b6c90f30]: %struct.State* %0 {
	[0x5556b6cd7560]:%struct.State.0* %0
	}

[0x5556b6c91dd0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5556b6c151e0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5556b6c91ec0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5556b6c559a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5556b6c91fb0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5556b6c54700]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5556b6c920c0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5556b6c53a50]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5556b6c92170]:   %4 = add i64 %1, 1 {
	[0x5556b6c098e0]:  %5 = add i64 %1, 1
	}

[0x5556b6c92240]:   store i64 %4, i64* %PC, align 8 {
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	}

[0x5556b6c922a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	}

[0x5556b6c92320]:   %6 = add i64 %5, -8 {
	[0x5556b6cac350]:  %8 = add i64 %7, -8
	}

[0x5556b6c92388]:   %7 = inttoptr i64 %6 to i64* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5556b6c92400]:   store i64 %3, i64* %7, align 8 {
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	}

[0x5556b6c92468]:   %8 = load i64, i64* %PC, align 8 {
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	}

[0x5556b6c924e0]:   %17 = and i8 %16, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	}

[0x5556b6c92570]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5556b6c925f0]:   %9 = add i64 %5, -24 {
	[0x5556b6cae0d0]:  %11 = add i64 %7, -24
	}

[0x5556b6c92670]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	}

[0x5556b6c926f0]:   %10 = icmp ult i64 %6, 16 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	}

[0x5556b6c92758]:   %11 = zext i1 %10 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	}

[0x5556b6c927d0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	}

[0x5556b6c92838]:   %13 = trunc i64 %9 to i32 {
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	}

[0x5556b6c928b0]:   %14 = and i32 %13, 255 {
	[0x5556b6cae800]:  %16 = and i32 %15, 255
	}

[0x5556b6c92970]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5556b6cadc50]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5556b6c929e8]:   %16 = trunc i32 %15 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	}

[0x5556b6c92a60]:   %33 = xor i64 %29, %32 {
	[0x5556b6cced70]:  %35 = xor i64 %31, %34
	}

[0x5556b6c92ae0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5556b6cb2e40]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5556b6c92b70]:   %18 = xor i8 %17, 1 {
	[0x5556b6c6e150]:  %59 = xor i8 %58, 1
	[0x5556b6caea60]:  %20 = xor i8 %19, 1
	}

[0x5556b6c92c20]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5556b6caeb60]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5556b6c92cb0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	}

[0x5556b6c92d30]:   %20 = xor i64 %6, 16 {
	[0x5556b6cce2f0]:  %22 = xor i64 %8, 16
	}

[0x5556b6c92db0]:   %21 = xor i64 %20, %9 {
	[0x5556b6caf0c0]:  %23 = xor i64 %22, %11
	}

[0x5556b6c92e30]:   %22 = lshr i64 %21, 4 {
	[0x5556b6caf190]:  %24 = lshr i64 %23, 4
	}

[0x5556b6c92e98]:   %23 = trunc i64 %22 to i8 {
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	}

[0x5556b6c92f10]:   %24 = and i8 %23, 1 {
	[0x5556b6cafe50]:  %26 = and i8 %25, 1
	}

[0x5556b6c92fc0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5556b6cb03f0]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5556b6c93050]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	}

[0x5556b6c930d0]:   %26 = icmp eq i64 %9, 0 {
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	}

[0x5556b6c93138]:   %27 = zext i1 %26 to i8 {
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	}

[0x5556b6c931e0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5556b6cb71f0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5556b6c93270]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	}

[0x5556b6c932f0]:   %29 = lshr i64 %9, 63 {
	[0x5556b6cd2360]:  %31 = lshr i64 %11, 63
	}

[0x5556b6c93358]:   %30 = trunc i64 %29 to i8 {
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	}

[0x5556b6c93400]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5556b6cb7450]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5556b6c93490]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	}

[0x5556b6c93510]:   %32 = lshr i64 %6, 63 {
	[0x5556b6ccee70]:  %34 = lshr i64 %8, 63
	}

[0x5556b6c93578]:   %65 = zext i1 %64 to i8 {
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	}

[0x5556b6c935f0]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	}

[0x5556b6c93670]:   %66 = lshr i64 %50, 63 {
	[0x5556b6cd1790]:  %67 = lshr i64 %51, 63
	}

[0x5556b6c936d8]:   %67 = trunc i64 %66 to i8 {
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c937a0]:   %35 = icmp eq i64 %34, 2 {
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	}

[0x5556b6c93808]:   %36 = zext i1 %35 to i8 {
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	}

[0x5556b6c938b0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5556b6cb7580]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5556b6c93940]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	}

[0x5556b6c939c0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5556b6c95238]:   %53 = trunc i64 %50 to i32 {
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	}

[0x5556b6c952b0]:   %54 = and i32 %53, 255 {
	[0x5556b6d81780]:  %55 = and i32 %54, 255
	}

[0x5556b6c95330]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x5556b6ccf300]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5556b6c953f8]:   %56 = trunc i32 %55 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	}

[0x5556b6c95470]:   %57 = and i8 %56, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	}

[0x5556b6c954f0]:   %58 = xor i8 %57, 1 {
	[0x5556b6c6e150]:  %59 = xor i8 %58, 1
	[0x5556b6caea60]:  %20 = xor i8 %19, 1
	}

[0x5556b6c95570]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	}

[0x5556b6c955f0]:   %59 = xor i64 %48, 16 {
	[0x5556b6ccfd70]:  %60 = xor i64 %49, 16
	}

[0x5556b6c95670]:   %60 = xor i64 %59, %50 {
	[0x5556b6cd0140]:  %61 = xor i64 %60, %51
	}

[0x5556b6c956f0]:   %61 = lshr i64 %60, 4 {
	[0x5556b6cd0240]:  %62 = lshr i64 %61, 4
	}

[0x5556b6c95758]:   %62 = trunc i64 %61 to i8 {
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	}

[0x5556b6c957d0]:   %63 = and i8 %62, 1 {
	[0x5556b6cd0630]:  %64 = and i8 %63, 1
	}

[0x5556b6c95850]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	}

[0x5556b6c958d0]:   %64 = icmp eq i64 %50, 0 {
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	}

[0x5556b6c95d60]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	}

[0x5556b6c95de0]:   %68 = lshr i64 %48, 63 {
	[0x5556b6ccb990]:  %69 = lshr i64 %49, 63
	}

[0x5556b6c95e60]:   %69 = xor i64 %66, %68 {
	[0x5556b6ccba80]:  %70 = xor i64 %67, %69
	}

[0x5556b6c95ee0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x5556b6cd3db0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5556b6c95f60]:   %71 = icmp eq i64 %70, 2 {
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	}

[0x5556b6c95fc8]:   %72 = zext i1 %71 to i8 {
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c96040]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	}

[0x5556b6c960c0]:   %73 = add i64 %49, 5 {
	[0x5556b6cd4550]:  %74 = add i64 %50, 5
	}

[0x5556b6c96140]:   store i64 %73, i64* %PC, align 8 {
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	}

[0x5556b6c961c0]:   %74 = add i64 %48, 24 {
	[0x5556b6cd4860]:  %75 = add i64 %49, 24
	}

[0x5556b6c96228]:   %75 = inttoptr i64 %50 to i64* {
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	}

[0x5556b6c96288]:   %76 = load i64, i64* %75, align 8 {
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	}

[0x5556b6c96300]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x5556b6c96380]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	}

[0x5556b6c96400]:   %77 = add i64 %49, 6 {
	[0x5556b6cd6f00]:  %78 = add i64 %50, 6
	}

[0x5556b6c96480]:   store i64 %77, i64* %PC, align 8 {
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	}

[0x5556b6c964e8]:   %78 = inttoptr i64 %74 to i64* {
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c96548]:   %79 = load i64, i64* %78, align 8 {
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c965c0]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	}

[0x5556b6c96640]:   %80 = add i64 %48, 32 {
	[0x5556b6cd7b50]:  %81 = add i64 %49, 32
	}

[0x5556b6c966c0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	}

[0x5556b6c96728]:   ret %struct.Memory* %47 {
	[0x5556b6cb6628]:  ret %struct.Memory.31* %call2_4004b4
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5556b6c0e800]: block_4004a0 {
	[0x5556b6cae010]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5556b6c6e150]:   %59 = xor i8 %58, 1
From the pot matches of: [0x5556b6c92b70]:   %18 = xor i8 %17, 1


Uprime : [0x5556b6c92cb0]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x5556b6caec40]:   store i8 %20, i8* %21, align 1


Adj: [0x5556b6c16040]:   store i8 %59, i8* %21, align 1


Removing: [0x5556b6caea60]:   %20 = xor i8 %19, 1
From the pot matches of: [0x5556b6c954f0]:   %58 = xor i8 %57, 1


Uprime : [0x5556b6c95570]:   store i8 %58, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x5556b6c16040]:   store i8 %59, i8* %21, align 1


Adj: [0x5556b6caec40]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1
From the pot matches of: [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime : [0x5556b6c92b70]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5556b6caea60]:   %20 = xor i8 %19, 1


Adj: [0x5556b6c6e150]:   %59 = xor i8 %58, 1


Removing: [0x5556b6ccda70]:   %19 = and i8 %18, 1
From the pot matches of: [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime : [0x5556b6c954f0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x5556b6c6e150]:   %59 = xor i8 %58, 1


Adj: [0x5556b6caea60]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x5556b6cb3448]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x5556b6c929e8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5556b6c924e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5556b6ccda70]:   %19 = and i8 %18, 1


Adj: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1


Removing: [0x5556b6caaf48]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x5556b6c953f8]:   %56 = trunc i32 %55 to i8


Uprime : [0x5556b6c95470]:   %57 = and i8 %56, 1


Uprime Matches: [0x5556b6c6e5b0]:   %58 = and i8 %57, 1


Adj: [0x5556b6ccda70]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x5556b6c0e760]: i64 %1 {
	[0x5556b6cceb70]:i64 %1
	}

[0x5556b6c0e7a0]: %struct.Memory* %2 {
	[0x5556b6cd9a30]:%struct.Memory.31* %2
	}

[0x5556b6c0e978]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5556b6c1bd78]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5556b6c0ea20]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5556b6cabea0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5556b6c85c90]:   %38 = add i64 %5, -12 {
	[0x5556b6cb99f0]:  %40 = add i64 %7, -12
	}

[0x5556b6c85d50]:   %39 = add i64 %8, 19 {
	[0x5556b6cef7f0]:  %41 = add i64 %10, 19
	}

[0x5556b6c85dd0]:   store i64 %39, i64* %PC, align 8 {
	[0x5556b6cee240]:  store i64 %41, i64* %3, align 8
	}

[0x5556b6c85e38]:   %40 = inttoptr i64 %38 to i32* {
	[0x5556b6cb1098]:  %42 = inttoptr i64 %40 to i32*
	}

[0x5556b6c85eb0]:   store i32 0, i32* %40, align 4 {
	[0x5556b6d67ca0]:  store i32 0, i32* %42, align 4
	}

[0x5556b6c85f18]:   %41 = load i64, i64* %PC, align 8 {
	[0x5556b6cb11c8]:  %43 = load i64, i64* %3, align 8
	}

[0x5556b6c85fd0]:   %42 = add i64 %41, -68 {
	[0x5556b6d66790]:  %44 = add i64 %43, -68
	}

[0x5556b6c86050]:   %43 = add i64 %41, 5 {
	[0x5556b6cdf6c0]:  %45 = add i64 %43, 5
	}

[0x5556b6c860b8]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cb12f8]:  %46 = load i64, i64* %6, align 8
	}

[0x5556b6c86130]:   %45 = add i64 %44, -8 {
	[0x5556b6d6d1b0]:  %47 = add i64 %46, -8
	}

[0x5556b6c86198]:   %46 = inttoptr i64 %45 to i64* {
	[0x5556b6cb1558]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5556b6c86210]:   store i64 %43, i64* %46, align 8 {
	[0x5556b6d6c3e0]:  store i64 %45, i64* %48, align 8
	}

[0x5556b6c86290]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6d6e950]:  store i64 %47, i64* %6, align 8
	}

[0x5556b6c86310]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x5556b6d71140]:  store i64 %44, i64* %3, align 8
	}

[0x5556b6c86410]:   %47 = tail call %struct.Memory* @sub_400470_get_sign(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5556b6cb77e0]:  %call2_4004b4 = tail call %struct.Memory.31* @sub_400470.get_sign(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x5556b6c864d8]:   %48 = load i64, i64* %RSP, align 8 {
	[0x5556b6cb17b8]:  %49 = load i64, i64* %6, align 8
	}

[0x5556b6c86538]:   %49 = load i64, i64* %PC, align 8 {
	[0x5556b6cb2398]:  %50 = load i64, i64* %3, align 8
	}

[0x5556b6c865b0]:   %50 = add i64 %48, 16 {
	[0x5556b6d6fca0]:  %51 = add i64 %49, 16
	}

[0x5556b6c86630]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6d72c70]:  store i64 %51, i64* %6, align 8
	}

[0x5556b6c866f0]:   %51 = icmp ugt i64 %48, -17 {
	[0x5556b6d77040]:  %52 = icmp ugt i64 %49, -17
	}

[0x5556b6c86758]:   %52 = zext i1 %51 to i8 {
	[0x5556b6cb24c8]:  %53 = zext i1 %52 to i8
	}

[0x5556b6c867d0]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x5556b6ce75b0]:  store i8 %53, i8* %14, align 1
	}

[0x5556b6c90f30]: %struct.State* %0 {
	[0x5556b6cd7560]:%struct.State.0* %0
	}

[0x5556b6c91dd0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5556b6c151e0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5556b6c91ec0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5556b6c559a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5556b6c91fb0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5556b6c54700]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5556b6c920c0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5556b6c53a50]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5556b6c92170]:   %4 = add i64 %1, 1 {
	[0x5556b6c098e0]:  %5 = add i64 %1, 1
	}

[0x5556b6c92240]:   store i64 %4, i64* %PC, align 8 {
	[0x5556b6cac240]:  store i64 %5, i64* %3, align 8
	}

[0x5556b6c922a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6c1e5c8]:  %7 = load i64, i64* %6, align 8
	}

[0x5556b6c92320]:   %6 = add i64 %5, -8 {
	[0x5556b6cac350]:  %8 = add i64 %7, -8
	}

[0x5556b6c92388]:   %7 = inttoptr i64 %6 to i64* {
	[0x5556b6c084e8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5556b6c92400]:   store i64 %3, i64* %7, align 8 {
	[0x5556b6cad310]:  store i64 %4, i64* %9, align 8
	}

[0x5556b6c92468]:   %8 = load i64, i64* %PC, align 8 {
	[0x5556b6ca9518]:  %10 = load i64, i64* %3, align 8
	}

[0x5556b6c924e0]:   %17 = and i8 %16, 1 {
	[0x5556b6ccda70]:  %19 = and i8 %18, 1
	}

[0x5556b6c92570]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x5556b6cab8a0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5556b6c925f0]:   %9 = add i64 %5, -24 {
	[0x5556b6cae0d0]:  %11 = add i64 %7, -24
	}

[0x5556b6c92670]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cae4d0]:  store i64 %11, i64* %6, align 8
	}

[0x5556b6c926f0]:   %10 = icmp ult i64 %6, 16 {
	[0x5556b6cae5e0]:  %12 = icmp ult i64 %8, 16
	}

[0x5556b6c92758]:   %11 = zext i1 %10 to i8 {
	[0x5556b6ca95a8]:  %13 = zext i1 %12 to i8
	}

[0x5556b6c927d0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x5556b6cae6f0]:  store i8 %13, i8* %14, align 1
	}

[0x5556b6c92838]:   %13 = trunc i64 %9 to i32 {
	[0x5556b6cab7e8]:  %15 = trunc i64 %11 to i32
	}

[0x5556b6c928b0]:   %14 = and i32 %13, 255 {
	[0x5556b6cae800]:  %16 = and i32 %15, 255
	}

[0x5556b6c92970]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5556b6cadc50]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5556b6c929e8]:   %16 = trunc i32 %15 to i8 {
	[0x5556b6caaf48]:  %18 = trunc i32 %17 to i8
	}

[0x5556b6c92a60]:   %33 = xor i64 %29, %32 {
	[0x5556b6cced70]:  %35 = xor i64 %31, %34
	}

[0x5556b6c92ae0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5556b6cb2e40]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5556b6c92b70]:   %18 = xor i8 %17, 1 {
	[0x5556b6caea60]:  %20 = xor i8 %19, 1
	}

[0x5556b6c92c20]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5556b6caeb60]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5556b6c92cb0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x5556b6caec40]:  store i8 %20, i8* %21, align 1
	}

[0x5556b6c92d30]:   %20 = xor i64 %6, 16 {
	[0x5556b6cce2f0]:  %22 = xor i64 %8, 16
	}

[0x5556b6c92db0]:   %21 = xor i64 %20, %9 {
	[0x5556b6caf0c0]:  %23 = xor i64 %22, %11
	}

[0x5556b6c92e30]:   %22 = lshr i64 %21, 4 {
	[0x5556b6caf190]:  %24 = lshr i64 %23, 4
	}

[0x5556b6c92e98]:   %23 = trunc i64 %22 to i8 {
	[0x5556b6cb01a8]:  %25 = trunc i64 %24 to i8
	}

[0x5556b6c92f10]:   %24 = and i8 %23, 1 {
	[0x5556b6cafe50]:  %26 = and i8 %25, 1
	}

[0x5556b6c92fc0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5556b6cb03f0]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5556b6c93050]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x5556b6cad6e0]:  store i8 %26, i8* %27, align 1
	}

[0x5556b6c930d0]:   %26 = icmp eq i64 %9, 0 {
	[0x5556b6cd0b00]:  %28 = icmp eq i64 %11, 0
	}

[0x5556b6c93138]:   %27 = zext i1 %26 to i8 {
	[0x5556b6cb0848]:  %29 = zext i1 %28 to i8
	}

[0x5556b6c931e0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5556b6cb71f0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5556b6c93270]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x5556b6cd1520]:  store i8 %29, i8* %30, align 1
	}

[0x5556b6c932f0]:   %29 = lshr i64 %9, 63 {
	[0x5556b6cd2360]:  %31 = lshr i64 %11, 63
	}

[0x5556b6c93358]:   %30 = trunc i64 %29 to i8 {
	[0x5556b6cb0e38]:  %32 = trunc i64 %31 to i8
	}

[0x5556b6c93400]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5556b6cb7450]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5556b6c93490]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x5556b6cd2690]:  store i8 %32, i8* %33, align 1
	}

[0x5556b6c93510]:   %32 = lshr i64 %6, 63 {
	[0x5556b6ccee70]:  %34 = lshr i64 %8, 63
	}

[0x5556b6c93578]:   %65 = zext i1 %64 to i8 {
	[0x5556b6cb3ef8]:  %66 = zext i1 %65 to i8
	}

[0x5556b6c935f0]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x5556b6ccf180]:  store i8 %66, i8* %30, align 1
	}

[0x5556b6c93670]:   %66 = lshr i64 %50, 63 {
	[0x5556b6cd1790]:  %67 = lshr i64 %51, 63
	}

[0x5556b6c936d8]:   %67 = trunc i64 %66 to i8 {
	[0x5556b6cb4028]:  %68 = trunc i64 %67 to i8
	}

[0x5556b6c937a0]:   %35 = icmp eq i64 %34, 2 {
	[0x5556b6cb9660]:  %37 = icmp eq i64 %36, 2
	}

[0x5556b6c93808]:   %36 = zext i1 %35 to i8 {
	[0x5556b6cb0f68]:  %38 = zext i1 %37 to i8
	}

[0x5556b6c938b0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5556b6cb7580]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5556b6c93940]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x5556b6cb9790]:  store i8 %38, i8* %39, align 1
	}

[0x5556b6c939c0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x5556b6cb98c0]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5556b6c95238]:   %53 = trunc i64 %50 to i32 {
	[0x5556b6cb02d8]:  %54 = trunc i64 %51 to i32
	}

[0x5556b6c952b0]:   %54 = and i32 %53, 255 {
	[0x5556b6d81780]:  %55 = and i32 %54, 255
	}

[0x5556b6c95330]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x5556b6ccf300]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5556b6c953f8]:   %56 = trunc i32 %55 to i8 {
	[0x5556b6cb3448]:  %57 = trunc i32 %56 to i8
	}

[0x5556b6c95470]:   %57 = and i8 %56, 1 {
	[0x5556b6c6e5b0]:  %58 = and i8 %57, 1
	}

[0x5556b6c954f0]:   %58 = xor i8 %57, 1 {
	[0x5556b6c6e150]:  %59 = xor i8 %58, 1
	}

[0x5556b6c95570]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x5556b6c16040]:  store i8 %59, i8* %21, align 1
	}

[0x5556b6c955f0]:   %59 = xor i64 %48, 16 {
	[0x5556b6ccfd70]:  %60 = xor i64 %49, 16
	}

[0x5556b6c95670]:   %60 = xor i64 %59, %50 {
	[0x5556b6cd0140]:  %61 = xor i64 %60, %51
	}

[0x5556b6c956f0]:   %61 = lshr i64 %60, 4 {
	[0x5556b6cd0240]:  %62 = lshr i64 %61, 4
	}

[0x5556b6c95758]:   %62 = trunc i64 %61 to i8 {
	[0x5556b6cb3578]:  %63 = trunc i64 %62 to i8
	}

[0x5556b6c957d0]:   %63 = and i8 %62, 1 {
	[0x5556b6cd0630]:  %64 = and i8 %63, 1
	}

[0x5556b6c95850]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x5556b6cd0ef0]:  store i8 %64, i8* %27, align 1
	}

[0x5556b6c958d0]:   %64 = icmp eq i64 %50, 0 {
	[0x5556b6cd1310]:  %65 = icmp eq i64 %51, 0
	}

[0x5556b6c95d60]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x5556b6cc2840]:  store i8 %68, i8* %33, align 1
	}

[0x5556b6c95de0]:   %68 = lshr i64 %48, 63 {
	[0x5556b6ccb990]:  %69 = lshr i64 %49, 63
	}

[0x5556b6c95e60]:   %69 = xor i64 %66, %68 {
	[0x5556b6ccba80]:  %70 = xor i64 %67, %69
	}

[0x5556b6c95ee0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x5556b6cd3db0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5556b6c95f60]:   %71 = icmp eq i64 %70, 2 {
	[0x5556b6cd3f30]:  %72 = icmp eq i64 %71, 2
	}

[0x5556b6c95fc8]:   %72 = zext i1 %71 to i8 {
	[0x5556b6cb44e8]:  %73 = zext i1 %72 to i8
	}

[0x5556b6c96040]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x5556b6cd4240]:  store i8 %73, i8* %39, align 1
	}

[0x5556b6c960c0]:   %73 = add i64 %49, 5 {
	[0x5556b6cd4550]:  %74 = add i64 %50, 5
	}

[0x5556b6c96140]:   store i64 %73, i64* %PC, align 8 {
	[0x5556b6cd4650]:  store i64 %74, i64* %3, align 8
	}

[0x5556b6c961c0]:   %74 = add i64 %48, 24 {
	[0x5556b6cd4860]:  %75 = add i64 %49, 24
	}

[0x5556b6c96228]:   %75 = inttoptr i64 %50 to i64* {
	[0x5556b6cb4748]:  %76 = inttoptr i64 %51 to i64*
	}

[0x5556b6c96288]:   %76 = load i64, i64* %75, align 8 {
	[0x5556b6cb4878]:  %77 = load i64, i64* %76, align 8
	}

[0x5556b6c96300]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x5556b6cabbf0]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x5556b6c96380]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cd5870]:  store i64 %75, i64* %6, align 8
	}

[0x5556b6c96400]:   %77 = add i64 %49, 6 {
	[0x5556b6cd6f00]:  %78 = add i64 %50, 6
	}

[0x5556b6c96480]:   store i64 %77, i64* %PC, align 8 {
	[0x5556b6cd7410]:  store i64 %78, i64* %3, align 8
	}

[0x5556b6c964e8]:   %78 = inttoptr i64 %74 to i64* {
	[0x5556b6cb4e68]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5556b6c96548]:   %79 = load i64, i64* %78, align 8 {
	[0x5556b6cb5a48]:  %80 = load i64, i64* %79, align 8
	}

[0x5556b6c965c0]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x5556b6cd7a60]:  store i64 %80, i64* %3, align 8
	}

[0x5556b6c96640]:   %80 = add i64 %48, 32 {
	[0x5556b6cd7b50]:  %81 = add i64 %49, 32
	}

[0x5556b6c966c0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x5556b6cce4d0]:  store i64 %81, i64* %6, align 8
	}

[0x5556b6c96728]:   ret %struct.Memory* %47 {
	[0x5556b6cb6628]:  ret %struct.Memory.31* %call2_4004b4
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5556b6c0e800]: block_4004a0 {
	[0x5556b6cae010]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
