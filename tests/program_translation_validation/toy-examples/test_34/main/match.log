Matching sub_400500_main Vs main


[Info] Retrieve Potential Matches...
[0x55853ac21930]: %struct.State* %0 {
	[0x55853ac30db0]:%struct.State.1* %0
	}

[0x55853ac21970]: i64 %1 {
	[0x55853ac31a60]:i64 %1
	}

[0x55853ac219b0]: %struct.Memory* %2 {
	[0x55853ac324b0]:%struct.Memory.32* %2
	}

[0x55853ac21b68]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55853aca3758]:  %AL.i = bitcast %union.anon.5* %45 to i8*
	[0x55853aca42f8]:  %EAX.i = bitcast %union.anon.5* %45 to i32*
	[0x55853acdf508]:  %ESI.i9 = bitcast %union.anon.5* %44 to i32*
	}

[0x55853ac21c40]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55853ac5a720]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55853ac21cb8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x55853aca3758]:  %AL.i = bitcast %union.anon.5* %45 to i8*
	[0x55853aca42f8]:  %EAX.i = bitcast %union.anon.5* %45 to i32*
	[0x55853acdf508]:  %ESI.i9 = bitcast %union.anon.5* %44 to i32*
	}

[0x55853ac21d88]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x55853aca3758]:  %AL.i = bitcast %union.anon.5* %45 to i8*
	[0x55853aca42f8]:  %EAX.i = bitcast %union.anon.5* %45 to i32*
	[0x55853acdf508]:  %ESI.i9 = bitcast %union.anon.5* %44 to i32*
	}

[0x55853ac21e38]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55853ac0d138]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %45, i64 0, i32 0
	[0x55853ac2b4b8]:  %RSI.i13 = getelementptr inbounds %union.anon.5, %union.anon.5* %44, i64 0, i32 0
	}

[0x55853ac21ef8]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x55853ac0d138]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %45, i64 0, i32 0
	[0x55853ac2b4b8]:  %RSI.i13 = getelementptr inbounds %union.anon.5, %union.anon.5* %44, i64 0, i32 0
	}

[0x55853ac22000]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55853ac95800]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55853ac22110]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55853ac97b40]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55853ac22220]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55853ac97f00]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55853ac222b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac22330]:   %6 = add i64 %1, 1 {
	[0x55853ac2dcc0]:  %5 = add i64 %1, 1
	}

[0x55853ac223b0]:   store i64 %6, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22418]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac22490]:   %8 = add i64 %7, -8 {
	[0x55853ac2d680]:  %8 = add i64 %7, -8
	[0x55853ac33310]:  %53 = add i64 %52, -8
	[0x55853aca34f0]:  %49 = add i64 %48, -8
	}

[0x55853ac22510]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55853ac30f70]:  %call2_40052d = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %46, %struct.Memory.32* %2)
	[0x55853ac7c7b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55853acbfc50]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x55853ac22588]:   %9 = inttoptr i64 %8 to i64* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac22600]:   store i64 %5, i64* %9, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22668]:   %10 = load i64, i64* %PC, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac226e0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22760]:   %11 = add i64 %7, -24 {
	[0x55853acdb810]:  %11 = add i64 %7, -24
	}

[0x55853ac227e0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22860]:   %12 = icmp ult i64 %8, 16 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac228c8]:   %13 = zext i1 %12 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac22970]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55853ad77ab0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55853ac22a00]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22a68]:   %15 = trunc i64 %11 to i32 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac22ae0]:   %16 = and i32 %15, 255 {
	[0x55853ac2fbd0]:  %16 = and i32 %15, 255
	[0x55853ac33ed0]:  %65 = and i32 %64, 255
	}

[0x55853ac22b88]:   %18 = trunc i32 %17 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac22c00]:   %19 = and i8 %18, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	[0x55853ac30d00]:  %26 = and i8 %25, 1
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	[0x55853ac387b0]:  %74 = and i8 %73, 1
	}

[0x55853ac22c80]:   %20 = xor i8 %19, 1 {
	[0x55853ac33ba0]:  %69 = xor i8 %68, 1
	[0x55853aca23f0]:  %20 = xor i8 %19, 1
	}

[0x55853ac22d30]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55853acd7c40]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55853ac22dc0]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22e40]:   %22 = xor i64 %8, 16 {
	[0x55853ac33e00]:  %70 = xor i64 %60, 16
	[0x55853aca22e0]:  %22 = xor i64 %8, 16
	}

[0x55853ac22ec0]:   %23 = xor i64 %22, %11 {
	[0x55853ac2f3d0]:  %23 = xor i64 %22, %11
	[0x55853ac30770]:  %80 = xor i64 %77, %79
	[0x55853ac30e60]:  %35 = xor i64 %31, %34
	[0x55853ac38af0]:  %71 = xor i64 %70, %61
	}

[0x55853ac22f40]:   %24 = lshr i64 %23, 4 {
	[0x55853ac38910]:  %72 = lshr i64 %71, 4
	[0x55853aca2830]:  %24 = lshr i64 %23, 4
	}

[0x55853ac22fa8]:   %25 = trunc i64 %24 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac23020]:   %26 = and i8 %25, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	[0x55853ac30d00]:  %26 = and i8 %25, 1
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	[0x55853ac387b0]:  %74 = and i8 %73, 1
	}

[0x55853ac230d0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55853ac3ae60]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55853ac23160]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac231e0]:   %28 = icmp eq i64 %11, 0 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac23248]:   %29 = zext i1 %28 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac232f0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55853ac35f00]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55853ac23380]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23400]:   %31 = lshr i64 %11, 63 {
	[0x55853ac308d0]:  %79 = lshr i64 %60, 63
	[0x55853ac36280]:  %77 = lshr i64 %61, 63
	[0x55853aca13c0]:  %34 = lshr i64 %8, 63
	[0x55853aca15c0]:  %31 = lshr i64 %11, 63
	}

[0x55853ac23468]:   %32 = trunc i64 %31 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac23510]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55853ac32900]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55853ac235a0]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23620]:   %34 = lshr i64 %8, 63 {
	[0x55853ac308d0]:  %79 = lshr i64 %60, 63
	[0x55853ac36280]:  %77 = lshr i64 %61, 63
	[0x55853aca13c0]:  %34 = lshr i64 %8, 63
	[0x55853aca15c0]:  %31 = lshr i64 %11, 63
	}

[0x55853ac236a0]:   %35 = xor i64 %31, %34 {
	[0x55853ac2f3d0]:  %23 = xor i64 %22, %11
	[0x55853ac30770]:  %80 = xor i64 %77, %79
	[0x55853ac30e60]:  %35 = xor i64 %31, %34
	[0x55853ac38af0]:  %71 = xor i64 %70, %61
	}

[0x55853ac23720]:   %36 = add nuw nsw i64 %35, %34 {
	[0x55853ac30650]:  %81 = add nuw nsw i64 %80, %77
	[0x55853aca32d0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55853ac237a0]:   %37 = icmp eq i64 %36, 2 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac23808]:   %38 = zext i1 %37 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac238b0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55853ac32690]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55853ac23940]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23a60]:   store i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23b20]:   %40 = add i64 %7, -12 {
	[0x55853ac31700]:  %40 = add i64 %7, -12
	}

[0x55853ac23ba0]:   %41 = add i64 %10, 24 {
	[0x55853ac30a30]:  %85 = add i64 %60, 24
	[0x55853ac31390]:  %41 = add i64 %10, 24
	}

[0x55853ac23c20]:   store i64 %41, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23c88]:   %42 = inttoptr i64 %40 to i32* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac23d00]:   store i32 0, i32* %42, align 4 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23d68]:   %43 = load i64, i64* %PC, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac23e60]:   store i32 10, i32* bitcast (%XYZ_type* @XYZ to i32*), align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23ee0]:   store i64 10, i64* %RSI, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23f60]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24020]:   %44 = add i64 %43, -281 {
	[0x55853ac31f20]:  %46 = add i64 %43, -281
	}

[0x55853ac240e0]:   %45 = add i64 %43, 25 {
	[0x55853ac31c60]:  %47 = add i64 %43, 25
	}

[0x55853ac24148]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac241c0]:   %47 = add i64 %46, -8 {
	[0x55853ac2d680]:  %8 = add i64 %7, -8
	[0x55853ac33310]:  %53 = add i64 %52, -8
	[0x55853aca34f0]:  %49 = add i64 %48, -8
	}

[0x55853ac24228]:   %48 = inttoptr i64 %47 to i64* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac242a0]:   store i64 %45, i64* %48, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24320]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac243a0]:   store i64 %44, i64* %PC, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac245a8]:   %49 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x55853ac30f70]:  %call2_40052d = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %46, %struct.Memory.32* %2)
	[0x55853ac7c7b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55853acbfc50]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x55853ac24668]:   %50 = load i64, i64* %PC, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac246e0]:   store i64 0, i64* %RSI, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24748]:   %51 = load i64, i64* %RBP, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac247c0]:   %52 = add i64 %51, -8 {
	[0x55853ac2d680]:  %8 = add i64 %7, -8
	[0x55853ac33310]:  %53 = add i64 %52, -8
	[0x55853aca34f0]:  %49 = add i64 %48, -8
	}

[0x55853ac24828]:   %53 = load i32, i32* %EAX, align 4 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac248a0]:   %54 = add i64 %50, 5 {
	[0x55853ac330e0]:  %55 = add i64 %51, 5
	}

[0x55853ac24920]:   store i64 %54, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24988]:   %55 = inttoptr i64 %52 to i32* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac24a00]:   store i32 %53, i32* %55, align 4 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24a68]:   %56 = load i32, i32* %ESI, align 4 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac24ac8]:   %57 = zext i32 %56 to i64 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac24b28]:   %58 = load i64, i64* %PC, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac24ba0]:   store i64 %57, i64* %RAX, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24c08]:   %59 = load i64, i64* %RSP, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac24c80]:   %60 = add i64 %59, 16 {
	[0x55853ac33980]:  %61 = add i64 %60, 16
	}

[0x55853ac24d00]:   store i64 %60, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24dc0]:   %61 = icmp ugt i64 %59, -17 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac24e28]:   %62 = zext i1 %61 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac24ea0]:   store i8 %62, i8* %14, align 1, !tbaa !1265 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac24f08]:   %63 = trunc i64 %60 to i32 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac24f80]:   %64 = and i32 %63, 255 {
	[0x55853ac2fbd0]:  %16 = and i32 %15, 255
	[0x55853ac33ed0]:  %65 = and i32 %64, 255
	}

[0x55853ac25020]:   %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9 {
	[0x55853ac30f70]:  %call2_40052d = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %46, %struct.Memory.32* %2)
	[0x55853ac7c7b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55853acbfc50]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x55853ac250e8]:   %66 = trunc i32 %65 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac887b0]:   %67 = and i8 %66, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	[0x55853ac30d00]:  %26 = and i8 %25, 1
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	[0x55853ac387b0]:  %74 = and i8 %73, 1
	}

[0x55853ac88830]:   %68 = xor i8 %67, 1 {
	[0x55853ac33ba0]:  %69 = xor i8 %68, 1
	[0x55853aca23f0]:  %20 = xor i8 %19, 1
	}

[0x55853ac888b0]:   store i8 %68, i8* %21, align 1, !tbaa !1279 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac88930]:   %69 = xor i64 %59, 16 {
	[0x55853ac33e00]:  %70 = xor i64 %60, 16
	[0x55853aca22e0]:  %22 = xor i64 %8, 16
	}

[0x55853ac889b0]:   %70 = xor i64 %69, %60 {
	[0x55853ac2f3d0]:  %23 = xor i64 %22, %11
	[0x55853ac30770]:  %80 = xor i64 %77, %79
	[0x55853ac30e60]:  %35 = xor i64 %31, %34
	[0x55853ac38af0]:  %71 = xor i64 %70, %61
	}

[0x55853ac88a30]:   %71 = lshr i64 %70, 4 {
	[0x55853ac38910]:  %72 = lshr i64 %71, 4
	[0x55853aca2830]:  %24 = lshr i64 %23, 4
	}

[0x55853ac88a98]:   %72 = trunc i64 %71 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac88b10]:   %73 = and i8 %72, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	[0x55853ac30d00]:  %26 = and i8 %25, 1
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	[0x55853ac387b0]:  %74 = and i8 %73, 1
	}

[0x55853ac88b90]:   store i8 %73, i8* %27, align 1, !tbaa !1280 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac88c10]:   %74 = icmp eq i64 %60, 0 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac88c78]:   %75 = zext i1 %74 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac88cf0]:   store i8 %75, i8* %30, align 1, !tbaa !1281 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac88d70]:   %76 = lshr i64 %60, 63 {
	[0x55853ac308d0]:  %79 = lshr i64 %60, 63
	[0x55853ac36280]:  %77 = lshr i64 %61, 63
	[0x55853aca13c0]:  %34 = lshr i64 %8, 63
	[0x55853aca15c0]:  %31 = lshr i64 %11, 63
	}

[0x55853ac88dd8]:   %77 = trunc i64 %76 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac88e50]:   store i8 %77, i8* %33, align 1, !tbaa !1282 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac88ed0]:   %78 = lshr i64 %59, 63 {
	[0x55853ac308d0]:  %79 = lshr i64 %60, 63
	[0x55853ac36280]:  %77 = lshr i64 %61, 63
	[0x55853aca13c0]:  %34 = lshr i64 %8, 63
	[0x55853aca15c0]:  %31 = lshr i64 %11, 63
	}

[0x55853ac88f50]:   %79 = xor i64 %76, %78 {
	[0x55853ac2f3d0]:  %23 = xor i64 %22, %11
	[0x55853ac30770]:  %80 = xor i64 %77, %79
	[0x55853ac30e60]:  %35 = xor i64 %31, %34
	[0x55853ac38af0]:  %71 = xor i64 %70, %61
	}

[0x55853ac88fd0]:   %80 = add nuw nsw i64 %79, %76 {
	[0x55853ac30650]:  %81 = add nuw nsw i64 %80, %77
	[0x55853aca32d0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55853ac89050]:   %81 = icmp eq i64 %80, 2 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac890b8]:   %82 = zext i1 %81 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac89130]:   store i8 %82, i8* %39, align 1, !tbaa !1283 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac891b0]:   %83 = add i64 %58, 7 {
	[0x55853ac30240]:  %84 = add i64 %59, 7
	}

[0x55853ac89230]:   store i64 %83, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac892b0]:   %84 = add i64 %59, 24 {
	[0x55853ac30a30]:  %85 = add i64 %60, 24
	[0x55853ac31390]:  %41 = add i64 %10, 24
	}

[0x55853ac89318]:   %85 = inttoptr i64 %60 to i64* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac89378]:   %86 = load i64, i64* %85, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac893f0]:   store i64 %86, i64* %RBP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac89470]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac894f0]:   %87 = add i64 %58, 8 {
	[0x55853ac3b810]:  %88 = add i64 %59, 8
	}

[0x55853ac89570]:   store i64 %87, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac895d8]:   %88 = inttoptr i64 %84 to i64* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac89638]:   %89 = load i64, i64* %88, align 8 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac896b0]:   store i64 %89, i64* %PC, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac89730]:   %90 = add i64 %59, 32 {
	[0x55853ac3b3b0]:  %91 = add i64 %60, 32
	}

[0x55853ac897b0]:   store i64 %90, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac89818]:   ret %struct.Memory* %49 {
	[0x55853aca8758]:  ret %struct.Memory.32* %call2_40052d
	}

[0x55853aceb578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55853acf7858]:  %45 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55853acecd58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55853aced838]:  %44 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55853aca42f8]:   %EAX.i = bitcast %union.anon.5* %45 to i32*
From the pot matches of: [0x55853ac21b68]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x55853ac23f60]:   store i8 0, i8* %AL, align 1, !tbaa !1284


Uprime Matches: [0x55853ac2db70]:   store i64 %5, i64* %3, align 8
[0x55853ac2f520]:   store i8 %20, i8* %21, align 1
[0x55853ac2fe50]:   store i8 %32, i8* %33, align 1
[0x55853ac30320]:   store i8 %83, i8* %39, align 1
[0x55853ac319b0]:   store i32 0, i32* %42, align 4
[0x55853ac31b10]:   store i64 %47, i64* %50, align 8
[0x55853ac32080]:   store i8 0, i8* %AL.i, align 1
[0x55853ac32220]:   store i64 0, i64* %RSI.i13, align 8
[0x55853ac32b80]:   store i64 %49, i64* %6, align 8
[0x55853ac32cd0]:   store i64 %58, i64* %RAX.i, align 8
[0x55853ac32e30]:   store i32 %54, i32* %56, align 4
[0x55853ac32f80]:   store i64 %55, i64* %3, align 8
[0x55853ac33510]:   store i64 0, i64* %RSI.i13, align 8
[0x55853ac33a90]:   store i8 %69, i8* %21, align 1
[0x55853ac343f0]:   store i64 %46, i64* %3, align 8
[0x55853ac35740]:   store i8 %63, i8* %14, align 1
[0x55853ac35ac0]:   store i64 %61, i64* %6, align 8
[0x55853ac36a40]:   store i8 %76, i8* %30, align 1
[0x55853ac38650]:   store i8 %74, i8* %27, align 1
[0x55853ac38c40]:   store i8 %78, i8* %33, align 1
[0x55853ac38f00]:   store i64 %84, i64* %3, align 8
[0x55853ac3b250]:   store i64 %91, i64* %6, align 8
[0x55853ac3b550]:   store i64 %90, i64* %3, align 8
[0x55853ac3b6b0]:   store i64 %88, i64* %3, align 8
[0x55853ac3b9f0]:   store i64 %85, i64* %6, align 8
[0x55853ac3bb50]:   store i64 %87, i64* %RBP.i, align 8
[0x55853aca2720]:   store i8 %13, i8* %14, align 1
[0x55853aca2a50]:   store i8 %29, i8* %30, align 1
[0x55853aca2c70]:   store i8 %26, i8* %27, align 1
[0x55853aca2e90]:   store i64 %41, i64* %3, align 8
[0x55853aca30b0]:   store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
[0x55853aca31c0]:   store i8 %38, i8* %39, align 1
[0x55853aca3420]:   store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
[0x55853acde100]:   store i64 %8, i64* %RBP.i, align 8
[0x55853acdfce0]:   store i64 %4, i64* %9, align 8
[0x55853acfbb50]:   store i64 %11, i64* %6, align 8


Adj: [0x55853aca5ab8]:   %54 = load i32, i32* %EAX.i, align 4


Removing: [0x55853aca3758]:   %AL.i = bitcast %union.anon.5* %45 to i8*
From the pot matches of: [0x55853ac21cb8]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x55853ac24828]:   %53 = load i32, i32* %EAX, align 4


Uprime Matches: [0x55853ac2fcd8]:   %48 = load i64, i64* %6, align 8
[0x55853ac61de8]:   %10 = load i64, i64* %3, align 8
[0x55853ac94ab8]:   %4 = load i64, i64* %RBP.i, align 8
[0x55853ac94ca8]:   %7 = load i64, i64* %6, align 8
[0x55853aca3888]:   %43 = load i64, i64* %3, align 8
[0x55853aca4558]:   %60 = load i64, i64* %6, align 8
[0x55853aca48e8]:   %59 = load i64, i64* %3, align 8
[0x55853aca4ed8]:   %57 = load i32, i32* %ESI.i9, align 4
[0x55853aca5ab8]:   %54 = load i32, i32* %EAX.i, align 4
[0x55853aca5d18]:   %52 = load i64, i64* %RBP.i, align 8
[0x55853aca7dd8]:   %87 = load i64, i64* %86, align 8
[0x55853aca8d48]:   %90 = load i64, i64* %89, align 8
[0x55853acdd548]:   %51 = load i64, i64* %3, align 8


Adj: [0x55853ac32080]:   store i8 0, i8* %AL.i, align 1


Removing: [0x55853aca5d18]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55853ac222b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55853ac22600]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x55853ac2db70]:   store i64 %5, i64* %3, align 8
[0x55853ac2f520]:   store i8 %20, i8* %21, align 1
[0x55853ac2fe50]:   store i8 %32, i8* %33, align 1
[0x55853ac30320]:   store i8 %83, i8* %39, align 1
[0x55853ac319b0]:   store i32 0, i32* %42, align 4
[0x55853ac31b10]:   store i64 %47, i64* %50, align 8
[0x55853ac32080]:   store i8 0, i8* %AL.i, align 1
[0x55853ac32220]:   store i64 0, i64* %RSI.i13, align 8
[0x55853ac32b80]:   store i64 %49, i64* %6, align 8
[0x55853ac32cd0]:   store i64 %58, i64* %RAX.i, align 8
[0x55853ac32e30]:   store i32 %54, i32* %56, align 4
[0x55853ac32f80]:   store i64 %55, i64* %3, align 8
[0x55853ac33510]:   store i64 0, i64* %RSI.i13, align 8
[0x55853ac33a90]:   store i8 %69, i8* %21, align 1
[0x55853ac343f0]:   store i64 %46, i64* %3, align 8
[0x55853ac35740]:   store i8 %63, i8* %14, align 1
[0x55853ac35ac0]:   store i64 %61, i64* %6, align 8
[0x55853ac36a40]:   store i8 %76, i8* %30, align 1
[0x55853ac38650]:   store i8 %74, i8* %27, align 1
[0x55853ac38c40]:   store i8 %78, i8* %33, align 1
[0x55853ac38f00]:   store i64 %84, i64* %3, align 8
[0x55853ac3b250]:   store i64 %91, i64* %6, align 8
[0x55853ac3b550]:   store i64 %90, i64* %3, align 8
[0x55853ac3b6b0]:   store i64 %88, i64* %3, align 8
[0x55853ac3b9f0]:   store i64 %85, i64* %6, align 8
[0x55853ac3bb50]:   store i64 %87, i64* %RBP.i, align 8
[0x55853aca2720]:   store i8 %13, i8* %14, align 1
[0x55853aca2a50]:   store i8 %29, i8* %30, align 1
[0x55853aca2c70]:   store i8 %26, i8* %27, align 1
[0x55853aca2e90]:   store i64 %41, i64* %3, align 8
[0x55853aca30b0]:   store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
[0x55853aca31c0]:   store i8 %38, i8* %39, align 1
[0x55853aca3420]:   store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
[0x55853acde100]:   store i64 %8, i64* %RBP.i, align 8
[0x55853acdfce0]:   store i64 %4, i64* %9, align 8
[0x55853acfbb50]:   store i64 %11, i64* %6, align 8


Adj: [0x55853ac33310]:   %53 = add i64 %52, -8


Removing: [0x55853ac2fcd8]:   %48 = load i64, i64* %6, align 8
From the pot matches of: [0x55853ac22418]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55853ac23b20]:   %40 = add i64 %7, -12


Uprime Matches: [0x55853ac31700]:   %40 = add i64 %7, -12


Adj: [0x55853aca34f0]:   %49 = add i64 %48, -8


Removing: [0x55853aca4558]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x55853ac22418]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55853ac23b20]:   %40 = add i64 %7, -12


Uprime Matches: [0x55853ac31700]:   %40 = add i64 %7, -12


Adj: [0x55853ac308d0]:   %79 = lshr i64 %60, 63
[0x55853ac30a30]:   %85 = add i64 %60, 24
[0x55853ac33980]:   %61 = add i64 %60, 16
[0x55853ac33e00]:   %70 = xor i64 %60, 16
[0x55853ac34020]:   %62 = icmp ugt i64 %60, -17
[0x55853ac3b3b0]:   %91 = add i64 %60, 32


Removing: [0x55853aca3888]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac22668]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55853ac23ba0]:   %41 = add i64 %10, 24


Uprime Matches: [0x55853ac30a30]:   %85 = add i64 %60, 24
[0x55853ac31390]:   %41 = add i64 %10, 24


Adj: [0x55853ac31c60]:   %47 = add i64 %43, 25
[0x55853ac31f20]:   %46 = add i64 %43, -281


Removing: [0x55853aca48e8]:   %59 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac22668]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55853ac23ba0]:   %41 = add i64 %10, 24


Uprime Matches: [0x55853ac30a30]:   %85 = add i64 %60, 24
[0x55853ac31390]:   %41 = add i64 %10, 24


Adj: [0x55853ac30240]:   %84 = add i64 %59, 7
[0x55853ac3b810]:   %88 = add i64 %59, 8


Removing: [0x55853acdd548]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac22668]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55853ac23ba0]:   %41 = add i64 %10, 24


Uprime Matches: [0x55853ac30a30]:   %85 = add i64 %60, 24
[0x55853ac31390]:   %41 = add i64 %10, 24


Adj: [0x55853ac330e0]:   %55 = add i64 %51, 5


Removing: [0x55853ac899f8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac2fe50]:   store i8 %32, i8* %33, align 1


Removing: [0x55853aca61d8]:   %78 = trunc i64 %77 to i8
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac38c40]:   store i8 %78, i8* %33, align 1


Removing: [0x55853aca7ca8]:   %64 = trunc i64 %61 to i32
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac33ed0]:   %65 = and i32 %64, 255


Removing: [0x55853acde008]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac2fbd0]:   %16 = and i32 %15, 255


Removing: [0x55853ac30d00]:   %26 = and i8 %25, 1
From the pot matches of: [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime : [0x55853ac22c80]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55853ac33ba0]:   %69 = xor i8 %68, 1
[0x55853aca23f0]:   %20 = xor i8 %19, 1


Adj: [0x55853aca2c70]:   store i8 %26, i8* %27, align 1


Removing: [0x55853ac387b0]:   %74 = and i8 %73, 1
From the pot matches of: [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime : [0x55853ac22c80]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55853ac33ba0]:   %69 = xor i8 %68, 1
[0x55853aca23f0]:   %20 = xor i8 %19, 1


Adj: [0x55853ac38650]:   store i8 %74, i8* %27, align 1


Removing: [0x55853ac61de8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac23d68]:   %43 = load i64, i64* %PC, align 8


Uprime : [0x55853ac240e0]:   %45 = add i64 %43, 25


Uprime Matches: [0x55853ac31c60]:   %47 = add i64 %43, 25


Adj: [0x55853ac31390]:   %41 = add i64 %10, 24


Removing: [0x55853aca48e8]:   %59 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac23d68]:   %43 = load i64, i64* %PC, align 8


Uprime : [0x55853ac240e0]:   %45 = add i64 %43, 25


Uprime Matches: [0x55853ac31c60]:   %47 = add i64 %43, 25


Adj: [0x55853ac30240]:   %84 = add i64 %59, 7
[0x55853ac3b810]:   %88 = add i64 %59, 8


Removing: [0x55853acdd548]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac23d68]:   %43 = load i64, i64* %PC, align 8


Uprime : [0x55853ac240e0]:   %45 = add i64 %43, 25


Uprime Matches: [0x55853ac31c60]:   %47 = add i64 %43, 25


Adj: [0x55853ac330e0]:   %55 = add i64 %51, 5


Removing: [0x55853aca4558]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x55853ac24148]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55853ac241c0]:   %47 = add i64 %46, -8


Uprime Matches: [0x55853ac2d680]:   %8 = add i64 %7, -8
[0x55853ac33310]:   %53 = add i64 %52, -8
[0x55853aca34f0]:   %49 = add i64 %48, -8


Adj: [0x55853ac308d0]:   %79 = lshr i64 %60, 63
[0x55853ac30a30]:   %85 = add i64 %60, 24
[0x55853ac33980]:   %61 = add i64 %60, 16
[0x55853ac33e00]:   %70 = xor i64 %60, 16
[0x55853ac34020]:   %62 = icmp ugt i64 %60, -17
[0x55853ac3b3b0]:   %91 = add i64 %60, 32


Removing: [0x55853ac2d680]:   %8 = add i64 %7, -8
From the pot matches of: [0x55853ac241c0]:   %47 = add i64 %46, -8


Uprime : [0x55853ac24320]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x55853ac32b80]:   store i64 %49, i64* %6, align 8
[0x55853ac35ac0]:   store i64 %61, i64* %6, align 8
[0x55853ac3b250]:   store i64 %91, i64* %6, align 8
[0x55853ac3b9f0]:   store i64 %85, i64* %6, align 8
[0x55853acfbb50]:   store i64 %11, i64* %6, align 8


Adj: [0x55853ac2df00]:   %12 = icmp ult i64 %8, 16
[0x55853ac94e78]:   %9 = inttoptr i64 %8 to i64*
[0x55853aca13c0]:   %34 = lshr i64 %8, 63
[0x55853aca22e0]:   %22 = xor i64 %8, 16
[0x55853acde100]:   store i64 %8, i64* %RBP.i, align 8


Removing: [0x55853ac61de8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac24668]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x55853ac248a0]:   %54 = add i64 %50, 5


Uprime Matches: [0x55853ac330e0]:   %55 = add i64 %51, 5


Adj: [0x55853ac31390]:   %41 = add i64 %10, 24


Removing: [0x55853aca3888]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac24668]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x55853ac248a0]:   %54 = add i64 %50, 5


Uprime Matches: [0x55853ac330e0]:   %55 = add i64 %51, 5


Adj: [0x55853ac31c60]:   %47 = add i64 %43, 25
[0x55853ac31f20]:   %46 = add i64 %43, -281


Removing: [0x55853aca48e8]:   %59 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac24668]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x55853ac248a0]:   %54 = add i64 %50, 5


Uprime Matches: [0x55853ac330e0]:   %55 = add i64 %51, 5


Adj: [0x55853ac30240]:   %84 = add i64 %59, 7
[0x55853ac3b810]:   %88 = add i64 %59, 8


Removing: [0x55853ac94ab8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55853ac24748]:   %51 = load i64, i64* %RBP, align 8


Uprime : [0x55853ac247c0]:   %52 = add i64 %51, -8


Uprime Matches: [0x55853ac2d680]:   %8 = add i64 %7, -8
[0x55853ac33310]:   %53 = add i64 %52, -8
[0x55853aca34f0]:   %49 = add i64 %48, -8


Adj: [0x55853acdfce0]:   store i64 %4, i64* %9, align 8


Removing: [0x55853ac61de8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac24b28]:   %58 = load i64, i64* %PC, align 8


Uprime : [0x55853ac894f0]:   %87 = add i64 %58, 8


Uprime Matches: [0x55853ac3b810]:   %88 = add i64 %59, 8


Adj: [0x55853ac31390]:   %41 = add i64 %10, 24


Removing: [0x55853aca3888]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac24b28]:   %58 = load i64, i64* %PC, align 8


Uprime : [0x55853ac894f0]:   %87 = add i64 %58, 8


Uprime Matches: [0x55853ac3b810]:   %88 = add i64 %59, 8


Adj: [0x55853ac31c60]:   %47 = add i64 %43, 25
[0x55853ac31f20]:   %46 = add i64 %43, -281


Removing: [0x55853acdd548]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x55853ac24b28]:   %58 = load i64, i64* %PC, align 8


Uprime : [0x55853ac894f0]:   %87 = add i64 %58, 8


Uprime Matches: [0x55853ac3b810]:   %88 = add i64 %59, 8


Adj: [0x55853ac330e0]:   %55 = add i64 %51, 5


Removing: [0x55853ac2fcd8]:   %48 = load i64, i64* %6, align 8
From the pot matches of: [0x55853ac24c08]:   %59 = load i64, i64* %RSP, align 8


Uprime : [0x55853ac89730]:   %90 = add i64 %59, 32


Uprime Matches: [0x55853ac3b3b0]:   %91 = add i64 %60, 32


Adj: [0x55853aca34f0]:   %49 = add i64 %48, -8


Removing: [0x55853ac94ca8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55853ac24c08]:   %59 = load i64, i64* %RSP, align 8


Uprime : [0x55853ac89730]:   %90 = add i64 %59, 32


Uprime Matches: [0x55853ac3b3b0]:   %91 = add i64 %60, 32


Adj: [0x55853ac2d680]:   %8 = add i64 %7, -8
[0x55853ac31700]:   %40 = add i64 %7, -12
[0x55853acdb810]:   %11 = add i64 %7, -24


Removing: [0x55853ac899f8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac2fe50]:   store i8 %32, i8* %33, align 1


Removing: [0x55853aca61d8]:   %78 = trunc i64 %77 to i8
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac38c40]:   store i8 %78, i8* %33, align 1


Removing: [0x55853aca7ca8]:   %64 = trunc i64 %61 to i32
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac33ed0]:   %65 = and i32 %64, 255


Removing: [0x55853acde008]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac30d00]:   %26 = and i8 %25, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1
[0x55853ac387b0]:   %74 = and i8 %73, 1


Adj: [0x55853ac2fbd0]:   %16 = and i32 %15, 255


Removing: [0x55853ac30d00]:   %26 = and i8 %25, 1
From the pot matches of: [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime : [0x55853ac88830]:   %68 = xor i8 %67, 1


Uprime Matches: [0x55853ac33ba0]:   %69 = xor i8 %68, 1
[0x55853aca23f0]:   %20 = xor i8 %19, 1


Adj: [0x55853aca2c70]:   store i8 %26, i8* %27, align 1


Removing: [0x55853ac387b0]:   %74 = and i8 %73, 1
From the pot matches of: [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime : [0x55853ac88830]:   %68 = xor i8 %67, 1


Uprime Matches: [0x55853ac33ba0]:   %69 = xor i8 %68, 1
[0x55853aca23f0]:   %20 = xor i8 %19, 1


Adj: [0x55853ac38650]:   store i8 %74, i8* %27, align 1

Round: 1

Removing: [0x55853aca7918]:   %73 = trunc i64 %72 to i8
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1


Adj: [0x55853ac387b0]:   %74 = and i8 %73, 1


Removing: [0x55853acdbf08]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1


Adj: [0x55853ac30d00]:   %26 = and i8 %25, 1


Removing: [0x55853ac94ca8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55853ac24148]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55853ac241c0]:   %47 = add i64 %46, -8


Uprime Matches: [0x55853aca34f0]:   %49 = add i64 %48, -8


Adj: [0x55853ac2d680]:   %8 = add i64 %7, -8
[0x55853ac31700]:   %40 = add i64 %7, -12
[0x55853acdb810]:   %11 = add i64 %7, -24


Removing: [0x55853aca7918]:   %73 = trunc i64 %72 to i8
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1


Adj: [0x55853ac387b0]:   %74 = and i8 %73, 1


Removing: [0x55853acdbf08]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1
[0x55853ac354f0]:   %68 = and i8 %67, 1


Adj: [0x55853ac30d00]:   %26 = and i8 %25, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x55853ac21930]: %struct.State* %0 {
	[0x55853ac30db0]:%struct.State.1* %0
	}

[0x55853ac21970]: i64 %1 {
	[0x55853ac31a60]:i64 %1
	}

[0x55853ac219b0]: %struct.Memory* %2 {
	[0x55853ac324b0]:%struct.Memory.32* %2
	}

[0x55853ac21b68]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55853aca3758]:  %AL.i = bitcast %union.anon.5* %45 to i8*
	}

[0x55853ac21c40]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55853ac5a720]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55853ac21cb8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x55853aca42f8]:  %EAX.i = bitcast %union.anon.5* %45 to i32*
	}

[0x55853ac21d88]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x55853acdf508]:  %ESI.i9 = bitcast %union.anon.5* %44 to i32*
	}

[0x55853ac21e38]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55853ac0d138]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %45, i64 0, i32 0
	}

[0x55853ac21ef8]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x55853ac2b4b8]:  %RSI.i13 = getelementptr inbounds %union.anon.5, %union.anon.5* %44, i64 0, i32 0
	}

[0x55853ac22000]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55853ac95800]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55853ac22110]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55853ac97b40]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55853ac22220]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55853ac97f00]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55853ac222b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55853ac22330]:   %6 = add i64 %1, 1 {
	[0x55853ac2dcc0]:  %5 = add i64 %1, 1
	}

[0x55853ac223b0]:   store i64 %6, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	}

[0x55853ac22418]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	}

[0x55853ac22490]:   %8 = add i64 %7, -8 {
	[0x55853ac2d680]:  %8 = add i64 %7, -8
	}

[0x55853ac22510]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55853ac7c7b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55853ac22588]:   %9 = inttoptr i64 %8 to i64* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55853ac22600]:   store i64 %5, i64* %9, align 8 {
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	}

[0x55853ac22668]:   %10 = load i64, i64* %PC, align 8 {
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	}

[0x55853ac226e0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55853ac22760]:   %11 = add i64 %7, -24 {
	[0x55853acdb810]:  %11 = add i64 %7, -24
	}

[0x55853ac227e0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22860]:   %12 = icmp ult i64 %8, 16 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	}

[0x55853ac228c8]:   %13 = zext i1 %12 to i8 {
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac22970]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55853ad77ab0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55853ac22a00]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	}

[0x55853ac22a68]:   %15 = trunc i64 %11 to i32 {
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac22ae0]:   %16 = and i32 %15, 255 {
	[0x55853ac2fbd0]:  %16 = and i32 %15, 255
	}

[0x55853ac22b88]:   %18 = trunc i32 %17 to i8 {
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	}

[0x55853ac22c00]:   %19 = and i8 %18, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	}

[0x55853ac22c80]:   %20 = xor i8 %19, 1 {
	[0x55853ac33ba0]:  %69 = xor i8 %68, 1
	[0x55853aca23f0]:  %20 = xor i8 %19, 1
	}

[0x55853ac22d30]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55853acd7c40]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55853ac22dc0]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	}

[0x55853ac22e40]:   %22 = xor i64 %8, 16 {
	[0x55853aca22e0]:  %22 = xor i64 %8, 16
	}

[0x55853ac22ec0]:   %23 = xor i64 %22, %11 {
	[0x55853ac2f3d0]:  %23 = xor i64 %22, %11
	}

[0x55853ac22f40]:   %24 = lshr i64 %23, 4 {
	[0x55853aca2830]:  %24 = lshr i64 %23, 4
	}

[0x55853ac22fa8]:   %25 = trunc i64 %24 to i8 {
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	}

[0x55853ac23020]:   %26 = and i8 %25, 1 {
	[0x55853ac30d00]:  %26 = and i8 %25, 1
	}

[0x55853ac230d0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55853ac3ae60]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55853ac23160]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	}

[0x55853ac231e0]:   %28 = icmp eq i64 %11, 0 {
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac23248]:   %29 = zext i1 %28 to i8 {
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	}

[0x55853ac232f0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55853ac35f00]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55853ac23380]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	}

[0x55853ac23400]:   %31 = lshr i64 %11, 63 {
	[0x55853aca15c0]:  %31 = lshr i64 %11, 63
	}

[0x55853ac23468]:   %32 = trunc i64 %31 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	}

[0x55853ac23510]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55853ac32900]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55853ac235a0]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	}

[0x55853ac23620]:   %34 = lshr i64 %8, 63 {
	[0x55853aca13c0]:  %34 = lshr i64 %8, 63
	}

[0x55853ac236a0]:   %35 = xor i64 %31, %34 {
	[0x55853ac30e60]:  %35 = xor i64 %31, %34
	}

[0x55853ac23720]:   %36 = add nuw nsw i64 %35, %34 {
	[0x55853aca32d0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55853ac237a0]:   %37 = icmp eq i64 %36, 2 {
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	}

[0x55853ac23808]:   %38 = zext i1 %37 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	}

[0x55853ac238b0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55853ac32690]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55853ac23940]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	}

[0x55853ac23a60]:   store i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	}

[0x55853ac23b20]:   %40 = add i64 %7, -12 {
	[0x55853ac31700]:  %40 = add i64 %7, -12
	}

[0x55853ac23ba0]:   %41 = add i64 %10, 24 {
	[0x55853ac31390]:  %41 = add i64 %10, 24
	}

[0x55853ac23c20]:   store i64 %41, i64* %PC, align 8 {
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	}

[0x55853ac23c88]:   %42 = inttoptr i64 %40 to i32* {
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	}

[0x55853ac23d00]:   store i32 0, i32* %42, align 4 {
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	}

[0x55853ac23d68]:   %43 = load i64, i64* %PC, align 8 {
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	}

[0x55853ac23e60]:   store i32 10, i32* bitcast (%XYZ_type* @XYZ to i32*), align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac23ee0]:   store i64 10, i64* %RSI, align 8, !tbaa !1261 {
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	}

[0x55853ac23f60]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	}

[0x55853ac24020]:   %44 = add i64 %43, -281 {
	[0x55853ac31f20]:  %46 = add i64 %43, -281
	}

[0x55853ac240e0]:   %45 = add i64 %43, 25 {
	[0x55853ac31c60]:  %47 = add i64 %43, 25
	}

[0x55853ac24148]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	}

[0x55853ac241c0]:   %47 = add i64 %46, -8 {
	[0x55853aca34f0]:  %49 = add i64 %48, -8
	}

[0x55853ac24228]:   %48 = inttoptr i64 %47 to i64* {
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac242a0]:   store i64 %45, i64* %48, align 8 {
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	}

[0x55853ac24320]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	}

[0x55853ac243a0]:   store i64 %44, i64* %PC, align 8, !tbaa !1261 {
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	}

[0x55853ac245a8]:   %49 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x55853ac30f70]:  %call2_40052d = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %46, %struct.Memory.32* %2)
	}

[0x55853ac24668]:   %50 = load i64, i64* %PC, align 8 {
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac246e0]:   store i64 0, i64* %RSI, align 8, !tbaa !1261 {
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	}

[0x55853ac24748]:   %51 = load i64, i64* %RBP, align 8 {
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x55853ac247c0]:   %52 = add i64 %51, -8 {
	[0x55853ac33310]:  %53 = add i64 %52, -8
	}

[0x55853ac24828]:   %53 = load i32, i32* %EAX, align 4 {
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	}

[0x55853ac248a0]:   %54 = add i64 %50, 5 {
	[0x55853ac330e0]:  %55 = add i64 %51, 5
	}

[0x55853ac24920]:   store i64 %54, i64* %PC, align 8 {
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	}

[0x55853ac24988]:   %55 = inttoptr i64 %52 to i32* {
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	}

[0x55853ac24a00]:   store i32 %53, i32* %55, align 4 {
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	}

[0x55853ac24a68]:   %56 = load i32, i32* %ESI, align 4 {
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	}

[0x55853ac24ac8]:   %57 = zext i32 %56 to i64 {
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	}

[0x55853ac24b28]:   %58 = load i64, i64* %PC, align 8 {
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	}

[0x55853ac24ba0]:   store i64 %57, i64* %RAX, align 8, !tbaa !1261 {
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	}

[0x55853ac24c08]:   %59 = load i64, i64* %RSP, align 8 {
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	}

[0x55853ac24c80]:   %60 = add i64 %59, 16 {
	[0x55853ac33980]:  %61 = add i64 %60, 16
	}

[0x55853ac24d00]:   store i64 %60, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	}

[0x55853ac24dc0]:   %61 = icmp ugt i64 %59, -17 {
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	}

[0x55853ac24e28]:   %62 = zext i1 %61 to i8 {
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	}

[0x55853ac24ea0]:   store i8 %62, i8* %14, align 1, !tbaa !1265 {
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	}

[0x55853ac24f08]:   %63 = trunc i64 %60 to i32 {
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	}

[0x55853ac24f80]:   %64 = and i32 %63, 255 {
	[0x55853ac33ed0]:  %65 = and i32 %64, 255
	}

[0x55853ac25020]:   %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9 {
	[0x55853acbfc50]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x55853ac250e8]:   %66 = trunc i32 %65 to i8 {
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	}

[0x55853ac887b0]:   %67 = and i8 %66, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	}

[0x55853ac88830]:   %68 = xor i8 %67, 1 {
	[0x55853ac33ba0]:  %69 = xor i8 %68, 1
	[0x55853aca23f0]:  %20 = xor i8 %19, 1
	}

[0x55853ac888b0]:   store i8 %68, i8* %21, align 1, !tbaa !1279 {
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	}

[0x55853ac88930]:   %69 = xor i64 %59, 16 {
	[0x55853ac33e00]:  %70 = xor i64 %60, 16
	}

[0x55853ac889b0]:   %70 = xor i64 %69, %60 {
	[0x55853ac38af0]:  %71 = xor i64 %70, %61
	}

[0x55853ac88a30]:   %71 = lshr i64 %70, 4 {
	[0x55853ac38910]:  %72 = lshr i64 %71, 4
	}

[0x55853ac88a98]:   %72 = trunc i64 %71 to i8 {
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	}

[0x55853ac88b10]:   %73 = and i8 %72, 1 {
	[0x55853ac387b0]:  %74 = and i8 %73, 1
	}

[0x55853ac88b90]:   store i8 %73, i8* %27, align 1, !tbaa !1280 {
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	}

[0x55853ac88c10]:   %74 = icmp eq i64 %60, 0 {
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	}

[0x55853ac88c78]:   %75 = zext i1 %74 to i8 {
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	}

[0x55853ac88cf0]:   store i8 %75, i8* %30, align 1, !tbaa !1281 {
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	}

[0x55853ac88d70]:   %76 = lshr i64 %60, 63 {
	[0x55853ac36280]:  %77 = lshr i64 %61, 63
	}

[0x55853ac88dd8]:   %77 = trunc i64 %76 to i8 {
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	}

[0x55853ac88e50]:   store i8 %77, i8* %33, align 1, !tbaa !1282 {
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	}

[0x55853ac88ed0]:   %78 = lshr i64 %59, 63 {
	[0x55853ac308d0]:  %79 = lshr i64 %60, 63
	}

[0x55853ac88f50]:   %79 = xor i64 %76, %78 {
	[0x55853ac30770]:  %80 = xor i64 %77, %79
	}

[0x55853ac88fd0]:   %80 = add nuw nsw i64 %79, %76 {
	[0x55853ac30650]:  %81 = add nuw nsw i64 %80, %77
	}

[0x55853ac89050]:   %81 = icmp eq i64 %80, 2 {
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	}

[0x55853ac890b8]:   %82 = zext i1 %81 to i8 {
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	}

[0x55853ac89130]:   store i8 %82, i8* %39, align 1, !tbaa !1283 {
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	}

[0x55853ac891b0]:   %83 = add i64 %58, 7 {
	[0x55853ac30240]:  %84 = add i64 %59, 7
	}

[0x55853ac89230]:   store i64 %83, i64* %PC, align 8 {
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	}

[0x55853ac892b0]:   %84 = add i64 %59, 24 {
	[0x55853ac30a30]:  %85 = add i64 %60, 24
	}

[0x55853ac89318]:   %85 = inttoptr i64 %60 to i64* {
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	}

[0x55853ac89378]:   %86 = load i64, i64* %85, align 8 {
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	}

[0x55853ac893f0]:   store i64 %86, i64* %RBP, align 8, !tbaa !1261 {
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	}

[0x55853ac89470]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	}

[0x55853ac894f0]:   %87 = add i64 %58, 8 {
	[0x55853ac3b810]:  %88 = add i64 %59, 8
	}

[0x55853ac89570]:   store i64 %87, i64* %PC, align 8 {
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	}

[0x55853ac895d8]:   %88 = inttoptr i64 %84 to i64* {
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	}

[0x55853ac89638]:   %89 = load i64, i64* %88, align 8 {
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	}

[0x55853ac896b0]:   store i64 %89, i64* %PC, align 8, !tbaa !1261 {
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	}

[0x55853ac89730]:   %90 = add i64 %59, 32 {
	[0x55853ac3b3b0]:  %91 = add i64 %60, 32
	}

[0x55853ac897b0]:   store i64 %90, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	}

[0x55853ac89818]:   ret %struct.Memory* %49 {
	[0x55853aca8758]:  ret %struct.Memory.32* %call2_40052d
	}

[0x55853aceb578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55853acf7858]:  %45 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55853acecd58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55853aced838]:  %44 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55853ac219f0]: block_400500 {
	[0x55853acbe030]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x55853ac33ba0]:   %69 = xor i8 %68, 1
From the pot matches of: [0x55853ac22c80]:   %20 = xor i8 %19, 1


Uprime : [0x55853ac22dc0]:   store i8 %20, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x55853ac2f520]:   store i8 %20, i8* %21, align 1


Adj: [0x55853ac33a90]:   store i8 %69, i8* %21, align 1


Removing: [0x55853aca23f0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x55853ac88830]:   %68 = xor i8 %67, 1


Uprime : [0x55853ac888b0]:   store i8 %68, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x55853ac33a90]:   store i8 %69, i8* %21, align 1


Adj: [0x55853ac2f520]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x55853ac354f0]:   %68 = and i8 %67, 1
From the pot matches of: [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime : [0x55853ac22c80]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55853aca23f0]:   %20 = xor i8 %19, 1


Adj: [0x55853ac33ba0]:   %69 = xor i8 %68, 1


Removing: [0x55853ac2fa70]:   %19 = and i8 %18, 1
From the pot matches of: [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime : [0x55853ac88830]:   %68 = xor i8 %67, 1


Uprime Matches: [0x55853ac33ba0]:   %69 = xor i8 %68, 1


Adj: [0x55853aca23f0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x55853aca7a48]:   %67 = trunc i32 %66 to i8
From the pot matches of: [0x55853ac22b88]:   %18 = trunc i32 %17 to i8


Uprime : [0x55853ac22c00]:   %19 = and i8 %18, 1


Uprime Matches: [0x55853ac2fa70]:   %19 = and i8 %18, 1


Adj: [0x55853ac354f0]:   %68 = and i8 %67, 1


Removing: [0x55853acdc338]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x55853ac250e8]:   %66 = trunc i32 %65 to i8


Uprime : [0x55853ac887b0]:   %67 = and i8 %66, 1


Uprime Matches: [0x55853ac354f0]:   %68 = and i8 %67, 1


Adj: [0x55853ac2fa70]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x55853ac21930]: %struct.State* %0 {
	[0x55853ac30db0]:%struct.State.1* %0
	}

[0x55853ac21970]: i64 %1 {
	[0x55853ac31a60]:i64 %1
	}

[0x55853ac219b0]: %struct.Memory* %2 {
	[0x55853ac324b0]:%struct.Memory.32* %2
	}

[0x55853ac21b68]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55853aca3758]:  %AL.i = bitcast %union.anon.5* %45 to i8*
	}

[0x55853ac21c40]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55853ac5a720]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55853ac21cb8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x55853aca42f8]:  %EAX.i = bitcast %union.anon.5* %45 to i32*
	}

[0x55853ac21d88]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x55853acdf508]:  %ESI.i9 = bitcast %union.anon.5* %44 to i32*
	}

[0x55853ac21e38]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55853ac0d138]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %45, i64 0, i32 0
	}

[0x55853ac21ef8]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x55853ac2b4b8]:  %RSI.i13 = getelementptr inbounds %union.anon.5, %union.anon.5* %44, i64 0, i32 0
	}

[0x55853ac22000]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55853ac95800]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55853ac22110]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55853ac97b40]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55853ac22220]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55853ac97f00]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55853ac222b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55853ac94ab8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55853ac22330]:   %6 = add i64 %1, 1 {
	[0x55853ac2dcc0]:  %5 = add i64 %1, 1
	}

[0x55853ac223b0]:   store i64 %6, i64* %PC, align 8 {
	[0x55853ac2db70]:  store i64 %5, i64* %3, align 8
	}

[0x55853ac22418]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac94ca8]:  %7 = load i64, i64* %6, align 8
	}

[0x55853ac22490]:   %8 = add i64 %7, -8 {
	[0x55853ac2d680]:  %8 = add i64 %7, -8
	}

[0x55853ac22510]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55853ac7c7b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55853ac22588]:   %9 = inttoptr i64 %8 to i64* {
	[0x55853ac94e78]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55853ac22600]:   store i64 %5, i64* %9, align 8 {
	[0x55853acdfce0]:  store i64 %4, i64* %9, align 8
	}

[0x55853ac22668]:   %10 = load i64, i64* %PC, align 8 {
	[0x55853ac61de8]:  %10 = load i64, i64* %3, align 8
	}

[0x55853ac226e0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55853acde100]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55853ac22760]:   %11 = add i64 %7, -24 {
	[0x55853acdb810]:  %11 = add i64 %7, -24
	}

[0x55853ac227e0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853acfbb50]:  store i64 %11, i64* %6, align 8
	}

[0x55853ac22860]:   %12 = icmp ult i64 %8, 16 {
	[0x55853ac2df00]:  %12 = icmp ult i64 %8, 16
	}

[0x55853ac228c8]:   %13 = zext i1 %12 to i8 {
	[0x55853acddd38]:  %13 = zext i1 %12 to i8
	}

[0x55853ac22970]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55853ad77ab0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55853ac22a00]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55853aca2720]:  store i8 %13, i8* %14, align 1
	}

[0x55853ac22a68]:   %15 = trunc i64 %11 to i32 {
	[0x55853acde008]:  %15 = trunc i64 %11 to i32
	}

[0x55853ac22ae0]:   %16 = and i32 %15, 255 {
	[0x55853ac2fbd0]:  %16 = and i32 %15, 255
	}

[0x55853ac22b88]:   %18 = trunc i32 %17 to i8 {
	[0x55853acdc338]:  %18 = trunc i32 %17 to i8
	}

[0x55853ac22c00]:   %19 = and i8 %18, 1 {
	[0x55853ac2fa70]:  %19 = and i8 %18, 1
	}

[0x55853ac22c80]:   %20 = xor i8 %19, 1 {
	[0x55853aca23f0]:  %20 = xor i8 %19, 1
	}

[0x55853ac22d30]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55853acd7c40]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55853ac22dc0]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55853ac2f520]:  store i8 %20, i8* %21, align 1
	}

[0x55853ac22e40]:   %22 = xor i64 %8, 16 {
	[0x55853aca22e0]:  %22 = xor i64 %8, 16
	}

[0x55853ac22ec0]:   %23 = xor i64 %22, %11 {
	[0x55853ac2f3d0]:  %23 = xor i64 %22, %11
	}

[0x55853ac22f40]:   %24 = lshr i64 %23, 4 {
	[0x55853aca2830]:  %24 = lshr i64 %23, 4
	}

[0x55853ac22fa8]:   %25 = trunc i64 %24 to i8 {
	[0x55853acdbf08]:  %25 = trunc i64 %24 to i8
	}

[0x55853ac23020]:   %26 = and i8 %25, 1 {
	[0x55853ac30d00]:  %26 = and i8 %25, 1
	}

[0x55853ac230d0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55853ac3ae60]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55853ac23160]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x55853aca2c70]:  store i8 %26, i8* %27, align 1
	}

[0x55853ac231e0]:   %28 = icmp eq i64 %11, 0 {
	[0x55853aca1710]:  %28 = icmp eq i64 %11, 0
	}

[0x55853ac23248]:   %29 = zext i1 %28 to i8 {
	[0x55853ac8d8b8]:  %29 = zext i1 %28 to i8
	}

[0x55853ac232f0]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55853ac35f00]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55853ac23380]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x55853aca2a50]:  store i8 %29, i8* %30, align 1
	}

[0x55853ac23400]:   %31 = lshr i64 %11, 63 {
	[0x55853aca15c0]:  %31 = lshr i64 %11, 63
	}

[0x55853ac23468]:   %32 = trunc i64 %31 to i8 {
	[0x55853ac899f8]:  %32 = trunc i64 %31 to i8
	}

[0x55853ac23510]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55853ac32900]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55853ac235a0]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x55853ac2fe50]:  store i8 %32, i8* %33, align 1
	}

[0x55853ac23620]:   %34 = lshr i64 %8, 63 {
	[0x55853aca13c0]:  %34 = lshr i64 %8, 63
	}

[0x55853ac236a0]:   %35 = xor i64 %31, %34 {
	[0x55853ac30e60]:  %35 = xor i64 %31, %34
	}

[0x55853ac23720]:   %36 = add nuw nsw i64 %35, %34 {
	[0x55853aca32d0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55853ac237a0]:   %37 = icmp eq i64 %36, 2 {
	[0x55853ac31860]:  %37 = icmp eq i64 %36, 2
	}

[0x55853ac23808]:   %38 = zext i1 %37 to i8 {
	[0x55853ac55bb8]:  %38 = zext i1 %37 to i8
	}

[0x55853ac238b0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55853ac32690]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55853ac23940]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x55853aca31c0]:  store i8 %38, i8* %39, align 1
	}

[0x55853ac23a60]:   store i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x55853aca30b0]:  store i64 add (i64 ptrtoint (i8* @G_0x601030 to i64), i64 108), i64* %RDI.i, align 8
	}

[0x55853ac23b20]:   %40 = add i64 %7, -12 {
	[0x55853ac31700]:  %40 = add i64 %7, -12
	}

[0x55853ac23ba0]:   %41 = add i64 %10, 24 {
	[0x55853ac31390]:  %41 = add i64 %10, 24
	}

[0x55853ac23c20]:   store i64 %41, i64* %PC, align 8 {
	[0x55853aca2e90]:  store i64 %41, i64* %3, align 8
	}

[0x55853ac23c88]:   %42 = inttoptr i64 %40 to i32* {
	[0x55853aca3c18]:  %42 = inttoptr i64 %40 to i32*
	}

[0x55853ac23d00]:   store i32 0, i32* %42, align 4 {
	[0x55853ac319b0]:  store i32 0, i32* %42, align 4
	}

[0x55853ac23d68]:   %43 = load i64, i64* %PC, align 8 {
	[0x55853aca3888]:  %43 = load i64, i64* %3, align 8
	}

[0x55853ac23e60]:   store i32 10, i32* bitcast (%XYZ_type* @XYZ to i32*), align 8 {
	[0x55853aca3420]:  store i32 10, i32* bitcast (i8* @G_0x601030 to i32*), align 4
	}

[0x55853ac23ee0]:   store i64 10, i64* %RSI, align 8, !tbaa !1261 {
	[0x55853ac32220]:  store i64 0, i64* %RSI.i13, align 8
	}

[0x55853ac23f60]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x55853ac32080]:  store i8 0, i8* %AL.i, align 1
	}

[0x55853ac24020]:   %44 = add i64 %43, -281 {
	[0x55853ac31f20]:  %46 = add i64 %43, -281
	}

[0x55853ac240e0]:   %45 = add i64 %43, 25 {
	[0x55853ac31c60]:  %47 = add i64 %43, 25
	}

[0x55853ac24148]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac2fcd8]:  %48 = load i64, i64* %6, align 8
	}

[0x55853ac241c0]:   %47 = add i64 %46, -8 {
	[0x55853aca34f0]:  %49 = add i64 %48, -8
	}

[0x55853ac24228]:   %48 = inttoptr i64 %47 to i64* {
	[0x55853acb6498]:  %50 = inttoptr i64 %49 to i64*
	}

[0x55853ac242a0]:   store i64 %45, i64* %48, align 8 {
	[0x55853ac31b10]:  store i64 %47, i64* %50, align 8
	}

[0x55853ac24320]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac32b80]:  store i64 %49, i64* %6, align 8
	}

[0x55853ac243a0]:   store i64 %44, i64* %PC, align 8, !tbaa !1261 {
	[0x55853ac343f0]:  store i64 %46, i64* %3, align 8
	}

[0x55853ac245a8]:   %49 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x55853ac30f70]:  %call2_40052d = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %46, %struct.Memory.32* %2)
	}

[0x55853ac24668]:   %50 = load i64, i64* %PC, align 8 {
	[0x55853acdd548]:  %51 = load i64, i64* %3, align 8
	}

[0x55853ac246e0]:   store i64 0, i64* %RSI, align 8, !tbaa !1261 {
	[0x55853ac33510]:  store i64 0, i64* %RSI.i13, align 8
	}

[0x55853ac24748]:   %51 = load i64, i64* %RBP, align 8 {
	[0x55853aca5d18]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x55853ac247c0]:   %52 = add i64 %51, -8 {
	[0x55853ac33310]:  %53 = add i64 %52, -8
	}

[0x55853ac24828]:   %53 = load i32, i32* %EAX, align 4 {
	[0x55853aca5ab8]:  %54 = load i32, i32* %EAX.i, align 4
	}

[0x55853ac248a0]:   %54 = add i64 %50, 5 {
	[0x55853ac330e0]:  %55 = add i64 %51, 5
	}

[0x55853ac24920]:   store i64 %54, i64* %PC, align 8 {
	[0x55853ac32f80]:  store i64 %55, i64* %3, align 8
	}

[0x55853ac24988]:   %55 = inttoptr i64 %52 to i32* {
	[0x55853aca5008]:  %56 = inttoptr i64 %53 to i32*
	}

[0x55853ac24a00]:   store i32 %53, i32* %55, align 4 {
	[0x55853ac32e30]:  store i32 %54, i32* %56, align 4
	}

[0x55853ac24a68]:   %56 = load i32, i32* %ESI, align 4 {
	[0x55853aca4ed8]:  %57 = load i32, i32* %ESI.i9, align 4
	}

[0x55853ac24ac8]:   %57 = zext i32 %56 to i64 {
	[0x55853aca4da8]:  %58 = zext i32 %57 to i64
	}

[0x55853ac24b28]:   %58 = load i64, i64* %PC, align 8 {
	[0x55853aca48e8]:  %59 = load i64, i64* %3, align 8
	}

[0x55853ac24ba0]:   store i64 %57, i64* %RAX, align 8, !tbaa !1261 {
	[0x55853ac32cd0]:  store i64 %58, i64* %RAX.i, align 8
	}

[0x55853ac24c08]:   %59 = load i64, i64* %RSP, align 8 {
	[0x55853aca4558]:  %60 = load i64, i64* %6, align 8
	}

[0x55853ac24c80]:   %60 = add i64 %59, 16 {
	[0x55853ac33980]:  %61 = add i64 %60, 16
	}

[0x55853ac24d00]:   store i64 %60, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac35ac0]:  store i64 %61, i64* %6, align 8
	}

[0x55853ac24dc0]:   %61 = icmp ugt i64 %59, -17 {
	[0x55853ac34020]:  %62 = icmp ugt i64 %60, -17
	}

[0x55853ac24e28]:   %62 = zext i1 %61 to i8 {
	[0x55853aca5e48]:  %63 = zext i1 %62 to i8
	}

[0x55853ac24ea0]:   store i8 %62, i8* %14, align 1, !tbaa !1265 {
	[0x55853ac35740]:  store i8 %63, i8* %14, align 1
	}

[0x55853ac24f08]:   %63 = trunc i64 %60 to i32 {
	[0x55853aca7ca8]:  %64 = trunc i64 %61 to i32
	}

[0x55853ac24f80]:   %64 = and i32 %63, 255 {
	[0x55853ac33ed0]:  %65 = and i32 %64, 255
	}

[0x55853ac25020]:   %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9 {
	[0x55853acbfc50]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x55853ac250e8]:   %66 = trunc i32 %65 to i8 {
	[0x55853aca7a48]:  %67 = trunc i32 %66 to i8
	}

[0x55853ac887b0]:   %67 = and i8 %66, 1 {
	[0x55853ac354f0]:  %68 = and i8 %67, 1
	}

[0x55853ac88830]:   %68 = xor i8 %67, 1 {
	[0x55853ac33ba0]:  %69 = xor i8 %68, 1
	}

[0x55853ac888b0]:   store i8 %68, i8* %21, align 1, !tbaa !1279 {
	[0x55853ac33a90]:  store i8 %69, i8* %21, align 1
	}

[0x55853ac88930]:   %69 = xor i64 %59, 16 {
	[0x55853ac33e00]:  %70 = xor i64 %60, 16
	}

[0x55853ac889b0]:   %70 = xor i64 %69, %60 {
	[0x55853ac38af0]:  %71 = xor i64 %70, %61
	}

[0x55853ac88a30]:   %71 = lshr i64 %70, 4 {
	[0x55853ac38910]:  %72 = lshr i64 %71, 4
	}

[0x55853ac88a98]:   %72 = trunc i64 %71 to i8 {
	[0x55853aca7918]:  %73 = trunc i64 %72 to i8
	}

[0x55853ac88b10]:   %73 = and i8 %72, 1 {
	[0x55853ac387b0]:  %74 = and i8 %73, 1
	}

[0x55853ac88b90]:   store i8 %73, i8* %27, align 1, !tbaa !1280 {
	[0x55853ac38650]:  store i8 %74, i8* %27, align 1
	}

[0x55853ac88c10]:   %74 = icmp eq i64 %60, 0 {
	[0x55853ac384f0]:  %75 = icmp eq i64 %61, 0
	}

[0x55853ac88c78]:   %75 = zext i1 %74 to i8 {
	[0x55853aca7328]:  %76 = zext i1 %75 to i8
	}

[0x55853ac88cf0]:   store i8 %75, i8* %30, align 1, !tbaa !1281 {
	[0x55853ac36a40]:  store i8 %76, i8* %30, align 1
	}

[0x55853ac88d70]:   %76 = lshr i64 %60, 63 {
	[0x55853ac36280]:  %77 = lshr i64 %61, 63
	}

[0x55853ac88dd8]:   %77 = trunc i64 %76 to i8 {
	[0x55853aca61d8]:  %78 = trunc i64 %77 to i8
	}

[0x55853ac88e50]:   store i8 %77, i8* %33, align 1, !tbaa !1282 {
	[0x55853ac38c40]:  store i8 %78, i8* %33, align 1
	}

[0x55853ac88ed0]:   %78 = lshr i64 %59, 63 {
	[0x55853ac308d0]:  %79 = lshr i64 %60, 63
	}

[0x55853ac88f50]:   %79 = xor i64 %76, %78 {
	[0x55853ac30770]:  %80 = xor i64 %77, %79
	}

[0x55853ac88fd0]:   %80 = add nuw nsw i64 %79, %76 {
	[0x55853ac30650]:  %81 = add nuw nsw i64 %80, %77
	}

[0x55853ac89050]:   %81 = icmp eq i64 %80, 2 {
	[0x55853ac30500]:  %82 = icmp eq i64 %81, 2
	}

[0x55853ac890b8]:   %82 = zext i1 %81 to i8 {
	[0x55853aca60a8]:  %83 = zext i1 %82 to i8
	}

[0x55853ac89130]:   store i8 %82, i8* %39, align 1, !tbaa !1283 {
	[0x55853ac30320]:  store i8 %83, i8* %39, align 1
	}

[0x55853ac891b0]:   %83 = add i64 %58, 7 {
	[0x55853ac30240]:  %84 = add i64 %59, 7
	}

[0x55853ac89230]:   store i64 %83, i64* %PC, align 8 {
	[0x55853ac38f00]:  store i64 %84, i64* %3, align 8
	}

[0x55853ac892b0]:   %84 = add i64 %59, 24 {
	[0x55853ac30a30]:  %85 = add i64 %60, 24
	}

[0x55853ac89318]:   %85 = inttoptr i64 %60 to i64* {
	[0x55853aca5f78]:  %86 = inttoptr i64 %61 to i64*
	}

[0x55853ac89378]:   %86 = load i64, i64* %85, align 8 {
	[0x55853aca7dd8]:  %87 = load i64, i64* %86, align 8
	}

[0x55853ac893f0]:   store i64 %86, i64* %RBP, align 8, !tbaa !1261 {
	[0x55853ac3bb50]:  store i64 %87, i64* %RBP.i, align 8
	}

[0x55853ac89470]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac3b9f0]:  store i64 %85, i64* %6, align 8
	}

[0x55853ac894f0]:   %87 = add i64 %58, 8 {
	[0x55853ac3b810]:  %88 = add i64 %59, 8
	}

[0x55853ac89570]:   store i64 %87, i64* %PC, align 8 {
	[0x55853ac3b6b0]:  store i64 %88, i64* %3, align 8
	}

[0x55853ac895d8]:   %88 = inttoptr i64 %84 to i64* {
	[0x55853aca8e78]:  %89 = inttoptr i64 %85 to i64*
	}

[0x55853ac89638]:   %89 = load i64, i64* %88, align 8 {
	[0x55853aca8d48]:  %90 = load i64, i64* %89, align 8
	}

[0x55853ac896b0]:   store i64 %89, i64* %PC, align 8, !tbaa !1261 {
	[0x55853ac3b550]:  store i64 %90, i64* %3, align 8
	}

[0x55853ac89730]:   %90 = add i64 %59, 32 {
	[0x55853ac3b3b0]:  %91 = add i64 %60, 32
	}

[0x55853ac897b0]:   store i64 %90, i64* %RSP, align 8, !tbaa !1261 {
	[0x55853ac3b250]:  store i64 %91, i64* %6, align 8
	}

[0x55853ac89818]:   ret %struct.Memory* %49 {
	[0x55853aca8758]:  ret %struct.Memory.32* %call2_40052d
	}

[0x55853aceb578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55853acf7858]:  %45 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55853acecd58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55853aced838]:  %44 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55853ac219f0]: block_400500 {
	[0x55853acbe030]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
