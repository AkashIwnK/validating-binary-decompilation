Matching sub_400530_main Vs main


[Info] Retrieve Potential Matches...
[0x563b664ff560]:   %4 = add i64 %1, 1 {
	[0x563b665dc4e0]:  %5 = add i64 %1, 1
	}

[0x563b664ff630]:   store i64 %4, i64* %PC, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ff698]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b664ff710]:   %6 = add i64 %5, -8 {
	[0x563b664f10e0]:  %8 = add i64 %7, -8
	[0x563b66518850]:  %47 = add i64 %46, -8
	}

[0x563b664ff778]:   %7 = inttoptr i64 %6 to i64* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b664ff7f0]:   store i64 %3, i64* %7, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ff858]:   %8 = load i64, i64* %PC, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b664ff960]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ff9e0]:   %9 = add i64 %5, -24 {
	[0x563b6659e0d0]:  %11 = add i64 %7, -24
	}

[0x563b664ffa60]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ffae0]:   %10 = icmp ult i64 %6, 16 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b664ffb48]:   %11 = zext i1 %10 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b664ffbf0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x563b6665ed60]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x563b664ffc80]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ffce8]:   %13 = trunc i64 %9 to i32 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b664ffd60]:   %14 = and i32 %13, 255 {
	[0x563b6651a3b0]:  %55 = and i32 %54, 255
	[0x563b665d4720]:  %16 = and i32 %15, 255
	}

[0x563b664ffe00]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x563b66517e10]:  %call2_400544 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x563b6655f800]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x563b665a2240]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x563b664ffe78]:   %16 = trunc i32 %15 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b664ffef0]:   %17 = and i8 %16, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	[0x563b6651b6a0]:  %64 = and i8 %63, 1
	[0x563b665891c0]:  %26 = and i8 %25, 1
	}

[0x563b664fff70]:   %18 = xor i8 %17, 1 {
	[0x563b66519f80]:  %59 = xor i8 %58, 1
	[0x563b66589600]:  %20 = xor i8 %19, 1
	}

[0x563b66500020]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x563b665be0a0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x563b665000b0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66500130]:   %20 = xor i64 %6, 16 {
	[0x563b66516910]:  %22 = xor i64 %8, 16
	[0x563b66519cd0]:  %60 = xor i64 %50, 16
	}

[0x563b665001b0]:   %21 = xor i64 %20, %9 {
	[0x563b66519b70]:  %61 = xor i64 %60, %51
	[0x563b6651ac30]:  %70 = xor i64 %67, %69
	[0x563b665883d0]:  %35 = xor i64 %31, %34
	[0x563b665892d0]:  %23 = xor i64 %22, %11
	}

[0x563b66500230]:   %22 = lshr i64 %21, 4 {
	[0x563b665163c0]:  %24 = lshr i64 %23, 4
	[0x563b66519a20]:  %62 = lshr i64 %61, 4
	}

[0x563b66500298]:   %23 = trunc i64 %22 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66500310]:   %24 = and i8 %23, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	[0x563b6651b6a0]:  %64 = and i8 %63, 1
	[0x563b665891c0]:  %26 = and i8 %25, 1
	}

[0x563b665003c0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x563b66522110]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x563b66500450]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665004d0]:   %26 = icmp eq i64 %9, 0 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b66500538]:   %27 = zext i1 %26 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b665005e0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x563b6651d1b0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x563b66500670]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665006f0]:   %29 = lshr i64 %9, 63 {
	[0x563b6651ad40]:  %69 = lshr i64 %50, 63
	[0x563b6651c7a0]:  %67 = lshr i64 %51, 63
	[0x563b66589930]:  %34 = lshr i64 %8, 63
	[0x563b66589b50]:  %31 = lshr i64 %11, 63
	}

[0x563b66500758]:   %30 = trunc i64 %29 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66500800]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x563b665197a0]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x563b66500890]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66500910]:   %32 = lshr i64 %6, 63 {
	[0x563b6651ad40]:  %69 = lshr i64 %50, 63
	[0x563b6651c7a0]:  %67 = lshr i64 %51, 63
	[0x563b66589930]:  %34 = lshr i64 %8, 63
	[0x563b66589b50]:  %31 = lshr i64 %11, 63
	}

[0x563b66500990]:   %33 = xor i64 %29, %32 {
	[0x563b66519b70]:  %61 = xor i64 %60, %51
	[0x563b6651ac30]:  %70 = xor i64 %67, %69
	[0x563b665883d0]:  %35 = xor i64 %31, %34
	[0x563b665892d0]:  %23 = xor i64 %22, %11
	}

[0x563b66500a10]:   %34 = add nuw nsw i64 %33, %32 {
	[0x563b66516cf0]:  %36 = add nuw nsw i64 %35, %34
	[0x563b6651cd70]:  %71 = add nuw nsw i64 %70, %67
	}

[0x563b66500a90]:   %35 = icmp eq i64 %34, 2 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b66500af8]:   %36 = zext i1 %35 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b66500ba0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x563b66519530]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x563b66500c30]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66500cb0]:   store i64 2, i64* %RDI, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66500d30]:   %38 = add i64 %5, -12 {
	[0x563b665184f0]:  %40 = add i64 %7, -12
	}

[0x563b66500db0]:   %39 = add i64 %8, 19 {
	[0x563b6658a0a0]:  %41 = add i64 %10, 19
	}

[0x563b66500e30]:   store i64 %39, i64* %PC, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66500e98]:   %40 = inttoptr i64 %38 to i32* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b66500f10]:   store i32 0, i32* %40, align 4 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66500f78]:   %41 = load i64, i64* %PC, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b66501030]:   %42 = add i64 %41, -68 {
	[0x563b66518230]:  %44 = add i64 %43, -68
	}

[0x563b665010b0]:   %43 = add i64 %41, 5 {
	[0x563b66589d70]:  %45 = add i64 %43, 5
	}

[0x563b66501118]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b66501190]:   %45 = add i64 %44, -8 {
	[0x563b664f10e0]:  %8 = add i64 %7, -8
	[0x563b66518850]:  %47 = add i64 %46, -8
	}

[0x563b665011f8]:   %46 = inttoptr i64 %45 to i64* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b66501270]:   store i64 %43, i64* %46, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665012f0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66501370]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665013f0]:   %77 = add i64 %48, 8 {
	[0x563b6651fda0]:  %78 = add i64 %49, 8
	}

[0x563b66501470]:   store i64 %77, i64* %PC, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665014d8]:   %78 = inttoptr i64 %74 to i64* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b66501538]:   %79 = load i64, i64* %78, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b665015b0]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66501630]:   %80 = add i64 %49, 32 {
	[0x563b665173a0]:  %81 = add i64 %50, 32
	}

[0x563b665016b0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66501718]:   ret %struct.Memory* %47 {
	[0x563b6658cbd8]:  ret %struct.Memory.32* %call2_400544
	}

[0x563b66501980]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665019e8]:   %53 = trunc i64 %50 to i32 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66501a60]:   %54 = and i32 %53, 255 {
	[0x563b6651a3b0]:  %55 = and i32 %54, 255
	[0x563b665d4720]:  %16 = and i32 %15, 255
	}

[0x563b66501ae0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x563b66517e10]:  %call2_400544 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x563b6655f800]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x563b665a2240]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x563b66501ba8]:   %56 = trunc i32 %55 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66501c20]:   %57 = and i8 %56, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	[0x563b6651b6a0]:  %64 = and i8 %63, 1
	[0x563b665891c0]:  %26 = and i8 %25, 1
	}

[0x563b66501ca0]:   %58 = xor i8 %57, 1 {
	[0x563b66519f80]:  %59 = xor i8 %58, 1
	[0x563b66589600]:  %20 = xor i8 %19, 1
	}

[0x563b66501d20]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66501da0]:   %59 = xor i64 %49, 16 {
	[0x563b66516910]:  %22 = xor i64 %8, 16
	[0x563b66519cd0]:  %60 = xor i64 %50, 16
	}

[0x563b66501e20]:   %60 = xor i64 %59, %50 {
	[0x563b66519b70]:  %61 = xor i64 %60, %51
	[0x563b6651ac30]:  %70 = xor i64 %67, %69
	[0x563b665883d0]:  %35 = xor i64 %31, %34
	[0x563b665892d0]:  %23 = xor i64 %22, %11
	}

[0x563b66501ea0]:   %61 = lshr i64 %60, 4 {
	[0x563b665163c0]:  %24 = lshr i64 %23, 4
	[0x563b66519a20]:  %62 = lshr i64 %61, 4
	}

[0x563b66501f08]:   %62 = trunc i64 %61 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66501f80]:   %63 = and i8 %62, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	[0x563b6651b6a0]:  %64 = and i8 %63, 1
	[0x563b665891c0]:  %26 = and i8 %25, 1
	}

[0x563b66502000]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66502080]:   %64 = icmp eq i64 %50, 0 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b66502510]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66502590]:   %66 = lshr i64 %50, 63 {
	[0x563b6651ad40]:  %69 = lshr i64 %50, 63
	[0x563b6651c7a0]:  %67 = lshr i64 %51, 63
	[0x563b66589930]:  %34 = lshr i64 %8, 63
	[0x563b66589b50]:  %31 = lshr i64 %11, 63
	}

[0x563b665025f8]:   %67 = trunc i64 %66 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66502670]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665026f0]:   %68 = lshr i64 %49, 63 {
	[0x563b6651ad40]:  %69 = lshr i64 %50, 63
	[0x563b6651c7a0]:  %67 = lshr i64 %51, 63
	[0x563b66589930]:  %34 = lshr i64 %8, 63
	[0x563b66589b50]:  %31 = lshr i64 %11, 63
	}

[0x563b66502770]:   %69 = xor i64 %66, %68 {
	[0x563b66519b70]:  %61 = xor i64 %60, %51
	[0x563b6651ac30]:  %70 = xor i64 %67, %69
	[0x563b665883d0]:  %35 = xor i64 %31, %34
	[0x563b665892d0]:  %23 = xor i64 %22, %11
	}

[0x563b665027f0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x563b66516cf0]:  %36 = add nuw nsw i64 %35, %34
	[0x563b6651cd70]:  %71 = add nuw nsw i64 %70, %67
	}

[0x563b66502870]:   %71 = icmp eq i64 %70, 2 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b665028d8]:   %72 = zext i1 %71 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b66502950]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665029d0]:   %73 = add i64 %48, 7 {
	[0x563b6651f900]:  %74 = add i64 %49, 7
	}

[0x563b66502a50]:   store i64 %73, i64* %PC, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b66502ad0]:   %74 = add i64 %49, 24 {
	[0x563b6651dcf0]:  %75 = add i64 %50, 24
	}

[0x563b66502b38]:   %75 = inttoptr i64 %50 to i64* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b66502b98]:   %76 = load i64, i64* %75, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b66502c10]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665463b0]: i64 %1 {
	[0x563b66518900]:i64 %1
	}

[0x563b665463f0]: %struct.State* %0 {
	[0x563b66518bb0]:%struct.State.1* %0
	}

[0x563b6654af68]:   %3 = load i64, i64* %RBP, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b6654b040]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x563b66577040]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x563b6654b130]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x563b66578710]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x563b6654b220]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x563b66578900]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x563b6654b330]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x563b6657ae30]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x563b6654b440]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x563b6657b000]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x563b665ac930]: %struct.Memory* %2 {
	[0x563b665182e0]:%struct.Memory.32* %2
	}

[0x563b665ad5f0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665ad750]:   %47 = tail call %struct.Memory* @sub_400500_func(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x563b66517e10]:  %call2_400544 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x563b6655f800]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x563b665a2240]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x563b665ad818]:   %48 = load i64, i64* %PC, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b665ad890]:   store i64 0, i64* %RAX, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665ad8f8]:   %49 = load i64, i64* %RSP, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b665ad970]:   %50 = add i64 %49, 16 {
	[0x563b66518b00]:  %51 = add i64 %50, 16
	}

[0x563b665ad9f0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b665adab0]:   %51 = icmp ugt i64 %49, -17 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b665adb18]:   %52 = zext i1 %51 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b665adb78]:   %65 = zext i1 %64 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x563b66516b78]:   %50 = load i64, i64* %6, align 8
From the pot matches of: [0x563b664ff698]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563b66500d30]:   %38 = add i64 %5, -12


Uprime Matches: [0x563b665184f0]:   %40 = add i64 %7, -12


Adj: [0x563b665173a0]:   %81 = add i64 %50, 32
[0x563b665189b0]:   %52 = icmp ugt i64 %50, -17
[0x563b66518b00]:   %51 = add i64 %50, 16
[0x563b66519cd0]:   %60 = xor i64 %50, 16
[0x563b6651ad40]:   %69 = lshr i64 %50, 63
[0x563b6651dcf0]:   %75 = add i64 %50, 24


Removing: [0x563b6658a748]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x563b664ff698]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563b66500d30]:   %38 = add i64 %5, -12


Uprime Matches: [0x563b665184f0]:   %40 = add i64 %7, -12


Adj: [0x563b66518850]:   %47 = add i64 %46, -8


Removing: [0x563b665873e8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563b664ff858]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x563b66500db0]:   %39 = add i64 %8, 19


Uprime Matches: [0x563b6658a0a0]:   %41 = add i64 %10, 19


Adj: [0x563b66518230]:   %44 = add i64 %43, -68
[0x563b66589d70]:   %45 = add i64 %43, 5


Removing: [0x563b66588668]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563b664ff858]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x563b66500db0]:   %39 = add i64 %8, 19


Uprime Matches: [0x563b6658a0a0]:   %41 = add i64 %10, 19


Adj: [0x563b6651f900]:   %74 = add i64 %49, 7
[0x563b6651fda0]:   %78 = add i64 %49, 8


Removing: [0x563b66570688]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b66588520]:   store i8 %32, i8* %33, align 1


Removing: [0x563b66586028]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b665d4720]:   %16 = and i32 %15, 255


Removing: [0x563b665877f8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b6651a3b0]:   %55 = and i32 %54, 255


Removing: [0x563b6658bec8]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b6651ae50]:   store i8 %68, i8* %33, align 1


Removing: [0x563b6651b6a0]:   %64 = and i8 %63, 1
From the pot matches of: [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime : [0x563b664fff70]:   %18 = xor i8 %17, 1


Uprime Matches: [0x563b66519f80]:   %59 = xor i8 %58, 1
[0x563b66589600]:   %20 = xor i8 %19, 1


Adj: [0x563b6651b2d0]:   store i8 %64, i8* %27, align 1


Removing: [0x563b665891c0]:   %26 = and i8 %25, 1
From the pot matches of: [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime : [0x563b664fff70]:   %18 = xor i8 %17, 1


Uprime Matches: [0x563b66519f80]:   %59 = xor i8 %58, 1
[0x563b66589600]:   %20 = xor i8 %19, 1


Adj: [0x563b66516270]:   store i8 %26, i8* %27, align 1


Removing: [0x563b66577bb8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563b66500f78]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x563b665010b0]:   %43 = add i64 %41, 5


Uprime Matches: [0x563b66589d70]:   %45 = add i64 %43, 5


Adj: [0x563b6658a0a0]:   %41 = add i64 %10, 19


Removing: [0x563b66588668]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563b66500f78]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x563b665010b0]:   %43 = add i64 %41, 5


Uprime Matches: [0x563b66589d70]:   %45 = add i64 %43, 5


Adj: [0x563b6651f900]:   %74 = add i64 %49, 7
[0x563b6651fda0]:   %78 = add i64 %49, 8


Removing: [0x563b66516b78]:   %50 = load i64, i64* %6, align 8
From the pot matches of: [0x563b66501118]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563b66501190]:   %45 = add i64 %44, -8


Uprime Matches: [0x563b664f10e0]:   %8 = add i64 %7, -8
[0x563b66518850]:   %47 = add i64 %46, -8


Adj: [0x563b665173a0]:   %81 = add i64 %50, 32
[0x563b665189b0]:   %52 = icmp ugt i64 %50, -17
[0x563b66518b00]:   %51 = add i64 %50, 16
[0x563b66519cd0]:   %60 = xor i64 %50, 16
[0x563b6651ad40]:   %69 = lshr i64 %50, 63
[0x563b6651dcf0]:   %75 = add i64 %50, 24


Removing: [0x563b664f10e0]:   %8 = add i64 %7, -8
From the pot matches of: [0x563b66501190]:   %45 = add i64 %44, -8


Uprime : [0x563b665012f0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x563b665171c0]:   store i64 %81, i64* %6, align 8
[0x563b66518f20]:   store i64 %47, i64* %6, align 8
[0x563b6651b0b0]:   store i64 %75, i64* %6, align 8
[0x563b66587fd0]:   store i64 %11, i64* %6, align 8
[0x563b6658a3d0]:   store i64 %51, i64* %6, align 8


Adj: [0x563b66514a10]:   store i64 %8, i64* %RBP.i, align 8
[0x563b66516910]:   %22 = xor i64 %8, 16
[0x563b66577a28]:   %9 = inttoptr i64 %8 to i64*
[0x563b665863f0]:   %12 = icmp ult i64 %8, 16
[0x563b66589930]:   %34 = lshr i64 %8, 63


Removing: [0x563b66577bb8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563b665ad818]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x563b665013f0]:   %77 = add i64 %48, 8


Uprime Matches: [0x563b6651fda0]:   %78 = add i64 %49, 8


Adj: [0x563b6658a0a0]:   %41 = add i64 %10, 19


Removing: [0x563b665873e8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563b665ad818]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x563b665013f0]:   %77 = add i64 %48, 8


Uprime Matches: [0x563b6651fda0]:   %78 = add i64 %49, 8


Adj: [0x563b66518230]:   %44 = add i64 %43, -68
[0x563b66589d70]:   %45 = add i64 %43, 5


Removing: [0x563b66577858]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x563b665ad8f8]:   %49 = load i64, i64* %RSP, align 8


Uprime : [0x563b66501630]:   %80 = add i64 %49, 32


Uprime Matches: [0x563b665173a0]:   %81 = add i64 %50, 32


Adj: [0x563b664f10e0]:   %8 = add i64 %7, -8
[0x563b665184f0]:   %40 = add i64 %7, -12
[0x563b6659e0d0]:   %11 = add i64 %7, -24


Removing: [0x563b6658a748]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x563b665ad8f8]:   %49 = load i64, i64* %RSP, align 8


Uprime : [0x563b66501630]:   %80 = add i64 %49, 32


Uprime Matches: [0x563b665173a0]:   %81 = add i64 %50, 32


Adj: [0x563b66518850]:   %47 = add i64 %46, -8


Removing: [0x563b66570688]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b66588520]:   store i8 %32, i8* %33, align 1


Removing: [0x563b66586028]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b665d4720]:   %16 = and i32 %15, 255


Removing: [0x563b665877f8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b6651a3b0]:   %55 = and i32 %54, 255


Removing: [0x563b6658bec8]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1
[0x563b6651b6a0]:   %64 = and i8 %63, 1
[0x563b665891c0]:   %26 = and i8 %25, 1


Adj: [0x563b6651ae50]:   store i8 %68, i8* %33, align 1


Removing: [0x563b6651b6a0]:   %64 = and i8 %63, 1
From the pot matches of: [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime : [0x563b66501ca0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x563b66519f80]:   %59 = xor i8 %58, 1
[0x563b66589600]:   %20 = xor i8 %19, 1


Adj: [0x563b6651b2d0]:   store i8 %64, i8* %27, align 1


Removing: [0x563b665891c0]:   %26 = and i8 %25, 1
From the pot matches of: [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime : [0x563b66501ca0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x563b66519f80]:   %59 = xor i8 %58, 1
[0x563b66589600]:   %20 = xor i8 %19, 1


Adj: [0x563b66516270]:   store i8 %26, i8* %27, align 1

Round: 1

Removing: [0x563b66584628]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1


Adj: [0x563b665891c0]:   %26 = and i8 %25, 1


Removing: [0x563b6658aad8]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1


Adj: [0x563b6651b6a0]:   %64 = and i8 %63, 1


Removing: [0x563b66577858]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x563b66501118]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563b66501190]:   %45 = add i64 %44, -8


Uprime Matches: [0x563b66518850]:   %47 = add i64 %46, -8


Adj: [0x563b664f10e0]:   %8 = add i64 %7, -8
[0x563b665184f0]:   %40 = add i64 %7, -12
[0x563b6659e0d0]:   %11 = add i64 %7, -24


Removing: [0x563b66584628]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1


Adj: [0x563b665891c0]:   %26 = and i8 %25, 1


Removing: [0x563b6658aad8]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1
[0x563b6651a1b0]:   %58 = and i8 %57, 1


Adj: [0x563b6651b6a0]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x563b664ff560]:   %4 = add i64 %1, 1 {
	[0x563b665dc4e0]:  %5 = add i64 %1, 1
	}

[0x563b664ff630]:   store i64 %4, i64* %PC, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	}

[0x563b664ff698]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	}

[0x563b664ff710]:   %6 = add i64 %5, -8 {
	[0x563b664f10e0]:  %8 = add i64 %7, -8
	}

[0x563b664ff778]:   %7 = inttoptr i64 %6 to i64* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	}

[0x563b664ff7f0]:   store i64 %3, i64* %7, align 8 {
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	}

[0x563b664ff858]:   %8 = load i64, i64* %PC, align 8 {
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	}

[0x563b664ff960]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x563b664ff9e0]:   %9 = add i64 %5, -24 {
	[0x563b6659e0d0]:  %11 = add i64 %7, -24
	}

[0x563b664ffa60]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	}

[0x563b664ffae0]:   %10 = icmp ult i64 %6, 16 {
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	}

[0x563b664ffb48]:   %11 = zext i1 %10 to i8 {
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b664ffbf0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x563b6665ed60]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x563b664ffc80]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ffce8]:   %13 = trunc i64 %9 to i32 {
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	}

[0x563b664ffd60]:   %14 = and i32 %13, 255 {
	[0x563b665d4720]:  %16 = and i32 %15, 255
	}

[0x563b664ffe00]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x563b6655f800]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x563b664ffe78]:   %16 = trunc i32 %15 to i8 {
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	}

[0x563b664ffef0]:   %17 = and i8 %16, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	}

[0x563b664fff70]:   %18 = xor i8 %17, 1 {
	[0x563b66519f80]:  %59 = xor i8 %58, 1
	[0x563b66589600]:  %20 = xor i8 %19, 1
	}

[0x563b66500020]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x563b665be0a0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x563b665000b0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	}

[0x563b66500130]:   %20 = xor i64 %6, 16 {
	[0x563b66516910]:  %22 = xor i64 %8, 16
	}

[0x563b665001b0]:   %21 = xor i64 %20, %9 {
	[0x563b665892d0]:  %23 = xor i64 %22, %11
	}

[0x563b66500230]:   %22 = lshr i64 %21, 4 {
	[0x563b665163c0]:  %24 = lshr i64 %23, 4
	}

[0x563b66500298]:   %23 = trunc i64 %22 to i8 {
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	}

[0x563b66500310]:   %24 = and i8 %23, 1 {
	[0x563b665891c0]:  %26 = and i8 %25, 1
	}

[0x563b665003c0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x563b66522110]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x563b66500450]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	}

[0x563b665004d0]:   %26 = icmp eq i64 %9, 0 {
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b66500538]:   %27 = zext i1 %26 to i8 {
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	}

[0x563b665005e0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x563b6651d1b0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x563b66500670]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	}

[0x563b665006f0]:   %29 = lshr i64 %9, 63 {
	[0x563b66589b50]:  %31 = lshr i64 %11, 63
	}

[0x563b66500758]:   %30 = trunc i64 %29 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	}

[0x563b66500800]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x563b665197a0]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x563b66500890]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	}

[0x563b66500910]:   %32 = lshr i64 %6, 63 {
	[0x563b66589930]:  %34 = lshr i64 %8, 63
	}

[0x563b66500990]:   %33 = xor i64 %29, %32 {
	[0x563b665883d0]:  %35 = xor i64 %31, %34
	}

[0x563b66500a10]:   %34 = add nuw nsw i64 %33, %32 {
	[0x563b66516cf0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x563b66500a90]:   %35 = icmp eq i64 %34, 2 {
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	}

[0x563b66500af8]:   %36 = zext i1 %35 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	}

[0x563b66500ba0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x563b66519530]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x563b66500c30]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	}

[0x563b66500cb0]:   store i64 2, i64* %RDI, align 8, !tbaa !1261 {
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	}

[0x563b66500d30]:   %38 = add i64 %5, -12 {
	[0x563b665184f0]:  %40 = add i64 %7, -12
	}

[0x563b66500db0]:   %39 = add i64 %8, 19 {
	[0x563b6658a0a0]:  %41 = add i64 %10, 19
	}

[0x563b66500e30]:   store i64 %39, i64* %PC, align 8 {
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	}

[0x563b66500e98]:   %40 = inttoptr i64 %38 to i32* {
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b66500f10]:   store i32 0, i32* %40, align 4 {
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	}

[0x563b66500f78]:   %41 = load i64, i64* %PC, align 8 {
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	}

[0x563b66501030]:   %42 = add i64 %41, -68 {
	[0x563b66518230]:  %44 = add i64 %43, -68
	}

[0x563b665010b0]:   %43 = add i64 %41, 5 {
	[0x563b66589d70]:  %45 = add i64 %43, 5
	}

[0x563b66501118]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	}

[0x563b66501190]:   %45 = add i64 %44, -8 {
	[0x563b66518850]:  %47 = add i64 %46, -8
	}

[0x563b665011f8]:   %46 = inttoptr i64 %45 to i64* {
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	}

[0x563b66501270]:   store i64 %43, i64* %46, align 8 {
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	}

[0x563b665012f0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	}

[0x563b66501370]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	}

[0x563b665013f0]:   %77 = add i64 %48, 8 {
	[0x563b6651fda0]:  %78 = add i64 %49, 8
	}

[0x563b66501470]:   store i64 %77, i64* %PC, align 8 {
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	}

[0x563b665014d8]:   %78 = inttoptr i64 %74 to i64* {
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	}

[0x563b66501538]:   %79 = load i64, i64* %78, align 8 {
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	}

[0x563b665015b0]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	}

[0x563b66501630]:   %80 = add i64 %49, 32 {
	[0x563b665173a0]:  %81 = add i64 %50, 32
	}

[0x563b665016b0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	}

[0x563b66501718]:   ret %struct.Memory* %47 {
	[0x563b6658cbd8]:  ret %struct.Memory.32* %call2_400544
	}

[0x563b66501980]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	}

[0x563b665019e8]:   %53 = trunc i64 %50 to i32 {
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	}

[0x563b66501a60]:   %54 = and i32 %53, 255 {
	[0x563b6651a3b0]:  %55 = and i32 %54, 255
	}

[0x563b66501ae0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x563b665a2240]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x563b66501ba8]:   %56 = trunc i32 %55 to i8 {
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	}

[0x563b66501c20]:   %57 = and i8 %56, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	}

[0x563b66501ca0]:   %58 = xor i8 %57, 1 {
	[0x563b66519f80]:  %59 = xor i8 %58, 1
	[0x563b66589600]:  %20 = xor i8 %19, 1
	}

[0x563b66501d20]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	}

[0x563b66501da0]:   %59 = xor i64 %49, 16 {
	[0x563b66519cd0]:  %60 = xor i64 %50, 16
	}

[0x563b66501e20]:   %60 = xor i64 %59, %50 {
	[0x563b66519b70]:  %61 = xor i64 %60, %51
	}

[0x563b66501ea0]:   %61 = lshr i64 %60, 4 {
	[0x563b66519a20]:  %62 = lshr i64 %61, 4
	}

[0x563b66501f08]:   %62 = trunc i64 %61 to i8 {
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	}

[0x563b66501f80]:   %63 = and i8 %62, 1 {
	[0x563b6651b6a0]:  %64 = and i8 %63, 1
	}

[0x563b66502000]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	}

[0x563b66502080]:   %64 = icmp eq i64 %50, 0 {
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	}

[0x563b66502510]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	}

[0x563b66502590]:   %66 = lshr i64 %50, 63 {
	[0x563b6651c7a0]:  %67 = lshr i64 %51, 63
	}

[0x563b665025f8]:   %67 = trunc i64 %66 to i8 {
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66502670]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	}

[0x563b665026f0]:   %68 = lshr i64 %49, 63 {
	[0x563b6651ad40]:  %69 = lshr i64 %50, 63
	}

[0x563b66502770]:   %69 = xor i64 %66, %68 {
	[0x563b6651ac30]:  %70 = xor i64 %67, %69
	}

[0x563b665027f0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x563b6651cd70]:  %71 = add nuw nsw i64 %70, %67
	}

[0x563b66502870]:   %71 = icmp eq i64 %70, 2 {
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	}

[0x563b665028d8]:   %72 = zext i1 %71 to i8 {
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	}

[0x563b66502950]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	}

[0x563b665029d0]:   %73 = add i64 %48, 7 {
	[0x563b6651f900]:  %74 = add i64 %49, 7
	}

[0x563b66502a50]:   store i64 %73, i64* %PC, align 8 {
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	}

[0x563b66502ad0]:   %74 = add i64 %49, 24 {
	[0x563b6651dcf0]:  %75 = add i64 %50, 24
	}

[0x563b66502b38]:   %75 = inttoptr i64 %50 to i64* {
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	}

[0x563b66502b98]:   %76 = load i64, i64* %75, align 8 {
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b66502c10]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x563b665463b0]: i64 %1 {
	[0x563b66518900]:i64 %1
	}

[0x563b665463f0]: %struct.State* %0 {
	[0x563b66518bb0]:%struct.State.1* %0
	}

[0x563b6654af68]:   %3 = load i64, i64* %RBP, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x563b6654b040]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x563b66577040]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x563b6654b130]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x563b66578710]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x563b6654b220]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x563b66578900]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x563b6654b330]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x563b6657ae30]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x563b6654b440]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x563b6657b000]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x563b665ac930]: %struct.Memory* %2 {
	[0x563b665182e0]:%struct.Memory.32* %2
	}

[0x563b665ad5f0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	}

[0x563b665ad750]:   %47 = tail call %struct.Memory* @sub_400500_func(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x563b66517e10]:  %call2_400544 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x563b665ad818]:   %48 = load i64, i64* %PC, align 8 {
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	}

[0x563b665ad890]:   store i64 0, i64* %RAX, align 8, !tbaa !1261 {
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	}

[0x563b665ad8f8]:   %49 = load i64, i64* %RSP, align 8 {
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	}

[0x563b665ad970]:   %50 = add i64 %49, 16 {
	[0x563b66518b00]:  %51 = add i64 %50, 16
	}

[0x563b665ad9f0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	}

[0x563b665adab0]:   %51 = icmp ugt i64 %49, -17 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	}

[0x563b665adb18]:   %52 = zext i1 %51 to i8 {
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	}

[0x563b665adb78]:   %65 = zext i1 %64 to i8 {
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x563b6654adf0]: block_400530 {
	[0x563b66512d10]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x563b66519f80]:   %59 = xor i8 %58, 1
From the pot matches of: [0x563b664fff70]:   %18 = xor i8 %17, 1


Uprime : [0x563b665000b0]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x563b66516a70]:   store i8 %20, i8* %21, align 1


Adj: [0x563b66519e20]:   store i8 %59, i8* %21, align 1


Removing: [0x563b66589600]:   %20 = xor i8 %19, 1
From the pot matches of: [0x563b66501ca0]:   %58 = xor i8 %57, 1


Uprime : [0x563b66501d20]:   store i8 %58, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x563b66519e20]:   store i8 %59, i8* %21, align 1


Adj: [0x563b66516a70]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x563b6651a1b0]:   %58 = and i8 %57, 1
From the pot matches of: [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime : [0x563b664fff70]:   %18 = xor i8 %17, 1


Uprime Matches: [0x563b66589600]:   %20 = xor i8 %19, 1


Adj: [0x563b66519f80]:   %59 = xor i8 %58, 1


Removing: [0x563b66514da0]:   %19 = and i8 %18, 1
From the pot matches of: [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime : [0x563b66501ca0]:   %58 = xor i8 %57, 1


Uprime Matches: [0x563b66519f80]:   %59 = xor i8 %58, 1


Adj: [0x563b66589600]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x563b66585838]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x563b664ffe78]:   %16 = trunc i32 %15 to i8


Uprime : [0x563b664ffef0]:   %17 = and i8 %16, 1


Uprime Matches: [0x563b66514da0]:   %19 = and i8 %18, 1


Adj: [0x563b6651a1b0]:   %58 = and i8 %57, 1


Removing: [0x563b665862f8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x563b66501ba8]:   %56 = trunc i32 %55 to i8


Uprime : [0x563b66501c20]:   %57 = and i8 %56, 1


Uprime Matches: [0x563b6651a1b0]:   %58 = and i8 %57, 1


Adj: [0x563b66514da0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x563b664ff560]:   %4 = add i64 %1, 1 {
	[0x563b665dc4e0]:  %5 = add i64 %1, 1
	}

[0x563b664ff630]:   store i64 %4, i64* %PC, align 8 {
	[0x563b664f02d0]:  store i64 %5, i64* %3, align 8
	}

[0x563b664ff698]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66577858]:  %7 = load i64, i64* %6, align 8
	}

[0x563b664ff710]:   %6 = add i64 %5, -8 {
	[0x563b664f10e0]:  %8 = add i64 %7, -8
	}

[0x563b664ff778]:   %7 = inttoptr i64 %6 to i64* {
	[0x563b66577a28]:  %9 = inttoptr i64 %8 to i64*
	}

[0x563b664ff7f0]:   store i64 %3, i64* %7, align 8 {
	[0x563b66514b60]:  store i64 %4, i64* %9, align 8
	}

[0x563b664ff858]:   %8 = load i64, i64* %PC, align 8 {
	[0x563b66577bb8]:  %10 = load i64, i64* %3, align 8
	}

[0x563b664ff960]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x563b66514a10]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x563b664ff9e0]:   %9 = add i64 %5, -24 {
	[0x563b6659e0d0]:  %11 = add i64 %7, -24
	}

[0x563b664ffa60]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66587fd0]:  store i64 %11, i64* %6, align 8
	}

[0x563b664ffae0]:   %10 = icmp ult i64 %6, 16 {
	[0x563b665863f0]:  %12 = icmp ult i64 %8, 16
	}

[0x563b664ffb48]:   %11 = zext i1 %10 to i8 {
	[0x563b665ce488]:  %13 = zext i1 %12 to i8
	}

[0x563b664ffbf0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x563b6665ed60]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x563b664ffc80]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x563b665c26e0]:  store i8 %13, i8* %14, align 1
	}

[0x563b664ffce8]:   %13 = trunc i64 %9 to i32 {
	[0x563b66586028]:  %15 = trunc i64 %11 to i32
	}

[0x563b664ffd60]:   %14 = and i32 %13, 255 {
	[0x563b665d4720]:  %16 = and i32 %15, 255
	}

[0x563b664ffe00]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x563b6655f800]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x563b664ffe78]:   %16 = trunc i32 %15 to i8 {
	[0x563b665862f8]:  %18 = trunc i32 %17 to i8
	}

[0x563b664ffef0]:   %17 = and i8 %16, 1 {
	[0x563b66514da0]:  %19 = and i8 %18, 1
	}

[0x563b664fff70]:   %18 = xor i8 %17, 1 {
	[0x563b66589600]:  %20 = xor i8 %19, 1
	}

[0x563b66500020]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x563b665be0a0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x563b665000b0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x563b66516a70]:  store i8 %20, i8* %21, align 1
	}

[0x563b66500130]:   %20 = xor i64 %6, 16 {
	[0x563b66516910]:  %22 = xor i64 %8, 16
	}

[0x563b665001b0]:   %21 = xor i64 %20, %9 {
	[0x563b665892d0]:  %23 = xor i64 %22, %11
	}

[0x563b66500230]:   %22 = lshr i64 %21, 4 {
	[0x563b665163c0]:  %24 = lshr i64 %23, 4
	}

[0x563b66500298]:   %23 = trunc i64 %22 to i8 {
	[0x563b66584628]:  %25 = trunc i64 %24 to i8
	}

[0x563b66500310]:   %24 = and i8 %23, 1 {
	[0x563b665891c0]:  %26 = and i8 %25, 1
	}

[0x563b665003c0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x563b66522110]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x563b66500450]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x563b66516270]:  store i8 %26, i8* %27, align 1
	}

[0x563b665004d0]:   %26 = icmp eq i64 %9, 0 {
	[0x563b66589710]:  %28 = icmp eq i64 %11, 0
	}

[0x563b66500538]:   %27 = zext i1 %26 to i8 {
	[0x563b665c2dd8]:  %29 = zext i1 %28 to i8
	}

[0x563b665005e0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x563b6651d1b0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x563b66500670]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x563b66517ba0]:  store i8 %29, i8* %30, align 1
	}

[0x563b665006f0]:   %29 = lshr i64 %9, 63 {
	[0x563b66589b50]:  %31 = lshr i64 %11, 63
	}

[0x563b66500758]:   %30 = trunc i64 %29 to i8 {
	[0x563b66570688]:  %32 = trunc i64 %31 to i8
	}

[0x563b66500800]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x563b665197a0]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x563b66500890]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x563b66588520]:  store i8 %32, i8* %33, align 1
	}

[0x563b66500910]:   %32 = lshr i64 %6, 63 {
	[0x563b66589930]:  %34 = lshr i64 %8, 63
	}

[0x563b66500990]:   %33 = xor i64 %29, %32 {
	[0x563b665883d0]:  %35 = xor i64 %31, %34
	}

[0x563b66500a10]:   %34 = add nuw nsw i64 %33, %32 {
	[0x563b66516cf0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x563b66500a90]:   %35 = icmp eq i64 %34, 2 {
	[0x563b665881d0]:  %37 = icmp eq i64 %36, 2
	}

[0x563b66500af8]:   %36 = zext i1 %35 to i8 {
	[0x563b66544358]:  %38 = zext i1 %37 to i8
	}

[0x563b66500ba0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x563b66519530]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x563b66500c30]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x563b66517d00]:  store i8 %38, i8* %39, align 1
	}

[0x563b66500cb0]:   store i64 2, i64* %RDI, align 8, !tbaa !1261 {
	[0x563b6658a1b0]:  store i64 2, i64* %RDI.i, align 8
	}

[0x563b66500d30]:   %38 = add i64 %5, -12 {
	[0x563b665184f0]:  %40 = add i64 %7, -12
	}

[0x563b66500db0]:   %39 = add i64 %8, 19 {
	[0x563b6658a0a0]:  %41 = add i64 %10, 19
	}

[0x563b66500e30]:   store i64 %39, i64* %PC, align 8 {
	[0x563b66589f90]:  store i64 %41, i64* %3, align 8
	}

[0x563b66500e98]:   %40 = inttoptr i64 %38 to i32* {
	[0x563b665dd2b8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563b66500f10]:   store i32 0, i32* %40, align 4 {
	[0x563b66518390]:  store i32 0, i32* %42, align 4
	}

[0x563b66500f78]:   %41 = load i64, i64* %PC, align 8 {
	[0x563b665873e8]:  %43 = load i64, i64* %3, align 8
	}

[0x563b66501030]:   %42 = add i64 %41, -68 {
	[0x563b66518230]:  %44 = add i64 %43, -68
	}

[0x563b665010b0]:   %43 = add i64 %41, 5 {
	[0x563b66589d70]:  %45 = add i64 %43, 5
	}

[0x563b66501118]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b6658a748]:  %46 = load i64, i64* %6, align 8
	}

[0x563b66501190]:   %45 = add i64 %44, -8 {
	[0x563b66518850]:  %47 = add i64 %46, -8
	}

[0x563b665011f8]:   %46 = inttoptr i64 %45 to i64* {
	[0x563b6658a618]:  %48 = inttoptr i64 %47 to i64*
	}

[0x563b66501270]:   store i64 %43, i64* %46, align 8 {
	[0x563b665190c0]:  store i64 %45, i64* %48, align 8
	}

[0x563b665012f0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b66518f20]:  store i64 %47, i64* %6, align 8
	}

[0x563b66501370]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b6651b0b0]:  store i64 %75, i64* %6, align 8
	}

[0x563b665013f0]:   %77 = add i64 %48, 8 {
	[0x563b6651fda0]:  %78 = add i64 %49, 8
	}

[0x563b66501470]:   store i64 %77, i64* %PC, align 8 {
	[0x563b66517610]:  store i64 %78, i64* %3, align 8
	}

[0x563b665014d8]:   %78 = inttoptr i64 %74 to i64* {
	[0x563b6658b418]:  %79 = inttoptr i64 %75 to i64*
	}

[0x563b66501538]:   %79 = load i64, i64* %78, align 8 {
	[0x563b6658b1b8]:  %80 = load i64, i64* %79, align 8
	}

[0x563b665015b0]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x563b665174f0]:  store i64 %80, i64* %3, align 8
	}

[0x563b66501630]:   %80 = add i64 %49, 32 {
	[0x563b665173a0]:  %81 = add i64 %50, 32
	}

[0x563b665016b0]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b665171c0]:  store i64 %81, i64* %6, align 8
	}

[0x563b66501718]:   ret %struct.Memory* %47 {
	[0x563b6658cbd8]:  ret %struct.Memory.32* %call2_400544
	}

[0x563b66501980]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x563b6658a300]:  store i8 %53, i8* %14, align 1
	}

[0x563b665019e8]:   %53 = trunc i64 %50 to i32 {
	[0x563b665877f8]:  %54 = trunc i64 %51 to i32
	}

[0x563b66501a60]:   %54 = and i32 %53, 255 {
	[0x563b6651a3b0]:  %55 = and i32 %54, 255
	}

[0x563b66501ae0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x563b665a2240]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x563b66501ba8]:   %56 = trunc i32 %55 to i8 {
	[0x563b66585838]:  %57 = trunc i32 %56 to i8
	}

[0x563b66501c20]:   %57 = and i8 %56, 1 {
	[0x563b6651a1b0]:  %58 = and i8 %57, 1
	}

[0x563b66501ca0]:   %58 = xor i8 %57, 1 {
	[0x563b66519f80]:  %59 = xor i8 %58, 1
	}

[0x563b66501d20]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x563b66519e20]:  store i8 %59, i8* %21, align 1
	}

[0x563b66501da0]:   %59 = xor i64 %49, 16 {
	[0x563b66519cd0]:  %60 = xor i64 %50, 16
	}

[0x563b66501e20]:   %60 = xor i64 %59, %50 {
	[0x563b66519b70]:  %61 = xor i64 %60, %51
	}

[0x563b66501ea0]:   %61 = lshr i64 %60, 4 {
	[0x563b66519a20]:  %62 = lshr i64 %61, 4
	}

[0x563b66501f08]:   %62 = trunc i64 %61 to i8 {
	[0x563b6658aad8]:  %63 = trunc i64 %62 to i8
	}

[0x563b66501f80]:   %63 = and i8 %62, 1 {
	[0x563b6651b6a0]:  %64 = and i8 %63, 1
	}

[0x563b66502000]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x563b6651b2d0]:  store i8 %64, i8* %27, align 1
	}

[0x563b66502080]:   %64 = icmp eq i64 %50, 0 {
	[0x563b6651c9f0]:  %65 = icmp eq i64 %51, 0
	}

[0x563b66502510]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x563b6651b180]:  store i8 %66, i8* %30, align 1
	}

[0x563b66502590]:   %66 = lshr i64 %50, 63 {
	[0x563b6651c7a0]:  %67 = lshr i64 %51, 63
	}

[0x563b665025f8]:   %67 = trunc i64 %66 to i8 {
	[0x563b6658bec8]:  %68 = trunc i64 %67 to i8
	}

[0x563b66502670]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x563b6651ae50]:  store i8 %68, i8* %33, align 1
	}

[0x563b665026f0]:   %68 = lshr i64 %49, 63 {
	[0x563b6651ad40]:  %69 = lshr i64 %50, 63
	}

[0x563b66502770]:   %69 = xor i64 %66, %68 {
	[0x563b6651ac30]:  %70 = xor i64 %67, %69
	}

[0x563b665027f0]:   %70 = add nuw nsw i64 %69, %66 {
	[0x563b6651cd70]:  %71 = add nuw nsw i64 %70, %67
	}

[0x563b66502870]:   %71 = icmp eq i64 %70, 2 {
	[0x563b6651fbc0]:  %72 = icmp eq i64 %71, 2
	}

[0x563b665028d8]:   %72 = zext i1 %71 to i8 {
	[0x563b6658bd98]:  %73 = zext i1 %72 to i8
	}

[0x563b66502950]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x563b6651fa60]:  store i8 %73, i8* %39, align 1
	}

[0x563b665029d0]:   %73 = add i64 %48, 7 {
	[0x563b6651f900]:  %74 = add i64 %49, 7
	}

[0x563b66502a50]:   store i64 %73, i64* %PC, align 8 {
	[0x563b6651f7a0]:  store i64 %74, i64* %3, align 8
	}

[0x563b66502ad0]:   %74 = add i64 %49, 24 {
	[0x563b6651dcf0]:  %75 = add i64 %50, 24
	}

[0x563b66502b38]:   %75 = inttoptr i64 %50 to i64* {
	[0x563b6658bc68]:  %76 = inttoptr i64 %51 to i64*
	}

[0x563b66502b98]:   %76 = load i64, i64* %75, align 8 {
	[0x563b6658b7a8]:  %77 = load i64, i64* %76, align 8
	}

[0x563b66502c10]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x563b6651d530]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x563b665463b0]: i64 %1 {
	[0x563b66518900]:i64 %1
	}

[0x563b665463f0]: %struct.State* %0 {
	[0x563b66518bb0]:%struct.State.1* %0
	}

[0x563b6654af68]:   %3 = load i64, i64* %RBP, align 8 {
	[0x563b66501908]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x563b6654b040]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x563b66577040]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x563b6654b130]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x563b66578710]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x563b6654b220]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x563b66578900]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x563b6654b330]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x563b6657ae30]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x563b6654b440]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x563b6657b000]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x563b665ac930]: %struct.Memory* %2 {
	[0x563b665182e0]:%struct.Memory.32* %2
	}

[0x563b665ad5f0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x563b66518dc0]:  store i64 %44, i64* %3, align 8
	}

[0x563b665ad750]:   %47 = tail call %struct.Memory* @sub_400500_func(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x563b66517e10]:  %call2_400544 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x563b665ad818]:   %48 = load i64, i64* %PC, align 8 {
	[0x563b66588668]:  %49 = load i64, i64* %3, align 8
	}

[0x563b665ad890]:   store i64 0, i64* %RAX, align 8, !tbaa !1261 {
	[0x563b6658a4e0]:  store i64 0, i64* %RAX.i, align 8
	}

[0x563b665ad8f8]:   %49 = load i64, i64* %RSP, align 8 {
	[0x563b66516b78]:  %50 = load i64, i64* %6, align 8
	}

[0x563b665ad970]:   %50 = add i64 %49, 16 {
	[0x563b66518b00]:  %51 = add i64 %50, 16
	}

[0x563b665ad9f0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x563b6658a3d0]:  store i64 %51, i64* %6, align 8
	}

[0x563b665adab0]:   %51 = icmp ugt i64 %49, -17 {
	[0x563b665189b0]:  %52 = icmp ugt i64 %50, -17
	}

[0x563b665adb18]:   %52 = zext i1 %51 to i8 {
	[0x563b6659d358]:  %53 = zext i1 %52 to i8
	}

[0x563b665adb78]:   %65 = zext i1 %64 to i8 {
	[0x563b6658c978]:  %66 = zext i1 %65 to i8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x563b6654adf0]: block_400530 {
	[0x563b66512d10]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
