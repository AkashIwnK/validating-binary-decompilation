Writing '/tmp/tmpvcettaut.dot'...
Writing '/tmp/tmpvcettaut.dot':Done

Reading LLVM: /tmp/tmp2tqv4i4_-query.ll
Extracting function [foo] from /tmp/tmp2tqv4i4_-query.ll
Dot file generated!
Writing '/tmp/tmpvszomb1u.dot'...
Writing '/tmp/tmpvszomb1u.dot':Done

Reading LLVM: /tmp/tmpennt63_7-target.ll
Extracting function [foo] from /tmp/tmpennt63_7-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 14 %EDI.i = bitcast %union.anon* %11 to i32*
- 15 %12 = add i64 %7, -12
- 16 %13 = load i32, i32* %EDI.i, align 4
- 17 %14 = add i64 %10, 6
- 18 store i64 %14, i64* %3, align 8
- 19 %15 = inttoptr i64 %12 to i32*
- 20 store i32 %13, i32* %15, align 4
- 21 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 22 %ESI.i11 = bitcast %union.anon* %16 to i32*
- 23 %17 = load i64, i64* %RBP.i, align 8
- 24 %18 = add i64 %17, -8
- 25 %19 = load i32, i32* %ESI.i11, align 4
- 26 %20 = load i64, i64* %3, align 8
- 27 %21 = add i64 %20, 3
- 28 store i64 %21, i64* %3, align 8
- 29 %22 = inttoptr i64 %18 to i32*
- 30 store i32 %19, i32* %22, align 4
- 31 %RSI.i8 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
- 32 %23 = load i64, i64* %RBP.i, align 8
- 33 %24 = add i64 %23, -4
- 34 %25 = load i64, i64* %3, align 8
- 35 %26 = add i64 %25, 3
- 36 store i64 %26, i64* %3, align 8
- 37 %27 = inttoptr i64 %24 to i32*
- 38 %28 = load i32, i32* %27, align 4
- 39 %29 = zext i32 %28 to i64
- 40 store i64 %29, i64* %RSI.i8, align 8
- 41 %30 = add i64 %23, -8
- 42 %31 = add i64 %25, 6
- 43 store i64 %31, i64* %3, align 8
- 44 %32 = inttoptr i64 %30 to i32*
- 45 %33 = load i32, i32* %32, align 4
- 46 %34 = add i32 %33, %28
- 47 %35 = zext i32 %34 to i64
- 48 store i64 %35, i64* %RSI.i8, align 8
- 49 %36 = icmp ult i32 %34, %28
- 50 %37 = icmp ult i32 %34, %33
- 51 %38 = or i1 %36, %37
- 52 %39 = zext i1 %38 to i8
- 53 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 54 store i8 %39, i8* %40, align 1
- 55 %41 = and i32 %34, 255
- 56 %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
- 57 %43 = trunc i32 %42 to i8
- 58 %44 = and i8 %43, 1
- 59 %45 = xor i8 %44, 1
- 60 %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 61 store i8 %45, i8* %46, align 1
- 62 %47 = xor i32 %33, %28
- 63 %48 = xor i32 %47, %34
- 64 %49 = lshr i32 %48, 4
- 65 %50 = trunc i32 %49 to i8
- 66 %51 = and i8 %50, 1
- 67 %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 68 store i8 %51, i8* %52, align 1
- 69 %53 = icmp eq i32 %34, 0
- 70 %54 = zext i1 %53 to i8
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 72 store i8 %54, i8* %55, align 1
- 73 %56 = lshr i32 %34, 31
- 74 %57 = trunc i32 %56 to i8
- 75 %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 76 store i8 %57, i8* %58, align 1
- 77 %59 = lshr i32 %28, 31
- 78 %60 = lshr i32 %33, 31
- 79 %61 = xor i32 %56, %59
- 80 %62 = xor i32 %56, %60
- 81 %63 = add nuw nsw i32 %61, %62
- 82 %64 = icmp eq i32 %63, 2
- 83 %65 = zext i1 %64 to i8
- 84 %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 85 store i8 %65, i8* %66, align 1
- 86 %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 87 store i64 %35, i64* %RAX.i, align 8
- 88 %67 = add i64 %25, 9
- 89 store i64 %67, i64* %3, align 8
- 90 %68 = load i64, i64* %6, align 8
- 91 %69 = add i64 %68, 8
- 92 %70 = inttoptr i64 %68 to i64*
- 93 %71 = load i64, i64* %70, align 8
- 94 store i64 %71, i64* %RBP.i, align 8
- 95 store i64 %69, i64* %6, align 8
- 96 %72 = add i64 %25, 10
- 97 store i64 %72, i64* %3, align 8
- 98 %73 = inttoptr i64 %69 to i64*
- 99 %74 = load i64, i64* %73, align 8
- 100 store i64 %74, i64* %3, align 8
- 101 %75 = add i64 %68, 16
- 102 store i64 %75, i64* %6, align 8
- 103 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd1d74d90>, {0: {0}, 1: {7}, 2: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 3: {9}, 4: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 5: {11}, 6: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 7: {26, 42, 13}, 8: {98, 38, 45, 14, 23, 92, 31}, 9: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 10: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 11: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 12: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 13: {3}, 14: {2, 4}, 15: {19}, 16: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 17: {43, 21}, 18: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 19: {98, 38, 45, 14, 23, 92, 31}, 20: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 21: {1}, 22: {2, 4}, 23: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 24: {26, 42, 13}, 25: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 26: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 27: {36, 29}, 28: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 29: {98, 38, 45, 14, 23, 92, 31}, 30: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 31: {6}, 32: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 33: {34}, 34: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 35: {36, 29}, 36: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 37: {98, 38, 45, 14, 23, 92, 31}, 38: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 39: {71, 40, 48, 84, 53}, 40: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 41: {26, 42, 13}, 42: {43, 21}, 43: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 44: {98, 38, 45, 14, 23, 92, 31}, 45: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 46: {82, 47}, 47: {71, 40, 48, 84, 53}, 48: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 49: {50, 51, 70}, 50: {50, 51, 70}, 51: {52}, 52: {71, 40, 48, 84, 53}, 53: {54}, 54: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 55: {56}, 56: {57}, 57: {58, 75, 66}, 58: {67, 59}, 59: {60}, 60: {61}, 61: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 62: {64, 81, 80, 63}, 63: {64, 81, 80, 63}, 64: {65}, 65: {58, 75, 66}, 66: {67, 59}, 67: {68}, 68: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 69: {50, 51, 70}, 70: {71, 40, 48, 84, 53}, 71: {72}, 72: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 73: {74, 78, 79}, 74: {58, 75, 66}, 75: {76}, 76: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 77: {74, 78, 79}, 78: {74, 78, 79}, 79: {64, 81, 80, 63}, 80: {64, 81, 80, 63}, 81: {82, 47}, 82: {83}, 83: {71, 40, 48, 84, 53}, 84: {85}, 85: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 86: {5}, 87: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 88: {88}, 89: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 90: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 91: {91}, 92: {98, 38, 45, 14, 23, 92, 31}, 93: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 94: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 95: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 96: {96}, 97: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 98: {98, 38, 45, 14, 23, 92, 31}, 99: {33, 35, 99, 39, 8, 12, 46, 17, 20, 25, 90, 27, 28, 93}, 100: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 101: {101}, 102: {10, 15, 16, 18, 22, 24, 30, 32, 37, 41, 44, 49, 55, 62, 69, 73, 77, 86, 87, 89, 94, 95, 97, 100, 102}, 103: {103}})
Equivalent! frozenset({43, 21}) {17, 42}
Equivalent! frozenset({44, 22}) {18, 43}
Equivalent! frozenset({36, 29}) {35, 27}
Equivalent! frozenset({37, 30}) {28, 36}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd1d74d90>, {0: {0}, 1: {7}, 2: {8}, 3: {9}, 4: {10}, 5: {11}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16}, 11: {17, 35}, 12: {18}, 13: {3}, 14: {4}, 15: {19}, 16: {20}, 17: {43}, 18: {44}, 19: {23}, 20: {24}, 21: {1}, 22: {2}, 23: {25}, 24: {26}, 25: {27}, 26: {35, 28}, 27: {29}, 28: {37}, 29: {31}, 30: {32}, 31: {6}, 32: {33}, 33: {34}, 34: {17, 35, 28}, 35: {36}, 36: {30}, 37: {38}, 38: {39}, 39: {40}, 40: {41}, 41: {42}, 42: {21}, 43: {22}, 44: {45}, 45: {46}, 46: {47}, 47: {48}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {56}, 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {64}, 64: {65}, 65: {66}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {72}, 72: {73}, 73: {74}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {80}, 80: {81}, 81: {82}, 82: {83}, 83: {84}, 84: {85}, 85: {86}, 86: {5}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
MORE 11 POT: 2
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 bitcast bitcast
EXACT 15 add add
EXACT 16 load load
EXACT 17 add add
EXACT 18 store store
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 bitcast bitcast
EXACT 23 load load
EXACT 24 add add
EXACT 25 load load
MORE 26 POT: 2
EXACT 27 add add
EXACT 28 store store
EXACT 29 inttoptr inttoptr
EXACT 30 store store
EXACT 31 getelementptr getelementptr
EXACT 32 load load
EXACT 33 add add
MORE 34 POT: 3
EXACT 35 add add
EXACT 36 store store
EXACT 37 inttoptr inttoptr
EXACT 38 load load
EXACT 39 zext zext
EXACT 40 store store
EXACT 41 add add
EXACT 42 add add
EXACT 43 store store
EXACT 44 inttoptr inttoptr
EXACT 45 load load
EXACT 46 add add
EXACT 47 zext zext
EXACT 48 store store
EXACT 49 icmp icmp
EXACT 50 icmp icmp
EXACT 51 or or
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 and and
EXACT 56 tail tail
EXACT 57 trunc trunc
EXACT 58 and and
EXACT 59 xor xor
EXACT 60 getelementptr getelementptr
EXACT 61 store store
EXACT 62 xor xor
EXACT 63 xor xor
EXACT 64 lshr lshr
EXACT 65 trunc trunc
EXACT 66 and and
EXACT 67 getelementptr getelementptr
EXACT 68 store store
EXACT 69 icmp icmp
EXACT 70 zext zext
EXACT 71 getelementptr getelementptr
EXACT 72 store store
EXACT 73 lshr lshr
EXACT 74 trunc trunc
EXACT 75 getelementptr getelementptr
EXACT 76 store store
EXACT 77 lshr lshr
EXACT 78 lshr lshr
EXACT 79 xor xor
EXACT 80 xor xor
EXACT 81 add add
EXACT 82 icmp icmp
EXACT 83 zext zext
EXACT 84 getelementptr getelementptr
EXACT 85 store store
EXACT 86 getelementptr getelementptr
EXACT 87 store store
EXACT 88 add add
EXACT 89 store store
EXACT 90 load load
EXACT 91 add add
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 store store
EXACT 95 store store
EXACT 96 add add
EXACT 97 store store
EXACT 98 inttoptr inttoptr
EXACT 99 load load
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 2 %ESI = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 4 %EDI = bitcast %union.anon* %4 to i32*
- 5 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 6 %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %5 = load i64, i64* %RBP, align 8
- 9 %6 = add i64 %1, 1
- 10 store i64 %6, i64* %PC, align 8
- 11 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %8 = load i64, i64* %7, align 8
- 13 %9 = add i64 %8, -8
- 14 %10 = inttoptr i64 %9 to i64*
- 15 store i64 %5, i64* %10, align 8
- 16 store i64 %9, i64* %7, align 8
- 17 %11 = load i64, i64* %PC, align 8
- 18 store i64 %9, i64* %RBP, align 8
- 19 %12 = add i64 %8, -12
- 20 %13 = load i32, i32* %EDI, align 4
- 21 %14 = add i64 %11, 6
- 22 store i64 %14, i64* %PC, align 8
- 23 %15 = inttoptr i64 %12 to i32*
- 24 store i32 %13, i32* %15, align 4
- 25 %16 = load i64, i64* %RBP, align 8
- 26 %17 = add i64 %16, -8
- 27 %18 = load i32, i32* %ESI, align 4
- 28 %19 = load i64, i64* %PC, align 8
- 29 %20 = add i64 %19, 3
- 30 store i64 %20, i64* %PC, align 8
- 31 %21 = inttoptr i64 %17 to i32*
- 32 store i32 %18, i32* %21, align 4
- 33 %22 = load i64, i64* %RBP, align 8
- 34 %23 = add i64 %22, -4
- 35 %24 = load i64, i64* %PC, align 8
- 36 %25 = add i64 %24, 3
- 37 store i64 %25, i64* %PC, align 8
- 38 %26 = inttoptr i64 %23 to i32*
- 39 %27 = load i32, i32* %26, align 4
- 40 %28 = zext i32 %27 to i64
- 41 store i64 %28, i64* %RSI, align 8
- 42 %29 = add i64 %22, -8
- 43 %30 = add i64 %24, 6
- 44 store i64 %30, i64* %PC, align 8
- 45 %31 = inttoptr i64 %29 to i32*
- 46 %32 = load i32, i32* %31, align 4
- 47 %33 = add i32 %32, %27
- 48 %34 = zext i32 %33 to i64
- 49 store i64 %34, i64* %RSI, align 8
- 50 %35 = icmp ult i32 %33, %27
- 51 %36 = icmp ult i32 %33, %32
- 52 %37 = or i1 %35, %36
- 53 %38 = zext i1 %37 to i8
- 54 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 55 store i8 %38, i8* %39, align 1
- 56 %40 = and i32 %33, 255
- 57 %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12
- 58 %42 = trunc i32 %41 to i8
- 59 %43 = and i8 %42, 1
- 60 %44 = xor i8 %43, 1
- 61 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 62 store i8 %44, i8* %45, align 1
- 63 %46 = xor i32 %32, %27
- 64 %47 = xor i32 %46, %33
- 65 %48 = lshr i32 %47, 4
- 66 %49 = trunc i32 %48 to i8
- 67 %50 = and i8 %49, 1
- 68 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 69 store i8 %50, i8* %51, align 1
- 70 %52 = icmp eq i32 %33, 0
- 71 %53 = zext i1 %52 to i8
- 72 %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 73 store i8 %53, i8* %54, align 1
- 74 %55 = lshr i32 %33, 31
- 75 %56 = trunc i32 %55 to i8
- 76 %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 77 store i8 %56, i8* %57, align 1
- 78 %58 = lshr i32 %27, 31
- 79 %59 = lshr i32 %32, 31
- 80 %60 = xor i32 %55, %58
- 81 %61 = xor i32 %55, %59
- 82 %62 = add nuw nsw i32 %60, %61
- 83 %63 = icmp eq i32 %62, 2
- 84 %64 = zext i1 %63 to i8
- 85 %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 86 store i8 %64, i8* %65, align 1
- 87 store i64 %34, i64* %RAX, align 8
- 88 %66 = add i64 %24, 9
- 89 store i64 %66, i64* %PC, align 8
- 90 %67 = load i64, i64* %7, align 8
- 91 %68 = add i64 %67, 8
- 92 %69 = inttoptr i64 %67 to i64*
- 93 %70 = load i64, i64* %69, align 8
- 94 store i64 %70, i64* %RBP, align 8
- 95 store i64 %68, i64* %7, align 8
- 96 %71 = add i64 %24, 10
- 97 store i64 %71, i64* %PC, align 8
- 98 %72 = inttoptr i64 %68 to i64*
- 99 %73 = load i64, i64* %72, align 8
- 100 store i64 %73, i64* %PC, align 8
- 101 %74 = add i64 %67, 16
- 102 store i64 %74, i64* %7, align 8
- 103 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd1d74f28>, {0: {0}, 1: {21}, 2: {14, 22}, 3: {13}, 4: {14, 22}, 5: {86}, 6: {31}, 7: {1}, 8: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 9: {3}, 10: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 11: {5}, 12: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 13: {24, 41, 7}, 14: {98, 37, 8, 44, 19, 92, 29}, 15: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 16: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 17: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 18: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 19: {15}, 20: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 21: {17, 42}, 22: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 23: {98, 37, 8, 44, 19, 92, 29}, 24: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 25: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 26: {24, 41, 7}, 27: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 28: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 29: {35, 27}, 30: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 31: {98, 37, 8, 44, 19, 92, 29}, 32: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 33: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 34: {33}, 35: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 36: {35, 27}, 37: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 38: {98, 37, 8, 44, 19, 92, 29}, 39: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 40: {70, 39, 47, 83, 52}, 41: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 42: {24, 41, 7}, 43: {17, 42}, 44: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 45: {98, 37, 8, 44, 19, 92, 29}, 46: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 47: {81, 46}, 48: {70, 39, 47, 83, 52}, 49: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 50: {49, 50, 69}, 51: {49, 50, 69}, 52: {51}, 53: {70, 39, 47, 83, 52}, 54: {53}, 55: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 56: {55}, 57: {56}, 58: {65, 57, 74}, 59: {58, 66}, 60: {59}, 61: {60}, 62: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 63: {80, 79, 62, 63}, 64: {80, 79, 62, 63}, 65: {64}, 66: {65, 57, 74}, 67: {58, 66}, 68: {67}, 69: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 70: {49, 50, 69}, 71: {70, 39, 47, 83, 52}, 72: {71}, 73: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 74: {73, 77, 78}, 75: {65, 57, 74}, 76: {75}, 77: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 78: {73, 77, 78}, 79: {73, 77, 78}, 80: {80, 79, 62, 63}, 81: {80, 79, 62, 63}, 82: {81, 46}, 83: {82}, 84: {70, 39, 47, 83, 52}, 85: {84}, 86: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 87: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 88: {88}, 89: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 90: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 91: {91}, 92: {98, 37, 8, 44, 19, 92, 29}, 93: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 94: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 95: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 96: {96}, 97: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 98: {98, 37, 8, 44, 19, 92, 29}, 99: {32, 2, 34, 99, 90, 6, 38, 11, 45, 16, 23, 25, 26, 93}, 100: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 101: {101}, 102: {4, 9, 10, 12, 18, 20, 28, 30, 36, 40, 43, 48, 54, 61, 68, 72, 76, 85, 87, 89, 94, 95, 97, 100, 102}, 103: {103}})
Equivalent! frozenset({17, 42}) {43, 21}
Equivalent! frozenset({18, 43}) {44, 22}
Equivalent! frozenset({27, 35}) {36, 29}
Equivalent! frozenset({28, 36}) {37, 30}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd1d74f28>, {0: {0}, 1: {21}, 2: {22}, 3: {13}, 4: {14}, 5: {86}, 6: {31}, 7: {1}, 8: {2}, 9: {3}, 10: {4}, 11: {5}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10}, 17: {34, 11}, 18: {12}, 19: {15}, 20: {16}, 21: {42}, 22: {43}, 23: {19}, 24: {20}, 25: {23}, 26: {24}, 27: {25}, 28: {26, 34}, 29: {35}, 30: {36}, 31: {29}, 32: {30}, 33: {32}, 34: {33}, 35: {26, 11, 34}, 36: {27}, 37: {28}, 38: {37}, 39: {38}, 40: {39}, 41: {40}, 42: {41}, 43: {17}, 44: {18}, 45: {44}, 46: {45}, 47: {46}, 48: {47}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {63}, 65: {64}, 66: {65}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {71}, 73: {72}, 74: {73}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {79}, 81: {80}, 82: {81}, 83: {82}, 84: {83}, 85: {84}, 86: {85}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 store store
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
EXACT 16 store store
MORE 17 POT: 2
EXACT 18 store store
EXACT 19 add add
EXACT 20 load load
EXACT 21 add add
EXACT 22 store store
EXACT 23 inttoptr inttoptr
EXACT 24 store store
EXACT 25 load load
EXACT 26 add add
EXACT 27 load load
MORE 28 POT: 2
EXACT 29 add add
EXACT 30 store store
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 load load
EXACT 34 add add
MORE 35 POT: 3
EXACT 36 add add
EXACT 37 store store
EXACT 38 inttoptr inttoptr
EXACT 39 load load
EXACT 40 zext zext
EXACT 41 store store
EXACT 42 add add
EXACT 43 add add
EXACT 44 store store
EXACT 45 inttoptr inttoptr
EXACT 46 load load
EXACT 47 add add
EXACT 48 zext zext
EXACT 49 store store
EXACT 50 icmp icmp
EXACT 51 icmp icmp
EXACT 52 or or
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 and and
EXACT 57 tail tail
EXACT 58 trunc trunc
EXACT 59 and and
EXACT 60 xor xor
EXACT 61 getelementptr getelementptr
EXACT 62 store store
EXACT 63 xor xor
EXACT 64 xor xor
EXACT 65 lshr lshr
EXACT 66 trunc trunc
EXACT 67 and and
EXACT 68 getelementptr getelementptr
EXACT 69 store store
EXACT 70 icmp icmp
EXACT 71 zext zext
EXACT 72 getelementptr getelementptr
EXACT 73 store store
EXACT 74 lshr lshr
EXACT 75 trunc trunc
EXACT 76 getelementptr getelementptr
EXACT 77 store store
EXACT 78 lshr lshr
EXACT 79 lshr lshr
EXACT 80 xor xor
EXACT 81 xor xor
EXACT 82 add add
EXACT 83 icmp icmp
EXACT 84 zext zext
EXACT 85 getelementptr getelementptr
EXACT 86 store store
EXACT 87 store store
EXACT 88 add add
EXACT 89 store store
EXACT 90 load load
EXACT 91 add add
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 store store
EXACT 95 store store
EXACT 96 add add
EXACT 97 store store
EXACT 98 inttoptr inttoptr
EXACT 99 load load
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI.i11 = bitcast %union.anon* %16 to i32*', '%17 = load i64, i64* %RBP.i, align 8', '%18 = add i64 %17, -8', '%19 = load i32, i32* %ESI.i11, align 4', '%21 = add i64 %20, 3', 'store i64 %21, i64* %3, align 8', '%22 = inttoptr i64 %18 to i32*', 'store i32 %19, i32* %22, align 4', '%RSI.i8 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0', '%23 = load i64, i64* %RBP.i, align 8', '%24 = add i64 %23, -4', '%26 = add i64 %25, 3', 'store i64 %26, i64* %3, align 8', '%27 = inttoptr i64 %24 to i32*', '%28 = load i32, i32* %27, align 4', '%29 = zext i32 %28 to i64', 'store i64 %29, i64* %RSI.i8, align 8', '%30 = add i64 %23, -8', '%31 = add i64 %25, 6', 'store i64 %31, i64* %3, align 8', '%32 = inttoptr i64 %30 to i32*', '%33 = load i32, i32* %32, align 4', '%34 = add i32 %33, %28', '%35 = zext i32 %34 to i64', 'store i64 %35, i64* %RSI.i8, align 8', '%36 = icmp ult i32 %34, %28', '%37 = icmp ult i32 %34, %33', '%38 = or i1 %36, %37', '%39 = zext i1 %38 to i8', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %39, i8* %40, align 1', '%41 = and i32 %34, 255', '%42 = tail call i32 @llvm.ctpop.i32(i32 %41)', '%43 = trunc i32 %42 to i8', '%44 = and i8 %43, 1', '%45 = xor i8 %44, 1', '%46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %45, i8* %46, align 1', '%47 = xor i32 %33, %28', '%48 = xor i32 %47, %34', '%49 = lshr i32 %48, 4', '%50 = trunc i32 %49 to i8', '%51 = and i8 %50, 1', '%52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %51, i8* %52, align 1', '%53 = icmp eq i32 %34, 0', '%54 = zext i1 %53 to i8', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %54, i8* %55, align 1', '%56 = lshr i32 %34, 31', '%57 = trunc i32 %56 to i8', '%58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %57, i8* %58, align 1', '%59 = lshr i32 %28, 31', '%60 = lshr i32 %33, 31', '%61 = xor i32 %56, %59', '%62 = xor i32 %56, %60', '%63 = add nuw nsw i32 %61, %62', '%64 = icmp eq i32 %63, 2', '%65 = zext i1 %64 to i8', '%66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %65, i8* %66, align 1', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 %35, i64* %RAX.i, align 8', '%67 = add i64 %25, 9', 'store i64 %67, i64* %3, align 8', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, 8', '%70 = inttoptr i64 %68 to i64*', '%71 = load i64, i64* %70, align 8', 'store i64 %71, i64* %RBP.i, align 8', 'store i64 %69, i64* %6, align 8', '%72 = add i64 %25, 10', 'store i64 %72, i64* %3, align 8', '%73 = inttoptr i64 %69 to i64*', '%74 = load i64, i64* %73, align 8', 'store i64 %74, i64* %3, align 8', '%75 = add i64 %68, 16', 'store i64 %75, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %11 to i32*
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = load i32, i32* %EDI.i, align 4
Found line to remove! %14 = add i64 %10, 6
Found line to remove! store i64 %14, i64* %3, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Found line to remove! %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI.i11 = bitcast %union.anon* %16 to i32*
Found line to remove! %17 = load i64, i64* %RBP.i, align 8
Found line to remove! %18 = add i64 %17, -8
Found line to remove! %19 = load i32, i32* %ESI.i11, align 4
Keep: %20 = load i64, i64* %3, align 8
Found line to remove! %21 = add i64 %20, 3
Found line to remove! store i64 %21, i64* %3, align 8
Found line to remove! %22 = inttoptr i64 %18 to i32*
Found line to remove! store i32 %19, i32* %22, align 4
Found line to remove! %RSI.i8 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
Found line to remove! %23 = load i64, i64* %RBP.i, align 8
Found line to remove! %24 = add i64 %23, -4
Keep: %25 = load i64, i64* %3, align 8
Found line to remove! %26 = add i64 %25, 3
Found line to remove! store i64 %26, i64* %3, align 8
Found line to remove! %27 = inttoptr i64 %24 to i32*
Found line to remove! %28 = load i32, i32* %27, align 4
Found line to remove! %29 = zext i32 %28 to i64
Found line to remove! store i64 %29, i64* %RSI.i8, align 8
Found line to remove! %30 = add i64 %23, -8
Found line to remove! %31 = add i64 %25, 6
Found line to remove! store i64 %31, i64* %3, align 8
Found line to remove! %32 = inttoptr i64 %30 to i32*
Found line to remove! %33 = load i32, i32* %32, align 4
Found line to remove! %34 = add i32 %33, %28
Found line to remove! %35 = zext i32 %34 to i64
Found line to remove! store i64 %35, i64* %RSI.i8, align 8
Found line to remove! %36 = icmp ult i32 %34, %28
Found line to remove! %37 = icmp ult i32 %34, %33
Found line to remove! %38 = or i1 %36, %37
Found line to remove! %39 = zext i1 %38 to i8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %39, i8* %40, align 1
Found line to remove! %41 = and i32 %34, 255
Found line to remove! %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
Found line to remove! %43 = trunc i32 %42 to i8
Found line to remove! %44 = and i8 %43, 1
Found line to remove! %45 = xor i8 %44, 1
Found line to remove! %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %45, i8* %46, align 1
Found line to remove! %47 = xor i32 %33, %28
Found line to remove! %48 = xor i32 %47, %34
Found line to remove! %49 = lshr i32 %48, 4
Found line to remove! %50 = trunc i32 %49 to i8
Found line to remove! %51 = and i8 %50, 1
Found line to remove! %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %51, i8* %52, align 1
Found line to remove! %53 = icmp eq i32 %34, 0
Found line to remove! %54 = zext i1 %53 to i8
Found line to remove! %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %54, i8* %55, align 1
Found line to remove! %56 = lshr i32 %34, 31
Found line to remove! %57 = trunc i32 %56 to i8
Found line to remove! %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %57, i8* %58, align 1
Found line to remove! %59 = lshr i32 %28, 31
Found line to remove! %60 = lshr i32 %33, 31
Found line to remove! %61 = xor i32 %56, %59
Found line to remove! %62 = xor i32 %56, %60
Found line to remove! %63 = add nuw nsw i32 %61, %62
Found line to remove! %64 = icmp eq i32 %63, 2
Found line to remove! %65 = zext i1 %64 to i8
Found line to remove! %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %65, i8* %66, align 1
Found line to remove! %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 %35, i64* %RAX.i, align 8
Found line to remove! %67 = add i64 %25, 9
Found line to remove! store i64 %67, i64* %3, align 8
Found line to remove! %68 = load i64, i64* %6, align 8
Found line to remove! %69 = add i64 %68, 8
Found line to remove! %70 = inttoptr i64 %68 to i64*
Found line to remove! %71 = load i64, i64* %70, align 8
Found line to remove! store i64 %71, i64* %RBP.i, align 8
Found line to remove! store i64 %69, i64* %6, align 8
Found line to remove! %72 = add i64 %25, 10
Found line to remove! store i64 %72, i64* %3, align 8
Found line to remove! %73 = inttoptr i64 %69 to i64*
Found line to remove! %74 = load i64, i64* %73, align 8
Found line to remove! store i64 %74, i64* %3, align 8
Found line to remove! %75 = add i64 %68, 16
Found line to remove! store i64 %75, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', 'store i64 %9, i64* %7, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -12', '%13 = load i32, i32* %EDI, align 4', '%14 = add i64 %11, 6', 'store i64 %14, i64* %PC, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%16 = load i64, i64* %RBP, align 8', '%17 = add i64 %16, -8', '%18 = load i32, i32* %ESI, align 4', '%20 = add i64 %19, 3', 'store i64 %20, i64* %PC, align 8', '%21 = inttoptr i64 %17 to i32*', 'store i32 %18, i32* %21, align 4', '%22 = load i64, i64* %RBP, align 8', '%23 = add i64 %22, -4', '%25 = add i64 %24, 3', 'store i64 %25, i64* %PC, align 8', '%26 = inttoptr i64 %23 to i32*', '%27 = load i32, i32* %26, align 4', '%28 = zext i32 %27 to i64', 'store i64 %28, i64* %RSI, align 8', '%29 = add i64 %22, -8', '%30 = add i64 %24, 6', 'store i64 %30, i64* %PC, align 8', '%31 = inttoptr i64 %29 to i32*', '%32 = load i32, i32* %31, align 4', '%33 = add i32 %32, %27', '%34 = zext i32 %33 to i64', 'store i64 %34, i64* %RSI, align 8', '%35 = icmp ult i32 %33, %27', '%36 = icmp ult i32 %33, %32', '%37 = or i1 %35, %36', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %38, i8* %39, align 1', '%40 = and i32 %33, 255', '%41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12', '%42 = trunc i32 %41 to i8', '%43 = and i8 %42, 1', '%44 = xor i8 %43, 1', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %44, i8* %45, align 1', '%46 = xor i32 %32, %27', '%47 = xor i32 %46, %33', '%48 = lshr i32 %47, 4', '%49 = trunc i32 %48 to i8', '%50 = and i8 %49, 1', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %50, i8* %51, align 1', '%52 = icmp eq i32 %33, 0', '%53 = zext i1 %52 to i8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %53, i8* %54, align 1', '%55 = lshr i32 %33, 31', '%56 = trunc i32 %55 to i8', '%57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %56, i8* %57, align 1', '%58 = lshr i32 %27, 31', '%59 = lshr i32 %32, 31', '%60 = xor i32 %55, %58', '%61 = xor i32 %55, %59', '%62 = add nuw nsw i32 %60, %61', '%63 = icmp eq i32 %62, 2', '%64 = zext i1 %63 to i8', '%65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %64, i8* %65, align 1', 'store i64 %34, i64* %RAX, align 8', '%66 = add i64 %24, 9', 'store i64 %66, i64* %PC, align 8', '%67 = load i64, i64* %7, align 8', '%68 = add i64 %67, 8', '%69 = inttoptr i64 %67 to i64*', '%70 = load i64, i64* %69, align 8', 'store i64 %70, i64* %RBP, align 8', 'store i64 %68, i64* %7, align 8', '%71 = add i64 %24, 10', 'store i64 %71, i64* %PC, align 8', '%72 = inttoptr i64 %68 to i64*', '%73 = load i64, i64* %72, align 8', 'store i64 %73, i64* %PC, align 8', '%74 = add i64 %67, 16', 'store i64 %74, i64* %7, align 8', 'ret %struct.Memory* %2'])Writing '/tmp/tmpv0j41nw0.dot'...
Writing '/tmp/tmpv0j41nw0.dot':Done

Reading LLVM: /tmp/tmp2tqv4i4_-query.ll
Extracting function [foo] from /tmp/tmp2tqv4i4_-query.ll
Dot file generated!
Writing '/tmp/tmpj4ug0oqu.dot'...
Writing '/tmp/tmpj4ug0oqu.dot':Done

Reading LLVM: /tmp/tmpennt63_7-target.ll
Extracting function [foo] from /tmp/tmpennt63_7-target.ll
Dot file generated!

Keep: block_400520:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %8 = load i64, i64* %7, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %5, i64* %10, align 8
Found line to remove! store i64 %9, i64* %7, align 8
Keep: %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -12
Found line to remove! %13 = load i32, i32* %EDI, align 4
Found line to remove! %14 = add i64 %11, 6
Found line to remove! store i64 %14, i64* %PC, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Found line to remove! %16 = load i64, i64* %RBP, align 8
Found line to remove! %17 = add i64 %16, -8
Found line to remove! %18 = load i32, i32* %ESI, align 4
Keep: %19 = load i64, i64* %PC, align 8
Found line to remove! %20 = add i64 %19, 3
Found line to remove! store i64 %20, i64* %PC, align 8
Found line to remove! %21 = inttoptr i64 %17 to i32*
Found line to remove! store i32 %18, i32* %21, align 4
Found line to remove! %22 = load i64, i64* %RBP, align 8
Found line to remove! %23 = add i64 %22, -4
Keep: %24 = load i64, i64* %PC, align 8
Found line to remove! %25 = add i64 %24, 3
Found line to remove! store i64 %25, i64* %PC, align 8
Found line to remove! %26 = inttoptr i64 %23 to i32*
Found line to remove! %27 = load i32, i32* %26, align 4
Found line to remove! %28 = zext i32 %27 to i64
Found line to remove! store i64 %28, i64* %RSI, align 8
Found line to remove! %29 = add i64 %22, -8
Found line to remove! %30 = add i64 %24, 6
Found line to remove! store i64 %30, i64* %PC, align 8
Found line to remove! %31 = inttoptr i64 %29 to i32*
Found line to remove! %32 = load i32, i32* %31, align 4
Found line to remove! %33 = add i32 %32, %27
Found line to remove! %34 = zext i32 %33 to i64
Found line to remove! store i64 %34, i64* %RSI, align 8
Found line to remove! %35 = icmp ult i32 %33, %27
Found line to remove! %36 = icmp ult i32 %33, %32
Found line to remove! %37 = or i1 %35, %36
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = and i32 %33, 255
Found line to remove! %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12
Found line to remove! %42 = trunc i32 %41 to i8
Found line to remove! %43 = and i8 %42, 1
Found line to remove! %44 = xor i8 %43, 1
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %44, i8* %45, align 1
Found line to remove! %46 = xor i32 %32, %27
Found line to remove! %47 = xor i32 %46, %33
Found line to remove! %48 = lshr i32 %47, 4
Found line to remove! %49 = trunc i32 %48 to i8
Found line to remove! %50 = and i8 %49, 1
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %50, i8* %51, align 1
Found line to remove! %52 = icmp eq i32 %33, 0
Found line to remove! %53 = zext i1 %52 to i8
Found line to remove! %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %53, i8* %54, align 1
Found line to remove! %55 = lshr i32 %33, 31
Found line to remove! %56 = trunc i32 %55 to i8
Found line to remove! %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %56, i8* %57, align 1
Found line to remove! %58 = lshr i32 %27, 31
Found line to remove! %59 = lshr i32 %32, 31
Found line to remove! %60 = xor i32 %55, %58
Found line to remove! %61 = xor i32 %55, %59
Found line to remove! %62 = add nuw nsw i32 %60, %61
Found line to remove! %63 = icmp eq i32 %62, 2
Found line to remove! %64 = zext i1 %63 to i8
Found line to remove! %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %64, i8* %65, align 1
Found line to remove! store i64 %34, i64* %RAX, align 8
Found line to remove! %66 = add i64 %24, 9
Found line to remove! store i64 %66, i64* %PC, align 8
Found line to remove! %67 = load i64, i64* %7, align 8
Found line to remove! %68 = add i64 %67, 8
Found line to remove! %69 = inttoptr i64 %67 to i64*
Found line to remove! %70 = load i64, i64* %69, align 8
Found line to remove! store i64 %70, i64* %RBP, align 8
Found line to remove! store i64 %68, i64* %7, align 8
Found line to remove! %71 = add i64 %24, 10
Found line to remove! store i64 %71, i64* %PC, align 8
Found line to remove! %72 = inttoptr i64 %68 to i64*
Found line to remove! %73 = load i64, i64* %72, align 8
Found line to remove! store i64 %73, i64* %PC, align 8
Found line to remove! %74 = add i64 %67, 16
Found line to remove! store i64 %74, i64* %7, align 8
Found line to remove! ret %struct.Memory* %2
================ Starting round 2
MAPPING:
- 0 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd1c3dd90>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd1c3dd90>, {0: {0}})
EXACT 0 ret ret
================ Starting round 3
MAPPING:
- 0 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd2009268>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1fd2009268>, {0: {0}})
EXACT 0 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_400520:
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_1/foo/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_1/binary/test.mcsema.calls_renamed.ll foo
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
