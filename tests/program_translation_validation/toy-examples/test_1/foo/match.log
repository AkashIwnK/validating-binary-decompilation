Matching sub_4004c0_foo Vs foo


[Info] Retrieve Potential Matches...
[0x5593ce498328]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x5593ce4cfdb8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	[0x5593ce4d7058]:  %ESI.i11 = bitcast %union.anon.4* %16 to i32*
	}

[0x5593ce4a3570]: %struct.State* %0 {
	[0x5593ce4dfc20]:%struct.State.0* %0
	}

[0x5593ce4a35b0]: i64 %1 {
	[0x5593ce4dfba0]:i64 %1
	}

[0x5593ce4a35f0]: %struct.Memory* %2 {
	[0x5593ce4e05a0]:%struct.Memory.31* %2
	}

[0x5593ce4a36b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4a3a60]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5593ce478470]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5593ce4a3b38]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x5593ce43a0c8]:  %16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x5593ce4a3c08]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x5593ce439268]:  %11 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x5593ce4a3cc8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x5593ce4cfdb8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	[0x5593ce4d7058]:  %ESI.i11 = bitcast %union.anon.4* %16 to i32*
	}

[0x5593ce4a3dc0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5593ce47b680]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5593ce4a3e88]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x5593ce445ed8]:  %RSI.i8 = getelementptr inbounds %union.anon.4, %union.anon.4* %16, i64 0, i32 0
	}

[0x5593ce4a3f90]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5593ce47ab60]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5593ce4ada20]:   %6 = add i64 %1, 1 {
	[0x5593ce446000]:  %5 = add i64 %1, 1
	}

[0x5593ce4adaa0]:   store i64 %6, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4adb80]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5593ce47b2e0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5593ce4adbf8]:   %8 = load i64, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4adc70]:   %17 = add i64 %16, -8 {
	[0x5593ce42e720]:  %8 = add i64 %7, -8
	[0x5593ce4d4df0]:  %18 = add i64 %17, -8
	[0x5593ce4d59a0]:  %30 = add i64 %23, -8
	}

[0x5593ce4add00]:   %9 = add i64 %8, -8 {
	[0x5593ce42e720]:  %8 = add i64 %7, -8
	[0x5593ce4d4df0]:  %18 = add i64 %17, -8
	[0x5593ce4d59a0]:  %30 = add i64 %23, -8
	}

[0x5593ce4add68]:   %10 = inttoptr i64 %9 to i64* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4adde0]:   store i64 %5, i64* %10, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4ade60]:   store i64 %9, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4adec8]:   %11 = load i64, i64* %PC, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4adf40]:   store i64 %9, i64* %RBP, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4adfc0]:   %12 = add i64 %8, -12 {
	[0x5593ce4d3b20]:  %12 = add i64 %7, -12
	}

[0x5593ce4ae028]:   %13 = load i32, i32* %EDI, align 4 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae0a0]:   %14 = add i64 %11, 6 {
	[0x5593ce4d20b0]:  %14 = add i64 %10, 6
	[0x5593ce4d45e0]:  %31 = add i64 %25, 6
	}

[0x5593ce4ae120]:   store i64 %14, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4ae188]:   %15 = inttoptr i64 %12 to i32* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4ae200]:   store i32 %13, i32* %15, align 4 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4ae268]:   %16 = load i64, i64* %RBP, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae2e0]:   %33 = add i32 %32, %27 {
	[0x5593ce4d6480]:  %34 = add i32 %33, %28
	[0x5593ce597840]:  %63 = add nuw nsw i32 %61, %62
	}

[0x5593ce4ae348]:   %34 = zext i32 %33 to i64 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4ae3d8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae438]:   %19 = load i64, i64* %PC, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae4b0]:   %20 = add i64 %19, 3 {
	[0x5593ce4d4f00]:  %21 = add i64 %20, 3
	[0x5593ce4d5450]:  %26 = add i64 %25, 3
	}

[0x5593ce4ae530]:   store i64 %20, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4ae598]:   %21 = inttoptr i64 %17 to i32* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4ae610]:   store i32 %18, i32* %21, align 4 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4ae678]:   %22 = load i64, i64* %RBP, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae730]:   %23 = add i64 %22, -4 {
	[0x5593ce4d5270]:  %24 = add i64 %23, -4
	}

[0x5593ce4ae798]:   %24 = load i64, i64* %PC, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae810]:   %25 = add i64 %24, 3 {
	[0x5593ce4d4f00]:  %21 = add i64 %20, 3
	[0x5593ce4d5450]:  %26 = add i64 %25, 3
	}

[0x5593ce4ae890]:   store i64 %25, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4ae8f8]:   %26 = inttoptr i64 %23 to i32* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4ae958]:   %27 = load i32, i32* %26, align 4 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4ae9b8]:   %28 = zext i32 %27 to i64 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4aea30]:   store i64 %28, i64* %RSI, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aeab0]:   %29 = add i64 %22, -8 {
	[0x5593ce42e720]:  %8 = add i64 %7, -8
	[0x5593ce4d4df0]:  %18 = add i64 %17, -8
	[0x5593ce4d59a0]:  %30 = add i64 %23, -8
	}

[0x5593ce4aeb30]:   %30 = add i64 %24, 6 {
	[0x5593ce4d20b0]:  %14 = add i64 %10, 6
	[0x5593ce4d45e0]:  %31 = add i64 %25, 6
	}

[0x5593ce4aebb0]:   store i64 %30, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aec18]:   %31 = inttoptr i64 %29 to i32* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4aec78]:   %32 = load i32, i32* %31, align 4 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4aed20]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5593ce4ddc60]:  %66 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5593ce4aedb0]:   store i8 %64, i8* %65, align 1, !tbaa !1279 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aee30]:   store i64 %34, i64* %RAX, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aef00]:   store i64 %34, i64* %RSI, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aef80]:   %35 = icmp ult i32 %33, %27 {
	[0x5593ce4d3ef0]:  %37 = icmp ult i32 %34, %33
	[0x5593ce4f6f10]:  %36 = icmp ult i32 %34, %28
	[0x5593ce5149e0]:  %53 = icmp eq i32 %34, 0
	[0x5593ce5963a0]:  %64 = icmp eq i32 %63, 2
	}

[0x5593ce4af000]:   %36 = icmp ult i32 %33, %32 {
	[0x5593ce4d3ef0]:  %37 = icmp ult i32 %34, %33
	[0x5593ce4f6f10]:  %36 = icmp ult i32 %34, %28
	[0x5593ce5149e0]:  %53 = icmp eq i32 %34, 0
	[0x5593ce5963a0]:  %64 = icmp eq i32 %63, 2
	}

[0x5593ce4af080]:   %37 = or i1 %35, %36 {
	[0x5593ce4e9050]:  %38 = or i1 %36, %37
	}

[0x5593ce4af0e8]:   %38 = zext i1 %37 to i8 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4af190]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5593ce4d26b0]:  %40 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5593ce4af220]:   store i8 %38, i8* %39, align 1, !tbaa !1261 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4af2a0]:   %40 = and i32 %33, 255 {
	[0x5593ce4f8b90]:  %41 = and i32 %34, 255
	}

[0x5593ce4af360]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x5593ce4f67f0]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x5593ce4af3d8]:   %42 = trunc i32 %41 to i8 {
	[0x5593ce4da838]:  %43 = trunc i32 %42 to i8
	[0x5593ce4dacf8]:  %50 = trunc i32 %49 to i8
	[0x5593ce4db088]:  %57 = trunc i32 %56 to i8
	}

[0x5593ce4af450]:   %43 = and i8 %42, 1 {
	[0x5593ce4e0200]:  %51 = and i8 %50, 1
	[0x5593ce4f8a80]:  %44 = and i8 %43, 1
	}

[0x5593ce4af4d0]:   %44 = xor i8 %43, 1 {
	[0x5593ce4fa3a0]:  %45 = xor i8 %44, 1
	}

[0x5593ce4af580]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5593ce4d5370]:  %46 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5593ce4af610]:   store i8 %44, i8* %45, align 1, !tbaa !1275 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4af690]:   %46 = xor i32 %32, %27 {
	[0x5593ce4dfe70]:  %47 = xor i32 %33, %28
	[0x5593ce4dffa0]:  %48 = xor i32 %47, %34
	[0x5593ce592ae0]:  %61 = xor i32 %56, %59
	[0x5593ce595050]:  %62 = xor i32 %56, %60
	}

[0x5593ce4af710]:   %47 = xor i32 %46, %33 {
	[0x5593ce4dfe70]:  %47 = xor i32 %33, %28
	[0x5593ce4dffa0]:  %48 = xor i32 %47, %34
	[0x5593ce592ae0]:  %61 = xor i32 %56, %59
	[0x5593ce595050]:  %62 = xor i32 %56, %60
	}

[0x5593ce4af790]:   %48 = lshr i32 %47, 4 {
	[0x5593ce4e00d0]:  %49 = lshr i32 %48, 4
	}

[0x5593ce4af7f8]:   %49 = trunc i32 %48 to i8 {
	[0x5593ce4da838]:  %43 = trunc i32 %42 to i8
	[0x5593ce4dacf8]:  %50 = trunc i32 %49 to i8
	[0x5593ce4db088]:  %57 = trunc i32 %56 to i8
	}

[0x5593ce4af870]:   %50 = and i8 %49, 1 {
	[0x5593ce4e0200]:  %51 = and i8 %50, 1
	[0x5593ce4f8a80]:  %44 = and i8 %43, 1
	}

[0x5593ce4af920]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5593ce4d8210]:  %52 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5593ce4af9b0]:   store i8 %50, i8* %51, align 1, !tbaa !1276 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4afa30]:   %52 = icmp eq i32 %33, 0 {
	[0x5593ce4d3ef0]:  %37 = icmp ult i32 %34, %33
	[0x5593ce4f6f10]:  %36 = icmp ult i32 %34, %28
	[0x5593ce5149e0]:  %53 = icmp eq i32 %34, 0
	[0x5593ce5963a0]:  %64 = icmp eq i32 %63, 2
	}

[0x5593ce4afa98]:   %53 = zext i1 %52 to i8 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4afb40]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5593ce4d6c00]:  %55 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5593ce4afbd0]:   store i8 %53, i8* %54, align 1, !tbaa !1277 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4afc50]:   %55 = lshr i32 %33, 31 {
	[0x5593ce505dc0]:  %59 = lshr i32 %28, 31
	[0x5593ce58e3a0]:  %56 = lshr i32 %34, 31
	[0x5593ce5938b0]:  %60 = lshr i32 %33, 31
	}

[0x5593ce4afcb8]:   %56 = trunc i32 %55 to i8 {
	[0x5593ce4da838]:  %43 = trunc i32 %42 to i8
	[0x5593ce4dacf8]:  %50 = trunc i32 %49 to i8
	[0x5593ce4db088]:  %57 = trunc i32 %56 to i8
	}

[0x5593ce4afd60]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5593ce4dda00]:  %58 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5593ce4afdf0]:   store i8 %56, i8* %57, align 1, !tbaa !1278 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4afe70]:   %58 = lshr i32 %27, 31 {
	[0x5593ce505dc0]:  %59 = lshr i32 %28, 31
	[0x5593ce58e3a0]:  %56 = lshr i32 %34, 31
	[0x5593ce5938b0]:  %60 = lshr i32 %33, 31
	}

[0x5593ce4afef0]:   %59 = lshr i32 %32, 31 {
	[0x5593ce505dc0]:  %59 = lshr i32 %28, 31
	[0x5593ce58e3a0]:  %56 = lshr i32 %34, 31
	[0x5593ce5938b0]:  %60 = lshr i32 %33, 31
	}

[0x5593ce4aff70]:   %60 = xor i32 %55, %58 {
	[0x5593ce4dfe70]:  %47 = xor i32 %33, %28
	[0x5593ce4dffa0]:  %48 = xor i32 %47, %34
	[0x5593ce592ae0]:  %61 = xor i32 %56, %59
	[0x5593ce595050]:  %62 = xor i32 %56, %60
	}

[0x5593ce4afff0]:   %61 = xor i32 %55, %59 {
	[0x5593ce4dfe70]:  %47 = xor i32 %33, %28
	[0x5593ce4dffa0]:  %48 = xor i32 %47, %34
	[0x5593ce592ae0]:  %61 = xor i32 %56, %59
	[0x5593ce595050]:  %62 = xor i32 %56, %60
	}

[0x5593ce4b0070]:   %62 = add nuw nsw i32 %60, %61 {
	[0x5593ce4d6480]:  %34 = add i32 %33, %28
	[0x5593ce597840]:  %63 = add nuw nsw i32 %61, %62
	}

[0x5593ce4b00f0]:   %63 = icmp eq i32 %62, 2 {
	[0x5593ce4d3ef0]:  %37 = icmp ult i32 %34, %33
	[0x5593ce4f6f10]:  %36 = icmp ult i32 %34, %28
	[0x5593ce5149e0]:  %53 = icmp eq i32 %34, 0
	[0x5593ce5963a0]:  %64 = icmp eq i32 %63, 2
	}

[0x5593ce4b0158]:   %64 = zext i1 %63 to i8 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4b05e0]:   %66 = add i64 %24, 9 {
	[0x5593ce5a7e80]:  %67 = add i64 %25, 9
	}

[0x5593ce4b0660]:   store i64 %66, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4b06c8]:   %67 = load i64, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4b0740]:   %68 = add i64 %67, 8 {
	[0x5593ce492430]:  %69 = add i64 %68, 8
	}

[0x5593ce4b07a8]:   %69 = inttoptr i64 %67 to i64* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4b0808]:   %70 = load i64, i64* %69, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4b0880]:   store i64 %70, i64* %RBP, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4b0900]:   store i64 %68, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4b0980]:   %71 = add i64 %24, 10 {
	[0x5593ce4f6e40]:  %72 = add i64 %25, 10
	}

[0x5593ce4b0a00]:   store i64 %71, i64* %PC, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4b0a68]:   %72 = inttoptr i64 %68 to i64* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4b0ac8]:   %73 = load i64, i64* %72, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4b0b40]:   store i64 %73, i64* %PC, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4b0bc0]:   %74 = add i64 %67, 16 {
	[0x5593ce4f7550]:  %75 = add i64 %68, 16
	}

[0x5593ce4b0c40]:   store i64 %74, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4b0ca8]:   ret %struct.Memory* %2 {
	[0x5593ce4dd1c8]:  ret %struct.Memory.31* %2
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5593ce4d73e8]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5593ce4a36b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5593ce4adde0]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x5593ce42df60]:   store i64 %4, i64* %9, align 8
[0x5593ce42f000]:   store i64 %5, i64* %3, align 8
[0x5593ce43c810]:   store i64 %71, i64* %RBP.i, align 8
[0x5593ce492890]:   store i64 %67, i64* %3, align 8
[0x5593ce4d2a50]:   store i64 %8, i64* %6, align 8
[0x5593ce4d2b60]:   store i64 %8, i64* %RBP.i, align 8
[0x5593ce4d48e0]:   store i64 %14, i64* %3, align 8
[0x5593ce4d4ce0]:   store i32 %13, i32* %15, align 4
[0x5593ce4d5010]:   store i64 %21, i64* %3, align 8
[0x5593ce4d58d0]:   store i64 %29, i64* %RSI.i8, align 8
[0x5593ce4d6150]:   store i64 %31, i64* %3, align 8
[0x5593ce4d6590]:   store i64 %35, i64* %RSI.i8, align 8
[0x5593ce4d9650]:   store i8 %45, i8* %46, align 1
[0x5593ce4f4280]:   store i32 %19, i32* %22, align 4
[0x5593ce4f4b00]:   store i64 %26, i64* %3, align 8
[0x5593ce4f6310]:   store i64 %74, i64* %3, align 8
[0x5593ce4f6580]:   store i64 %69, i64* %6, align 8
[0x5593ce4f7020]:   store i64 %72, i64* %3, align 8
[0x5593ce4f7ba0]:   store i64 %75, i64* %6, align 8
[0x5593ce4f7e80]:   store i8 %39, i8* %40, align 1
[0x5593ce5140b0]:   store i8 %51, i8* %52, align 1
[0x5593ce58be20]:   store i8 %54, i8* %55, align 1
[0x5593ce58ce90]:   store i8 %57, i8* %58, align 1
[0x5593ce599370]:   store i8 %65, i8* %66, align 1
[0x5593ce59d740]:   store i64 %35, i64* %RAX.i, align 8


Adj: [0x5593ce4d4df0]:   %18 = add i64 %17, -8


Removing: [0x5593ce4d79d8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5593ce4a36b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5593ce4adde0]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x5593ce42df60]:   store i64 %4, i64* %9, align 8
[0x5593ce42f000]:   store i64 %5, i64* %3, align 8
[0x5593ce43c810]:   store i64 %71, i64* %RBP.i, align 8
[0x5593ce492890]:   store i64 %67, i64* %3, align 8
[0x5593ce4d2a50]:   store i64 %8, i64* %6, align 8
[0x5593ce4d2b60]:   store i64 %8, i64* %RBP.i, align 8
[0x5593ce4d48e0]:   store i64 %14, i64* %3, align 8
[0x5593ce4d4ce0]:   store i32 %13, i32* %15, align 4
[0x5593ce4d5010]:   store i64 %21, i64* %3, align 8
[0x5593ce4d58d0]:   store i64 %29, i64* %RSI.i8, align 8
[0x5593ce4d6150]:   store i64 %31, i64* %3, align 8
[0x5593ce4d6590]:   store i64 %35, i64* %RSI.i8, align 8
[0x5593ce4d9650]:   store i8 %45, i8* %46, align 1
[0x5593ce4f4280]:   store i32 %19, i32* %22, align 4
[0x5593ce4f4b00]:   store i64 %26, i64* %3, align 8
[0x5593ce4f6310]:   store i64 %74, i64* %3, align 8
[0x5593ce4f6580]:   store i64 %69, i64* %6, align 8
[0x5593ce4f7020]:   store i64 %72, i64* %3, align 8
[0x5593ce4f7ba0]:   store i64 %75, i64* %6, align 8
[0x5593ce4f7e80]:   store i8 %39, i8* %40, align 1
[0x5593ce5140b0]:   store i8 %51, i8* %52, align 1
[0x5593ce58be20]:   store i8 %54, i8* %55, align 1
[0x5593ce58ce90]:   store i8 %57, i8* %58, align 1
[0x5593ce599370]:   store i8 %65, i8* %66, align 1
[0x5593ce59d740]:   store i64 %35, i64* %RAX.i, align 8


Adj: [0x5593ce4d5270]:   %24 = add i64 %23, -4
[0x5593ce4d59a0]:   %30 = add i64 %23, -8


Removing: [0x5593ce4db7a8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x5593ce4adbf8]:   %8 = load i64, i64* %7, align 8, !tbaa !1257


Uprime : [0x5593ce4adfc0]:   %12 = add i64 %8, -12


Uprime Matches: [0x5593ce4d3b20]:   %12 = add i64 %7, -12


Adj: [0x5593ce492430]:   %69 = add i64 %68, 8
[0x5593ce4dc128]:   %70 = inttoptr i64 %68 to i64*
[0x5593ce4f7550]:   %75 = add i64 %68, 16


Removing: [0x5593ce4d7778]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x5593ce4adec8]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x5593ce4ae0a0]:   %14 = add i64 %11, 6


Uprime Matches: [0x5593ce4d20b0]:   %14 = add i64 %10, 6
[0x5593ce4d45e0]:   %31 = add i64 %25, 6


Adj: [0x5593ce4d4f00]:   %21 = add i64 %20, 3


Removing: [0x5593ce497ea8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5593ce4ae268]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x5593ce4adc70]:   %17 = add i64 %16, -8


Uprime Matches: [0x5593ce42e720]:   %8 = add i64 %7, -8
[0x5593ce4d4df0]:   %18 = add i64 %17, -8
[0x5593ce4d59a0]:   %30 = add i64 %23, -8


Adj: [0x5593ce42df60]:   store i64 %4, i64* %9, align 8


Removing: [0x5593ce4cfd28]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5593ce4ae438]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x5593ce4ae4b0]:   %20 = add i64 %19, 3


Uprime Matches: [0x5593ce4d4f00]:   %21 = add i64 %20, 3
[0x5593ce4d5450]:   %26 = add i64 %25, 3


Adj: [0x5593ce4d20b0]:   %14 = add i64 %10, 6


Removing: [0x5593ce4d6ae8]:   %32 = inttoptr i64 %30 to i32*
From the pot matches of: [0x5593ce4ae598]:   %21 = inttoptr i64 %17 to i32*


Uprime : [0x5593ce4ae610]:   store i32 %18, i32* %21, align 4


Uprime Matches: [0x5593ce4f4280]:   store i32 %19, i32* %22, align 4


Adj: [0x5593ce4d9d88]:   %33 = load i32, i32* %32, align 4


Removing: [0x5593ce497ea8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5593ce4ae678]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x5593ce4aeab0]:   %29 = add i64 %22, -8


Uprime Matches: [0x5593ce42e720]:   %8 = add i64 %7, -8
[0x5593ce4d4df0]:   %18 = add i64 %17, -8
[0x5593ce4d59a0]:   %30 = add i64 %23, -8


Adj: [0x5593ce42df60]:   store i64 %4, i64* %9, align 8


Removing: [0x5593ce4d73e8]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5593ce4ae678]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x5593ce4ae730]:   %23 = add i64 %22, -4


Uprime Matches: [0x5593ce4d5270]:   %24 = add i64 %23, -4


Adj: [0x5593ce4d4df0]:   %18 = add i64 %17, -8


Removing: [0x5593ce4cfd28]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5593ce4ae798]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x5593ce4b0980]:   %71 = add i64 %24, 10


Uprime Matches: [0x5593ce4f6e40]:   %72 = add i64 %25, 10


Adj: [0x5593ce4d20b0]:   %14 = add i64 %10, 6


Removing: [0x5593ce4d7778]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x5593ce4ae798]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x5593ce4b0980]:   %71 = add i64 %24, 10


Uprime Matches: [0x5593ce4f6e40]:   %72 = add i64 %25, 10


Adj: [0x5593ce4d4f00]:   %21 = add i64 %20, 3


Removing: [0x5593ce4d78a8]:   %22 = inttoptr i64 %18 to i32*
From the pot matches of: [0x5593ce4aec18]:   %31 = inttoptr i64 %29 to i32*


Uprime : [0x5593ce4aec78]:   %32 = load i32, i32* %31, align 4


Uprime Matches: [0x5593ce497ea8]:   %4 = load i64, i64* %RBP.i, align 8
[0x5593ce4c6f38]:   %7 = load i64, i64* %6, align 8
[0x5593ce4cfd28]:   %10 = load i64, i64* %3, align 8
[0x5593ce4d1ff8]:   %13 = load i32, i32* %EDI.i, align 4
[0x5593ce4d73e8]:   %17 = load i64, i64* %RBP.i, align 8
[0x5593ce4d7648]:   %19 = load i32, i32* %ESI.i11, align 4
[0x5593ce4d7778]:   %20 = load i64, i64* %3, align 8
[0x5593ce4d79d8]:   %23 = load i64, i64* %RBP.i, align 8
[0x5593ce4d7fc8]:   %25 = load i64, i64* %3, align 8
[0x5593ce4d8ba8]:   %28 = load i32, i32* %27, align 4
[0x5593ce4d9d88]:   %33 = load i32, i32* %32, align 4
[0x5593ce4db7a8]:   %68 = load i64, i64* %6, align 8
[0x5593ce4dc258]:   %71 = load i64, i64* %70, align 8
[0x5593ce4dd098]:   %74 = load i64, i64* %73, align 8


Adj: [0x5593ce4f4280]:   store i32 %19, i32* %22, align 4


Removing: [0x5593ce4db088]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x5593ce4af3d8]:   %42 = trunc i32 %41 to i8


Uprime : [0x5593ce4af450]:   %43 = and i8 %42, 1


Uprime Matches: [0x5593ce4e0200]:   %51 = and i8 %50, 1
[0x5593ce4f8a80]:   %44 = and i8 %43, 1


Adj: [0x5593ce58ce90]:   store i8 %57, i8* %58, align 1


Removing: [0x5593ce4e0200]:   %51 = and i8 %50, 1
From the pot matches of: [0x5593ce4af450]:   %43 = and i8 %42, 1


Uprime : [0x5593ce4af4d0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x5593ce4fa3a0]:   %45 = xor i8 %44, 1


Adj: [0x5593ce5140b0]:   store i8 %51, i8* %52, align 1


Removing: [0x5593ce4d3ef0]:   %37 = icmp ult i32 %34, %33
From the pot matches of: [0x5593ce4afa30]:   %52 = icmp eq i32 %33, 0


Uprime : [0x5593ce4afa98]:   %53 = zext i1 %52 to i8


Uprime Matches: [0x5593ce4d8cd8]:   %29 = zext i32 %28 to i64
[0x5593ce4da118]:   %35 = zext i32 %34 to i64
[0x5593ce4da708]:   %39 = zext i1 %38 to i8
[0x5593ce4daf58]:   %54 = zext i1 %53 to i8
[0x5593ce4f4fd8]:   %65 = zext i1 %64 to i8


Adj: [0x5593ce4e9050]:   %38 = or i1 %36, %37


Removing: [0x5593ce4f6f10]:   %36 = icmp ult i32 %34, %28
From the pot matches of: [0x5593ce4afa30]:   %52 = icmp eq i32 %33, 0


Uprime : [0x5593ce4afa98]:   %53 = zext i1 %52 to i8


Uprime Matches: [0x5593ce4d8cd8]:   %29 = zext i32 %28 to i64
[0x5593ce4da118]:   %35 = zext i32 %34 to i64
[0x5593ce4da708]:   %39 = zext i1 %38 to i8
[0x5593ce4daf58]:   %54 = zext i1 %53 to i8
[0x5593ce4f4fd8]:   %65 = zext i1 %64 to i8


Adj: [0x5593ce4e9050]:   %38 = or i1 %36, %37


Removing: [0x5593ce4c6f38]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5593ce4b06c8]:   %67 = load i64, i64* %7, align 8, !tbaa !1257


Uprime : [0x5593ce4b0bc0]:   %74 = add i64 %67, 16


Uprime Matches: [0x5593ce4f7550]:   %75 = add i64 %68, 16


Adj: [0x5593ce42e720]:   %8 = add i64 %7, -8
[0x5593ce4d3b20]:   %12 = add i64 %7, -12

Round: 1

Removing: [0x5593ce4d59a0]:   %30 = add i64 %23, -8
From the pot matches of: [0x5593ce4adc70]:   %17 = add i64 %16, -8


Uprime : [0x5593ce4ae598]:   %21 = inttoptr i64 %17 to i32*


Uprime Matches: [0x5593ce4d78a8]:   %22 = inttoptr i64 %18 to i32*


Adj: [0x5593ce4d6ae8]:   %32 = inttoptr i64 %30 to i32*


Removing: [0x5593ce4dacf8]:   %50 = trunc i32 %49 to i8
From the pot matches of: [0x5593ce4af3d8]:   %42 = trunc i32 %41 to i8


Uprime : [0x5593ce4af450]:   %43 = and i8 %42, 1


Uprime Matches: [0x5593ce4f8a80]:   %44 = and i8 %43, 1


Adj: [0x5593ce4e0200]:   %51 = and i8 %50, 1

Round: 2

Removing: [0x5593ce4d79d8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5593ce4ae268]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x5593ce4adc70]:   %17 = add i64 %16, -8


Uprime Matches: [0x5593ce4d4df0]:   %18 = add i64 %17, -8


Adj: [0x5593ce4d5270]:   %24 = add i64 %23, -4
[0x5593ce4d59a0]:   %30 = add i64 %23, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x5593ce498328]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x5593ce4d7058]:  %ESI.i11 = bitcast %union.anon.4* %16 to i32*
	}

[0x5593ce4a3570]: %struct.State* %0 {
	[0x5593ce4dfc20]:%struct.State.0* %0
	}

[0x5593ce4a35b0]: i64 %1 {
	[0x5593ce4dfba0]:i64 %1
	}

[0x5593ce4a35f0]: %struct.Memory* %2 {
	[0x5593ce4e05a0]:%struct.Memory.31* %2
	}

[0x5593ce4a36b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5593ce4a3a60]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5593ce478470]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5593ce4a3b38]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x5593ce43a0c8]:  %16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x5593ce4a3c08]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x5593ce439268]:  %11 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x5593ce4a3cc8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x5593ce4cfdb8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	}

[0x5593ce4a3dc0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5593ce47b680]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5593ce4a3e88]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x5593ce445ed8]:  %RSI.i8 = getelementptr inbounds %union.anon.4, %union.anon.4* %16, i64 0, i32 0
	}

[0x5593ce4a3f90]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5593ce47ab60]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5593ce4ada20]:   %6 = add i64 %1, 1 {
	[0x5593ce446000]:  %5 = add i64 %1, 1
	}

[0x5593ce4adaa0]:   store i64 %6, i64* %PC, align 8 {
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	}

[0x5593ce4adb80]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5593ce47b2e0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5593ce4adbf8]:   %8 = load i64, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	}

[0x5593ce4adc70]:   %17 = add i64 %16, -8 {
	[0x5593ce4d4df0]:  %18 = add i64 %17, -8
	}

[0x5593ce4add00]:   %9 = add i64 %8, -8 {
	[0x5593ce42e720]:  %8 = add i64 %7, -8
	}

[0x5593ce4add68]:   %10 = inttoptr i64 %9 to i64* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5593ce4adde0]:   store i64 %5, i64* %10, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	}

[0x5593ce4ade60]:   store i64 %9, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	}

[0x5593ce4adec8]:   %11 = load i64, i64* %PC, align 8 {
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	}

[0x5593ce4adf40]:   store i64 %9, i64* %RBP, align 8, !tbaa !1257 {
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5593ce4adfc0]:   %12 = add i64 %8, -12 {
	[0x5593ce4d3b20]:  %12 = add i64 %7, -12
	}

[0x5593ce4ae028]:   %13 = load i32, i32* %EDI, align 4 {
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x5593ce4ae0a0]:   %14 = add i64 %11, 6 {
	[0x5593ce4d20b0]:  %14 = add i64 %10, 6
	[0x5593ce4d45e0]:  %31 = add i64 %25, 6
	}

[0x5593ce4ae120]:   store i64 %14, i64* %PC, align 8 {
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	}

[0x5593ce4ae188]:   %15 = inttoptr i64 %12 to i32* {
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	}

[0x5593ce4ae200]:   store i32 %13, i32* %15, align 4 {
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	}

[0x5593ce4ae268]:   %16 = load i64, i64* %RBP, align 8 {
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	}

[0x5593ce4ae2e0]:   %33 = add i32 %32, %27 {
	[0x5593ce4d6480]:  %34 = add i32 %33, %28
	}

[0x5593ce4ae348]:   %34 = zext i32 %33 to i64 {
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	}

[0x5593ce4ae3d8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	}

[0x5593ce4ae438]:   %19 = load i64, i64* %PC, align 8 {
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	}

[0x5593ce4ae4b0]:   %20 = add i64 %19, 3 {
	[0x5593ce4d4f00]:  %21 = add i64 %20, 3
	[0x5593ce4d5450]:  %26 = add i64 %25, 3
	}

[0x5593ce4ae530]:   store i64 %20, i64* %PC, align 8 {
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	}

[0x5593ce4ae598]:   %21 = inttoptr i64 %17 to i32* {
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	}

[0x5593ce4ae610]:   store i32 %18, i32* %21, align 4 {
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	}

[0x5593ce4ae678]:   %22 = load i64, i64* %RBP, align 8 {
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x5593ce4ae730]:   %23 = add i64 %22, -4 {
	[0x5593ce4d5270]:  %24 = add i64 %23, -4
	}

[0x5593ce4ae798]:   %24 = load i64, i64* %PC, align 8 {
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	}

[0x5593ce4ae810]:   %25 = add i64 %24, 3 {
	[0x5593ce4d5450]:  %26 = add i64 %25, 3
	}

[0x5593ce4ae890]:   store i64 %25, i64* %PC, align 8 {
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	}

[0x5593ce4ae8f8]:   %26 = inttoptr i64 %23 to i32* {
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4ae958]:   %27 = load i32, i32* %26, align 4 {
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	}

[0x5593ce4ae9b8]:   %28 = zext i32 %27 to i64 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	}

[0x5593ce4aea30]:   store i64 %28, i64* %RSI, align 8, !tbaa !1257 {
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	}

[0x5593ce4aeab0]:   %29 = add i64 %22, -8 {
	[0x5593ce4d59a0]:  %30 = add i64 %23, -8
	}

[0x5593ce4aeb30]:   %30 = add i64 %24, 6 {
	[0x5593ce4d45e0]:  %31 = add i64 %25, 6
	}

[0x5593ce4aebb0]:   store i64 %30, i64* %PC, align 8 {
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	}

[0x5593ce4aec18]:   %31 = inttoptr i64 %29 to i32* {
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	}

[0x5593ce4aec78]:   %32 = load i32, i32* %31, align 4 {
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	}

[0x5593ce4aed20]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5593ce4ddc60]:  %66 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5593ce4aedb0]:   store i8 %64, i8* %65, align 1, !tbaa !1279 {
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	}

[0x5593ce4aee30]:   store i64 %34, i64* %RAX, align 8, !tbaa !1257 {
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aef00]:   store i64 %34, i64* %RSI, align 8, !tbaa !1257 {
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	}

[0x5593ce4aef80]:   %35 = icmp ult i32 %33, %27 {
	[0x5593ce4f6f10]:  %36 = icmp ult i32 %34, %28
	}

[0x5593ce4af000]:   %36 = icmp ult i32 %33, %32 {
	[0x5593ce4d3ef0]:  %37 = icmp ult i32 %34, %33
	}

[0x5593ce4af080]:   %37 = or i1 %35, %36 {
	[0x5593ce4e9050]:  %38 = or i1 %36, %37
	}

[0x5593ce4af0e8]:   %38 = zext i1 %37 to i8 {
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	}

[0x5593ce4af190]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5593ce4d26b0]:  %40 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5593ce4af220]:   store i8 %38, i8* %39, align 1, !tbaa !1261 {
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	}

[0x5593ce4af2a0]:   %40 = and i32 %33, 255 {
	[0x5593ce4f8b90]:  %41 = and i32 %34, 255
	}

[0x5593ce4af360]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x5593ce4f67f0]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x5593ce4af3d8]:   %42 = trunc i32 %41 to i8 {
	[0x5593ce4da838]:  %43 = trunc i32 %42 to i8
	}

[0x5593ce4af450]:   %43 = and i8 %42, 1 {
	[0x5593ce4f8a80]:  %44 = and i8 %43, 1
	}

[0x5593ce4af4d0]:   %44 = xor i8 %43, 1 {
	[0x5593ce4fa3a0]:  %45 = xor i8 %44, 1
	}

[0x5593ce4af580]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5593ce4d5370]:  %46 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5593ce4af610]:   store i8 %44, i8* %45, align 1, !tbaa !1275 {
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	}

[0x5593ce4af690]:   %46 = xor i32 %32, %27 {
	[0x5593ce4dfe70]:  %47 = xor i32 %33, %28
	}

[0x5593ce4af710]:   %47 = xor i32 %46, %33 {
	[0x5593ce4dffa0]:  %48 = xor i32 %47, %34
	}

[0x5593ce4af790]:   %48 = lshr i32 %47, 4 {
	[0x5593ce4e00d0]:  %49 = lshr i32 %48, 4
	}

[0x5593ce4af7f8]:   %49 = trunc i32 %48 to i8 {
	[0x5593ce4dacf8]:  %50 = trunc i32 %49 to i8
	}

[0x5593ce4af870]:   %50 = and i8 %49, 1 {
	[0x5593ce4e0200]:  %51 = and i8 %50, 1
	}

[0x5593ce4af920]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5593ce4d8210]:  %52 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5593ce4af9b0]:   store i8 %50, i8* %51, align 1, !tbaa !1276 {
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	}

[0x5593ce4afa30]:   %52 = icmp eq i32 %33, 0 {
	[0x5593ce5149e0]:  %53 = icmp eq i32 %34, 0
	}

[0x5593ce4afa98]:   %53 = zext i1 %52 to i8 {
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	}

[0x5593ce4afb40]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5593ce4d6c00]:  %55 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5593ce4afbd0]:   store i8 %53, i8* %54, align 1, !tbaa !1277 {
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	}

[0x5593ce4afc50]:   %55 = lshr i32 %33, 31 {
	[0x5593ce58e3a0]:  %56 = lshr i32 %34, 31
	}

[0x5593ce4afcb8]:   %56 = trunc i32 %55 to i8 {
	[0x5593ce4db088]:  %57 = trunc i32 %56 to i8
	}

[0x5593ce4afd60]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5593ce4dda00]:  %58 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5593ce4afdf0]:   store i8 %56, i8* %57, align 1, !tbaa !1278 {
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	}

[0x5593ce4afe70]:   %58 = lshr i32 %27, 31 {
	[0x5593ce505dc0]:  %59 = lshr i32 %28, 31
	}

[0x5593ce4afef0]:   %59 = lshr i32 %32, 31 {
	[0x5593ce5938b0]:  %60 = lshr i32 %33, 31
	}

[0x5593ce4aff70]:   %60 = xor i32 %55, %58 {
	[0x5593ce592ae0]:  %61 = xor i32 %56, %59
	}

[0x5593ce4afff0]:   %61 = xor i32 %55, %59 {
	[0x5593ce595050]:  %62 = xor i32 %56, %60
	}

[0x5593ce4b0070]:   %62 = add nuw nsw i32 %60, %61 {
	[0x5593ce597840]:  %63 = add nuw nsw i32 %61, %62
	}

[0x5593ce4b00f0]:   %63 = icmp eq i32 %62, 2 {
	[0x5593ce5963a0]:  %64 = icmp eq i32 %63, 2
	}

[0x5593ce4b0158]:   %64 = zext i1 %63 to i8 {
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4b05e0]:   %66 = add i64 %24, 9 {
	[0x5593ce5a7e80]:  %67 = add i64 %25, 9
	}

[0x5593ce4b0660]:   store i64 %66, i64* %PC, align 8 {
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	}

[0x5593ce4b06c8]:   %67 = load i64, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	}

[0x5593ce4b0740]:   %68 = add i64 %67, 8 {
	[0x5593ce492430]:  %69 = add i64 %68, 8
	}

[0x5593ce4b07a8]:   %69 = inttoptr i64 %67 to i64* {
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	}

[0x5593ce4b0808]:   %70 = load i64, i64* %69, align 8 {
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	}

[0x5593ce4b0880]:   store i64 %70, i64* %RBP, align 8, !tbaa !1257 {
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	}

[0x5593ce4b0900]:   store i64 %68, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	}

[0x5593ce4b0980]:   %71 = add i64 %24, 10 {
	[0x5593ce4f6e40]:  %72 = add i64 %25, 10
	}

[0x5593ce4b0a00]:   store i64 %71, i64* %PC, align 8 {
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	}

[0x5593ce4b0a68]:   %72 = inttoptr i64 %68 to i64* {
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	}

[0x5593ce4b0ac8]:   %73 = load i64, i64* %72, align 8 {
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4b0b40]:   store i64 %73, i64* %PC, align 8, !tbaa !1257 {
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	}

[0x5593ce4b0bc0]:   %74 = add i64 %67, 16 {
	[0x5593ce4f7550]:  %75 = add i64 %68, 16
	}

[0x5593ce4b0c40]:   store i64 %74, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	}

[0x5593ce4b0ca8]:   ret %struct.Memory* %2 {
	[0x5593ce4dd1c8]:  ret %struct.Memory.31* %2
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5593ce4a3650]: block_4004c0 {
	[0x5593ce4d4820]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5593ce4d45e0]:   %31 = add i64 %25, 6
From the pot matches of: [0x5593ce4ae0a0]:   %14 = add i64 %11, 6


Uprime : [0x5593ce4ae120]:   store i64 %14, i64* %PC, align 8


Uprime Matches: [0x5593ce4d48e0]:   store i64 %14, i64* %3, align 8


Adj: [0x5593ce4d6150]:   store i64 %31, i64* %3, align 8


Removing: [0x5593ce4d5450]:   %26 = add i64 %25, 3
From the pot matches of: [0x5593ce4ae4b0]:   %20 = add i64 %19, 3


Uprime : [0x5593ce4ae530]:   store i64 %20, i64* %PC, align 8


Uprime Matches: [0x5593ce4d5010]:   store i64 %21, i64* %3, align 8


Adj: [0x5593ce4f4b00]:   store i64 %26, i64* %3, align 8

Round: 1

Removing: [0x5593ce4d7fc8]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x5593ce4adec8]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x5593ce4ae0a0]:   %14 = add i64 %11, 6


Uprime Matches: [0x5593ce4d20b0]:   %14 = add i64 %10, 6


Adj: [0x5593ce4d45e0]:   %31 = add i64 %25, 6
[0x5593ce4d5450]:   %26 = add i64 %25, 3
[0x5593ce4f6e40]:   %72 = add i64 %25, 10
[0x5593ce5a7e80]:   %67 = add i64 %25, 9


Removing: [0x5593ce4d7fc8]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x5593ce4ae438]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x5593ce4ae4b0]:   %20 = add i64 %19, 3


Uprime Matches: [0x5593ce4d4f00]:   %21 = add i64 %20, 3


Adj: [0x5593ce4d45e0]:   %31 = add i64 %25, 6
[0x5593ce4d5450]:   %26 = add i64 %25, 3
[0x5593ce4f6e40]:   %72 = add i64 %25, 10
[0x5593ce5a7e80]:   %67 = add i64 %25, 9

Round: 2


[Info] After Dual Simulation: Round: 1
[0x5593ce498328]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x5593ce4d7058]:  %ESI.i11 = bitcast %union.anon.4* %16 to i32*
	}

[0x5593ce4a3570]: %struct.State* %0 {
	[0x5593ce4dfc20]:%struct.State.0* %0
	}

[0x5593ce4a35b0]: i64 %1 {
	[0x5593ce4dfba0]:i64 %1
	}

[0x5593ce4a35f0]: %struct.Memory* %2 {
	[0x5593ce4e05a0]:%struct.Memory.31* %2
	}

[0x5593ce4a36b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5593ce497ea8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5593ce4a3a60]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5593ce478470]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5593ce4a3b38]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x5593ce43a0c8]:  %16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x5593ce4a3c08]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x5593ce439268]:  %11 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x5593ce4a3cc8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x5593ce4cfdb8]:  %EDI.i = bitcast %union.anon.4* %11 to i32*
	}

[0x5593ce4a3dc0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5593ce47b680]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5593ce4a3e88]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x5593ce445ed8]:  %RSI.i8 = getelementptr inbounds %union.anon.4, %union.anon.4* %16, i64 0, i32 0
	}

[0x5593ce4a3f90]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5593ce47ab60]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5593ce4ada20]:   %6 = add i64 %1, 1 {
	[0x5593ce446000]:  %5 = add i64 %1, 1
	}

[0x5593ce4adaa0]:   store i64 %6, i64* %PC, align 8 {
	[0x5593ce42f000]:  store i64 %5, i64* %3, align 8
	}

[0x5593ce4adb80]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5593ce47b2e0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5593ce4adbf8]:   %8 = load i64, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4c6f38]:  %7 = load i64, i64* %6, align 8
	}

[0x5593ce4adc70]:   %17 = add i64 %16, -8 {
	[0x5593ce4d4df0]:  %18 = add i64 %17, -8
	}

[0x5593ce4add00]:   %9 = add i64 %8, -8 {
	[0x5593ce42e720]:  %8 = add i64 %7, -8
	}

[0x5593ce4add68]:   %10 = inttoptr i64 %9 to i64* {
	[0x5593ce42c4e8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5593ce4adde0]:   store i64 %5, i64* %10, align 8 {
	[0x5593ce42df60]:  store i64 %4, i64* %9, align 8
	}

[0x5593ce4ade60]:   store i64 %9, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4d2a50]:  store i64 %8, i64* %6, align 8
	}

[0x5593ce4adec8]:   %11 = load i64, i64* %PC, align 8 {
	[0x5593ce4cfd28]:  %10 = load i64, i64* %3, align 8
	}

[0x5593ce4adf40]:   store i64 %9, i64* %RBP, align 8, !tbaa !1257 {
	[0x5593ce4d2b60]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5593ce4adfc0]:   %12 = add i64 %8, -12 {
	[0x5593ce4d3b20]:  %12 = add i64 %7, -12
	}

[0x5593ce4ae028]:   %13 = load i32, i32* %EDI, align 4 {
	[0x5593ce4d1ff8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x5593ce4ae0a0]:   %14 = add i64 %11, 6 {
	[0x5593ce4d20b0]:  %14 = add i64 %10, 6
	}

[0x5593ce4ae120]:   store i64 %14, i64* %PC, align 8 {
	[0x5593ce4d48e0]:  store i64 %14, i64* %3, align 8
	}

[0x5593ce4ae188]:   %15 = inttoptr i64 %12 to i32* {
	[0x5593ce4d1758]:  %15 = inttoptr i64 %12 to i32*
	}

[0x5593ce4ae200]:   store i32 %13, i32* %15, align 4 {
	[0x5593ce4d4ce0]:  store i32 %13, i32* %15, align 4
	}

[0x5593ce4ae268]:   %16 = load i64, i64* %RBP, align 8 {
	[0x5593ce4d73e8]:  %17 = load i64, i64* %RBP.i, align 8
	}

[0x5593ce4ae2e0]:   %33 = add i32 %32, %27 {
	[0x5593ce4d6480]:  %34 = add i32 %33, %28
	}

[0x5593ce4ae348]:   %34 = zext i32 %33 to i64 {
	[0x5593ce4da118]:  %35 = zext i32 %34 to i64
	}

[0x5593ce4ae3d8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x5593ce4d7648]:  %19 = load i32, i32* %ESI.i11, align 4
	}

[0x5593ce4ae438]:   %19 = load i64, i64* %PC, align 8 {
	[0x5593ce4d7778]:  %20 = load i64, i64* %3, align 8
	}

[0x5593ce4ae4b0]:   %20 = add i64 %19, 3 {
	[0x5593ce4d4f00]:  %21 = add i64 %20, 3
	}

[0x5593ce4ae530]:   store i64 %20, i64* %PC, align 8 {
	[0x5593ce4d5010]:  store i64 %21, i64* %3, align 8
	}

[0x5593ce4ae598]:   %21 = inttoptr i64 %17 to i32* {
	[0x5593ce4d78a8]:  %22 = inttoptr i64 %18 to i32*
	}

[0x5593ce4ae610]:   store i32 %18, i32* %21, align 4 {
	[0x5593ce4f4280]:  store i32 %19, i32* %22, align 4
	}

[0x5593ce4ae678]:   %22 = load i64, i64* %RBP, align 8 {
	[0x5593ce4d79d8]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x5593ce4ae730]:   %23 = add i64 %22, -4 {
	[0x5593ce4d5270]:  %24 = add i64 %23, -4
	}

[0x5593ce4ae798]:   %24 = load i64, i64* %PC, align 8 {
	[0x5593ce4d7fc8]:  %25 = load i64, i64* %3, align 8
	}

[0x5593ce4ae810]:   %25 = add i64 %24, 3 {
	[0x5593ce4d5450]:  %26 = add i64 %25, 3
	}

[0x5593ce4ae890]:   store i64 %25, i64* %PC, align 8 {
	[0x5593ce4f4b00]:  store i64 %26, i64* %3, align 8
	}

[0x5593ce4ae8f8]:   %26 = inttoptr i64 %23 to i32* {
	[0x5593ce4fb3b8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x5593ce4ae958]:   %27 = load i32, i32* %26, align 4 {
	[0x5593ce4d8ba8]:  %28 = load i32, i32* %27, align 4
	}

[0x5593ce4ae9b8]:   %28 = zext i32 %27 to i64 {
	[0x5593ce4d8cd8]:  %29 = zext i32 %28 to i64
	}

[0x5593ce4aea30]:   store i64 %28, i64* %RSI, align 8, !tbaa !1257 {
	[0x5593ce4d58d0]:  store i64 %29, i64* %RSI.i8, align 8
	}

[0x5593ce4aeab0]:   %29 = add i64 %22, -8 {
	[0x5593ce4d59a0]:  %30 = add i64 %23, -8
	}

[0x5593ce4aeb30]:   %30 = add i64 %24, 6 {
	[0x5593ce4d45e0]:  %31 = add i64 %25, 6
	}

[0x5593ce4aebb0]:   store i64 %30, i64* %PC, align 8 {
	[0x5593ce4d6150]:  store i64 %31, i64* %3, align 8
	}

[0x5593ce4aec18]:   %31 = inttoptr i64 %29 to i32* {
	[0x5593ce4d6ae8]:  %32 = inttoptr i64 %30 to i32*
	}

[0x5593ce4aec78]:   %32 = load i32, i32* %31, align 4 {
	[0x5593ce4d9d88]:  %33 = load i32, i32* %32, align 4
	}

[0x5593ce4aed20]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5593ce4ddc60]:  %66 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5593ce4aedb0]:   store i8 %64, i8* %65, align 1, !tbaa !1279 {
	[0x5593ce599370]:  store i8 %65, i8* %66, align 1
	}

[0x5593ce4aee30]:   store i64 %34, i64* %RAX, align 8, !tbaa !1257 {
	[0x5593ce59d740]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x5593ce4aef00]:   store i64 %34, i64* %RSI, align 8, !tbaa !1257 {
	[0x5593ce4d6590]:  store i64 %35, i64* %RSI.i8, align 8
	}

[0x5593ce4aef80]:   %35 = icmp ult i32 %33, %27 {
	[0x5593ce4f6f10]:  %36 = icmp ult i32 %34, %28
	}

[0x5593ce4af000]:   %36 = icmp ult i32 %33, %32 {
	[0x5593ce4d3ef0]:  %37 = icmp ult i32 %34, %33
	}

[0x5593ce4af080]:   %37 = or i1 %35, %36 {
	[0x5593ce4e9050]:  %38 = or i1 %36, %37
	}

[0x5593ce4af0e8]:   %38 = zext i1 %37 to i8 {
	[0x5593ce4da708]:  %39 = zext i1 %38 to i8
	}

[0x5593ce4af190]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5593ce4d26b0]:  %40 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5593ce4af220]:   store i8 %38, i8* %39, align 1, !tbaa !1261 {
	[0x5593ce4f7e80]:  store i8 %39, i8* %40, align 1
	}

[0x5593ce4af2a0]:   %40 = and i32 %33, 255 {
	[0x5593ce4f8b90]:  %41 = and i32 %34, 255
	}

[0x5593ce4af360]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x5593ce4f67f0]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x5593ce4af3d8]:   %42 = trunc i32 %41 to i8 {
	[0x5593ce4da838]:  %43 = trunc i32 %42 to i8
	}

[0x5593ce4af450]:   %43 = and i8 %42, 1 {
	[0x5593ce4f8a80]:  %44 = and i8 %43, 1
	}

[0x5593ce4af4d0]:   %44 = xor i8 %43, 1 {
	[0x5593ce4fa3a0]:  %45 = xor i8 %44, 1
	}

[0x5593ce4af580]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5593ce4d5370]:  %46 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5593ce4af610]:   store i8 %44, i8* %45, align 1, !tbaa !1275 {
	[0x5593ce4d9650]:  store i8 %45, i8* %46, align 1
	}

[0x5593ce4af690]:   %46 = xor i32 %32, %27 {
	[0x5593ce4dfe70]:  %47 = xor i32 %33, %28
	}

[0x5593ce4af710]:   %47 = xor i32 %46, %33 {
	[0x5593ce4dffa0]:  %48 = xor i32 %47, %34
	}

[0x5593ce4af790]:   %48 = lshr i32 %47, 4 {
	[0x5593ce4e00d0]:  %49 = lshr i32 %48, 4
	}

[0x5593ce4af7f8]:   %49 = trunc i32 %48 to i8 {
	[0x5593ce4dacf8]:  %50 = trunc i32 %49 to i8
	}

[0x5593ce4af870]:   %50 = and i8 %49, 1 {
	[0x5593ce4e0200]:  %51 = and i8 %50, 1
	}

[0x5593ce4af920]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5593ce4d8210]:  %52 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5593ce4af9b0]:   store i8 %50, i8* %51, align 1, !tbaa !1276 {
	[0x5593ce5140b0]:  store i8 %51, i8* %52, align 1
	}

[0x5593ce4afa30]:   %52 = icmp eq i32 %33, 0 {
	[0x5593ce5149e0]:  %53 = icmp eq i32 %34, 0
	}

[0x5593ce4afa98]:   %53 = zext i1 %52 to i8 {
	[0x5593ce4daf58]:  %54 = zext i1 %53 to i8
	}

[0x5593ce4afb40]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5593ce4d6c00]:  %55 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5593ce4afbd0]:   store i8 %53, i8* %54, align 1, !tbaa !1277 {
	[0x5593ce58be20]:  store i8 %54, i8* %55, align 1
	}

[0x5593ce4afc50]:   %55 = lshr i32 %33, 31 {
	[0x5593ce58e3a0]:  %56 = lshr i32 %34, 31
	}

[0x5593ce4afcb8]:   %56 = trunc i32 %55 to i8 {
	[0x5593ce4db088]:  %57 = trunc i32 %56 to i8
	}

[0x5593ce4afd60]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5593ce4dda00]:  %58 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5593ce4afdf0]:   store i8 %56, i8* %57, align 1, !tbaa !1278 {
	[0x5593ce58ce90]:  store i8 %57, i8* %58, align 1
	}

[0x5593ce4afe70]:   %58 = lshr i32 %27, 31 {
	[0x5593ce505dc0]:  %59 = lshr i32 %28, 31
	}

[0x5593ce4afef0]:   %59 = lshr i32 %32, 31 {
	[0x5593ce5938b0]:  %60 = lshr i32 %33, 31
	}

[0x5593ce4aff70]:   %60 = xor i32 %55, %58 {
	[0x5593ce592ae0]:  %61 = xor i32 %56, %59
	}

[0x5593ce4afff0]:   %61 = xor i32 %55, %59 {
	[0x5593ce595050]:  %62 = xor i32 %56, %60
	}

[0x5593ce4b0070]:   %62 = add nuw nsw i32 %60, %61 {
	[0x5593ce597840]:  %63 = add nuw nsw i32 %61, %62
	}

[0x5593ce4b00f0]:   %63 = icmp eq i32 %62, 2 {
	[0x5593ce5963a0]:  %64 = icmp eq i32 %63, 2
	}

[0x5593ce4b0158]:   %64 = zext i1 %63 to i8 {
	[0x5593ce4f4fd8]:  %65 = zext i1 %64 to i8
	}

[0x5593ce4b05e0]:   %66 = add i64 %24, 9 {
	[0x5593ce5a7e80]:  %67 = add i64 %25, 9
	}

[0x5593ce4b0660]:   store i64 %66, i64* %PC, align 8 {
	[0x5593ce492890]:  store i64 %67, i64* %3, align 8
	}

[0x5593ce4b06c8]:   %67 = load i64, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4db7a8]:  %68 = load i64, i64* %6, align 8
	}

[0x5593ce4b0740]:   %68 = add i64 %67, 8 {
	[0x5593ce492430]:  %69 = add i64 %68, 8
	}

[0x5593ce4b07a8]:   %69 = inttoptr i64 %67 to i64* {
	[0x5593ce4dc128]:  %70 = inttoptr i64 %68 to i64*
	}

[0x5593ce4b0808]:   %70 = load i64, i64* %69, align 8 {
	[0x5593ce4dc258]:  %71 = load i64, i64* %70, align 8
	}

[0x5593ce4b0880]:   store i64 %70, i64* %RBP, align 8, !tbaa !1257 {
	[0x5593ce43c810]:  store i64 %71, i64* %RBP.i, align 8
	}

[0x5593ce4b0900]:   store i64 %68, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4f6580]:  store i64 %69, i64* %6, align 8
	}

[0x5593ce4b0980]:   %71 = add i64 %24, 10 {
	[0x5593ce4f6e40]:  %72 = add i64 %25, 10
	}

[0x5593ce4b0a00]:   store i64 %71, i64* %PC, align 8 {
	[0x5593ce4f7020]:  store i64 %72, i64* %3, align 8
	}

[0x5593ce4b0a68]:   %72 = inttoptr i64 %68 to i64* {
	[0x5593ce4dce38]:  %73 = inttoptr i64 %69 to i64*
	}

[0x5593ce4b0ac8]:   %73 = load i64, i64* %72, align 8 {
	[0x5593ce4dd098]:  %74 = load i64, i64* %73, align 8
	}

[0x5593ce4b0b40]:   store i64 %73, i64* %PC, align 8, !tbaa !1257 {
	[0x5593ce4f6310]:  store i64 %74, i64* %3, align 8
	}

[0x5593ce4b0bc0]:   %74 = add i64 %67, 16 {
	[0x5593ce4f7550]:  %75 = add i64 %68, 16
	}

[0x5593ce4b0c40]:   store i64 %74, i64* %7, align 8, !tbaa !1257 {
	[0x5593ce4f7ba0]:  store i64 %75, i64* %6, align 8
	}

[0x5593ce4b0ca8]:   ret %struct.Memory* %2 {
	[0x5593ce4dd1c8]:  ret %struct.Memory.31* %2
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5593ce4a3650]: block_4004c0 {
	[0x5593ce4d4820]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [foo] from mcsema/test.opt.ll
Extracting function [foo] from mcsema/test.proposed.opt.ll
Matcher Done...
