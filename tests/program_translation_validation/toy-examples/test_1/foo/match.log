Matching sub_400500_foo Vs foo


[Info] Retrieve Potential Matches...
[0x55a814f983c8]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x55a814fd5208]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	[0x55a814fd5cc8]:  %ESI.i11 = bitcast %union.anon.5* %16 to i32*
	}

[0x55a814fbc540]: %struct.State* %0 {
	[0x55a814fed460]:%struct.State.1* %0
	}

[0x55a814fbc580]: i64 %1 {
	[0x55a814fd9640]:i64 %1
	}

[0x55a814fbc5c0]: %struct.Memory* %2 {
	[0x55a814f685b0]:%struct.Memory.32* %2
	}

[0x55a814fbc7f0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55a814fcb490]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55a814fbc8b8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55a814fd5208]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	[0x55a814fd5cc8]:  %ESI.i11 = bitcast %union.anon.5* %16 to i32*
	}

[0x55a814fbc9b0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55a814fc7580]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55a814fbca78]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55a814f41ba8]:  %RSI.i8 = getelementptr inbounds %union.anon.5, %union.anon.5* %16, i64 0, i32 0
	}

[0x55a814fbcb80]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55a814fc9c40]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55a814fbcc18]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbcc90]:   %6 = add i64 %1, 1 {
	[0x55a81502b4e0]:  %5 = add i64 %1, 1
	}

[0x55a814fbcd10]:   store i64 %6, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbcdf0]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55a814fc7710]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55a814fbce68]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbcee0]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x55a8150c64e0]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55a814fbcf70]:   %9 = add i64 %8, -8 {
	[0x55a814f647a0]:  %8 = add i64 %7, -8
	[0x55a814f677b0]:  %30 = add i64 %23, -8
	[0x55a814fd90e0]:  %18 = add i64 %17, -8
	}

[0x55a814fbcfd8]:   %10 = inttoptr i64 %9 to i64* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbd050]:   store i64 %5, i64* %10, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd0d0]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd138]:   %11 = load i64, i64* %PC, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd1b0]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd230]:   %12 = add i64 %8, -12 {
	[0x55a814fd79a0]:  %12 = add i64 %7, -12
	}

[0x55a814fbd298]:   %13 = load i32, i32* %EDI, align 4 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd310]:   %14 = add i64 %11, 6 {
	[0x55a814fd5dc0]:  %14 = add i64 %10, 6
	[0x55a814fd9520]:  %31 = add i64 %25, 6
	}

[0x55a814fbd390]:   store i64 %14, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd3f8]:   %15 = inttoptr i64 %12 to i32* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbd470]:   store i32 %13, i32* %15, align 4 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd4d8]:   %16 = load i64, i64* %RBP, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd550]:   %17 = add i64 %16, -8 {
	[0x55a814f647a0]:  %8 = add i64 %7, -8
	[0x55a814f677b0]:  %30 = add i64 %23, -8
	[0x55a814fd90e0]:  %18 = add i64 %17, -8
	}

[0x55a814fbd5b8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd618]:   %19 = load i64, i64* %PC, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd690]:   %20 = add i64 %19, 3 {
	[0x55a814f65dc0]:  %26 = add i64 %25, 3
	[0x55a814fd8fd0]:  %21 = add i64 %20, 3
	}

[0x55a814fbd710]:   store i64 %20, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd778]:   %21 = inttoptr i64 %17 to i32* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbd7f0]:   store i32 %18, i32* %21, align 4 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbd858]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd910]:   %23 = add i64 %22, -4 {
	[0x55a814fd8ca0]:  %24 = add i64 %23, -4
	}

[0x55a814fbd978]:   %24 = load i64, i64* %PC, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd9f0]:   %25 = add i64 %24, 3 {
	[0x55a814f65dc0]:  %26 = add i64 %25, 3
	[0x55a814fd8fd0]:  %21 = add i64 %20, 3
	}

[0x55a814fbda70]:   store i64 %25, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbdad8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbdb38]:   %27 = load i32, i32* %26, align 4 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbdb98]:   %28 = zext i32 %27 to i64 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbdc10]:   store i64 %28, i64* %RSI, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbdc90]:   %29 = add i64 %22, -8 {
	[0x55a814f647a0]:  %8 = add i64 %7, -8
	[0x55a814f677b0]:  %30 = add i64 %23, -8
	[0x55a814fd90e0]:  %18 = add i64 %17, -8
	}

[0x55a814fbdd10]:   %30 = add i64 %24, 6 {
	[0x55a814fd5dc0]:  %14 = add i64 %10, 6
	[0x55a814fd9520]:  %31 = add i64 %25, 6
	}

[0x55a814fbdd90]:   store i64 %30, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbddf8]:   %31 = inttoptr i64 %29 to i32* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbde58]:   %32 = load i32, i32* %31, align 4 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbded0]:   %33 = add i32 %32, %27 {
	[0x55a814f67500]:  %34 = add i32 %33, %28
	[0x55a814f69980]:  %63 = add nuw nsw i32 %61, %62
	}

[0x55a814fbdf38]:   %34 = zext i32 %33 to i64 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbdfb0]:   store i64 %34, i64* %RSI, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbe030]:   %35 = icmp ult i32 %33, %27 {
	[0x55a814f666f0]:  %37 = icmp ult i32 %34, %33
	[0x55a814f687c0]:  %53 = icmp eq i32 %34, 0
	[0x55a814f69820]:  %64 = icmp eq i32 %63, 2
	[0x55a814fd7fb0]:  %36 = icmp ult i32 %34, %28
	}

[0x55a814fbe0b0]:   %36 = icmp ult i32 %33, %32 {
	[0x55a814f666f0]:  %37 = icmp ult i32 %34, %33
	[0x55a814f687c0]:  %53 = icmp eq i32 %34, 0
	[0x55a814f69820]:  %64 = icmp eq i32 %63, 2
	[0x55a814fd7fb0]:  %36 = icmp ult i32 %34, %28
	}

[0x55a814fbe130]:   %37 = or i1 %35, %36 {
	[0x55a814f67910]:  %38 = or i1 %36, %37
	}

[0x55a814fbe198]:   %38 = zext i1 %37 to i8 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbe240]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55a8150ae750]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55a814fbe2d0]:   store i8 %38, i8* %39, align 1, !tbaa !1265 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbe350]:   %40 = and i32 %33, 255 {
	[0x55a814f68100]:  %41 = and i32 %34, 255
	}

[0x55a814fbe3f8]:   %42 = trunc i32 %41 to i8 {
	[0x55a814fdb898]:  %57 = trunc i32 %56 to i8
	[0x55a814fdc5a8]:  %50 = trunc i32 %49 to i8
	[0x55a814fdc6d8]:  %43 = trunc i32 %42 to i8
	}

[0x55a814fbe470]:   %43 = and i8 %42, 1 {
	[0x55a814f68ac0]:  %51 = and i8 %50, 1
	[0x55a814fd9a70]:  %44 = and i8 %43, 1
	}

[0x55a814fbe4f0]:   %44 = xor i8 %43, 1 {
	[0x55a814fd9960]:  %45 = xor i8 %44, 1
	}

[0x55a814fbe5a0]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55a81500da70]:  %46 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55a814fbe630]:   store i8 %44, i8* %45, align 1, !tbaa !1279 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbe6b0]:   %46 = xor i32 %32, %27 {
	[0x55a814f67e40]:  %47 = xor i32 %33, %28
	[0x55a814f69bb0]:  %62 = xor i32 %56, %60
	[0x55a814f69db0]:  %61 = xor i32 %56, %59
	[0x55a814fd9740]:  %48 = xor i32 %47, %34
	}

[0x55a814fbe730]:   %47 = xor i32 %46, %33 {
	[0x55a814f67e40]:  %47 = xor i32 %33, %28
	[0x55a814f69bb0]:  %62 = xor i32 %56, %60
	[0x55a814f69db0]:  %61 = xor i32 %56, %59
	[0x55a814fd9740]:  %48 = xor i32 %47, %34
	}

[0x55a814fbe7b0]:   %48 = lshr i32 %47, 4 {
	[0x55a814f68250]:  %49 = lshr i32 %48, 4
	}

[0x55a814fbe818]:   %49 = trunc i32 %48 to i8 {
	[0x55a814fdb898]:  %57 = trunc i32 %56 to i8
	[0x55a814fdc5a8]:  %50 = trunc i32 %49 to i8
	[0x55a814fdc6d8]:  %43 = trunc i32 %42 to i8
	}

[0x55a814fbe890]:   %50 = and i8 %49, 1 {
	[0x55a814f68ac0]:  %51 = and i8 %50, 1
	[0x55a814fd9a70]:  %44 = and i8 %43, 1
	}

[0x55a814fbe940]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55a814f6cbb0]:  %52 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55a814fbe9d0]:   store i8 %50, i8* %51, align 1, !tbaa !1280 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbea50]:   %52 = icmp eq i32 %33, 0 {
	[0x55a814f666f0]:  %37 = icmp ult i32 %34, %33
	[0x55a814f687c0]:  %53 = icmp eq i32 %34, 0
	[0x55a814f69820]:  %64 = icmp eq i32 %63, 2
	[0x55a814fd7fb0]:  %36 = icmp ult i32 %34, %28
	}

[0x55a814fbeab8]:   %53 = zext i1 %52 to i8 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbeb60]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55a814f691a0]:  %55 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55a814fbebf0]:   store i8 %53, i8* %54, align 1, !tbaa !1281 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbec70]:   %55 = lshr i32 %33, 31 {
	[0x55a814f683b0]:  %59 = lshr i32 %28, 31
	[0x55a814f68500]:  %56 = lshr i32 %34, 31
	[0x55a814fd9cd0]:  %60 = lshr i32 %33, 31
	}

[0x55a814fbecd8]:   %56 = trunc i32 %55 to i8 {
	[0x55a814fdb898]:  %57 = trunc i32 %56 to i8
	[0x55a814fdc5a8]:  %50 = trunc i32 %49 to i8
	[0x55a814fdc6d8]:  %43 = trunc i32 %42 to i8
	}

[0x55a814fbed80]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55a814f68f30]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55a814fbee10]:   store i8 %56, i8* %57, align 1, !tbaa !1282 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbee90]:   %58 = lshr i32 %27, 31 {
	[0x55a814f683b0]:  %59 = lshr i32 %28, 31
	[0x55a814f68500]:  %56 = lshr i32 %34, 31
	[0x55a814fd9cd0]:  %60 = lshr i32 %33, 31
	}

[0x55a814fbef10]:   %59 = lshr i32 %32, 31 {
	[0x55a814f683b0]:  %59 = lshr i32 %28, 31
	[0x55a814f68500]:  %56 = lshr i32 %34, 31
	[0x55a814fd9cd0]:  %60 = lshr i32 %33, 31
	}

[0x55a814fbef90]:   %60 = xor i32 %55, %58 {
	[0x55a814f67e40]:  %47 = xor i32 %33, %28
	[0x55a814f69bb0]:  %62 = xor i32 %56, %60
	[0x55a814f69db0]:  %61 = xor i32 %56, %59
	[0x55a814fd9740]:  %48 = xor i32 %47, %34
	}

[0x55a814fbf010]:   %61 = xor i32 %55, %59 {
	[0x55a814f67e40]:  %47 = xor i32 %33, %28
	[0x55a814f69bb0]:  %62 = xor i32 %56, %60
	[0x55a814f69db0]:  %61 = xor i32 %56, %59
	[0x55a814fd9740]:  %48 = xor i32 %47, %34
	}

[0x55a814fbf090]:   %62 = add nuw nsw i32 %60, %61 {
	[0x55a814f67500]:  %34 = add i32 %33, %28
	[0x55a814f69980]:  %63 = add nuw nsw i32 %61, %62
	}

[0x55a814fbf110]:   %63 = icmp eq i32 %62, 2 {
	[0x55a814f666f0]:  %37 = icmp ult i32 %34, %33
	[0x55a814f687c0]:  %53 = icmp eq i32 %34, 0
	[0x55a814f69820]:  %64 = icmp eq i32 %63, 2
	[0x55a814fd7fb0]:  %36 = icmp ult i32 %34, %28
	}

[0x55a814fbf178]:   %64 = zext i1 %63 to i8 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbf630]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55a814f67a20]:  %66 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55a814fbf6c0]:   store i8 %64, i8* %65, align 1, !tbaa !1283 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbf740]:   store i64 %34, i64* %RAX, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbf7c0]:   %66 = add i64 %24, 9 {
	[0x55a814f69420]:  %67 = add i64 %25, 9
	}

[0x55a814fbf840]:   store i64 %66, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbf8a8]:   %67 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbf920]:   %68 = add i64 %67, 8 {
	[0x55a814f6acd0]:  %69 = add i64 %68, 8
	}

[0x55a814fbf988]:   %69 = inttoptr i64 %67 to i64* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbf9e8]:   %70 = load i64, i64* %69, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbfa60]:   store i64 %70, i64* %RBP, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbfae0]:   store i64 %68, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbfb60]:   %71 = add i64 %24, 10 {
	[0x55a814f6c1a0]:  %72 = add i64 %25, 10
	}

[0x55a814fbfbe0]:   store i64 %71, i64* %PC, align 8 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbfc48]:   %72 = inttoptr i64 %68 to i64* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbfca8]:   %73 = load i64, i64* %72, align 8 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbfd20]:   store i64 %73, i64* %PC, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbfda0]:   %74 = add i64 %67, 16 {
	[0x55a814f6a630]:  %75 = add i64 %68, 16
	}

[0x55a814fbfe20]:   store i64 %74, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbfe88]:   ret %struct.Memory* %2 {
	[0x55a814fde2d8]:  ret %struct.Memory.32* %2
	}

[0x55a81501f2c8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55a814f85748]:  %16 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x55a81501f838]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55a814ff3928]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55a814fd3ff8]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55a814fbcc18]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55a814fbd050]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x55a814f63ef0]:   store i64 %8, i64* %RBP.i, align 8
[0x55a814f64410]:   store i64 %8, i64* %6, align 8
[0x55a814f64560]:   store i64 %4, i64* %9, align 8
[0x55a814f65c70]:   store i32 %13, i32* %15, align 4
[0x55a814f66310]:   store i32 %19, i32* %22, align 4
[0x55a814f66470]:   store i64 %21, i64* %3, align 8
[0x55a814f67660]:   store i64 %31, i64* %3, align 8
[0x55a814f67fa0]:   store i8 %45, i8* %46, align 1
[0x55a814f68920]:   store i8 %51, i8* %52, align 1
[0x55a814f69570]:   store i64 %35, i64* %RAX.i, align 8
[0x55a814f696d0]:   store i8 %65, i8* %66, align 1
[0x55a814f6a740]:   store i64 %74, i64* %3, align 8
[0x55a814f6a850]:   store i64 %72, i64* %3, align 8
[0x55a814f6ab80]:   store i64 %69, i64* %6, align 8
[0x55a814f6b0a0]:   store i64 %67, i64* %3, align 8
[0x55a814f6c3f0]:   store i64 %71, i64* %RBP.i, align 8
[0x55a814f6c770]:   store i64 %75, i64* %6, align 8
[0x55a814fd34f0]:   store i64 %14, i64* %3, align 8
[0x55a814fd7ba0]:   store i64 %29, i64* %RSI.i8, align 8
[0x55a814fd8b90]:   store i64 %26, i64* %3, align 8
[0x55a814fd9300]:   store i64 %35, i64* %RSI.i8, align 8
[0x55a814fd9b80]:   store i8 %39, i8* %40, align 1
[0x55a814fd9da0]:   store i8 %57, i8* %58, align 1
[0x55a814fd9eb0]:   store i8 %54, i8* %55, align 1
[0x55a815023720]:   store i64 %5, i64* %3, align 8


Adj: [0x55a814fd90e0]:   %18 = add i64 %17, -8


Removing: [0x55a814fdade8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55a814fbcc18]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55a814fbd050]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x55a814f63ef0]:   store i64 %8, i64* %RBP.i, align 8
[0x55a814f64410]:   store i64 %8, i64* %6, align 8
[0x55a814f64560]:   store i64 %4, i64* %9, align 8
[0x55a814f65c70]:   store i32 %13, i32* %15, align 4
[0x55a814f66310]:   store i32 %19, i32* %22, align 4
[0x55a814f66470]:   store i64 %21, i64* %3, align 8
[0x55a814f67660]:   store i64 %31, i64* %3, align 8
[0x55a814f67fa0]:   store i8 %45, i8* %46, align 1
[0x55a814f68920]:   store i8 %51, i8* %52, align 1
[0x55a814f69570]:   store i64 %35, i64* %RAX.i, align 8
[0x55a814f696d0]:   store i8 %65, i8* %66, align 1
[0x55a814f6a740]:   store i64 %74, i64* %3, align 8
[0x55a814f6a850]:   store i64 %72, i64* %3, align 8
[0x55a814f6ab80]:   store i64 %69, i64* %6, align 8
[0x55a814f6b0a0]:   store i64 %67, i64* %3, align 8
[0x55a814f6c3f0]:   store i64 %71, i64* %RBP.i, align 8
[0x55a814f6c770]:   store i64 %75, i64* %6, align 8
[0x55a814fd34f0]:   store i64 %14, i64* %3, align 8
[0x55a814fd7ba0]:   store i64 %29, i64* %RSI.i8, align 8
[0x55a814fd8b90]:   store i64 %26, i64* %3, align 8
[0x55a814fd9300]:   store i64 %35, i64* %RSI.i8, align 8
[0x55a814fd9b80]:   store i8 %39, i8* %40, align 1
[0x55a814fd9da0]:   store i8 %57, i8* %58, align 1
[0x55a814fd9eb0]:   store i8 %54, i8* %55, align 1
[0x55a815023720]:   store i64 %5, i64* %3, align 8


Adj: [0x55a814f677b0]:   %30 = add i64 %23, -8
[0x55a814fd8ca0]:   %24 = add i64 %23, -4


Removing: [0x55a814fdb638]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x55a814fbce68]:   %8 = load i64, i64* %7, align 8, !tbaa !1261


Uprime : [0x55a814fbd230]:   %12 = add i64 %8, -12


Uprime Matches: [0x55a814fd79a0]:   %12 = add i64 %7, -12


Adj: [0x55a814f6a630]:   %75 = add i64 %68, 16
[0x55a814f6acd0]:   %69 = add i64 %68, 8
[0x55a814fdca68]:   %70 = inttoptr i64 %68 to i64*


Removing: [0x55a81502c2b8]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x55a814fbd138]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x55a814fbd310]:   %14 = add i64 %11, 6


Uprime Matches: [0x55a814fd5dc0]:   %14 = add i64 %10, 6
[0x55a814fd9520]:   %31 = add i64 %25, 6


Adj: [0x55a814fd8fd0]:   %21 = add i64 %20, 3


Removing: [0x55a814fc6858]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55a814fbd4d8]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x55a814fbd550]:   %17 = add i64 %16, -8


Uprime Matches: [0x55a814f647a0]:   %8 = add i64 %7, -8
[0x55a814f677b0]:   %30 = add i64 %23, -8
[0x55a814fd90e0]:   %18 = add i64 %17, -8


Adj: [0x55a814f64560]:   store i64 %4, i64* %9, align 8


Removing: [0x55a81501d488]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55a814fbd618]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x55a814fbd690]:   %20 = add i64 %19, 3


Uprime Matches: [0x55a814f65dc0]:   %26 = add i64 %25, 3
[0x55a814fd8fd0]:   %21 = add i64 %20, 3


Adj: [0x55a814fd5dc0]:   %14 = add i64 %10, 6


Removing: [0x55a814f66578]:   %32 = inttoptr i64 %30 to i32*
From the pot matches of: [0x55a814fbd778]:   %21 = inttoptr i64 %17 to i32*


Uprime : [0x55a814fbd7f0]:   store i32 %18, i32* %21, align 4


Uprime Matches: [0x55a814f66310]:   store i32 %19, i32* %22, align 4


Adj: [0x55a814fecd28]:   %33 = load i32, i32* %32, align 4


Removing: [0x55a814fc6858]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55a814fbd858]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55a814fbdc90]:   %29 = add i64 %22, -8


Uprime Matches: [0x55a814f647a0]:   %8 = add i64 %7, -8
[0x55a814f677b0]:   %30 = add i64 %23, -8
[0x55a814fd90e0]:   %18 = add i64 %17, -8


Adj: [0x55a814f64560]:   store i64 %4, i64* %9, align 8


Removing: [0x55a814fd3ff8]:   %17 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55a814fbd858]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55a814fbd910]:   %23 = add i64 %22, -4


Uprime Matches: [0x55a814fd8ca0]:   %24 = add i64 %23, -4


Adj: [0x55a814fd90e0]:   %18 = add i64 %17, -8


Removing: [0x55a81501d488]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55a814fbd978]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55a814fbfb60]:   %71 = add i64 %24, 10


Uprime Matches: [0x55a814f6c1a0]:   %72 = add i64 %25, 10


Adj: [0x55a814fd5dc0]:   %14 = add i64 %10, 6


Removing: [0x55a81502c2b8]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x55a814fbd978]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55a814fbfb60]:   %71 = add i64 %24, 10


Uprime Matches: [0x55a814f6c1a0]:   %72 = add i64 %25, 10


Adj: [0x55a814fd8fd0]:   %21 = add i64 %20, 3


Removing: [0x55a814fd71c8]:   %22 = inttoptr i64 %18 to i32*
From the pot matches of: [0x55a814fbddf8]:   %31 = inttoptr i64 %29 to i32*


Uprime : [0x55a814fbde58]:   %32 = load i32, i32* %31, align 4


Uprime Matches: [0x55a814fc0068]:   %19 = load i32, i32* %ESI.i11, align 4
[0x55a814fc6858]:   %4 = load i64, i64* %RBP.i, align 8
[0x55a814fc6a28]:   %7 = load i64, i64* %6, align 8
[0x55a814fd3ff8]:   %17 = load i64, i64* %RBP.i, align 8
[0x55a814fd6db8]:   %13 = load i32, i32* %EDI.i, align 4
[0x55a814fda118]:   %28 = load i32, i32* %27, align 4
[0x55a814fdab88]:   %25 = load i64, i64* %3, align 8
[0x55a814fdade8]:   %23 = load i64, i64* %RBP.i, align 8
[0x55a814fdb638]:   %68 = load i64, i64* %6, align 8
[0x55a814fde538]:   %74 = load i64, i64* %73, align 8
[0x55a814fde798]:   %71 = load i64, i64* %70, align 8
[0x55a814fecd28]:   %33 = load i32, i32* %32, align 4
[0x55a81501d488]:   %10 = load i64, i64* %3, align 8
[0x55a81502c2b8]:   %20 = load i64, i64* %3, align 8


Adj: [0x55a814f66310]:   store i32 %19, i32* %22, align 4


Removing: [0x55a814fdb898]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x55a814fbe3f8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55a814fbe470]:   %43 = and i8 %42, 1


Uprime Matches: [0x55a814f68ac0]:   %51 = and i8 %50, 1
[0x55a814fd9a70]:   %44 = and i8 %43, 1


Adj: [0x55a814fd9da0]:   store i8 %57, i8* %58, align 1


Removing: [0x55a814f68ac0]:   %51 = and i8 %50, 1
From the pot matches of: [0x55a814fbe470]:   %43 = and i8 %42, 1


Uprime : [0x55a814fbe4f0]:   %44 = xor i8 %43, 1


Uprime Matches: [0x55a814fd9960]:   %45 = xor i8 %44, 1


Adj: [0x55a814f68920]:   store i8 %51, i8* %52, align 1


Removing: [0x55a814f666f0]:   %37 = icmp ult i32 %34, %33
From the pot matches of: [0x55a814fbea50]:   %52 = icmp eq i32 %33, 0


Uprime : [0x55a814fbeab8]:   %53 = zext i1 %52 to i8


Uprime Matches: [0x55a814fd9fe8]:   %29 = zext i32 %28 to i64
[0x55a814fdb178]:   %35 = zext i32 %34 to i64
[0x55a814fdb768]:   %65 = zext i1 %64 to i8
[0x55a814fdc348]:   %54 = zext i1 %53 to i8
[0x55a814fdc938]:   %39 = zext i1 %38 to i8


Adj: [0x55a814f67910]:   %38 = or i1 %36, %37


Removing: [0x55a814fd7fb0]:   %36 = icmp ult i32 %34, %28
From the pot matches of: [0x55a814fbea50]:   %52 = icmp eq i32 %33, 0


Uprime : [0x55a814fbeab8]:   %53 = zext i1 %52 to i8


Uprime Matches: [0x55a814fd9fe8]:   %29 = zext i32 %28 to i64
[0x55a814fdb178]:   %35 = zext i32 %34 to i64
[0x55a814fdb768]:   %65 = zext i1 %64 to i8
[0x55a814fdc348]:   %54 = zext i1 %53 to i8
[0x55a814fdc938]:   %39 = zext i1 %38 to i8


Adj: [0x55a814f67910]:   %38 = or i1 %36, %37


Removing: [0x55a814fc6a28]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55a814fbf8a8]:   %67 = load i64, i64* %7, align 8, !tbaa !1261


Uprime : [0x55a814fbfda0]:   %74 = add i64 %67, 16


Uprime Matches: [0x55a814f6a630]:   %75 = add i64 %68, 16


Adj: [0x55a814f647a0]:   %8 = add i64 %7, -8
[0x55a814fd79a0]:   %12 = add i64 %7, -12

Round: 1

Removing: [0x55a814f677b0]:   %30 = add i64 %23, -8
From the pot matches of: [0x55a814fbd550]:   %17 = add i64 %16, -8


Uprime : [0x55a814fbd778]:   %21 = inttoptr i64 %17 to i32*


Uprime Matches: [0x55a814fd71c8]:   %22 = inttoptr i64 %18 to i32*


Adj: [0x55a814f66578]:   %32 = inttoptr i64 %30 to i32*


Removing: [0x55a814fdc5a8]:   %50 = trunc i32 %49 to i8
From the pot matches of: [0x55a814fbe3f8]:   %42 = trunc i32 %41 to i8


Uprime : [0x55a814fbe470]:   %43 = and i8 %42, 1


Uprime Matches: [0x55a814fd9a70]:   %44 = and i8 %43, 1


Adj: [0x55a814f68ac0]:   %51 = and i8 %50, 1

Round: 2

Removing: [0x55a814fdade8]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55a814fbd4d8]:   %16 = load i64, i64* %RBP, align 8


Uprime : [0x55a814fbd550]:   %17 = add i64 %16, -8


Uprime Matches: [0x55a814fd90e0]:   %18 = add i64 %17, -8


Adj: [0x55a814f677b0]:   %30 = add i64 %23, -8
[0x55a814fd8ca0]:   %24 = add i64 %23, -4

Round: 3


[Info] After Dual Simulation: Round: 0
[0x55a814f983c8]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x55a814fd5cc8]:  %ESI.i11 = bitcast %union.anon.5* %16 to i32*
	}

[0x55a814fbc540]: %struct.State* %0 {
	[0x55a814fed460]:%struct.State.1* %0
	}

[0x55a814fbc580]: i64 %1 {
	[0x55a814fd9640]:i64 %1
	}

[0x55a814fbc5c0]: %struct.Memory* %2 {
	[0x55a814f685b0]:%struct.Memory.32* %2
	}

[0x55a814fbc7f0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55a814fcb490]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55a814fbc8b8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55a814fd5208]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x55a814fbc9b0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55a814fc7580]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55a814fbca78]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55a814f41ba8]:  %RSI.i8 = getelementptr inbounds %union.anon.5, %union.anon.5* %16, i64 0, i32 0
	}

[0x55a814fbcb80]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55a814fc9c40]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55a814fbcc18]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55a814fbcc90]:   %6 = add i64 %1, 1 {
	[0x55a81502b4e0]:  %5 = add i64 %1, 1
	}

[0x55a814fbcd10]:   store i64 %6, i64* %PC, align 8 {
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbcdf0]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55a814fc7710]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55a814fbce68]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	}

[0x55a814fbcee0]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x55a8150c64e0]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55a814fbcf70]:   %9 = add i64 %8, -8 {
	[0x55a814f647a0]:  %8 = add i64 %7, -8
	}

[0x55a814fbcfd8]:   %10 = inttoptr i64 %9 to i64* {
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55a814fbd050]:   store i64 %5, i64* %10, align 8 {
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	}

[0x55a814fbd0d0]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	}

[0x55a814fbd138]:   %11 = load i64, i64* %PC, align 8 {
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	}

[0x55a814fbd1b0]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55a814fbd230]:   %12 = add i64 %8, -12 {
	[0x55a814fd79a0]:  %12 = add i64 %7, -12
	}

[0x55a814fbd298]:   %13 = load i32, i32* %EDI, align 4 {
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55a814fbd310]:   %14 = add i64 %11, 6 {
	[0x55a814fd5dc0]:  %14 = add i64 %10, 6
	[0x55a814fd9520]:  %31 = add i64 %25, 6
	}

[0x55a814fbd390]:   store i64 %14, i64* %PC, align 8 {
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	}

[0x55a814fbd3f8]:   %15 = inttoptr i64 %12 to i32* {
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55a814fbd470]:   store i32 %13, i32* %15, align 4 {
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	}

[0x55a814fbd4d8]:   %16 = load i64, i64* %RBP, align 8 {
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	}

[0x55a814fbd550]:   %17 = add i64 %16, -8 {
	[0x55a814fd90e0]:  %18 = add i64 %17, -8
	}

[0x55a814fbd5b8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	}

[0x55a814fbd618]:   %19 = load i64, i64* %PC, align 8 {
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd690]:   %20 = add i64 %19, 3 {
	[0x55a814f65dc0]:  %26 = add i64 %25, 3
	[0x55a814fd8fd0]:  %21 = add i64 %20, 3
	}

[0x55a814fbd710]:   store i64 %20, i64* %PC, align 8 {
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	}

[0x55a814fbd778]:   %21 = inttoptr i64 %17 to i32* {
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	}

[0x55a814fbd7f0]:   store i32 %18, i32* %21, align 4 {
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	}

[0x55a814fbd858]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x55a814fbd910]:   %23 = add i64 %22, -4 {
	[0x55a814fd8ca0]:  %24 = add i64 %23, -4
	}

[0x55a814fbd978]:   %24 = load i64, i64* %PC, align 8 {
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	}

[0x55a814fbd9f0]:   %25 = add i64 %24, 3 {
	[0x55a814f65dc0]:  %26 = add i64 %25, 3
	}

[0x55a814fbda70]:   store i64 %25, i64* %PC, align 8 {
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	}

[0x55a814fbdad8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x55a814fbdb38]:   %27 = load i32, i32* %26, align 4 {
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	}

[0x55a814fbdb98]:   %28 = zext i32 %27 to i64 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	}

[0x55a814fbdc10]:   store i64 %28, i64* %RSI, align 8, !tbaa !1261 {
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	}

[0x55a814fbdc90]:   %29 = add i64 %22, -8 {
	[0x55a814f677b0]:  %30 = add i64 %23, -8
	}

[0x55a814fbdd10]:   %30 = add i64 %24, 6 {
	[0x55a814fd9520]:  %31 = add i64 %25, 6
	}

[0x55a814fbdd90]:   store i64 %30, i64* %PC, align 8 {
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	}

[0x55a814fbddf8]:   %31 = inttoptr i64 %29 to i32* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	}

[0x55a814fbde58]:   %32 = load i32, i32* %31, align 4 {
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	}

[0x55a814fbded0]:   %33 = add i32 %32, %27 {
	[0x55a814f67500]:  %34 = add i32 %33, %28
	}

[0x55a814fbdf38]:   %34 = zext i32 %33 to i64 {
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	}

[0x55a814fbdfb0]:   store i64 %34, i64* %RSI, align 8, !tbaa !1261 {
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	}

[0x55a814fbe030]:   %35 = icmp ult i32 %33, %27 {
	[0x55a814fd7fb0]:  %36 = icmp ult i32 %34, %28
	}

[0x55a814fbe0b0]:   %36 = icmp ult i32 %33, %32 {
	[0x55a814f666f0]:  %37 = icmp ult i32 %34, %33
	}

[0x55a814fbe130]:   %37 = or i1 %35, %36 {
	[0x55a814f67910]:  %38 = or i1 %36, %37
	}

[0x55a814fbe198]:   %38 = zext i1 %37 to i8 {
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbe240]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55a8150ae750]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55a814fbe2d0]:   store i8 %38, i8* %39, align 1, !tbaa !1265 {
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	}

[0x55a814fbe350]:   %40 = and i32 %33, 255 {
	[0x55a814f68100]:  %41 = and i32 %34, 255
	}

[0x55a814fbe3f8]:   %42 = trunc i32 %41 to i8 {
	[0x55a814fdc6d8]:  %43 = trunc i32 %42 to i8
	}

[0x55a814fbe470]:   %43 = and i8 %42, 1 {
	[0x55a814fd9a70]:  %44 = and i8 %43, 1
	}

[0x55a814fbe4f0]:   %44 = xor i8 %43, 1 {
	[0x55a814fd9960]:  %45 = xor i8 %44, 1
	}

[0x55a814fbe5a0]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55a81500da70]:  %46 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55a814fbe630]:   store i8 %44, i8* %45, align 1, !tbaa !1279 {
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	}

[0x55a814fbe6b0]:   %46 = xor i32 %32, %27 {
	[0x55a814f67e40]:  %47 = xor i32 %33, %28
	}

[0x55a814fbe730]:   %47 = xor i32 %46, %33 {
	[0x55a814fd9740]:  %48 = xor i32 %47, %34
	}

[0x55a814fbe7b0]:   %48 = lshr i32 %47, 4 {
	[0x55a814f68250]:  %49 = lshr i32 %48, 4
	}

[0x55a814fbe818]:   %49 = trunc i32 %48 to i8 {
	[0x55a814fdc5a8]:  %50 = trunc i32 %49 to i8
	}

[0x55a814fbe890]:   %50 = and i8 %49, 1 {
	[0x55a814f68ac0]:  %51 = and i8 %50, 1
	}

[0x55a814fbe940]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55a814f6cbb0]:  %52 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55a814fbe9d0]:   store i8 %50, i8* %51, align 1, !tbaa !1280 {
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	}

[0x55a814fbea50]:   %52 = icmp eq i32 %33, 0 {
	[0x55a814f687c0]:  %53 = icmp eq i32 %34, 0
	}

[0x55a814fbeab8]:   %53 = zext i1 %52 to i8 {
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	}

[0x55a814fbeb60]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55a814f691a0]:  %55 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55a814fbebf0]:   store i8 %53, i8* %54, align 1, !tbaa !1281 {
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	}

[0x55a814fbec70]:   %55 = lshr i32 %33, 31 {
	[0x55a814f68500]:  %56 = lshr i32 %34, 31
	}

[0x55a814fbecd8]:   %56 = trunc i32 %55 to i8 {
	[0x55a814fdb898]:  %57 = trunc i32 %56 to i8
	}

[0x55a814fbed80]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55a814f68f30]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55a814fbee10]:   store i8 %56, i8* %57, align 1, !tbaa !1282 {
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	}

[0x55a814fbee90]:   %58 = lshr i32 %27, 31 {
	[0x55a814f683b0]:  %59 = lshr i32 %28, 31
	}

[0x55a814fbef10]:   %59 = lshr i32 %32, 31 {
	[0x55a814fd9cd0]:  %60 = lshr i32 %33, 31
	}

[0x55a814fbef90]:   %60 = xor i32 %55, %58 {
	[0x55a814f69db0]:  %61 = xor i32 %56, %59
	}

[0x55a814fbf010]:   %61 = xor i32 %55, %59 {
	[0x55a814f69bb0]:  %62 = xor i32 %56, %60
	}

[0x55a814fbf090]:   %62 = add nuw nsw i32 %60, %61 {
	[0x55a814f69980]:  %63 = add nuw nsw i32 %61, %62
	}

[0x55a814fbf110]:   %63 = icmp eq i32 %62, 2 {
	[0x55a814f69820]:  %64 = icmp eq i32 %63, 2
	}

[0x55a814fbf178]:   %64 = zext i1 %63 to i8 {
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	}

[0x55a814fbf630]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55a814f67a20]:  %66 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55a814fbf6c0]:   store i8 %64, i8* %65, align 1, !tbaa !1283 {
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	}

[0x55a814fbf740]:   store i64 %34, i64* %RAX, align 8, !tbaa !1261 {
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x55a814fbf7c0]:   %66 = add i64 %24, 9 {
	[0x55a814f69420]:  %67 = add i64 %25, 9
	}

[0x55a814fbf840]:   store i64 %66, i64* %PC, align 8 {
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	}

[0x55a814fbf8a8]:   %67 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	}

[0x55a814fbf920]:   %68 = add i64 %67, 8 {
	[0x55a814f6acd0]:  %69 = add i64 %68, 8
	}

[0x55a814fbf988]:   %69 = inttoptr i64 %67 to i64* {
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	}

[0x55a814fbf9e8]:   %70 = load i64, i64* %69, align 8 {
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	}

[0x55a814fbfa60]:   store i64 %70, i64* %RBP, align 8, !tbaa !1261 {
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	}

[0x55a814fbfae0]:   store i64 %68, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	}

[0x55a814fbfb60]:   %71 = add i64 %24, 10 {
	[0x55a814f6c1a0]:  %72 = add i64 %25, 10
	}

[0x55a814fbfbe0]:   store i64 %71, i64* %PC, align 8 {
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	}

[0x55a814fbfc48]:   %72 = inttoptr i64 %68 to i64* {
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbfca8]:   %73 = load i64, i64* %72, align 8 {
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	}

[0x55a814fbfd20]:   store i64 %73, i64* %PC, align 8, !tbaa !1261 {
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	}

[0x55a814fbfda0]:   %74 = add i64 %67, 16 {
	[0x55a814f6a630]:  %75 = add i64 %68, 16
	}

[0x55a814fbfe20]:   store i64 %74, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	}

[0x55a814fbfe88]:   ret %struct.Memory* %2 {
	[0x55a814fde2d8]:  ret %struct.Memory.32* %2
	}

[0x55a81501f2c8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55a814f85748]:  %16 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x55a81501f838]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55a814ff3928]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55a814fbc600]: block_400500 {
	[0x55a814f627c0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x55a814fd9520]:   %31 = add i64 %25, 6
From the pot matches of: [0x55a814fbd310]:   %14 = add i64 %11, 6


Uprime : [0x55a814fbd390]:   store i64 %14, i64* %PC, align 8


Uprime Matches: [0x55a814fd34f0]:   store i64 %14, i64* %3, align 8


Adj: [0x55a814f67660]:   store i64 %31, i64* %3, align 8


Removing: [0x55a814f65dc0]:   %26 = add i64 %25, 3
From the pot matches of: [0x55a814fbd690]:   %20 = add i64 %19, 3


Uprime : [0x55a814fbd710]:   store i64 %20, i64* %PC, align 8


Uprime Matches: [0x55a814f66470]:   store i64 %21, i64* %3, align 8


Adj: [0x55a814fd8b90]:   store i64 %26, i64* %3, align 8

Round: 1

Removing: [0x55a814fdab88]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55a814fbd138]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x55a814fbd310]:   %14 = add i64 %11, 6


Uprime Matches: [0x55a814fd5dc0]:   %14 = add i64 %10, 6


Adj: [0x55a814f65dc0]:   %26 = add i64 %25, 3
[0x55a814f69420]:   %67 = add i64 %25, 9
[0x55a814f6c1a0]:   %72 = add i64 %25, 10
[0x55a814fd9520]:   %31 = add i64 %25, 6


Removing: [0x55a814fdab88]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55a814fbd618]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x55a814fbd690]:   %20 = add i64 %19, 3


Uprime Matches: [0x55a814fd8fd0]:   %21 = add i64 %20, 3


Adj: [0x55a814f65dc0]:   %26 = add i64 %25, 3
[0x55a814f69420]:   %67 = add i64 %25, 9
[0x55a814f6c1a0]:   %72 = add i64 %25, 10
[0x55a814fd9520]:   %31 = add i64 %25, 6

Round: 2


[Info] After Dual Simulation: Round: 1
[0x55a814f983c8]:   %ESI = bitcast %union.anon* %3 to i32* {
	[0x55a814fd5cc8]:  %ESI.i11 = bitcast %union.anon.5* %16 to i32*
	}

[0x55a814fbc540]: %struct.State* %0 {
	[0x55a814fed460]:%struct.State.1* %0
	}

[0x55a814fbc580]: i64 %1 {
	[0x55a814fd9640]:i64 %1
	}

[0x55a814fbc5c0]: %struct.Memory* %2 {
	[0x55a814f685b0]:%struct.Memory.32* %2
	}

[0x55a814fbc7f0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55a814fcb490]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55a814fbc8b8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55a814fd5208]:  %EDI.i = bitcast %union.anon.5* %11 to i32*
	}

[0x55a814fbc9b0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55a814fc7580]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55a814fbca78]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55a814f41ba8]:  %RSI.i8 = getelementptr inbounds %union.anon.5, %union.anon.5* %16, i64 0, i32 0
	}

[0x55a814fbcb80]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55a814fc9c40]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55a814fbcc18]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55a814fc6858]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55a814fbcc90]:   %6 = add i64 %1, 1 {
	[0x55a81502b4e0]:  %5 = add i64 %1, 1
	}

[0x55a814fbcd10]:   store i64 %6, i64* %PC, align 8 {
	[0x55a815023720]:  store i64 %5, i64* %3, align 8
	}

[0x55a814fbcdf0]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55a814fc7710]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55a814fbce68]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55a814fc6a28]:  %7 = load i64, i64* %6, align 8
	}

[0x55a814fbcee0]:   %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9 {
	[0x55a8150c64e0]:  %42 = tail call i32 @llvm.ctpop.i32(i32 %41)
	}

[0x55a814fbcf70]:   %9 = add i64 %8, -8 {
	[0x55a814f647a0]:  %8 = add i64 %7, -8
	}

[0x55a814fbcfd8]:   %10 = inttoptr i64 %9 to i64* {
	[0x55a814fc6bb8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55a814fbd050]:   store i64 %5, i64* %10, align 8 {
	[0x55a814f64560]:  store i64 %4, i64* %9, align 8
	}

[0x55a814fbd0d0]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f64410]:  store i64 %8, i64* %6, align 8
	}

[0x55a814fbd138]:   %11 = load i64, i64* %PC, align 8 {
	[0x55a81501d488]:  %10 = load i64, i64* %3, align 8
	}

[0x55a814fbd1b0]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x55a814f63ef0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55a814fbd230]:   %12 = add i64 %8, -12 {
	[0x55a814fd79a0]:  %12 = add i64 %7, -12
	}

[0x55a814fbd298]:   %13 = load i32, i32* %EDI, align 4 {
	[0x55a814fd6db8]:  %13 = load i32, i32* %EDI.i, align 4
	}

[0x55a814fbd310]:   %14 = add i64 %11, 6 {
	[0x55a814fd5dc0]:  %14 = add i64 %10, 6
	}

[0x55a814fbd390]:   store i64 %14, i64* %PC, align 8 {
	[0x55a814fd34f0]:  store i64 %14, i64* %3, align 8
	}

[0x55a814fbd3f8]:   %15 = inttoptr i64 %12 to i32* {
	[0x55a814fd59f8]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55a814fbd470]:   store i32 %13, i32* %15, align 4 {
	[0x55a814f65c70]:  store i32 %13, i32* %15, align 4
	}

[0x55a814fbd4d8]:   %16 = load i64, i64* %RBP, align 8 {
	[0x55a814fd3ff8]:  %17 = load i64, i64* %RBP.i, align 8
	}

[0x55a814fbd550]:   %17 = add i64 %16, -8 {
	[0x55a814fd90e0]:  %18 = add i64 %17, -8
	}

[0x55a814fbd5b8]:   %18 = load i32, i32* %ESI, align 4 {
	[0x55a814fc0068]:  %19 = load i32, i32* %ESI.i11, align 4
	}

[0x55a814fbd618]:   %19 = load i64, i64* %PC, align 8 {
	[0x55a81502c2b8]:  %20 = load i64, i64* %3, align 8
	}

[0x55a814fbd690]:   %20 = add i64 %19, 3 {
	[0x55a814fd8fd0]:  %21 = add i64 %20, 3
	}

[0x55a814fbd710]:   store i64 %20, i64* %PC, align 8 {
	[0x55a814f66470]:  store i64 %21, i64* %3, align 8
	}

[0x55a814fbd778]:   %21 = inttoptr i64 %17 to i32* {
	[0x55a814fd71c8]:  %22 = inttoptr i64 %18 to i32*
	}

[0x55a814fbd7f0]:   store i32 %18, i32* %21, align 4 {
	[0x55a814f66310]:  store i32 %19, i32* %22, align 4
	}

[0x55a814fbd858]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55a814fdade8]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x55a814fbd910]:   %23 = add i64 %22, -4 {
	[0x55a814fd8ca0]:  %24 = add i64 %23, -4
	}

[0x55a814fbd978]:   %24 = load i64, i64* %PC, align 8 {
	[0x55a814fdab88]:  %25 = load i64, i64* %3, align 8
	}

[0x55a814fbd9f0]:   %25 = add i64 %24, 3 {
	[0x55a814f65dc0]:  %26 = add i64 %25, 3
	}

[0x55a814fbda70]:   store i64 %25, i64* %PC, align 8 {
	[0x55a814fd8b90]:  store i64 %26, i64* %3, align 8
	}

[0x55a814fbdad8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55a814fda4a8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x55a814fbdb38]:   %27 = load i32, i32* %26, align 4 {
	[0x55a814fda118]:  %28 = load i32, i32* %27, align 4
	}

[0x55a814fbdb98]:   %28 = zext i32 %27 to i64 {
	[0x55a814fd9fe8]:  %29 = zext i32 %28 to i64
	}

[0x55a814fbdc10]:   store i64 %28, i64* %RSI, align 8, !tbaa !1261 {
	[0x55a814fd7ba0]:  store i64 %29, i64* %RSI.i8, align 8
	}

[0x55a814fbdc90]:   %29 = add i64 %22, -8 {
	[0x55a814f677b0]:  %30 = add i64 %23, -8
	}

[0x55a814fbdd10]:   %30 = add i64 %24, 6 {
	[0x55a814fd9520]:  %31 = add i64 %25, 6
	}

[0x55a814fbdd90]:   store i64 %30, i64* %PC, align 8 {
	[0x55a814f67660]:  store i64 %31, i64* %3, align 8
	}

[0x55a814fbddf8]:   %31 = inttoptr i64 %29 to i32* {
	[0x55a814f66578]:  %32 = inttoptr i64 %30 to i32*
	}

[0x55a814fbde58]:   %32 = load i32, i32* %31, align 4 {
	[0x55a814fecd28]:  %33 = load i32, i32* %32, align 4
	}

[0x55a814fbded0]:   %33 = add i32 %32, %27 {
	[0x55a814f67500]:  %34 = add i32 %33, %28
	}

[0x55a814fbdf38]:   %34 = zext i32 %33 to i64 {
	[0x55a814fdb178]:  %35 = zext i32 %34 to i64
	}

[0x55a814fbdfb0]:   store i64 %34, i64* %RSI, align 8, !tbaa !1261 {
	[0x55a814fd9300]:  store i64 %35, i64* %RSI.i8, align 8
	}

[0x55a814fbe030]:   %35 = icmp ult i32 %33, %27 {
	[0x55a814fd7fb0]:  %36 = icmp ult i32 %34, %28
	}

[0x55a814fbe0b0]:   %36 = icmp ult i32 %33, %32 {
	[0x55a814f666f0]:  %37 = icmp ult i32 %34, %33
	}

[0x55a814fbe130]:   %37 = or i1 %35, %36 {
	[0x55a814f67910]:  %38 = or i1 %36, %37
	}

[0x55a814fbe198]:   %38 = zext i1 %37 to i8 {
	[0x55a814fdc938]:  %39 = zext i1 %38 to i8
	}

[0x55a814fbe240]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55a8150ae750]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55a814fbe2d0]:   store i8 %38, i8* %39, align 1, !tbaa !1265 {
	[0x55a814fd9b80]:  store i8 %39, i8* %40, align 1
	}

[0x55a814fbe350]:   %40 = and i32 %33, 255 {
	[0x55a814f68100]:  %41 = and i32 %34, 255
	}

[0x55a814fbe3f8]:   %42 = trunc i32 %41 to i8 {
	[0x55a814fdc6d8]:  %43 = trunc i32 %42 to i8
	}

[0x55a814fbe470]:   %43 = and i8 %42, 1 {
	[0x55a814fd9a70]:  %44 = and i8 %43, 1
	}

[0x55a814fbe4f0]:   %44 = xor i8 %43, 1 {
	[0x55a814fd9960]:  %45 = xor i8 %44, 1
	}

[0x55a814fbe5a0]:   %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55a81500da70]:  %46 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55a814fbe630]:   store i8 %44, i8* %45, align 1, !tbaa !1279 {
	[0x55a814f67fa0]:  store i8 %45, i8* %46, align 1
	}

[0x55a814fbe6b0]:   %46 = xor i32 %32, %27 {
	[0x55a814f67e40]:  %47 = xor i32 %33, %28
	}

[0x55a814fbe730]:   %47 = xor i32 %46, %33 {
	[0x55a814fd9740]:  %48 = xor i32 %47, %34
	}

[0x55a814fbe7b0]:   %48 = lshr i32 %47, 4 {
	[0x55a814f68250]:  %49 = lshr i32 %48, 4
	}

[0x55a814fbe818]:   %49 = trunc i32 %48 to i8 {
	[0x55a814fdc5a8]:  %50 = trunc i32 %49 to i8
	}

[0x55a814fbe890]:   %50 = and i8 %49, 1 {
	[0x55a814f68ac0]:  %51 = and i8 %50, 1
	}

[0x55a814fbe940]:   %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55a814f6cbb0]:  %52 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55a814fbe9d0]:   store i8 %50, i8* %51, align 1, !tbaa !1280 {
	[0x55a814f68920]:  store i8 %51, i8* %52, align 1
	}

[0x55a814fbea50]:   %52 = icmp eq i32 %33, 0 {
	[0x55a814f687c0]:  %53 = icmp eq i32 %34, 0
	}

[0x55a814fbeab8]:   %53 = zext i1 %52 to i8 {
	[0x55a814fdc348]:  %54 = zext i1 %53 to i8
	}

[0x55a814fbeb60]:   %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55a814f691a0]:  %55 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55a814fbebf0]:   store i8 %53, i8* %54, align 1, !tbaa !1281 {
	[0x55a814fd9eb0]:  store i8 %54, i8* %55, align 1
	}

[0x55a814fbec70]:   %55 = lshr i32 %33, 31 {
	[0x55a814f68500]:  %56 = lshr i32 %34, 31
	}

[0x55a814fbecd8]:   %56 = trunc i32 %55 to i8 {
	[0x55a814fdb898]:  %57 = trunc i32 %56 to i8
	}

[0x55a814fbed80]:   %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55a814f68f30]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55a814fbee10]:   store i8 %56, i8* %57, align 1, !tbaa !1282 {
	[0x55a814fd9da0]:  store i8 %57, i8* %58, align 1
	}

[0x55a814fbee90]:   %58 = lshr i32 %27, 31 {
	[0x55a814f683b0]:  %59 = lshr i32 %28, 31
	}

[0x55a814fbef10]:   %59 = lshr i32 %32, 31 {
	[0x55a814fd9cd0]:  %60 = lshr i32 %33, 31
	}

[0x55a814fbef90]:   %60 = xor i32 %55, %58 {
	[0x55a814f69db0]:  %61 = xor i32 %56, %59
	}

[0x55a814fbf010]:   %61 = xor i32 %55, %59 {
	[0x55a814f69bb0]:  %62 = xor i32 %56, %60
	}

[0x55a814fbf090]:   %62 = add nuw nsw i32 %60, %61 {
	[0x55a814f69980]:  %63 = add nuw nsw i32 %61, %62
	}

[0x55a814fbf110]:   %63 = icmp eq i32 %62, 2 {
	[0x55a814f69820]:  %64 = icmp eq i32 %63, 2
	}

[0x55a814fbf178]:   %64 = zext i1 %63 to i8 {
	[0x55a814fdb768]:  %65 = zext i1 %64 to i8
	}

[0x55a814fbf630]:   %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55a814f67a20]:  %66 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55a814fbf6c0]:   store i8 %64, i8* %65, align 1, !tbaa !1283 {
	[0x55a814f696d0]:  store i8 %65, i8* %66, align 1
	}

[0x55a814fbf740]:   store i64 %34, i64* %RAX, align 8, !tbaa !1261 {
	[0x55a814f69570]:  store i64 %35, i64* %RAX.i, align 8
	}

[0x55a814fbf7c0]:   %66 = add i64 %24, 9 {
	[0x55a814f69420]:  %67 = add i64 %25, 9
	}

[0x55a814fbf840]:   store i64 %66, i64* %PC, align 8 {
	[0x55a814f6b0a0]:  store i64 %67, i64* %3, align 8
	}

[0x55a814fbf8a8]:   %67 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x55a814fdb638]:  %68 = load i64, i64* %6, align 8
	}

[0x55a814fbf920]:   %68 = add i64 %67, 8 {
	[0x55a814f6acd0]:  %69 = add i64 %68, 8
	}

[0x55a814fbf988]:   %69 = inttoptr i64 %67 to i64* {
	[0x55a814fdca68]:  %70 = inttoptr i64 %68 to i64*
	}

[0x55a814fbf9e8]:   %70 = load i64, i64* %69, align 8 {
	[0x55a814fde798]:  %71 = load i64, i64* %70, align 8
	}

[0x55a814fbfa60]:   store i64 %70, i64* %RBP, align 8, !tbaa !1261 {
	[0x55a814f6c3f0]:  store i64 %71, i64* %RBP.i, align 8
	}

[0x55a814fbfae0]:   store i64 %68, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f6ab80]:  store i64 %69, i64* %6, align 8
	}

[0x55a814fbfb60]:   %71 = add i64 %24, 10 {
	[0x55a814f6c1a0]:  %72 = add i64 %25, 10
	}

[0x55a814fbfbe0]:   store i64 %71, i64* %PC, align 8 {
	[0x55a814f6a850]:  store i64 %72, i64* %3, align 8
	}

[0x55a814fbfc48]:   %72 = inttoptr i64 %68 to i64* {
	[0x55a814fde668]:  %73 = inttoptr i64 %69 to i64*
	}

[0x55a814fbfca8]:   %73 = load i64, i64* %72, align 8 {
	[0x55a814fde538]:  %74 = load i64, i64* %73, align 8
	}

[0x55a814fbfd20]:   store i64 %73, i64* %PC, align 8, !tbaa !1261 {
	[0x55a814f6a740]:  store i64 %74, i64* %3, align 8
	}

[0x55a814fbfda0]:   %74 = add i64 %67, 16 {
	[0x55a814f6a630]:  %75 = add i64 %68, 16
	}

[0x55a814fbfe20]:   store i64 %74, i64* %7, align 8, !tbaa !1261 {
	[0x55a814f6c770]:  store i64 %75, i64* %6, align 8
	}

[0x55a814fbfe88]:   ret %struct.Memory* %2 {
	[0x55a814fde2d8]:  ret %struct.Memory.32* %2
	}

[0x55a81501f2c8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x55a814f85748]:  %16 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x55a81501f838]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55a814ff3928]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55a814fbc600]: block_400500 {
	[0x55a814f627c0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [foo] from mcsema/test.opt.ll
Extracting function [foo] from mcsema/test.proposed.opt.ll
Matcher Done...
