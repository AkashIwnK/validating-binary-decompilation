Writing '/tmp/tmphj1yqtm6.dot'...
Writing '/tmp/tmphj1yqtm6.dot':Done

Reading LLVM: /tmp/tmpallvfin1-query.ll
Extracting function [main] from /tmp/tmpallvfin1-query.ll
Dot file generated!
Writing '/tmp/tmp2ovtsdyg.dot'...
Writing '/tmp/tmp2ovtsdyg.dot':Done

Reading LLVM: /tmp/tmpxjux61b_-target.ll
Extracting function [main] from /tmp/tmpxjux61b_-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %RDI.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 49 store i64 10, i64* %RDI.i28, align 8
- 50 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 51 %RSI.i26 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
- 52 store i64 20, i64* %RSI.i26, align 8
- 53 %41 = add i64 %7, -12
- 54 %42 = add i64 %10, 24
- 55 store i64 %42, i64* %3, align 8
- 56 %43 = inttoptr i64 %41 to i32*
- 57 store i32 0, i32* %43, align 4
- 58 %44 = load i64, i64* %3, align 8
- 59 %45 = add i64 %44, -57
- 60 %46 = add i64 %44, 5
- 61 %47 = load i64, i64* %6, align 8
- 62 %48 = add i64 %47, -8
- 63 %49 = inttoptr i64 %48 to i64*
- 64 store i64 %46, i64* %49, align 8
- 65 store i64 %48, i64* %6, align 8
- 66 store i64 %45, i64* %3, align 8
- 67 %call2_400559 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %45, %struct.Memory* %2)
- 68 %50 = load i64, i64* %3, align 8
- 69 store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i28, align 8
- 70 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 71 %EAX.i19 = bitcast %union.anon* %51 to i32*
- 72 %52 = load i64, i64* %RBP.i, align 8
- 73 %53 = add i64 %52, -8
- 74 %54 = load i32, i32* %EAX.i19, align 4
- 75 %55 = add i64 %50, 13
- 76 store i64 %55, i64* %3, align 8
- 77 %56 = inttoptr i64 %53 to i32*
- 78 store i32 %54, i32* %56, align 4
- 79 %57 = load i64, i64* %RBP.i, align 8
- 80 %58 = add i64 %57, -8
- 81 %59 = load i64, i64* %3, align 8
- 82 %60 = add i64 %59, 3
- 83 store i64 %60, i64* %3, align 8
- 84 %61 = inttoptr i64 %58 to i32*
- 85 %62 = load i32, i32* %61, align 4
- 86 %63 = zext i32 %62 to i64
- 87 store i64 %63, i64* %RSI.i26, align 8
- 88 %AL.i = bitcast %union.anon* %51 to i8*
- 89 store i8 0, i8* %AL.i, align 1
- 90 %64 = add i64 %59, -331
- 91 %65 = add i64 %59, 10
- 92 %66 = load i64, i64* %6, align 8
- 93 %67 = add i64 %66, -8
- 94 %68 = inttoptr i64 %67 to i64*
- 95 store i64 %65, i64* %68, align 8
- 96 store i64 %67, i64* %6, align 8
- 97 store i64 %64, i64* %3, align 8
- 98 %69 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400559)
- 99 %70 = load i64, i64* %RBP.i, align 8
- 100 %71 = add i64 %70, -8
- 101 %72 = load i64, i64* %3, align 8
- 102 %73 = add i64 %72, 3
- 103 store i64 %73, i64* %3, align 8
- 104 %74 = inttoptr i64 %71 to i32*
- 105 %75 = load i32, i32* %74, align 4
- 106 %76 = zext i32 %75 to i64
- 107 store i64 %76, i64* %RSI.i26, align 8
- 108 %77 = add i64 %70, -12
- 109 %78 = load i32, i32* %EAX.i19, align 4
- 110 %79 = add i64 %72, 6
- 111 store i64 %79, i64* %3, align 8
- 112 %80 = inttoptr i64 %77 to i32*
- 113 store i32 %78, i32* %80, align 4
- 114 %ESI.i = bitcast %union.anon* %40 to i32*
- 115 %RAX.i = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
- 116 %81 = load i32, i32* %ESI.i, align 4
- 117 %82 = zext i32 %81 to i64
- 118 %83 = load i64, i64* %3, align 8
- 119 store i64 %82, i64* %RAX.i, align 8
- 120 %84 = load i64, i64* %6, align 8
- 121 %85 = add i64 %84, 16
- 122 store i64 %85, i64* %6, align 8
- 123 %86 = icmp ugt i64 %84, -17
- 124 %87 = zext i1 %86 to i8
- 125 store i8 %87, i8* %14, align 1
- 126 %88 = trunc i64 %85 to i32
- 127 %89 = and i32 %88, 255
- 128 %90 = tail call i32 @llvm.ctpop.i32(i32 %89)
- 129 %91 = trunc i32 %90 to i8
- 130 %92 = and i8 %91, 1
- 131 %93 = xor i8 %92, 1
- 132 store i8 %93, i8* %21, align 1
- 133 %94 = xor i64 %84, 16
- 134 %95 = xor i64 %94, %85
- 135 %96 = lshr i64 %95, 4
- 136 %97 = trunc i64 %96 to i8
- 137 %98 = and i8 %97, 1
- 138 store i8 %98, i8* %27, align 1
- 139 %99 = icmp eq i64 %85, 0
- 140 %100 = zext i1 %99 to i8
- 141 store i8 %100, i8* %30, align 1
- 142 %101 = lshr i64 %85, 63
- 143 %102 = trunc i64 %101 to i8
- 144 store i8 %102, i8* %33, align 1
- 145 %103 = lshr i64 %84, 63
- 146 %104 = xor i64 %101, %103
- 147 %105 = add nuw nsw i64 %104, %101
- 148 %106 = icmp eq i64 %105, 2
- 149 %107 = zext i1 %106 to i8
- 150 store i8 %107, i8* %39, align 1
- 151 %108 = add i64 %83, 7
- 152 store i64 %108, i64* %3, align 8
- 153 %109 = add i64 %84, 24
- 154 %110 = inttoptr i64 %85 to i64*
- 155 %111 = load i64, i64* %110, align 8
- 156 store i64 %111, i64* %RBP.i, align 8
- 157 store i64 %109, i64* %6, align 8
- 158 %112 = add i64 %83, 8
- 159 store i64 %112, i64* %3, align 8
- 160 %113 = inttoptr i64 %109 to i64*
- 161 %114 = load i64, i64* %113, align 8
- 162 store i64 %114, i64* %3, align 8
- 163 %115 = add i64 %84, 32
- 164 store i64 %115, i64* %6, align 8
- 165 ret %struct.Memory* %69
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd4722a60>, {0: {0}, 1: {10}, 2: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 3: {12}, 4: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 5: {9}, 6: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 7: {67, 102, 76, 15, 83, 95}, 8: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 9: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 10: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 11: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 12: {20}, 13: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 14: {22}, 15: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 16: {24}, 17: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 18: {129, 37, 136, 46, 143, 26, 29, 126}, 19: {27, 127}, 20: {72, 100, 28, 128}, 21: {129, 37, 136, 46, 143, 26, 29, 126}, 22: {38, 137, 130, 30}, 23: {131, 31}, 24: {32}, 25: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 26: {34, 133}, 27: {50, 35, 134, 146}, 28: {36, 135}, 29: {129, 37, 136, 46, 143, 26, 29, 126}, 30: {38, 137, 130, 30}, 31: {39}, 32: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 33: {41, 139}, 34: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 35: {43}, 36: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 37: {49, 145, 45, 142}, 38: {129, 37, 136, 46, 143, 26, 29, 126}, 39: {47}, 40: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 41: {49, 145, 45, 142}, 42: {50, 35, 134, 146}, 43: {51, 147}, 44: {148, 52}, 45: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 46: {54}, 47: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 48: {8}, 49: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 50: {4}, 51: {6, 7}, 52: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 53: {58, 110}, 54: {153, 59}, 55: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 56: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 57: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 58: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 59: {64}, 60: {65}, 61: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 62: {67, 102, 76, 15, 83, 95}, 63: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 64: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 65: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 66: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 67: {72, 100, 28, 128}, 68: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 69: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 70: {1}, 71: {2, 3, 5}, 72: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 73: {67, 102, 76, 15, 83, 95}, 74: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 75: {78}, 76: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 77: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 78: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 79: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 80: {67, 102, 76, 15, 83, 95}, 81: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 82: {104, 85}, 83: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 84: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 85: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 86: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 87: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 88: {2, 3, 5}, 89: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 90: {92}, 91: {93}, 92: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 93: {67, 102, 76, 15, 83, 95}, 94: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 95: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 96: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 97: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 98: {72, 100, 28, 128}, 99: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 100: {67, 102, 76, 15, 83, 95}, 101: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 102: {104, 85}, 103: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 104: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 105: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 106: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 107: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 108: {58, 110}, 109: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 110: {112}, 111: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 112: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 113: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 114: {2, 3, 5}, 115: {6, 7}, 116: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 117: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 118: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 119: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 120: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 121: {121}, 122: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 123: {123}, 124: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 125: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 126: {129, 37, 136, 46, 143, 26, 29, 126}, 127: {27, 127}, 128: {72, 100, 28, 128}, 129: {129, 37, 136, 46, 143, 26, 29, 126}, 130: {38, 137, 130, 30}, 131: {131, 31}, 132: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 133: {34, 133}, 134: {50, 35, 134, 146}, 135: {36, 135}, 136: {129, 37, 136, 46, 143, 26, 29, 126}, 137: {38, 137, 130, 30}, 138: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 139: {41, 139}, 140: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 141: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 142: {49, 145, 45, 142}, 143: {129, 37, 136, 46, 143, 26, 29, 126}, 144: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 145: {49, 145, 45, 142}, 146: {50, 35, 134, 146}, 147: {51, 147}, 148: {148, 52}, 149: {42, 108, 140, 53, 117, 23, 149, 89, 124}, 150: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 151: {151}, 152: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 153: {153, 59}, 154: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 155: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 156: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 157: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 158: {158}, 159: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 160: {96, 160, 68, 106, 16, 80, 114, 87, 154, 61}, 161: {11, 14, 18, 155, 161, 63, 66, 73, 75, 77, 82, 84, 88, 94, 101, 103, 107, 111, 116, 118, 120}, 162: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 163: {163}, 164: {132, 138, 13, 141, 144, 17, 19, 21, 150, 152, 25, 156, 157, 159, 33, 162, 164, 40, 44, 48, 55, 56, 57, 60, 62, 69, 70, 71, 74, 79, 81, 86, 90, 91, 97, 98, 99, 105, 109, 113, 115, 119, 122, 125}, 165: {165}})
Equivalent! frozenset({56, 74}) {49, 69}
Equivalent! frozenset({66, 94}) {92, 61}
Equivalent! frozenset({67, 95}) {93, 62}
Equivalent! frozenset({98, 70}) {96, 65}
Equivalent! frozenset({82, 101}) {99, 79}
Equivalent! frozenset({83, 102}) {80, 100}
Equivalent! frozenset({84, 103}) {81, 101}
Equivalent! frozenset({104, 85}) {82, 102}
Equivalent! frozenset({105, 86}) {83, 103}
Equivalent! frozenset({106, 87}) {104, 84}
Equivalent! frozenset({88, 107}) {105, 85}
Equivalent! frozenset({89, 108}) {106, 86}
Equivalent! frozenset({90, 109}) {107, 87}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd4722a60>, {0: {0}, 1: {10}, 2: {11}, 3: {12}, 4: {13}, 5: {9}, 6: {14}, 7: {15}, 8: {16}, 9: {17}, 10: {18}, 11: {19}, 12: {20}, 13: {21}, 14: {22}, 15: {23}, 16: {24}, 17: {25}, 18: {26}, 19: {27}, 20: {28}, 21: {29}, 22: {30}, 23: {31}, 24: {32}, 25: {33}, 26: {34}, 27: {35}, 28: {36}, 29: {37}, 30: {38}, 31: {39}, 32: {40}, 33: {41}, 34: {42}, 35: {43}, 36: {44}, 37: {45}, 38: {46}, 39: {47}, 40: {48}, 41: {49}, 42: {50}, 43: {51}, 44: {52}, 45: {53}, 46: {54}, 47: {55}, 48: {8}, 49: {56}, 50: {4}, 51: {7}, 52: {57, 90, 109}, 53: {58}, 54: {59}, 55: {60}, 56: {61}, 57: {62}, 58: {63}, 59: {64}, 60: {65}, 61: {94}, 62: {95}, 63: {68}, 64: {69}, 65: {70}, 66: {71}, 67: {72}, 68: {73}, 69: {74}, 70: {1}, 71: {3}, 72: {75}, 73: {76}, 74: {77}, 75: {78}, 76: {79}, 77: {80}, 78: {81}, 79: {101}, 80: {83}, 81: {84}, 82: {104}, 83: {105}, 84: {87}, 85: {107}, 86: {108}, 87: {109}, 88: {2}, 89: {91}, 90: {92}, 91: {93}, 92: {66}, 93: {67}, 94: {96}, 95: {97}, 96: {98}, 97: {99}, 98: {100}, 99: {82}, 100: {102}, 101: {103}, 102: {85}, 103: {86}, 104: {106}, 105: {88}, 106: {89}, 107: {90}, 108: {110}, 109: {111}, 110: {112}, 111: {113}, 112: {114}, 113: {115}, 114: {5}, 115: {6}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 getelementptr getelementptr
EXACT 51 getelementptr getelementptr
MORE 52 POT: 3
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 load load
EXACT 59 add add
EXACT 60 add add
EXACT 61 load load
EXACT 62 add add
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 store store
EXACT 66 store store
EXACT 67 tail tail
EXACT 68 load load
EXACT 69 store store
EXACT 70 getelementptr getelementptr
EXACT 71 bitcast bitcast
EXACT 72 load load
EXACT 73 add add
EXACT 74 load load
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
EXACT 81 load load
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 load load
EXACT 86 zext zext
EXACT 87 store store
EXACT 88 bitcast bitcast
EXACT 89 store store
EXACT 90 add add
EXACT 91 add add
EXACT 92 load load
EXACT 93 add add
EXACT 94 inttoptr inttoptr
EXACT 95 store store
EXACT 96 store store
EXACT 97 store store
EXACT 98 tail tail
EXACT 99 load load
EXACT 100 add add
EXACT 101 load load
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 load load
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 add add
EXACT 109 load load
EXACT 110 add add
EXACT 111 store store
EXACT 112 inttoptr inttoptr
EXACT 113 store store
EXACT 114 bitcast bitcast
EXACT 115 getelementptr getelementptr
EXACT 116 load load
EXACT 117 zext zext
EXACT 118 load load
EXACT 119 store store
EXACT 120 load load
EXACT 121 add add
EXACT 122 store store
EXACT 123 icmp icmp
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 trunc trunc
EXACT 127 and and
EXACT 128 tail tail
EXACT 129 trunc trunc
EXACT 130 and and
EXACT 131 xor xor
EXACT 132 store store
EXACT 133 xor xor
EXACT 134 xor xor
EXACT 135 lshr lshr
EXACT 136 trunc trunc
EXACT 137 and and
EXACT 138 store store
EXACT 139 icmp icmp
EXACT 140 zext zext
EXACT 141 store store
EXACT 142 lshr lshr
EXACT 143 trunc trunc
EXACT 144 store store
EXACT 145 lshr lshr
EXACT 146 xor xor
EXACT 147 add add
EXACT 148 icmp icmp
EXACT 149 zext zext
EXACT 150 store store
EXACT 151 add add
EXACT 152 store store
EXACT 153 add add
EXACT 154 inttoptr inttoptr
EXACT 155 load load
EXACT 156 store store
EXACT 157 store store
EXACT 158 add add
EXACT 159 store store
EXACT 160 inttoptr inttoptr
EXACT 161 load load
EXACT 162 store store
EXACT 163 add add
EXACT 164 store store
EXACT 165 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 5 %ESI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = load i64, i64* %RBP, align 8
- 12 %6 = add i64 %1, 1
- 13 store i64 %6, i64* %PC, align 8
- 14 %7 = load i64, i64* %RSP, align 8
- 15 %8 = add i64 %7, -8
- 16 %9 = inttoptr i64 %8 to i64*
- 17 store i64 %5, i64* %9, align 8
- 18 %10 = load i64, i64* %PC, align 8
- 19 store i64 %8, i64* %RBP, align 8
- 20 %11 = add i64 %7, -24
- 21 store i64 %11, i64* %RSP, align 8
- 22 %12 = icmp ult i64 %8, 16
- 23 %13 = zext i1 %12 to i8
- 24 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 store i8 %13, i8* %14, align 1
- 26 %15 = trunc i64 %11 to i32
- 27 %16 = and i32 %15, 255
- 28 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 29 %18 = trunc i32 %17 to i8
- 30 %19 = and i8 %18, 1
- 31 %20 = xor i8 %19, 1
- 32 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 33 store i8 %20, i8* %21, align 1
- 34 %22 = xor i64 %8, 16
- 35 %23 = xor i64 %22, %11
- 36 %24 = lshr i64 %23, 4
- 37 %25 = trunc i64 %24 to i8
- 38 %26 = and i8 %25, 1
- 39 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 40 store i8 %26, i8* %27, align 1
- 41 %28 = icmp eq i64 %11, 0
- 42 %29 = zext i1 %28 to i8
- 43 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 44 store i8 %29, i8* %30, align 1
- 45 %31 = lshr i64 %11, 63
- 46 %32 = trunc i64 %31 to i8
- 47 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 48 store i8 %32, i8* %33, align 1
- 49 %34 = lshr i64 %8, 63
- 50 %35 = xor i64 %31, %34
- 51 %36 = add nuw nsw i64 %35, %34
- 52 %37 = icmp eq i64 %36, 2
- 53 %38 = zext i1 %37 to i8
- 54 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 55 store i8 %38, i8* %39, align 1
- 56 store i64 10, i64* %RDI, align 8
- 57 store i64 20, i64* %RSI, align 8
- 58 %40 = add i64 %7, -12
- 59 %41 = add i64 %10, 24
- 60 store i64 %41, i64* %PC, align 8
- 61 %42 = inttoptr i64 %40 to i32*
- 62 store i32 0, i32* %42, align 4
- 63 %43 = load i64, i64* %PC, align 8
- 64 %44 = add i64 %43, -57
- 65 %45 = add i64 %43, 5
- 66 %46 = load i64, i64* %RSP, align 8
- 67 %47 = add i64 %46, -8
- 68 %48 = inttoptr i64 %47 to i64*
- 69 store i64 %45, i64* %48, align 8
- 70 store i64 %47, i64* %RSP, align 8
- 71 store i64 %44, i64* %PC, align 8
- 72 %49 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %2)
- 73 %50 = load i64, i64* %PC, align 8
- 74 store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8
- 75 %51 = load i64, i64* %RBP, align 8
- 76 %52 = add i64 %51, -8
- 77 %53 = load i32, i32* %EAX, align 4
- 78 %54 = add i64 %50, 13
- 79 store i64 %54, i64* %PC, align 8
- 80 %55 = inttoptr i64 %52 to i32*
- 81 store i32 %53, i32* %55, align 4
- 82 %56 = load i64, i64* %RBP, align 8
- 83 %57 = add i64 %56, -8
- 84 %58 = load i64, i64* %PC, align 8
- 85 %59 = add i64 %58, 3
- 86 store i64 %59, i64* %PC, align 8
- 87 %60 = inttoptr i64 %57 to i32*
- 88 %61 = load i32, i32* %60, align 4
- 89 %62 = zext i32 %61 to i64
- 90 store i64 %62, i64* %RSI, align 8
- 91 store i8 0, i8* %AL, align 1
- 92 %63 = add i64 %58, -331
- 93 %64 = add i64 %58, 10
- 94 %65 = load i64, i64* %RSP, align 8
- 95 %66 = add i64 %65, -8
- 96 %67 = inttoptr i64 %66 to i64*
- 97 store i64 %64, i64* %67, align 8
- 98 store i64 %66, i64* %RSP, align 8
- 99 store i64 %63, i64* %PC, align 8
- 100 %68 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %49)
- 101 %69 = load i64, i64* %RBP, align 8
- 102 %70 = add i64 %69, -8
- 103 %71 = load i64, i64* %PC, align 8
- 104 %72 = add i64 %71, 3
- 105 store i64 %72, i64* %PC, align 8
- 106 %73 = inttoptr i64 %70 to i32*
- 107 %74 = load i32, i32* %73, align 4
- 108 %75 = zext i32 %74 to i64
- 109 store i64 %75, i64* %RSI, align 8
- 110 %76 = add i64 %69, -12
- 111 %77 = load i32, i32* %EAX, align 4
- 112 %78 = add i64 %71, 6
- 113 store i64 %78, i64* %PC, align 8
- 114 %79 = inttoptr i64 %76 to i32*
- 115 store i32 %77, i32* %79, align 4
- 116 %80 = load i32, i32* %ESI, align 4
- 117 %81 = zext i32 %80 to i64
- 118 %82 = load i64, i64* %PC, align 8
- 119 store i64 %81, i64* %RAX, align 8
- 120 %83 = load i64, i64* %RSP, align 8
- 121 %84 = add i64 %83, 16
- 122 store i64 %84, i64* %RSP, align 8
- 123 %85 = icmp ugt i64 %83, -17
- 124 %86 = zext i1 %85 to i8
- 125 store i8 %86, i8* %14, align 1
- 126 %87 = trunc i64 %84 to i32
- 127 %88 = and i32 %87, 255
- 128 %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12
- 129 %90 = trunc i32 %89 to i8
- 130 %91 = and i8 %90, 1
- 131 %92 = xor i8 %91, 1
- 132 store i8 %92, i8* %21, align 1
- 133 %93 = xor i64 %83, 16
- 134 %94 = xor i64 %93, %84
- 135 %95 = lshr i64 %94, 4
- 136 %96 = trunc i64 %95 to i8
- 137 %97 = and i8 %96, 1
- 138 store i8 %97, i8* %27, align 1
- 139 %98 = icmp eq i64 %84, 0
- 140 %99 = zext i1 %98 to i8
- 141 store i8 %99, i8* %30, align 1
- 142 %100 = lshr i64 %84, 63
- 143 %101 = trunc i64 %100 to i8
- 144 store i8 %101, i8* %33, align 1
- 145 %102 = lshr i64 %83, 63
- 146 %103 = xor i64 %100, %102
- 147 %104 = add nuw nsw i64 %103, %100
- 148 %105 = icmp eq i64 %104, 2
- 149 %106 = zext i1 %105 to i8
- 150 store i8 %106, i8* %39, align 1
- 151 %107 = add i64 %82, 7
- 152 store i64 %107, i64* %PC, align 8
- 153 %108 = add i64 %83, 24
- 154 %109 = inttoptr i64 %84 to i64*
- 155 %110 = load i64, i64* %109, align 8
- 156 store i64 %110, i64* %RBP, align 8
- 157 store i64 %108, i64* %RSP, align 8
- 158 %111 = add i64 %82, 8
- 159 store i64 %111, i64* %PC, align 8
- 160 %112 = inttoptr i64 %108 to i64*
- 161 %113 = load i64, i64* %112, align 8
- 162 store i64 %113, i64* %PC, align 8
- 163 %114 = add i64 %83, 32
- 164 store i64 %114, i64* %RSP, align 8
- 165 ret %struct.Memory* %68
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd42d0ea0>, {0: {0}, 1: {70}, 2: {88, 114, 71}, 3: {88, 114, 71}, 4: {50}, 5: {88, 114, 71}, 6: {115, 51}, 7: {115, 51}, 8: {48}, 9: {5}, 10: {1}, 11: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 12: {3}, 13: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 14: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 15: {100, 7, 73, 80, 93, 62}, 16: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 17: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 18: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 19: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 20: {12}, 21: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 22: {14}, 23: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 24: {16}, 25: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 26: {129, 38, 136, 143, 18, 21, 29, 126}, 27: {19, 127}, 28: {128, 98, 67, 20}, 29: {129, 38, 136, 143, 18, 21, 29, 126}, 30: {137, 130, 22, 30}, 31: {131, 23}, 32: {24}, 33: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 34: {26, 133}, 35: {42, 27, 134, 146}, 36: {28, 135}, 37: {129, 38, 136, 143, 18, 21, 29, 126}, 38: {137, 130, 22, 30}, 39: {31}, 40: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 41: {33, 139}, 42: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 43: {35}, 44: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 45: {41, 145, 37, 142}, 46: {129, 38, 136, 143, 18, 21, 29, 126}, 47: {39}, 48: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 49: {41, 145, 37, 142}, 50: {42, 27, 134, 146}, 51: {43, 147}, 52: {148, 44}, 53: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 54: {46}, 55: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 56: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 57: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 58: {108, 53}, 59: {153, 54}, 60: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 61: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 62: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 63: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 64: {59}, 65: {60}, 66: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 67: {100, 7, 73, 80, 93, 62}, 68: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 69: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 70: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 71: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 72: {128, 98, 67, 20}, 73: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 74: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 75: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 76: {100, 7, 73, 80, 93, 62}, 77: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 78: {75}, 79: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 80: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 81: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 82: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 83: {100, 7, 73, 80, 93, 62}, 84: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 85: {82, 102}, 86: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 87: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 88: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 89: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 90: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 91: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 92: {90}, 93: {91}, 94: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 95: {100, 7, 73, 80, 93, 62}, 96: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 97: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 98: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 99: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 100: {128, 98, 67, 20}, 101: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 102: {100, 7, 73, 80, 93, 62}, 103: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 104: {82, 102}, 105: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 106: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 107: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 108: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 109: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 110: {108, 53}, 111: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 112: {110}, 113: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 114: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 115: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 116: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 117: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 118: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 119: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 120: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 121: {121}, 122: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 123: {123}, 124: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 125: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 126: {129, 38, 136, 143, 18, 21, 29, 126}, 127: {19, 127}, 128: {128, 98, 67, 20}, 129: {129, 38, 136, 143, 18, 21, 29, 126}, 130: {137, 130, 22, 30}, 131: {131, 23}, 132: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 133: {26, 133}, 134: {42, 27, 134, 146}, 135: {28, 135}, 136: {129, 38, 136, 143, 18, 21, 29, 126}, 137: {137, 130, 22, 30}, 138: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 139: {33, 139}, 140: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 141: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 142: {41, 145, 37, 142}, 143: {129, 38, 136, 143, 18, 21, 29, 126}, 144: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 145: {41, 145, 37, 142}, 146: {42, 27, 134, 146}, 147: {43, 147}, 148: {148, 44}, 149: {34, 106, 140, 45, 15, 117, 86, 149, 124}, 150: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 151: {151}, 152: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 153: {153, 54}, 154: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 155: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 156: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 157: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 158: {158}, 159: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 160: {160, 8, 104, 77, 112, 84, 56, 154, 94, 63}, 161: {2, 6, 10, 155, 161, 58, 61, 68, 72, 74, 79, 81, 85, 92, 99, 101, 105, 109, 116, 118, 120}, 162: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 163: {163}, 164: {4, 132, 9, 138, 11, 13, 141, 144, 17, 150, 152, 25, 156, 157, 159, 32, 162, 36, 164, 40, 47, 49, 52, 55, 57, 64, 65, 66, 69, 76, 78, 83, 87, 89, 95, 96, 97, 103, 107, 111, 113, 119, 122, 125}, 165: {165}})
Equivalent! frozenset({49, 69}) {56, 74}
Equivalent! frozenset({92, 61}) {66, 94}
Equivalent! frozenset({93, 62}) {67, 95}
Equivalent! frozenset({96, 65}) {98, 70}
Equivalent! frozenset({99, 79}) {82, 101}
Equivalent! frozenset({80, 100}) {83, 102}
Equivalent! frozenset({81, 101}) {84, 103}
Equivalent! frozenset({82, 102}) {104, 85}
Equivalent! frozenset({83, 103}) {105, 86}
Equivalent! frozenset({104, 84}) {106, 87}
Equivalent! frozenset({105, 85}) {88, 107}
Equivalent! frozenset({106, 86}) {89, 108}
Equivalent! frozenset({107, 87}) {90, 109}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd42d0ea0>, {0: {0}, 1: {70}, 2: {88}, 3: {71}, 4: {50}, 5: {114}, 6: {115}, 7: {51}, 8: {48}, 9: {5}, 10: {1}, 11: {2}, 12: {3}, 13: {4}, 14: {6}, 15: {7}, 16: {8}, 17: {9}, 18: {10}, 19: {11}, 20: {12}, 21: {13}, 22: {14}, 23: {15}, 24: {16}, 25: {17}, 26: {18}, 27: {19}, 28: {20}, 29: {21}, 30: {22}, 31: {23}, 32: {24}, 33: {25}, 34: {26}, 35: {27}, 36: {28}, 37: {29}, 38: {30}, 39: {31}, 40: {32}, 41: {33}, 42: {34}, 43: {35}, 44: {36}, 45: {37}, 46: {38}, 47: {39}, 48: {40}, 49: {41}, 50: {42}, 51: {43}, 52: {44}, 53: {45}, 54: {46}, 55: {47}, 56: {49}, 57: {107, 52, 87}, 58: {53}, 59: {54}, 60: {55}, 61: {56}, 62: {57}, 63: {58}, 64: {59}, 65: {60}, 66: {92}, 67: {93}, 68: {63}, 69: {64}, 70: {65}, 71: {66}, 72: {67}, 73: {68}, 74: {69}, 75: {72}, 76: {73}, 77: {74}, 78: {75}, 79: {76}, 80: {77}, 81: {78}, 82: {99}, 83: {80}, 84: {81}, 85: {102}, 86: {103}, 87: {84}, 88: {105}, 89: {106}, 90: {107}, 91: {89}, 92: {90}, 93: {91}, 94: {61}, 95: {62}, 96: {94}, 97: {95}, 98: {96}, 99: {97}, 100: {98}, 101: {79}, 102: {100}, 103: {101}, 104: {82}, 105: {83}, 106: {104}, 107: {85}, 108: {86}, 109: {87}, 110: {108}, 111: {109}, 112: {110}, 113: {111}, 114: {112}, 115: {113}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 store store
EXACT 14 load load
EXACT 15 add add
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 store store
EXACT 20 add add
EXACT 21 store store
EXACT 22 icmp icmp
EXACT 23 zext zext
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 tail tail
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 xor xor
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 xor xor
EXACT 35 xor xor
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 and and
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 icmp icmp
EXACT 42 zext zext
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 lshr lshr
EXACT 46 trunc trunc
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 xor xor
EXACT 51 add add
EXACT 52 icmp icmp
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 store store
MORE 57 POT: 3
EXACT 58 add add
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
EXACT 65 add add
EXACT 66 load load
EXACT 67 add add
EXACT 68 inttoptr inttoptr
EXACT 69 store store
EXACT 70 store store
EXACT 71 store store
EXACT 72 tail tail
EXACT 73 load load
EXACT 74 store store
EXACT 75 load load
EXACT 76 add add
EXACT 77 load load
EXACT 78 add add
EXACT 79 store store
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 load load
EXACT 83 add add
EXACT 84 load load
EXACT 85 add add
EXACT 86 store store
EXACT 87 inttoptr inttoptr
EXACT 88 load load
EXACT 89 zext zext
EXACT 90 store store
EXACT 91 store store
EXACT 92 add add
EXACT 93 add add
EXACT 94 load load
EXACT 95 add add
EXACT 96 inttoptr inttoptr
EXACT 97 store store
EXACT 98 store store
EXACT 99 store store
EXACT 100 tail tail
EXACT 101 load load
EXACT 102 add add
EXACT 103 load load
EXACT 104 add add
EXACT 105 store store
EXACT 106 inttoptr inttoptr
EXACT 107 load load
EXACT 108 zext zext
EXACT 109 store store
EXACT 110 add add
EXACT 111 load load
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 store store
EXACT 116 load load
EXACT 117 zext zext
EXACT 118 load load
EXACT 119 store store
EXACT 120 load load
EXACT 121 add add
EXACT 122 store store
EXACT 123 icmp icmp
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 trunc trunc
EXACT 127 and and
EXACT 128 tail tail
EXACT 129 trunc trunc
EXACT 130 and and
EXACT 131 xor xor
EXACT 132 store store
EXACT 133 xor xor
EXACT 134 xor xor
EXACT 135 lshr lshr
EXACT 136 trunc trunc
EXACT 137 and and
EXACT 138 store store
EXACT 139 icmp icmp
EXACT 140 zext zext
EXACT 141 store store
EXACT 142 lshr lshr
EXACT 143 trunc trunc
EXACT 144 store store
EXACT 145 lshr lshr
EXACT 146 xor xor
EXACT 147 add add
EXACT 148 icmp icmp
EXACT 149 zext zext
EXACT 150 store store
EXACT 151 add add
EXACT 152 store store
EXACT 153 add add
EXACT 154 inttoptr inttoptr
EXACT 155 load load
EXACT 156 store store
EXACT 157 store store
EXACT 158 add add
EXACT 159 store store
EXACT 160 inttoptr inttoptr
EXACT 161 load load
EXACT 162 store store
EXACT 163 add add
EXACT 164 store store
EXACT 165 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%RDI.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 10, i64* %RDI.i28, align 8', '%41 = add i64 %7, -12', '%42 = add i64 %10, 24', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = load i64, i64* %3, align 8', '%45 = add i64 %44, -57', '%46 = add i64 %44, 5', '%47 = load i64, i64* %6, align 8', '%48 = add i64 %47, -8', '%49 = inttoptr i64 %48 to i64*', 'store i64 %46, i64* %49, align 8', 'store i64 %48, i64* %6, align 8', 'store i64 %45, i64* %3, align 8', '%call2_400559 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %45, %struct.Memory* %2)', '%50 = load i64, i64* %3, align 8', 'store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i28, align 8', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%EAX.i19 = bitcast %union.anon* %51 to i32*', '%52 = load i64, i64* %RBP.i, align 8', '%53 = add i64 %52, -8', '%54 = load i32, i32* %EAX.i19, align 4', '%55 = add i64 %50, 13', 'store i64 %55, i64* %3, align 8', '%56 = inttoptr i64 %53 to i32*', 'store i32 %54, i32* %56, align 4', '%57 = load i64, i64* %RBP.i, align 8', '%58 = add i64 %57, -8', '%59 = load i64, i64* %3, align 8', '%60 = add i64 %59, 3', 'store i64 %60, i64* %3, align 8', '%61 = inttoptr i64 %58 to i32*', '%62 = load i32, i32* %61, align 4', '%63 = zext i32 %62 to i64', 'store i64 %63, i64* %RSI.i26, align 8', '%AL.i = bitcast %union.anon* %51 to i8*', 'store i8 0, i8* %AL.i, align 1', '%64 = add i64 %59, -331', '%65 = add i64 %59, 10', '%66 = load i64, i64* %6, align 8', '%67 = add i64 %66, -8', '%68 = inttoptr i64 %67 to i64*', 'store i64 %65, i64* %68, align 8', 'store i64 %67, i64* %6, align 8', 'store i64 %64, i64* %3, align 8', '%69 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400559)', '%70 = load i64, i64* %RBP.i, align 8', '%71 = add i64 %70, -8', '%72 = load i64, i64* %3, align 8', '%73 = add i64 %72, 3', 'store i64 %73, i64* %3, align 8', '%74 = inttoptr i64 %71 to i32*', '%75 = load i32, i32* %74, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RSI.i26, align 8', '%77 = add i64 %70, -12', '%78 = load i32, i32* %EAX.i19, align 4', '%79 = add i64 %72, 6', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %77 to i32*', 'store i32 %78, i32* %80, align 4', '%ESI.i = bitcast %union.anon* %40 to i32*', '%RAX.i = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0', '%81 = load i32, i32* %ESI.i, align 4', '%82 = zext i32 %81 to i64', '%83 = load i64, i64* %3, align 8', 'store i64 %82, i64* %RAX.i, align 8', '%84 = load i64, i64* %6, align 8', '%85 = add i64 %84, 16', 'store i64 %85, i64* %6, align 8', '%86 = icmp ugt i64 %84, -17', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %14, align 1', '%88 = trunc i64 %85 to i32', '%89 = and i32 %88, 255', '%90 = tail call i32 @llvm.ctpop.i32(i32 %89)', '%91 = trunc i32 %90 to i8', '%92 = and i8 %91, 1', '%93 = xor i8 %92, 1', 'store i8 %93, i8* %21, align 1', '%94 = xor i64 %84, 16', '%95 = xor i64 %94, %85', '%96 = lshr i64 %95, 4', '%97 = trunc i64 %96 to i8', '%98 = and i8 %97, 1', 'store i8 %98, i8* %27, align 1', '%99 = icmp eq i64 %85, 0', '%100 = zext i1 %99 to i8', 'store i8 %100, i8* %30, align 1', '%101 = lshr i64 %85, 63', '%102 = trunc i64 %101 to i8', 'store i8 %102, i8* %33, align 1', '%103 = lshr i64 %84, 63', '%104 = xor i64 %101, %103', '%105 = add nuw nsw i64 %104, %101', '%106 = icmp eq i64 %105, 2', '%107 = zext i1 %106 to i8', 'store i8 %107, i8* %39, align 1', '%108 = add i64 %83, 7', 'store i64 %108, i64* %3, align 8', '%109 = add i64 %84, 24', '%110 = inttoptr i64 %85 to i64*', '%111 = load i64, i64* %110, align 8', 'store i64 %111, i64* %RBP.i, align 8', 'store i64 %109, i64* %6, align 8', '%112 = add i64 %83, 8', 'store i64 %112, i64* %3, align 8', '%113 = inttoptr i64 %109 to i64*', '%114 = load i64, i64* %113, align 8', 'store i64 %114, i64* %3, align 8', '%115 = add i64 %84, 32', 'store i64 %115, i64* %6, align 8', 'ret %struct.Memory* %69'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %RDI.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 10, i64* %RDI.i28, align 8
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Keep: %RSI.i26 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
Keep: store i64 20, i64* %RSI.i26, align 8
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = add i64 %10, 24
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Found line to remove! %44 = load i64, i64* %3, align 8
Found line to remove! %45 = add i64 %44, -57
Found line to remove! %46 = add i64 %44, 5
Found line to remove! %47 = load i64, i64* %6, align 8
Found line to remove! %48 = add i64 %47, -8
Found line to remove! %49 = inttoptr i64 %48 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Found line to remove! store i64 %48, i64* %6, align 8
Found line to remove! store i64 %45, i64* %3, align 8
Found line to remove! %call2_400559 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %45, %struct.Memory* %2)
Found line to remove! %50 = load i64, i64* %3, align 8
Found line to remove! store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i28, align 8
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX.i19 = bitcast %union.anon* %51 to i32*
Found line to remove! %52 = load i64, i64* %RBP.i, align 8
Found line to remove! %53 = add i64 %52, -8
Found line to remove! %54 = load i32, i32* %EAX.i19, align 4
Found line to remove! %55 = add i64 %50, 13
Found line to remove! store i64 %55, i64* %3, align 8
Found line to remove! %56 = inttoptr i64 %53 to i32*
Found line to remove! store i32 %54, i32* %56, align 4
Found line to remove! %57 = load i64, i64* %RBP.i, align 8
Found line to remove! %58 = add i64 %57, -8
Found line to remove! %59 = load i64, i64* %3, align 8
Found line to remove! %60 = add i64 %59, 3
Found line to remove! store i64 %60, i64* %3, align 8
Found line to remove! %61 = inttoptr i64 %58 to i32*
Found line to remove! %62 = load i32, i32* %61, align 4
Found line to remove! %63 = zext i32 %62 to i64
Found line to remove! store i64 %63, i64* %RSI.i26, align 8
Found line to remove! %AL.i = bitcast %union.anon* %51 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %64 = add i64 %59, -331
Found line to remove! %65 = add i64 %59, 10
Found line to remove! %66 = load i64, i64* %6, align 8
Found line to remove! %67 = add i64 %66, -8
Found line to remove! %68 = inttoptr i64 %67 to i64*
Found line to remove! store i64 %65, i64* %68, align 8
Found line to remove! store i64 %67, i64* %6, align 8
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %69 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400559)
Found line to remove! %70 = load i64, i64* %RBP.i, align 8
Found line to remove! %71 = add i64 %70, -8
Found line to remove! %72 = load i64, i64* %3, align 8
Found line to remove! %73 = add i64 %72, 3
Found line to remove! store i64 %73, i64* %3, align 8
Found line to remove! %74 = inttoptr i64 %71 to i32*
Found line to remove! %75 = load i32, i32* %74, align 4
Found line to remove! %76 = zext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RSI.i26, align 8
Found line to remove! %77 = add i64 %70, -12
Found line to remove! %78 = load i32, i32* %EAX.i19, align 4
Found line to remove! %79 = add i64 %72, 6
Found line to remove! store i64 %79, i64* %3, align 8
Found line to remove! %80 = inttoptr i64 %77 to i32*
Found line to remove! store i32 %78, i32* %80, align 4
Found line to remove! %ESI.i = bitcast %union.anon* %40 to i32*
Found line to remove! %RAX.i = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
Found line to remove! %81 = load i32, i32* %ESI.i, align 4
Found line to remove! %82 = zext i32 %81 to i64
Found line to remove! %83 = load i64, i64* %3, align 8
Found line to remove! store i64 %82, i64* %RAX.i, align 8
Found line to remove! %84 = load i64, i64* %6, align 8
Found line to remove! %85 = add i64 %84, 16
Found line to remove! store i64 %85, i64* %6, align 8
Found line to remove! %86 = icmp ugt i64 %84, -17
Found line to remove! %87 = zext i1 %86 to i8
Found line to remove! store i8 %87, i8* %14, align 1
Found line to remove! %88 = trunc i64 %85 to i32
Found line to remove! %89 = and i32 %88, 255
Found line to remove! %90 = tail call i32 @llvm.ctpop.i32(i32 %89)
Found line to remove! %91 = trunc i32 %90 to i8
Found line to remove! %92 = and i8 %91, 1
Found line to remove! %93 = xor i8 %92, 1
Found line to remove! store i8 %93, i8* %21, align 1
Found line to remove! %94 = xor i64 %84, 16
Found line to remove! %95 = xor i64 %94, %85
Found line to remove! %96 = lshr i64 %95, 4
Found line to remove! %97 = trunc i64 %96 to i8
Found line to remove! %98 = and i8 %97, 1
Found line to remove! store i8 %98, i8* %27, align 1
Found line to remove! %99 = icmp eq i64 %85, 0
Found line to remove! %100 = zext i1 %99 to i8
Found line to remove! store i8 %100, i8* %30, align 1
Found line to remove! %101 = lshr i64 %85, 63
Found line to remove! %102 = trunc i64 %101 to i8
Found line to remove! store i8 %102, i8* %33, align 1
Found line to remove! %103 = lshr i64 %84, 63
Found line to remove! %104 = xor i64 %101, %103
Found line to remove! %105 = add nuw nsw i64 %104, %101
Found line to remove! %106 = icmp eq i64 %105, 2
Found line to remove! %107 = zext i1 %106 to i8
Found line to remove! store i8 %107, i8* %39, align 1
Found line to remove! %108 = add i64 %83, 7
Found line to remove! store i64 %108, i64* %3, align 8
Found line to remove! %109 = add i64 %84, 24
Found line to remove! %110 = inttoptr i64 %85 to i64*
Found line to remove! %111 = load i64, i64* %110, align 8
Found line to remove! store i64 %111, i64* %RBP.i, align 8
Found line to remove! store i64 %109, i64* %6, align 8
Found line to remove! %112 = add i64 %83, 8
Found line to remove! store i64 %112, i64* %3, align 8
Found line to remove! %113 = inttoptr i64 %109 to i64*
Found line to remove! %114 = load i64, i64* %113, align 8
Found line to remove! store i64 %114, i64* %3, align 8
Found line to remove! %115 = add i64 %84, 32
Found line to remove! store i64 %115, i64* %6, align 8
Found line to remove! ret %struct.Memory* %69
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ESI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', 'store i64 10, i64* %RDI, align 8', '%40 = add i64 %7, -12', '%41 = add i64 %10, 24', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %PC, align 8', '%44 = add i64 %43, -57', '%45 = add i64 %43, 5', '%46 = load i64, i64* %RSP, align 8', '%47 = add i64 %46, -8', '%48 = inttoptr i64 %47 to i64*', 'store i64 %45, i64* %48, align 8', 'store i64 %47, i64* %RSP, align 8', 'store i64 %44, i64* %PC, align 8', '%49 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %2)', '%50 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8', '%51 = load i64, i64* %RBP, align 8', '%52 = add i64 %51, -8', '%53 = load i32, i32* %EAX, align 4', '%54 = add i64 %50, 13', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %52 to i32*', 'store i32 %53, i32* %55, align 4', '%56 = load i64, i64* %RBP, align 8', '%57 = add i64 %56, -8', '%58 = load i64, i64* %PC, align 8', '%59 = add i64 %58, 3', 'store i64 %59, i64* %PC, align 8', '%60 = inttoptr i64 %57 to i32*', '%61 = load i32, i32* %60, align 4', '%62 = zext i32 %61 to i64', 'store i64 %62, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%63 = add i64 %58, -331', '%64 = add i64 %58, 10', '%65 = load i64, i64* %RSP, align 8', '%66 = add i64 %65, -8', '%67 = inttoptr i64 %66 to i64*', 'store i64 %64, i64* %67, align 8', 'store i64 %66, i64* %RSP, align 8', 'store i64 %63, i64* %PC, align 8', '%68 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %49)', '%69 = load i64, i64* %RBP, align 8', '%70 = add i64 %69, -8', '%71 = load i64, i64* %PC, align 8', '%72 = add i64 %71, 3', 'store i64 %72, i64* %PC, align 8', '%73 = inttoptr i64 %70 to i32*', '%74 = load i32, i32* %73, align 4', '%75 = zext i32 %74 to i64', 'store i64 %75, i64* %RSI, align 8', '%76 = add i64 %69, -12', '%77 = load i32, i32* %EAX, align 4', '%78 = add i64 %71, 6', 'store i64 %78, i64* %PC, align 8', '%79 = inttoptr i64 %76 to i32*', 'store i32 %77, i32* %79, align 4', '%80 = load i32, i32* %ESI, align 4', '%81 = zext i32 %80 to i64', '%82 = load i64, i64* %PC, align 8', 'store i64 %81, i64* %RAX, align 8', '%83 = load i64, i64* %RSP, align 8', '%84 = add i64 %83, 16', 'store i64 %84, i64* %RSP, align 8', '%85 = icmp ugt i64 %83, -17', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %14, align 1', '%87 = trunc i64 %84 to i32', '%88 = and i32 %87, 255', '%89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12', '%90 = trunc i32 %89 to i8', '%91 = and i8 %90, 1', '%92 = xor i8 %91, 1', 'store i8 %92, i8* %21, align 1', '%93 = xor i64 %83, 16', '%94 = xor i64 %93, %84', '%95 = lshr i64 %94, 4', '%96 = trunc i64 %95 to i8', '%97 = and i8 %96, 1', 'store i8 %97, i8* %27, align 1', '%98 = icmp eq i64 %84, 0', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %30, align 1', '%100 = lshr i64 %84, 63', '%101 = trunc i64 %100 to i8', 'store i8 %101, i8* %33, align 1', '%102 = lshr i64 %83, 63', '%103 = xor i64 %100, %102', '%104 = add nuw nsw i64 %103, %100', '%105 = icmp eq i64 %104, 2', '%106 = zext i1 %105 to i8', 'store i8 %106, i8* %39, align 1', '%107 = add i64 %82, 7', 'store i64 %107, i64* %PC, align 8', '%108 = add i64 %83, 24', '%109 = inttoptr i64 %84 to i64*', '%110 = load i64, i64* %109, align 8', 'store i64 %110, i64* %RBP, align 8', 'store i64 %108, i64* %RSP, align 8', '%111 = add i64 %82, 8', 'store i64 %111, i64* %PC, align 8', '%112 = inttoptr i64 %108 to i64*', '%113 = load i64, i64* %112, align 8', 'store i64 %113, i64* %PC, align 8', '%114 = add i64 %83, 32', 'store i64 %114, i64* %RSP, align 8', 'ret %struct.Memory* %68'])
Keep: block_400540:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! store i64 10, i64* %RDI, align 8
Keep: store i64 20, i64* %RSI, align 8
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 24
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %PC, align 8
Found line to remove! %44 = add i64 %43, -57
Found line to remove! %45 = add i64 %43, 5
Found line to remove! %46 = load i64, i64* %RSP, align 8
Found line to remove! %47 = add i64 %46, -8
Found line to remove! %48 = inttoptr i64 %47 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! store i64 %47, i64* %RSP, align 8
Found line to remove! store i64 %44, i64* %PC, align 8
Found line to remove! %49 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %44, %struct.Memory* %2)
Found line to remove! %50 = load i64, i64* %PC, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %51 = load i64, i64* %RBP, align 8
Found line to remove! %52 = add i64 %51, -8
Found line to remove! %53 = load i32, i32* %EAX, align 4
Found line to remove! %54 = add i64 %50, 13
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %55 = inttoptr i64 %52 to i32*
Found line to remove! store i32 %53, i32* %55, align 4
Found line to remove! %56 = load i64, i64* %RBP, align 8
Found line to remove! %57 = add i64 %56, -8
Found line to remove! %58 = load i64, i64* %PC, align 8
Found line to remove! %59 = add i64 %58, 3
Found line to remove! store i64 %59, i64* %PC, align 8
Found line to remove! %60 = inttoptr i64 %57 to i32*
Found line to remove! %61 = load i32, i32* %60, align 4
Found line to remove! %62 = zext i32 %61 to i64
Found line to remove! store i64 %62, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %63 = add i64 %58, -331
Found line to remove! %64 = add i64 %58, 10
Found line to remove! %65 = load i64, i64* %RSP, align 8
Found line to remove! %66 = add i64 %65, -8
Found line to remove! %67 = inttoptr i64 %66 to i64*
Found line to remove! store i64 %64, i64* %67, align 8
Found line to remove! store i64 %66, i64* %RSP, align 8
Found line to remove! store i64 %63, i64* %PC, align 8
Found line to remove! %68 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %49)
Found line to remove! %69 = load i64, i64* %RBP, align 8
Found line to remove! %70 = add i64 %69, -8
Found line to remove! %71 = load i64, i64* %PC, align 8
Found line to remove! %72 = add i64 %71, 3
Found line to remove! store i64 %72, i64* %PC, align 8
Found line to remove! %73 = inttoptr i64 %70 to i32*
Found line to remove! %74 = load i32, i32* %73, align 4
Found line to remove! %75 = zext i32 %74 to i64
Found line to remove! store i64 %75, i64* %RSI, align 8
Found line to remove! %76 = add i64 %69, -12
Found line to remove! %77 = load i32, i32* %EAX, align 4
Found line to remove! %78 = add i64 %71, 6
Found line to remove! store i64 %78, i64* %PC, align 8
Found line to remove! %79 = inttoptr i64 %76 to i32*
Found line to remove! store i32 %77, i32* %79, align 4
Found line to remove! %80 = load i32, i32* %ESI, align 4
Found line to remove! %81 = zext i32 %80 to i64
Found line to remove! %82 = load i64, i64* %PC, align 8
Found line to remove! store i64 %81, i64* %RAX, align 8
Found line to remove! %83 = load i64, i64* %RSP, align 8
Found line to remove! %84 = add i64 %83, 16
Found line to remove! store i64 %84, i64* %RSP, align 8
Found line to remove! %85 = icmp ugt i64 %83, -17
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %14, align 1
Found line to remove! %87 = trunc i64 %84 to i32
Found line to remove! %88 = and i32 %87, 255
Found line to remove! %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12
Found line to remove! %90 = trunc i32 %89 to i8
Found line to remove! %91 = and i8 %90, 1
Found line to remove! %92 = xor i8 %91, 1
Found line to remove! store i8 %92, i8* %21, align 1
Found line to remove! %93 = xor i64 %83, 16
Found line to remove! %94 = xor i64 %93, %84
Found line to remove! %95 = lshr i64 %94, 4
Found line to remove! %96 = trunc i64 %95 to i8
Found line to remove! %97 = and i8 %96, 1
Found line to remove! store i8 %97, i8* %27, align 1
Found line to remove! %98 = icmp eq i64 %84, 0
Found line to remove! %99 = zext i1 %98 to i8
Found line to remove! store i8 %99, i8* %30, align 1
Found line to remove! %100 = lshr i64 %84, 63
Found line to remove! %101 = trunc i64 %100 to i8
Found line to remove! store i8 %101, i8* %33, align 1
Found line to remove! %102 = lshr i64 %83, 63
Found line to remove! %103 = xor i64 %100, %102
Found line to remove! %104 = add nuw nsw i64 %103, %100
Found line to remove! %105 = icmp eq i64 %104, 2
Found line to remove! %106 = zext i1 %105 to i8
Found line to remove! store i8 %106, i8* %39, align 1
Found line to remove! %107 = add i64 %82, 7
Found line to remove! store i64 %107, i64* %PC, align 8
Found line to remove! %108 = add i64 %83, 24
Found line to remove! %109 = inttoptr i64 %84 to i64*
Found line to remove!Writing '/tmp/tmp4mwy3yyd.dot'...
Writing '/tmp/tmp4mwy3yyd.dot':Done

Reading LLVM: /tmp/tmpallvfin1-query.ll
Extracting function [main] from /tmp/tmpallvfin1-query.ll
Dot file generated!
Writing '/tmp/tmpwycw14p9.dot'...
Writing '/tmp/tmpwycw14p9.dot':Done

Reading LLVM: /tmp/tmpxjux61b_-target.ll
Extracting function [main] from /tmp/tmpxjux61b_-target.ll
Dot file generated!
 %110 = load i64, i64* %109, align 8
Found line to remove! store i64 %110, i64* %RBP, align 8
Found line to remove! store i64 %108, i64* %RSP, align 8
Found line to remove! %111 = add i64 %82, 8
Found line to remove! store i64 %111, i64* %PC, align 8
Found line to remove! %112 = inttoptr i64 %108 to i64*
Found line to remove! %113 = load i64, i64* %112, align 8
Found line to remove! store i64 %113, i64* %PC, align 8
Found line to remove! %114 = add i64 %83, 32
Found line to remove! store i64 %114, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %68
================ Starting round 2
- 0 %RSI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 1 store i64 20, i64* %RSI.i26, align 8
- 2 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd44a7d08>, {0: {0}, 1: {1}, 2: {2}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd44a7d08>, {0: {0}, 1: {1}, 2: {2}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 ret ret
================ Starting round 3
- 0 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 1 store i64 20, i64* %RSI, align 8
- 2 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd418c158>, {0: {0}, 1: {1}, 2: {2}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7efdd418c158>, {0: {0}, 1: {1}, 2: {2}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RSI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 20, i64* %RSI.i26, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %RSI.i26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 20, i64* %RSI.i26, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 20, i64* %RSI, align 8', 'ret %struct.Memory* %2'])
Keep: block_400540:
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 20, i64* %RSI, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_1/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_1/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
