Writing '/tmp/tmpure9n7kt.dot'...
Writing '/tmp/tmpure9n7kt.dot':Done

Reading LLVM: /tmp/tmp6fggr6kx-query.ll
Extracting function [main] from /tmp/tmp6fggr6kx-query.ll
Dot file generated!
Writing '/tmp/tmp82sgr9ve.dot'...
Writing '/tmp/tmp82sgr9ve.dot':Done

Reading LLVM: /tmp/tmpr1edw8c0-target.ll
Extracting function [main] from /tmp/tmpr1edw8c0-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 48 %RAX.i50 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 49 store i64 ptrtoint (%G__0x4006ab_type* @G__0x4006ab to i64), i64* %RAX.i50, align 8
- 50 %40 = add i64 %7, -12
- 51 %41 = add i64 %10, 24
- 52 store i64 %41, i64* %3, align 8
- 53 %42 = inttoptr i64 %40 to i32*
- 54 store i32 0, i32* %42, align 4
- 55 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 56 %EDI.i = bitcast %union.anon* %43 to i32*
- 57 %44 = load i64, i64* %RBP.i, align 8
- 58 %45 = add i64 %44, -8
- 59 %46 = load i32, i32* %EDI.i, align 4
- 60 %47 = load i64, i64* %3, align 8
- 61 %48 = add i64 %47, 3
- 62 store i64 %48, i64* %3, align 8
- 63 %49 = inttoptr i64 %45 to i32*
- 64 store i32 %46, i32* %49, align 4
- 65 %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 66 %50 = load i64, i64* %RBP.i, align 8
- 67 %51 = add i64 %50, -16
- 68 %52 = load i64, i64* %RSI.i43, align 8
- 69 %53 = load i64, i64* %3, align 8
- 70 %54 = add i64 %53, 4
- 71 store i64 %54, i64* %3, align 8
- 72 %55 = inttoptr i64 %51 to i64*
- 73 store i64 %52, i64* %55, align 8
- 74 %RDI.i41 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
- 75 %56 = load i64, i64* %RAX.i50, align 8
- 76 %57 = load i64, i64* %3, align 8
- 77 store i64 %56, i64* %RDI.i41, align 8
- 78 %58 = add i64 %57, 112
- 79 %59 = add i64 %57, 8
- 80 %60 = load i64, i64* %6, align 8
- 81 %61 = add i64 %60, -8
- 82 %62 = inttoptr i64 %61 to i64*
- 83 store i64 %59, i64* %62, align 8
- 84 store i64 %61, i64* %6, align 8
- 85 store i64 %58, i64* %3, align 8
- 86 %call2_400583 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %58, %struct.Memory* %2)
- 87 %63 = load i64, i64* %3, align 8
- 88 store i64 ptrtoint (%G__0x4006a4_type* @G__0x4006a4 to i64), i64* %RDI.i41, align 8
- 89 %EAX.i34 = bitcast %union.anon* %39 to i32*
- 90 %64 = load i64, i64* %RBP.i, align 8
- 91 %65 = add i64 %64, -20
- 92 %66 = load i32, i32* %EAX.i34, align 4
- 93 %67 = add i64 %63, 13
- 94 store i64 %67, i64* %3, align 8
- 95 %68 = inttoptr i64 %65 to i32*
- 96 store i32 %66, i32* %68, align 4
- 97 %69 = load i64, i64* %3, align 8
- 98 %70 = add i64 %69, 91
- 99 %71 = add i64 %69, 5
- 100 %72 = load i64, i64* %6, align 8
- 101 %73 = add i64 %72, -8
- 102 %74 = inttoptr i64 %73 to i64*
- 103 store i64 %71, i64* %74, align 8
- 104 store i64 %73, i64* %6, align 8
- 105 store i64 %70, i64* %3, align 8
- 106 %call2_400595 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %70, %struct.Memory* %call2_400583)
- 107 %75 = load i64, i64* %3, align 8
- 108 store i64 ptrtoint (%G__0x4006a8_type* @G__0x4006a8 to i64), i64* %RDI.i41, align 8
- 109 %76 = load i64, i64* %RBP.i, align 8
- 110 %77 = add i64 %76, -24
- 111 %78 = load i32, i32* %EAX.i34, align 4
- 112 %79 = add i64 %75, 13
- 113 store i64 %79, i64* %3, align 8
- 114 %80 = inttoptr i64 %77 to i32*
- 115 store i32 %78, i32* %80, align 4
- 116 %81 = load i64, i64* %3, align 8
- 117 %82 = add i64 %81, 73
- 118 %83 = add i64 %81, 5
- 119 %84 = load i64, i64* %6, align 8
- 120 %85 = add i64 %84, -8
- 121 %86 = inttoptr i64 %85 to i64*
- 122 store i64 %83, i64* %86, align 8
- 123 store i64 %85, i64* %6, align 8
- 124 store i64 %82, i64* %3, align 8
- 125 %call2_4005a7 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %82, %struct.Memory* %call2_400595)
- 126 %87 = load i64, i64* %3, align 8
- 127 store i64 ptrtoint (%G__0x4006af_type* @G__0x4006af to i64), i64* %RDI.i41, align 8
- 128 %88 = load i64, i64* %RBP.i, align 8
- 129 %89 = add i64 %88, -28
- 130 %90 = load i32, i32* %EAX.i34, align 4
- 131 %91 = add i64 %87, 13
- 132 store i64 %91, i64* %3, align 8
- 133 %92 = inttoptr i64 %89 to i32*
- 134 store i32 %90, i32* %92, align 4
- 135 %93 = load i64, i64* %RBP.i, align 8
- 136 %94 = add i64 %93, -20
- 137 %95 = load i64, i64* %3, align 8
- 138 %96 = add i64 %95, 3
- 139 store i64 %96, i64* %3, align 8
- 140 %97 = inttoptr i64 %94 to i32*
- 141 %98 = load i32, i32* %97, align 4
- 142 %99 = zext i32 %98 to i64
- 143 store i64 %99, i64* %RSI.i43, align 8
- 144 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 145 %100 = add i64 %93, -24
- 146 %101 = add i64 %95, 6
- 147 store i64 %101, i64* %3, align 8
- 148 %102 = inttoptr i64 %100 to i32*
- 149 %103 = load i32, i32* %102, align 4
- 150 %104 = zext i32 %103 to i64
- 151 store i64 %104, i64* %RDX.i, align 8
- 152 %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 153 %RCX.i16 = getelementptr inbounds %union.anon, %union.anon* %105, i64 0, i32 0
- 154 %106 = add i64 %93, -28
- 155 %107 = add i64 %95, 9
- 156 store i64 %107, i64* %3, align 8
- 157 %108 = inttoptr i64 %106 to i32*
- 158 %109 = load i32, i32* %108, align 4
- 159 %110 = zext i32 %109 to i64
- 160 store i64 %110, i64* %RCX.i16, align 8
- 161 %AL.i = bitcast %union.anon* %39 to i8*
- 162 store i8 0, i8* %AL.i, align 1
- 163 %111 = add i64 %95, -361
- 164 %112 = add i64 %95, 16
- 165 %113 = load i64, i64* %6, align 8
- 166 %114 = add i64 %113, -8
- 167 %115 = inttoptr i64 %114 to i64*
- 168 store i64 %112, i64* %115, align 8
- 169 store i64 %114, i64* %6, align 8
- 170 store i64 %111, i64* %3, align 8
- 171 %116 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005a7)
- 172 %ECX.i9 = bitcast %union.anon* %105 to i32*
- 173 %117 = load i64, i64* %3, align 8
- 174 store i64 0, i64* %RCX.i16, align 8
- 175 %118 = load i64, i64* %RBP.i, align 8
- 176 %119 = add i64 %118, -32
- 177 %120 = load i32, i32* %EAX.i34, align 4
- 178 %121 = add i64 %117, 5
- 179 store i64 %121, i64* %3, align 8
- 180 %122 = inttoptr i64 %119 to i32*
- 181 store i32 %120, i32* %122, align 4
- 182 %123 = load i32, i32* %ECX.i9, align 4
- 183 %124 = zext i32 %123 to i64
- 184 %125 = load i64, i64* %3, align 8
- 185 store i64 %124, i64* %RAX.i50, align 8
- 186 %126 = load i64, i64* %6, align 8
- 187 %127 = add i64 %126, 32
- 188 store i64 %127, i64* %6, align 8
- 189 %128 = icmp ugt i64 %126, -33
- 190 %129 = zext i1 %128 to i8
- 191 store i8 %129, i8* %14, align 1
- 192 %130 = trunc i64 %127 to i32
- 193 %131 = and i32 %130, 255
- 194 %132 = tail call i32 @llvm.ctpop.i32(i32 %131)
- 195 %133 = trunc i32 %132 to i8
- 196 %134 = and i8 %133, 1
- 197 %135 = xor i8 %134, 1
- 198 store i8 %135, i8* %21, align 1
- 199 %136 = xor i64 %127, %126
- 200 %137 = lshr i64 %136, 4
- 201 %138 = trunc i64 %137 to i8
- 202 %139 = and i8 %138, 1
- 203 store i8 %139, i8* %26, align 1
- 204 %140 = icmp eq i64 %127, 0
- 205 %141 = zext i1 %140 to i8
- 206 store i8 %141, i8* %29, align 1
- 207 %142 = lshr i64 %127, 63
- 208 %143 = trunc i64 %142 to i8
- 209 store i8 %143, i8* %32, align 1
- 210 %144 = lshr i64 %126, 63
- 211 %145 = xor i64 %142, %144
- 212 %146 = add nuw nsw i64 %145, %142
- 213 %147 = icmp eq i64 %146, 2
- 214 %148 = zext i1 %147 to i8
- 215 store i8 %148, i8* %38, align 1
- 216 %149 = add i64 %125, 7
- 217 store i64 %149, i64* %3, align 8
- 218 %150 = add i64 %126, 40
- 219 %151 = inttoptr i64 %127 to i64*
- 220 %152 = load i64, i64* %151, align 8
- 221 store i64 %152, i64* %RBP.i, align 8
- 222 store i64 %150, i64* %6, align 8
- 223 %153 = add i64 %125, 8
- 224 store i64 %153, i64* %3, align 8
- 225 %154 = inttoptr i64 %150 to i64*
- 226 %155 = load i64, i64* %154, align 8
- 227 store i64 %155, i64* %3, align 8
- 228 %156 = add i64 %126, 48
- 229 store i64 %156, i64* %6, align 8
- 230 \<badref\> = ret %struct.Memory* %116
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bc39dbf8>, {0: {0}, 1: {14}, 2: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 3: {16}, 4: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 5: {13}, 6: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 7: {66, 167, 106, 19, 87, 125}, 8: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 9: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 10: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 11: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 12: {24}, 13: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 14: {26}, 15: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 16: {28}, 17: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 18: {192, 33, 195, 40, 201, 208, 49, 30}, 19: {193, 31}, 20: {32, 130, 194, 172, 111, 92}, 21: {192, 33, 195, 40, 201, 208, 49, 30}, 22: {41, 34, 196, 202}, 23: {35, 197}, 24: {36}, 25: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 26: {211, 53, 38, 199}, 27: {200, 39}, 28: {192, 33, 195, 40, 201, 208, 49, 30}, 29: {41, 34, 196, 202}, 30: {42}, 31: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 32: {204, 44}, 33: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 34: {46}, 35: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 36: {48, 210, 52, 207}, 37: {192, 33, 195, 40, 201, 208, 49, 30}, 38: {50}, 39: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 40: {48, 210, 52, 207}, 41: {211, 53, 38, 199}, 42: {212, 54}, 43: {213, 55}, 44: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 45: {57}, 46: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 47: {1}, 48: {8, 9, 12}, 49: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 50: {60}, 51: {61}, 52: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 53: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 54: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 55: {6}, 56: {2, 3, 5, 7}, 57: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 58: {66, 167, 106, 19, 87, 125}, 59: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 60: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 61: {69, 143}, 62: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 63: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 64: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 65: {11}, 66: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 67: {74}, 68: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 69: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 70: {77}, 71: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 72: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 73: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 74: {8, 9, 12}, 75: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 76: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 77: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 78: {84}, 79: {85, 223}, 80: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 81: {66, 167, 106, 19, 87, 125}, 82: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 83: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 84: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 85: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 86: {32, 130, 194, 172, 111, 92}, 87: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 88: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 89: {2, 3, 5, 7}, 90: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 91: {96, 141}, 92: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 93: {136, 98, 117}, 94: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 95: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 96: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 97: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 98: {103}, 99: {104, 178, 123}, 100: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 101: {66, 167, 106, 19, 87, 125}, 102: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 103: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 104: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 105: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 106: {32, 130, 194, 172, 111, 92}, 107: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 108: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 109: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 110: {115, 149}, 111: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 112: {136, 98, 117}, 113: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 114: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 115: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 116: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 117: {122}, 118: {104, 178, 123}, 119: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 120: {66, 167, 106, 19, 87, 125}, 121: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 122: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 123: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 124: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 125: {32, 130, 194, 172, 111, 92}, 126: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 127: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 128: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 129: {156, 134}, 130: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 131: {136, 98, 117}, 132: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 133: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 134: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 135: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 136: {96, 141}, 137: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 138: {69, 143}, 139: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 140: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 141: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 142: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 143: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 144: {10}, 145: {115, 149}, 146: {150}, 147: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 148: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 149: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 150: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 151: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 152: {4}, 153: {8, 9, 12}, 154: {156, 134}, 155: {157}, 156: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 157: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 158: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 159: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 160: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 161: {2, 3, 5, 7}, 162: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 163: {164}, 164: {165}, 165: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 166: {66, 167, 106, 19, 87, 125}, 167: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 168: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 169: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 170: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 171: {32, 130, 194, 172, 111, 92}, 172: {2, 3, 5, 7}, 173: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 174: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 175: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 176: {176}, 177: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 178: {104, 178, 123}, 179: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 180: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 181: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 182: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 183: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 184: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 185: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 186: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 187: {187}, 188: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 189: {189}, 190: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 191: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 192: {192, 33, 195, 40, 201, 208, 49, 30}, 193: {193, 31}, 194: {32, 130, 194, 172, 111, 92}, 195: {192, 33, 195, 40, 201, 208, 49, 30}, 196: {41, 34, 196, 202}, 197: {35, 197}, 198: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 199: {211, 53, 38, 199}, 200: {200, 39}, 201: {192, 33, 195, 40, 201, 208, 49, 30}, 202: {41, 34, 196, 202}, 203: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 204: {204, 44}, 205: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 206: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 207: {48, 210, 52, 207}, 208: {192, 33, 195, 40, 201, 208, 49, 30}, 209: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 210: {48, 210, 52, 207}, 211: {211, 53, 38, 199}, 212: {212, 54}, 213: {213, 55}, 214: {161, 45, 205, 147, 214, 183, 56, 154, 27, 190}, 215: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 216: {216}, 217: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 218: {218}, 219: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 220: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 221: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 222: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 223: {85, 223}, 224: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 225: {159, 225, 100, 71, 168, 138, 107, 79, 145, 20, 180, 119, 88, 219, 152, 126, 63}, 226: {131, 133, 135, 140, 142, 15, 18, 146, 22, 153, 160, 166, 173, 175, 177, 182, 184, 186, 65, 67, 68, 73, 75, 76, 81, 82, 86, 220, 93, 95, 97, 226, 102, 105, 112, 114, 116, 121, 124}, 227: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 228: {228}, 229: {128, 129, 132, 137, 139, 144, 17, 148, 21, 23, 151, 25, 155, 29, 158, 162, 163, 37, 169, 170, 43, 171, 174, 47, 51, 179, 181, 185, 58, 59, 188, 62, 191, 64, 70, 198, 72, 203, 78, 206, 80, 209, 83, 215, 89, 90, 91, 217, 221, 94, 222, 224, 99, 227, 101, 229, 108, 109, 110, 113, 118, 120, 127}, 230: {230}})
Equivalent! frozenset({68, 142}) {137, 60}
Equivalent! frozenset({69, 143}) {138, 61}
Equivalent! frozenset({144, 70}) {139, 62}
Equivalent! frozenset({105, 124, 166, 86}) {80, 100, 165, 119}
CONFLICT {frozenset({128, 170, 109, 90})} {frozenset({107, 126}), frozenset({128, 170, 109, 90})}
NOT Equivalent! frozenset({167, 106, 125, 87}) {120, 81, 101, 166}
Equivalent! frozenset({128, 170, 109, 90}) {104, 169, 123, 84}
Equivalent! frozenset({112, 131, 93}) {107, 126, 87}
Equivalent! frozenset({136, 98, 117}) {112, 131, 93}
Equivalent! frozenset({137, 99, 118}) {113, 132, 94}
Equivalent! frozenset({121, 102}) {97, 116}
Equivalent! frozenset({104, 123}) {99, 118}
Equivalent! frozenset({107, 126}) {121, 102}
Equivalent! frozenset({108, 127}) {122, 103}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bc39dbf8>, {0: {0}, 1: {14}, 2: {15}, 3: {16}, 4: {17}, 5: {13}, 6: {18}, 7: {19}, 8: {20}, 9: {21}, 10: {22}, 11: {23}, 12: {24}, 13: {25}, 14: {26}, 15: {27}, 16: {28}, 17: {29}, 18: {30}, 19: {31}, 20: {32}, 21: {33}, 22: {34}, 23: {35}, 24: {36}, 25: {37}, 26: {38}, 27: {39}, 28: {40}, 29: {41}, 30: {42}, 31: {43}, 32: {44}, 33: {45}, 34: {46}, 35: {47}, 36: {48}, 37: {49}, 38: {50}, 39: {51}, 40: {52}, 41: {53}, 42: {54}, 43: {55}, 44: {56}, 45: {57}, 46: {58}, 47: {1}, 48: {8}, 49: {185, 59}, 50: {60}, 51: {61}, 52: {62}, 53: {63}, 54: {64}, 55: {6}, 56: {7}, 57: {65}, 58: {66}, 59: {67}, 60: {142}, 61: {143}, 62: {70}, 63: {71}, 64: {72}, 65: {11}, 66: {73}, 67: {74}, 68: {75}, 69: {76}, 70: {77}, 71: {78}, 72: {79}, 73: {80}, 74: {12}, 75: {81}, 76: {82}, 77: {83}, 78: {84}, 79: {85}, 80: {105}, 81: {167, 106, 125, 87}, 82: {88}, 83: {89}, 84: {90}, 85: {91}, 86: {92}, 87: {93}, 88: {113, 83, 132, 94}, 89: {3}, 90: {95}, 91: {96}, 92: {97}, 93: {117}, 94: {118}, 95: {100}, 96: {101}, 97: {121}, 98: {103}, 99: {104}, 100: {124}, 101: {167, 106, 125, 87}, 102: {126}, 103: {127}, 104: {128}, 105: {110}, 106: {111}, 107: {112}, 108: {113, 83, 132, 94}, 109: {114}, 110: {115}, 111: {116}, 112: {136}, 113: {137}, 114: {119}, 115: {120}, 116: {102}, 117: {122}, 118: {123}, 119: {86}, 120: {167, 106, 125, 87}, 121: {107}, 122: {108}, 123: {109}, 124: {129}, 125: {130}, 126: {131}, 127: {113, 83, 132, 94}, 128: {133}, 129: {134}, 130: {135}, 131: {98}, 132: {99}, 133: {138}, 134: {139}, 135: {140}, 136: {141}, 137: {68}, 138: {69}, 139: {144}, 140: {145}, 141: {146}, 142: {147}, 143: {148}, 144: {10}, 145: {149}, 146: {150}, 147: {151}, 148: {152}, 149: {153}, 150: {154}, 151: {155}, 152: {4}, 153: {9}, 154: {156}, 155: {157}, 156: {158}, 157: {159}, 158: {160}, 159: {161}, 160: {162}, 161: {2}, 162: {163}, 163: {164}, 164: {165}, 165: {166}, 166: {167, 106, 125, 87}, 167: {168}, 168: {169}, 169: {170}, 170: {171}, 171: {172}, 172: {5}, 173: {173}, 174: {162, 174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}, 215: {215}, 216: {216}, 217: {217}, 218: {218}, 219: {219}, 220: {220}, 221: {221}, 222: {222}, 223: {223}, 224: {224}, 225: {225}, 226: {226}, 227: {227}, 228: {228}, 229: {229}, 230: {230}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
MORE 49 POT: 2
EXACT 50 add add
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 bitcast bitcast
EXACT 57 load load
EXACT 58 add add
EXACT 59 load load
EXACT 60 load load
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 getelementptr getelementptr
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 store store
EXACT 74 getelementptr getelementptr
EXACT 75 load load
EXACT 76 load load
EXACT 77 store store
EXACT 78 add add
EXACT 79 add add
EXACT 80 load load
MORE 81 POT: 4
EXACT 82 inttoptr inttoptr
EXACT 83 store store
EXACT 84 store store
EXACT 85 store store
EXACT 86 tail tail
EXACT 87 load load
MORE 88 POT: 4
EXACT 89 bitcast bitcast
EXACT 90 load load
EXACT 91 add add
EXACT 92 load load
EXACT 93 add add
EXACT 94 store store
EXACT 95 inttoptr inttoptr
EXACT 96 store store
EXACT 97 load load
EXACT 98 add add
EXACT 99 add add
EXACT 100 load load
MORE 101 POT: 4
EXACT 102 inttoptr inttoptr
EXACT 103 store store
EXACT 104 store store
EXACT 105 store store
EXACT 106 tail tail
EXACT 107 load load
MORE 108 POT: 4
EXACT 109 load load
EXACT 110 add add
EXACT 111 load load
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 store store
EXACT 116 load load
EXACT 117 add add
EXACT 118 add add
EXACT 119 load load
MORE 120 POT: 4
EXACT 121 inttoptr inttoptr
EXACT 122 store store
EXACT 123 store store
EXACT 124 store store
EXACT 125 tail tail
EXACT 126 load load
MORE 127 POT: 4
EXACT 128 load load
EXACT 129 add add
EXACT 130 load load
EXACT 131 add add
EXACT 132 store store
EXACT 133 inttoptr inttoptr
EXACT 134 store store
EXACT 135 load load
EXACT 136 add add
EXACT 137 load load
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 load load
EXACT 142 zext zext
EXACT 143 store store
EXACT 144 getelementptr getelementptr
EXACT 145 add add
EXACT 146 add add
EXACT 147 store store
EXACT 148 inttoptr inttoptr
EXACT 149 load load
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 getelementptr getelementptr
EXACT 153 getelementptr getelementptr
EXACT 154 add add
EXACT 155 add add
EXACT 156 store store
EXACT 157 inttoptr inttoptr
EXACT 158 load load
EXACT 159 zext zext
EXACT 160 store store
EXACT 161 bitcast bitcast
EXACT 162 store store
EXACT 163 add add
EXACT 164 add add
EXACT 165 load load
MORE 166 POT: 4
EXACT 167 inttoptr inttoptr
EXACT 168 store store
EXACT 169 store store
EXACT 170 store store
EXACT 171 tail tail
EXACT 172 bitcast bitcast
EXACT 173 load load
MORE 174 POT: 2
EXACT 175 load load
EXACT 176 add add
EXACT 177 load load
EXACT 178 add add
EXACT 179 store store
EXACT 180 inttoptr inttoptr
EXACT 181 store store
EXACT 182 load load
EXACT 183 zext zext
EXACT 184 load load
EXACT 185 store store
EXACT 186 load load
EXACT 187 add add
EXACT 188 store store
EXACT 189 icmp icmp
EXACT 190 zext zext
EXACT 191 store store
EXACT 192 trunc trunc
EXACT 193 and and
EXACT 194 tail tail
EXACT 195 trunc trunc
EXACT 196 and and
EXACT 197 xor xor
EXACT 198 store store
EXACT 199 xor xor
EXACT 200 lshr lshr
EXACT 201 trunc trunc
EXACT 202 and and
EXACT 203 store store
EXACT 204 icmp icmp
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 lshr lshr
EXACT 208 trunc trunc
EXACT 209 store store
EXACT 210 lshr lshr
EXACT 211 xor xor
EXACT 212 add add
EXACT 213 icmp icmp
EXACT 214 zext zext
EXACT 215 store store
EXACT 216 add add
EXACT 217 store store
EXACT 218 add add
EXACT 219 inttoptr inttoptr
EXACT 220 load load
EXACT 221 store store
EXACT 222 store store
EXACT 223 add add
EXACT 224 store store
EXACT 225 inttoptr inttoptr
EXACT 226 load load
EXACT 227 store store
EXACT 228 add add
EXACT 229 store store
EXACT 230 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 7 %EDI = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 11 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 12 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 13 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 14 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 15 %6 = load i64, i64* %RBP, align 8
- 16 %7 = add i64 %1, 1
- 17 store i64 %7, i64* %PC, align 8
- 18 %8 = load i64, i64* %RSP, align 8
- 19 %9 = add i64 %8, -8
- 20 %10 = inttoptr i64 %9 to i64*
- 21 store i64 %6, i64* %10, align 8
- 22 %11 = load i64, i64* %PC, align 8
- 23 store i64 %9, i64* %RBP, align 8
- 24 %12 = add i64 %8, -40
- 25 store i64 %12, i64* %RSP, align 8
- 26 %13 = icmp ult i64 %9, 32
- 27 %14 = zext i1 %13 to i8
- 28 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 29 store i8 %14, i8* %15, align 1
- 30 %16 = trunc i64 %12 to i32
- 31 %17 = and i32 %16, 255
- 32 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 33 %19 = trunc i32 %18 to i8
- 34 %20 = and i8 %19, 1
- 35 %21 = xor i8 %20, 1
- 36 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 37 store i8 %21, i8* %22, align 1
- 38 %23 = xor i64 %9, %12
- 39 %24 = lshr i64 %23, 4
- 40 %25 = trunc i64 %24 to i8
- 41 %26 = and i8 %25, 1
- 42 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 43 store i8 %26, i8* %27, align 1
- 44 %28 = icmp eq i64 %12, 0
- 45 %29 = zext i1 %28 to i8
- 46 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 47 store i8 %29, i8* %30, align 1
- 48 %31 = lshr i64 %12, 63
- 49 %32 = trunc i64 %31 to i8
- 50 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 51 store i8 %32, i8* %33, align 1
- 52 %34 = lshr i64 %9, 63
- 53 %35 = xor i64 %31, %34
- 54 %36 = add nuw nsw i64 %35, %34
- 55 %37 = icmp eq i64 %36, 2
- 56 %38 = zext i1 %37 to i8
- 57 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 58 store i8 %38, i8* %39, align 1
- 59 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 11), i64* %RAX, align 8
- 60 %40 = add i64 %8, -12
- 61 %41 = add i64 %11, 24
- 62 store i64 %41, i64* %PC, align 8
- 63 %42 = inttoptr i64 %40 to i32*
- 64 store i32 0, i32* %42, align 4
- 65 %43 = load i64, i64* %RBP, align 8
- 66 %44 = add i64 %43, -8
- 67 %45 = load i32, i32* %EDI, align 4
- 68 %46 = load i64, i64* %PC, align 8
- 69 %47 = add i64 %46, 3
- 70 store i64 %47, i64* %PC, align 8
- 71 %48 = inttoptr i64 %44 to i32*
- 72 store i32 %45, i32* %48, align 4
- 73 %49 = load i64, i64* %RBP, align 8
- 74 %50 = add i64 %49, -16
- 75 %51 = load i64, i64* %RSI, align 8
- 76 %52 = load i64, i64* %PC, align 8
- 77 %53 = add i64 %52, 4
- 78 store i64 %53, i64* %PC, align 8
- 79 %54 = inttoptr i64 %50 to i64*
- 80 store i64 %51, i64* %54, align 8
- 81 %55 = load i64, i64* %RAX, align 8
- 82 %56 = load i64, i64* %PC, align 8
- 83 store i64 %55, i64* %RDI, align 8
- 84 %57 = add i64 %56, 112
- 85 %58 = add i64 %56, 8
- 86 %59 = load i64, i64* %RSP, align 8
- 87 %60 = add i64 %59, -8
- 88 %61 = inttoptr i64 %60 to i64*
- 89 store i64 %58, i64* %61, align 8
- 90 store i64 %60, i64* %RSP, align 8
- 91 store i64 %57, i64* %PC, align 8
- 92 %62 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
- 93 %63 = load i64, i64* %PC, align 8
- 94 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 4), i64* %RDI, align 8
- 95 %64 = load i64, i64* %RBP, align 8
- 96 %65 = add i64 %64, -20
- 97 %66 = load i32, i32* %EAX, align 4
- 98 %67 = add i64 %63, 13
- 99 store i64 %67, i64* %PC, align 8
- 100 %68 = inttoptr i64 %65 to i32*
- 101 store i32 %66, i32* %68, align 4
- 102 %69 = load i64, i64* %PC, align 8
- 103 %70 = add i64 %69, 91
- 104 %71 = add i64 %69, 5
- 105 %72 = load i64, i64* %RSP, align 8
- 106 %73 = add i64 %72, -8
- 107 %74 = inttoptr i64 %73 to i64*
- 108 store i64 %71, i64* %74, align 8
- 109 store i64 %73, i64* %RSP, align 8
- 110 store i64 %70, i64* %PC, align 8
- 111 %75 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %62)
- 112 %76 = load i64, i64* %PC, align 8
- 113 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 8), i64* %RDI, align 8
- 114 %77 = load i64, i64* %RBP, align 8
- 115 %78 = add i64 %77, -24
- 116 %79 = load i32, i32* %EAX, align 4
- 117 %80 = add i64 %76, 13
- 118 store i64 %80, i64* %PC, align 8
- 119 %81 = inttoptr i64 %78 to i32*
- 120 store i32 %79, i32* %81, align 4
- 121 %82 = load i64, i64* %PC, align 8
- 122 %83 = add i64 %82, 73
- 123 %84 = add i64 %82, 5
- 124 %85 = load i64, i64* %RSP, align 8
- 125 %86 = add i64 %85, -8
- 126 %87 = inttoptr i64 %86 to i64*
- 127 store i64 %84, i64* %87, align 8
- 128 store i64 %86, i64* %RSP, align 8
- 129 store i64 %83, i64* %PC, align 8
- 130 %88 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %83, %struct.Memory* %75)
- 131 %89 = load i64, i64* %PC, align 8
- 132 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 15), i64* %RDI, align 8
- 133 %90 = load i64, i64* %RBP, align 8
- 134 %91 = add i64 %90, -28
- 135 %92 = load i32, i32* %EAX, align 4
- 136 %93 = add i64 %89, 13
- 137 store i64 %93, i64* %PC, align 8
- 138 %94 = inttoptr i64 %91 to i32*
- 139 store i32 %92, i32* %94, align 4
- 140 %95 = load i64, i64* %RBP, align 8
- 141 %96 = add i64 %95, -20
- 142 %97 = load i64, i64* %PC, align 8
- 143 %98 = add i64 %97, 3
- 144 store i64 %98, i64* %PC, align 8
- 145 %99 = inttoptr i64 %96 to i32*
- 146 %100 = load i32, i32* %99, align 4
- 147 %101 = zext i32 %100 to i64
- 148 store i64 %101, i64* %RSI, align 8
- 149 %102 = add i64 %95, -24
- 150 %103 = add i64 %97, 6
- 151 store i64 %103, i64* %PC, align 8
- 152 %104 = inttoptr i64 %102 to i32*
- 153 %105 = load i32, i32* %104, align 4
- 154 %106 = zext i32 %105 to i64
- 155 store i64 %106, i64* %RDX, align 8
- 156 %107 = add i64 %95, -28
- 157 %108 = add i64 %97, 9
- 158 store i64 %108, i64* %PC, align 8
- 159 %109 = inttoptr i64 %107 to i32*
- 160 %110 = load i32, i32* %109, align 4
- 161 %111 = zext i32 %110 to i64
- 162 store i64 %111, i64* %RCX, align 8
- 163 store i8 0, i8* %AL, align 1
- 164 %112 = add i64 %97, -361
- 165 %113 = add i64 %97, 16
- 166 %114 = load i64, i64* %RSP, align 8
- 167 %115 = add i64 %114, -8
- 168 %116 = inttoptr i64 %115 to i64*
- 169 store i64 %113, i64* %116, align 8
- 170 store i64 %115, i64* %RSP, align 8
- 171 store i64 %112, i64* %PC, align 8
- 172 %117 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %88)
- 173 %118 = load i64, i64* %PC, align 8
- 174 store i64 0, i64* %RCX, align 8
- 175 %119 = load i64, i64* %RBP, align 8
- 176 %120 = add i64 %119, -32
- 177 %121 = load i32, i32* %EAX, align 4
- 178 %122 = add i64 %118, 5
- 179 store i64 %122, i64* %PC, align 8
- 180 %123 = inttoptr i64 %120 to i32*
- 181 store i32 %121, i32* %123, align 4
- 182 %124 = load i32, i32* %ECX, align 4
- 183 %125 = zext i32 %124 to i64
- 184 %126 = load i64, i64* %PC, align 8
- 185 store i64 %125, i64* %RAX, align 8
- 186 %127 = load i64, i64* %RSP, align 8
- 187 %128 = add i64 %127, 32
- 188 store i64 %128, i64* %RSP, align 8
- 189 %129 = icmp ugt i64 %127, -33
- 190 %130 = zext i1 %129 to i8
- 191 store i8 %130, i8* %15, align 1
- 192 %131 = trunc i64 %128 to i32
- 193 %132 = and i32 %131, 255
- 194 %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #12
- 195 %134 = trunc i32 %133 to i8
- 196 %135 = and i8 %134, 1
- 197 %136 = xor i8 %135, 1
- 198 store i8 %136, i8* %22, align 1
- 199 %137 = xor i64 %128, %127
- 200 %138 = lshr i64 %137, 4
- 201 %139 = trunc i64 %138 to i8
- 202 %140 = and i8 %139, 1
- 203 store i8 %140, i8* %27, align 1
- 204 %141 = icmp eq i64 %128, 0
- 205 %142 = zext i1 %141 to i8
- 206 store i8 %142, i8* %30, align 1
- 207 %143 = lshr i64 %128, 63
- 208 %144 = trunc i64 %143 to i8
- 209 store i8 %144, i8* %33, align 1
- 210 %145 = lshr i64 %127, 63
- 211 %146 = xor i64 %143, %145
- 212 %147 = add nuw nsw i64 %146, %143
- 213 %148 = icmp eq i64 %147, 2
- 214 %149 = zext i1 %148 to i8
- 215 store i8 %149, i8* %39, align 1
- 216 %150 = add i64 %126, 7
- 217 store i64 %150, i64* %PC, align 8
- 218 %151 = add i64 %127, 40
- 219 %152 = inttoptr i64 %128 to i64*
- 220 %153 = load i64, i64* %152, align 8
- 221 store i64 %153, i64* %RBP, align 8
- 222 store i64 %151, i64* %RSP, align 8
- 223 %154 = add i64 %126, 8
- 224 store i64 %154, i64* %PC, align 8
- 225 %155 = inttoptr i64 %151 to i64*
- 226 %156 = load i64, i64* %155, align 8
- 227 store i64 %156, i64* %PC, align 8
- 228 %157 = add i64 %127, 48
- 229 store i64 %157, i64* %RSP, align 8
- 230 \<badref\> = ret %struct.Memory* %117
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bc39da60>, {0: {0}, 1: {47}, 2: {56, 89, 161, 172}, 3: {56, 89, 161, 172}, 4: {152}, 5: {56, 89, 161, 172}, 6: {55}, 7: {56, 89, 161, 172}, 8: {48, 153, 74}, 9: {48, 153, 74}, 10: {144}, 11: {65}, 12: {48, 153, 74}, 13: {5}, 14: {1}, 15: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 16: {3}, 17: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 18: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 19: {101, 166, 7, 81, 120, 58}, 20: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 21: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 22: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 23: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 24: {12}, 25: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 26: {14}, 27: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 28: {16}, 29: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 30: {192, 195, 37, 201, 208, 18, 21, 28}, 31: {193, 19}, 32: {194, 106, 171, 20, 86, 125}, 33: {192, 195, 37, 201, 208, 18, 21, 28}, 34: {202, 196, 29, 22}, 35: {197, 23}, 36: {24}, 37: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 38: {41, 26, 211, 199}, 39: {200, 27}, 40: {192, 195, 37, 201, 208, 18, 21, 28}, 41: {202, 196, 29, 22}, 42: {30}, 43: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 44: {32, 204}, 45: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 46: {34}, 47: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 48: {40, 210, 36, 207}, 49: {192, 195, 37, 201, 208, 18, 21, 28}, 50: {38}, 51: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 52: {40, 210, 36, 207}, 53: {41, 26, 211, 199}, 54: {42, 212}, 55: {43, 213}, 56: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 57: {45}, 58: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 59: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 60: {50}, 61: {51}, 62: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 63: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 64: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 65: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 66: {101, 166, 7, 81, 120, 58}, 67: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 68: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 69: {138, 61}, 70: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 71: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 72: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 73: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 74: {67}, 75: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 76: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 77: {70}, 78: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 79: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 80: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 81: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 82: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 83: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 84: {78}, 85: {223, 79}, 86: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 87: {101, 166, 7, 81, 120, 58}, 88: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 89: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 90: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 91: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 92: {194, 106, 171, 20, 86, 125}, 93: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 94: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 95: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 96: {136, 91}, 97: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 98: {112, 131, 93}, 99: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 100: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 101: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 102: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 103: {98}, 104: {178, 99, 118}, 105: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 106: {101, 166, 7, 81, 120, 58}, 107: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 108: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 109: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 110: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 111: {194, 106, 171, 20, 86, 125}, 112: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 113: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 114: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 115: {145, 110}, 116: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 117: {112, 131, 93}, 118: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 119: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 120: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 121: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 122: {117}, 123: {178, 99, 118}, 124: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 125: {101, 166, 7, 81, 120, 58}, 126: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 127: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 128: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 129: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 130: {194, 106, 171, 20, 86, 125}, 131: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 132: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 133: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 134: {129, 154}, 135: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 136: {112, 131, 93}, 137: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 138: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 139: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 140: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 141: {136, 91}, 142: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 143: {138, 61}, 144: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 145: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 146: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 147: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 148: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 149: {145, 110}, 150: {146}, 151: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 152: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 153: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 154: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 155: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 156: {129, 154}, 157: {155}, 158: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 159: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 160: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 161: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 162: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 163: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 164: {163}, 165: {164}, 166: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 167: {101, 166, 7, 81, 120, 58}, 168: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 169: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 170: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 171: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 172: {194, 106, 171, 20, 86, 125}, 173: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 174: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 175: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 176: {176}, 177: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 178: {178, 99, 118}, 179: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 180: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 181: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 182: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 183: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 184: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 185: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 186: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 187: {187}, 188: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 189: {189}, 190: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 191: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 192: {192, 195, 37, 201, 208, 18, 21, 28}, 193: {193, 19}, 194: {194, 106, 171, 20, 86, 125}, 195: {192, 195, 37, 201, 208, 18, 21, 28}, 196: {202, 196, 29, 22}, 197: {197, 23}, 198: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 199: {41, 26, 211, 199}, 200: {200, 27}, 201: {192, 195, 37, 201, 208, 18, 21, 28}, 202: {202, 196, 29, 22}, 203: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 204: {32, 204}, 205: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 206: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 207: {40, 210, 36, 207}, 208: {192, 195, 37, 201, 208, 18, 21, 28}, 209: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 210: {40, 210, 36, 207}, 211: {41, 26, 211, 199}, 212: {42, 212}, 213: {43, 213}, 214: {33, 44, 205, 142, 15, 150, 183, 214, 190, 159}, 215: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 216: {216}, 217: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 218: {218}, 219: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 220: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 221: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 222: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 223: {223, 79}, 224: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 225: {225, 133, 102, 167, 8, 72, 140, 82, 114, 148, 53, 180, 121, 219, 157, 95, 63}, 226: {128, 2, 130, 6, 135, 137, 10, 141, 149, 158, 165, 173, 175, 177, 182, 184, 57, 186, 59, 60, 66, 68, 69, 75, 76, 80, 87, 90, 92, 220, 97, 226, 100, 107, 109, 111, 116, 119, 126}, 227: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 228: {228}, 229: {4, 132, 134, 9, 11, 139, 13, 143, 17, 147, 151, 25, 156, 31, 160, 162, 35, 39, 168, 169, 170, 46, 174, 49, 179, 52, 181, 54, 185, 188, 62, 191, 64, 198, 71, 73, 203, 77, 206, 209, 83, 84, 85, 215, 88, 217, 221, 94, 222, 96, 224, 227, 229, 103, 104, 105, 108, 113, 115, 122, 123, 124, 127}, 230: {230}})
Equivalent! frozenset({137, 60}) {68, 142}
Equivalent! frozenset({138, 61}) {69, 143}
Equivalent! frozenset({139, 62}) {144, 70}
Equivalent! frozenset({80, 100, 165, 119}) {105, 124, 166, 86}
CONFLICT {frozenset({104, 169, 123, 84}), frozenset({121, 102})} {frozenset({104, 169, 123, 84})}
NOT Equivalent! frozenset({120, 81, 101, 166}) {167, 106, 125, 87}
Equivalent! frozenset({104, 169, 123, 84}) {128, 170, 90, 109}
Equivalent! frozenset({107, 126, 87}) {112, 131, 93}
Equivalent! frozenset({112, 131, 93}) {136, 98, 117}
Equivalent! frozenset({113, 132, 94}) {137, 99, 118}
Equivalent! frozenset({97, 116}) {121, 102}
Equivalent! frozenset({99, 118}) {104, 123}
Equivalent! frozenset({121, 102}) {107, 126}
Equivalent! frozenset({122, 103}) {108, 127}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bc39da60>, {0: {0}, 1: {47}, 2: {161}, 3: {89}, 4: {152}, 5: {172}, 6: {55}, 7: {56}, 8: {48}, 9: {153}, 10: {144}, 11: {65}, 12: {74}, 13: {5}, 14: {1}, 15: {2}, 16: {3}, 17: {4}, 18: {6}, 19: {7}, 20: {8}, 21: {9}, 22: {10}, 23: {11}, 24: {12}, 25: {13}, 26: {14}, 27: {15}, 28: {16}, 29: {17}, 30: {18}, 31: {19}, 32: {20}, 33: {21}, 34: {22}, 35: {23}, 36: {24}, 37: {25}, 38: {26}, 39: {27}, 40: {28}, 41: {29}, 42: {30}, 43: {31}, 44: {32}, 45: {33}, 46: {34}, 47: {35}, 48: {36}, 49: {37}, 50: {38}, 51: {39}, 52: {40}, 53: {41}, 54: {42}, 55: {43}, 56: {44}, 57: {45}, 58: {46}, 59: {185, 49}, 60: {50}, 61: {51}, 62: {52}, 63: {53}, 64: {54}, 65: {57}, 66: {58}, 67: {59}, 68: {137}, 69: {138}, 70: {62}, 71: {63}, 72: {64}, 73: {66}, 74: {67}, 75: {68}, 76: {69}, 77: {70}, 78: {71}, 79: {72}, 80: {73}, 81: {75}, 82: {76}, 83: {77}, 84: {78}, 85: {79}, 86: {119}, 87: {120, 81, 101, 166}, 88: {82}, 89: {83}, 90: {123}, 91: {85}, 92: {86}, 93: {87}, 94: {88, 108, 77, 127}, 95: {90}, 96: {91}, 97: {92}, 98: {131}, 99: {132}, 100: {95}, 101: {96}, 102: {116}, 103: {98}, 104: {99}, 105: {80}, 106: {120, 81, 101, 166}, 107: {121}, 108: {122}, 109: {84}, 110: {105}, 111: {106}, 112: {107}, 113: {88, 108, 77, 127}, 114: {109}, 115: {110}, 116: {111}, 117: {93}, 118: {94}, 119: {114}, 120: {115}, 121: {97}, 122: {117}, 123: {118}, 124: {100}, 125: {120, 81, 101, 166}, 126: {102}, 127: {103}, 128: {104}, 129: {124}, 130: {125}, 131: {126}, 132: {88, 108, 77, 127}, 133: {128}, 134: {129}, 135: {130}, 136: {112}, 137: {113}, 138: {133}, 139: {134}, 140: {135}, 141: {136}, 142: {60}, 143: {61}, 144: {139}, 145: {140}, 146: {141}, 147: {142}, 148: {143}, 149: {145}, 150: {146}, 151: {147}, 152: {148}, 153: {149}, 154: {150}, 155: {151}, 156: {154}, 157: {155}, 158: {156}, 159: {157}, 160: {158}, 161: {159}, 162: {160}, 163: {162}, 164: {163}, 165: {164}, 166: {165}, 167: {120, 81, 101, 166}, 168: {167}, 169: {168}, 170: {169}, 171: {170}, 172: {171}, 173: {173}, 174: {160, 174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}, 215: {215}, 216: {216}, 217: {217}, 218: {218}, 219: {219}, 220: {220}, 221: {221}, 222: {222}, 223: {223}, 224: {224}, 225: {225}, 226: {226}, 227: {227}, 228: {228}, 229: {229}, 230: {230}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 getelementptr getelementptr
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 load load
EXACT 19 add add
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 load load
EXACT 23 store store
EXACT 24 add add
EXACT 25 store store
EXACT 26 icmp icmp
EXACT 27 zext zext
EXACT 28 getelementptr getelementptr
EXACT 29 store store
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 tail tail
EXACT 33 trunc trunc
EXACT 34 and and
EXACT 35 xor xor
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 xor xor
EXACT 39 lshr lshr
EXACT 40 trunc trunc
EXACT 41 and and
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 trunc trunc
EXACT 50 getelementptr getelementptr
EXACT 51 store store
EXACT 52 lshr lshr
EXACT 53 xor xor
EXACT 54 add add
EXACT 55 icmp icmp
EXACT 56 zext zext
EXACT 57 getelementptr getelementptr
EXACT 58 store store
MORE 59 POT: 2
EXACT 60 add add
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 load load
EXACT 66 add add
EXACT 67 load load
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 inttoptr inttoptr
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 load load
EXACT 76 load load
EXACT 77 add add
EXACT 78 store store
EXACT 79 inttoptr inttoptr
EXACT 80 store store
EXACT 81 load load
EXACT 82 load load
EXACT 83 store store
EXACT 84 add add
EXACT 85 add add
EXACT 86 load load
MORE 87 POT: 4
EXACT 88 inttoptr inttoptr
EXACT 89 store store
EXACT 90 store store
EXACT 91 store store
EXACT 92 tail tail
EXACT 93 load load
MORE 94 POT: 4
EXACT 95 load load
EXACT 96 add add
EXACT 97 load load
EXACT 98 add add
EXACT 99 store store
EXACT 100 inttoptr inttoptr
EXACT 101 store store
EXACT 102 load load
EXACT 103 add add
EXACT 104 add add
EXACT 105 load load
MORE 106 POT: 4
EXACT 107 inttoptr inttoptr
EXACT 108 store store
EXACT 109 store store
EXACT 110 store store
EXACT 111 tail tail
EXACT 112 load load
MORE 113 POT: 4
EXACT 114 load load
EXACT 115 add add
EXACT 116 load load
EXACT 117 add add
EXACT 118 store store
EXACT 119 inttoptr inttoptr
EXACT 120 store store
EXACT 121 load load
EXACT 122 add add
EXACT 123 add add
EXACT 124 load load
MORE 125 POT: 4
EXACT 126 inttoptr inttoptr
EXACT 127 store store
EXACT 128 store store
EXACT 129 store store
EXACT 130 tail tail
EXACT 131 load load
MORE 132 POT: 4
EXACT 133 load load
EXACT 134 add add
EXACT 135 load load
EXACT 136 add add
EXACT 137 store store
EXACT 138 inttoptr inttoptr
EXACT 139 store store
EXACT 140 load load
EXACT 141 add add
EXACT 142 load load
EXACT 143 add add
EXACT 144 store store
EXACT 145 inttoptr inttoptr
EXACT 146 load load
EXACT 147 zext zext
EXACT 148 store store
EXACT 149 add add
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 load load
EXACT 154 zext zext
EXACT 155 store store
EXACT 156 add add
EXACT 157 add add
EXACT 158 store store
EXACT 159 inttoptr inttoptr
EXACT 160 load load
EXACT 161 zext zext
EXACT 162 store store
EXACT 163 store store
EXACT 164 add add
EXACT 165 add add
EXACT 166 load load
MORE 167 POT: 4
EXACT 168 inttoptr inttoptr
EXACT 169 store store
EXACT 170 store store
EXACT 171 store store
EXACT 172 tail tail
EXACT 173 load load
MORE 174 POT: 2
EXACT 175 load load
EXACT 176 add add
EXACT 177 load load
EXACT 178 add add
EXACT 179 store store
EXACT 180 inttoptr inttoptr
EXACT 181 store store
EXACT 182 load load
EXACT 183 zext zext
EXACT 184 load load
EXACT 185 store store
EXACT 186 load load
EXACT 187 add add
EXACT 188 store store
EXACT 189 icmp icmp
EXACT 190 zext zext
EXACT 191 store store
EXACT 192 trunc trunc
EXACT 193 and and
EXACT 194 tail tail
EXACT 195 trunc trunc
EXACT 196 and and
EXACT 197 xor xor
EXACT 198 store store
EXACT 199 xor xor
EXACT 200 lshr lshr
EXACT 201 trunc trunc
EXACT 202 and and
EXACT 203 store store
EXACT 204 icmp icmp
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 lshr lshr
EXACT 208 trunc trunc
EXACT 209 store store
EXACT 210 lshr lshr
EXACT 211 xor xor
EXACT 212 add add
EXACT 213 icmp icmp
EXACT 214 zext zext
EXACT 215 store store
EXACT 216 add add
EXACT 217 store store
EXACT 218 add add
EXACT 219 inttoptr inttoptr
EXACT 220 load load
EXACT 221 store store
EXACT 222 store store
EXACT 223 add add
EXACT 224 store store
EXACT 225 inttoptr inttoptr
EXACT 226 load load
EXACT 227 store store
EXACT 228 add add
EXACT 229 store store
EXACT 230 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 24', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%EDI.i = bitcast %union.anon* %43 to i32*', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI.i, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i43, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = load i64, i64* %RAX.i50, align 8', 'store i64 %56, i64* %RDI.i41, align 8', '%59 = add i64 %57, 8', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %6, align 8', 'store i64 %58, i64* %3, align 8', '%63 = load i64, i64* %3, align 8', '%EAX.i34 = bitcast %union.anon* %39 to i32*', '%64 = load i64, i64* %RBP.i, align 8', '%65 = add i64 %64, -20', '%66 = load i32, i32* %EAX.i34, align 4', '%67 = add i64 %63, 13', 'store i64 %67, i64* %3, align 8', '%68 = inttoptr i64 %65 to i32*', 'store i32 %66, i32* %68, align 4', '%71 = add i64 %69, 5', '%74 = inttoptr i64 %73 to i64*', 'store i64 %71, i64* %74, align 8', 'store i64 %73, i64* %6, align 8', 'store i64 %70, i64* %3, align 8', '%75 = load i64, i64* %3, align 8', '%76 = load i64, i64* %RBP.i, align 8', '%77 = add i64 %76, -24', '%78 = load i32, i32* %EAX.i34, align 4', '%79 = add i64 %75, 13', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %77 to i32*', 'store i32 %78, i32* %80, align 4', '%83 = add i64 %81, 5', '%86 = inttoptr i64 %85 to i64*', 'store i64 %83, i64* %86, align 8', 'store i64 %85, i64* %6, align 8', 'store i64 %82, i64* %3, align 8', '%87 = load i64, i64* %3, align 8', '%88 = load i64, i64* %RBP.i, align 8', '%89 = add i64 %88, -28', '%90 = load i32, i32* %EAX.i34, align 4', '%91 = add i64 %87, 13', 'store i64 %91, i64* %3, align 8', '%92 = inttoptr i64 %89 to i32*', 'store i32 %90, i32* %92, align 4', '%93 = load i64, i64* %RBP.i, align 8', '%94 = add i64 %93, -20', '%95 = load i64, i64* %3, align 8', '%96 = add i64 %95, 3', 'store i64 %96, i64* %3, align 8', '%97 = inttoptr i64 %94 to i32*', '%98 = load i32, i32* %97, align 4', '%99 = zext i32 %98 to i64', 'store i64 %99, i64* %RSI.i43, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%100 = add i64 %93, -24', '%101 = add i64 %95, 6', 'store i64 %101, i64* %3, align 8', '%102 = inttoptr i64 %100 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = zext i32 %103 to i64', 'store i64 %104, i64* %RDX.i, align 8', '%106 = add i64 %93, -28', '%107 = add i64 %95, 9', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %106 to i32*', '%109 = load i32, i32* %108, align 4', '%110 = zext i32 %109 to i64', 'store i64 %110, i64* %RCX.i16, align 8', '%AL.i = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i, align 1', '%111 = add i64 %95, -361', '%112 = add i64 %95, 16', '%115 = inttoptr i64 %114 to i64*', 'store i64 %112, i64* %115, align 8', 'store i64 %114, i64* %6, align 8', 'store i64 %111, i64* %3, align 8', '%ECX.i9 = bitcast %union.anon* %105 to i32*', '%117 = load i64, i64* %3, align 8', '%118 = load i64, i64* %RBP.i, align 8', '%119 = add i64 %118, -32', '%120 = load i32, i32* %EAX.i34, align 4', '%121 = add i64 %117, 5', 'store i64 %121, i64* %3, align 8', '%122 = inttoptr i64 %119 to i32*', 'store i32 %120, i32* %122, align 4', '%123 = load i32, i32* %ECX.i9, align 4', '%124 = zext i32 %123 to i64', '%125 = load i64, i64* %3, align 8', 'store i64 %124, i64* %RAX.i50, align 8', '%126 = load i64, i64* %6, align 8', '%127 = add i64 %126, 32', 'store i64 %127, i64* %6, align 8', '%128 = icmp ugt i64 %126, -33', '%129 = zext i1 %128 to i8', 'store i8 %129, i8* %14, align 1', '%130 = trunc i64 %127 to i32', '%131 = and i32 %130, 255', '%132 = tail call i32 @llvm.ctpop.i32(i32 %131)', '%133 = trunc i32 %132 to i8', '%134 = and i8 %133, 1', '%135 = xor i8 %134, 1', 'store i8 %135, i8* %21, align 1', '%136 = xor i64 %127, %126', '%137 = lshr i64 %136, 4', '%138 = trunc i64 %137 to i8', '%139 = and i8 %138, 1', 'store i8 %139, i8* %26, align 1', '%140 = icmp eq i64 %127, 0', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %29, align 1', '%142 = lshr i64 %127, 63', '%143 = trunc i64 %142 to i8', 'store i8 %143, i8* %32, align 1', '%144 = lshr i64 %126, 63', '%145 = xor i64 %142, %144', '%146 = add nuw nsw i64 %145, %142', '%147 = icmp eq i64 %146, 2', '%148 = zext i1 %147 to i8', 'store i8 %148, i8* %38, align 1', '%149 = add i64 %125, 7', 'store i64 %149, i64* %3, align 8', '%150 = add i64 %126, 40', '%151 = inttoptr i64 %127 to i64*', '%152 = load i64, i64* %151, align 8', 'store i64 %152, i64* %RBP.i, align 8', 'store i64 %150, i64* %6, align 8', '%153 = add i64 %125, 8', 'store i64 %153, i64* %3, align 8', '%154 = inttoptr i64 %150 to i64*', '%155 = load i64, i64* %154, align 8', 'store i64 %155, i64* %3, align 8', '%156 = add i64 %126, 48', 'store i64 %156, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Keep: %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i50 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Keep: store i64 ptrtoint (%G__0x4006ab_type* @G__0x4006ab to i64), i64* %RAX.i50, align 8
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 24
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Keep: %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %43 to i32*
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = load i32, i32* %EDI.i, align 4
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 3
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i32*
Found line to remove! store i32 %46, i32* %49, align 4
Found line to remove! %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI.i43, align 8
Found line to remove! %53 = load i64, i64* %3, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %3, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Keep: %RDI.i41 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
Found line to remove! %56 = load i64, i64* %RAX.i50, align 8
Keep: %57 = load i64, i64* %3, align 8
Found line to remove! store i64 %56, i64* %RDI.i41, align 8
Keep: %58 = add i64 %57, 112
Found line to remove! %59 = add i64 %57, 8
Keep: %60 = load i64, i64* %6, align 8
Keep: %61 = add i64 %60, -8
Found line to remove! %62 = inttoptr i64 %61 to i64*
Found line to remove! store i64 %59, i64* %62, align 8
Found line to remove! store i64 %61, i64* %6, align 8
Found line to remove! store i64 %58, i64* %3, align 8
Keep: %call2_400583 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %58, %struct.Memory* %2)
Found line to remove! %63 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x4006a4_type* @G__0x4006a4 to i64), i64* %RDI.i41, align 8
Found line to remove! %EAX.i34 = bitcast %union.anon* %39 to i32*
Found line to remove! %64 = load i64, i64* %RBP.i, align 8
Found line to remove! %65 = add i64 %64, -20
Found line to remove! %66 = load i32, i32* %EAX.i34, align 4
Found line to remove! %67 = add i64 %63, 13
Found line to remove! store i64 %67, i64* %3, align 8
Found line to remove! %68 = inttoptr i64 %65 to i32*
Found line to remove! store i32 %66, i32* %68, align 4
Keep: %69 = load i64, i64* %3, align 8
Keep: %70 = add i64 %69, 91
Found line to remove! %71 = add i64 %69, 5
Keep: %72 = load i64, i64* %6, align 8
Keep: %73 = add i64 %72, -8
Found line to remove! %74 = inttoptr i64 %73 to i64*
Found line to remove! store i64 %71, i64* %74, align 8
Found line to remove! store i64 %73, i64* %6, align 8
Found line to remove! store i64 %70, i64* %3, align 8
Keep: %call2_400595 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %70, %struct.Memory* %call2_400583)
Found line to remove! %75 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x4006a8_type* @G__0x4006a8 to i64), i64* %RDI.i41, align 8
Found line to remove! %76 = load i64, i64* %RBP.i, align 8
Found line to remove! %77 = add i64 %76, -24
Found line to remove! %78 = load i32, i32* %EAX.i34, align 4
Found line to remove! %79 = add i64 %75, 13
Found line to remove! store i64 %79, i64* %3, align 8
Found line to remove! %80 = inttoptr i64 %77 to i32*
Found line to remove! store i32 %78, i32* %80, align 4
Keep: %81 = load i64, i64* %3, align 8
Keep: %82 = add i64 %81, 73
Found line to remove! %83 = add i64 %81, 5
Keep: %84 = load i64, i64* %6, align 8
Keep: %85 = add i64 %84, -8
Found line to remove! %86 = inttoptr i64 %85 to i64*
Found line to remove! store i64 %83, i64* %86, align 8
Found line to remove! store i64 %85, i64* %6, align 8
Found line to remove! store i64 %82, i64* %3, align 8
Keep: %call2_4005a7 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %82, %struct.Memory* %call2_400595)
Found line to remove! %87 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x4006af_type* @G__0x4006af to i64), i64* %RDI.i41, align 8
Found line to remove! %88 = load i64, i64* %RBP.i, align 8
Found line to remove! %89 = add i64 %88, -28
Found line to remove! %90 = load i32, i32* %EAX.i34, align 4
Found line to remove! %91 = add i64 %87, 13
Found line to remove! store i64 %91, i64* %3, align 8
Found line to remove! %92 = inttoptr i64 %89 to i32*
Found line to remove! store i32 %90, i32* %92, align 4
Found line to remove! %93 = load i64, i64* %RBP.i, align 8
Found line to remove! %94 = add i64 %93, -20
Found line to remove! %95 = load i64, i64* %3, align 8
Found line to remove! %96 = add i64 %95, 3
Found line to remove! store i64 %96, i64* %3, align 8
Found line to remove! %97 = inttoptr i64 %94 to i32*
Found line to remove! %98 = load i32, i32* %97, align 4
Found line to remove! %99 = zext i32 %98 to i64
Found line to remove! store i64 %99, i64* %RSI.i43, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %100 = add i64 %93, -24
Found line to remove! %101 = add i64 %95, 6
Found line to remove! store i64 %101, i64* %3, align 8
Found line to remove! %102 = inttoptr i64 %100 to i32*
Found line to remove! %103 = load i32, i32* %102, align 4
Found line to remove! %104 = zext i32 %103 to i64
Found line to remove! store i64 %104, i64* %RDX.i, align 8
Keep: %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Keep: %RCX.i16 = getelementptr inbounds %union.anon, %union.anon* %105, i64 0, i32 0
Found line to remove! %106 = add i64 %93, -28
Found line to remove! %107 = add i64 %95, 9
Found line to remove! store i64 %107, i64* %3, align 8
Found line to remove! %108 = inttoptr i64 %106 to i32*
Found line to remove! %109 = load i32, i32* %108, align 4
Found line to remove! %110 = zext i32 %109 to i64
Found line to remove! store i64 %110, i64* %RCX.i16, align 8
Found line to remove! %AL.i = bitcast %union.anon* %39 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %111 = add i64 %95, -361
Found line to remove! %112 = add i64 %95, 16
Keep: %113 = load i64, i64* %6, align 8
Keep: %114 = add i64 %113, -8
Found line to remove! %115 = inttoptr i64 %114 to i64*
Found line to remove! store i64 %112, i64* %115, align 8
Found line to remove! store i64 %114, i64* %6, align 8
Found line to remove! store i64 %111, i64* %3, align 8
Keep: %116 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005a7)
Found line to remove! %ECX.i9 = bitcast %union.anon* %105 to i32*
Found line to remove! %117 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RCX.i16, align 8
Found line to remove! %118 = load i64, i64* %RBP.i, align 8
Found line to remove! %119 = add i64 %118, -32
Found line to remove! %120 = load i32, i32* %EAX.i34, align 4
Found line to remove! %121 = add i64 %117, 5
Found line to remove! store i64 %121, i64* %3, align 8
Found line to remove! %122 = inttoptr i64 %119 to i32*
Found line to remove! store i32 %120, i32* %122, align 4
Found line to remove! %123 = load i32, i32* %ECX.i9, align 4
Found line to remove! %124 = zext i32 %123 to i64
Found line to remove! %125 = load i64, i64* %3, align 8
Found line to remove! store i64 %124, i64* %RAX.i50, align 8
Found line to remove! %126 = load i64, i64* %6, align 8
Found line to remove! %127 = add i64 %126, 32
Found line to remove! store i64 %127, i64* %6, align 8
Found line to remove! %128 = icmp ugt i64 %126, -33
Found line to remove! %129 = zext i1 %128 to i8
Found line to remove! store i8 %129, i8* %14, align 1
Found line to remove! %130 = trunc i64 %127 to i32
Found line to remove! %131 = and i32 %130, 255
Found line to remove! %132 = tail call i32 @llvm.ctpop.i32(i32 %131)
Found line to remove! %133 = trunc i32 %132 to i8
Found line to remove! %134 = and i8 %133, 1
Found line to remove! %135 = xor i8 %134, 1
Found line to remove! store i8 %135, i8* %21, align 1
Found line to remove! %136 = xor i64 %127, %126
Found line to remove! %137 = lshr i64 %136, 4
Found line to remove! %138 = trunc i64 %137 to i8
Found line to remove! %139 = and i8 %138, 1
Found line to remove! store i8 %139, i8* %26, align 1
Found line to remove! %140 = icmp eq i64 %127, 0
Found line to remove! %141 = zext i1 %140 to i8
Found line to remove! store i8 %141, i8* %29, align 1
Found line to remove! %142 = lshr i64 %127, 63
Found line to remove! %143 = trunc i64 %142 to i8
Found line to remove! store i8 %143, i8* %32, align 1
Found line to remove! %144 = lshr i64 %126, 63
Found line to remove! %145 = xor i64 %142, %144
Found line to remove! %146 = add nuw nsw i64 %145, %142
Found line to remove! %147 = icmp eq i64 %146, 2
Found line to remove! %148 = zext i1 %147 to i8
Found line to remove! store i8 %148, i8* %38, align 1
Found line to remove! %149 = add i64 %125, 7
Found line to remove! store i64 %149, i64* %3, align 8
Found line to remove! %150 = add i64 %126, 40
Found line to remove! %151 = inttoptr i64 %127 to i64*
Found line to remove! %152 = load i64, i64* %151, align 8
Found line to remove! store i64 %152, i64* %RBP.i, align 8
Found line to remove! store i64 %150, i64* %6, align 8
Found line to remove! %153 = add i64 %125, 8
Found line to remove! store i64 %153, i64* %3, align 8
Found line to remove! %154 = inttoptr i64 %150 to i64*
Found line to remove! %155 = load i64, i64* %154, align 8
Found line to remove! store i64 %155, i64* %3, align 8
Found line to remove! %156 = add i64 %126, 48
Found line to remove! store i64 %156, i64* %6, align 8
Keep: ret %struct.Memory* %116
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 24', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%EDI.i = bitcast %union.anon* %43 to i32*', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI.i, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i43, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = load i64, i64* %RAX.i50, align 8', 'store i64 %56, i64* %RDI.i41, align 8', '%59 = add i64 %57, 8', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %6, align 8', 'store i64 %58, i64* %3, align 8', '%63 = load i64, i64* %3, align 8', '%EAX.i34 = bitcast %union.anon* %39 to i32*', '%64 = load i64, i64* %RBP.i, align 8', '%65 = add i64 %64, -20', '%66 = load i32, i32* %EAX.i34, align 4', '%67 = add i64 %63, 13', 'store i64 %67, i64* %3, align 8', '%68 = inttoptr i64 %65 to i32*', 'store i32 %66, i32* %68, align 4', '%71 = add i64 %69, 5', '%74 = inttoptr i64 %73 to i64*', 'store i64 %71, i64* %74, align 8', 'store i64 %73, i64* %6, align 8', 'store i64 %70, i64* %3, align 8', '%75 = load i64, i64* %3, align 8', '%76 = load i64, i64* %RBP.i, align 8', '%77 = add i64 %76, -24', '%78 = load i32, i32* %EAX.i34, align 4', '%79 = add i64 %75, 13', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %77 to i32*', 'store i32 %78, i32* %80, align 4', '%83 = add i64 %81, 5', '%86 = inttoptr i64 %85 to i64*', 'store i64 %83, i64* %86, align 8', 'store i64 %85, i64* %6, align 8', 'store i64 %82, i64* %3, align 8', '%87 = load i64, i64* %3, align 8', '%88 = load i64, i64* %RBP.i, align 8', '%89 = add i64 %88, -28', '%90 = load i32, i32* %EAX.i34, align 4', '%91 = add i64 %87, 13', 'store i64 %91, i64* %3, align 8', '%92 = inttoptr i64 %89 to i32*', 'store i32 %90, i32* %92, align 4', '%93 = load i64, i64* %RBP.i, align 8', '%94 = add i64 %93, -20', '%95 = load i64, i64* %3, align 8', '%96 = add i64 %95, 3', 'store i64 %96, i64* %3, align 8', '%97 = inttoptr i64 %94 to i32*', '%98 = load i32, i32* %97, align 4', '%99 = zext i32 %98 to i64', 'store i64 %99, i64* %RSI.i43, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%100 = add i64 %93, -24', '%101 = add i64 %95, 6', 'store i64 %101, i64* %3, align 8', '%102 = inttoptr i64 %100 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = zext i32 %103 to i64', 'store i64 %104, i64* %RDX.i, align 8', '%106 = add i64 %93, -28', '%107 = add i64 %95, 9', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %106 to i32*', '%109 = load i32, i32* %108, align 4', '%110 = zext i32 %109 to i64', 'store i64 %110, i64* %RCX.i16, align 8', '%AL.i = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i, align 1', '%111 = add i64 %95, -361', '%112 = add i64 %95, 16', '%115 = inttoptr i64 %114 to i64*', 'store i64 %112, i64* %115, align 8', 'store i64 %114, i64* %6, align 8', 'store i64 %111, i64* %3, align 8', '%ECX.i9 = bitcast %union.anon* %105 to i32*', '%117 = load i64, i64* %3, align 8', '%118 = load i64, i64* %RBP.i, align 8', '%119 = add i64 %118, -32', '%120 = load i32, i32* %EAX.i34, align 4', '%121 = add i64 %117, 5', 'store i64 %121, i64* %3, align 8', '%122 = inttoptr i64 %119 to i32*', 'store i32 %120, i32* %122, align 4', '%123 = load i32, i32* %ECX.i9, align 4', '%124 = zext i32 %123 to i64', '%125 = load i64, i64* %3, align 8', 'store i64 %124, i64* %RAX.i50, align 8', '%126 = load i64, i64* %6, align 8', '%127 = add i64 %126, 32', 'store i64 %127, i64* %6, align 8', '%128 = icmp ugt i64 %126, -33', '%129 = zext i1 %128 to i8', 'store i8 %129, i8* %14, align 1', '%130 = trunc i64 %127 to i32', '%131 = and i32 %130, 255', '%132 = tail call i32 @llvm.ctpop.i32(i32 %131)', '%133 = trunc i32 %132 to i8', '%134 = and i8 %133, 1', '%135 = xor i8 %134, 1', 'store i8 %135, i8* %21, align 1', '%136 = xor i64 %127, %126', '%137 = lshr i64 %136, 4', '%138 = trunc i64 %137 to i8', '%139 = and i8 %138, 1', 'store i8 %139, i8* %26, align 1', '%140 = icmp eq i64 %127, 0', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %29, align 1', '%142 = lshr i64 %127, 63', '%143 = trunc i64 %142 to i8', 'store i8 %143, i8* %32, align 1', '%144 = lshr i64 %126, 63', '%145 = xor i64 %142, %144', '%146 = add nuw nsw i64 %145, %142', '%147 = icmp eq i64 %146, 2', '%148 = zext i1 %147 to i8', 'store i8 %148, i8* %38, align 1', '%149 = add i64 %125, 7', 'store i64 %149, i64* %3, align 8', '%150 = add i64 %126, 40', '%151 = inttoptr i64 %127 to i64*', '%152 = load i64, i64* %151, align 8', 'store i64 %152, i64* %RBP.i, align 8', 'store i64 %150, i64* %6, align 8', '%153 = add i64 %125, 8', 'store i64 %153, i64* %3, align 8', '%154 = inttoptr i64 %150 to i64*', '%155 = load i64, i64* %154, align 8', 'store i64 %155, i64* %3, align 8', '%156 = add i64 %126, 48', 'store i64 %156, i64* %6, align 8'])
TO REMOVE: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ECX = bitcast %union.anon* %4 to i32*', '%EDI = bitcast %union.anon* %5 to i32*', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 24', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%55 = load i64, i64* %RAX, align 8', 'store i64 %55, i64* %RDI, align 8', '%58 = add i64 %56, 8', '%61 = inttoptr i64 %60 to i64*', 'store i64 %58, i64* %61, align 8', 'store i64 %60, i64* %RSP, align 8', 'store i64 %57, i64* %PC, align 8', '%63 = load i64, i64* %PC, align 8', '%64 = load i64, i64* %RBP, align 8', '%65 = add i64 %64, -20', '%66 = load i32, i32* %EAX, align 4', '%67 = add i64 %63, 13', 'store i64 %67, i64* %PC, align 8', '%68 = inttoptr i64 %65 to i32*', 'store i32 %66, i32* %68, align 4', '%71 = add i64 %69, 5', '%74 = inttoptr i64 %73 to i64*', 'store i64 %71, i64* %74, align 8', 'store i64 %73, i64* %RSP, align 8', 'store i64 %70, i64* %PC, align 8', '%76 = load i64, i64* %PC, align 8', '%77 = load i64, i64* %RBP, align 8', '%78 = add i64 %77, -24', '%79 = load i32, i32* %EAX, align 4', '%80 = add i64 %76, 13', 'store i64 %80, i64* %PC, align 8', '%81 = inttoptr i64 %78 to i32*', 'store i32 %79, i32* %81, align 4', '%84 = add i64 %82, 5', '%87 = inttoptr i64 %86 to i64*', 'store i64 %84, i64* %87, align 8', 'store i64 %86, i64* %RSP, align 8', 'store i64 %83, i64* %PC, align 8', '%89 = load i64, i64* %PC, align 8', '%90 = load i64, i64* %RBP, align 8', '%91 = add i64 %90, -28', '%92 = load i32, i32* %EAX, align 4', '%93 = add i64 %89, 13', 'store i64 %93, i64* %PC, align 8', '%94 = inttoptr i64 %91 to i32*', 'store i32 %92, i32* %94, align 4', '%95 = load i64, i64* %RBP, align 8', '%96 = add i64 %95, -20', '%97 = load i64, i64* %PC, align 8', '%98 = add i64 %97, 3', 'store i64 %98, i64* %PC, align 8', '%99 = inttoptr i64 %96 to i32*', '%100 = load i32, i32* %99, align 4', '%101 = zext i32 %100 to i64', 'store i64 %101, i64* %RSI, align 8', '%102 = add i64 %95, -24', '%103 = add i64 %97, 6', 'store i64 %103, i64* %PC, align 8', '%104 = inttoptr i64 %102 to i32*', '%105 = load i32, i32* %104, align 4', '%106 = zext i32 %105 to i64', 'store i64 %106, i64* %RDX, align 8', '%107 = add i64 %95, -28', '%108 = add i64 %97, 9', 'store i64 %108, i64* %PC, align 8', '%109 = inttoptr i64 %107 to i32*', '%110 = load i32, i32* %109, align 4', '%111 = zext i32 %110 to i64', 'store i64 %111, i64* %RCX, align 8', 'store i8 0, i8* %AL, align 1', '%112 = add i64 %97, -361', '%113 = add i64 %97, 16', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %RSP, align 8', 'store i64 %112, i64* %PC, align 8', '%118 = load i64, i64* %PC, align 8', '%119 = load i64, i64* %RBP, align 8', '%120 = add i64 %119, -32', '%121 = load i32, i32* %EAX, align 4', '%122 = add i64 %118, 5', 'store i64 %122, i64* %PC, align 8', '%123 = inttoptr i64 %120 to i32*', 'store i32 %121, i32* %123, align 4', '%124 = load i32, i32* %ECX, align 4', '%125 = zext i32 %124 to i64', '%126 = load i64, i64* %PC, align 8', 'store i64 %125, i64* %RAX, align 8', '%127 = load i64, i64* %RSP, align 8', '%128 = add i64 %127, 32', 'store i64 %128, i64* %RSP, align 8', '%129 = icmp ugt i64 %127, -33', '%130 = zext i1 %129 to i8', 'store i8 %130, i8* %15, align 1', '%131 = trunc i64 %128 to i32', '%132 = and i32 %131, 255', '%133 = tail call i32 @llvm.ctpop.i32(i32 %132) #12', '%134 = trunc i32 %133 to i8', '%135 = and i8 %134, 1', '%136 = xor i8 %135, 1', 'store i8 %136, i8* %22, align 1', '%137 = xor i64 %128, %127', '%138 = lshr i64 %137, 4', '%139 = trunc i64 %138 to i8', '%140 = and i8 %139, 1', 'store i8 %140, i8* %27, align 1', '%141 = icmp eq i64 %128, 0', '%142 = zext i1 %141 to i8', 'store i8 %142, i8* %30, align 1', '%143 = lshr i64 %128, 63', '%144 = trunc i64 %143 to i8', 'store i8 %144, i8* %33, align 1', '%145 = lshr i64 %127, 63', '%146 = xor i64 %143, %145', '%147 = add nuw nsw i64 %146, %143', '%148 = icmp eq i64 %147, 2', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %39, align 1', '%150 = add i64 %126, 7', 'store i64 %150, i64* %PC, align 8', '%151 = add i64 %127, 40', '%152 = inttoptr i64 %128 to i64*', '%153 = load i64, i64* %152, align 8', 'store i64 %153, i64* %RBP, align 8', 'store i64 %151, i64* %RSP, align 8', '%154 = add i64 %126, 8', 'store i64 %154, i64* %PC, align 8', '%155 = inttoptr i64 %151 to i64*', '%156 = load i64, i64* %155, align 8', 'store i64 %156, i64* %PC, align 8', '%157 = add i64 %127, 48', 'store i64 %157, i64* %RSP, align 8'])
Keep: block_400560:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Keep: %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Keep: %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 11), i64* %RAX, align 8
Found line to remove! %40 = add i64 %8, -12
Found line to remove! %41 = add i64 %11, 24
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Found line to remove! %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Found line to remove! %55 = load i64, i64* %RAX, align 8
Keep: %56 = load i64, i64* %PC, align 8
Found line to remove! store i64 %55, i64* %RDI, align 8
Keep: %57 = add i64 %56, 112
Found line to remove! %58 = add i64 %56, 8
Keep: %59 = load i64, i64* %RSP, align 8
Keep: %60 = add i64 %59, -8
Found line to remove! %61 = inttoptr i64 %60 to i64*
Found line to remove! store i64 %58, i64* %61, align 8
Found line to remove! store i64 %60, i64* %RSP, align 8
Found line to remove! store i64 %57, i64* %PC, align 8
Keep: %62 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
Found line to remove! %63 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %64 = load i64, i64* %RBP, align 8
Found line to remove! %65 = add i64 %64, -20
Found line to remove! %66 = load i32, i32* %EAX, align 4
Found line to remove! %67 = add i64 %63, 13
Found line to remove! store i64 %67, i64* %PC, align 8
Found line to remove! %68 = inttoptr i64 %65 to i32*
Found line to remove! store i32 %66, i32* %68, align 4
Keep: %69 = load i64, i64* %PC, align 8
Keep: %70 = add i64 %69, 91
Found line to remove! %71 = add i64 %69, 5
Keep: %72 = load i64, i64* %RSP, align 8
Keep: %73 = add i64 %72, -8
Found line to remove! %74 = inttoptr i64 %73 to i64*
Found line to remove! store i64 %71, i64* %74, align 8
Found line to remove! store i64 %73, i64* %RSP, align 8
Found line to remove! store i64 %70, i64* %PC, align 8
Keep: %75 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %70, %struct.Memory* %62)
Found line to remove! %76 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 8), i64* %RDI, align 8
Found line to remove! %77 = load i64, i64* %RBP, align 8
Found line to remove! %78 = add i64 %77, -24
Found line to remove! %79 = load i32, i32* %EAX, align 4
Found line to remove! %80 = add i64 %76, 13
Found line to remove! store i64 %80, i64* %PC, align 8
Found line to remove! %81 = inttoptr i64 %78 to i32*
Found line to remove! store i32 %79, i32* %81, align 4
Keep: %82 = load i64, i64* %PC, align 8
Keep: %83 = add i64 %82, 73
Found line to remove! %84 = add i64 %82, 5
Keep: %85 = load i64, i64* %RSP, align 8
Keep: %86 = add i64 %85, -8
Found line to remove! %87 = inttoptr i64 %86 to i64*
Found line to remove! store i64 %84, i64* %87, align 8
Found line to remove! store i64 %86, i64* %RSP, align 8
Found line to remove! store i64 %83, i64* %PC, align 8
Keep: %88 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %83, %struct.Memory* %75)
Found line to remove! %89 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 15), i64* %RDI, align 8
Found line to remove! %90 = load i64, i64* %RBP, align 8
Found line to remove! %91 = add i64 %90, -28
Found line to remove! %92 = load i32, i32* %EAX, align 4
Found line to remove! %93 = add i64 %89, 13
Found line to remove! store i64 %93, i64* %PC, align 8
Found line to remove! %94 = inttoptr i64 %91 to i32*
Found line to remove! store i32 %92, i32* %94, align 4
Found line to remove! %95 = load i64, i64* %RBP, align 8
Found line to remove! %96 = add i64 %95, -20
Found line to remove! %97 = load i64, i64* %PC, align 8
Found line to remove! %98 = add i64 %97, 3
Found line to remove! store i64 %98, i64* %PC, align 8
Found line to remove! %99 = inttoptr i64 %96 to i32*
Found line to remove! %100 = load i32, i32* %99, align 4
Found line to remove! %101 = zext i32 %100 to i64
Found line to remove! store i64 %101, i64* %RSI, align 8
Found line to remove! %102 = add i64 %95, -24
Found line to remove! %103 = add i64 %97, 6
Found line to remove! store i64 %103, i64* %PC, align 8
Found line to remove! %104 = inttoptr i64 %102 to i32*
Found line to remove! %105 = load i32, i32* %104, align 4
Found line to remove! %106 = zext i32 %105 to i64
Found line to remove! store i64 %106, i64* %RDX, align 8
Found line to remove! %107 = add i64 %95, -28
Found line to remove! %108 = add i64 %97, 9
Found line to remove! store i64 %108, i64* %PC, align 8
Found line to remove! %109 = inttoptr i64 %107 to i32*
Found line to remove! %110 = load i32, i32* %109, align 4
Found line to remove! %111 = zext i32 %110 to i64
Found line to remove! store i64 %111, i64* %RCX, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %112 = add i64 %97, -361
Found line to remove! %113 = add i64 %97, 16
Keep: %114 = load i64, i64* %RSP, align 8
Keep: %115 = add i64 %114, -8
Found line to remove! %116 = inttoptr i64 %115 to i64*
Found line to remove! store i64 %113, i64* %116, align 8
Found line to remove! store i64 %115, i64* %RSP, align 8
Found line to remove! store i64 %112, i64* %PC, align 8
Keep: %117 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %88)
Found line to remove! %118 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RCX, align 8
Found line to remove! %119 = load i64, i64* %RBP, align 8
Found line to remove! %120 = add i64 %119, -32
Found line to remove! %121 = load i32, i32* %EAX, align 4
Found line to remove! %122 = add i64 %118, 5
Found line to remove! store i64 %122, i64* %PC, align 8
Found line to remove! %123 = inttoptr i64 %120 to i32*
Found line to remove! store i32 %121, i32* %123, align 4
Found line to remove! %124 = load i32, i32* %ECX, align 4
Found line to remove! %125 = zext i32 %124 to i64
Found line to remove! %126 = load i64, i64* %PC, align 8
Found line to remove! store i64 %125, i64* %RAX, align 8
Found line to remove! %127 = load i64, i64* %RSP, align 8
Found line to remove! %128 = add i64 %127, 32
Found line to remove! store i64 %128, i64* %RSP, align 8
Found line to remove! %129 = icmp ugt i64 %127, -33
Found line to remove! %130 = zext i1 %129 to i8
Found line to remove! store i8 %130, i8* %15, align 1
Found line to remove! %131 = trunc i64 %128 to i32
Found line to remove! %132 = and i32 %131, 255
Found line to remove! %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #12
Found line to remove! %134 = trunc i32 %133 to i8
Found line to remove! %135 = and i8 %134, 1
Found line to remove! %136 = xor i8 %135, 1
Found line to remove! store i8 %136, i8* %22, align 1
Found line to remove! %137 = xor i64 %128, %127
Found line to remove! %138 = lshr i64 %137, 4
Found line to remove! %139 = trunc i64 %138 to i8
Found line to remove! %140 = and i8 %139, 1
Found line to remove! store i8 %140, i8* %27, align 1
Found line to remove! %141 = icmp eq i64 %128, 0
Found line to remove! %142 = zext i1 %141 to i8
Found line to remove! store i8 %142, i8* %30, align 1
Found line to remove! %143 = lshr i64 %128, 63
Found line to remove! %144 = trunc i64 %143 to i8
Found line to remove! store i8 %144, i8* %33, align 1
Found line to remove! %145 = lshr i64 %127, 63
Found line to remove! %146 = xor i64 %143, %145
Found line to remove! %147 = add nuw nsw i64 %146, %143
Found line to remove! %148 = icmp eq i64 %147, 2
Found line to remove! %149 = zext i1 %148 to i8
Found line to remove! store i8 %149, i8* %39, align 1
Found line to remove! %150 = add i64 %126, 7
Found line to remove! store i64 %150, i64* %PC, align 8
Found line to remove! %151 = add i64 %127, 40
Found line to remove! %152 = inttoptr i64 %128 to i64*
Found line to remove! %153 = load i64, i64* %152, align 8
Found line to remove! store i64 %153, i64* %RBP, align 8
Found line to remove! store i64 %151, i64* %RSP, align 8
Found line to remove! %154 = add i64 %126, 8
Found line to remove! store i64 %154, i64* %PC, align 8
Found line to remove! %155 = inttoptr i64 %151 to i64*
Found line to remove! %156 = load i64, i64* %155, align 8
Found line to remove! store i64 %156, i64* %PC, align 8
Found line to remove! %157 = add i64 %127, 48
Found line to remove! store i64 %157, i64* %RSP, align 8
Keep: ret %struct.Memory* %117
Missed: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ECX = bitcast %union.anon* %4 to i32*', '%EDI = bitcast %union.anon* %5 to i32*', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 24', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%55 = load i64, i64* %RAX, align 8', 'store i64 %55, i64* %RDI, align 8', '%58 = add i64 %56, 8', '%61 = inttoptr i64 %60 to i64*', 'store i64 %58, i64* %61, align 8', 'store i64 %60, i64* %RSP, align 8', 'store i64 %57, i64* %PC, align 8', '%63 = load i64, i64* %PC, align 8', '%64 = load i64, i64* %RBP, align 8', '%65 = add i64 %64, -20', '%66 = load i32, i32* %EAX, align 4', '%67 = add i64 %63, 13', 'store i64 %67, i64* %PC, align 8', '%68 = inttoptr i64 %65 to i32*', 'store i32 %66, i32* %68, align 4', '%71 = add i64 %69, 5', '%74 = inttoptr i64 %73 to i64*', 'store i64 %71, i64* %74, align 8', 'store i64 %73, i64* %RSP, align 8', 'store i64 %70, i64* %PC, align 8', '%76 = load i64, i64* %PC, align 8', '%77 = load i64, i64* %RBP, align 8', '%78 = add i64 %77, -24', '%79 = load i32, i32* %EAX, align 4', '%80 = add i64 %76, 13', 'store i64 %80, i64* %PC, align 8', '%81 = inttoptr i64 %78 to i32*', 'store i32 %79, i32* %81, align 4', '%84 = add i64 %82, 5', '%87 = inttoptr i64 %86 to i64*', 'store i64 %84, i64* %87, align 8', 'store i64 %86, i64* %RSP, align 8', 'store i64 %83, i64* %PC, align 8', '%89 = load i64, i64* %PC, align 8', '%90 = load i64, i64* %RBP, align 8', '%91 = add i64 %90, -28', '%92 = load i32, i32* %EAX, align 4', '%93 = add i64 %89, 13', 'store i64 %93, i64* %PC, align 8', '%94 = inttoptr i64 %91 to i32*', 'store i32 %92, i32* %94, align 4', '%95 = load i64, i64* %RBP, align 8', '%96 = add i64 %95, -20', '%97 = load i64, i64* %PC, align 8', '%98 = add i64 %97, 3', 'store i64 %98, i64* %PC, align 8', '%99 = inttoptr i64 %96 to i32*', '%100 = load i32, i32* %99, align 4', '%101 = zext i32 %100 to i64', 'store i64 %101, i64* %RSI, align 8', '%102 = add i64 %95, -24', '%103 = add i64 %97, 6', 'store i64 %103, i64* %PC, align 8', '%104 = inttoptr i64 %102 to i32*', '%105 = load i32, i32* %104, align 4', '%106 = zext i32 %105 to i64', 'store i64 %106, i64* %RDX, align 8', '%107 = add i64 %95, -28', '%108 = add i64 %97, 9', 'store i64 %108, i64* %PC, align 8', '%109 = inttoptr i64 %107 to i32*', '%110 = load i32, i32* %109, align 4', '%111 = zext i32 %110 to i64', 'store i64 %111, i64* %RCX, align 8', 'store i8 0, i8* %AL, align 1', '%112 = add i64 %97, -361', '%113 = add i64 %97, 16', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %RSP, align 8', 'store i64 %112, i64* %PC, align 8', '%118 = load i64, i64* %PC, align 8', '%119 = load i64, i64* %RBP, align 8', '%120 = add i64 %119, -32', '%121 = load i32, i32* %EAX, align 4', '%122 = add i64 %118, 5', 'store i64 %122, i64* %PC, align 8', '%123 = inttoptr i64 %120 to i32*', 'store i32 %121, i32* %123, align 4', '%124 = load i32, i32* %ECX, align 4', '%125 = zext i32 %124 to i64', '%126 = load i64, i64* %PC, align 8', 'store i64 %125, i64* %RAX, align 8', '%127 = load i64, i64* %RSP, align 8', '%128 = add i64 %127, 32', 'store i64 %128, i64* %RSP, align 8', '%129 = icmp ugt i64 %127, -33', '%130 = zext i1 %129 to i8', 'store i8 %130, i8* %15, align 1', '%131 = trunc i64 %128 to i32', '%132 = and i32 %131, 255', '%133 = tail call i32 @llvm.ctpop.i32(i32 %132) #12', '%134 = trunc i32 %133 to i8', '%135 = and i8 %134, 1', '%136 = xor i8 %135, 1', 'store i8 %136, i8* %22, align 1', '%137 = xor i64 %128, %127', '%138 = lshr i64 %137, 4', '%139 = trunc i64 %138 to i8', '%140 = and i8 %139, 1', 'store i8 %140, i8* %27, align 1', '%141 = icmp eq i64 %128, 0', '%142 = zext i1 %141 to i8', 'store i8 %142, i8* %30, align 1', '%143 = lshr i64 %128, 63', '%144 = trunc i64 %143 to i8', 'store i8 %144, i8* %33, align 1', '%145 = lshr i64 %127, 63', '%146 = xor i64 %143, %145', '%147 = add nuw nsw i64 %146, %143', '%148 = icmp eq i64 %147, 2', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %39, align 1', '%150 = add i64 %126, 7', 'store i64 %150, i64* %PC, align 8', '%151 = add i64 %127, 40', '%152 = inttoptr i64 %128 to i64*', '%153 = load i64, i64* %152, align 8', 'store i64 %153, i64* %RBP, align 8', 'store i64 %151, i64* %RSP, align 8', '%154 = add i64 %126, 8', 'store i64 %154, i64* %PC, align 8', '%155 = inttoptr i64 %151 to i64*', '%156 = load i64, i64* %155, align 8', 'store i64 %156, i64* %PC, align 8', '%157 = add i64 %127, 48', 'store i64 %157, i64* %RSP, align 8'])Writing '/tmp/tmpi7gs51vj.dot'...
Writing '/tmp/tmpi7gs51vj.dot':Done

Reading LLVM: /tmp/tmp6fggr6kx-query.ll
Extracting function [main] from /tmp/tmp6fggr6kx-query.ll
Dot file generated!
Writing '/tmp/tmp304wco74.dot'...
Writing '/tmp/tmp304wco74.dot':Done

Reading LLVM: /tmp/tmpr1edw8c0-target.ll
Extracting function [main] from /tmp/tmpr1edw8c0-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX.i50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 store i64 ptrtoint (%G__0x4006ab_type* @G__0x4006ab to i64), i64* %RAX.i50, align 8
- 3 %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 %var_2_57 = load i64, i64* %var_2_3, align 8
- 5 %var_2_58 = add i64 %var_2_57, 112
- 6 %call2_400583 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %var_2_58, %struct.Memory* %2)
- 7 store i64 ptrtoint (%G__0x4006a4_type* @G__0x4006a4 to i64), i64* %RDI.i41, align 8
- 8 %var_2_69 = load i64, i64* %var_2_3, align 8
- 9 %var_2_70 = add i64 %var_2_69, 91
- 10 %call2_400595 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %var_2_70, %struct.Memory* %call2_400583)
- 11 store i64 ptrtoint (%G__0x4006a8_type* @G__0x4006a8 to i64), i64* %RDI.i41, align 8
- 12 %var_2_81 = load i64, i64* %var_2_3, align 8
- 13 %var_2_82 = add i64 %var_2_81, 73
- 14 %call2_4005a7 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %var_2_82, %struct.Memory* %call2_400595)
- 15 store i64 ptrtoint (%G__0x4006af_type* @G__0x4006af to i64), i64* %RDI.i41, align 8
- 16 %RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 17 %var_2_116 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005a7)
- 18 store i64 0, i64* %RCX.i16, align 8
- 19 \<badref\> = ret %struct.Memory* %var_2_116
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bba1c268>, {0: {0}, 1: {1}, 2: {4, 8, 12, 16, 18}, 3: {3}, 4: {9, 13, 5}, 5: {6}, 6: {17, 11, 15, 7}, 7: {4, 8, 12, 16, 18}, 8: {9, 13, 5}, 9: {10}, 10: {17, 11, 15, 7}, 11: {4, 8, 12, 16, 18}, 12: {9, 13, 5}, 13: {14}, 14: {17, 11, 15, 7}, 15: {4, 8, 12, 16, 18}, 16: {2}, 17: {17, 11, 15, 7}, 18: {4, 8, 12, 16, 18}, 19: {19}})
Equivalent! frozenset({16, 8, 12}) {11, 15, 7}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bba1c268>, {0: {0}, 1: {1}, 2: {4}, 3: {3}, 4: {5}, 5: {6}, 6: {7}, 7: {12}, 8: {9}, 9: {10}, 10: {11}, 11: {16}, 12: {13}, 13: {14}, 14: {15}, 15: {8}, 16: {2}, 17: {17}, 18: {18}, 19: {19}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 store store
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 tail tail
EXACT 7 store store
EXACT 8 load load
EXACT 9 add add
EXACT 10 tail tail
EXACT 11 store store
EXACT 12 load load
EXACT 13 add add
EXACT 14 tail tail
EXACT 15 store store
EXACT 16 getelementptr getelementptr
EXACT 17 tail tail
EXACT 18 store store
EXACT 19 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 3 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 11), i64* %RAX, align 8
- 5 %var_2_56 = load i64, i64* %PC, align 8
- 6 %var_2_57 = add i64 %var_2_56, 112
- 7 %var_2_62 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %var_2_57, %struct.Memory* %2)
- 8 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 4), i64* %RDI, align 8
- 9 %var_2_69 = load i64, i64* %PC, align 8
- 10 %var_2_70 = add i64 %var_2_69, 91
- 11 %var_2_75 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %var_2_70, %struct.Memory* %var_2_62)
- 12 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 8), i64* %RDI, align 8
- 13 %var_2_82 = load i64, i64* %PC, align 8
- 14 %var_2_83 = add i64 %var_2_82, 73
- 15 %var_2_88 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %var_2_83, %struct.Memory* %var_2_75)
- 16 store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 15), i64* %RDI, align 8
- 17 %var_2_117 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_88)
- 18 store i64 0, i64* %RCX, align 8
- 19 \<badref\> = ret %struct.Memory* %var_2_117
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bc18a048>, {0: {0}, 1: {1}, 2: {16}, 3: {3}, 4: {2, 7, 11, 15, 18}, 5: {8, 4, 12}, 6: {5}, 7: {17, 10, 6, 14}, 8: {2, 7, 11, 15, 18}, 9: {8, 4, 12}, 10: {9}, 11: {17, 10, 6, 14}, 12: {2, 7, 11, 15, 18}, 13: {8, 4, 12}, 14: {13}, 15: {17, 10, 6, 14}, 16: {2, 7, 11, 15, 18}, 17: {17, 10, 6, 14}, 18: {2, 7, 11, 15, 18}, 19: {19}})
Equivalent! frozenset({11, 7, 15}) {8, 16, 12}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd7bc18a048>, {0: {0}, 1: {1}, 2: {16}, 3: {3}, 4: {2}, 5: {4}, 6: {5}, 7: {6}, 8: {11}, 9: {8}, 10: {9}, 11: {10}, 12: {15}, 13: {12}, 14: {13}, 15: {14}, 16: {7}, 17: {17}, 18: {18}, 19: {19}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 tail tail
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 tail tail
EXACT 12 store store
EXACT 13 load load
EXACT 14 add add
EXACT 15 tail tail
EXACT 16 store store
EXACT 17 tail tail
EXACT 18 store store
EXACT 19 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RAX.i50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 ptrtoint (%G__0x4006ab_type* @G__0x4006ab to i64), i64* %RAX.i50, align 8', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x4006a4_type* @G__0x4006a4 to i64), i64* %RDI.i41, align 8', 'store i64 ptrtoint (%G__0x4006a8_type* @G__0x4006a8 to i64), i64* %RDI.i41, align 8', 'store i64 ptrtoint (%G__0x4006af_type* @G__0x4006af to i64), i64* %RDI.i41, align 8', '%RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 0, i64* %RCX.i16, align 8'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX.i50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x4006ab_type* @G__0x4006ab to i64), i64* %RAX.i50, align 8
Found line to remove! %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %var_2_57 = load i64, i64* %var_2_3, align 8
Keep: %var_2_58 = add i64 %var_2_57, 112
Keep: %call2_400583 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %var_2_58, %struct.Memory* %2)
Found line to remove! store i64 ptrtoint (%G__0x4006a4_type* @G__0x4006a4 to i64), i64* %RDI.i41, align 8
Keep: %var_2_69 = load i64, i64* %var_2_3, align 8
Keep: %var_2_70 = add i64 %var_2_69, 91
Keep: %call2_400595 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %var_2_70, %struct.Memory* %call2_400583)
Found line to remove! store i64 ptrtoint (%G__0x4006a8_type* @G__0x4006a8 to i64), i64* %RDI.i41, align 8
Keep: %var_2_81 = load i64, i64* %var_2_3, align 8
Keep: %var_2_82 = add i64 %var_2_81, 73
Keep: %call2_4005a7 = tail call %struct.Memory* @sub_4005f0.checkFn(%struct.State* %0, i64 %var_2_82, %struct.Memory* %call2_400595)
Found line to remove! store i64 ptrtoint (%G__0x4006af_type* @G__0x4006af to i64), i64* %RDI.i41, align 8
Found line to remove! %RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Keep: %var_2_116 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005a7)
Found line to remove! store i64 0, i64* %RCX.i16, align 8
Keep: ret %struct.Memory* %var_2_116
Missed: dict_keys(['%RAX.i50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 ptrtoint (%G__0x4006ab_type* @G__0x4006ab to i64), i64* %RAX.i50, align 8', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 ptrtoint (%G__0x4006a4_type* @G__0x4006a4 to i64), i64* %RDI.i41, align 8', 'store i64 ptrtoint (%G__0x4006a8_type* @G__0x4006a8 to i64), i64* %RDI.i41, align 8', 'store i64 ptrtoint (%G__0x4006af_type* @G__0x4006af to i64), i64* %RDI.i41, align 8', '%RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 0, i64* %RCX.i16, align 8'])
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 11), i64* %RAX, align 8', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 4), i64* %RDI, align 8', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 8), i64* %RDI, align 8', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 15), i64* %RDI, align 8', 'store i64 0, i64* %RCX, align 8'])
Keep: block_400560:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 11), i64* %RAX, align 8
Keep: %var_2_56 = load i64, i64* %PC, align 8
Keep: %var_2_57 = add i64 %var_2_56, 112
Keep: %var_2_62 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %var_2_57, %struct.Memory* %2)
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 4), i64* %RDI, align 8
Keep: %var_2_69 = load i64, i64* %PC, align 8
Keep: %var_2_70 = add i64 %var_2_69, 91
Keep: %var_2_75 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %var_2_70, %struct.Memory* %var_2_62)
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 8), i64* %RDI, align 8
Keep: %var_2_82 = load i64, i64* %PC, align 8
Keep: %var_2_83 = add i64 %var_2_82, 73
Keep: %var_2_88 = tail call %struct.Memory* @sub_4005f0_checkFn_renamed_(%struct.State* nonnull %0, i64 %var_2_83, %struct.Memory* %var_2_75)
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 15), i64* %RDI, align 8
Keep: %var_2_117 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_88)
Found line to remove! store i64 0, i64* %RCX, align 8
Keep: ret %struct.Memory* %var_2_117
Missed: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 11), i64* %RAX, align 8', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 4), i64* %RDI, align 8', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 8), i64* %RDI, align 8', 'store i64 add (i64 ptrtoint (%seg_4006a0__rodata_type* @seg_4006a0__rodata to i64), i64 15), i64* %RDI, align 8', 'store i64 0, i64* %RCX, align 8'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_14/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_14/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
