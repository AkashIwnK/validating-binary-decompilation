Matching sub_4005c0_foo Vs foo


[Info] Retrieve Potential Matches...
[0x55582d589f60]: %struct.State* %0 {
	[0x55582d59d640]:%struct.State.1* %0
	}

[0x55582d589fa0]: i64 %1 {
	[0x55582d611d50]:i64 %1
	}

[0x55582d589fe0]: %struct.Memory* %2 {
	[0x55582d5a0ef0]:%struct.Memory.32* %2
	}

[0x55582d58a198]:   %3 = load i64, i64* %RBP, align 8 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58a270]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55582d590420]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55582d58a360]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55582d5fb720]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55582d58a3f0]:   %4 = add i64 %1, 1 {
	[0x55582d65e8c0]:  %5 = add i64 %1, 1
	}

[0x55582d58a4c0]:   store i64 %4, i64* %PC, align 8 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58a5a0]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55582d5fb360]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55582d58a618]:   %6 = load i64, i64* %5, align 8, !tbaa !1261 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58a690]:   %7 = add i64 %6, -8 {
	[0x55582d573400]:  %8 = add i64 %7, -8
	}

[0x55582d58a6f8]:   %8 = inttoptr i64 %7 to i64* {
	[0x55582d5fabc8]:  %9 = inttoptr i64 %8 to i64*
	[0x55582d60d648]:  %14 = inttoptr i64 %7 to i64*
	}

[0x55582d58a800]:   store i64 %3, i64* %8, align 8 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58a880]:   store i64 %7, i64* %5, align 8, !tbaa !1261 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58a8e8]:   %9 = load i64, i64* %PC, align 8 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58a960]:   store i64 %7, i64* %RBP, align 8, !tbaa !1261 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58a9e0]:   %10 = add i64 %9, 4 {
	[0x55582d610ff0]:  %11 = add i64 %10, 4
	}

[0x55582d58aa60]:   store i64 %10, i64* %PC, align 8 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58aac8]:   %11 = load i64, i64* %8, align 8 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58ab40]:   store i64 %11, i64* %RBP, align 8, !tbaa !1261 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58abc0]:   store i64 %6, i64* %5, align 8, !tbaa !1261 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58ac40]:   %12 = add i64 %9, 5 {
	[0x55582d59dde0]:  %13 = add i64 %10, 5
	}

[0x55582d58acc0]:   store i64 %12, i64* %PC, align 8 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58ad28]:   %13 = inttoptr i64 %6 to i64* {
	[0x55582d5fabc8]:  %9 = inttoptr i64 %8 to i64*
	[0x55582d60d648]:  %14 = inttoptr i64 %7 to i64*
	}

[0x55582d58ad88]:   %14 = load i64, i64* %13, align 8 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58ae00]:   store i64 %14, i64* %PC, align 8, !tbaa !1261 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58ae80]:   %15 = add i64 %6, 8 {
	[0x55582d59f950]:  %16 = add i64 %7, 8
	}

[0x55582d58af00]:   store i64 %15, i64* %5, align 8, !tbaa !1261 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58af68]:   ret %struct.Memory* %2 {
	[0x55582d6084c8]:  ret %struct.Memory.32* %2
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0
Round: 1


[Info] After Dual Simulation: Round: 0
[0x55582d589f60]: %struct.State* %0 {
	[0x55582d59d640]:%struct.State.1* %0
	}

[0x55582d589fa0]: i64 %1 {
	[0x55582d611d50]:i64 %1
	}

[0x55582d589fe0]: %struct.Memory* %2 {
	[0x55582d5a0ef0]:%struct.Memory.32* %2
	}

[0x55582d58a198]:   %3 = load i64, i64* %RBP, align 8 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55582d58a270]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55582d590420]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55582d58a360]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55582d5fb720]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55582d58a3f0]:   %4 = add i64 %1, 1 {
	[0x55582d65e8c0]:  %5 = add i64 %1, 1
	}

[0x55582d58a4c0]:   store i64 %4, i64* %PC, align 8 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	}

[0x55582d58a5a0]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55582d5fb360]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55582d58a618]:   %6 = load i64, i64* %5, align 8, !tbaa !1261 {
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	}

[0x55582d58a690]:   %7 = add i64 %6, -8 {
	[0x55582d573400]:  %8 = add i64 %7, -8
	}

[0x55582d58a6f8]:   %8 = inttoptr i64 %7 to i64* {
	[0x55582d5fabc8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55582d58a800]:   store i64 %3, i64* %8, align 8 {
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	}

[0x55582d58a880]:   store i64 %7, i64* %5, align 8, !tbaa !1261 {
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	}

[0x55582d58a8e8]:   %9 = load i64, i64* %PC, align 8 {
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58a960]:   store i64 %7, i64* %RBP, align 8, !tbaa !1261 {
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55582d58a9e0]:   %10 = add i64 %9, 4 {
	[0x55582d610ff0]:  %11 = add i64 %10, 4
	}

[0x55582d58aa60]:   store i64 %10, i64* %PC, align 8 {
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	}

[0x55582d58aac8]:   %11 = load i64, i64* %8, align 8 {
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	}

[0x55582d58ab40]:   store i64 %11, i64* %RBP, align 8, !tbaa !1261 {
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	}

[0x55582d58abc0]:   store i64 %6, i64* %5, align 8, !tbaa !1261 {
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58ac40]:   %12 = add i64 %9, 5 {
	[0x55582d59dde0]:  %13 = add i64 %10, 5
	}

[0x55582d58acc0]:   store i64 %12, i64* %PC, align 8 {
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	}

[0x55582d58ad28]:   %13 = inttoptr i64 %6 to i64* {
	[0x55582d60d648]:  %14 = inttoptr i64 %7 to i64*
	}

[0x55582d58ad88]:   %14 = load i64, i64* %13, align 8 {
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	}

[0x55582d58ae00]:   store i64 %14, i64* %PC, align 8, !tbaa !1261 {
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	}

[0x55582d58ae80]:   %15 = add i64 %6, 8 {
	[0x55582d59f950]:  %16 = add i64 %7, 8
	}

[0x55582d58af00]:   store i64 %15, i64* %5, align 8, !tbaa !1261 {
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	}

[0x55582d58af68]:   ret %struct.Memory* %2 {
	[0x55582d6084c8]:  ret %struct.Memory.32* %2
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55582d58a020]: block_4005c0 {
	[0x55582d5e1fd0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0


[Info] After Dual Simulation: Round: 1
[0x55582d589f60]: %struct.State* %0 {
	[0x55582d59d640]:%struct.State.1* %0
	}

[0x55582d589fa0]: i64 %1 {
	[0x55582d611d50]:i64 %1
	}

[0x55582d589fe0]: %struct.Memory* %2 {
	[0x55582d5a0ef0]:%struct.Memory.32* %2
	}

[0x55582d58a198]:   %3 = load i64, i64* %RBP, align 8 {
	[0x55582d5fa808]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55582d58a270]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55582d590420]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55582d58a360]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55582d5fb720]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55582d58a3f0]:   %4 = add i64 %1, 1 {
	[0x55582d65e8c0]:  %5 = add i64 %1, 1
	}

[0x55582d58a4c0]:   store i64 %4, i64* %PC, align 8 {
	[0x55582d5725f0]:  store i64 %5, i64* %3, align 8
	}

[0x55582d58a5a0]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55582d5fb360]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55582d58a618]:   %6 = load i64, i64* %5, align 8, !tbaa !1261 {
	[0x55582d5fa9f8]:  %7 = load i64, i64* %6, align 8
	}

[0x55582d58a690]:   %7 = add i64 %6, -8 {
	[0x55582d573400]:  %8 = add i64 %7, -8
	}

[0x55582d58a6f8]:   %8 = inttoptr i64 %7 to i64* {
	[0x55582d5fabc8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55582d58a800]:   store i64 %3, i64* %8, align 8 {
	[0x55582d59dba0]:  store i64 %4, i64* %9, align 8
	}

[0x55582d58a880]:   store i64 %7, i64* %5, align 8, !tbaa !1261 {
	[0x55582d59da50]:  store i64 %8, i64* %6, align 8
	}

[0x55582d58a8e8]:   %9 = load i64, i64* %PC, align 8 {
	[0x55582d624418]:  %10 = load i64, i64* %3, align 8
	}

[0x55582d58a960]:   store i64 %7, i64* %RBP, align 8, !tbaa !1261 {
	[0x55582d59d530]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55582d58a9e0]:   %10 = add i64 %9, 4 {
	[0x55582d610ff0]:  %11 = add i64 %10, 4
	}

[0x55582d58aa60]:   store i64 %10, i64* %PC, align 8 {
	[0x55582d60f410]:  store i64 %11, i64* %3, align 8
	}

[0x55582d58aac8]:   %11 = load i64, i64* %8, align 8 {
	[0x55582d60f318]:  %12 = load i64, i64* %9, align 8
	}

[0x55582d58ab40]:   store i64 %11, i64* %RBP, align 8, !tbaa !1261 {
	[0x55582d60cb20]:  store i64 %12, i64* %RBP.i, align 8
	}

[0x55582d58abc0]:   store i64 %6, i64* %5, align 8, !tbaa !1261 {
	[0x55582d656720]:  store i64 %7, i64* %6, align 8
	}

[0x55582d58ac40]:   %12 = add i64 %9, 5 {
	[0x55582d59dde0]:  %13 = add i64 %10, 5
	}

[0x55582d58acc0]:   store i64 %12, i64* %PC, align 8 {
	[0x55582d612620]:  store i64 %13, i64* %3, align 8
	}

[0x55582d58ad28]:   %13 = inttoptr i64 %6 to i64* {
	[0x55582d60d648]:  %14 = inttoptr i64 %7 to i64*
	}

[0x55582d58ad88]:   %14 = load i64, i64* %13, align 8 {
	[0x55582d60d218]:  %15 = load i64, i64* %14, align 8
	}

[0x55582d58ae00]:   store i64 %14, i64* %PC, align 8, !tbaa !1261 {
	[0x55582d59fab0]:  store i64 %15, i64* %3, align 8
	}

[0x55582d58ae80]:   %15 = add i64 %6, 8 {
	[0x55582d59f950]:  %16 = add i64 %7, 8
	}

[0x55582d58af00]:   store i64 %15, i64* %5, align 8, !tbaa !1261 {
	[0x55582d6122f0]:  store i64 %16, i64* %6, align 8
	}

[0x55582d58af68]:   ret %struct.Memory* %2 {
	[0x55582d6084c8]:  ret %struct.Memory.32* %2
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55582d58a020]: block_4005c0 {
	[0x55582d5e1fd0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [foo] from mcsema/test.opt.ll
Extracting function [foo] from mcsema/test.proposed.opt.ll
Matcher Done...
