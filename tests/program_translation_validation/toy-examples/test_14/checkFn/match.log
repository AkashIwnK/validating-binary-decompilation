Matching sub_4005a0_checkFn Vs checkFn


[Info] Retrieve Potential Matches...
[0x555800f41108]:   %3 = load i64, i64* %RBP, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f4d6e0]:   %96 = add i64 %64, 32 {
	[0x555800fb89e0]:  %97 = add i64 %65, 32
	}

[0x555800f4d760]:   store i64 %96, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f4d7c8]:   ret %struct.Memory* %63 {
	[0x555800f8af78]:  ret %struct.Memory.31* %call2_4005c2
	}

[0x555800f53c40]: %struct.State* %0 {
	[0x555800fa4220]:%struct.State.0* %0
	}

[0x555800f54540]: i64 %1 {
	[0x555800f9d430]:i64 %1
	}

[0x555800f54580]: %struct.Memory* %2 {
	[0x555800fa0910]:%struct.Memory.31* %2
	}

[0x555800f5a420]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x555800f1cfd0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x555800f5a510]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x555800f1d900]:  %RAX.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x555800f5a600]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x555800f1eba0]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x555800f5a6f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x555800f1de90]:  %RDI.i13 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x555800f5a800]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x555800f1d770]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x555800f5a910]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x555800f1d370]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x555800f5a9c0]:   %4 = add i64 %1, 1 {
	[0x555800ed1010]:  %5 = add i64 %1, 1
	}

[0x555800f5aa90]:   store i64 %4, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5aaf8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ab70]:   %6 = add i64 %5, -8 {
	[0x555800f7abd0]:  %8 = add i64 %7, -8
	[0x555800f9fb20]:  %63 = add i64 %62, -8
	[0x555801041690]:  %51 = add i64 %50, -8
	}

[0x555800f5abd8]:   %7 = inttoptr i64 %6 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5ac50]:   store i64 %3, i64* %7, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5acb8]:   %8 = load i64, i64* %PC, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ad30]:   %17 = and i8 %16, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	[0x555800f7dc70]:  %26 = and i8 %25, 1
	[0x555800f9d160]:  %80 = and i8 %79, 1
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5adc0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5ae40]:   %9 = add i64 %5, -24 {
	[0x555800f7a230]:  %11 = add i64 %7, -24
	}

[0x555800f5aec0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5af40]:   %10 = icmp ult i64 %6, 16 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5afa8]:   %11 = zext i1 %10 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5b050]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x555800f7a830]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x555800f5b0e0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5b148]:   %13 = trunc i64 %9 to i32 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5b1c0]:   %14 = and i32 %13, 255 {
	[0x555800f7d080]:  %16 = and i32 %15, 255
	[0x555800fa39d0]:  %71 = and i32 %70, 255
	}

[0x555800f5b280]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x555800f86170]:  %call2_4005c2 = tail call %struct.Memory.31* @sub_400420.strcmp_plt(%struct.State.0* %0, i64 %60, %struct.Memory.31* %2)
	[0x555800f9dc90]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x555800fa5810]:  %72 = tail call i32 @llvm.ctpop.i32(i32 %71)
	}

[0x555800f5b2f8]:   %16 = trunc i32 %15 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5b370]:   %33 = xor i64 %29, %32 {
	[0x555800f8a3d0]:  %35 = xor i64 %31, %34
	[0x555800f9cc80]:  %23 = xor i64 %22, %11
	[0x555800f9cfe0]:  %77 = xor i64 %76, %67
	[0x555800faefb0]:  %86 = xor i64 %83, %85
	}

[0x555800f5b3f0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x555800f8a500]:  %36 = add nuw nsw i64 %35, %34
	[0x555800faf130]:  %87 = add nuw nsw i64 %86, %83
	}

[0x555800f5b480]:   %18 = xor i8 %17, 1 {
	[0x555800f9c400]:  %20 = xor i8 %19, 1
	[0x555800fa6370]:  %75 = xor i8 %74, 1
	}

[0x555800f5b530]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x555800f7d4f0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x555800f5b5c0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5b640]:   %20 = xor i64 %6, 16 {
	[0x555800f7d5d0]:  %22 = xor i64 %8, 16
	[0x555800f9ce60]:  %76 = xor i64 %65, 16
	}

[0x555800f5b6c0]:   %21 = xor i64 %20, %9 {
	[0x555800f8a3d0]:  %35 = xor i64 %31, %34
	[0x555800f9cc80]:  %23 = xor i64 %22, %11
	[0x555800f9cfe0]:  %77 = xor i64 %76, %67
	[0x555800faefb0]:  %86 = xor i64 %83, %85
	}

[0x555800f5b740]:   %22 = lshr i64 %21, 4 {
	[0x555800f7db20]:  %24 = lshr i64 %23, 4
	[0x555800f9d370]:  %78 = lshr i64 %77, 4
	}

[0x555800f5b7a8]:   %23 = trunc i64 %22 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5b820]:   %24 = and i8 %23, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	[0x555800f7dc70]:  %26 = and i8 %25, 1
	[0x555800f9d160]:  %80 = and i8 %79, 1
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5b8d0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x555800f80260]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x555800f5b960]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5b9e0]:   %26 = icmp eq i64 %9, 0 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5ba48]:   %27 = zext i1 %26 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5baf0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x555800f7ed80]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x555800f5bb80]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5bc00]:   %29 = lshr i64 %9, 63 {
	[0x555800fa0020]:  %31 = lshr i64 %11, 63
	[0x555800fa3030]:  %34 = lshr i64 %8, 63
	[0x555800fa3d90]:  %85 = lshr i64 %65, 63
	[0x555800fa9480]:  %83 = lshr i64 %67, 63
	}

[0x555800f5bc68]:   %30 = trunc i64 %29 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5bd10]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x555800f85de0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x555800f5bda0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5be20]:   %32 = lshr i64 %6, 63 {
	[0x555800fa0020]:  %31 = lshr i64 %11, 63
	[0x555800fa3030]:  %34 = lshr i64 %8, 63
	[0x555800fa3d90]:  %85 = lshr i64 %65, 63
	[0x555800fa9480]:  %83 = lshr i64 %67, 63
	}

[0x555800f5be88]:   %65 = load i64, i64* %PC, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5bf00]:   %66 = add i64 %64, 16 {
	[0x555800fa25f0]:  %67 = add i64 %65, 16
	}

[0x555800f5bf80]:   store i64 %66, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c0b0]:   %35 = icmp eq i64 %34, 2 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5c118]:   %36 = zext i1 %35 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5c1c0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x555800f85f10]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x555800f5c250]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c2d0]:   store i64 add (i64 ptrtoint (%seg_400650__rodata_type* @seg_400650__rodata to i64), i64 4), i64* %RAX, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c350]:   %38 = add i64 %5, -16 {
	[0x555800ee3ec0]:  %56 = add i64 %50, -16
	[0x555801033e70]:  %40 = add i64 %7, -16
	[0x55580103ae00]:  %45 = add i64 %44, -16
	}

[0x555800f5c3b8]:   %39 = load i64, i64* %RDI, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5c470]:   %40 = add i64 %8, 21 {
	[0x555801036690]:  %42 = add i64 %10, 21
	}

[0x555800f5c4f0]:   store i64 %40, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c558]:   %41 = inttoptr i64 %38 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5c5d0]:   store i64 %39, i64* %41, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c638]:   %42 = load i64, i64* %RBP, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5c6b0]:   %43 = add i64 %42, -16 {
	[0x555800ee3ec0]:  %56 = add i64 %50, -16
	[0x555801033e70]:  %40 = add i64 %7, -16
	[0x55580103ae00]:  %45 = add i64 %44, -16
	}

[0x555800f5c718]:   %44 = load i64, i64* %RAX, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5c778]:   %45 = load i64, i64* %PC, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5c7f0]:   %46 = add i64 %45, 4 {
	[0x55580103d370]:  %48 = add i64 %47, 4
	[0x555801045a60]:  %53 = add i64 %52, 4
	}

[0x555800f5c870]:   store i64 %46, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c8d8]:   %47 = inttoptr i64 %43 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5c950]:   store i64 %44, i64* %47, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c9b8]:   %48 = load i64, i64* %RBP, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ca30]:   %49 = add i64 %48, -8 {
	[0x555800f7abd0]:  %8 = add i64 %7, -8
	[0x555800f9fb20]:  %63 = add i64 %62, -8
	[0x555801041690]:  %51 = add i64 %50, -8
	}

[0x555800f5ca98]:   %50 = load i64, i64* %PC, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5cb10]:   %51 = add i64 %50, 4 {
	[0x55580103d370]:  %48 = add i64 %47, 4
	[0x555801045a60]:  %53 = add i64 %52, 4
	}

[0x555800f5cb90]:   store i64 %51, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5cbf8]:   %52 = inttoptr i64 %49 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5cc58]:   %53 = load i64, i64* %52, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ccd0]:   store i64 %53, i64* %RDI, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5cd50]:   %54 = add i64 %48, -16 {
	[0x555800ee3ec0]:  %56 = add i64 %50, -16
	[0x555801033e70]:  %40 = add i64 %7, -16
	[0x55580103ae00]:  %45 = add i64 %44, -16
	}

[0x555800f5cdd0]:   %55 = add i64 %50, 8 {
	[0x555800f9e700]:  %57 = add i64 %52, 8
	}

[0x555800f5ce50]:   store i64 %55, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5ceb8]:   %56 = inttoptr i64 %54 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5cf18]:   %57 = load i64, i64* %56, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5cf90]:   store i64 %57, i64* %RSI, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5d050]:   %58 = add i64 %50, -410 {
	[0x555800f9efc0]:  %60 = add i64 %52, -410
	}

[0x555800f5d0d0]:   %59 = add i64 %50, 13 {
	[0x555800f9f880]:  %61 = add i64 %52, 13
	}

[0x555800f5d138]:   %60 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5d1b0]:   %61 = add i64 %60, -8 {
	[0x555800f7abd0]:  %8 = add i64 %7, -8
	[0x555800f9fb20]:  %63 = add i64 %62, -8
	[0x555801041690]:  %51 = add i64 %50, -8
	}

[0x555800f5d218]:   %62 = inttoptr i64 %61 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5d290]:   store i64 %59, i64* %62, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5d310]:   store i64 %61, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5d390]:   store i64 %58, i64* %PC, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5d568]:   %63 = tail call fastcc %struct.Memory* @ext_601068_strcmp(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x555800f86170]:  %call2_4005c2 = tail call %struct.Memory.31* @sub_400420.strcmp_plt(%struct.State.0* %0, i64 %60, %struct.Memory.31* %2)
	[0x555800f9dc90]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x555800fa5810]:  %72 = tail call i32 @llvm.ctpop.i32(i32 %71)
	}

[0x555800f5d628]:   %64 = load i64, i64* %RSP, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5dab0]:   %67 = icmp ugt i64 %64, -17 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5db18]:   %68 = zext i1 %67 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5db90]:   store i8 %68, i8* %12, align 1, !tbaa !1261 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5dbf8]:   %69 = trunc i64 %66 to i32 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5dc70]:   %70 = and i32 %69, 255 {
	[0x555800f7d080]:  %16 = and i32 %15, 255
	[0x555800fa39d0]:  %71 = and i32 %70, 255
	}

[0x555800f5dd10]:   %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9 {
	[0x555800f86170]:  %call2_4005c2 = tail call %struct.Memory.31* @sub_400420.strcmp_plt(%struct.State.0* %0, i64 %60, %struct.Memory.31* %2)
	[0x555800f9dc90]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x555800fa5810]:  %72 = tail call i32 @llvm.ctpop.i32(i32 %71)
	}

[0x555800f5ddd8]:   %72 = trunc i32 %71 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5de50]:   %73 = and i8 %72, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	[0x555800f7dc70]:  %26 = and i8 %25, 1
	[0x555800f9d160]:  %80 = and i8 %79, 1
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5ded0]:   %74 = xor i8 %73, 1 {
	[0x555800f9c400]:  %20 = xor i8 %19, 1
	[0x555800fa6370]:  %75 = xor i8 %74, 1
	}

[0x555800f5df50]:   store i8 %74, i8* %19, align 1, !tbaa !1275 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5dfd0]:   %75 = xor i64 %64, 16 {
	[0x555800f7d5d0]:  %22 = xor i64 %8, 16
	[0x555800f9ce60]:  %76 = xor i64 %65, 16
	}

[0x555800f5e050]:   %76 = xor i64 %75, %66 {
	[0x555800f8a3d0]:  %35 = xor i64 %31, %34
	[0x555800f9cc80]:  %23 = xor i64 %22, %11
	[0x555800f9cfe0]:  %77 = xor i64 %76, %67
	[0x555800faefb0]:  %86 = xor i64 %83, %85
	}

[0x555800f5e0d0]:   %77 = lshr i64 %76, 4 {
	[0x555800f7db20]:  %24 = lshr i64 %23, 4
	[0x555800f9d370]:  %78 = lshr i64 %77, 4
	}

[0x555800f5e138]:   %78 = trunc i64 %77 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5e1b0]:   %79 = and i8 %78, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	[0x555800f7dc70]:  %26 = and i8 %25, 1
	[0x555800f9d160]:  %80 = and i8 %79, 1
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5e230]:   store i8 %79, i8* %25, align 1, !tbaa !1276 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5e2b0]:   %80 = icmp eq i64 %66, 0 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5e318]:   %81 = zext i1 %80 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5e390]:   store i8 %81, i8* %28, align 1, !tbaa !1277 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5e410]:   %82 = lshr i64 %66, 63 {
	[0x555800fa0020]:  %31 = lshr i64 %11, 63
	[0x555800fa3030]:  %34 = lshr i64 %8, 63
	[0x555800fa3d90]:  %85 = lshr i64 %65, 63
	[0x555800fa9480]:  %83 = lshr i64 %67, 63
	}

[0x555800f5e478]:   %83 = trunc i64 %82 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5e4f0]:   store i8 %83, i8* %31, align 1, !tbaa !1278 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5e570]:   %84 = lshr i64 %64, 63 {
	[0x555800fa0020]:  %31 = lshr i64 %11, 63
	[0x555800fa3030]:  %34 = lshr i64 %8, 63
	[0x555800fa3d90]:  %85 = lshr i64 %65, 63
	[0x555800fa9480]:  %83 = lshr i64 %67, 63
	}

[0x555800f5e5f0]:   %85 = xor i64 %82, %84 {
	[0x555800f8a3d0]:  %35 = xor i64 %31, %34
	[0x555800f9cc80]:  %23 = xor i64 %22, %11
	[0x555800f9cfe0]:  %77 = xor i64 %76, %67
	[0x555800faefb0]:  %86 = xor i64 %83, %85
	}

[0x555800f5e670]:   %86 = add nuw nsw i64 %85, %82 {
	[0x555800f8a500]:  %36 = add nuw nsw i64 %35, %34
	[0x555800faf130]:  %87 = add nuw nsw i64 %86, %83
	}

[0x555800f5e6f0]:   %87 = icmp eq i64 %86, 2 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5e758]:   %88 = zext i1 %87 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5e7d0]:   store i8 %88, i8* %37, align 1, !tbaa !1279 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5e850]:   %89 = add i64 %65, 5 {
	[0x555800fb11e0]:  %90 = add i64 %66, 5
	}

[0x555800f5e8d0]:   store i64 %89, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5e950]:   %90 = add i64 %64, 24 {
	[0x555800fb1660]:  %91 = add i64 %65, 24
	}

[0x555800f5e9b8]:   %91 = inttoptr i64 %66 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5ea18]:   %92 = load i64, i64* %91, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ea90]:   store i64 %92, i64* %RBP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5eb10]:   store i64 %90, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5eb90]:   %93 = add i64 %65, 6 {
	[0x555800fa9c20]:  %94 = add i64 %66, 6
	}

[0x555800f5ec10]:   store i64 %93, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5ec78]:   %94 = inttoptr i64 %90 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5ecd8]:   %95 = load i64, i64* %94, align 8 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ed50]:   store i64 %95, i64* %PC, align 8, !tbaa !1257 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x555800f80148]:   %44 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555800f41108]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x555800f5ac50]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x555800ed0730]:   store i64 %5, i64* %3, align 8
[0x555800f346b0]:   store i64 %55, i64* %RDI.i13, align 8
[0x555800f34b10]:   store i64 %53, i64* %3, align 8
[0x555800f7ace0]:   store i64 %4, i64* %9, align 8
[0x555800f7bca0]:   store i64 %8, i64* %RBP.i, align 8
[0x555800f7c160]:   store i8 %69, i8* %14, align 1
[0x555800f7ca60]:   store i64 %11, i64* %6, align 8
[0x555800f7cf70]:   store i8 %13, i8* %14, align 1
[0x555800f7d3f0]:   store i8 %20, i8* %21, align 1
[0x555800f7e7e0]:   store i8 %26, i8* %27, align 1
[0x555800f8a760]:   store i8 %38, i8* %39, align 1
[0x555800f91170]:   store i64 %61, i64* %64, align 8
[0x555800f9a340]:   store i64 %60, i64* %3, align 8
[0x555800f9ead0]:   store i64 %57, i64* %3, align 8
[0x555800f9ebd0]:   store i64 %59, i64* %RSI.i, align 8
[0x555800f9f490]:   store i8 %29, i8* %30, align 1
[0x555800fa06f0]:   store i64 %63, i64* %6, align 8
[0x555800fa0d70]:   store i8 %32, i8* %33, align 1
[0x555800fa17a0]:   store i64 %67, i64* %6, align 8
[0x555800fa3c70]:   store i8 %84, i8* %33, align 1
[0x555800fa6460]:   store i8 %75, i8* %21, align 1
[0x555800fa6c40]:   store i64 %94, i64* %3, align 8
[0x555800fa8680]:   store i8 %80, i8* %27, align 1
[0x555800fa8b90]:   store i8 %82, i8* %30, align 1
[0x555800faa560]:   store i8 %89, i8* %39, align 1
[0x555800fb1360]:   store i64 %90, i64* %3, align 8
[0x555800fb19f0]:   store i64 %93, i64* %RBP.i, align 8
[0x555800fb1cf0]:   store i64 %91, i64* %6, align 8
[0x555800fb7f10]:   store i64 %96, i64* %3, align 8
[0x555800fb8e00]:   store i64 %97, i64* %6, align 8
[0x55580102ebd0]:   store i64 4195924, i64* %RAX.i16, align 8
[0x555801035180]:   store i64 %42, i64* %3, align 8
[0x55580103bbd0]:   store i64 %41, i64* %43, align 8
[0x55580103e6c0]:   store i64 %46, i64* %49, align 8
[0x55580103fb60]:   store i64 %48, i64* %3, align 8


Adj: [0x55580103ae00]:   %45 = add i64 %44, -16


Removing: [0x555800f81dd8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555800f41108]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x555800f5ac50]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x555800ed0730]:   store i64 %5, i64* %3, align 8
[0x555800f346b0]:   store i64 %55, i64* %RDI.i13, align 8
[0x555800f34b10]:   store i64 %53, i64* %3, align 8
[0x555800f7ace0]:   store i64 %4, i64* %9, align 8
[0x555800f7bca0]:   store i64 %8, i64* %RBP.i, align 8
[0x555800f7c160]:   store i8 %69, i8* %14, align 1
[0x555800f7ca60]:   store i64 %11, i64* %6, align 8
[0x555800f7cf70]:   store i8 %13, i8* %14, align 1
[0x555800f7d3f0]:   store i8 %20, i8* %21, align 1
[0x555800f7e7e0]:   store i8 %26, i8* %27, align 1
[0x555800f8a760]:   store i8 %38, i8* %39, align 1
[0x555800f91170]:   store i64 %61, i64* %64, align 8
[0x555800f9a340]:   store i64 %60, i64* %3, align 8
[0x555800f9ead0]:   store i64 %57, i64* %3, align 8
[0x555800f9ebd0]:   store i64 %59, i64* %RSI.i, align 8
[0x555800f9f490]:   store i8 %29, i8* %30, align 1
[0x555800fa06f0]:   store i64 %63, i64* %6, align 8
[0x555800fa0d70]:   store i8 %32, i8* %33, align 1
[0x555800fa17a0]:   store i64 %67, i64* %6, align 8
[0x555800fa3c70]:   store i8 %84, i8* %33, align 1
[0x555800fa6460]:   store i8 %75, i8* %21, align 1
[0x555800fa6c40]:   store i64 %94, i64* %3, align 8
[0x555800fa8680]:   store i8 %80, i8* %27, align 1
[0x555800fa8b90]:   store i8 %82, i8* %30, align 1
[0x555800faa560]:   store i8 %89, i8* %39, align 1
[0x555800fb1360]:   store i64 %90, i64* %3, align 8
[0x555800fb19f0]:   store i64 %93, i64* %RBP.i, align 8
[0x555800fb1cf0]:   store i64 %91, i64* %6, align 8
[0x555800fb7f10]:   store i64 %96, i64* %3, align 8
[0x555800fb8e00]:   store i64 %97, i64* %6, align 8
[0x55580102ebd0]:   store i64 4195924, i64* %RAX.i16, align 8
[0x555801035180]:   store i64 %42, i64* %3, align 8
[0x55580103bbd0]:   store i64 %41, i64* %43, align 8
[0x55580103e6c0]:   store i64 %46, i64* %49, align 8
[0x55580103fb60]:   store i64 %48, i64* %3, align 8


Adj: [0x555800ee3ec0]:   %56 = add i64 %50, -16
[0x555801041690]:   %51 = add i64 %50, -8


Removing: [0x555800f843d8]:   %62 = load i64, i64* %6, align 8
From the pot matches of: [0x555800f5aaf8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x555800f5c350]:   %38 = add i64 %5, -16


Uprime Matches: [0x555800ee3ec0]:   %56 = add i64 %50, -16
[0x555801033e70]:   %40 = add i64 %7, -16
[0x55580103ae00]:   %45 = add i64 %44, -16


Adj: [0x555800f9fb20]:   %63 = add i64 %62, -8


Removing: [0x555800f85348]:   %65 = load i64, i64* %6, align 8
From the pot matches of: [0x555800f5aaf8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x555800f5c350]:   %38 = add i64 %5, -16


Uprime Matches: [0x555800ee3ec0]:   %56 = add i64 %50, -16
[0x555801033e70]:   %40 = add i64 %7, -16
[0x55580103ae00]:   %45 = add i64 %44, -16


Adj: [0x555800f9ce60]:   %76 = xor i64 %65, 16
[0x555800fa25f0]:   %67 = add i64 %65, 16
[0x555800fa2b70]:   %68 = icmp ugt i64 %65, -17
[0x555800fa3d90]:   %85 = lshr i64 %65, 63
[0x555800fb1660]:   %91 = add i64 %65, 24
[0x555800fb89e0]:   %97 = add i64 %65, 32


Removing: [0x555800f80e58]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5acb8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x555800f5c470]:   %40 = add i64 %8, 21


Uprime Matches: [0x555801036690]:   %42 = add i64 %10, 21


Adj: [0x55580103d370]:   %48 = add i64 %47, 4


Removing: [0x555800f81f08]:   %52 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5acb8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x555800f5c470]:   %40 = add i64 %8, 21


Uprime Matches: [0x555801036690]:   %42 = add i64 %10, 21


Adj: [0x555800f9e700]:   %57 = add i64 %52, 8
[0x555800f9efc0]:   %60 = add i64 %52, -410
[0x555800f9f880]:   %61 = add i64 %52, 13
[0x555801045a60]:   %53 = add i64 %52, 4


Removing: [0x555800f85478]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5acb8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x555800f5c470]:   %40 = add i64 %8, 21


Uprime Matches: [0x555801036690]:   %42 = add i64 %10, 21


Adj: [0x555800fa9c20]:   %94 = add i64 %66, 6
[0x555800fb11e0]:   %90 = add i64 %66, 5


Removing: [0x555800f7a178]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f7d080]:   %16 = and i32 %15, 255


Removing: [0x555800f7f698]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800fa0d70]:   store i8 %32, i8* %33, align 1


Removing: [0x555800f81538]:   %84 = trunc i64 %83 to i8
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800fa3c70]:   store i8 %84, i8* %33, align 1


Removing: [0x555800f856d8]:   %70 = trunc i64 %67 to i32
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800fa39d0]:   %71 = and i32 %70, 255


Removing: [0x555800f7dc70]:   %26 = and i8 %25, 1
From the pot matches of: [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime : [0x555800f5b480]:   %18 = xor i8 %17, 1


Uprime Matches: [0x555800f9c400]:   %20 = xor i8 %19, 1
[0x555800fa6370]:   %75 = xor i8 %74, 1


Adj: [0x555800f7e7e0]:   store i8 %26, i8* %27, align 1


Removing: [0x555800f9d160]:   %80 = and i8 %79, 1
From the pot matches of: [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime : [0x555800f5b480]:   %18 = xor i8 %17, 1


Uprime Matches: [0x555800f9c400]:   %20 = xor i8 %19, 1
[0x555800fa6370]:   %75 = xor i8 %74, 1


Adj: [0x555800fa8680]:   store i8 %80, i8* %27, align 1


Removing: [0x555800f3b7b8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555800f5c638]:   %42 = load i64, i64* %RBP, align 8


Uprime : [0x555800f5c6b0]:   %43 = add i64 %42, -16


Uprime Matches: [0x555800ee3ec0]:   %56 = add i64 %50, -16
[0x555801033e70]:   %40 = add i64 %7, -16
[0x55580103ae00]:   %45 = add i64 %44, -16


Adj: [0x555800f7ace0]:   store i64 %4, i64* %9, align 8


Removing: [0x555800f77ea8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5c778]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x555800f5c7f0]:   %46 = add i64 %45, 4


Uprime Matches: [0x55580103d370]:   %48 = add i64 %47, 4
[0x555801045a60]:   %53 = add i64 %52, 4


Adj: [0x555801036690]:   %42 = add i64 %10, 21


Removing: [0x555800f85478]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5c778]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x555800f5c7f0]:   %46 = add i64 %45, 4


Uprime Matches: [0x55580103d370]:   %48 = add i64 %47, 4
[0x555801045a60]:   %53 = add i64 %52, 4


Adj: [0x555800fa9c20]:   %94 = add i64 %66, 6
[0x555800fb11e0]:   %90 = add i64 %66, 5


Removing: [0x555800f82e78]:   %58 = inttoptr i64 %56 to i64*
From the pot matches of: [0x555800f5c8d8]:   %47 = inttoptr i64 %43 to i64*


Uprime : [0x555800f5c950]:   store i64 %44, i64* %47, align 8


Uprime Matches: [0x55580103e6c0]:   store i64 %46, i64* %49, align 8


Adj: [0x555800f830d8]:   %59 = load i64, i64* %58, align 8


Removing: [0x555800f3b7b8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555800f5c9b8]:   %48 = load i64, i64* %RBP, align 8


Uprime : [0x555800f5cd50]:   %54 = add i64 %48, -16


Uprime Matches: [0x555800ee3ec0]:   %56 = add i64 %50, -16
[0x555801033e70]:   %40 = add i64 %7, -16
[0x55580103ae00]:   %45 = add i64 %44, -16


Adj: [0x555800f7ace0]:   store i64 %4, i64* %9, align 8


Removing: [0x555800f80148]:   %44 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555800f5c9b8]:   %48 = load i64, i64* %RBP, align 8


Uprime : [0x555800f5ca30]:   %49 = add i64 %48, -8


Uprime Matches: [0x555800f7abd0]:   %8 = add i64 %7, -8
[0x555800f9fb20]:   %63 = add i64 %62, -8
[0x555801041690]:   %51 = add i64 %50, -8


Adj: [0x55580103ae00]:   %45 = add i64 %44, -16


Removing: [0x555800f77ea8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5ca98]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x555800f5d0d0]:   %59 = add i64 %50, 13


Uprime Matches: [0x555800f9f880]:   %61 = add i64 %52, 13


Adj: [0x555801036690]:   %42 = add i64 %10, 21


Removing: [0x555800f80e58]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5ca98]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x555800f5d0d0]:   %59 = add i64 %50, 13


Uprime Matches: [0x555800f9f880]:   %61 = add i64 %52, 13


Adj: [0x55580103d370]:   %48 = add i64 %47, 4


Removing: [0x555800f85478]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5ca98]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x555800f5d0d0]:   %59 = add i64 %50, 13


Uprime Matches: [0x555800f9f880]:   %61 = add i64 %52, 13


Adj: [0x555800fa9c20]:   %94 = add i64 %66, 6
[0x555800fb11e0]:   %90 = add i64 %66, 5


Removing: [0x555800f7ec68]:   %49 = inttoptr i64 %45 to i64*
From the pot matches of: [0x555800f5ceb8]:   %56 = inttoptr i64 %54 to i64*


Uprime : [0x555800f5cf18]:   %57 = load i64, i64* %56, align 8


Uprime Matches: [0x555800f3b678]:   %7 = load i64, i64* %6, align 8
[0x555800f3b7b8]:   %4 = load i64, i64* %RBP.i, align 8
[0x555800f77ea8]:   %10 = load i64, i64* %3, align 8
[0x555800f7fc88]:   %41 = load i64, i64* %RDI.i13, align 8
[0x555800f80148]:   %44 = load i64, i64* %RBP.i, align 8
[0x555800f80d28]:   %46 = load i64, i64* %RAX.i16, align 8
[0x555800f80e58]:   %47 = load i64, i64* %3, align 8
[0x555800f81dd8]:   %50 = load i64, i64* %RBP.i, align 8
[0x555800f81f08]:   %52 = load i64, i64* %3, align 8
[0x555800f829b8]:   %55 = load i64, i64* %54, align 8
[0x555800f830d8]:   %59 = load i64, i64* %58, align 8
[0x555800f843d8]:   %62 = load i64, i64* %6, align 8
[0x555800f85348]:   %65 = load i64, i64* %6, align 8
[0x555800f85478]:   %66 = load i64, i64* %3, align 8
[0x555800f872e8]:   %93 = load i64, i64* %92, align 8
[0x555800f897b8]:   %96 = load i64, i64* %95, align 8


Adj: [0x55580103e6c0]:   store i64 %46, i64* %49, align 8


Removing: [0x555800f85348]:   %65 = load i64, i64* %6, align 8
From the pot matches of: [0x555800f5d138]:   %60 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x555800f5d1b0]:   %61 = add i64 %60, -8


Uprime Matches: [0x555800f7abd0]:   %8 = add i64 %7, -8
[0x555800f9fb20]:   %63 = add i64 %62, -8
[0x555801041690]:   %51 = add i64 %50, -8


Adj: [0x555800f9ce60]:   %76 = xor i64 %65, 16
[0x555800fa25f0]:   %67 = add i64 %65, 16
[0x555800fa2b70]:   %68 = icmp ugt i64 %65, -17
[0x555800fa3d90]:   %85 = lshr i64 %65, 63
[0x555800fb1660]:   %91 = add i64 %65, 24
[0x555800fb89e0]:   %97 = add i64 %65, 32


Removing: [0x555800f7abd0]:   %8 = add i64 %7, -8
From the pot matches of: [0x555800f5d1b0]:   %61 = add i64 %60, -8


Uprime : [0x555800f5d310]:   store i64 %61, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x555800f7ca60]:   store i64 %11, i64* %6, align 8
[0x555800fa06f0]:   store i64 %63, i64* %6, align 8
[0x555800fa17a0]:   store i64 %67, i64* %6, align 8
[0x555800fb1cf0]:   store i64 %91, i64* %6, align 8
[0x555800fb8e00]:   store i64 %97, i64* %6, align 8


Adj: [0x555800ee4b08]:   %9 = inttoptr i64 %8 to i64*
[0x555800f7bca0]:   store i64 %8, i64* %RBP.i, align 8
[0x555800f7ce60]:   %12 = icmp ult i64 %8, 16
[0x555800f7d5d0]:   %22 = xor i64 %8, 16
[0x555800fa3030]:   %34 = lshr i64 %8, 63


Removing: [0x555800f3b678]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x555800f5d628]:   %64 = load i64, i64* %RSP, align 8


Uprime : [0x555800f4d6e0]:   %96 = add i64 %64, 32


Uprime Matches: [0x555800fb89e0]:   %97 = add i64 %65, 32


Adj: [0x555800f7a230]:   %11 = add i64 %7, -24
[0x555800f7abd0]:   %8 = add i64 %7, -8
[0x555801033e70]:   %40 = add i64 %7, -16


Removing: [0x555800f843d8]:   %62 = load i64, i64* %6, align 8
From the pot matches of: [0x555800f5d628]:   %64 = load i64, i64* %RSP, align 8


Uprime : [0x555800f4d6e0]:   %96 = add i64 %64, 32


Uprime Matches: [0x555800fb89e0]:   %97 = add i64 %65, 32


Adj: [0x555800f9fb20]:   %63 = add i64 %62, -8


Removing: [0x555800f77ea8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5be88]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x555800f5eb90]:   %93 = add i64 %65, 6


Uprime Matches: [0x555800fa9c20]:   %94 = add i64 %66, 6


Adj: [0x555801036690]:   %42 = add i64 %10, 21


Removing: [0x555800f80e58]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5be88]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x555800f5eb90]:   %93 = add i64 %65, 6


Uprime Matches: [0x555800fa9c20]:   %94 = add i64 %66, 6


Adj: [0x55580103d370]:   %48 = add i64 %47, 4


Removing: [0x555800f81f08]:   %52 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5be88]:   %65 = load i64, i64* %PC, align 8


Uprime : [0x555800f5eb90]:   %93 = add i64 %65, 6


Uprime Matches: [0x555800fa9c20]:   %94 = add i64 %66, 6


Adj: [0x555800f9e700]:   %57 = add i64 %52, 8
[0x555800f9efc0]:   %60 = add i64 %52, -410
[0x555800f9f880]:   %61 = add i64 %52, 13
[0x555801045a60]:   %53 = add i64 %52, 4


Removing: [0x555800f7a178]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f7d080]:   %16 = and i32 %15, 255


Removing: [0x555800f7f698]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800fa0d70]:   store i8 %32, i8* %33, align 1


Removing: [0x555800f81538]:   %84 = trunc i64 %83 to i8
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800fa3c70]:   store i8 %84, i8* %33, align 1


Removing: [0x555800f856d8]:   %70 = trunc i64 %67 to i32
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800f7dc70]:   %26 = and i8 %25, 1
[0x555800f9d160]:   %80 = and i8 %79, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800fa39d0]:   %71 = and i32 %70, 255


Removing: [0x555800f7dc70]:   %26 = and i8 %25, 1
From the pot matches of: [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime : [0x555800f5ded0]:   %74 = xor i8 %73, 1


Uprime Matches: [0x555800f9c400]:   %20 = xor i8 %19, 1
[0x555800fa6370]:   %75 = xor i8 %74, 1


Adj: [0x555800f7e7e0]:   store i8 %26, i8* %27, align 1


Removing: [0x555800f9d160]:   %80 = and i8 %79, 1
From the pot matches of: [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime : [0x555800f5ded0]:   %74 = xor i8 %73, 1


Uprime Matches: [0x555800f9c400]:   %20 = xor i8 %19, 1
[0x555800fa6370]:   %75 = xor i8 %74, 1


Adj: [0x555800fa8680]:   store i8 %80, i8* %27, align 1

Round: 1

Removing: [0x555800f7eb38]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f7dc70]:   %26 = and i8 %25, 1


Removing: [0x555800f85a68]:   %79 = trunc i64 %78 to i8
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f9d160]:   %80 = and i8 %79, 1


Removing: [0x555800ee3ec0]:   %56 = add i64 %50, -16
From the pot matches of: [0x555800f5c6b0]:   %43 = add i64 %42, -16


Uprime : [0x555800f5c8d8]:   %47 = inttoptr i64 %43 to i64*


Uprime Matches: [0x555800f7ec68]:   %49 = inttoptr i64 %45 to i64*


Adj: [0x555800f82e78]:   %58 = inttoptr i64 %56 to i64*


Removing: [0x555800f3b678]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x555800f5d138]:   %60 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x555800f5d1b0]:   %61 = add i64 %60, -8


Uprime Matches: [0x555800f9fb20]:   %63 = add i64 %62, -8


Adj: [0x555800f7a230]:   %11 = add i64 %7, -24
[0x555800f7abd0]:   %8 = add i64 %7, -8
[0x555801033e70]:   %40 = add i64 %7, -16


Removing: [0x555800f7eb38]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f7dc70]:   %26 = and i8 %25, 1


Removing: [0x555800f85a68]:   %79 = trunc i64 %78 to i8
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1
[0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f9d160]:   %80 = and i8 %79, 1

Round: 2

Removing: [0x555800f81dd8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x555800f5c638]:   %42 = load i64, i64* %RBP, align 8


Uprime : [0x555800f5c6b0]:   %43 = add i64 %42, -16


Uprime Matches: [0x55580103ae00]:   %45 = add i64 %44, -16


Adj: [0x555800ee3ec0]:   %56 = add i64 %50, -16
[0x555801041690]:   %51 = add i64 %50, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x555800f41108]:   %3 = load i64, i64* %RBP, align 8 {
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x555800f4d6e0]:   %96 = add i64 %64, 32 {
	[0x555800fb89e0]:  %97 = add i64 %65, 32
	}

[0x555800f4d760]:   store i64 %96, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	}

[0x555800f4d7c8]:   ret %struct.Memory* %63 {
	[0x555800f8af78]:  ret %struct.Memory.31* %call2_4005c2
	}

[0x555800f53c40]: %struct.State* %0 {
	[0x555800fa4220]:%struct.State.0* %0
	}

[0x555800f54540]: i64 %1 {
	[0x555800f9d430]:i64 %1
	}

[0x555800f54580]: %struct.Memory* %2 {
	[0x555800fa0910]:%struct.Memory.31* %2
	}

[0x555800f5a420]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x555800f1cfd0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x555800f5a510]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x555800f1d900]:  %RAX.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x555800f5a600]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x555800f1eba0]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x555800f5a6f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x555800f1de90]:  %RDI.i13 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x555800f5a800]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x555800f1d770]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x555800f5a910]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x555800f1d370]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x555800f5a9c0]:   %4 = add i64 %1, 1 {
	[0x555800ed1010]:  %5 = add i64 %1, 1
	}

[0x555800f5aa90]:   store i64 %4, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	}

[0x555800f5aaf8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	}

[0x555800f5ab70]:   %6 = add i64 %5, -8 {
	[0x555800f7abd0]:  %8 = add i64 %7, -8
	}

[0x555800f5abd8]:   %7 = inttoptr i64 %6 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	}

[0x555800f5ac50]:   store i64 %3, i64* %7, align 8 {
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	}

[0x555800f5acb8]:   %8 = load i64, i64* %PC, align 8 {
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	}

[0x555800f5ad30]:   %17 = and i8 %16, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5adc0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x555800f5ae40]:   %9 = add i64 %5, -24 {
	[0x555800f7a230]:  %11 = add i64 %7, -24
	}

[0x555800f5aec0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	}

[0x555800f5af40]:   %10 = icmp ult i64 %6, 16 {
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	}

[0x555800f5afa8]:   %11 = zext i1 %10 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	}

[0x555800f5b050]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x555800f7a830]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x555800f5b0e0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	}

[0x555800f5b148]:   %13 = trunc i64 %9 to i32 {
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	}

[0x555800f5b1c0]:   %14 = and i32 %13, 255 {
	[0x555800f7d080]:  %16 = and i32 %15, 255
	}

[0x555800f5b280]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x555800f9dc90]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x555800f5b2f8]:   %16 = trunc i32 %15 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	}

[0x555800f5b370]:   %33 = xor i64 %29, %32 {
	[0x555800f8a3d0]:  %35 = xor i64 %31, %34
	}

[0x555800f5b3f0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x555800f8a500]:  %36 = add nuw nsw i64 %35, %34
	}

[0x555800f5b480]:   %18 = xor i8 %17, 1 {
	[0x555800f9c400]:  %20 = xor i8 %19, 1
	[0x555800fa6370]:  %75 = xor i8 %74, 1
	}

[0x555800f5b530]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x555800f7d4f0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x555800f5b5c0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	}

[0x555800f5b640]:   %20 = xor i64 %6, 16 {
	[0x555800f7d5d0]:  %22 = xor i64 %8, 16
	}

[0x555800f5b6c0]:   %21 = xor i64 %20, %9 {
	[0x555800f9cc80]:  %23 = xor i64 %22, %11
	}

[0x555800f5b740]:   %22 = lshr i64 %21, 4 {
	[0x555800f7db20]:  %24 = lshr i64 %23, 4
	}

[0x555800f5b7a8]:   %23 = trunc i64 %22 to i8 {
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	}

[0x555800f5b820]:   %24 = and i8 %23, 1 {
	[0x555800f7dc70]:  %26 = and i8 %25, 1
	}

[0x555800f5b8d0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x555800f80260]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x555800f5b960]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	}

[0x555800f5b9e0]:   %26 = icmp eq i64 %9, 0 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	}

[0x555800f5ba48]:   %27 = zext i1 %26 to i8 {
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	}

[0x555800f5baf0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x555800f7ed80]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x555800f5bb80]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	}

[0x555800f5bc00]:   %29 = lshr i64 %9, 63 {
	[0x555800fa0020]:  %31 = lshr i64 %11, 63
	}

[0x555800f5bc68]:   %30 = trunc i64 %29 to i8 {
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	}

[0x555800f5bd10]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x555800f85de0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x555800f5bda0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	}

[0x555800f5be20]:   %32 = lshr i64 %6, 63 {
	[0x555800fa3030]:  %34 = lshr i64 %8, 63
	}

[0x555800f5be88]:   %65 = load i64, i64* %PC, align 8 {
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	}

[0x555800f5bf00]:   %66 = add i64 %64, 16 {
	[0x555800fa25f0]:  %67 = add i64 %65, 16
	}

[0x555800f5bf80]:   store i64 %66, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	}

[0x555800f5c0b0]:   %35 = icmp eq i64 %34, 2 {
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	}

[0x555800f5c118]:   %36 = zext i1 %35 to i8 {
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	}

[0x555800f5c1c0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x555800f85f10]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x555800f5c250]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	}

[0x555800f5c2d0]:   store i64 add (i64 ptrtoint (%seg_400650__rodata_type* @seg_400650__rodata to i64), i64 4), i64* %RAX, align 8, !tbaa !1257 {
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	}

[0x555800f5c350]:   %38 = add i64 %5, -16 {
	[0x555801033e70]:  %40 = add i64 %7, -16
	}

[0x555800f5c3b8]:   %39 = load i64, i64* %RDI, align 8 {
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	}

[0x555800f5c470]:   %40 = add i64 %8, 21 {
	[0x555801036690]:  %42 = add i64 %10, 21
	}

[0x555800f5c4f0]:   store i64 %40, i64* %PC, align 8 {
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	}

[0x555800f5c558]:   %41 = inttoptr i64 %38 to i64* {
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	}

[0x555800f5c5d0]:   store i64 %39, i64* %41, align 8 {
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	}

[0x555800f5c638]:   %42 = load i64, i64* %RBP, align 8 {
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x555800f5c6b0]:   %43 = add i64 %42, -16 {
	[0x55580103ae00]:  %45 = add i64 %44, -16
	}

[0x555800f5c718]:   %44 = load i64, i64* %RAX, align 8 {
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	}

[0x555800f5c778]:   %45 = load i64, i64* %PC, align 8 {
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	}

[0x555800f5c7f0]:   %46 = add i64 %45, 4 {
	[0x55580103d370]:  %48 = add i64 %47, 4
	[0x555801045a60]:  %53 = add i64 %52, 4
	}

[0x555800f5c870]:   store i64 %46, i64* %PC, align 8 {
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c8d8]:   %47 = inttoptr i64 %43 to i64* {
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	}

[0x555800f5c950]:   store i64 %44, i64* %47, align 8 {
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	}

[0x555800f5c9b8]:   %48 = load i64, i64* %RBP, align 8 {
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x555800f5ca30]:   %49 = add i64 %48, -8 {
	[0x555801041690]:  %51 = add i64 %50, -8
	}

[0x555800f5ca98]:   %50 = load i64, i64* %PC, align 8 {
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	}

[0x555800f5cb10]:   %51 = add i64 %50, 4 {
	[0x555801045a60]:  %53 = add i64 %52, 4
	}

[0x555800f5cb90]:   store i64 %51, i64* %PC, align 8 {
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	}

[0x555800f5cbf8]:   %52 = inttoptr i64 %49 to i64* {
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	}

[0x555800f5cc58]:   %53 = load i64, i64* %52, align 8 {
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	}

[0x555800f5ccd0]:   store i64 %53, i64* %RDI, align 8, !tbaa !1257 {
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	}

[0x555800f5cd50]:   %54 = add i64 %48, -16 {
	[0x555800ee3ec0]:  %56 = add i64 %50, -16
	}

[0x555800f5cdd0]:   %55 = add i64 %50, 8 {
	[0x555800f9e700]:  %57 = add i64 %52, 8
	}

[0x555800f5ce50]:   store i64 %55, i64* %PC, align 8 {
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	}

[0x555800f5ceb8]:   %56 = inttoptr i64 %54 to i64* {
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	}

[0x555800f5cf18]:   %57 = load i64, i64* %56, align 8 {
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	}

[0x555800f5cf90]:   store i64 %57, i64* %RSI, align 8, !tbaa !1257 {
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	}

[0x555800f5d050]:   %58 = add i64 %50, -410 {
	[0x555800f9efc0]:  %60 = add i64 %52, -410
	}

[0x555800f5d0d0]:   %59 = add i64 %50, 13 {
	[0x555800f9f880]:  %61 = add i64 %52, 13
	}

[0x555800f5d138]:   %60 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	}

[0x555800f5d1b0]:   %61 = add i64 %60, -8 {
	[0x555800f9fb20]:  %63 = add i64 %62, -8
	}

[0x555800f5d218]:   %62 = inttoptr i64 %61 to i64* {
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	}

[0x555800f5d290]:   store i64 %59, i64* %62, align 8 {
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	}

[0x555800f5d310]:   store i64 %61, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	}

[0x555800f5d390]:   store i64 %58, i64* %PC, align 8, !tbaa !1257 {
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	}

[0x555800f5d568]:   %63 = tail call fastcc %struct.Memory* @ext_601068_strcmp(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x555800f86170]:  %call2_4005c2 = tail call %struct.Memory.31* @sub_400420.strcmp_plt(%struct.State.0* %0, i64 %60, %struct.Memory.31* %2)
	}

[0x555800f5d628]:   %64 = load i64, i64* %RSP, align 8 {
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	}

[0x555800f5dab0]:   %67 = icmp ugt i64 %64, -17 {
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	}

[0x555800f5db18]:   %68 = zext i1 %67 to i8 {
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	}

[0x555800f5db90]:   store i8 %68, i8* %12, align 1, !tbaa !1261 {
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	}

[0x555800f5dbf8]:   %69 = trunc i64 %66 to i32 {
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	}

[0x555800f5dc70]:   %70 = and i32 %69, 255 {
	[0x555800fa39d0]:  %71 = and i32 %70, 255
	}

[0x555800f5dd10]:   %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9 {
	[0x555800fa5810]:  %72 = tail call i32 @llvm.ctpop.i32(i32 %71)
	}

[0x555800f5ddd8]:   %72 = trunc i32 %71 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	}

[0x555800f5de50]:   %73 = and i8 %72, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5ded0]:   %74 = xor i8 %73, 1 {
	[0x555800f9c400]:  %20 = xor i8 %19, 1
	[0x555800fa6370]:  %75 = xor i8 %74, 1
	}

[0x555800f5df50]:   store i8 %74, i8* %19, align 1, !tbaa !1275 {
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	}

[0x555800f5dfd0]:   %75 = xor i64 %64, 16 {
	[0x555800f9ce60]:  %76 = xor i64 %65, 16
	}

[0x555800f5e050]:   %76 = xor i64 %75, %66 {
	[0x555800f9cfe0]:  %77 = xor i64 %76, %67
	}

[0x555800f5e0d0]:   %77 = lshr i64 %76, 4 {
	[0x555800f9d370]:  %78 = lshr i64 %77, 4
	}

[0x555800f5e138]:   %78 = trunc i64 %77 to i8 {
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5e1b0]:   %79 = and i8 %78, 1 {
	[0x555800f9d160]:  %80 = and i8 %79, 1
	}

[0x555800f5e230]:   store i8 %79, i8* %25, align 1, !tbaa !1276 {
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	}

[0x555800f5e2b0]:   %80 = icmp eq i64 %66, 0 {
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	}

[0x555800f5e318]:   %81 = zext i1 %80 to i8 {
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5e390]:   store i8 %81, i8* %28, align 1, !tbaa !1277 {
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	}

[0x555800f5e410]:   %82 = lshr i64 %66, 63 {
	[0x555800fa9480]:  %83 = lshr i64 %67, 63
	}

[0x555800f5e478]:   %83 = trunc i64 %82 to i8 {
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	}

[0x555800f5e4f0]:   store i8 %83, i8* %31, align 1, !tbaa !1278 {
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	}

[0x555800f5e570]:   %84 = lshr i64 %64, 63 {
	[0x555800fa3d90]:  %85 = lshr i64 %65, 63
	}

[0x555800f5e5f0]:   %85 = xor i64 %82, %84 {
	[0x555800faefb0]:  %86 = xor i64 %83, %85
	}

[0x555800f5e670]:   %86 = add nuw nsw i64 %85, %82 {
	[0x555800faf130]:  %87 = add nuw nsw i64 %86, %83
	}

[0x555800f5e6f0]:   %87 = icmp eq i64 %86, 2 {
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5e758]:   %88 = zext i1 %87 to i8 {
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	}

[0x555800f5e7d0]:   store i8 %88, i8* %37, align 1, !tbaa !1279 {
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	}

[0x555800f5e850]:   %89 = add i64 %65, 5 {
	[0x555800fb11e0]:  %90 = add i64 %66, 5
	}

[0x555800f5e8d0]:   store i64 %89, i64* %PC, align 8 {
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	}

[0x555800f5e950]:   %90 = add i64 %64, 24 {
	[0x555800fb1660]:  %91 = add i64 %65, 24
	}

[0x555800f5e9b8]:   %91 = inttoptr i64 %66 to i64* {
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	}

[0x555800f5ea18]:   %92 = load i64, i64* %91, align 8 {
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	}

[0x555800f5ea90]:   store i64 %92, i64* %RBP, align 8, !tbaa !1257 {
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	}

[0x555800f5eb10]:   store i64 %90, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	}

[0x555800f5eb90]:   %93 = add i64 %65, 6 {
	[0x555800fa9c20]:  %94 = add i64 %66, 6
	}

[0x555800f5ec10]:   store i64 %93, i64* %PC, align 8 {
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	}

[0x555800f5ec78]:   %94 = inttoptr i64 %90 to i64* {
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5ecd8]:   %95 = load i64, i64* %94, align 8 {
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ed50]:   store i64 %95, i64* %PC, align 8, !tbaa !1257 {
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x555800f545c0]: block_4005a0 {
	[0x555800f9aa50]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x555800fa6370]:   %75 = xor i8 %74, 1
From the pot matches of: [0x555800f5b480]:   %18 = xor i8 %17, 1


Uprime : [0x555800f5b5c0]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x555800f7d3f0]:   store i8 %20, i8* %21, align 1


Adj: [0x555800fa6460]:   store i8 %75, i8* %21, align 1


Removing: [0x555801045a60]:   %53 = add i64 %52, 4
From the pot matches of: [0x555800f5c7f0]:   %46 = add i64 %45, 4


Uprime : [0x555800f5c870]:   store i64 %46, i64* %PC, align 8


Uprime Matches: [0x55580103fb60]:   store i64 %48, i64* %3, align 8


Adj: [0x555800f34b10]:   store i64 %53, i64* %3, align 8


Removing: [0x555800f9c400]:   %20 = xor i8 %19, 1
From the pot matches of: [0x555800f5ded0]:   %74 = xor i8 %73, 1


Uprime : [0x555800f5df50]:   store i8 %74, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x555800fa6460]:   store i8 %75, i8* %21, align 1


Adj: [0x555800f7d3f0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x555800fa5d20]:   %74 = and i8 %73, 1
From the pot matches of: [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime : [0x555800f5b480]:   %18 = xor i8 %17, 1


Uprime Matches: [0x555800f9c400]:   %20 = xor i8 %19, 1


Adj: [0x555800fa6370]:   %75 = xor i8 %74, 1


Removing: [0x555800f81f08]:   %52 = load i64, i64* %3, align 8
From the pot matches of: [0x555800f5c778]:   %45 = load i64, i64* %PC, align 8


Uprime : [0x555800f5c7f0]:   %46 = add i64 %45, 4


Uprime Matches: [0x55580103d370]:   %48 = add i64 %47, 4


Adj: [0x555800f9e700]:   %57 = add i64 %52, 8
[0x555800f9efc0]:   %60 = add i64 %52, -410
[0x555800f9f880]:   %61 = add i64 %52, 13
[0x555801045a60]:   %53 = add i64 %52, 4


Removing: [0x555800f7d190]:   %19 = and i8 %18, 1
From the pot matches of: [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime : [0x555800f5ded0]:   %74 = xor i8 %73, 1


Uprime Matches: [0x555800fa6370]:   %75 = xor i8 %74, 1


Adj: [0x555800f9c400]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x555800f85938]:   %73 = trunc i32 %72 to i8
From the pot matches of: [0x555800f5b2f8]:   %16 = trunc i32 %15 to i8


Uprime : [0x555800f5ad30]:   %17 = and i8 %16, 1


Uprime Matches: [0x555800f7d190]:   %19 = and i8 %18, 1


Adj: [0x555800fa5d20]:   %74 = and i8 %73, 1


Removing: [0x555800f798d8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x555800f5ddd8]:   %72 = trunc i32 %71 to i8


Uprime : [0x555800f5de50]:   %73 = and i8 %72, 1


Uprime Matches: [0x555800fa5d20]:   %74 = and i8 %73, 1


Adj: [0x555800f7d190]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x555800f41108]:   %3 = load i64, i64* %RBP, align 8 {
	[0x555800f3b7b8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x555800f4d6e0]:   %96 = add i64 %64, 32 {
	[0x555800fb89e0]:  %97 = add i64 %65, 32
	}

[0x555800f4d760]:   store i64 %96, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fb8e00]:  store i64 %97, i64* %6, align 8
	}

[0x555800f4d7c8]:   ret %struct.Memory* %63 {
	[0x555800f8af78]:  ret %struct.Memory.31* %call2_4005c2
	}

[0x555800f53c40]: %struct.State* %0 {
	[0x555800fa4220]:%struct.State.0* %0
	}

[0x555800f54540]: i64 %1 {
	[0x555800f9d430]:i64 %1
	}

[0x555800f54580]: %struct.Memory* %2 {
	[0x555800fa0910]:%struct.Memory.31* %2
	}

[0x555800f5a420]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x555800f1cfd0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x555800f5a510]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x555800f1d900]:  %RAX.i16 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x555800f5a600]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x555800f1eba0]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x555800f5a6f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x555800f1de90]:  %RDI.i13 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x555800f5a800]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x555800f1d770]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x555800f5a910]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x555800f1d370]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x555800f5a9c0]:   %4 = add i64 %1, 1 {
	[0x555800ed1010]:  %5 = add i64 %1, 1
	}

[0x555800f5aa90]:   store i64 %4, i64* %PC, align 8 {
	[0x555800ed0730]:  store i64 %5, i64* %3, align 8
	}

[0x555800f5aaf8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f3b678]:  %7 = load i64, i64* %6, align 8
	}

[0x555800f5ab70]:   %6 = add i64 %5, -8 {
	[0x555800f7abd0]:  %8 = add i64 %7, -8
	}

[0x555800f5abd8]:   %7 = inttoptr i64 %6 to i64* {
	[0x555800ee4b08]:  %9 = inttoptr i64 %8 to i64*
	}

[0x555800f5ac50]:   store i64 %3, i64* %7, align 8 {
	[0x555800f7ace0]:  store i64 %4, i64* %9, align 8
	}

[0x555800f5acb8]:   %8 = load i64, i64* %PC, align 8 {
	[0x555800f77ea8]:  %10 = load i64, i64* %3, align 8
	}

[0x555800f5ad30]:   %17 = and i8 %16, 1 {
	[0x555800f7d190]:  %19 = and i8 %18, 1
	}

[0x555800f5adc0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x555800f7bca0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x555800f5ae40]:   %9 = add i64 %5, -24 {
	[0x555800f7a230]:  %11 = add i64 %7, -24
	}

[0x555800f5aec0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f7ca60]:  store i64 %11, i64* %6, align 8
	}

[0x555800f5af40]:   %10 = icmp ult i64 %6, 16 {
	[0x555800f7ce60]:  %12 = icmp ult i64 %8, 16
	}

[0x555800f5afa8]:   %11 = zext i1 %10 to i8 {
	[0x555800f77f38]:  %13 = zext i1 %12 to i8
	}

[0x555800f5b050]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x555800f7a830]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x555800f5b0e0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x555800f7cf70]:  store i8 %13, i8* %14, align 1
	}

[0x555800f5b148]:   %13 = trunc i64 %9 to i32 {
	[0x555800f7a178]:  %15 = trunc i64 %11 to i32
	}

[0x555800f5b1c0]:   %14 = and i32 %13, 255 {
	[0x555800f7d080]:  %16 = and i32 %15, 255
	}

[0x555800f5b280]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x555800f9dc90]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x555800f5b2f8]:   %16 = trunc i32 %15 to i8 {
	[0x555800f798d8]:  %18 = trunc i32 %17 to i8
	}

[0x555800f5b370]:   %33 = xor i64 %29, %32 {
	[0x555800f8a3d0]:  %35 = xor i64 %31, %34
	}

[0x555800f5b3f0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x555800f8a500]:  %36 = add nuw nsw i64 %35, %34
	}

[0x555800f5b480]:   %18 = xor i8 %17, 1 {
	[0x555800f9c400]:  %20 = xor i8 %19, 1
	}

[0x555800f5b530]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x555800f7d4f0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x555800f5b5c0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x555800f7d3f0]:  store i8 %20, i8* %21, align 1
	}

[0x555800f5b640]:   %20 = xor i64 %6, 16 {
	[0x555800f7d5d0]:  %22 = xor i64 %8, 16
	}

[0x555800f5b6c0]:   %21 = xor i64 %20, %9 {
	[0x555800f9cc80]:  %23 = xor i64 %22, %11
	}

[0x555800f5b740]:   %22 = lshr i64 %21, 4 {
	[0x555800f7db20]:  %24 = lshr i64 %23, 4
	}

[0x555800f5b7a8]:   %23 = trunc i64 %22 to i8 {
	[0x555800f7eb38]:  %25 = trunc i64 %24 to i8
	}

[0x555800f5b820]:   %24 = and i8 %23, 1 {
	[0x555800f7dc70]:  %26 = and i8 %25, 1
	}

[0x555800f5b8d0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x555800f80260]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x555800f5b960]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x555800f7e7e0]:  store i8 %26, i8* %27, align 1
	}

[0x555800f5b9e0]:   %26 = icmp eq i64 %9, 0 {
	[0x555800f7c070]:  %28 = icmp eq i64 %11, 0
	}

[0x555800f5ba48]:   %27 = zext i1 %26 to i8 {
	[0x555800f7f568]:  %29 = zext i1 %28 to i8
	}

[0x555800f5baf0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x555800f7ed80]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x555800f5bb80]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x555800f9f490]:  store i8 %29, i8* %30, align 1
	}

[0x555800f5bc00]:   %29 = lshr i64 %9, 63 {
	[0x555800fa0020]:  %31 = lshr i64 %11, 63
	}

[0x555800f5bc68]:   %30 = trunc i64 %29 to i8 {
	[0x555800f7f698]:  %32 = trunc i64 %31 to i8
	}

[0x555800f5bd10]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x555800f85de0]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x555800f5bda0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x555800fa0d70]:  store i8 %32, i8* %33, align 1
	}

[0x555800f5be20]:   %32 = lshr i64 %6, 63 {
	[0x555800fa3030]:  %34 = lshr i64 %8, 63
	}

[0x555800f5be88]:   %65 = load i64, i64* %PC, align 8 {
	[0x555800f85478]:  %66 = load i64, i64* %3, align 8
	}

[0x555800f5bf00]:   %66 = add i64 %64, 16 {
	[0x555800fa25f0]:  %67 = add i64 %65, 16
	}

[0x555800f5bf80]:   store i64 %66, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fa17a0]:  store i64 %67, i64* %6, align 8
	}

[0x555800f5c0b0]:   %35 = icmp eq i64 %34, 2 {
	[0x555800f8a630]:  %37 = icmp eq i64 %36, 2
	}

[0x555800f5c118]:   %36 = zext i1 %35 to i8 {
	[0x555800f7f7c8]:  %38 = zext i1 %37 to i8
	}

[0x555800f5c1c0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x555800f85f10]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x555800f5c250]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x555800f8a760]:  store i8 %38, i8* %39, align 1
	}

[0x555800f5c2d0]:   store i64 add (i64 ptrtoint (%seg_400650__rodata_type* @seg_400650__rodata to i64), i64 4), i64* %RAX, align 8, !tbaa !1257 {
	[0x55580102ebd0]:  store i64 4195924, i64* %RAX.i16, align 8
	}

[0x555800f5c350]:   %38 = add i64 %5, -16 {
	[0x555801033e70]:  %40 = add i64 %7, -16
	}

[0x555800f5c3b8]:   %39 = load i64, i64* %RDI, align 8 {
	[0x555800f7fc88]:  %41 = load i64, i64* %RDI.i13, align 8
	}

[0x555800f5c470]:   %40 = add i64 %8, 21 {
	[0x555801036690]:  %42 = add i64 %10, 21
	}

[0x555800f5c4f0]:   store i64 %40, i64* %PC, align 8 {
	[0x555801035180]:  store i64 %42, i64* %3, align 8
	}

[0x555800f5c558]:   %41 = inttoptr i64 %38 to i64* {
	[0x555800f80018]:  %43 = inttoptr i64 %40 to i64*
	}

[0x555800f5c5d0]:   store i64 %39, i64* %41, align 8 {
	[0x55580103bbd0]:  store i64 %41, i64* %43, align 8
	}

[0x555800f5c638]:   %42 = load i64, i64* %RBP, align 8 {
	[0x555800f80148]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x555800f5c6b0]:   %43 = add i64 %42, -16 {
	[0x55580103ae00]:  %45 = add i64 %44, -16
	}

[0x555800f5c718]:   %44 = load i64, i64* %RAX, align 8 {
	[0x555800f80d28]:  %46 = load i64, i64* %RAX.i16, align 8
	}

[0x555800f5c778]:   %45 = load i64, i64* %PC, align 8 {
	[0x555800f80e58]:  %47 = load i64, i64* %3, align 8
	}

[0x555800f5c7f0]:   %46 = add i64 %45, 4 {
	[0x55580103d370]:  %48 = add i64 %47, 4
	}

[0x555800f5c870]:   store i64 %46, i64* %PC, align 8 {
	[0x55580103fb60]:  store i64 %48, i64* %3, align 8
	}

[0x555800f5c8d8]:   %47 = inttoptr i64 %43 to i64* {
	[0x555800f7ec68]:  %49 = inttoptr i64 %45 to i64*
	}

[0x555800f5c950]:   store i64 %44, i64* %47, align 8 {
	[0x55580103e6c0]:  store i64 %46, i64* %49, align 8
	}

[0x555800f5c9b8]:   %48 = load i64, i64* %RBP, align 8 {
	[0x555800f81dd8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x555800f5ca30]:   %49 = add i64 %48, -8 {
	[0x555801041690]:  %51 = add i64 %50, -8
	}

[0x555800f5ca98]:   %50 = load i64, i64* %PC, align 8 {
	[0x555800f81f08]:  %52 = load i64, i64* %3, align 8
	}

[0x555800f5cb10]:   %51 = add i64 %50, 4 {
	[0x555801045a60]:  %53 = add i64 %52, 4
	}

[0x555800f5cb90]:   store i64 %51, i64* %PC, align 8 {
	[0x555800f34b10]:  store i64 %53, i64* %3, align 8
	}

[0x555800f5cbf8]:   %52 = inttoptr i64 %49 to i64* {
	[0x555800f82888]:  %54 = inttoptr i64 %51 to i64*
	}

[0x555800f5cc58]:   %53 = load i64, i64* %52, align 8 {
	[0x555800f829b8]:  %55 = load i64, i64* %54, align 8
	}

[0x555800f5ccd0]:   store i64 %53, i64* %RDI, align 8, !tbaa !1257 {
	[0x555800f346b0]:  store i64 %55, i64* %RDI.i13, align 8
	}

[0x555800f5cd50]:   %54 = add i64 %48, -16 {
	[0x555800ee3ec0]:  %56 = add i64 %50, -16
	}

[0x555800f5cdd0]:   %55 = add i64 %50, 8 {
	[0x555800f9e700]:  %57 = add i64 %52, 8
	}

[0x555800f5ce50]:   store i64 %55, i64* %PC, align 8 {
	[0x555800f9ead0]:  store i64 %57, i64* %3, align 8
	}

[0x555800f5ceb8]:   %56 = inttoptr i64 %54 to i64* {
	[0x555800f82e78]:  %58 = inttoptr i64 %56 to i64*
	}

[0x555800f5cf18]:   %57 = load i64, i64* %56, align 8 {
	[0x555800f830d8]:  %59 = load i64, i64* %58, align 8
	}

[0x555800f5cf90]:   store i64 %57, i64* %RSI, align 8, !tbaa !1257 {
	[0x555800f9ebd0]:  store i64 %59, i64* %RSI.i, align 8
	}

[0x555800f5d050]:   %58 = add i64 %50, -410 {
	[0x555800f9efc0]:  %60 = add i64 %52, -410
	}

[0x555800f5d0d0]:   %59 = add i64 %50, 13 {
	[0x555800f9f880]:  %61 = add i64 %52, 13
	}

[0x555800f5d138]:   %60 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800f843d8]:  %62 = load i64, i64* %6, align 8
	}

[0x555800f5d1b0]:   %61 = add i64 %60, -8 {
	[0x555800f9fb20]:  %63 = add i64 %62, -8
	}

[0x555800f5d218]:   %62 = inttoptr i64 %61 to i64* {
	[0x555800f850e8]:  %64 = inttoptr i64 %63 to i64*
	}

[0x555800f5d290]:   store i64 %59, i64* %62, align 8 {
	[0x555800f91170]:  store i64 %61, i64* %64, align 8
	}

[0x555800f5d310]:   store i64 %61, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fa06f0]:  store i64 %63, i64* %6, align 8
	}

[0x555800f5d390]:   store i64 %58, i64* %PC, align 8, !tbaa !1257 {
	[0x555800f9a340]:  store i64 %60, i64* %3, align 8
	}

[0x555800f5d568]:   %63 = tail call fastcc %struct.Memory* @ext_601068_strcmp(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x555800f86170]:  %call2_4005c2 = tail call %struct.Memory.31* @sub_400420.strcmp_plt(%struct.State.0* %0, i64 %60, %struct.Memory.31* %2)
	}

[0x555800f5d628]:   %64 = load i64, i64* %RSP, align 8 {
	[0x555800f85348]:  %65 = load i64, i64* %6, align 8
	}

[0x555800f5dab0]:   %67 = icmp ugt i64 %64, -17 {
	[0x555800fa2b70]:  %68 = icmp ugt i64 %65, -17
	}

[0x555800f5db18]:   %68 = zext i1 %67 to i8 {
	[0x555800f855a8]:  %69 = zext i1 %68 to i8
	}

[0x555800f5db90]:   store i8 %68, i8* %12, align 1, !tbaa !1261 {
	[0x555800f7c160]:  store i8 %69, i8* %14, align 1
	}

[0x555800f5dbf8]:   %69 = trunc i64 %66 to i32 {
	[0x555800f856d8]:  %70 = trunc i64 %67 to i32
	}

[0x555800f5dc70]:   %70 = and i32 %69, 255 {
	[0x555800fa39d0]:  %71 = and i32 %70, 255
	}

[0x555800f5dd10]:   %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9 {
	[0x555800fa5810]:  %72 = tail call i32 @llvm.ctpop.i32(i32 %71)
	}

[0x555800f5ddd8]:   %72 = trunc i32 %71 to i8 {
	[0x555800f85938]:  %73 = trunc i32 %72 to i8
	}

[0x555800f5de50]:   %73 = and i8 %72, 1 {
	[0x555800fa5d20]:  %74 = and i8 %73, 1
	}

[0x555800f5ded0]:   %74 = xor i8 %73, 1 {
	[0x555800fa6370]:  %75 = xor i8 %74, 1
	}

[0x555800f5df50]:   store i8 %74, i8* %19, align 1, !tbaa !1275 {
	[0x555800fa6460]:  store i8 %75, i8* %21, align 1
	}

[0x555800f5dfd0]:   %75 = xor i64 %64, 16 {
	[0x555800f9ce60]:  %76 = xor i64 %65, 16
	}

[0x555800f5e050]:   %76 = xor i64 %75, %66 {
	[0x555800f9cfe0]:  %77 = xor i64 %76, %67
	}

[0x555800f5e0d0]:   %77 = lshr i64 %76, 4 {
	[0x555800f9d370]:  %78 = lshr i64 %77, 4
	}

[0x555800f5e138]:   %78 = trunc i64 %77 to i8 {
	[0x555800f85a68]:  %79 = trunc i64 %78 to i8
	}

[0x555800f5e1b0]:   %79 = and i8 %78, 1 {
	[0x555800f9d160]:  %80 = and i8 %79, 1
	}

[0x555800f5e230]:   store i8 %79, i8* %25, align 1, !tbaa !1276 {
	[0x555800fa8680]:  store i8 %80, i8* %27, align 1
	}

[0x555800f5e2b0]:   %80 = icmp eq i64 %66, 0 {
	[0x555800fa8e90]:  %81 = icmp eq i64 %67, 0
	}

[0x555800f5e318]:   %81 = zext i1 %80 to i8 {
	[0x555800f85cc8]:  %82 = zext i1 %81 to i8
	}

[0x555800f5e390]:   store i8 %81, i8* %28, align 1, !tbaa !1277 {
	[0x555800fa8b90]:  store i8 %82, i8* %30, align 1
	}

[0x555800f5e410]:   %82 = lshr i64 %66, 63 {
	[0x555800fa9480]:  %83 = lshr i64 %67, 63
	}

[0x555800f5e478]:   %83 = trunc i64 %82 to i8 {
	[0x555800f81538]:  %84 = trunc i64 %83 to i8
	}

[0x555800f5e4f0]:   store i8 %83, i8* %31, align 1, !tbaa !1278 {
	[0x555800fa3c70]:  store i8 %84, i8* %33, align 1
	}

[0x555800f5e570]:   %84 = lshr i64 %64, 63 {
	[0x555800fa3d90]:  %85 = lshr i64 %65, 63
	}

[0x555800f5e5f0]:   %85 = xor i64 %82, %84 {
	[0x555800faefb0]:  %86 = xor i64 %83, %85
	}

[0x555800f5e670]:   %86 = add nuw nsw i64 %85, %82 {
	[0x555800faf130]:  %87 = add nuw nsw i64 %86, %83
	}

[0x555800f5e6f0]:   %87 = icmp eq i64 %86, 2 {
	[0x555800faf430]:  %88 = icmp eq i64 %87, 2
	}

[0x555800f5e758]:   %88 = zext i1 %87 to i8 {
	[0x555800f818c8]:  %89 = zext i1 %88 to i8
	}

[0x555800f5e7d0]:   store i8 %88, i8* %37, align 1, !tbaa !1279 {
	[0x555800faa560]:  store i8 %89, i8* %39, align 1
	}

[0x555800f5e850]:   %89 = add i64 %65, 5 {
	[0x555800fb11e0]:  %90 = add i64 %66, 5
	}

[0x555800f5e8d0]:   store i64 %89, i64* %PC, align 8 {
	[0x555800fb1360]:  store i64 %90, i64* %3, align 8
	}

[0x555800f5e950]:   %90 = add i64 %64, 24 {
	[0x555800fb1660]:  %91 = add i64 %65, 24
	}

[0x555800f5e9b8]:   %91 = inttoptr i64 %66 to i64* {
	[0x555800f871b8]:  %92 = inttoptr i64 %67 to i64*
	}

[0x555800f5ea18]:   %92 = load i64, i64* %91, align 8 {
	[0x555800f872e8]:  %93 = load i64, i64* %92, align 8
	}

[0x555800f5ea90]:   store i64 %92, i64* %RBP, align 8, !tbaa !1257 {
	[0x555800fb19f0]:  store i64 %93, i64* %RBP.i, align 8
	}

[0x555800f5eb10]:   store i64 %90, i64* %RSP, align 8, !tbaa !1257 {
	[0x555800fb1cf0]:  store i64 %91, i64* %6, align 8
	}

[0x555800f5eb90]:   %93 = add i64 %65, 6 {
	[0x555800fa9c20]:  %94 = add i64 %66, 6
	}

[0x555800f5ec10]:   store i64 %93, i64* %PC, align 8 {
	[0x555800fa6c40]:  store i64 %94, i64* %3, align 8
	}

[0x555800f5ec78]:   %94 = inttoptr i64 %90 to i64* {
	[0x555800f885e8]:  %95 = inttoptr i64 %91 to i64*
	}

[0x555800f5ecd8]:   %95 = load i64, i64* %94, align 8 {
	[0x555800f897b8]:  %96 = load i64, i64* %95, align 8
	}

[0x555800f5ed50]:   store i64 %95, i64* %PC, align 8, !tbaa !1257 {
	[0x555800fb7f10]:  store i64 %96, i64* %3, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x555800f545c0]: block_4005a0 {
	[0x555800f9aa50]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [checkFn] from mcsema/test.opt.ll
Extracting function [checkFn] from mcsema/test.proposed.opt.ll
Matcher Done...
