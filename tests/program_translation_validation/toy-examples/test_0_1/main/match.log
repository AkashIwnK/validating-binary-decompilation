Matching sub_400500_main Vs main


[Info] Retrieve Potential Matches...
[0x56461167b660]: %struct.State* %0 {
	[0x56461168b850]:%struct.State.1* %0
	}

[0x56461167b6a0]: i64 %1 {
	[0x56461168c280]:i64 %1
	}

[0x56461167b6e0]: %struct.Memory* %2 {
	[0x56461168ccd0]:%struct.Memory.32* %2
	}

[0x56461167b898]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5646116fdc18]:  %AL.i = bitcast %union.anon.5* %43 to i8*
	[0x5646116fe0d8]:  %EAX.i = bitcast %union.anon.5* %43 to i32*
	[0x5646117395c8]:  %ECX.i9 = bitcast %union.anon.5* %50 to i32*
	}

[0x56461167b970]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56461166b0a0]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56461167b9e8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5646116fdc18]:  %AL.i = bitcast %union.anon.5* %43 to i8*
	[0x5646116fe0d8]:  %EAX.i = bitcast %union.anon.5* %43 to i32*
	[0x5646117395c8]:  %ECX.i9 = bitcast %union.anon.5* %50 to i32*
	}

[0x56461167bab8]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5646116fdc18]:  %AL.i = bitcast %union.anon.5* %43 to i8*
	[0x5646116fe0d8]:  %EAX.i = bitcast %union.anon.5* %43 to i32*
	[0x5646117395c8]:  %ECX.i9 = bitcast %union.anon.5* %50 to i32*
	}

[0x56461167bb68]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x564611668d48]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %43, i64 0, i32 0
	[0x56461166d368]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %50, i64 0, i32 0
	}

[0x56461167bc28]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x564611668d48]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %43, i64 0, i32 0
	[0x56461166d368]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %50, i64 0, i32 0
	}

[0x56461167bd30]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5646116f0e10]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x56461167be40]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5646116f3170]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56461167bf50]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5646116f3340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56461167bfe8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167c060]:   %6 = add i64 %1, 1 {
	[0x564611688070]:  %5 = add i64 %1, 1
	}

[0x56461167c0e0]:   store i64 %6, i64* %PC, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c148]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167c1c0]:   %8 = add i64 %7, -8 {
	[0x56461168da00]:  %53 = add i64 %52, -8
	[0x5646116fdae0]:  %48 = add i64 %47, -8
	[0x5646117118b0]:  %8 = add i64 %7, -8
	}

[0x56461167c240]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x564611688510]:  %call2_40051b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %45, %struct.Memory.32* %2)
	[0x5646116d7630]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x564611719e80]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x56461167c2b8]:   %9 = inttoptr i64 %8 to i64* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x56461167c330]:   store i64 %5, i64* %9, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c398]:   %10 = load i64, i64* %PC, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167c410]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c490]:   %11 = add i64 %7, -24 {
	[0x564611735ce0]:  %11 = add i64 %7, -24
	}

[0x56461167c510]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c590]:   %12 = icmp ult i64 %8, 16 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x56461167c5f8]:   %13 = zext i1 %12 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167c6a0]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5646117d2330]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x56461167c730]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c798]:   %15 = trunc i64 %11 to i32 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167c810]:   %16 = and i32 %15, 255 {
	[0x56461168fff0]:  %65 = and i32 %64, 255
	[0x5646116fcc00]:  %16 = and i32 %15, 255
	}

[0x56461167c8b8]:   %18 = trunc i32 %17 to i8 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167c930]:   %19 = and i8 %18, 1 {
	[0x56461168b400]:  %26 = and i8 %25, 1
	[0x56461168e820]:  %68 = and i8 %67, 1
	[0x5646116931c0]:  %74 = and i8 %73, 1
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x56461167c9b0]:   %20 = xor i8 %19, 1 {
	[0x564611689a20]:  %20 = xor i8 %19, 1
	[0x56461168fda0]:  %69 = xor i8 %68, 1
	}

[0x56461167ca60]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5646116e8730]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x56461167caf0]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167cb70]:   %22 = xor i64 %8, 16 {
	[0x5646116898d0]:  %22 = xor i64 %8, 16
	[0x56461168e3e0]:  %70 = xor i64 %60, 16
	}

[0x56461167cbf0]:   %23 = xor i64 %22, %11 {
	[0x56461168aeb0]:  %80 = xor i64 %77, %79
	[0x56461168bea0]:  %35 = xor i64 %31, %34
	[0x56461168e750]:  %71 = xor i64 %70, %61
	[0x56461173a4d0]:  %23 = xor i64 %22, %11
	}

[0x56461167cc70]:   %24 = lshr i64 %23, 4 {
	[0x56461168b560]:  %24 = lshr i64 %23, 4
	[0x5646116933a0]:  %72 = lshr i64 %71, 4
	}

[0x56461167ccd8]:   %25 = trunc i64 %24 to i8 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167cd50]:   %26 = and i8 %25, 1 {
	[0x56461168b400]:  %26 = and i8 %25, 1
	[0x56461168e820]:  %68 = and i8 %67, 1
	[0x5646116931c0]:  %74 = and i8 %73, 1
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x56461167ce00]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5646116907b0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x56461167ce90]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167cf10]:   %28 = icmp eq i64 %11, 0 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x56461167cf78]:   %29 = zext i1 %28 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167d020]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56461168cdf0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x56461167d0b0]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167d130]:   %31 = lshr i64 %11, 63 {
	[0x5646116912f0]:  %77 = lshr i64 %61, 63
	[0x5646116934f0]:  %79 = lshr i64 %60, 63
	[0x5646116fd370]:  %34 = lshr i64 %8, 63
	[0x56461173a6d0]:  %31 = lshr i64 %11, 63
	}

[0x56461167d198]:   %32 = trunc i64 %31 to i8 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167d240]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56461168cb80]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x56461167d2d0]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167d350]:   %34 = lshr i64 %8, 63 {
	[0x5646116912f0]:  %77 = lshr i64 %61, 63
	[0x5646116934f0]:  %79 = lshr i64 %60, 63
	[0x5646116fd370]:  %34 = lshr i64 %8, 63
	[0x56461173a6d0]:  %31 = lshr i64 %11, 63
	}

[0x56461167d3d0]:   %35 = xor i64 %31, %34 {
	[0x56461168aeb0]:  %80 = xor i64 %77, %79
	[0x56461168bea0]:  %35 = xor i64 %31, %34
	[0x56461168e750]:  %71 = xor i64 %70, %61
	[0x56461173a4d0]:  %23 = xor i64 %22, %11
	}

[0x56461167d450]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56461168ad50]:  %81 = add nuw nsw i64 %80, %77
	[0x5646116fd7b0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x56461167d4d0]:   %37 = icmp eq i64 %36, 2 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x56461167d538]:   %38 = zext i1 %37 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167d5e0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56461168b670]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x56461167d670]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167d790]:   store i64 add (i64 ptrtoint (%seg_4005b0__rodata_type* @seg_4005b0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167d850]:   %40 = add i64 %7, -12 {
	[0x56461168bbf0]:  %40 = add i64 %7, -12
	}

[0x56461167d8d0]:   %41 = add i64 %10, 24 {
	[0x56461168ba90]:  %41 = add i64 %10, 24
	[0x5646116937b0]:  %85 = add i64 %60, 24
	}

[0x56461167d950]:   store i64 %41, i64* %PC, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167d9b8]:   %42 = inttoptr i64 %40 to i32* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x56461167da30]:   store i32 0, i32* %42, align 4 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167da98]:   %43 = load i64, i64* %PC, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167db10]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167dbd0]:   %44 = add i64 %43, -281 {
	[0x56461168c570]:  %45 = add i64 %44, -281
	}

[0x56461167dc50]:   %45 = add i64 %43, 7 {
	[0x56461168a900]:  %84 = add i64 %59, 7
	[0x56461168c410]:  %46 = add i64 %44, 7
	}

[0x56461167dcb8]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167dd30]:   %47 = add i64 %46, -8 {
	[0x56461168da00]:  %53 = add i64 %52, -8
	[0x5646116fdae0]:  %48 = add i64 %47, -8
	[0x5646117118b0]:  %8 = add i64 %7, -8
	}

[0x56461167dd98]:   %48 = inttoptr i64 %47 to i64* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x56461167de10]:   store i64 %45, i64* %48, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167de90]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167df10]:   store i64 %44, i64* %PC, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167e118]:   %49 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x564611688510]:  %call2_40051b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %45, %struct.Memory.32* %2)
	[0x5646116d7630]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x564611719e80]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x56461167e1d8]:   %50 = load i64, i64* %PC, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167e250]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167e2b8]:   %51 = load i64, i64* %RBP, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167e330]:   %52 = add i64 %51, -8 {
	[0x56461168da00]:  %53 = add i64 %52, -8
	[0x5646116fdae0]:  %48 = add i64 %47, -8
	[0x5646117118b0]:  %8 = add i64 %7, -8
	}

[0x56461167e398]:   %53 = load i32, i32* %EAX, align 4 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167e410]:   %54 = add i64 %50, 5 {
	[0x56461168d800]:  %55 = add i64 %51, 5
	}

[0x56461167e490]:   store i64 %54, i64* %PC, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167e4f8]:   %55 = inttoptr i64 %52 to i32* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x56461167e570]:   store i32 %53, i32* %55, align 4 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167e5d8]:   %56 = load i32, i32* %ECX, align 4 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167e638]:   %57 = zext i32 %56 to i64 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167e698]:   %58 = load i64, i64* %PC, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167e710]:   store i64 %57, i64* %RAX, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167e778]:   %59 = load i64, i64* %RSP, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167e7f0]:   %60 = add i64 %59, 16 {
	[0x56461168d1c0]:  %61 = add i64 %60, 16
	}

[0x56461167e870]:   store i64 %60, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167e930]:   %61 = icmp ugt i64 %59, -17 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x56461167e998]:   %62 = zext i1 %61 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167ea10]:   store i8 %62, i8* %14, align 1, !tbaa !1265 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167ea78]:   %63 = trunc i64 %60 to i32 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167eaf0]:   %64 = and i32 %63, 255 {
	[0x56461168fff0]:  %65 = and i32 %64, 255
	[0x5646116fcc00]:  %16 = and i32 %15, 255
	}

[0x56461167eb90]:   %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9 {
	[0x564611688510]:  %call2_40051b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %45, %struct.Memory.32* %2)
	[0x5646116d7630]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x564611719e80]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x56461167ec58]:   %66 = trunc i32 %65 to i8 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167ecd0]:   %67 = and i8 %66, 1 {
	[0x56461168b400]:  %26 = and i8 %25, 1
	[0x56461168e820]:  %68 = and i8 %67, 1
	[0x5646116931c0]:  %74 = and i8 %73, 1
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x56461167ed50]:   %68 = xor i8 %67, 1 {
	[0x564611689a20]:  %20 = xor i8 %19, 1
	[0x56461168fda0]:  %69 = xor i8 %68, 1
	}

[0x56461167edd0]:   store i8 %68, i8* %21, align 1, !tbaa !1279 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e3620]:   %69 = xor i64 %59, 16 {
	[0x5646116898d0]:  %22 = xor i64 %8, 16
	[0x56461168e3e0]:  %70 = xor i64 %60, 16
	}

[0x5646116e36a0]:   %70 = xor i64 %69, %60 {
	[0x56461168aeb0]:  %80 = xor i64 %77, %79
	[0x56461168bea0]:  %35 = xor i64 %31, %34
	[0x56461168e750]:  %71 = xor i64 %70, %61
	[0x56461173a4d0]:  %23 = xor i64 %22, %11
	}

[0x5646116e3720]:   %71 = lshr i64 %70, 4 {
	[0x56461168b560]:  %24 = lshr i64 %23, 4
	[0x5646116933a0]:  %72 = lshr i64 %71, 4
	}

[0x5646116e3788]:   %72 = trunc i64 %71 to i8 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x5646116e3800]:   %73 = and i8 %72, 1 {
	[0x56461168b400]:  %26 = and i8 %25, 1
	[0x56461168e820]:  %68 = and i8 %67, 1
	[0x5646116931c0]:  %74 = and i8 %73, 1
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x5646116e3880]:   store i8 %73, i8* %27, align 1, !tbaa !1280 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e3900]:   %74 = icmp eq i64 %60, 0 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x5646116e3968]:   %75 = zext i1 %74 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x5646116e39e0]:   store i8 %75, i8* %30, align 1, !tbaa !1281 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e3a60]:   %76 = lshr i64 %60, 63 {
	[0x5646116912f0]:  %77 = lshr i64 %61, 63
	[0x5646116934f0]:  %79 = lshr i64 %60, 63
	[0x5646116fd370]:  %34 = lshr i64 %8, 63
	[0x56461173a6d0]:  %31 = lshr i64 %11, 63
	}

[0x5646116e3ac8]:   %77 = trunc i64 %76 to i8 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x5646116e3b40]:   store i8 %77, i8* %33, align 1, !tbaa !1282 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e3bc0]:   %78 = lshr i64 %59, 63 {
	[0x5646116912f0]:  %77 = lshr i64 %61, 63
	[0x5646116934f0]:  %79 = lshr i64 %60, 63
	[0x5646116fd370]:  %34 = lshr i64 %8, 63
	[0x56461173a6d0]:  %31 = lshr i64 %11, 63
	}

[0x5646116e3c40]:   %79 = xor i64 %76, %78 {
	[0x56461168aeb0]:  %80 = xor i64 %77, %79
	[0x56461168bea0]:  %35 = xor i64 %31, %34
	[0x56461168e750]:  %71 = xor i64 %70, %61
	[0x56461173a4d0]:  %23 = xor i64 %22, %11
	}

[0x5646116e3cc0]:   %80 = add nuw nsw i64 %79, %76 {
	[0x56461168ad50]:  %81 = add nuw nsw i64 %80, %77
	[0x5646116fd7b0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5646116e3d40]:   %81 = icmp eq i64 %80, 2 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x5646116e3da8]:   %82 = zext i1 %81 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	[0x564611700438]:  %83 = zext i1 %82 to i8
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x5646116e3e20]:   store i8 %82, i8* %39, align 1, !tbaa !1283 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e3ea0]:   %83 = add i64 %58, 7 {
	[0x56461168a900]:  %84 = add i64 %59, 7
	[0x56461168c410]:  %46 = add i64 %44, 7
	}

[0x5646116e3f20]:   store i64 %83, i64* %PC, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e3fa0]:   %84 = add i64 %59, 24 {
	[0x56461168ba90]:  %41 = add i64 %10, 24
	[0x5646116937b0]:  %85 = add i64 %60, 24
	}

[0x5646116e4008]:   %85 = inttoptr i64 %60 to i64* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x5646116e4068]:   %86 = load i64, i64* %85, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x5646116e40e0]:   store i64 %86, i64* %RBP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e4160]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e41e0]:   %87 = add i64 %58, 8 {
	[0x5646116962a0]:  %88 = add i64 %59, 8
	}

[0x5646116e4260]:   store i64 %87, i64* %PC, align 8 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e42c8]:   %88 = inttoptr i64 %84 to i64* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x5646116e4328]:   %89 = load i64, i64* %88, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x5646116e43a0]:   store i64 %89, i64* %PC, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e4420]:   %90 = add i64 %59, 32 {
	[0x564611695e00]:  %91 = add i64 %60, 32
	}

[0x5646116e44a0]:   store i64 %90, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x5646116e4508]:   ret %struct.Memory* %49 {
	[0x564611702ae8]:  ret %struct.Memory.32* %call2_40051b
	}

[0x564611746578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564611748838]:  %43 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564611747d58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x564611752858]:  %50 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5646116fe0d8]:   %EAX.i = bitcast %union.anon.5* %43 to i32*
From the pot matches of: [0x56461167b898]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x56461167db10]:   store i8 0, i8* %AL, align 1, !tbaa !1284


Uprime Matches: [0x564611688400]:   store i64 %11, i64* %6, align 8
[0x56461168a350]:   store i8 %32, i8* %33, align 1
[0x56461168a820]:   store i64 %84, i64* %3, align 8
[0x56461168aae0]:   store i8 %83, i8* %39, align 1
[0x56461168b010]:   store i64 %87, i64* %RBP.i, align 8
[0x56461168c000]:   store i64 %41, i64* %3, align 8
[0x56461168c150]:   store i64 %46, i64* %49, align 8
[0x56461168c710]:   store i8 0, i8* %AL.i, align 1
[0x56461168d070]:   store i64 %45, i64* %3, align 8
[0x56461168d320]:   store i64 %58, i64* %RAX.i, align 8
[0x56461168d470]:   store i32 %54, i32* %56, align 4
[0x56461168d5d0]:   store i64 %55, i64* %3, align 8
[0x56461168e2d0]:   store i64 %61, i64* %6, align 8
[0x56461168e4f0]:   store i8 %69, i8* %21, align 1
[0x56461168e970]:   store i8 %63, i8* %14, align 1
[0x56461168eca0]:   store i64 0, i64* %RCX.i, align 8
[0x564611690b30]:   store i8 %78, i8* %33, align 1
[0x564611692da0]:   store i8 %76, i8* %30, align 1
[0x564611693060]:   store i8 %74, i8* %27, align 1
[0x564611695850]:   store i64 %91, i64* %6, align 8
[0x564611695f60]:   store i64 %90, i64* %3, align 8
[0x5646116960c0]:   store i64 %88, i64* %3, align 8
[0x564611696400]:   store i64 %85, i64* %6, align 8
[0x5646116fc320]:   store i64 %5, i64* %3, align 8
[0x5646116fc7c0]:   store i8 %20, i8* %21, align 1
[0x5646116fcf30]:   store i8 %29, i8* %30, align 1
[0x5646116fd150]:   store i8 %26, i8* %27, align 1
[0x5646116fd590]:   store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
[0x5646116fd6a0]:   store i8 %38, i8* %39, align 1
[0x5646116fd900]:   store i32 0, i32* %42, align 4
[0x5646116fd9d0]:   store i64 %48, i64* %6, align 8
[0x5646117385d0]:   store i64 %8, i64* %RBP.i, align 8
[0x56461173a1b0]:   store i64 %4, i64* %9, align 8
[0x56461173a380]:   store i8 %13, i8* %14, align 1


Adj: [0x5646116ff4c8]:   %54 = load i32, i32* %EAX.i, align 4


Removing: [0x5646116fdc18]:   %AL.i = bitcast %union.anon.5* %43 to i8*
From the pot matches of: [0x56461167b9e8]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x56461167e398]:   %53 = load i32, i32* %EAX, align 4


Uprime Matches: [0x5646116b5d88]:   %10 = load i64, i64* %3, align 8
[0x5646116f00e8]:   %4 = load i64, i64* %RBP.i, align 8
[0x5646116f02b8]:   %7 = load i64, i64* %6, align 8
[0x5646116fe7b8]:   %60 = load i64, i64* %6, align 8
[0x5646116fea18]:   %59 = load i64, i64* %3, align 8
[0x5646116ff268]:   %57 = load i32, i32* %ECX.i9, align 4
[0x5646116ff4c8]:   %54 = load i32, i32* %EAX.i, align 4
[0x5646116fff78]:   %52 = load i64, i64* %RBP.i, align 8
[0x564611702168]:   %87 = load i64, i64* %86, align 8
[0x564611702c18]:   %90 = load i64, i64* %89, align 8
[0x564611719248]:   %44 = load i64, i64* %3, align 8
[0x564611738208]:   %51 = load i64, i64* %3, align 8
[0x5646117399d8]:   %47 = load i64, i64* %6, align 8


Adj: [0x56461168c710]:   store i8 0, i8* %AL.i, align 1


Removing: [0x5646116fff78]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56461167bfe8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x56461167c330]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x564611688400]:   store i64 %11, i64* %6, align 8
[0x56461168a350]:   store i8 %32, i8* %33, align 1
[0x56461168a820]:   store i64 %84, i64* %3, align 8
[0x56461168aae0]:   store i8 %83, i8* %39, align 1
[0x56461168b010]:   store i64 %87, i64* %RBP.i, align 8
[0x56461168c000]:   store i64 %41, i64* %3, align 8
[0x56461168c150]:   store i64 %46, i64* %49, align 8
[0x56461168c710]:   store i8 0, i8* %AL.i, align 1
[0x56461168d070]:   store i64 %45, i64* %3, align 8
[0x56461168d320]:   store i64 %58, i64* %RAX.i, align 8
[0x56461168d470]:   store i32 %54, i32* %56, align 4
[0x56461168d5d0]:   store i64 %55, i64* %3, align 8
[0x56461168e2d0]:   store i64 %61, i64* %6, align 8
[0x56461168e4f0]:   store i8 %69, i8* %21, align 1
[0x56461168e970]:   store i8 %63, i8* %14, align 1
[0x56461168eca0]:   store i64 0, i64* %RCX.i, align 8
[0x564611690b30]:   store i8 %78, i8* %33, align 1
[0x564611692da0]:   store i8 %76, i8* %30, align 1
[0x564611693060]:   store i8 %74, i8* %27, align 1
[0x564611695850]:   store i64 %91, i64* %6, align 8
[0x564611695f60]:   store i64 %90, i64* %3, align 8
[0x5646116960c0]:   store i64 %88, i64* %3, align 8
[0x564611696400]:   store i64 %85, i64* %6, align 8
[0x5646116fc320]:   store i64 %5, i64* %3, align 8
[0x5646116fc7c0]:   store i8 %20, i8* %21, align 1
[0x5646116fcf30]:   store i8 %29, i8* %30, align 1
[0x5646116fd150]:   store i8 %26, i8* %27, align 1
[0x5646116fd590]:   store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
[0x5646116fd6a0]:   store i8 %38, i8* %39, align 1
[0x5646116fd900]:   store i32 0, i32* %42, align 4
[0x5646116fd9d0]:   store i64 %48, i64* %6, align 8
[0x5646117385d0]:   store i64 %8, i64* %RBP.i, align 8
[0x56461173a1b0]:   store i64 %4, i64* %9, align 8
[0x56461173a380]:   store i8 %13, i8* %14, align 1


Adj: [0x56461168da00]:   %53 = add i64 %52, -8


Removing: [0x5646116fe7b8]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x56461167c148]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56461167d850]:   %40 = add i64 %7, -12


Uprime Matches: [0x56461168bbf0]:   %40 = add i64 %7, -12


Adj: [0x56461168d1c0]:   %61 = add i64 %60, 16
[0x56461168e3e0]:   %70 = xor i64 %60, 16
[0x564611690370]:   %62 = icmp ugt i64 %60, -17
[0x5646116934f0]:   %79 = lshr i64 %60, 63
[0x5646116937b0]:   %85 = add i64 %60, 24
[0x564611695e00]:   %91 = add i64 %60, 32


Removing: [0x5646117399d8]:   %47 = load i64, i64* %6, align 8
From the pot matches of: [0x56461167c148]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56461167d850]:   %40 = add i64 %7, -12


Uprime Matches: [0x56461168bbf0]:   %40 = add i64 %7, -12


Adj: [0x5646116fdae0]:   %48 = add i64 %47, -8


Removing: [0x5646116fea18]:   %59 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167c398]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x56461167d8d0]:   %41 = add i64 %10, 24


Uprime Matches: [0x56461168ba90]:   %41 = add i64 %10, 24
[0x5646116937b0]:   %85 = add i64 %60, 24


Adj: [0x56461168a900]:   %84 = add i64 %59, 7
[0x5646116962a0]:   %88 = add i64 %59, 8


Removing: [0x564611719248]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167c398]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x56461167d8d0]:   %41 = add i64 %10, 24


Uprime Matches: [0x56461168ba90]:   %41 = add i64 %10, 24
[0x5646116937b0]:   %85 = add i64 %60, 24


Adj: [0x56461168c410]:   %46 = add i64 %44, 7
[0x56461168c570]:   %45 = add i64 %44, -281


Removing: [0x564611738208]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167c398]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x56461167d8d0]:   %41 = add i64 %10, 24


Uprime Matches: [0x56461168ba90]:   %41 = add i64 %10, 24
[0x5646116937b0]:   %85 = add i64 %60, 24


Adj: [0x56461168d800]:   %55 = add i64 %51, 5


Removing: [0x564611668b08]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x5646116fcc00]:   %16 = and i32 %15, 255


Removing: [0x564611700568]:   %78 = trunc i64 %77 to i8
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x564611690b30]:   store i8 %78, i8* %33, align 1


Removing: [0x564611701f08]:   %64 = trunc i64 %61 to i32
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168fff0]:   %65 = and i32 %64, 255


Removing: [0x564611727ff8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168a350]:   store i8 %32, i8* %33, align 1


Removing: [0x56461168b400]:   %26 = and i8 %25, 1
From the pot matches of: [0x56461167c930]:   %19 = and i8 %18, 1


Uprime : [0x56461167c9b0]:   %20 = xor i8 %19, 1


Uprime Matches: [0x564611689a20]:   %20 = xor i8 %19, 1
[0x56461168fda0]:   %69 = xor i8 %68, 1


Adj: [0x5646116fd150]:   store i8 %26, i8* %27, align 1


Removing: [0x5646116931c0]:   %74 = and i8 %73, 1
From the pot matches of: [0x56461167c930]:   %19 = and i8 %18, 1


Uprime : [0x56461167c9b0]:   %20 = xor i8 %19, 1


Uprime Matches: [0x564611689a20]:   %20 = xor i8 %19, 1
[0x56461168fda0]:   %69 = xor i8 %68, 1


Adj: [0x564611693060]:   store i8 %74, i8* %27, align 1


Removing: [0x5646116b5d88]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167da98]:   %43 = load i64, i64* %PC, align 8


Uprime : [0x56461167dc50]:   %45 = add i64 %43, 7


Uprime Matches: [0x56461168a900]:   %84 = add i64 %59, 7
[0x56461168c410]:   %46 = add i64 %44, 7


Adj: [0x56461168ba90]:   %41 = add i64 %10, 24


Removing: [0x564611738208]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167da98]:   %43 = load i64, i64* %PC, align 8


Uprime : [0x56461167dc50]:   %45 = add i64 %43, 7


Uprime Matches: [0x56461168a900]:   %84 = add i64 %59, 7
[0x56461168c410]:   %46 = add i64 %44, 7


Adj: [0x56461168d800]:   %55 = add i64 %51, 5


Removing: [0x5646116fea18]:   %59 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167da98]:   %43 = load i64, i64* %PC, align 8


Uprime : [0x56461167dbd0]:   %44 = add i64 %43, -281


Uprime Matches: [0x56461168c570]:   %45 = add i64 %44, -281


Adj: [0x56461168a900]:   %84 = add i64 %59, 7
[0x5646116962a0]:   %88 = add i64 %59, 8


Removing: [0x5646116fe7b8]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x56461167dcb8]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56461167dd30]:   %47 = add i64 %46, -8


Uprime Matches: [0x56461168da00]:   %53 = add i64 %52, -8
[0x5646116fdae0]:   %48 = add i64 %47, -8
[0x5646117118b0]:   %8 = add i64 %7, -8


Adj: [0x56461168d1c0]:   %61 = add i64 %60, 16
[0x56461168e3e0]:   %70 = xor i64 %60, 16
[0x564611690370]:   %62 = icmp ugt i64 %60, -17
[0x5646116934f0]:   %79 = lshr i64 %60, 63
[0x5646116937b0]:   %85 = add i64 %60, 24
[0x564611695e00]:   %91 = add i64 %60, 32


Removing: [0x5646117118b0]:   %8 = add i64 %7, -8
From the pot matches of: [0x56461167dd30]:   %47 = add i64 %46, -8


Uprime : [0x56461167de90]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x564611688400]:   store i64 %11, i64* %6, align 8
[0x56461168e2d0]:   store i64 %61, i64* %6, align 8
[0x564611695850]:   store i64 %91, i64* %6, align 8
[0x564611696400]:   store i64 %85, i64* %6, align 8
[0x5646116fd9d0]:   store i64 %48, i64* %6, align 8


Adj: [0x5646116898d0]:   %22 = xor i64 %8, 16
[0x5646116f0448]:   %9 = inttoptr i64 %8 to i64*
[0x5646116fcd10]:   %12 = icmp ult i64 %8, 16
[0x5646116fd370]:   %34 = lshr i64 %8, 63
[0x5646117385d0]:   store i64 %8, i64* %RBP.i, align 8


Removing: [0x5646116b5d88]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167e1d8]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x56461167e410]:   %54 = add i64 %50, 5


Uprime Matches: [0x56461168d800]:   %55 = add i64 %51, 5


Adj: [0x56461168ba90]:   %41 = add i64 %10, 24


Removing: [0x5646116fea18]:   %59 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167e1d8]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x56461167e410]:   %54 = add i64 %50, 5


Uprime Matches: [0x56461168d800]:   %55 = add i64 %51, 5


Adj: [0x56461168a900]:   %84 = add i64 %59, 7
[0x5646116962a0]:   %88 = add i64 %59, 8


Removing: [0x564611719248]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167e1d8]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x56461167e410]:   %54 = add i64 %50, 5


Uprime Matches: [0x56461168d800]:   %55 = add i64 %51, 5


Adj: [0x56461168c410]:   %46 = add i64 %44, 7
[0x56461168c570]:   %45 = add i64 %44, -281


Removing: [0x5646116f00e8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56461167e2b8]:   %51 = load i64, i64* %RBP, align 8


Uprime : [0x56461167e330]:   %52 = add i64 %51, -8


Uprime Matches: [0x56461168da00]:   %53 = add i64 %52, -8
[0x5646116fdae0]:   %48 = add i64 %47, -8
[0x5646117118b0]:   %8 = add i64 %7, -8


Adj: [0x56461173a1b0]:   store i64 %4, i64* %9, align 8


Removing: [0x5646116b5d88]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167e698]:   %58 = load i64, i64* %PC, align 8


Uprime : [0x5646116e41e0]:   %87 = add i64 %58, 8


Uprime Matches: [0x5646116962a0]:   %88 = add i64 %59, 8


Adj: [0x56461168ba90]:   %41 = add i64 %10, 24


Removing: [0x564611719248]:   %44 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167e698]:   %58 = load i64, i64* %PC, align 8


Uprime : [0x5646116e41e0]:   %87 = add i64 %58, 8


Uprime Matches: [0x5646116962a0]:   %88 = add i64 %59, 8


Adj: [0x56461168c410]:   %46 = add i64 %44, 7
[0x56461168c570]:   %45 = add i64 %44, -281


Removing: [0x564611738208]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x56461167e698]:   %58 = load i64, i64* %PC, align 8


Uprime : [0x5646116e41e0]:   %87 = add i64 %58, 8


Uprime Matches: [0x5646116962a0]:   %88 = add i64 %59, 8


Adj: [0x56461168d800]:   %55 = add i64 %51, 5


Removing: [0x5646116f02b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56461167e778]:   %59 = load i64, i64* %RSP, align 8


Uprime : [0x5646116e4420]:   %90 = add i64 %59, 32


Uprime Matches: [0x564611695e00]:   %91 = add i64 %60, 32


Adj: [0x56461168bbf0]:   %40 = add i64 %7, -12
[0x5646117118b0]:   %8 = add i64 %7, -8
[0x564611735ce0]:   %11 = add i64 %7, -24


Removing: [0x5646117399d8]:   %47 = load i64, i64* %6, align 8
From the pot matches of: [0x56461167e778]:   %59 = load i64, i64* %RSP, align 8


Uprime : [0x5646116e4420]:   %90 = add i64 %59, 32


Uprime Matches: [0x564611695e00]:   %91 = add i64 %60, 32


Adj: [0x5646116fdae0]:   %48 = add i64 %47, -8


Removing: [0x564611668b08]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x5646116fcc00]:   %16 = and i32 %15, 255


Removing: [0x564611700568]:   %78 = trunc i64 %77 to i8
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x564611690b30]:   store i8 %78, i8* %33, align 1


Removing: [0x564611701f08]:   %64 = trunc i64 %61 to i32
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168fff0]:   %65 = and i32 %64, 255


Removing: [0x564611727ff8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168b400]:   %26 = and i8 %25, 1
[0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116931c0]:   %74 = and i8 %73, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168a350]:   store i8 %32, i8* %33, align 1


Removing: [0x56461168b400]:   %26 = and i8 %25, 1
From the pot matches of: [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime : [0x56461167ed50]:   %68 = xor i8 %67, 1


Uprime Matches: [0x564611689a20]:   %20 = xor i8 %19, 1
[0x56461168fda0]:   %69 = xor i8 %68, 1


Adj: [0x5646116fd150]:   store i8 %26, i8* %27, align 1


Removing: [0x5646116931c0]:   %74 = and i8 %73, 1
From the pot matches of: [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime : [0x56461167ed50]:   %68 = xor i8 %67, 1


Uprime Matches: [0x564611689a20]:   %20 = xor i8 %19, 1
[0x56461168fda0]:   %69 = xor i8 %68, 1


Adj: [0x564611693060]:   store i8 %74, i8* %27, align 1

Round: 1

Removing: [0x56461168b158]:   %73 = trunc i64 %72 to i8
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x5646116931c0]:   %74 = and i8 %73, 1


Removing: [0x5646116e4698]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168b400]:   %26 = and i8 %25, 1


Removing: [0x5646116f02b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56461167dcb8]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56461167dd30]:   %47 = add i64 %46, -8


Uprime Matches: [0x5646116fdae0]:   %48 = add i64 %47, -8


Adj: [0x56461168bbf0]:   %40 = add i64 %7, -12
[0x5646117118b0]:   %8 = add i64 %7, -8
[0x564611735ce0]:   %11 = add i64 %7, -24


Removing: [0x56461168b158]:   %73 = trunc i64 %72 to i8
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x5646116931c0]:   %74 = and i8 %73, 1


Removing: [0x5646116e4698]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168e820]:   %68 = and i8 %67, 1
[0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168b400]:   %26 = and i8 %25, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x56461167b660]: %struct.State* %0 {
	[0x56461168b850]:%struct.State.1* %0
	}

[0x56461167b6a0]: i64 %1 {
	[0x56461168c280]:i64 %1
	}

[0x56461167b6e0]: %struct.Memory* %2 {
	[0x56461168ccd0]:%struct.Memory.32* %2
	}

[0x56461167b898]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5646116fdc18]:  %AL.i = bitcast %union.anon.5* %43 to i8*
	}

[0x56461167b970]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56461166b0a0]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56461167b9e8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5646116fe0d8]:  %EAX.i = bitcast %union.anon.5* %43 to i32*
	}

[0x56461167bab8]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5646117395c8]:  %ECX.i9 = bitcast %union.anon.5* %50 to i32*
	}

[0x56461167bb68]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x564611668d48]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %43, i64 0, i32 0
	}

[0x56461167bc28]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x56461166d368]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %50, i64 0, i32 0
	}

[0x56461167bd30]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5646116f0e10]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x56461167be40]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5646116f3170]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56461167bf50]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5646116f3340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56461167bfe8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x56461167c060]:   %6 = add i64 %1, 1 {
	[0x564611688070]:  %5 = add i64 %1, 1
	}

[0x56461167c0e0]:   store i64 %6, i64* %PC, align 8 {
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	}

[0x56461167c148]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	}

[0x56461167c1c0]:   %8 = add i64 %7, -8 {
	[0x5646117118b0]:  %8 = add i64 %7, -8
	}

[0x56461167c240]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5646116d7630]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56461167c2b8]:   %9 = inttoptr i64 %8 to i64* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	}

[0x56461167c330]:   store i64 %5, i64* %9, align 8 {
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	}

[0x56461167c398]:   %10 = load i64, i64* %PC, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	}

[0x56461167c410]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x56461167c490]:   %11 = add i64 %7, -24 {
	[0x564611735ce0]:  %11 = add i64 %7, -24
	}

[0x56461167c510]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	}

[0x56461167c590]:   %12 = icmp ult i64 %8, 16 {
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x56461167c5f8]:   %13 = zext i1 %12 to i8 {
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	}

[0x56461167c6a0]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5646117d2330]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x56461167c730]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c798]:   %15 = trunc i64 %11 to i32 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	}

[0x56461167c810]:   %16 = and i32 %15, 255 {
	[0x5646116fcc00]:  %16 = and i32 %15, 255
	}

[0x56461167c8b8]:   %18 = trunc i32 %17 to i8 {
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	}

[0x56461167c930]:   %19 = and i8 %18, 1 {
	[0x56461168e820]:  %68 = and i8 %67, 1
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x56461167c9b0]:   %20 = xor i8 %19, 1 {
	[0x564611689a20]:  %20 = xor i8 %19, 1
	[0x56461168fda0]:  %69 = xor i8 %68, 1
	}

[0x56461167ca60]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5646116e8730]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x56461167caf0]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	}

[0x56461167cb70]:   %22 = xor i64 %8, 16 {
	[0x5646116898d0]:  %22 = xor i64 %8, 16
	}

[0x56461167cbf0]:   %23 = xor i64 %22, %11 {
	[0x56461173a4d0]:  %23 = xor i64 %22, %11
	}

[0x56461167cc70]:   %24 = lshr i64 %23, 4 {
	[0x56461168b560]:  %24 = lshr i64 %23, 4
	}

[0x56461167ccd8]:   %25 = trunc i64 %24 to i8 {
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	}

[0x56461167cd50]:   %26 = and i8 %25, 1 {
	[0x56461168b400]:  %26 = and i8 %25, 1
	}

[0x56461167ce00]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5646116907b0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x56461167ce90]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	}

[0x56461167cf10]:   %28 = icmp eq i64 %11, 0 {
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	}

[0x56461167cf78]:   %29 = zext i1 %28 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	}

[0x56461167d020]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56461168cdf0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x56461167d0b0]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	}

[0x56461167d130]:   %31 = lshr i64 %11, 63 {
	[0x56461173a6d0]:  %31 = lshr i64 %11, 63
	}

[0x56461167d198]:   %32 = trunc i64 %31 to i8 {
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167d240]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56461168cb80]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x56461167d2d0]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	}

[0x56461167d350]:   %34 = lshr i64 %8, 63 {
	[0x5646116fd370]:  %34 = lshr i64 %8, 63
	}

[0x56461167d3d0]:   %35 = xor i64 %31, %34 {
	[0x56461168bea0]:  %35 = xor i64 %31, %34
	}

[0x56461167d450]:   %36 = add nuw nsw i64 %35, %34 {
	[0x5646116fd7b0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x56461167d4d0]:   %37 = icmp eq i64 %36, 2 {
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	}

[0x56461167d538]:   %38 = zext i1 %37 to i8 {
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167d5e0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56461168b670]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x56461167d670]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	}

[0x56461167d790]:   store i64 add (i64 ptrtoint (%seg_4005b0__rodata_type* @seg_4005b0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	}

[0x56461167d850]:   %40 = add i64 %7, -12 {
	[0x56461168bbf0]:  %40 = add i64 %7, -12
	}

[0x56461167d8d0]:   %41 = add i64 %10, 24 {
	[0x56461168ba90]:  %41 = add i64 %10, 24
	}

[0x56461167d950]:   store i64 %41, i64* %PC, align 8 {
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	}

[0x56461167d9b8]:   %42 = inttoptr i64 %40 to i32* {
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	}

[0x56461167da30]:   store i32 0, i32* %42, align 4 {
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	}

[0x56461167da98]:   %43 = load i64, i64* %PC, align 8 {
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	}

[0x56461167db10]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	}

[0x56461167dbd0]:   %44 = add i64 %43, -281 {
	[0x56461168c570]:  %45 = add i64 %44, -281
	}

[0x56461167dc50]:   %45 = add i64 %43, 7 {
	[0x56461168c410]:  %46 = add i64 %44, 7
	}

[0x56461167dcb8]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167dd30]:   %47 = add i64 %46, -8 {
	[0x5646116fdae0]:  %48 = add i64 %47, -8
	}

[0x56461167dd98]:   %48 = inttoptr i64 %47 to i64* {
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x56461167de10]:   store i64 %45, i64* %48, align 8 {
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	}

[0x56461167de90]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	}

[0x56461167df10]:   store i64 %44, i64* %PC, align 8, !tbaa !1261 {
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	}

[0x56461167e118]:   %49 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x564611688510]:  %call2_40051b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %45, %struct.Memory.32* %2)
	}

[0x56461167e1d8]:   %50 = load i64, i64* %PC, align 8 {
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	}

[0x56461167e250]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	}

[0x56461167e2b8]:   %51 = load i64, i64* %RBP, align 8 {
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x56461167e330]:   %52 = add i64 %51, -8 {
	[0x56461168da00]:  %53 = add i64 %52, -8
	}

[0x56461167e398]:   %53 = load i32, i32* %EAX, align 4 {
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	}

[0x56461167e410]:   %54 = add i64 %50, 5 {
	[0x56461168d800]:  %55 = add i64 %51, 5
	}

[0x56461167e490]:   store i64 %54, i64* %PC, align 8 {
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	}

[0x56461167e4f8]:   %55 = inttoptr i64 %52 to i32* {
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	}

[0x56461167e570]:   store i32 %53, i32* %55, align 4 {
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	}

[0x56461167e5d8]:   %56 = load i32, i32* %ECX, align 4 {
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	}

[0x56461167e638]:   %57 = zext i32 %56 to i64 {
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	}

[0x56461167e698]:   %58 = load i64, i64* %PC, align 8 {
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	}

[0x56461167e710]:   store i64 %57, i64* %RAX, align 8, !tbaa !1261 {
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	}

[0x56461167e778]:   %59 = load i64, i64* %RSP, align 8 {
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	}

[0x56461167e7f0]:   %60 = add i64 %59, 16 {
	[0x56461168d1c0]:  %61 = add i64 %60, 16
	}

[0x56461167e870]:   store i64 %60, i64* %RSP, align 8, !tbaa !1261 {
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	}

[0x56461167e930]:   %61 = icmp ugt i64 %59, -17 {
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	}

[0x56461167e998]:   %62 = zext i1 %61 to i8 {
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	}

[0x56461167ea10]:   store i8 %62, i8* %14, align 1, !tbaa !1265 {
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	}

[0x56461167ea78]:   %63 = trunc i64 %60 to i32 {
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	}

[0x56461167eaf0]:   %64 = and i32 %63, 255 {
	[0x56461168fff0]:  %65 = and i32 %64, 255
	}

[0x56461167eb90]:   %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9 {
	[0x564611719e80]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x56461167ec58]:   %66 = trunc i32 %65 to i8 {
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	}

[0x56461167ecd0]:   %67 = and i8 %66, 1 {
	[0x56461168e820]:  %68 = and i8 %67, 1
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x56461167ed50]:   %68 = xor i8 %67, 1 {
	[0x564611689a20]:  %20 = xor i8 %19, 1
	[0x56461168fda0]:  %69 = xor i8 %68, 1
	}

[0x56461167edd0]:   store i8 %68, i8* %21, align 1, !tbaa !1279 {
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	}

[0x5646116e3620]:   %69 = xor i64 %59, 16 {
	[0x56461168e3e0]:  %70 = xor i64 %60, 16
	}

[0x5646116e36a0]:   %70 = xor i64 %69, %60 {
	[0x56461168e750]:  %71 = xor i64 %70, %61
	}

[0x5646116e3720]:   %71 = lshr i64 %70, 4 {
	[0x5646116933a0]:  %72 = lshr i64 %71, 4
	}

[0x5646116e3788]:   %72 = trunc i64 %71 to i8 {
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	}

[0x5646116e3800]:   %73 = and i8 %72, 1 {
	[0x5646116931c0]:  %74 = and i8 %73, 1
	}

[0x5646116e3880]:   store i8 %73, i8* %27, align 1, !tbaa !1280 {
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	}

[0x5646116e3900]:   %74 = icmp eq i64 %60, 0 {
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	}

[0x5646116e3968]:   %75 = zext i1 %74 to i8 {
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	}

[0x5646116e39e0]:   store i8 %75, i8* %30, align 1, !tbaa !1281 {
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	}

[0x5646116e3a60]:   %76 = lshr i64 %60, 63 {
	[0x5646116912f0]:  %77 = lshr i64 %61, 63
	}

[0x5646116e3ac8]:   %77 = trunc i64 %76 to i8 {
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	}

[0x5646116e3b40]:   store i8 %77, i8* %33, align 1, !tbaa !1282 {
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	}

[0x5646116e3bc0]:   %78 = lshr i64 %59, 63 {
	[0x5646116934f0]:  %79 = lshr i64 %60, 63
	}

[0x5646116e3c40]:   %79 = xor i64 %76, %78 {
	[0x56461168aeb0]:  %80 = xor i64 %77, %79
	}

[0x5646116e3cc0]:   %80 = add nuw nsw i64 %79, %76 {
	[0x56461168ad50]:  %81 = add nuw nsw i64 %80, %77
	}

[0x5646116e3d40]:   %81 = icmp eq i64 %80, 2 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	}

[0x5646116e3da8]:   %82 = zext i1 %81 to i8 {
	[0x564611700438]:  %83 = zext i1 %82 to i8
	}

[0x5646116e3e20]:   store i8 %82, i8* %39, align 1, !tbaa !1283 {
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	}

[0x5646116e3ea0]:   %83 = add i64 %58, 7 {
	[0x56461168a900]:  %84 = add i64 %59, 7
	}

[0x5646116e3f20]:   store i64 %83, i64* %PC, align 8 {
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	}

[0x5646116e3fa0]:   %84 = add i64 %59, 24 {
	[0x5646116937b0]:  %85 = add i64 %60, 24
	}

[0x5646116e4008]:   %85 = inttoptr i64 %60 to i64* {
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	}

[0x5646116e4068]:   %86 = load i64, i64* %85, align 8 {
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	}

[0x5646116e40e0]:   store i64 %86, i64* %RBP, align 8, !tbaa !1261 {
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	}

[0x5646116e4160]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	}

[0x5646116e41e0]:   %87 = add i64 %58, 8 {
	[0x5646116962a0]:  %88 = add i64 %59, 8
	}

[0x5646116e4260]:   store i64 %87, i64* %PC, align 8 {
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	}

[0x5646116e42c8]:   %88 = inttoptr i64 %84 to i64* {
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	}

[0x5646116e4328]:   %89 = load i64, i64* %88, align 8 {
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	}

[0x5646116e43a0]:   store i64 %89, i64* %PC, align 8, !tbaa !1261 {
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	}

[0x5646116e4420]:   %90 = add i64 %59, 32 {
	[0x564611695e00]:  %91 = add i64 %60, 32
	}

[0x5646116e44a0]:   store i64 %90, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	}

[0x5646116e4508]:   ret %struct.Memory* %49 {
	[0x564611702ae8]:  ret %struct.Memory.32* %call2_40051b
	}

[0x564611746578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564611748838]:  %43 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564611747d58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x564611752858]:  %50 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x56461167b720]: block_400500 {
	[0x5646117183c0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x56461168fda0]:   %69 = xor i8 %68, 1
From the pot matches of: [0x56461167c9b0]:   %20 = xor i8 %19, 1


Uprime : [0x56461167caf0]:   store i8 %20, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x5646116fc7c0]:   store i8 %20, i8* %21, align 1


Adj: [0x56461168e4f0]:   store i8 %69, i8* %21, align 1


Removing: [0x564611689a20]:   %20 = xor i8 %19, 1
From the pot matches of: [0x56461167ed50]:   %68 = xor i8 %67, 1


Uprime : [0x56461167edd0]:   store i8 %68, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x56461168e4f0]:   store i8 %69, i8* %21, align 1


Adj: [0x5646116fc7c0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x56461168e820]:   %68 = and i8 %67, 1
From the pot matches of: [0x56461167c930]:   %19 = and i8 %18, 1


Uprime : [0x56461167c9b0]:   %20 = xor i8 %19, 1


Uprime Matches: [0x564611689a20]:   %20 = xor i8 %19, 1


Adj: [0x56461168fda0]:   %69 = xor i8 %68, 1


Removing: [0x5646116fc8d0]:   %19 = and i8 %18, 1
From the pot matches of: [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime : [0x56461167ed50]:   %68 = xor i8 %67, 1


Uprime Matches: [0x56461168fda0]:   %69 = xor i8 %68, 1


Adj: [0x564611689a20]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x564611701dd8]:   %67 = trunc i32 %66 to i8
From the pot matches of: [0x56461167c8b8]:   %18 = trunc i32 %17 to i8


Uprime : [0x56461167c930]:   %19 = and i8 %18, 1


Uprime Matches: [0x5646116fc8d0]:   %19 = and i8 %18, 1


Adj: [0x56461168e820]:   %68 = and i8 %67, 1


Removing: [0x5646116e7d28]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x56461167ec58]:   %66 = trunc i32 %65 to i8


Uprime : [0x56461167ecd0]:   %67 = and i8 %66, 1


Uprime Matches: [0x56461168e820]:   %68 = and i8 %67, 1


Adj: [0x5646116fc8d0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x56461167b660]: %struct.State* %0 {
	[0x56461168b850]:%struct.State.1* %0
	}

[0x56461167b6a0]: i64 %1 {
	[0x56461168c280]:i64 %1
	}

[0x56461167b6e0]: %struct.Memory* %2 {
	[0x56461168ccd0]:%struct.Memory.32* %2
	}

[0x56461167b898]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5646116fdc18]:  %AL.i = bitcast %union.anon.5* %43 to i8*
	}

[0x56461167b970]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56461166b0a0]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56461167b9e8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5646116fe0d8]:  %EAX.i = bitcast %union.anon.5* %43 to i32*
	}

[0x56461167bab8]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5646117395c8]:  %ECX.i9 = bitcast %union.anon.5* %50 to i32*
	}

[0x56461167bb68]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x564611668d48]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %43, i64 0, i32 0
	}

[0x56461167bc28]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x56461166d368]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %50, i64 0, i32 0
	}

[0x56461167bd30]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5646116f0e10]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x56461167be40]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5646116f3170]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56461167bf50]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5646116f3340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56461167bfe8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5646116f00e8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x56461167c060]:   %6 = add i64 %1, 1 {
	[0x564611688070]:  %5 = add i64 %1, 1
	}

[0x56461167c0e0]:   store i64 %6, i64* %PC, align 8 {
	[0x5646116fc320]:  store i64 %5, i64* %3, align 8
	}

[0x56461167c148]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646116f02b8]:  %7 = load i64, i64* %6, align 8
	}

[0x56461167c1c0]:   %8 = add i64 %7, -8 {
	[0x5646117118b0]:  %8 = add i64 %7, -8
	}

[0x56461167c240]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5646116d7630]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56461167c2b8]:   %9 = inttoptr i64 %8 to i64* {
	[0x5646116f0448]:  %9 = inttoptr i64 %8 to i64*
	}

[0x56461167c330]:   store i64 %5, i64* %9, align 8 {
	[0x56461173a1b0]:  store i64 %4, i64* %9, align 8
	}

[0x56461167c398]:   %10 = load i64, i64* %PC, align 8 {
	[0x5646116b5d88]:  %10 = load i64, i64* %3, align 8
	}

[0x56461167c410]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x5646117385d0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x56461167c490]:   %11 = add i64 %7, -24 {
	[0x564611735ce0]:  %11 = add i64 %7, -24
	}

[0x56461167c510]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611688400]:  store i64 %11, i64* %6, align 8
	}

[0x56461167c590]:   %12 = icmp ult i64 %8, 16 {
	[0x5646116fcd10]:  %12 = icmp ult i64 %8, 16
	}

[0x56461167c5f8]:   %13 = zext i1 %12 to i8 {
	[0x5646117363d8]:  %13 = zext i1 %12 to i8
	}

[0x56461167c6a0]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5646117d2330]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x56461167c730]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x56461173a380]:  store i8 %13, i8* %14, align 1
	}

[0x56461167c798]:   %15 = trunc i64 %11 to i32 {
	[0x564611668b08]:  %15 = trunc i64 %11 to i32
	}

[0x56461167c810]:   %16 = and i32 %15, 255 {
	[0x5646116fcc00]:  %16 = and i32 %15, 255
	}

[0x56461167c8b8]:   %18 = trunc i32 %17 to i8 {
	[0x5646116e7d28]:  %18 = trunc i32 %17 to i8
	}

[0x56461167c930]:   %19 = and i8 %18, 1 {
	[0x5646116fc8d0]:  %19 = and i8 %18, 1
	}

[0x56461167c9b0]:   %20 = xor i8 %19, 1 {
	[0x564611689a20]:  %20 = xor i8 %19, 1
	}

[0x56461167ca60]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5646116e8730]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x56461167caf0]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x5646116fc7c0]:  store i8 %20, i8* %21, align 1
	}

[0x56461167cb70]:   %22 = xor i64 %8, 16 {
	[0x5646116898d0]:  %22 = xor i64 %8, 16
	}

[0x56461167cbf0]:   %23 = xor i64 %22, %11 {
	[0x56461173a4d0]:  %23 = xor i64 %22, %11
	}

[0x56461167cc70]:   %24 = lshr i64 %23, 4 {
	[0x56461168b560]:  %24 = lshr i64 %23, 4
	}

[0x56461167ccd8]:   %25 = trunc i64 %24 to i8 {
	[0x5646116e4698]:  %25 = trunc i64 %24 to i8
	}

[0x56461167cd50]:   %26 = and i8 %25, 1 {
	[0x56461168b400]:  %26 = and i8 %25, 1
	}

[0x56461167ce00]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5646116907b0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x56461167ce90]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x5646116fd150]:  store i8 %26, i8* %27, align 1
	}

[0x56461167cf10]:   %28 = icmp eq i64 %11, 0 {
	[0x56461168b2b0]:  %28 = icmp eq i64 %11, 0
	}

[0x56461167cf78]:   %29 = zext i1 %28 to i8 {
	[0x564611668f78]:  %29 = zext i1 %28 to i8
	}

[0x56461167d020]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56461168cdf0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x56461167d0b0]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x5646116fcf30]:  store i8 %29, i8* %30, align 1
	}

[0x56461167d130]:   %31 = lshr i64 %11, 63 {
	[0x56461173a6d0]:  %31 = lshr i64 %11, 63
	}

[0x56461167d198]:   %32 = trunc i64 %31 to i8 {
	[0x564611727ff8]:  %32 = trunc i64 %31 to i8
	}

[0x56461167d240]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56461168cb80]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x56461167d2d0]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x56461168a350]:  store i8 %32, i8* %33, align 1
	}

[0x56461167d350]:   %34 = lshr i64 %8, 63 {
	[0x5646116fd370]:  %34 = lshr i64 %8, 63
	}

[0x56461167d3d0]:   %35 = xor i64 %31, %34 {
	[0x56461168bea0]:  %35 = xor i64 %31, %34
	}

[0x56461167d450]:   %36 = add nuw nsw i64 %35, %34 {
	[0x5646116fd7b0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x56461167d4d0]:   %37 = icmp eq i64 %36, 2 {
	[0x56461168bd50]:  %37 = icmp eq i64 %36, 2
	}

[0x56461167d538]:   %38 = zext i1 %37 to i8 {
	[0x564611755188]:  %38 = zext i1 %37 to i8
	}

[0x56461167d5e0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56461168b670]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x56461167d670]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x5646116fd6a0]:  store i8 %38, i8* %39, align 1
	}

[0x56461167d790]:   store i64 add (i64 ptrtoint (%seg_4005b0__rodata_type* @seg_4005b0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x5646116fd590]:  store i64 add (i64 ptrtoint (i8* @G__0x4005b4 to i64), i64 92), i64* %RDI.i, align 8
	}

[0x56461167d850]:   %40 = add i64 %7, -12 {
	[0x56461168bbf0]:  %40 = add i64 %7, -12
	}

[0x56461167d8d0]:   %41 = add i64 %10, 24 {
	[0x56461168ba90]:  %41 = add i64 %10, 24
	}

[0x56461167d950]:   store i64 %41, i64* %PC, align 8 {
	[0x56461168c000]:  store i64 %41, i64* %3, align 8
	}

[0x56461167d9b8]:   %42 = inttoptr i64 %40 to i32* {
	[0x5646116fdd48]:  %42 = inttoptr i64 %40 to i32*
	}

[0x56461167da30]:   store i32 0, i32* %42, align 4 {
	[0x5646116fd900]:  store i32 0, i32* %42, align 4
	}

[0x56461167da98]:   %43 = load i64, i64* %PC, align 8 {
	[0x564611719248]:  %44 = load i64, i64* %3, align 8
	}

[0x56461167db10]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56461168c710]:  store i8 0, i8* %AL.i, align 1
	}

[0x56461167dbd0]:   %44 = add i64 %43, -281 {
	[0x56461168c570]:  %45 = add i64 %44, -281
	}

[0x56461167dc50]:   %45 = add i64 %43, 7 {
	[0x56461168c410]:  %46 = add i64 %44, 7
	}

[0x56461167dcb8]:   %46 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646117399d8]:  %47 = load i64, i64* %6, align 8
	}

[0x56461167dd30]:   %47 = add i64 %46, -8 {
	[0x5646116fdae0]:  %48 = add i64 %47, -8
	}

[0x56461167dd98]:   %48 = inttoptr i64 %47 to i64* {
	[0x564611737a18]:  %49 = inttoptr i64 %48 to i64*
	}

[0x56461167de10]:   store i64 %45, i64* %48, align 8 {
	[0x56461168c150]:  store i64 %46, i64* %49, align 8
	}

[0x56461167de90]:   store i64 %47, i64* %RSP, align 8, !tbaa !1261 {
	[0x5646116fd9d0]:  store i64 %48, i64* %6, align 8
	}

[0x56461167df10]:   store i64 %44, i64* %PC, align 8, !tbaa !1261 {
	[0x56461168d070]:  store i64 %45, i64* %3, align 8
	}

[0x56461167e118]:   %49 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2) {
	[0x564611688510]:  %call2_40051b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %45, %struct.Memory.32* %2)
	}

[0x56461167e1d8]:   %50 = load i64, i64* %PC, align 8 {
	[0x564611738208]:  %51 = load i64, i64* %3, align 8
	}

[0x56461167e250]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x56461168eca0]:  store i64 0, i64* %RCX.i, align 8
	}

[0x56461167e2b8]:   %51 = load i64, i64* %RBP, align 8 {
	[0x5646116fff78]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x56461167e330]:   %52 = add i64 %51, -8 {
	[0x56461168da00]:  %53 = add i64 %52, -8
	}

[0x56461167e398]:   %53 = load i32, i32* %EAX, align 4 {
	[0x5646116ff4c8]:  %54 = load i32, i32* %EAX.i, align 4
	}

[0x56461167e410]:   %54 = add i64 %50, 5 {
	[0x56461168d800]:  %55 = add i64 %51, 5
	}

[0x56461167e490]:   store i64 %54, i64* %PC, align 8 {
	[0x56461168d5d0]:  store i64 %55, i64* %3, align 8
	}

[0x56461167e4f8]:   %55 = inttoptr i64 %52 to i32* {
	[0x5646116ff398]:  %56 = inttoptr i64 %53 to i32*
	}

[0x56461167e570]:   store i32 %53, i32* %55, align 4 {
	[0x56461168d470]:  store i32 %54, i32* %56, align 4
	}

[0x56461167e5d8]:   %56 = load i32, i32* %ECX, align 4 {
	[0x5646116ff268]:  %57 = load i32, i32* %ECX.i9, align 4
	}

[0x56461167e638]:   %57 = zext i32 %56 to i64 {
	[0x5646116feda8]:  %58 = zext i32 %57 to i64
	}

[0x56461167e698]:   %58 = load i64, i64* %PC, align 8 {
	[0x5646116fea18]:  %59 = load i64, i64* %3, align 8
	}

[0x56461167e710]:   store i64 %57, i64* %RAX, align 8, !tbaa !1261 {
	[0x56461168d320]:  store i64 %58, i64* %RAX.i, align 8
	}

[0x56461167e778]:   %59 = load i64, i64* %RSP, align 8 {
	[0x5646116fe7b8]:  %60 = load i64, i64* %6, align 8
	}

[0x56461167e7f0]:   %60 = add i64 %59, 16 {
	[0x56461168d1c0]:  %61 = add i64 %60, 16
	}

[0x56461167e870]:   store i64 %60, i64* %RSP, align 8, !tbaa !1261 {
	[0x56461168e2d0]:  store i64 %61, i64* %6, align 8
	}

[0x56461167e930]:   %61 = icmp ugt i64 %59, -17 {
	[0x564611690370]:  %62 = icmp ugt i64 %60, -17
	}

[0x56461167e998]:   %62 = zext i1 %61 to i8 {
	[0x5646117001d8]:  %63 = zext i1 %62 to i8
	}

[0x56461167ea10]:   store i8 %62, i8* %14, align 1, !tbaa !1265 {
	[0x56461168e970]:  store i8 %63, i8* %14, align 1
	}

[0x56461167ea78]:   %63 = trunc i64 %60 to i32 {
	[0x564611701f08]:  %64 = trunc i64 %61 to i32
	}

[0x56461167eaf0]:   %64 = and i32 %63, 255 {
	[0x56461168fff0]:  %65 = and i32 %64, 255
	}

[0x56461167eb90]:   %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9 {
	[0x564611719e80]:  %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
	}

[0x56461167ec58]:   %66 = trunc i32 %65 to i8 {
	[0x564611701dd8]:  %67 = trunc i32 %66 to i8
	}

[0x56461167ecd0]:   %67 = and i8 %66, 1 {
	[0x56461168e820]:  %68 = and i8 %67, 1
	}

[0x56461167ed50]:   %68 = xor i8 %67, 1 {
	[0x56461168fda0]:  %69 = xor i8 %68, 1
	}

[0x56461167edd0]:   store i8 %68, i8* %21, align 1, !tbaa !1279 {
	[0x56461168e4f0]:  store i8 %69, i8* %21, align 1
	}

[0x5646116e3620]:   %69 = xor i64 %59, 16 {
	[0x56461168e3e0]:  %70 = xor i64 %60, 16
	}

[0x5646116e36a0]:   %70 = xor i64 %69, %60 {
	[0x56461168e750]:  %71 = xor i64 %70, %61
	}

[0x5646116e3720]:   %71 = lshr i64 %70, 4 {
	[0x5646116933a0]:  %72 = lshr i64 %71, 4
	}

[0x5646116e3788]:   %72 = trunc i64 %71 to i8 {
	[0x56461168b158]:  %73 = trunc i64 %72 to i8
	}

[0x5646116e3800]:   %73 = and i8 %72, 1 {
	[0x5646116931c0]:  %74 = and i8 %73, 1
	}

[0x5646116e3880]:   store i8 %73, i8* %27, align 1, !tbaa !1280 {
	[0x564611693060]:  store i8 %74, i8* %27, align 1
	}

[0x5646116e3900]:   %74 = icmp eq i64 %60, 0 {
	[0x564611692f00]:  %75 = icmp eq i64 %61, 0
	}

[0x5646116e3968]:   %75 = zext i1 %74 to i8 {
	[0x5646117017e8]:  %76 = zext i1 %75 to i8
	}

[0x5646116e39e0]:   store i8 %75, i8* %30, align 1, !tbaa !1281 {
	[0x564611692da0]:  store i8 %76, i8* %30, align 1
	}

[0x5646116e3a60]:   %76 = lshr i64 %60, 63 {
	[0x5646116912f0]:  %77 = lshr i64 %61, 63
	}

[0x5646116e3ac8]:   %77 = trunc i64 %76 to i8 {
	[0x564611700568]:  %78 = trunc i64 %77 to i8
	}

[0x5646116e3b40]:   store i8 %77, i8* %33, align 1, !tbaa !1282 {
	[0x564611690b30]:  store i8 %78, i8* %33, align 1
	}

[0x5646116e3bc0]:   %78 = lshr i64 %59, 63 {
	[0x5646116934f0]:  %79 = lshr i64 %60, 63
	}

[0x5646116e3c40]:   %79 = xor i64 %76, %78 {
	[0x56461168aeb0]:  %80 = xor i64 %77, %79
	}

[0x5646116e3cc0]:   %80 = add nuw nsw i64 %79, %76 {
	[0x56461168ad50]:  %81 = add nuw nsw i64 %80, %77
	}

[0x5646116e3d40]:   %81 = icmp eq i64 %80, 2 {
	[0x56461168ac30]:  %82 = icmp eq i64 %81, 2
	}

[0x5646116e3da8]:   %82 = zext i1 %81 to i8 {
	[0x564611700438]:  %83 = zext i1 %82 to i8
	}

[0x5646116e3e20]:   store i8 %82, i8* %39, align 1, !tbaa !1283 {
	[0x56461168aae0]:  store i8 %83, i8* %39, align 1
	}

[0x5646116e3ea0]:   %83 = add i64 %58, 7 {
	[0x56461168a900]:  %84 = add i64 %59, 7
	}

[0x5646116e3f20]:   store i64 %83, i64* %PC, align 8 {
	[0x56461168a820]:  store i64 %84, i64* %3, align 8
	}

[0x5646116e3fa0]:   %84 = add i64 %59, 24 {
	[0x5646116937b0]:  %85 = add i64 %60, 24
	}

[0x5646116e4008]:   %85 = inttoptr i64 %60 to i64* {
	[0x564611700308]:  %86 = inttoptr i64 %61 to i64*
	}

[0x5646116e4068]:   %86 = load i64, i64* %85, align 8 {
	[0x564611702168]:  %87 = load i64, i64* %86, align 8
	}

[0x5646116e40e0]:   store i64 %86, i64* %RBP, align 8, !tbaa !1261 {
	[0x56461168b010]:  store i64 %87, i64* %RBP.i, align 8
	}

[0x5646116e4160]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611696400]:  store i64 %85, i64* %6, align 8
	}

[0x5646116e41e0]:   %87 = add i64 %58, 8 {
	[0x5646116962a0]:  %88 = add i64 %59, 8
	}

[0x5646116e4260]:   store i64 %87, i64* %PC, align 8 {
	[0x5646116960c0]:  store i64 %88, i64* %3, align 8
	}

[0x5646116e42c8]:   %88 = inttoptr i64 %84 to i64* {
	[0x564611703208]:  %89 = inttoptr i64 %85 to i64*
	}

[0x5646116e4328]:   %89 = load i64, i64* %88, align 8 {
	[0x564611702c18]:  %90 = load i64, i64* %89, align 8
	}

[0x5646116e43a0]:   store i64 %89, i64* %PC, align 8, !tbaa !1261 {
	[0x564611695f60]:  store i64 %90, i64* %3, align 8
	}

[0x5646116e4420]:   %90 = add i64 %59, 32 {
	[0x564611695e00]:  %91 = add i64 %60, 32
	}

[0x5646116e44a0]:   store i64 %90, i64* %RSP, align 8, !tbaa !1261 {
	[0x564611695850]:  store i64 %91, i64* %6, align 8
	}

[0x5646116e4508]:   ret %struct.Memory* %49 {
	[0x564611702ae8]:  ret %struct.Memory.32* %call2_40051b
	}

[0x564611746578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x564611748838]:  %43 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x564611747d58]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x564611752858]:  %50 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x56461167b720]: block_400500 {
	[0x5646117183c0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
