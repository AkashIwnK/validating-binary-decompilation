Writing '/tmp/tmp7duv2wkm.dot'...
Writing '/tmp/tmp7duv2wkm.dot':Done

Reading LLVM: /tmp/tmpu5ve42sz-query.ll
Extracting function [main] from /tmp/tmpu5ve42sz-query.ll
Dot file generated!
Writing '/tmp/tmpzk4pcdka.dot'...
Writing '/tmp/tmpzk4pcdka.dot':Done

Reading LLVM: /tmp/tmp39ucbcob-target.ll
Extracting function [main] from /tmp/tmp39ucbcob-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = add i64 %7, -12
- 48 %40 = add i64 %10, 14
- 49 store i64 %40, i64* %3, align 8
- 50 %41 = inttoptr i64 %39 to i32*
- 51 store i32 0, i32* %41, align 4
- 52 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 53 %EDI.i = bitcast %union.anon* %42 to i32*
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -8
- 56 %45 = load i32, i32* %EDI.i, align 4
- 57 %46 = load i64, i64* %3, align 8
- 58 %47 = add i64 %46, 3
- 59 store i64 %47, i64* %3, align 8
- 60 %48 = inttoptr i64 %44 to i32*
- 61 store i32 %45, i32* %48, align 4
- 62 %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 63 %RSI.i45 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
- 64 %50 = load i64, i64* %RBP.i, align 8
- 65 %51 = add i64 %50, -16
- 66 %52 = load i64, i64* %RSI.i45, align 8
- 67 %53 = load i64, i64* %3, align 8
- 68 %54 = add i64 %53, 4
- 69 store i64 %54, i64* %3, align 8
- 70 %55 = inttoptr i64 %51 to i64*
- 71 store i64 %52, i64* %55, align 8
- 72 %56 = load i64, i64* %RBP.i, align 8
- 73 %57 = add i64 %56, -8
- 74 %58 = load i64, i64* %3, align 8
- 75 %59 = add i64 %58, 4
- 76 store i64 %59, i64* %3, align 8
- 77 %60 = inttoptr i64 %57 to i32*
- 78 %61 = load i32, i32* %60, align 4
- 79 %62 = add i32 %61, -2
- 80 %63 = icmp ult i32 %61, 2
- 81 %64 = zext i1 %63 to i8
- 82 store i8 %64, i8* %14, align 1
- 83 %65 = and i32 %62, 255
- 84 %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
- 85 %67 = trunc i32 %66 to i8
- 86 %68 = and i8 %67, 1
- 87 %69 = xor i8 %68, 1
- 88 store i8 %69, i8* %21, align 1
- 89 %70 = xor i32 %62, %61
- 90 %71 = lshr i32 %70, 4
- 91 %72 = trunc i32 %71 to i8
- 92 %73 = and i8 %72, 1
- 93 store i8 %73, i8* %26, align 1
- 94 %74 = icmp eq i32 %62, 0
- 95 %75 = zext i1 %74 to i8
- 96 store i8 %75, i8* %29, align 1
- 97 %76 = lshr i32 %62, 31
- 98 %77 = trunc i32 %76 to i8
- 99 store i8 %77, i8* %32, align 1
- 100 %78 = lshr i32 %61, 31
- 101 %79 = xor i32 %76, %78
- 102 %80 = add nuw nsw i32 %79, %78
- 103 %81 = icmp eq i32 %80, 2
- 104 %82 = zext i1 %81 to i8
- 105 store i8 %82, i8* %38, align 1
- 106 %.v = select i1 %74, i64 10, i64 31
- 107 %83 = add i64 %58, %.v
- 108 store i64 %83, i64* %3, align 8
- 109 %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 110 %RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %84, i64 0, i32 0
- 111 \<badref\> = br i1 %74, label %block_4005b0, label %block_.L_4005c5
- 112 %85 = add i64 %56, -16
- 113 %86 = add i64 %83, 4
- 114 store i64 %86, i64* %3, align 8
- 115 %87 = inttoptr i64 %85 to i64*
- 116 %88 = load i64, i64* %87, align 8
- 117 store i64 %88, i64* %RAX.i26, align 8
- 118 %RDI.i37 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 119 %89 = add i64 %88, 8
- 120 %90 = add i64 %83, 8
- 121 store i64 %90, i64* %3, align 8
- 122 %91 = inttoptr i64 %89 to i64*
- 123 %92 = load i64, i64* %91, align 8
- 124 store i64 %92, i64* %RDI.i37, align 8
- 125 %93 = add i64 %83, -416
- 126 %94 = add i64 %83, 13
- 127 %95 = load i64, i64* %6, align 8
- 128 %96 = add i64 %95, -8
- 129 %97 = inttoptr i64 %96 to i64*
- 130 store i64 %94, i64* %97, align 8
- 131 store i64 %96, i64* %6, align 8
- 132 store i64 %93, i64* %3, align 8
- 133 %98 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 134 %EAX.i29 = bitcast %union.anon* %84 to i32*
- 135 %99 = load i64, i64* %RBP.i, align 8
- 136 %100 = add i64 %99, -24
- 137 %101 = load i32, i32* %EAX.i29, align 4
- 138 %102 = load i64, i64* %3, align 8
- 139 %103 = add i64 %102, 3
- 140 store i64 %103, i64* %3, align 8
- 141 %104 = inttoptr i64 %100 to i32*
- 142 store i32 %101, i32* %104, align 4
- 143 %105 = load i64, i64* %3, align 8
- 144 %106 = add i64 %105, 18
- 145 \<badref\> = br label %block_.L_4005d2
- 146 store i64 8, i64* %RAX.i26, align 8
- 147 %EAX.i23 = bitcast %union.anon* %84 to i32*
- 148 %107 = add i64 %56, -24
- 149 %108 = add i64 %83, 8
- 150 store i64 %108, i64* %3, align 8
- 151 %109 = inttoptr i64 %107 to i32*
- 152 store i32 8, i32* %109, align 4
- 153 %110 = load i64, i64* %3, align 8
- 154 %111 = add i64 %110, 5
- 155 store i64 %111, i64* %3, align 8
- 156 %.pre = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 157 \<badref\> = br label %block_.L_4005d2
- 158 %EAX.i15.pre-phi = phi i32* [ %EAX.i23, %block_.L_4005c5 ], [ %EAX.i29, %block_4005b0 ]
- 159 %RDI.i.pre-phi = phi i64* [ %.pre, %block_.L_4005c5 ], [ %RDI.i37, %block_4005b0 ]
- 160 %storemerge = phi i64 [ %111, %block_.L_4005c5 ], [ %106, %block_4005b0 ]
- 161 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005c5 ], [ %98, %block_4005b0 ]
- 162 %112 = load i64, i64* %RBP.i, align 8
- 163 %113 = add i64 %112, -24
- 164 %114 = add i64 %storemerge, 3
- 165 store i64 %114, i64* %3, align 8
- 166 %115 = inttoptr i64 %113 to i32*
- 167 %116 = load i32, i32* %115, align 4
- 168 %117 = zext i32 %116 to i64
- 169 store i64 %117, i64* %RAX.i26, align 8
- 170 store i64 3, i64* %RDI.i.pre-phi, align 8
- 171 %118 = add i64 %112, -20
- 172 %119 = add i64 %storemerge, 11
- 173 store i64 %119, i64* %3, align 8
- 174 %120 = inttoptr i64 %118 to i32*
- 175 store i32 %116, i32* %120, align 4
- 176 %121 = load i64, i64* %RBP.i, align 8
- 177 %122 = add i64 %121, -20
- 178 %123 = load i64, i64* %3, align 8
- 179 %124 = add i64 %123, 3
- 180 store i64 %124, i64* %3, align 8
- 181 %125 = inttoptr i64 %122 to i32*
- 182 %126 = load i32, i32* %125, align 4
- 183 %127 = zext i32 %126 to i64
- 184 store i64 %127, i64* %RSI.i45, align 8
- 185 %128 = add i64 %123, -205
- 186 %129 = add i64 %123, 8
- 187 %130 = load i64, i64* %6, align 8
- 188 %131 = add i64 %130, -8
- 189 %132 = inttoptr i64 %131 to i64*
- 190 store i64 %129, i64* %132, align 8
- 191 store i64 %131, i64* %6, align 8
- 192 store i64 %128, i64* %3, align 8
- 193 %call2_4005e0 = tail call %struct.Memory* @sub_400510.Ack(%struct.State* nonnull %0, i64 %128, %struct.Memory* %MEMORY.0)
- 194 %ESI.i9 = bitcast %union.anon* %49 to i32*
- 195 %133 = load i64, i64* %3, align 8
- 196 store i64 0, i64* %RSI.i45, align 8
- 197 %134 = load i64, i64* %RBP.i, align 8
- 198 %135 = add i64 %134, -28
- 199 %136 = load i32, i32* %EAX.i15.pre-phi, align 4
- 200 %137 = add i64 %133, 5
- 201 store i64 %137, i64* %3, align 8
- 202 %138 = inttoptr i64 %135 to i32*
- 203 store i32 %136, i32* %138, align 4
- 204 %139 = load i32, i32* %ESI.i9, align 4
- 205 %140 = zext i32 %139 to i64
- 206 %141 = load i64, i64* %3, align 8
- 207 store i64 %140, i64* %RAX.i26, align 8
- 208 %142 = load i64, i64* %6, align 8
- 209 %143 = add i64 %142, 32
- 210 store i64 %143, i64* %6, align 8
- 211 %144 = icmp ugt i64 %142, -33
- 212 %145 = zext i1 %144 to i8
- 213 store i8 %145, i8* %14, align 1
- 214 %146 = trunc i64 %143 to i32
- 215 %147 = and i32 %146, 255
- 216 %148 = tail call i32 @llvm.ctpop.i32(i32 %147)
- 217 %149 = trunc i32 %148 to i8
- 218 %150 = and i8 %149, 1
- 219 %151 = xor i8 %150, 1
- 220 store i8 %151, i8* %21, align 1
- 221 %152 = xor i64 %143, %142
- 222 %153 = lshr i64 %152, 4
- 223 %154 = trunc i64 %153 to i8
- 224 %155 = and i8 %154, 1
- 225 store i8 %155, i8* %26, align 1
- 226 %156 = icmp eq i64 %143, 0
- 227 %157 = zext i1 %156 to i8
- 228 store i8 %157, i8* %29, align 1
- 229 %158 = lshr i64 %143, 63
- 230 %159 = trunc i64 %158 to i8
- 231 store i8 %159, i8* %32, align 1
- 232 %160 = lshr i64 %142, 63
- 233 %161 = xor i64 %158, %160
- 234 %162 = add nuw nsw i64 %161, %158
- 235 %163 = icmp eq i64 %162, 2
- 236 %164 = zext i1 %163 to i8
- 237 store i8 %164, i8* %38, align 1
- 238 %165 = add i64 %141, 7
- 239 store i64 %165, i64* %3, align 8
- 240 %166 = add i64 %142, 40
- 241 %167 = inttoptr i64 %143 to i64*
- 242 %168 = load i64, i64* %167, align 8
- 243 store i64 %168, i64* %RBP.i, align 8
- 244 store i64 %166, i64* %6, align 8
- 245 %169 = add i64 %141, 8
- 246 store i64 %169, i64* %3, align 8
- 247 %170 = inttoptr i64 %166 to i64*
- 248 %171 = load i64, i64* %170, align 8
- 249 store i64 %171, i64* %3, align 8
- 250 %172 = add i64 %142, 48
- 251 store i64 %172, i64* %6, align 8
- 252 ret %struct.Memory* %call2_4005e0
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4af6aea0>, {0: {0}, 1: {11}, 2: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 3: {13}, 4: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 5: {10}, 6: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 7: {236, 78, 16, 157, 62}, 8: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 9: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 10: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 11: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 12: {21}, 13: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 14: {23}, 15: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 16: {25}, 17: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 18: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 19: {88, 28, 183}, 20: {162, 241, 184, 89, 29}, 21: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 22: {192, 97, 38, 186, 91, 31}, 23: {32, 187, 92}, 24: {33}, 25: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 26: {35, 201, 106, 50, 189, 94}, 27: {36, 190, 95}, 28: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 29: {192, 97, 38, 186, 91, 31}, 30: {39}, 31: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 32: {41, 194, 99}, 33: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 34: {43}, 35: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 36: {197, 49, 45, 200}, 37: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 38: {47}, 39: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 40: {197, 49, 45, 200}, 41: {35, 201, 106, 50, 189, 94}, 42: {130, 202, 107, 112, 51}, 43: {108, 203, 52, 85}, 44: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 45: {54}, 46: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 47: {56}, 48: {57}, 49: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 50: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 51: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 52: {5}, 53: {2, 4, 6}, 54: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 55: {236, 78, 16, 157, 62}, 56: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 57: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 58: {65, 148, 125, 133}, 59: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 60: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 61: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 62: {3}, 63: {8, 9, 7}, 64: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 65: {221, 70}, 66: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 67: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 68: {80, 73, 222}, 69: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 70: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 71: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 72: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 73: {236, 78, 16, 157, 62}, 74: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 75: {80, 73, 222}, 76: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 77: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 78: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 79: {84}, 80: {108, 203, 52, 85}, 81: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 82: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 83: {88, 28, 183}, 84: {162, 241, 184, 89, 29}, 85: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 86: {192, 97, 38, 186, 91, 31}, 87: {32, 187, 92}, 88: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 89: {35, 201, 106, 50, 189, 94}, 90: {36, 190, 95}, 91: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 92: {192, 97, 38, 186, 91, 31}, 93: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 94: {41, 194, 99}, 95: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 96: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 97: {105, 102}, 98: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 99: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 100: {105, 102}, 101: {35, 201, 106, 50, 189, 94}, 102: {130, 202, 107, 112, 51}, 103: {108, 203, 52, 85}, 104: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 105: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 106: {111}, 107: {130, 202, 107, 112, 51}, 108: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 109: {1}, 110: {8, 9, 7}, 111: {114}, 112: {221, 70}, 113: {80, 73, 222}, 114: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 115: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 116: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 117: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 118: {8, 9, 7}, 119: {155, 228, 213, 227}, 120: {155, 228, 213, 227}, 121: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 122: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 123: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 124: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 125: {233}, 126: {234}, 127: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 128: {236, 78, 16, 157, 62}, 129: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 130: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 131: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 132: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 133: {162, 241, 184, 89, 29}, 134: {2, 4, 6}, 135: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 136: {132, 124}, 137: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 138: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 139: {65, 148, 125, 133}, 140: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 141: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 142: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 143: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 144: set(), 145: {245, 118}, 146: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 147: {2, 4, 6}, 148: {132, 124}, 149: {155, 228, 213, 227}, 150: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 151: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 152: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 153: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 154: {168, 115}, 155: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 156: {8, 9, 7}, 157: {245, 118}, 158: {120, 123, 119}, 159: {120, 123, 119}, 160: {120, 123, 119}, 161: {120, 123, 119}, 162: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 163: {132, 124}, 164: {65, 148, 125, 133}, 165: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 166: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 167: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 168: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 169: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 170: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 171: {146, 140}, 172: {141}, 173: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 174: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 175: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 176: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 177: {146, 140}, 178: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 179: {65, 148, 125, 133}, 180: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 181: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 182: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 183: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 184: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 185: {154}, 186: {155, 228, 213, 227}, 187: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 188: {236, 78, 16, 157, 62}, 189: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 190: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 191: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 192: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 193: {162, 241, 184, 89, 29}, 194: {2, 4, 6}, 195: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 196: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 197: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 198: {166}, 199: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 200: {168, 115}, 201: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 202: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 203: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 204: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 205: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 206: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 207: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 208: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 209: {177}, 210: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 211: {179}, 212: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 213: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 214: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 215: {88, 28, 183}, 216: {162, 241, 184, 89, 29}, 217: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 218: {192, 97, 38, 186, 91, 31}, 219: {32, 187, 92}, 220: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 221: {35, 201, 106, 50, 189, 94}, 222: {36, 190, 95}, 223: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 224: {192, 97, 38, 186, 91, 31}, 225: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 226: {41, 194, 99}, 227: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 228: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 229: {197, 49, 45, 200}, 230: {96, 37, 198, 103, 46, 182, 185, 90, 27, 30, 191}, 231: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 232: {197, 49, 45, 200}, 233: {35, 201, 106, 50, 189, 94}, 234: {130, 202, 107, 112, 51}, 235: {108, 203, 52, 85}, 236: {195, 100, 137, 42, 204, 109, 173, 180, 53, 86, 24, 152}, 237: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 238: {206}, 239: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 240: {208}, 241: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 242: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 243: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 244: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 245: {155, 228, 213, 227}, 246: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 247: {224, 67, 230, 135, 170, 75, 237, 143, 17, 82, 209, 150, 215, 59, 158, 127}, 248: {129, 131, 136, 12, 15, 145, 19, 147, 151, 156, 163, 165, 167, 172, 174, 176, 61, 63, 64, 69, 71, 72, 77, 79, 210, 83, 216, 225, 231, 235, 242, 243, 244}, 249: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 250: {218}, 251: {128, 134, 138, 139, 14, 142, 144, 18, 20, 149, 22, 153, 26, 159, 160, 161, 34, 164, 40, 169, 171, 44, 175, 48, 178, 181, 55, 58, 60, 188, 193, 66, 68, 196, 199, 74, 76, 205, 207, 81, 211, 212, 214, 87, 217, 219, 93, 223, 98, 226, 101, 229, 104, 232, 110, 238, 239, 113, 240, 116, 117, 126}, 252: {220}})
Equivalent! frozenset({72, 79}) {74, 67}
Equivalent! frozenset({80, 73}) {75, 68}
Equivalent! frozenset({81, 74}) {76, 69}
Equivalent! frozenset({235, 156}) {187, 127}
Equivalent! frozenset({236, 157}) {128, 188}
Equivalent! frozenset({160, 239}) {131, 191}
Equivalent! frozenset({245, 118}) {145, 157}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4af6aea0>, {0: {0}, 1: {11}, 2: {12}, 3: {13}, 4: {14}, 5: {10}, 6: {15}, 7: {16}, 8: {17}, 9: {18}, 10: {19}, 11: {20}, 12: {21}, 13: {22}, 14: {23}, 15: {24}, 16: {25}, 17: {26}, 18: {27}, 19: {28}, 20: {29}, 21: {30}, 22: {31}, 23: {32}, 24: {33}, 25: {34}, 26: {35}, 27: {36}, 28: {37}, 29: {38}, 30: {39}, 31: {40}, 32: {41}, 33: {42}, 34: {43}, 35: {44}, 36: {45}, 37: {46}, 38: {47}, 39: {48}, 40: {49}, 41: {50}, 42: {51}, 43: {52}, 44: {53}, 45: {54}, 46: {55}, 47: {56}, 48: {57}, 49: {58}, 50: {59}, 51: {60}, 52: {5}, 53: {6}, 54: {61}, 55: {62}, 56: {63}, 57: {64, 147}, 58: {65, 148}, 59: {66, 149}, 60: {67}, 61: {68}, 62: {3}, 63: {8}, 64: {69}, 65: {70}, 66: {71}, 67: {79}, 68: {73}, 69: {74}, 70: {75}, 71: {76}, 72: {77}, 73: {78}, 74: {72}, 75: {80}, 76: {81}, 77: {82}, 78: {83}, 79: {84}, 80: {85}, 81: {86}, 82: {87}, 83: {88}, 84: {89}, 85: {90}, 86: {91}, 87: {92}, 88: {93}, 89: {94}, 90: {95}, 91: {96}, 92: {97}, 93: {98}, 94: {99}, 95: {100}, 96: {101}, 97: {102}, 98: {103}, 99: {104}, 100: {105}, 101: {106}, 102: {107}, 103: {108}, 104: {109}, 105: {110}, 106: {111}, 107: {112}, 108: {113}, 109: {1}, 110: {7}, 111: {114}, 112: {221}, 113: {222}, 114: {223}, 115: {224}, 116: {225}, 117: {226}, 118: {9}, 119: {227}, 120: {228}, 121: {229}, 122: {230}, 123: {231}, 124: {232}, 125: {233}, 126: {234}, 127: {156}, 128: {236}, 129: {237}, 130: {238}, 131: {160}, 132: {240}, 133: {241}, 134: set(), 135: set(), 136: set(), 137: set(), 138: {64, 147}, 139: {65, 148}, 140: {66, 149}, 141: set(), 142: set(), 143: set(), 144: set(), 145: {245}, 146: {226, 138, 117, 175}, 147: set(), 148: set(), 149: {228}, 150: {229}, 151: set(), 152: set(), 153: {163}, 154: {168}, 155: {169}, 156: set(), 157: {118}, 158: set(), 159: set(), 160: set(), 161: {123}, 162: {131}, 163: {132}, 164: set(), 165: set(), 166: {135}, 167: {136}, 168: {137}, 169: {138}, 170: set(), 171: {140}, 172: set(), 173: set(), 174: {143}, 175: {144}, 176: {145}, 177: {146}, 178: {64, 147}, 179: {65, 148}, 180: {66, 149}, 181: {150}, 182: {151}, 183: {152}, 184: {153}, 185: {154}, 186: {155}, 187: {235}, 188: {157}, 189: {158}, 190: {159}, 191: {239}, 192: {161}, 193: {162}, 194: {4}, 195: {163}, 196: {153, 164}, 197: set(), 198: set(), 199: set(), 200: {168}, 201: {169}, 202: set(), 203: set(), 204: {172}, 205: {173}, 206: {174}, 207: {175}, 208: {176}, 209: {177}, 210: {178}, 211: {179}, 212: {180}, 213: {181}, 214: {182}, 215: {183}, 216: {184}, 217: {185}, 218: {186}, 219: {187}, 220: {188}, 221: {189}, 222: {190}, 223: {191}, 224: {192}, 225: {193}, 226: {194}, 227: {195}, 228: {196}, 229: {197}, 230: {198}, 231: {199}, 232: {200}, 233: {201}, 234: {202}, 235: {203}, 236: {204}, 237: {205}, 238: {206}, 239: {207}, 240: {208}, 241: {209}, 242: {210}, 243: {211}, 244: {212}, 245: {213}, 246: {214}, 247: {215}, 248: {216}, 249: {217}, 250: {218}, 251: {219}, 252: {220}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 add add
EXACT 48 add add
EXACT 49 store store
EXACT 50 inttoptr inttoptr
EXACT 51 store store
EXACT 52 getelementptr getelementptr
EXACT 53 bitcast bitcast
EXACT 54 load load
EXACT 55 add add
EXACT 56 load load
MORE 57 POT: 2
MORE 58 POT: 2
MORE 59 POT: 2
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 getelementptr getelementptr
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 load load
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 load load
EXACT 73 add add
EXACT 74 load load
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 load load
EXACT 79 add add
EXACT 80 icmp icmp
EXACT 81 zext zext
EXACT 82 store store
EXACT 83 and and
EXACT 84 tail tail
EXACT 85 trunc trunc
EXACT 86 and and
EXACT 87 xor xor
EXACT 88 store store
EXACT 89 xor xor
EXACT 90 lshr lshr
EXACT 91 trunc trunc
EXACT 92 and and
EXACT 93 store store
EXACT 94 icmp icmp
EXACT 95 zext zext
EXACT 96 store store
EXACT 97 lshr lshr
EXACT 98 trunc trunc
EXACT 99 store store
EXACT 100 lshr lshr
EXACT 101 xor xor
EXACT 102 add add
EXACT 103 icmp icmp
EXACT 104 zext zext
EXACT 105 store store
EXACT 106 select select
EXACT 107 add add
EXACT 108 store store
EXACT 109 getelementptr getelementptr
EXACT 110 getelementptr getelementptr
EXACT 111 br br
EXACT 112 add add
EXACT 113 add add
EXACT 114 store store
EXACT 115 inttoptr inttoptr
EXACT 116 load load
EXACT 117 store store
EXACT 118 getelementptr getelementptr
EXACT 119 add add
EXACT 120 add add
EXACT 121 store store
EXACT 122 inttoptr inttoptr
EXACT 123 load load
EXACT 124 store store
EXACT 125 add add
EXACT 126 add add
EXACT 127 load load
EXACT 128 add add
EXACT 129 inttoptr inttoptr
EXACT 130 store store
EXACT 131 store store
EXACT 132 store store
EXACT 133 tail tail
NO MATCH 134
NO MATCH 135
NO MATCH 136
NO MATCH 137
MORE 138 POT: 2
MORE 139 POT: 2
MORE 140 POT: 2
NO MATCH 141
NO MATCH 142
NO MATCH 143
NO MATCH 144
EXACT 145 br br
MORE 146 POT: 4
NO MATCH 147
NO MATCH 148
EXACT 149 add add
EXACT 150 store store
NO MATCH 151
NO MATCH 152
EXACT 153 load load
EXACT 154 add add
EXACT 155 store store
NO MATCH 156
EXACT 157 br br
NO MATCH 158
NO MATCH 159
NO MATCH 160
EXACT 161 phi phi
EXACT 162 load load
EXACT 163 add add
NO MATCH 164
NO MATCH 165
EXACT 166 inttoptr inttoptr
EXACT 167 load load
EXACT 168 zext zext
EXACT 169 store store
NO MATCH 170
EXACT 171 add add
NO MATCH 172
NO MATCH 173
EXACT 174 inttoptr inttoptr
EXACT 175 store store
EXACT 176 load load
EXACT 177 add add
MORE 178 POT: 2
MORE 179 POT: 2
MORE 180 POT: 2
EXACT 181 inttoptr inttoptr
EXACT 182 load load
EXACT 183 zext zext
EXACT 184 store store
EXACT 185 add add
EXACT 186 add add
EXACT 187 load load
EXACT 188 add add
EXACT 189 inttoptr inttoptr
EXACT 190 store store
EXACT 191 store store
EXACT 192 store store
EXACT 193 tail tail
EXACT 194 bitcast bitcast
EXACT 195 load load
MORE 196 POT: 2
NO MATCH 197
NO MATCH 198
NO MATCH 199
EXACT 200 add add
EXACT 201 store store
NO MATCH 202
NO MATCH 203
EXACT 204 load load
EXACT 205 zext zext
EXACT 206 load load
EXACT 207 store store
EXACT 208 load load
EXACT 209 add add
EXACT 210 store store
EXACT 211 icmp icmp
EXACT 212 zext zext
EXACT 213 store store
EXACT 214 trunc trunc
EXACT 215 and and
EXACT 216 tail tail
EXACT 217 trunc trunc
EXACT 218 and and
EXACT 219 xor xor
EXACT 220 store store
EXACT 221 xor xor
EXACT 222 lshr lshr
EXACT 223 trunc trunc
EXACT 224 and and
EXACT 225 store store
EXACT 226 icmp icmp
EXACT 227 zext zext
EXACT 228 store store
EXACT 229 lshr lshr
EXACT 230 trunc trunc
EXACT 231 store store
EXACT 232 lshr lshr
EXACT 233 xor xor
EXACT 234 add add
EXACT 235 icmp icmp
EXACT 236 zext zext
EXACT 237 store store
EXACT 238 add add
EXACT 239 store store
EXACT 240 add add
EXACT 241 inttoptr inttoptr
EXACT 242 load load
EXACT 243 store store
EXACT 244 store store
EXACT 245 add add
EXACT 246 store store
EXACT 247 inttoptr inttoptr
EXACT 248 load load
EXACT 249 store store
EXACT 250 add add
EXACT 251 store store
EXACT 252 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 4 %ESI = bitcast %union.anon* %4 to i32*
- 5 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 6 %EDI = bitcast %union.anon* %5 to i32*
- 7 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 8 %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 9 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 10 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 11 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 12 %6 = load i64, i64* %RBP, align 8
- 13 %7 = add i64 %1, 1
- 14 store i64 %7, i64* %PC, align 8
- 15 %8 = load i64, i64* %RSP, align 8
- 16 %9 = add i64 %8, -8
- 17 %10 = inttoptr i64 %9 to i64*
- 18 store i64 %6, i64* %10, align 8
- 19 %11 = load i64, i64* %PC, align 8
- 20 store i64 %9, i64* %RBP, align 8
- 21 %12 = add i64 %8, -40
- 22 store i64 %12, i64* %RSP, align 8
- 23 %13 = icmp ult i64 %9, 32
- 24 %14 = zext i1 %13 to i8
- 25 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 26 store i8 %14, i8* %15, align 1
- 27 %16 = trunc i64 %12 to i32
- 28 %17 = and i32 %16, 255
- 29 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 30 %19 = trunc i32 %18 to i8
- 31 %20 = and i8 %19, 1
- 32 %21 = xor i8 %20, 1
- 33 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 34 store i8 %21, i8* %22, align 1
- 35 %23 = xor i64 %9, %12
- 36 %24 = lshr i64 %23, 4
- 37 %25 = trunc i64 %24 to i8
- 38 %26 = and i8 %25, 1
- 39 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 40 store i8 %26, i8* %27, align 1
- 41 %28 = icmp eq i64 %12, 0
- 42 %29 = zext i1 %28 to i8
- 43 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 44 store i8 %29, i8* %30, align 1
- 45 %31 = lshr i64 %12, 63
- 46 %32 = trunc i64 %31 to i8
- 47 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 48 store i8 %32, i8* %33, align 1
- 49 %34 = lshr i64 %9, 63
- 50 %35 = xor i64 %31, %34
- 51 %36 = add nuw nsw i64 %35, %34
- 52 %37 = icmp eq i64 %36, 2
- 53 %38 = zext i1 %37 to i8
- 54 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 55 store i8 %38, i8* %39, align 1
- 56 %40 = add i64 %8, -12
- 57 %41 = add i64 %11, 14
- 58 store i64 %41, i64* %PC, align 8
- 59 %42 = inttoptr i64 %40 to i32*
- 60 store i32 0, i32* %42, align 4
- 61 %43 = load i64, i64* %RBP, align 8
- 62 %44 = add i64 %43, -8
- 63 %45 = load i32, i32* %EDI, align 4
- 64 %46 = load i64, i64* %PC, align 8
- 65 %47 = add i64 %46, 3
- 66 store i64 %47, i64* %PC, align 8
- 67 %48 = inttoptr i64 %44 to i32*
- 68 store i32 %45, i32* %48, align 4
- 69 %49 = load i64, i64* %RBP, align 8
- 70 %50 = add i64 %49, -16
- 71 %51 = load i64, i64* %RSI, align 8
- 72 %52 = load i64, i64* %PC, align 8
- 73 %53 = add i64 %52, 4
- 74 store i64 %53, i64* %PC, align 8
- 75 %54 = inttoptr i64 %50 to i64*
- 76 store i64 %51, i64* %54, align 8
- 77 %55 = load i64, i64* %RBP, align 8
- 78 %56 = add i64 %55, -8
- 79 %57 = load i64, i64* %PC, align 8
- 80 %58 = add i64 %57, 4
- 81 store i64 %58, i64* %PC, align 8
- 82 %59 = inttoptr i64 %56 to i32*
- 83 %60 = load i32, i32* %59, align 4
- 84 %61 = add i32 %60, -2
- 85 %62 = icmp ult i32 %60, 2
- 86 %63 = zext i1 %62 to i8
- 87 store i8 %63, i8* %15, align 1
- 88 %64 = and i32 %61, 255
- 89 %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12
- 90 %66 = trunc i32 %65 to i8
- 91 %67 = and i8 %66, 1
- 92 %68 = xor i8 %67, 1
- 93 store i8 %68, i8* %22, align 1
- 94 %69 = xor i32 %61, %60
- 95 %70 = lshr i32 %69, 4
- 96 %71 = trunc i32 %70 to i8
- 97 %72 = and i8 %71, 1
- 98 store i8 %72, i8* %27, align 1
- 99 %73 = icmp eq i32 %61, 0
- 100 %74 = zext i1 %73 to i8
- 101 store i8 %74, i8* %30, align 1
- 102 %75 = lshr i32 %61, 31
- 103 %76 = trunc i32 %75 to i8
- 104 store i8 %76, i8* %33, align 1
- 105 %77 = lshr i32 %60, 31
- 106 %78 = xor i32 %75, %77
- 107 %79 = add nuw nsw i32 %78, %77
- 108 %80 = icmp eq i32 %79, 2
- 109 %81 = zext i1 %80 to i8
- 110 store i8 %81, i8* %39, align 1
- 111 %.v = select i1 %73, i64 10, i64 31
- 112 %82 = add i64 %57, %.v
- 113 store i64 %82, i64* %PC, align 8
- 114 \<badref\> = br i1 %73, label %block_4005b0, label %block_4005c5
- 115 %83 = add i64 %82, 5
- 116 store i64 %83, i64* %PC, align 8
- 117 store i64 8, i64* %RAX, align 8
- 118 \<badref\> = br label %block_4005d2
- 119 %84 = phi i64 [ %.pre, %block_4005b0 ], [ %83, %block_4005c5 ]
- 120 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005b0 ], [ %55, %block_4005c5 ]
- 121 %.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]
- 122 %.sink5 = phi i64 [ 18, %block_4005b0 ], [ 5, %block_4005c5 ]
- 123 %MEMORY.0 = phi %struct.Memory* [ %164, %block_4005b0 ], [ %2, %block_4005c5 ]
- 124 %.sink7 = add i64 %.sink7.in, -24
- 125 %85 = add i64 %84, 3
- 126 store i64 %85, i64* %PC, align 8
- 127 %86 = inttoptr i64 %.sink7 to i32*
- 128 store i32 %.sink, i32* %86, align 4
- 129 %87 = load i64, i64* %PC, align 8
- 130 %88 = add i64 %87, %.sink5
- 131 %89 = load i64, i64* %RBP, align 8
- 132 %90 = add i64 %89, -24
- 133 %91 = add i64 %88, 3
- 134 store i64 %91, i64* %PC, align 8
- 135 %92 = inttoptr i64 %90 to i32*
- 136 %93 = load i32, i32* %92, align 4
- 137 %94 = zext i32 %93 to i64
- 138 store i64 %94, i64* %RAX, align 8
- 139 store i64 3, i64* %RDI, align 8
- 140 %95 = add i64 %89, -20
- 141 %96 = add i64 %88, 11
- 142 store i64 %96, i64* %PC, align 8
- 143 %97 = inttoptr i64 %95 to i32*
- 144 store i32 %93, i32* %97, align 4
- 145 %98 = load i64, i64* %RBP, align 8
- 146 %99 = add i64 %98, -20
- 147 %100 = load i64, i64* %PC, align 8
- 148 %101 = add i64 %100, 3
- 149 store i64 %101, i64* %PC, align 8
- 150 %102 = inttoptr i64 %99 to i32*
- 151 %103 = load i32, i32* %102, align 4
- 152 %104 = zext i32 %103 to i64
- 153 store i64 %104, i64* %RSI, align 8
- 154 %105 = add i64 %100, -205
- 155 %106 = add i64 %100, 8
- 156 %107 = load i64, i64* %RSP, align 8
- 157 %108 = add i64 %107, -8
- 158 %109 = inttoptr i64 %108 to i64*
- 159 store i64 %106, i64* %109, align 8
- 160 store i64 %108, i64* %RSP, align 8
- 161 store i64 %105, i64* %PC, align 8
- 162 %110 = tail call %struct.Memory* @sub_400510_Ack_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
- 163 %111 = load i64, i64* %PC, align 8
- 164 store i64 0, i64* %RSI, align 8
- 165 %112 = load i64, i64* %RBP, align 8
- 166 %113 = add i64 %112, -28
- 167 %114 = load i32, i32* %EAX, align 4
- 168 %115 = add i64 %111, 5
- 169 store i64 %115, i64* %PC, align 8
- 170 %116 = inttoptr i64 %113 to i32*
- 171 store i32 %114, i32* %116, align 4
- 172 %117 = load i32, i32* %ESI, align 4
- 173 %118 = zext i32 %117 to i64
- 174 %119 = load i64, i64* %PC, align 8
- 175 store i64 %118, i64* %RAX, align 8
- 176 %120 = load i64, i64* %RSP, align 8
- 177 %121 = add i64 %120, 32
- 178 store i64 %121, i64* %RSP, align 8
- 179 %122 = icmp ugt i64 %120, -33
- 180 %123 = zext i1 %122 to i8
- 181 store i8 %123, i8* %15, align 1
- 182 %124 = trunc i64 %121 to i32
- 183 %125 = and i32 %124, 255
- 184 %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #12
- 185 %127 = trunc i32 %126 to i8
- 186 %128 = and i8 %127, 1
- 187 %129 = xor i8 %128, 1
- 188 store i8 %129, i8* %22, align 1
- 189 %130 = xor i64 %121, %120
- 190 %131 = lshr i64 %130, 4
- 191 %132 = trunc i64 %131 to i8
- 192 %133 = and i8 %132, 1
- 193 store i8 %133, i8* %27, align 1
- 194 %134 = icmp eq i64 %121, 0
- 195 %135 = zext i1 %134 to i8
- 196 store i8 %135, i8* %30, align 1
- 197 %136 = lshr i64 %121, 63
- 198 %137 = trunc i64 %136 to i8
- 199 store i8 %137, i8* %33, align 1
- 200 %138 = lshr i64 %120, 63
- 201 %139 = xor i64 %136, %138
- 202 %140 = add nuw nsw i64 %139, %136
- 203 %141 = icmp eq i64 %140, 2
- 204 %142 = zext i1 %141 to i8
- 205 store i8 %142, i8* %39, align 1
- 206 %143 = add i64 %119, 7
- 207 store i64 %143, i64* %PC, align 8
- 208 %144 = add i64 %120, 40
- 209 %145 = inttoptr i64 %121 to i64*
- 210 %146 = load i64, i64* %145, align 8
- 211 store i64 %146, i64* %RBP, align 8
- 212 store i64 %144, i64* %RSP, align 8
- 213 %147 = add i64 %119, 8
- 214 store i64 %147, i64* %PC, align 8
- 215 %148 = inttoptr i64 %144 to i64*
- 216 %149 = load i64, i64* %148, align 8
- 217 store i64 %149, i64* %PC, align 8
- 218 %150 = add i64 %120, 48
- 219 store i64 %150, i64* %RSP, align 8
- 220 ret %struct.Memory* %110
- 221 %151 = add i64 %55, -16
- 222 %152 = add i64 %82, 4
- 223 store i64 %152, i64* %PC, align 8
- 224 %153 = inttoptr i64 %151 to i64*
- 225 %154 = load i64, i64* %153, align 8
- 226 store i64 %154, i64* %RAX, align 8
- 227 %155 = add i64 %154, 8
- 228 %156 = add i64 %82, 8
- 229 store i64 %156, i64* %PC, align 8
- 230 %157 = inttoptr i64 %155 to i64*
- 231 %158 = load i64, i64* %157, align 8
- 232 store i64 %158, i64* %RDI, align 8
- 233 %159 = add i64 %82, -416
- 234 %160 = add i64 %82, 13
- 235 %161 = load i64, i64* %RSP, align 8
- 236 %162 = add i64 %161, -8
- 237 %163 = inttoptr i64 %162 to i64*
- 238 store i64 %160, i64* %163, align 8
- 239 store i64 %162, i64* %RSP, align 8
- 240 store i64 %159, i64* %PC, align 8
- 241 %164 = tail call fastcc %struct.Memory* @ext_400410_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 242 %.sink.pre = load i32, i32* %EAX, align 4
- 243 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 244 %.pre = load i64, i64* %PC, align 8
- 245 \<badref\> = br label %block_4005d2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4a81fd90>, {0: {0}, 1: {109}, 2: {194, 147, 53, 134}, 3: {62}, 4: {194, 147, 53, 134}, 5: {52}, 6: {194, 147, 53, 134}, 7: {118, 156, 110, 63}, 8: {118, 156, 110, 63}, 9: {118, 156, 110, 63}, 10: {5}, 11: {1}, 12: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 13: {3}, 14: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 15: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 16: {128, 7, 73, 55, 188}, 17: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 18: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 19: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 20: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 21: {12}, 22: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 23: {14}, 24: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 25: {16}, 26: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 27: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 28: {83, 19, 215}, 29: {193, 133, 20, 84, 216}, 30: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 31: {224, 86, 22, 218, 92, 29}, 32: {219, 87, 23}, 33: {24}, 34: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 35: {101, 41, 233, 89, 26, 221}, 36: {90, 27, 222}, 37: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 38: {224, 86, 22, 218, 92, 29}, 39: {30}, 40: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 41: {32, 226, 94}, 42: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 43: {34}, 44: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 45: {40, 232, 36, 229}, 46: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 47: {38}, 48: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 49: {40, 232, 36, 229}, 50: {101, 41, 233, 89, 26, 221}, 51: {234, 42, 107, 102}, 52: {80, 43, 235, 103}, 53: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 54: {45}, 55: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 56: {47}, 57: {48}, 58: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 59: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 60: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 61: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 62: {128, 7, 73, 55, 188}, 63: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 64: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 65: {58, 139, 164, 179}, 66: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 67: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 68: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 69: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 70: {112, 65}, 71: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 72: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 73: {113, 75, 68}, 74: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 75: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 76: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 77: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 78: {128, 7, 73, 55, 188}, 79: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 80: {113, 75, 68}, 81: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 82: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 83: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 84: {79}, 85: {80, 43, 235, 103}, 86: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 87: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 88: {83, 19, 215}, 89: {193, 133, 20, 84, 216}, 90: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 91: {224, 86, 22, 218, 92, 29}, 92: {219, 87, 23}, 93: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 94: {101, 41, 233, 89, 26, 221}, 95: {90, 27, 222}, 96: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 97: {224, 86, 22, 218, 92, 29}, 98: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 99: {32, 226, 94}, 100: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 101: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 102: {97, 100}, 103: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 104: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 105: {97, 100}, 106: {101, 41, 233, 89, 26, 221}, 107: {234, 42, 107, 102}, 108: {80, 43, 235, 103}, 109: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 110: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 111: {106}, 112: {234, 42, 107, 102}, 113: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 114: {111}, 115: {200, 154}, 116: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 117: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 118: {145, 157}, 119: {160, 161, 158, 159}, 120: {160, 161, 158, 159}, 121: set(), 122: set(), 123: {160, 161, 158, 159}, 124: {136, 163, 148}, 125: {58, 139, 164, 179}, 126: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 127: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 128: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 129: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 130: {234, 42, 107, 102}, 131: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 132: {136, 163, 148}, 133: {58, 139, 164, 179}, 134: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 135: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 136: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 137: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 138: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 139: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 140: {177, 171}, 141: {172}, 142: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 143: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 144: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 145: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 146: {177, 171}, 147: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 148: {58, 139, 164, 179}, 149: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 150: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 151: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 152: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 153: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 154: {185}, 155: {245, 149, 119, 120, 186}, 156: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 157: {128, 7, 73, 55, 188}, 158: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 159: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 160: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 161: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 162: {193, 133, 20, 84, 216}, 163: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 164: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 165: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 166: {198}, 167: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 168: {200, 154}, 169: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 170: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 171: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 172: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 173: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 174: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 175: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 176: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 177: {209}, 178: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 179: {211}, 180: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 181: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 182: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 183: {83, 19, 215}, 184: {193, 133, 20, 84, 216}, 185: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 186: {224, 86, 22, 218, 92, 29}, 187: {219, 87, 23}, 188: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 189: {101, 41, 233, 89, 26, 221}, 190: {90, 27, 222}, 191: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 192: {224, 86, 22, 218, 92, 29}, 193: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 194: {32, 226, 94}, 195: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 196: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 197: {40, 232, 36, 229}, 198: {98, 37, 230, 18, 85, 21, 214, 217, 91, 28, 223}, 199: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 200: {40, 232, 36, 229}, 201: {101, 41, 233, 89, 26, 221}, 202: {234, 42, 107, 102}, 203: {80, 43, 235, 103}, 204: {33, 227, 104, 168, 44, 205, 236, 15, 81, 212, 183, 95}, 205: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 206: {238}, 207: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 208: {240}, 209: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 210: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 211: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 212: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 213: {245, 149, 119, 120, 186}, 214: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 215: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 216: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 217: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 218: {250}, 219: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 220: {252}, 221: {112, 65}, 222: {113, 75, 68}, 223: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 224: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 225: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 226: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 227: {245, 149, 119, 120, 186}, 228: {245, 149, 119, 120, 186}, 229: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 230: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 231: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 232: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 233: {125}, 234: {126}, 235: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 236: {128, 7, 73, 55, 188}, 237: {129, 70, 166, 8, 202, 77, 141, 174, 241, 50, 115, 181, 151, 122, 247, 60, 189}, 238: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 239: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 240: {130, 131, 4, 132, 9, 11, 140, 13, 142, 17, 146, 150, 152, 25, 155, 31, 35, 165, 39, 169, 170, 173, 46, 175, 49, 51, 180, 184, 59, 61, 190, 191, 192, 196, 69, 71, 201, 203, 76, 207, 82, 210, 213, 88, 220, 93, 96, 225, 99, 228, 249, 231, 105, 108, 237, 239, 114, 243, 244, 117, 246, 121, 251, 124}, 241: {193, 133, 20, 84, 216}, 242: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 243: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 244: {2, 6, 135, 137, 10, 138, 143, 153, 162, 167, 176, 178, 54, 182, 56, 57, 187, 64, 66, 67, 195, 197, 199, 72, 74, 204, 78, 206, 208, 242, 116, 248, 123, 127}, 245: {145, 157}})
Equivalent! frozenset({74, 67}) {72, 79}
Equivalent! frozenset({75, 68}) {80, 73}
Equivalent! frozenset({76, 69}) {81, 74}
Equivalent! frozenset({145, 157}) {245, 118}
Equivalent! frozenset({187, 127}) {235, 156}
Equivalent! frozenset({128, 188}) {236, 157}
Equivalent! frozenset({131, 191}) {160, 239}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4a81fd90>, {0: {0}, 1: {109}, 2: set(), 3: {62}, 4: {194}, 5: {52}, 6: {53}, 7: {110}, 8: {63}, 9: {118}, 10: {5}, 11: {1}, 12: {2}, 13: {3}, 14: {4}, 15: {6}, 16: {7}, 17: {8}, 18: {9}, 19: {10}, 20: {11}, 21: {12}, 22: {13}, 23: {14}, 24: {15}, 25: {16}, 26: {17}, 27: {18}, 28: {19}, 29: {20}, 30: {21}, 31: {22}, 32: {23}, 33: {24}, 34: {25}, 35: {26}, 36: {27}, 37: {28}, 38: {29}, 39: {30}, 40: {31}, 41: {32}, 42: {33}, 43: {34}, 44: {35}, 45: {36}, 46: {37}, 47: {38}, 48: {39}, 49: {40}, 50: {41}, 51: {42}, 52: {43}, 53: {44}, 54: {45}, 55: {46}, 56: {47}, 57: {48}, 58: {49}, 59: {50}, 60: {51}, 61: {54}, 62: {55}, 63: {56}, 64: {57, 178, 138}, 65: {58, 179, 139}, 66: {180, 59, 140}, 67: {60}, 68: {61}, 69: {64}, 70: {65}, 71: {66}, 72: {74}, 73: {68}, 74: {69}, 75: {70}, 76: {71}, 77: {72}, 78: {73}, 79: {67}, 80: {75}, 81: {76}, 82: {77}, 83: {78}, 84: {79}, 85: {80}, 86: {81}, 87: {82}, 88: {83}, 89: {84}, 90: {85}, 91: {86}, 92: {87}, 93: {88}, 94: {89}, 95: {90}, 96: {91}, 97: {92}, 98: {93}, 99: {94}, 100: {95}, 101: {96}, 102: {97}, 103: {98}, 104: {99}, 105: {100}, 106: {101}, 107: {102}, 108: {103}, 109: {104}, 110: {105}, 111: {106}, 112: {107}, 113: {108}, 114: {111}, 115: set(), 116: set(), 117: {169, 146, 117, 207}, 118: {157}, 119: set(), 120: set(), 121: set(), 122: set(), 123: {161}, 124: set(), 125: set(), 126: set(), 127: set(), 128: set(), 129: set(), 130: set(), 131: {162}, 132: {163}, 133: set(), 134: set(), 135: {166}, 136: {167}, 137: {168}, 138: {169}, 139: {124}, 140: {171}, 141: set(), 142: set(), 143: {174}, 144: {175}, 145: {176}, 146: {177}, 147: {57, 178, 138}, 148: {58, 179, 139}, 149: {180, 59, 140}, 150: {181}, 151: {182}, 152: {183}, 153: {184}, 154: {185}, 155: {186}, 156: {127}, 157: {188}, 158: {189}, 159: {190}, 160: {131}, 161: {192}, 162: {193}, 163: {153, 195}, 164: {184, 196}, 165: set(), 166: set(), 167: set(), 168: {200, 154}, 169: {201, 155}, 170: set(), 171: set(), 172: {204}, 173: {205}, 174: {206}, 175: {207}, 176: {208}, 177: {209}, 178: {210}, 179: {211}, 180: {212}, 181: {213}, 182: {214}, 183: {215}, 184: {216}, 185: {217}, 186: {218}, 187: {219}, 188: {220}, 189: {221}, 190: {222}, 191: {223}, 192: {224}, 193: {225}, 194: {226}, 195: {227}, 196: {228}, 197: {229}, 198: {230}, 199: {231}, 200: {232}, 201: {233}, 202: {234}, 203: {235}, 204: {236}, 205: {237}, 206: {238}, 207: {239}, 208: {240}, 209: {241}, 210: {242}, 211: {243}, 212: {244}, 213: {245}, 214: {246}, 215: {247}, 216: {248}, 217: {249}, 218: {250}, 219: {251}, 220: {252}, 221: {112}, 222: {113}, 223: {114}, 224: {115}, 225: {116}, 226: {117}, 227: {119}, 228: {120, 149}, 229: {121, 150}, 230: {122}, 231: {123}, 232: {124}, 233: {125}, 234: {126}, 235: {187}, 236: {128}, 237: {129}, 238: {130}, 239: {191}, 240: {132}, 241: {133}, 242: set(), 243: set(), 244: set(), 245: {145}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 bitcast bitcast
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 store store
EXACT 15 load load
EXACT 16 add add
EXACT 17 inttoptr inttoptr
EXACT 18 store store
EXACT 19 load load
EXACT 20 store store
EXACT 21 add add
EXACT 22 store store
EXACT 23 icmp icmp
EXACT 24 zext zext
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 tail tail
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 xor xor
EXACT 33 getelementptr getelementptr
EXACT 34 store store
EXACT 35 xor xor
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 and and
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 icmp icmp
EXACT 42 zext zext
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 lshr lshr
EXACT 46 trunc trunc
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 xor xor
EXACT 51 add add
EXACT 52 icmp icmp
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 add add
EXACT 57 add add
EXACT 58 store store
EXACT 59 inttoptr inttoptr
EXACT 60 store store
EXACT 61 load load
EXACT 62 add add
EXACT 63 load load
MORE 64 POT: 3
MORE 65 POT: 3
MORE 66 POT: 3
EXACT 67 inttoptr inttoptr
EXACT 68 store store
EXACT 69 load load
EXACT 70 add add
EXACT 71 load load
EXACT 72 load load
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 store store
EXACT 77 load load
EXACT 78 add add
EXACT 79 load load
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 add add
EXACT 85 icmp icmp
EXACT 86 zext zext
EXACT 87 store store
EXACT 88 and and
EXACT 89 tail tail
EXACT 90 trunc trunc
EXACT 91 and and
EXACT 92 xor xor
EXACT 93 store store
EXACT 94 xor xor
EXACT 95 lshr lshr
EXACT 96 trunc trunc
EXACT 97 and and
EXACT 98 store store
EXACT 99 icmp icmp
EXACT 100 zext zext
EXACT 101 store store
EXACT 102 lshr lshr
EXACT 103 trunc trunc
EXACT 104 store store
EXACT 105 lshr lshr
EXACT 106 xor xor
EXACT 107 add add
EXACT 108 icmp icmp
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 select select
EXACT 112 add add
EXACT 113 store store
EXACT 114 br br
NO MATCH 115
NO MATCH 116
MORE 117 POT: 4
EXACT 118 br br
NO MATCH 119
NO MATCH 120
NO MATCH 121
NO MATCH 122
EXACT 123 phi phi
NO MATCH 124
NO MATCH 125
NO MATCH 126
NO MATCH 127
NO MATCH 128
NO MATCH 129
NO MATCH 130
EXACT 131 load load
EXACT 132 add add
NO MATCH 133
NO MATCH 134
EXACT 135 inttoptr inttoptr
EXACT 136 load load
EXACT 137 zext zext
EXACT 138 store store
EXACT 139 store store
EXACT 140 add add
NO MATCH 141
NO MATCH 142
EXACT 143 inttoptr inttoptr
EXACT 144 store store
EXACT 145 load load
EXACT 146 add add
MORE 147 POT: 3
MORE 148 POT: 3
MORE 149 POT: 3
EXACT 150 inttoptr inttoptr
EXACT 151 load load
EXACT 152 zext zext
EXACT 153 store store
EXACT 154 add add
EXACT 155 add add
EXACT 156 load load
EXACT 157 add add
EXACT 158 inttoptr inttoptr
EXACT 159 store store
EXACT 160 store store
EXACT 161 store store
EXACT 162 tail tail
MORE 163 POT: 2
MORE 164 POT: 2
NO MATCH 165
NO MATCH 166
NO MATCH 167
MORE 168 POT: 2
MORE 169 POT: 2
NO MATCH 170
NO MATCH 171
EXACT 172 load load
EXACT 173 zext zext
EXACT 174 load load
EXACT 175 store store
EXACT 176 load load
EXACT 177 add add
EXACT 178 store store
EXACT 179 icmp icmp
EXACT 180 zext zext
EXACT 181 store store
EXACT 182 trunc trunc
EXACT 183 and and
EXACT 184 tail tail
EXACT 185 trunc trunc
EXACT 186 and and
EXACT 187 xor xor
EXACT 188 store store
EXACT 189 xor xor
EXACT 190 lshr lshr
EXACT 191 trunc trunc
EXACT 192 and and
EXACT 193 store store
EXACT 194 icmp icmp
EXACT 195 zext zext
EXACT 196 store store
EXACT 197 lshr lshr
EXACT 198 trunc trunc
EXACT 199 store store
EXACT 200 lshr lshr
EXACT 201 xor xor
EXACT 202 add add
EXACT 203 icmp icmp
EXACT 204 zext zext
EXACT 205 store store
EXACT 206 add add
EXACT 207 store store
EXACT 208 add add
EXACT 209 inttoptr inttoptr
EXACT 210 load load
EXACT 211 store store
EXACT 212 store store
EXACT 213 add add
EXACT 214 store store
EXACT 215 inttoptr inttoptr
EXACT 216 load load
EXACT 217 store store
EXACT 218 add add
EXACT 219 store store
EXACT 220 ret ret
EXACT 221 add add
EXACT 222 add add
EXACT 223 store store
EXACT 224 inttoptr inttoptr
EXACT 225 load load
EXACT 226 store store
EXACT 227 add add
MORE 228 POT: 2
MORE 229 POT: 2
EXACT 230 inttoptr inttoptr
EXACT 231 load load
EXACT 232 store store
EXACT 233 add add
EXACT 234 add add
EXACT 235 load load
EXACT 236 add add
EXACT 237 inttoptr inttoptr
EXACT 238 store store
EXACT 239 store store
EXACT 240 store store
EXACT 241 tail tail
NO MATCH 242
NO MATCH 243
NO MATCH 244
EXACT 245 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i45, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%58 = load i64, i64* %3, align 8', '%59 = add i64 %58, 4', 'store i64 %59, i64* %3, align 8', '%63 = icmp ult i32 %61, 2', '%64 = zext i1 %63 to i8', 'store i8 %64, i8* %14, align 1', '%65 = and i32 %62, 255', '%66 = tail call i32 @llvm.ctpop.i32(i32 %65)', '%67 = trunc i32 %66 to i8', '%68 = and i8 %67, 1', '%69 = xor i8 %68, 1', 'store i8 %69, i8* %21, align 1', '%70 = xor i32 %62, %61', '%71 = lshr i32 %70, 4', '%72 = trunc i32 %71 to i8', '%73 = and i8 %72, 1', 'store i8 %73, i8* %26, align 1', '%75 = zext i1 %74 to i8', 'store i8 %75, i8* %29, align 1', '%76 = lshr i32 %62, 31', '%77 = trunc i32 %76 to i8', 'store i8 %77, i8* %32, align 1', '%78 = lshr i32 %61, 31', '%79 = xor i32 %76, %78', '%80 = add nuw nsw i32 %79, %78', '%81 = icmp eq i32 %80, 2', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %38, align 1', '%.v = select i1 %74, i64 10, i64 31', '%83 = add i64 %58, %.v', 'store i64 %83, i64* %3, align 8', '%85 = add i64 %56, -16', '%86 = add i64 %83, 4', 'store i64 %86, i64* %3, align 8', '%87 = inttoptr i64 %85 to i64*', '%88 = load i64, i64* %87, align 8', 'store i64 %88, i64* %RAX.i26, align 8', '%89 = add i64 %88, 8', '%90 = add i64 %83, 8', 'store i64 %90, i64* %3, align 8', '%91 = inttoptr i64 %89 to i64*', '%92 = load i64, i64* %91, align 8', 'store i64 %92, i64* %RDI.i37, align 8', '%93 = add i64 %83, -416', '%94 = add i64 %83, 13', '%95 = load i64, i64* %6, align 8', '%96 = add i64 %95, -8', '%97 = inttoptr i64 %96 to i64*', 'store i64 %94, i64* %97, align 8', 'store i64 %96, i64* %6, align 8', 'store i64 %93, i64* %3, align 8', '%98 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)', '%108 = add i64 %83, 8', 'store i64 %108, i64* %3, align 8', 'store i64 %111, i64* %3, align 8', '%MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005c5 ], [ %98, %block_4005b0 ]', '%112 = load i64, i64* %RBP.i, align 8', '%113 = add i64 %112, -24', '%115 = inttoptr i64 %113 to i32*', '%116 = load i32, i32* %115, align 4', '%117 = zext i32 %116 to i64', 'store i64 %117, i64* %RAX.i26, align 8', '%118 = add i64 %112, -20', '%120 = inttoptr i64 %118 to i32*', 'store i32 %116, i32* %120, align 4', '%121 = load i64, i64* %RBP.i, align 8', '%122 = add i64 %121, -20', '%125 = inttoptr i64 %122 to i32*', '%126 = load i32, i32* %125, align 4', '%127 = zext i32 %126 to i64', 'store i64 %127, i64* %RSI.i45, align 8', '%128 = add i64 %123, -205', '%129 = add i64 %123, 8', '%130 = load i64, i64* %6, align 8', '%131 = add i64 %130, -8', '%132 = inttoptr i64 %131 to i64*', 'store i64 %129, i64* %132, align 8', 'store i64 %131, i64* %6, align 8', 'store i64 %128, i64* %3, align 8', '%call2_4005e0 = tail call %struct.Memory* @sub_400510.Ack(%struct.State* nonnull %0, i64 %128, %struct.Memory* %MEMORY.0)', '%ESI.i9 = bitcast %union.anon* %49 to i32*', '%133 = load i64, i64* %3, align 8', '%137 = add i64 %133, 5', 'store i64 %137, i64* %3, align 8', '%139 = load i32, i32* %ESI.i9, align 4', '%140 = zext i32 %139 to i64', '%141 = load i64, i64* %3, align 8', 'store i64 %140, i64* %RAX.i26, align 8', '%142 = load i64, i64* %6, align 8', '%143 = add i64 %142, 32', 'store i64 %143, i64* %6, align 8', '%144 = icmp ugt i64 %142, -33', '%145 = zext i1 %144 to i8', 'store i8 %145, i8* %14, align 1', '%146 = trunc i64 %143 to i32', '%147 = and i32 %146, 255', '%148 = tail call i32 @llvm.ctpop.i32(i32 %147)', '%149 = trunc i32 %148 to i8', '%150 = and i8 %149, 1', '%151 = xor i8 %150, 1', 'store i8 %151, i8* %21, align 1', '%152 = xor i64 %143, %142', '%153 = lshr i64 %152, 4', '%154 = trunc i64 %153 to i8', '%155 = and i8 %154, 1', 'store i8 %155, i8* %26, align 1', '%156 = icmp eq i64 %143, 0', '%157 = zext i1 %156 to i8', 'store i8 %157, i8* %29, align 1', '%158 = lshr i64 %143, 63', '%159 = trunc i64 %158 to i8', 'store i8 %159, i8* %32, align 1', '%160 = lshr i64 %142, 63', '%161 = xor i64 %158, %160', '%162 = add nuw nsw i64 %161, %158', '%163 = icmp eq i64 %162, 2', '%164 = zext i1 %163 to i8', 'store i8 %164, i8* %38, align 1', '%165 = add i64 %141, 7', 'store i64 %165, i64* %3, align 8', '%166 = add i64 %142, 40', '%167 = inttoptr i64 %143 to i64*', '%168 = load i64, i64* %167, align 8', 'store i64 %168, i64* %RBP.i, align 8', 'store i64 %166, i64* %6, align 8', '%169 = add i64 %141, 8', 'store i64 %169, i64* %3, align 8', '%170 = inttoptr i64 %166 to i64*', '%171 = load i64, i64* %170, align 8', 'store i64 %171, i64* %3, align 8', '%172 = add i64 %142, 48', 'store i64 %172, i64* %6, align 8', 'ret %struct.Memory* %call2_4005e0'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = add i64 %10, 14
Found line to remove! store i64 %40, i64* %3, align 8
Found line to remove! %41 = inttoptr i64 %39 to i32*
Found line to remove! store i32 0, i32* %41, align 4
Keep: %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %42 to i32*
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI.i, align 4
Keep: %46 = load i64, i64* %3, align 8
Keep: %47 = add i64 %46, 3
Keep: store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Keep: %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Keep: %RSI.i45 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI.i45, align 8
Found line to remove! %53 = load i64, i64* %3, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %3, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Keep: %56 = load i64, i64* %RBP.i, align 8
Keep: %57 = add i64 %56, -8
Found line to remove! %58 = load i64, i64* %3, align 8
Found line to remove! %59 = add i64 %58, 4
Found line to remove! store i64 %59, i64* %3, align 8
Keep: %60 = inttoptr i64 %57 to i32*
Keep: %61 = load i32, i32* %60, align 4
Keep: %62 = add i32 %61, -2
Found line to remove! %63 = icmp ult i32 %61, 2
Found line to remove! %64 = zext i1 %63 to i8
Found line to remove! store i8 %64, i8* %14, align 1
Found line to remove! %65 = and i32 %62, 255
Found line to remove! %66 = tail call i32 @llvm.ctpop.i32(i32 %65)
Found line to remove! %67 = trunc i32 %66 to i8
Found line to remove! %68 = and i8 %67, 1
Found line to remove! %69 = xor i8 %68, 1
Found line to remove! store i8 %69, i8* %21, align 1
Found line to remove! %70 = xor i32 %62, %61
Found line to remove! %71 = lshr i32 %70, 4
Found line to remove! %72 = trunc i32 %71 to i8
Found line to remove! %73 = and i8 %72, 1
Found line to remove! store i8 %73, i8* %26, align 1
Keep: %74 = icmp eq i32 %62, 0
Found line to remove! %75 = zext i1 %74 to i8
Found line to remove! store i8 %75, i8* %29, align 1
Found line to remove! %76 = lshr i32 %62, 31
Found line to remove! %77 = trunc i32 %76 to i8
Found line to remove! store i8 %77, i8* %32, align 1
Found line to remove! %78 = lshr i32 %61, 31
Found line to remove! %79 = xor i32 %76, %78
Found line to remove! %80 = add nuw nsw i32 %79, %78
Found line to remove! %81 = icmp eq i32 %80, 2
Found line to remove! %82 = zext i1 %81 to i8
Found line to remove! store i8 %82, i8* %38, align 1
Found line to remove! %.v = select i1 %74, i64 10, i64 31
Found line to remove! %83 = add i64 %58, %.v
Found line to remove! store i64 %83, i64* %3, align 8
Keep: %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %84, i64 0, i32 0
Keep: br i1 %74, label %block_4005b0, label %block_.L_4005c5
Keep: 
Keep: block_4005b0:                                     ; preds = %entry
Found line to remove! %85 = add i64 %56, -16
Found line to remove! %86 = add i64 %83, 4
Found line to remove! store i64 %86, i64* %3, align 8
Found line to remove! %87 = inttoptr i64 %85 to i64*
Found line to remove! %88 = load i64, i64* %87, align 8
Found line to remove! store i64 %88, i64* %RAX.i26, align 8
Keep: %RDI.i37 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Found line to remove! %89 = add i64 %88, 8
Found line to remove! %90 = add i64 %83, 8
Found line to remove! store i64 %90, i64* %3, align 8
Found line to remove! %91 = inttoptr i64 %89 to i64*
Found line to remove! %92 = load i64, i64* %91, align 8
Found line to remove! store i64 %92, i64* %RDI.i37, align 8
Found line to remove! %93 = add i64 %83, -416
Found line to remove! %94 = add i64 %83, 13
Found line to remove! %95 = load i64, i64* %6, align 8
Found line to remove! %96 = add i64 %95, -8
Found line to remove! %97 = inttoptr i64 %96 to i64*
Found line to remove! store i64 %94, i64* %97, align 8
Found line to remove! store i64 %96, i64* %6, align 8
Found line to remove! store i64 %93, i64* %3, align 8
Found line to remove! %98 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i29 = bitcast %union.anon* %84 to i32*
Keep: %99 = load i64, i64* %RBP.i, align 8
Keep: %100 = add i64 %99, -24
Keep: %101 = load i32, i32* %EAX.i29, align 4
Keep: %102 = load i64, i64* %3, align 8
Keep: %103 = add i64 %102, 3
Keep: store i64 %103, i64* %3, align 8
Keep: %104 = inttoptr i64 %100 to i32*
Keep: store i32 %101, i32* %104, align 4
Keep: %105 = load i64, i64* %3, align 8
Keep: %106 = add i64 %105, 18
Keep: br label %block_.L_4005d2
Keep: 
Keep: block_.L_4005c5:                                  ; preds = %entry
Keep: store i64 8, i64* %RAX.i26, align 8
Keep: %EAX.i23 = bitcast %union.anon* %84 to i32*
Keep: %107 = add i64 %56, -24
Found line to remove! %108 = add i64 %83, 8
Found line to remove! store i64 %108, i64* %3, align 8
Keep: %109 = inttoptr i64 %107 to i32*
Keep: store i32 8, i32* %109, align 4
Keep: %110 = load i64, i64* %3, align 8
Keep: %111 = add i64 %110, 5
Found line to remove! store i64 %111, i64* %3, align 8
Keep: %.pre = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Keep: br label %block_.L_4005d2
Keep: 
Keep: block_.L_4005d2:                                  ; preds = %block_.L_4005c5, %block_4005b0
Keep: %EAX.i15.pre-phi = phi i32* [ %EAX.i23, %block_.L_4005c5 ], [ %EAX.i29, %block_4005b0 ]
Keep: %RDI.i.pre-phi = phi i64* [ %.pre, %block_.L_4005c5 ], [ %RDI.i37, %block_4005b0 ]
Keep: %storemerge = phi i64 [ %111, %block_.L_4005c5 ], [ %106, %block_4005b0 ]
Found line to remove! %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005c5 ], [ %98, %block_4005b0 ]
Found line to remove! %112 = load i64, i64* %RBP.i, align 8
Found line to remove! %113 = add i64 %112, -24
Keep: %114 = add i64 %storemerge, 3
Keep: store i64 %114, i64* %3, align 8
Found line to remove! %115 = inttoptr i64 %113 to i32*
Found line to remove! %116 = load i32, i32* %115, align 4
Found line to remove! %117 = zext i32 %116 to i64
Found line to remove! store i64 %117, i64* %RAX.i26, align 8
Keep: store i64 3, i64* %RDI.i.pre-phi, align 8
Found line to remove! %118 = add i64 %112, -20
Keep: %119 = add i64 %storemerge, 11
Keep: store i64 %119, i64* %3, align 8
Found line to remove! %120 = inttoptr i64 %118 to i32*
Found line to remove! store i32 %116, i32* %120, align 4
Found line to remove! %121 = load i64, i64* %RBP.i, align 8
Found line to remove! %122 = add i64 %121, -20
Keep: %123 = load i64, i64* %3, align 8
Keep: %124 = add i64 %123, 3
Keep: store i64 %124, i64* %3, align 8
Found line to remove! %125 = inttoptr i64 %122 to i32*
Found line to remove! %126 = load i32, i32* %125, align 4
Found line to remove! %127 = zext i32 %126 to i64
Found line to remove! store i64 %127, i64* %RSI.i45, align 8
Found line to remove! %128 = add i64 %123, -205
Found line to remove! %129 = add i64 %123, 8
Found line to remove! %130 = load i64, i64* %6, align 8
Found line to remove! %131 = add i64 %130, -8
Found line to remove! %132 = inttoptr i64 %131 to i64*
Found line to remove! store i64 %129, i64* %132, align 8
Found line to remove! store i64 %131, i64* %6, align 8
Found line to remove! store i64 %128, i64* %3, align 8
Found line to remove! %call2_4005e0 = tail call %struct.Memory* @sub_400510.Ack(%struct.State* nonnull %0, i64 %128, %struct.Memory* %MEMORY.0)
Found line to remove! %ESI.i9 = bitcast %union.anon* %49 to i32*
Found line to remove! %133 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RSI.i45, align 8
Keep: %134 = load i64, i64* %RBP.i, align 8
Keep: %135 = add i64 %134, -28
Keep: %136 = load i32, i32* %EAX.i15.pre-phi, align 4
Found line to remove! %137 = add i64 %133, 5
Found line to remove! store i64 %137, i64* %3, align 8
Keep: %138 = inttoptr i64 %135 to i32*
Keep: store i32 %136, i32* %138, align 4
Found line to remove! %139 = load i32, i32* %ESI.i9, align 4
Found line to remove! %140 = zext i32 %139 to i64
Found line to remove! %141 = load i64, i64* %3, align 8
Found line to remove! store i64 %140, i64* %RAX.i26, align 8
Found line to remove! %142 = load i64, i64* %6, align 8
Found line to remove! %143 = add i64 %142, 32
Found line to remove! store i64 %143, i64* %6, align 8
Found line to remove! %144 = icmp ugt i64 %142, -33
Found line to remove! %145 = zext i1 %144 to i8
Found line to remove! store i8 %145, i8* %14, align 1
Found line to remove! %146 = trunc i64 %143 to i32
Found line to remove! %147 = and i32 %146, 255
Found line to remove! %148 = tail call i32 @llvm.ctpop.i32(i32 %147)
Found line to remove! %149 = trunc i32 %148 to i8
Found line to remove! %150 = and i8 %149, 1
Found line to remove! %151 = xor i8 %150, 1
Found line to remove! store i8 %151, i8* %21, align 1
Found line to remove! %152 = xor i64 %143, %142
Found line to remove! %153 = lshr i64 %152, 4
Found line to remove! %154 = trunc i64 %153 to i8
Found line to remove! %155 = and i8 %154, 1
Found line to remove! store i8 %155, i8* %26, align 1
Found line to remove! %156 = icmp eq i64 %143, 0
Found line to remove! %157 = zext i1 %156 to i8
Found line to remove! store i8 %157, i8* %29, align 1
Found line to remove! %158 = lshr i64 %143, 63
Found line to remove! %159 = trunc i64 %158 to i8
Found line to remove! store i8 %159, i8* %32, align 1
Found line to remove! %160 = lshr i64 %142, 63
Found line to remove! %161 = xor i64 %158, %160
Found line to remove! %162 = add nuw nsw i64 %161, %158
Found line to remove! %163 = icmp eq i64 %162, 2
Found line to remove! %164 = zext i1 %163 to i8
Found line to remove! store i8 %164, i8* %38, align 1
Found line to remove! %165 = add i64 %141, 7
Found line to remove! store i64 %165, i64* %3, align 8
Found line to remove! %166 = add i64 %142, 40
Found line to remove! %167 = inttoptr i64 %143 to i64*
Found line to remove! %168 = load i64, i64* %167, align 8
Found line to remove! store i64 %168, i64* %RBP.i, align 8
Found line to remove! store i64 %166, i64* %6, align 8
Found line to remove! %169 = add i64 %141, 8
Found line to remove! store i64 %169, i64* %3, align 8
Found line to remove! %170 = inttoptr i64 %166 to i64*
Found line to remove! %171 = load i64, i64* %170, align 8
Found line to remove! store i64 %171, i64* %3, align 8
Found line to remove! %172 = add i64 %142, 48
Found line to remove! store i64 %172, i64* %6, align 8
Found line to remove! ret %struct.Memory* %call2_4005e0
TO REMOVE: dict_keys(['%ESI = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %5 to i32*', '%RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %15, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %22, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %27, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %30, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %33, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %39, align 1', 'store i64 %82, i64* %PC, align 8', '%MEMORY.0 = phi %struct.Memory* [ %164, %block_4005b0 ], [ %2, %block_4005c5 ]', '%89 = load i64, i64* %RBP, align 8', '%90 = add i64 %89, -24', '%92 = inttoptr i64 %90 to i32*', '%93 = load i32, i32* %92, align 4', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RAX, align 8', 'store i64 3, i64* %RDI, align 8', '%95 = add i64 %89, -20', '%97 = inttoptr i64 %95 to i32*', 'store i32 %93, i32* %97, align 4', '%98 = load i64, i64* %RBP, align 8', '%99 = add i64 %98, -20', '%102 = inttoptr i64 %99 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = zext i32 %103 to i64', 'store i64 %104, i64* %RSI, align 8', '%105 = add i64 %100, -205', '%106 = add i64 %100, 8', '%107 = load i64, i64* %RSP, align 8', '%108 = add i64 %107, -8', '%109 = inttoptr i64 %108 to i64*', 'store i64 %106, i64* %109, align 8', 'store i64 %108, i64* %RSP, align 8', 'store i64 %105, i64* %PC, align 8', '%110 = tail call %struct.Memory* @sub_400510_Ack_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)', '%117 = load i32, i32* %ESI, align 4', '%118 = zext i32 %117 to i64', '%119 = load i64, i64* %PC, align 8', 'store i64 %118, i64* %RAX, align 8', '%120 = load i64, i64* %RSP, align 8', '%121 = add i64 %120, 32', 'store i64 %121, i64* %RSP, align 8', '%122 = icmp ugt i64 %120, -33', '%123 = zext i1 %122 to i8', 'store i8 %123, i8* %15, align 1', '%124 = trunc i64 %121 to i32', '%125 = and i32 %124, 255', '%126 = tail call i32 @llvm.ctpop.i32(i32 %125) #12', '%127 = trunc i32 %126 to i8', '%128 = and i8 %127, 1', '%129 = xor i8 %128, 1', 'store i8 %129, i8* %22, align 1', '%130 = xor i64 %121, %120', '%131 = lshr i64 %130, 4', '%132 = trunc i64 %131 to i8', '%133 = and i8 %132, 1', 'store i8 %133, i8* %27, align 1', '%134 = icmp eq i64 %121, 0', '%135 = zext i1 %134 to i8', 'store i8 %135, i8* %30, align 1', '%136 = lshr i64 %121, 63', '%137 = trunc i64 %136 to i8', 'store i8 %137, i8* %33, align 1', '%138 = lshr i64 %120, 63', '%139 = xor i64 %136, %138', '%140 = add nuw nsw i64 %139, %136', '%141 = icmp eq i64 %140, 2', '%142 = zext i1 %141 to i8', 'store i8 %142, i8* %39, align 1', '%143 = add i64 %119, 7', 'store i64 %143, i64* %PC, align 8', '%144 = add i64 %120, 40', '%145 = inttoptr i64 %121 to i64*', '%146 = load i64, i64* %145, align 8', 'store i64 %146, i64* %RBP, align 8', 'store i64 %144, i64* %RSP, align 8', '%147 = add i64 %119, 8', 'store i64 %147, i64* %PC, align 8', '%148 = inttoptr i64 %144 to i64*', '%149 = load i64, i64* %148, align 8', 'store i64 %149, i64* %PC, align 8', '%150 = add i64 %120, 48', 'store i64 %150, i64* %RSP, align 8', 'ret %struct.Memory* %110', '%151 = add i64 %55, -16', '%152 = add i64 %82, 4', 'store i64 %152, i64* %PC, align 8', '%153 = inttoptr i64 %151 to i64*', '%154 = load i64, i64* %153, align 8', 'store i64 %154, i64* %RAX, align 8', '%155 = add i64 %154, 8', '%157 = inttoptr i64 %155 to i64*', '%158 = load i64, i64* %157, align 8', 'store i64 %158, i64* %RDI, align 8', '%159 = add i64 %82, -416', '%160 = add i64 %82, 13', '%161 = load i64, i64* %RSP, align 8', '%162 = add i64 %161, -8', '%163 = inttoptr i64 %162 to i64*', 'store i64 %160, i64* %163, align 8', 'store i64 %162, i64* %RSP, align 8', 'store i64 %159, i64* %PC, align 8', '%164 = tail call fastcc %struct.Memory* @ext_400410_atoi(%struct.State* nonnull %0, %struct.Memory* %2)'])
Keep: block_400590:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -12
Found line to remove! %41 = add i64 %11, 14
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Keep: %46 = load i64, i64* %PC, align 8
Keep: %47 = add i64 %46, 3
Keep: store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %RBP, align 8
Keep: %56 = add i64 %55, -8
Keep: %57 = load i64, i64* %PC, align 8
Found line to remove! %58 = add i64 %57, 4
Found line to remove! store i64 %58, i64* %PC, align 8
Keep: %59 = inttoptr i64 %56 to i32*
Keep: %60 = load i32, i32* %59, align 4
Keep: %61 = add i32 %60, -2
Found line to remove! %62 = icmp ult i32 %60, 2
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %15, align 1
Found line to remove! %64 = and i32 %61, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %22, align 1
Found line to remove! %69 = xor i32 %61, %60
Found line to remove! %70 = lshr i32 %69, 4
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! store i8 %72, i8* %27, align 1
Keep: %73 = icmp eq i32 %61, 0
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %30, align 1
Found line to remove! %75 = lshr i32 %61, 31
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! store i8 %76, i8* %33, align 1
Found line to remove! %77 = lshr i32 %60, 31
Found line to remove! %78 = xor i32 %75, %77
Found line to remove! %79 = add nuw nsw i32 %78, %77
Found line to remove! %80 = icmp eq i32 %79, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %39, align 1
Keep: %.v = select i1 %73, i64 10, i64 31
Keep: %82 = add i64 %57, %.v
Found line to remove! store i64 %82, i64* %PC, align 8
Keep: br i1 %73, label %block_4005b0, label %block_4005c5
Keep: 
Keep: block_4005c5:                                     ; preds = %block_400590
Keep: %83 = add i64 %82, 5
Keep: store i64 %83, i64* %PC, align 8
Keep: store i64 8, i64* %RAX, align 8
Keep: br label %block_4005d2
Keep: 
Keep: block_4005d2:                                     ; preds = %block_4005b0, %block_4005c5
Keep: %84 = phi i64 [ %.pre, %block_4005b0 ], [ %83, %block_4005c5 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005b0 ], [ %55, %block_4005c5 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]
Keep: %.sink5 = phi i64 [ 18, %block_4005b0 ], [ 5, %block_4005c5 ]
Found line to remove! %MEMORY.0 = phi %struct.Memory* [ %164, %block_4005b0 ], [ %2, %block_4005c5 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %85 = add i64 %84, 3
Keep: store i64 %85, i64* %PC, align 8
Keep: %86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %86, align 4
Keep: %87 = load i64, i64* %PC, align 8
Keep: %88 = add i64 %87, %.sink5
Found line to remove! %89 = load i64, i64* %RBP, align 8
Found line to remove! %90 = add i64 %89, -24
Keep: %91 = add i64 %88, 3
Keep: store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %90 to i32*
Found line to remove! %93 = load i32, i32* %92, align 4
Found line to remove! %94 = zext i32 %93 to i64
Found line to remove! store i64 %94, i64* %RAX, align 8
Found line to remove! store i64 3, i64* %RDI, align 8
Found line to remove! %95 = add i64 %89, -20
Keep: %96 = add i64 %88, 11
Keep: store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %95 to i32*
Found line to remove! store i32 %93, i32* %97, align 4
Found line to remove! %98 = load i64, i64* %RBP, align 8
Found line to remove! %99 = add i64 %98, -20
Keep: %100 = load i64, i64* %PC, align 8
Keep: %101 = add i64 %100, 3
Keep: store i64 %101, i64* %PC, align 8Writing '/tmp/tmp8z2srgqy.dot'...
Writing '/tmp/tmp8z2srgqy.dot':Done

Reading LLVM: /tmp/tmpu5ve42sz-query.ll
Extracting function [main] from /tmp/tmpu5ve42sz-query.ll
Dot file generated!
Writing '/tmp/tmp28uffmfe.dot'...
Writing '/tmp/tmp28uffmfe.dot':Done

Reading LLVM: /tmp/tmp39ucbcob-target.ll
Extracting function [main] from /tmp/tmp39ucbcob-target.ll
Dot file generated!

Found line to remove! %102 = inttoptr i64 %99 to i32*
Found line to remove! %103 = load i32, i32* %102, align 4
Found line to remove! %104 = zext i32 %103 to i64
Found line to remove! store i64 %104, i64* %RSI, align 8
Found line to remove! %105 = add i64 %100, -205
Found line to remove! %106 = add i64 %100, 8
Found line to remove! %107 = load i64, i64* %RSP, align 8
Found line to remove! %108 = add i64 %107, -8
Found line to remove! %109 = inttoptr i64 %108 to i64*
Found line to remove! store i64 %106, i64* %109, align 8
Found line to remove! store i64 %108, i64* %RSP, align 8
Found line to remove! store i64 %105, i64* %PC, align 8
Found line to remove! %110 = tail call %struct.Memory* @sub_400510_Ack_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
Keep: %111 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RSI, align 8
Keep: %112 = load i64, i64* %RBP, align 8
Keep: %113 = add i64 %112, -28
Keep: %114 = load i32, i32* %EAX, align 4
Keep: %115 = add i64 %111, 5
Keep: store i64 %115, i64* %PC, align 8
Keep: %116 = inttoptr i64 %113 to i32*
Keep: store i32 %114, i32* %116, align 4
Found line to remove! %117 = load i32, i32* %ESI, align 4
Found line to remove! %118 = zext i32 %117 to i64
Found line to remove! %119 = load i64, i64* %PC, align 8
Found line to remove! store i64 %118, i64* %RAX, align 8
Found line to remove! %120 = load i64, i64* %RSP, align 8
Found line to remove! %121 = add i64 %120, 32
Found line to remove! store i64 %121, i64* %RSP, align 8
Found line to remove! %122 = icmp ugt i64 %120, -33
Found line to remove! %123 = zext i1 %122 to i8
Found line to remove! store i8 %123, i8* %15, align 1
Found line to remove! %124 = trunc i64 %121 to i32
Found line to remove! %125 = and i32 %124, 255
Found line to remove! %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #12
Found line to remove! %127 = trunc i32 %126 to i8
Found line to remove! %128 = and i8 %127, 1
Found line to remove! %129 = xor i8 %128, 1
Found line to remove! store i8 %129, i8* %22, align 1
Found line to remove! %130 = xor i64 %121, %120
Found line to remove! %131 = lshr i64 %130, 4
Found line to remove! %132 = trunc i64 %131 to i8
Found line to remove! %133 = and i8 %132, 1
Found line to remove! store i8 %133, i8* %27, align 1
Found line to remove! %134 = icmp eq i64 %121, 0
Found line to remove! %135 = zext i1 %134 to i8
Found line to remove! store i8 %135, i8* %30, align 1
Found line to remove! %136 = lshr i64 %121, 63
Found line to remove! %137 = trunc i64 %136 to i8
Found line to remove! store i8 %137, i8* %33, align 1
Found line to remove! %138 = lshr i64 %120, 63
Found line to remove! %139 = xor i64 %136, %138
Found line to remove! %140 = add nuw nsw i64 %139, %136
Found line to remove! %141 = icmp eq i64 %140, 2
Found line to remove! %142 = zext i1 %141 to i8
Found line to remove! store i8 %142, i8* %39, align 1
Found line to remove! %143 = add i64 %119, 7
Found line to remove! store i64 %143, i64* %PC, align 8
Found line to remove! %144 = add i64 %120, 40
Found line to remove! %145 = inttoptr i64 %121 to i64*
Found line to remove! %146 = load i64, i64* %145, align 8
Found line to remove! store i64 %146, i64* %RBP, align 8
Found line to remove! store i64 %144, i64* %RSP, align 8
Found line to remove! %147 = add i64 %119, 8
Found line to remove! store i64 %147, i64* %PC, align 8
Found line to remove! %148 = inttoptr i64 %144 to i64*
Found line to remove! %149 = load i64, i64* %148, align 8
Found line to remove! store i64 %149, i64* %PC, align 8
Found line to remove! %150 = add i64 %120, 48
Found line to remove! store i64 %150, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %110
Keep: 
Keep: block_4005b0:                                     ; preds = %block_400590
Found line to remove! %151 = add i64 %55, -16
Found line to remove! %152 = add i64 %82, 4
Found line to remove! store i64 %152, i64* %PC, align 8
Found line to remove! %153 = inttoptr i64 %151 to i64*
Found line to remove! %154 = load i64, i64* %153, align 8
Found line to remove! store i64 %154, i64* %RAX, align 8
Found line to remove! %155 = add i64 %154, 8
Keep: %156 = add i64 %82, 8
Keep: store i64 %156, i64* %PC, align 8
Found line to remove! %157 = inttoptr i64 %155 to i64*
Found line to remove! %158 = load i64, i64* %157, align 8
Found line to remove! store i64 %158, i64* %RDI, align 8
Found line to remove! %159 = add i64 %82, -416
Found line to remove! %160 = add i64 %82, 13
Found line to remove! %161 = load i64, i64* %RSP, align 8
Found line to remove! %162 = add i64 %161, -8
Found line to remove! %163 = inttoptr i64 %162 to i64*
Found line to remove! store i64 %160, i64* %163, align 8
Found line to remove! store i64 %162, i64* %RSP, align 8
Found line to remove! store i64 %159, i64* %PC, align 8
Found line to remove! %164 = tail call fastcc %struct.Memory* @ext_400410_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4005d2
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_46 = load i64, i64* %var_2_3, align 8
- 3 %var_2_47 = add i64 %var_2_46, 3
- 4 store i64 %var_2_47, i64* %var_2_3, align 8
- 5 %RSI.i45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 6 %var_2_56 = load i64, i64* %RBP.i, align 8
- 7 %var_2_57 = add i64 %var_2_56, -8
- 8 %var_2_60 = inttoptr i64 %var_2_57 to i32*
- 9 %var_2_61 = load i32, i32* %var_2_60, align 4
- 10 %var_2_74 = icmp eq i32 %var_2_61, 2
- 11 %var_2_84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 12 \<badref\> = br i1 %var_2_74, label %block_4005b0, label %block_.L_4005c5
- 13 %EAX.i29 = bitcast %union.anon* %var_2_84 to i32*
- 14 %var_2_101 = load i32, i32* %EAX.i29, align 4
- 15 %var_2_103 = add i64 %var_2_46, 6
- 16 store i64 %var_2_103, i64* %var_2_3, align 8
- 17 \<badref\> = br label %block_.L_4005d2
- 18 %RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %var_2_84, i64 0, i32 0
- 19 store i64 8, i64* %RAX.i26, align 8
- 20 %EAX.i23 = bitcast %union.anon* %var_2_84 to i32*
- 21 \<badref\> = br label %block_.L_4005d2
- 22 %.sink1 = phi i32 [ 8, %block_.L_4005c5 ], [ %var_2_101, %block_4005b0 ]
- 23 %.sink = phi i64 [ 5, %block_.L_4005c5 ], [ 18, %block_4005b0 ]
- 24 %EAX.i15.pre-phi = phi i32* [ %EAX.i23, %block_.L_4005c5 ], [ %EAX.i29, %block_4005b0 ]
- 25 %var_2_107.sink = add i64 %var_2_56, -24
- 26 %var_2_109 = inttoptr i64 %var_2_107.sink to i32*
- 27 store i32 %.sink1, i32* %var_2_109, align 4
- 28 %var_2_110 = load i64, i64* %var_2_3, align 8
- 29 %var_2_111 = add i64 %var_2_110, %.sink
- 30 %RDI.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 31 store i64 3, i64* %RDI.i.pre-phi, align 8
- 32 %var_2_124 = add i64 %var_2_111, 14
- 33 store i64 %var_2_124, i64* %var_2_3, align 8
- 34 store i64 0, i64* %RSI.i45, align 8
- 35 %var_2_134 = load i64, i64* %RBP.i, align 8
- 36 %var_2_135 = add i64 %var_2_134, -28
- 37 %var_2_136 = load i32, i32* %EAX.i15.pre-phi, align 4
- 38 %var_2_138 = inttoptr i64 %var_2_135 to i32*
- 39 store i32 %var_2_136, i32* %var_2_138, align 4
- 40 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b2ca488>, {0: {0}, 1: {4}, 2: {32, 34, 5, 8, 42, 11, 29}, 3: {25, 6}, 4: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 5: {3}, 6: {32, 34, 5, 8, 42, 11, 29}, 7: {9}, 8: {10, 27, 37}, 9: {32, 34, 5, 8, 42, 11, 29}, 10: {12}, 11: {1}, 12: {15}, 13: {2}, 14: {32, 34, 5, 8, 42, 11, 29}, 15: set(), 16: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 17: {43, 20}, 18: {16}, 19: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 20: {2}, 21: {43, 20}, 22: set(), 23: set(), 24: {21}, 25: {24}, 26: {10, 27, 37}, 27: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 28: {32, 34, 5, 8, 42, 11, 29}, 29: {14, 30}, 30: set(), 31: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 32: set(), 33: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 34: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 35: {32, 34, 5, 8, 42, 11, 29}, 36: {33}, 37: {32, 34, 5, 8, 42, 11, 29}, 38: {10, 27, 37}, 39: {36, 38, 7, 41, 18, 19, 26, 28, 31}, 40: {39}})
Equivalent! frozenset({43, 20}) {17, 21}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b2ca488>, {0: {0}, 1: {4}, 2: {5}, 3: {6}, 4: {7}, 5: {3}, 6: {8}, 7: {9}, 8: {10}, 9: {11}, 10: {12}, 11: {1}, 12: {15}, 13: set(), 14: set(), 15: set(), 16: set(), 17: {43}, 18: {16}, 19: {19}, 20: set(), 21: {20}, 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: {31}, 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: {39}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
EXACT 10 icmp icmp
EXACT 11 getelementptr getelementptr
EXACT 12 br br
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
EXACT 17 br br
EXACT 18 getelementptr getelementptr
EXACT 19 store store
NO MATCH 20
EXACT 21 br br
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
EXACT 34 store store
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
EXACT 40 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 4 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 5 %var_2_46 = load i64, i64* %PC, align 8
- 6 %var_2_47 = add i64 %var_2_46, 3
- 7 store i64 %var_2_47, i64* %PC, align 8
- 8 %var_2_55 = load i64, i64* %RBP, align 8
- 9 %var_2_56 = add i64 %var_2_55, -8
- 10 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 11 %var_2_60 = load i32, i32* %var_2_59, align 4
- 12 %var_2_73 = icmp eq i32 %var_2_60, 2
- 13 %.v = select i1 %var_2_73, i64 10, i64 31
- 14 %var_2_82 = add i64 %.v, %var_2_47
- 15 \<badref\> = br i1 %var_2_73, label %block_4005b0, label %block_4005c5
- 16 %RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0
- 17 %var_2_83 = add i64 %var_2_82, 5
- 18 store i64 %var_2_83, i64* %PC, align 8
- 19 store i64 8, i64* %RAX, align 8
- 20 \<badref\> = br label %block_4005d2
- 21 %var_2_84 = phi i64 [ %var_2_156, %block_4005b0 ], [ %var_2_83, %block_4005c5 ]
- 22 %.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]
- 23 %.sink5 = phi i64 [ 18, %block_4005b0 ], [ 5, %block_4005c5 ]
- 24 %.sink7 = add i64 %var_2_55, -24
- 25 %var_2_85 = add i64 %var_2_84, 3
- 26 store i64 %var_2_85, i64* %PC, align 8
- 27 %var_2_86 = inttoptr i64 %.sink7 to i32*
- 28 store i32 %.sink, i32* %var_2_86, align 4
- 29 %var_2_87 = load i64, i64* %PC, align 8
- 30 %var_2_88 = add i64 %var_2_87, %.sink5
- 31 store i64 0, i64* %RSI, align 8
- 32 %var_2_112 = load i64, i64* %RBP, align 8
- 33 %var_2_113 = add i64 %var_2_112, -28
- 34 %var_2_114 = load i32, i32* %EAX, align 4
- 35 %var_2_115 = add i64 %var_2_88, 19
- 36 store i64 %var_2_115, i64* %PC, align 8
- 37 %var_2_116 = inttoptr i64 %var_2_113 to i32*
- 38 store i32 %var_2_114, i32* %var_2_116, align 4
- 39 ret %struct.Memory* %2
- 40 %var_2_156 = add i64 %var_2_82, 8
- 41 store i64 %var_2_156, i64* %PC, align 8
- 42 %.sink.pre = load i32, i32* %EAX, align 4
- 43 \<badref\> = br label %block_4005d2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4abcbe18>, {0: {0}, 1: {11}, 2: {20, 13}, 3: {5}, 4: {1}, 5: {2, 35, 37, 6, 9, 14, 28}, 6: {3}, 7: {33, 34, 4, 39, 16, 19, 27, 31}, 8: {2, 35, 37, 6, 9, 14, 28}, 9: {7}, 10: {8, 26, 38}, 11: {2, 35, 37, 6, 9, 14, 28}, 12: {10}, 13: set(), 14: {29}, 15: {12}, 16: {18}, 17: set(), 18: {33, 34, 4, 39, 16, 19, 27, 31}, 19: {33, 34, 4, 39, 16, 19, 27, 31}, 20: {17, 21}, 21: {24}, 22: set(), 23: set(), 24: {25}, 25: {3}, 26: {33, 34, 4, 39, 16, 19, 27, 31}, 27: {8, 26, 38}, 28: {33, 34, 4, 39, 16, 19, 27, 31}, 29: {2, 35, 37, 6, 9, 14, 28}, 30: {29}, 31: {33, 34, 4, 39, 16, 19, 27, 31}, 32: {2, 35, 37, 6, 9, 14, 28}, 33: {36}, 34: {2, 35, 37, 6, 9, 14, 28}, 35: set(), 36: {33, 34, 4, 39, 16, 19, 27, 31}, 37: {8, 26, 38}, 38: {33, 34, 4, 39, 16, 19, 27, 31}, 39: {40}, 40: set(), 41: {33, 34, 4, 39, 16, 19, 27, 31}, 42: {2, 35, 37, 6, 9, 14, 28}, 43: {17, 21}})
Equivalent! frozenset({17, 21}) {43, 20}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4abcbe18>, {0: {0}, 1: {11}, 2: set(), 3: {5}, 4: {1}, 5: {2}, 6: {3}, 7: {4}, 8: {6}, 9: {7}, 10: {8}, 11: {9}, 12: {10}, 13: set(), 14: set(), 15: {12}, 16: {18}, 17: set(), 18: set(), 19: {19}, 20: {21}, 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: {34}, 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: {40}, 40: set(), 41: set(), 42: set(), 43: {17}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 store store
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 load load
EXACT 12 icmp icmp
NO MATCH 13
NO MATCH 14
EXACT 15 br br
EXACT 16 getelementptr getelementptr
NO MATCH 17
NO MATCH 18
EXACT 19 store store
EXACT 20 br br
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
EXACT 31 store store
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
EXACT 39 ret ret
NO MATCH 40
NO MATCH 41
NO MATCH 42
EXACT 43 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['store i64 0, i64* %RSI.i45, align 8', '%var_2_47 = add i64 %var_2_46, 3', 'store i64 %var_2_47, i64* %var_2_3, align 8', '%RSI.i45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'ret %struct.Memory* %2', '%RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %var_2_84, i64 0, i32 0', 'store i64 8, i64* %RAX.i26, align 8'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %var_2_3, align 8
Found line to remove! %var_2_47 = add i64 %var_2_46, 3
Found line to remove! store i64 %var_2_47, i64* %var_2_3, align 8
Found line to remove! %RSI.i45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %var_2_56 = load i64, i64* %RBP.i, align 8
Keep: %var_2_57 = add i64 %var_2_56, -8
Keep: %var_2_60 = inttoptr i64 %var_2_57 to i32*
Keep: %var_2_61 = load i32, i32* %var_2_60, align 4
Keep: %var_2_74 = icmp eq i32 %var_2_61, 2
Keep: %var_2_84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: br i1 %var_2_74, label %block_4005b0, label %block_.L_4005c5
Keep: 
Keep: block_4005b0:                                     ; preds = %entry
Keep: %EAX.i29 = bitcast %union.anon* %var_2_84 to i32*
Keep: %var_2_101 = load i32, i32* %EAX.i29, align 4
Keep: %var_2_103 = add i64 %var_2_46, 6
Keep: store i64 %var_2_103, i64* %var_2_3, align 8
Keep: br label %block_.L_4005d2
Keep: 
Keep: block_.L_4005c5:                                  ; preds = %entry
Found line to remove! %RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %var_2_84, i64 0, i32 0
Found line to remove! store i64 8, i64* %RAX.i26, align 8
Keep: %EAX.i23 = bitcast %union.anon* %var_2_84 to i32*
Keep: br label %block_.L_4005d2
Keep: 
Keep: block_.L_4005d2:                                  ; preds = %block_.L_4005c5, %block_4005b0
Keep: %.sink1 = phi i32 [ 8, %block_.L_4005c5 ], [ %var_2_101, %block_4005b0 ]
Keep: %.sink = phi i64 [ 5, %block_.L_4005c5 ], [ 18, %block_4005b0 ]
Keep: %EAX.i15.pre-phi = phi i32* [ %EAX.i23, %block_.L_4005c5 ], [ %EAX.i29, %block_4005b0 ]
Keep: %var_2_107.sink = add i64 %var_2_56, -24Writing '/tmp/tmpnw85orb0.dot'...
Writing '/tmp/tmpnw85orb0.dot':Done

Reading LLVM: /tmp/tmpu5ve42sz-query.ll
Extracting function [main] from /tmp/tmpu5ve42sz-query.ll
Dot file generated!
Writing '/tmp/tmp30dn8yea.dot'...
Writing '/tmp/tmp30dn8yea.dot':Done

Reading LLVM: /tmp/tmp39ucbcob-target.ll
Extracting function [main] from /tmp/tmp39ucbcob-target.ll
Dot file generated!

Keep: %var_2_109 = inttoptr i64 %var_2_107.sink to i32*
Keep: store i32 %.sink1, i32* %var_2_109, align 4
Keep: %var_2_110 = load i64, i64* %var_2_3, align 8
Keep: %var_2_111 = add i64 %var_2_110, %.sink
Keep: %RDI.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: store i64 3, i64* %RDI.i.pre-phi, align 8
Keep: %var_2_124 = add i64 %var_2_111, 14
Keep: store i64 %var_2_124, i64* %var_2_3, align 8
Found line to remove! store i64 0, i64* %RSI.i45, align 8
Keep: %var_2_134 = load i64, i64* %RBP.i, align 8
Keep: %var_2_135 = add i64 %var_2_134, -28
Keep: %var_2_136 = load i32, i32* %EAX.i15.pre-phi, align 4
Keep: %var_2_138 = inttoptr i64 %var_2_135 to i32*
Keep: store i32 %var_2_136, i32* %var_2_138, align 4
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 %var_2_47, i64* %PC, align 8', 'ret %struct.Memory* %2', '%RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0', 'store i64 8, i64* %RAX, align 8', 'store i64 0, i64* %RSI, align 8'])
Keep: block_400590:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_47 = add i64 %var_2_46, 3
Found line to remove! store i64 %var_2_47, i64* %PC, align 8
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_82 = add i64 %.v, %var_2_47
Keep: br i1 %var_2_73, label %block_4005b0, label %block_4005c5
Keep: 
Keep: block_4005c5:                                     ; preds = %block_400590
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0
Keep: %var_2_83 = add i64 %var_2_82, 5
Keep: store i64 %var_2_83, i64* %PC, align 8
Found line to remove! store i64 8, i64* %RAX, align 8
Keep: br label %block_4005d2
Keep: 
Keep: block_4005d2:                                     ; preds = %block_4005b0, %block_4005c5
Keep: %var_2_84 = phi i64 [ %var_2_156, %block_4005b0 ], [ %var_2_83, %block_4005c5 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]
Keep: %.sink5 = phi i64 [ 18, %block_4005b0 ], [ 5, %block_4005c5 ]
Keep: %.sink7 = add i64 %var_2_55, -24
Keep: %var_2_85 = add i64 %var_2_84, 3
Keep: store i64 %var_2_85, i64* %PC, align 8
Keep: %var_2_86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %var_2_86, align 4
Keep: %var_2_87 = load i64, i64* %PC, align 8
Keep: %var_2_88 = add i64 %var_2_87, %.sink5
Found line to remove! store i64 0, i64* %RSI, align 8
Keep: %var_2_112 = load i64, i64* %RBP, align 8
Keep: %var_2_113 = add i64 %var_2_112, -28
Keep: %var_2_114 = load i32, i32* %EAX, align 4
Keep: %var_2_115 = add i64 %var_2_88, 19
Keep: store i64 %var_2_115, i64* %PC, align 8
Keep: %var_2_116 = inttoptr i64 %var_2_113 to i32*
Keep: store i32 %var_2_114, i32* %var_2_116, align 4
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_4005b0:                                     ; preds = %block_400590
Keep: %var_2_156 = add i64 %var_2_82, 8
Keep: store i64 %var_2_156, i64* %PC, align 8
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: br label %block_4005d2
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_56 = load i64, i64* %RBP.i, align 8
- 3 %var_2_57 = add i64 %var_2_56, -8
- 4 %var_2_60 = inttoptr i64 %var_2_57 to i32*
- 5 %var_2_61 = load i32, i32* %var_2_60, align 4
- 6 %var_2_74 = icmp eq i32 %var_2_61, 2
- 7 %var_2_84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 8 %EAX.i29 = bitcast %union.anon* %var_2_84 to i32*
- 9 \<badref\> = br i1 %var_2_74, label %block_4005b0, label %block_.L_4005d2
- 10 %var_2_46 = load i64, i64* %var_2_3, align 8
- 11 %var_2_101 = load i32, i32* %EAX.i29, align 4
- 12 %var_2_103 = add i64 %var_2_46, 6
- 13 store i64 %var_2_103, i64* %var_2_3, align 8
- 14 \<badref\> = br label %block_.L_4005d2
- 15 %.sink1 = phi i32 [ %var_2_101, %block_4005b0 ], [ 8, %entry ]
- 16 %.sink = phi i64 [ 32, %block_4005b0 ], [ 19, %entry ]
- 17 %var_2_107.sink = add i64 %var_2_56, -24
- 18 %var_2_109 = inttoptr i64 %var_2_107.sink to i32*
- 19 store i32 %.sink1, i32* %var_2_109, align 4
- 20 %var_2_110 = load i64, i64* %var_2_3, align 8
- 21 %RDI.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 22 store i64 3, i64* %RDI.i.pre-phi, align 8
- 23 %var_2_124 = add i64 %.sink, %var_2_110
- 24 store i64 %var_2_124, i64* %var_2_3, align 8
- 25 %var_2_134 = load i64, i64* %RBP.i, align 8
- 26 %var_2_135 = add i64 %var_2_134, -28
- 27 %var_2_136 = load i32, i32* %EAX.i29, align 4
- 28 %var_2_138 = inttoptr i64 %var_2_135 to i32*
- 29 store i32 %var_2_136, i32* %var_2_138, align 4
- 30 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b1c99d8>, {0: {0}, 1: {3}, 2: {4, 36, 6, 9, 25, 26, 28}, 3: {7}, 4: {8, 31, 23}, 5: {4, 36, 6, 9, 25, 26, 28}, 6: {10}, 7: {1}, 8: {2}, 9: {13}, 10: {4, 36, 6, 9, 25, 26, 28}, 11: {4, 36, 6, 9, 25, 26, 28}, 12: set(), 13: {32, 35, 15, 22, 24, 30}, 14: {16, 37}, 15: {18}, 16: set(), 17: {20}, 18: {8, 31, 23}, 19: {32, 35, 15, 22, 24, 30}, 20: {4, 36, 6, 9, 25, 26, 28}, 21: set(), 22: {32, 35, 15, 22, 24, 30}, 23: {12, 29}, 24: {32, 35, 15, 22, 24, 30}, 25: {4, 36, 6, 9, 25, 26, 28}, 26: {27}, 27: {4, 36, 6, 9, 25, 26, 28}, 28: {8, 31, 23}, 29: {32, 35, 15, 22, 24, 30}, 30: {33}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b1c99d8>, {0: set(), 1: {3}, 2: {6}, 3: {7}, 4: {8}, 5: {9}, 6: {10}, 7: {1}, 8: {2}, 9: {13}, 10: set(), 11: {36}, 12: set(), 13: set(), 14: {16, 37}, 15: {18}, 16: set(), 17: {20}, 18: {23}, 19: {24}, 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: {26}, 26: {27}, 27: {28}, 28: {31}, 29: {32}, 30: {33}})
NO MATCH 0
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
EXACT 6 icmp icmp
EXACT 7 getelementptr getelementptr
EXACT 8 bitcast bitcast
EXACT 9 br br
NO MATCH 10
EXACT 11 load load
NO MATCH 12
NO MATCH 13
MORE 14 POT: 2
EXACT 15 phi phi
NO MATCH 16
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
EXACT 25 load load
EXACT 26 add add
EXACT 27 load load
EXACT 28 inttoptr inttoptr
EXACT 29 store store
EXACT 30 ret ret
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 4 %var_2_46 = load i64, i64* %PC, align 8
- 5 %var_2_47 = add i64 %var_2_46, 3
- 6 %var_2_55 = load i64, i64* %RBP, align 8
- 7 %var_2_56 = add i64 %var_2_55, -8
- 8 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 9 %var_2_60 = load i32, i32* %var_2_59, align 4
- 10 %var_2_73 = icmp eq i32 %var_2_60, 2
- 11 %.v = select i1 %var_2_73, i64 10, i64 31
- 12 %var_2_82 = add i64 %var_2_47, %.v
- 13 \<badref\> = br i1 %var_2_73, label %block_4005b0, label %block_4005c5
- 14 %var_2_83 = add i64 %var_2_82, 5
- 15 store i64 %var_2_83, i64* %PC, align 8
- 16 \<badref\> = br label %block_4005d2
- 17 %var_2_84 = phi i64 [ %var_2_156, %block_4005b0 ], [ %var_2_83, %block_4005c5 ]
- 18 %.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]
- 19 %.sink5 = phi i64 [ 37, %block_4005b0 ], [ 24, %block_4005c5 ]
- 20 %.sink7 = add i64 %var_2_55, -24
- 21 %var_2_85 = add i64 %var_2_84, 3
- 22 store i64 %var_2_85, i64* %PC, align 8
- 23 %var_2_86 = inttoptr i64 %.sink7 to i32*
- 24 store i32 %.sink, i32* %var_2_86, align 4
- 25 %var_2_87 = load i64, i64* %PC, align 8
- 26 %var_2_112 = load i64, i64* %RBP, align 8
- 27 %var_2_113 = add i64 %var_2_112, -28
- 28 %var_2_114 = load i32, i32* %EAX, align 4
- 29 %var_2_115 = add i64 %.sink5, %var_2_87
- 30 store i64 %var_2_115, i64* %PC, align 8
- 31 %var_2_116 = inttoptr i64 %var_2_113 to i32*
- 32 store i32 %var_2_114, i32* %var_2_116, align 4
- 33 ret %struct.Memory* %2
- 34 %var_2_156 = add i64 %var_2_82, 8
- 35 store i64 %var_2_156, i64* %PC, align 8
- 36 %.sink.pre = load i32, i32* %EAX, align 4
- 37 \<badref\> = br label %block_4005d2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b633620>, {0: {0}, 1: {7}, 2: {8}, 3: {1}, 4: {2, 5, 10, 11, 20, 25, 27}, 5: set(), 6: {2, 5, 10, 11, 20, 25, 27}, 7: {3}, 8: {18, 4, 28}, 9: {2, 5, 10, 11, 20, 25, 27}, 10: {6}, 11: set(), 12: {23}, 13: {9}, 14: set(), 15: {13, 19, 22, 24, 29}, 16: {14}, 17: set(), 18: {15}, 19: set(), 20: {17}, 21: set(), 22: {13, 19, 22, 24, 29}, 23: {18, 4, 28}, 24: {13, 19, 22, 24, 29}, 25: {2, 5, 10, 11, 20, 25, 27}, 26: {2, 5, 10, 11, 20, 25, 27}, 27: {26}, 28: {2, 5, 10, 11, 20, 25, 27}, 29: {23}, 30: {13, 19, 22, 24, 29}, 31: {18, 4, 28}, 32: {13, 19, 22, 24, 29}, 33: {30}, 34: set(), 35: {13, 19, 22, 24, 29}, 36: {2, 5, 10, 11, 20, 25, 27}, 37: {14}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b633620>, {0: set(), 1: {7}, 2: {8}, 3: {1}, 4: set(), 5: set(), 6: {2}, 7: {3}, 8: {4}, 9: {5}, 10: {6}, 11: set(), 12: set(), 13: {9}, 14: set(), 15: set(), 16: {14}, 17: set(), 18: {15}, 19: set(), 20: {17}, 21: set(), 22: set(), 23: {18}, 24: {19}, 25: set(), 26: {25}, 27: {26}, 28: {27}, 29: set(), 30: set(), 31: {28}, 32: {29}, 33: {30}, 34: set(), 35: set(), 36: {11}, 37: {14}})
NO MATCH 0
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
NO MATCH 4
NO MATCH 5
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
EXACT 10 icmp icmp
NO MATCH 11
NO MATCH 12
EXACT 13 br br
NO MATCH 14
NO MATCH 15
EXACT 16 br br
NO MATCH 17
EXACT 18 phi phi
NO MATCH 19
EXACT 20 add add
NO MATCH 21
NO MATCH 22
EXACT 23 inttoptr inttoptr
EXACT 24 store store
NO MATCH 25
EXACT 26 load load
EXACT 27 add add
EXACT 28 load load
NO MATCH 29
NO MATCH 30
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 ret ret
NO MATCH 34
NO MATCH 35
EXACT 36 load load
EXACT 37 br br
FP: 63 3.0 False
TO REMOVE: dict_keys(['%var_2_84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%EAX.i29 = bitcast %union.anon* %var_2_84 to i32*', '%var_2_101 = load i32, i32* %EAX.i29, align 4', '%.sink1 = phi i32 [ %var_2_101, %block_4005b0 ], [ 8, %entry ]', '%var_2_107.sink = add i64 %var_2_56, -24', '%var_2_109 = inttoptr i64 %var_2_107.sink to i32*', 'store i32 %.sink1, i32* %var_2_109, align 4', '%var_2_134 = load i64, i64* %RBP.i, align 8', '%var_2_135 = add i64 %var_2_134, -28', '%var_2_136 = load i32, i32* %EAX.i29, align 4', '%var_2_138 = inttoptr i64 %var_2_135 to i32*', 'store i32 %var_2_136, i32* %var_2_138, align 4', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_56 = load i64, i64* %RBP.i, align 8
Keep: %var_2_57 = add i64 %var_2_56, -8
Keep: %var_2_60 = inttoptr i64 %var_2_57 to i32*
Keep: %var_2_61 = load i32, i32* %var_2_60, align 4
Keep: %var_2_74 = icmp eq i32 %var_2_61, 2
Found line to remove! %var_2_84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX.i29 = bitcast %union.anon* %var_2_84 to i32*
Keep: br i1 %var_2_74, label %block_4005b0, label %block_.L_4005d2
Keep: 
Keep: block_4005b0:                                     ; preds = %entry
Keep: %var_2_46 = load i64, i64* %var_2_3, align 8
Found line to remove! %var_2_101 = load i32, i32* %EAX.i29, align 4
Keep: %var_2_103 = add i64 %var_2_46, 6
Keep: store i64 %var_2_103, i64* %var_2_3, align 8
Keep: br label %block_.L_4005d2
Keep: 
Keep: block_.L_4005d2:                                  ; preds = %entry, %block_4005b0
Found line to remove! %.sink1 = phi i32 [ %var_2_101, %block_4005b0 ], [ 8, %entry ]
Keep: %.sink = phi i64 [ 32, %block_4005b0 ], [ 19, %entry ]
Found line to remove! %var_2_107.sink = add i64 %var_2_56, -24
Found line to remove! %var_2_109 = inttoptr i64 %var_2_107.sink to i32*
Found line to remove! store i32 %.sink1, i32* %var_2_109, align 4
Keep: %var_2_110 = load i64, i64* %var_2_3, align 8
Keep: %RDI.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: store i64 3, i64* %RDI.i.pre-phi, align 8
Keep: %var_2_124 = add i64 %.sink, %var_2_110
Keep: store i64 %var_2_124, i64* %var_2_3, align 8
Found line to remove! %var_2_134 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_135 = add i64 %var_2_134, -28
Found line to remove! %var_2_136 = load i32, i32* %EAX.i29, align 4
Found line to remove! %var_2_138 = inttoptr i64 %var_2_135 to i32*
Found line to remove! store i32 %var_2_136, i32* %var_2_138, align 4
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['store i32 %var_2_114, i32* %var_2_116, align 4', '%var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%EAX = bitcast %union.anon* %var_2_3 to i32*', 'ret %struct.Memory* %2', '%.sink.pre = load i32, i32* %EAX, align 4', '%.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]', '%.sink7 = add i64 %var_2_55, -24', '%var_2_86 = inttoptr i64 %.sink7 to i32*', 'store i32 %.sink, i32* %var_2_86, align 4', '%var_2_112 = load i64, i64* %RBP, align 8', '%var_2_113 = add i64 %var_2_112, -28', '%var_2_114 = load i32, i32* %EAX, align 4', '%var_2_116 = inttoptr i64 %var_2_113 to i32*'])
Keep: block_400590:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX = bitcast %union.anon* %var_2_3 to i32*
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_47 = add i64 %var_2_46, 3
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_82 = add i64 %var_2_47, %.v
Keep: br i1 %var_2_73, label %block_4005b0, label %block_4005c5
Keep: 
Keep: block_4005c5:                                     ; preds = %block_400590
Keep: %var_2_83 = add i64 %var_2_82, 5
Keep: store i64 %var_2_83, i64* %PC, align 8
Keep: br label %block_4005d2
Keep: 
Keep: block_4005d2:                                     ; preds = %block_4005b0, %block_4005c5
Keep: %var_2_84 = phi i64 [ %var_2_156, %block_4005b0 ], [ %var_2_83, %block_4005c5 ]
Found line to remove! %.sink = phi i32 [ %.sink.pre, %block_4005b0 ], [ 8, %block_4005c5 ]
Keep: %.sink5 = phi i64 [ 37, %block_4005b0 ], [ 24, %block_4005c5 ]
Found line to remove! %.sink7 = add i64 %var_2_55, -24
Keep: %var_2_85 = add i64 %var_2_84, 3
Keep: store i64 %var_2_85, i64* %PC, align 8
Found line to remove! %var_2_86 = inttoptr i64 %.sink7 to i32*
Found line to remove! store i32 %.sink, i32* %var_2_86, align 4
Keep:Writing '/tmp/tmp69qkjcms.dot'...
Writing '/tmp/tmp69qkjcms.dot':Done

Reading LLVM: /tmp/tmpu5ve42sz-query.ll
Extracting function [main] from /tmp/tmpu5ve42sz-query.ll
Dot file generated!
Writing '/tmp/tmp8c1chtwr.dot'...
Writing '/tmp/tmp8c1chtwr.dot':Done

Reading LLVM: /tmp/tmp39ucbcob-target.ll
Extracting function [main] from /tmp/tmp39ucbcob-target.ll
Dot file generated!
 %var_2_87 = load i64, i64* %PC, align 8
Found line to remove! %var_2_112 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_113 = add i64 %var_2_112, -28
Found line to remove! %var_2_114 = load i32, i32* %EAX, align 4
Keep: %var_2_115 = add i64 %.sink5, %var_2_87
Keep: store i64 %var_2_115, i64* %PC, align 8
Found line to remove! %var_2_116 = inttoptr i64 %var_2_113 to i32*
Found line to remove! store i32 %var_2_114, i32* %var_2_116, align 4
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_4005b0:                                     ; preds = %block_400590
Keep: %var_2_156 = add i64 %var_2_82, 8
Keep: store i64 %var_2_156, i64* %PC, align 8
Found line to remove! %.sink.pre = load i32, i32* %EAX, align 4
Keep: br label %block_4005d2
================ Starting round 6
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_56 = load i64, i64* %RBP.i, align 8
- 3 %var_2_57 = add i64 %var_2_56, -8
- 4 %var_2_60 = inttoptr i64 %var_2_57 to i32*
- 5 %var_2_61 = load i32, i32* %var_2_60, align 4
- 6 %var_2_74 = icmp eq i32 %var_2_61, 2
- 7 %var_2_46 = load i64, i64* %var_2_3, align 8
- 8 \<badref\> = br i1 %var_2_74, label %block_4005b0, label %block_.L_4005d2
- 9 %var_2_103 = add i64 %var_2_46, 6
- 10 store i64 %var_2_103, i64* %var_2_3, align 8
- 11 \<badref\> = br label %block_.L_4005d2
- 12 %var_2_110 = phi i64 [ %var_2_103, %block_4005b0 ], [ %var_2_46, %entry ]
- 13 %.sink = phi i64 [ 32, %block_4005b0 ], [ 19, %entry ]
- 14 %RDI.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 15 store i64 3, i64* %RDI.i.pre-phi, align 8
- 16 %var_2_124 = add i64 %var_2_110, %.sink
- 17 store i64 %var_2_124, i64* %var_2_3, align 8
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b1bd840>, {0: {0}, 1: {1}, 2: {2, 3, 6}, 3: {4}, 4: {5}, 5: {2, 3, 6}, 6: {7}, 7: {2, 3, 6}, 8: set(), 9: {11}, 10: {15}, 11: set(), 12: set(), 13: set(), 14: set(), 15: {15}, 16: {12, 13, 14}, 17: {15}, 18: {16}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b1bd840>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: {16}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
EXACT 18 ret ret
================ Starting round 7
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_46 = load i64, i64* %PC, align 8
- 3 %var_2_55 = load i64, i64* %RBP, align 8
- 4 %var_2_56 = add i64 %var_2_55, -8
- 5 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 6 %var_2_60 = load i32, i32* %var_2_59, align 4
- 7 %var_2_73 = icmp eq i32 %var_2_60, 2
- 8 %.v = select i1 %var_2_73, i64 10, i64 31
- 9 %var_2_156.sink.v = select i1 %var_2_73, i64 8, i64 5
- 10 %.sink5 = select i1 %var_2_73, i64 37, i64 24
- 11 %var_2_82 = add i64 %var_2_46, 6
- 12 %var_2_156.sink = add i64 %var_2_82, %.v
- 13 %var_2_85 = add i64 %var_2_156.sink, %var_2_156.sink.v
- 14 %var_2_115 = add i64 %var_2_85, %.sink5
- 15 store i64 %var_2_115, i64* %PC, align 8
- 16 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b3dc488>, {0: {0}, 1: {1}, 2: {2, 5, 7}, 3: {2, 5, 7}, 4: {3}, 5: {4}, 6: {2, 5, 7}, 7: {6}, 8: set(), 9: set(), 10: set(), 11: {9}, 12: {16}, 13: {16}, 14: {16}, 15: {17, 10, 15}, 16: {18}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7faa4b3dc488>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: {18}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
EXACT 16 ret ret
FP: 63 4.0 False
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_56 = load i64, i64* %RBP.i, align 8
Keep: %var_2_57 = add i64 %var_2_56, -8
Keep: %var_2_60 = inttoptr i64 %var_2_57 to i32*
Keep: %var_2_61 = load i32, i32* %var_2_60, align 4
Keep: %var_2_74 = icmp eq i32 %var_2_61, 2
Keep: %var_2_46 = load i64, i64* %var_2_3, align 8
Keep: br i1 %var_2_74, label %block_4005b0, label %block_.L_4005d2
Keep: 
Keep: block_4005b0:                                     ; preds = %entry
Keep: %var_2_103 = add i64 %var_2_46, 6
Keep: store i64 %var_2_103, i64* %var_2_3, align 8
Keep: br label %block_.L_4005d2
Keep: 
Keep: block_.L_4005d2:                                  ; preds = %entry, %block_4005b0
Keep: %var_2_110 = phi i64 [ %var_2_103, %block_4005b0 ], [ %var_2_46, %entry ]
Keep: %.sink = phi i64 [ 32, %block_4005b0 ], [ 19, %entry ]
Keep: %RDI.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: store i64 3, i64* %RDI.i.pre-phi, align 8
Keep: %var_2_124 = add i64 %var_2_110, %.sink
Keep: store i64 %var_2_124, i64* %var_2_3, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_400590:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_156.sink.v = select i1 %var_2_73, i64 8, i64 5
Keep: %.sink5 = select i1 %var_2_73, i64 37, i64 24
Keep: %var_2_82 = add i64 %var_2_46, 6
Keep: %var_2_156.sink = add i64 %var_2_82, %.v
Keep: %var_2_85 = add i64 %var_2_156.sink, %var_2_156.sink.v
Keep: %var_2_115 = add i64 %var_2_85, %.sink5
Keep: store i64 %var_2_115, i64* %PC, align 8
Found line to remove! ret %struct.Memory* %2
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/binary/test.mcsema.calls_renamed.ll main
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/main/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
