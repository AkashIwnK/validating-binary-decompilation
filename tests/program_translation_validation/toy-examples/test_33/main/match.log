Writing '/tmp/tmpu2qv77xs.dot'...
Writing '/tmp/tmpu2qv77xs.dot':Done

Reading LLVM: /tmp/tmpdpppb0t2-query.ll
Extracting function [main] from /tmp/tmpdpppb0t2-query.ll
Dot file generated!
Writing '/tmp/tmp33h16p7z.dot'...
Writing '/tmp/tmp33h16p7z.dot':Done

Reading LLVM: /tmp/tmps3llbkhz-target.ll
Extracting function [main] from /tmp/tmps3llbkhz-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = add i64 %7, -12
- 48 %40 = add i64 %10, 14
- 49 store i64 %40, i64* %3, align 8
- 50 %41 = inttoptr i64 %39 to i32*
- 51 store i32 0, i32* %41, align 4
- 52 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 53 %EDI.i = bitcast %union.anon* %42 to i32*
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -8
- 56 %45 = load i32, i32* %EDI.i, align 4
- 57 %46 = load i64, i64* %3, align 8
- 58 %47 = add i64 %46, 3
- 59 store i64 %47, i64* %3, align 8
- 60 %48 = inttoptr i64 %44 to i32*
- 61 store i32 %45, i32* %48, align 4
- 62 %RSI.i64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -16
- 65 %51 = load i64, i64* %RSI.i64, align 8
- 66 %52 = load i64, i64* %3, align 8
- 67 %53 = add i64 %52, 4
- 68 store i64 %53, i64* %3, align 8
- 69 %54 = inttoptr i64 %50 to i64*
- 70 store i64 %51, i64* %54, align 8
- 71 %55 = load i64, i64* %RBP.i, align 8
- 72 %56 = add i64 %55, -8
- 73 %57 = load i64, i64* %3, align 8
- 74 %58 = add i64 %57, 4
- 75 store i64 %58, i64* %3, align 8
- 76 %59 = inttoptr i64 %56 to i32*
- 77 %60 = load i32, i32* %59, align 4
- 78 %61 = add i32 %60, -2
- 79 %62 = icmp ult i32 %60, 2
- 80 %63 = zext i1 %62 to i8
- 81 store i8 %63, i8* %14, align 1
- 82 %64 = and i32 %61, 255
- 83 %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
- 84 %66 = trunc i32 %65 to i8
- 85 %67 = and i8 %66, 1
- 86 %68 = xor i8 %67, 1
- 87 store i8 %68, i8* %21, align 1
- 88 %69 = xor i32 %61, %60
- 89 %70 = lshr i32 %69, 4
- 90 %71 = trunc i32 %70 to i8
- 91 %72 = and i8 %71, 1
- 92 store i8 %72, i8* %26, align 1
- 93 %73 = icmp eq i32 %61, 0
- 94 %74 = zext i1 %73 to i8
- 95 store i8 %74, i8* %29, align 1
- 96 %75 = lshr i32 %61, 31
- 97 %76 = trunc i32 %75 to i8
- 98 store i8 %76, i8* %32, align 1
- 99 %77 = lshr i32 %60, 31
- 100 %78 = xor i32 %75, %77
- 101 %79 = add nuw nsw i32 %78, %77
- 102 %80 = icmp eq i32 %79, 2
- 103 %81 = zext i1 %80 to i8
- 104 store i8 %81, i8* %38, align 1
- 105 %.v = select i1 %73, i64 10, i64 31
- 106 %82 = add i64 %57, %.v
- 107 store i64 %82, i64* %3, align 8
- 108 %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 109 %RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
- 110 \<badref\> = br i1 %73, label %block_400600, label %block_.L_400615
- 111 %84 = add i64 %55, -16
- 112 %85 = add i64 %82, 4
- 113 store i64 %85, i64* %3, align 8
- 114 %86 = inttoptr i64 %84 to i64*
- 115 %87 = load i64, i64* %86, align 8
- 116 store i64 %87, i64* %RAX.i46, align 8
- 117 %RDI.i56 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 118 %88 = add i64 %87, 8
- 119 %89 = add i64 %82, 8
- 120 store i64 %89, i64* %3, align 8
- 121 %90 = inttoptr i64 %88 to i64*
- 122 %91 = load i64, i64* %90, align 8
- 123 store i64 %91, i64* %RDI.i56, align 8
- 124 %92 = add i64 %82, -416
- 125 %93 = add i64 %82, 13
- 126 %94 = load i64, i64* %6, align 8
- 127 %95 = add i64 %94, -8
- 128 %96 = inttoptr i64 %95 to i64*
- 129 store i64 %93, i64* %96, align 8
- 130 store i64 %95, i64* %6, align 8
- 131 store i64 %92, i64* %3, align 8
- 132 %97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 133 %EAX.i49 = bitcast %union.anon* %83 to i32*
- 134 %98 = load i64, i64* %RBP.i, align 8
- 135 %99 = add i64 %98, -24
- 136 %100 = load i32, i32* %EAX.i49, align 4
- 137 %101 = load i64, i64* %3, align 8
- 138 %102 = add i64 %101, 3
- 139 store i64 %102, i64* %3, align 8
- 140 %103 = inttoptr i64 %99 to i32*
- 141 store i32 %100, i32* %103, align 4
- 142 %104 = load i64, i64* %3, align 8
- 143 %105 = add i64 %104, 18
- 144 \<badref\> = br label %block_.L_400622
- 145 store i64 8, i64* %RAX.i46, align 8
- 146 %EAX.i43 = bitcast %union.anon* %83 to i32*
- 147 %106 = add i64 %55, -24
- 148 %107 = add i64 %82, 8
- 149 store i64 %107, i64* %3, align 8
- 150 %108 = inttoptr i64 %106 to i32*
- 151 store i32 8, i32* %108, align 4
- 152 %109 = load i64, i64* %3, align 8
- 153 %110 = add i64 %109, 5
- 154 store i64 %110, i64* %3, align 8
- 155 %.pre = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 156 \<badref\> = br label %block_.L_400622
- 157 %EAX.i34.pre-phi = phi i32* [ %EAX.i43, %block_.L_400615 ], [ %EAX.i49, %block_400600 ]
- 158 %RDI.i37.pre-phi = phi i64* [ %.pre, %block_.L_400615 ], [ %RDI.i56, %block_400600 ]
- 159 %storemerge = phi i64 [ %110, %block_.L_400615 ], [ %105, %block_400600 ]
- 160 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_400615 ], [ %97, %block_400600 ]
- 161 %111 = load i64, i64* %RBP.i, align 8
- 162 %112 = add i64 %111, -24
- 163 %113 = add i64 %storemerge, 3
- 164 store i64 %113, i64* %3, align 8
- 165 %114 = inttoptr i64 %112 to i32*
- 166 %115 = load i32, i32* %114, align 4
- 167 %116 = zext i32 %115 to i64
- 168 store i64 %116, i64* %RAX.i46, align 8
- 169 store i64 3, i64* %RDI.i37.pre-phi, align 8
- 170 %117 = add i64 %111, -20
- 171 %118 = add i64 %storemerge, 11
- 172 store i64 %118, i64* %3, align 8
- 173 %119 = inttoptr i64 %117 to i32*
- 174 store i32 %115, i32* %119, align 4
- 175 %120 = load i64, i64* %RBP.i, align 8
- 176 %121 = add i64 %120, -20
- 177 %122 = load i64, i64* %3, align 8
- 178 %123 = add i64 %122, 3
- 179 store i64 %123, i64* %3, align 8
- 180 %124 = inttoptr i64 %121 to i32*
- 181 %125 = load i32, i32* %124, align 4
- 182 %126 = zext i32 %125 to i64
- 183 store i64 %126, i64* %RSI.i64, align 8
- 184 %127 = add i64 %122, 6
- 185 store i64 %127, i64* %3, align 8
- 186 %128 = load i32, i32* %124, align 4
- 187 %129 = zext i32 %128 to i64
- 188 store i64 %129, i64* %RAX.i46, align 8
- 189 %130 = add i64 %120, -28
- 190 %131 = add i64 %122, 9
- 191 store i64 %131, i64* %3, align 8
- 192 %132 = inttoptr i64 %130 to i32*
- 193 store i32 %125, i32* %132, align 4
- 194 %133 = load i32, i32* %EAX.i34.pre-phi, align 4
- 195 %134 = zext i32 %133 to i64
- 196 %135 = load i64, i64* %3, align 8
- 197 store i64 %134, i64* %RSI.i64, align 8
- 198 %136 = add i64 %135, -214
- 199 %137 = add i64 %135, 7
- 200 %138 = load i64, i64* %6, align 8
- 201 %139 = add i64 %138, -8
- 202 %140 = inttoptr i64 %139 to i64*
- 203 store i64 %137, i64* %140, align 8
- 204 store i64 %139, i64* %6, align 8
- 205 store i64 %136, i64* %3, align 8
- 206 %call2_400638 = tail call %struct.Memory* @sub_400560.Ack(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
- 207 %141 = load i64, i64* %3, align 8
- 208 store i64 ptrtoint (%G__0x4006e4_type* @G__0x4006e4 to i64), i64* %RDI.i37.pre-phi, align 8
- 209 %142 = load i64, i64* %RBP.i, align 8
- 210 %143 = add i64 %142, -28
- 211 %144 = add i64 %141, 13
- 212 store i64 %144, i64* %3, align 8
- 213 %145 = inttoptr i64 %143 to i32*
- 214 %146 = load i32, i32* %145, align 4
- 215 %147 = zext i32 %146 to i64
- 216 store i64 %147, i64* %RSI.i64, align 8
- 217 %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 218 %RDX.i17 = getelementptr inbounds %union.anon, %union.anon* %148, i64 0, i32 0
- 219 %149 = load i32, i32* %EAX.i34.pre-phi, align 4
- 220 %150 = zext i32 %149 to i64
- 221 store i64 %150, i64* %RDX.i17, align 8
- 222 %AL.i = bitcast %union.anon* %83 to i8*
- 223 store i8 0, i8* %AL.i, align 1
- 224 %151 = add i64 %141, -493
- 225 %152 = add i64 %141, 22
- 226 %153 = load i64, i64* %6, align 8
- 227 %154 = add i64 %153, -8
- 228 %155 = inttoptr i64 %154 to i64*
- 229 store i64 %152, i64* %155, align 8
- 230 store i64 %154, i64* %6, align 8
- 231 store i64 %151, i64* %3, align 8
- 232 %156 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400638)
- 233 %EDX.i9 = bitcast %union.anon* %148 to i32*
- 234 %157 = load i64, i64* %3, align 8
- 235 store i64 0, i64* %RDX.i17, align 8
- 236 %158 = load i64, i64* %RBP.i, align 8
- 237 %159 = add i64 %158, -32
- 238 %160 = load i32, i32* %EAX.i34.pre-phi, align 4
- 239 %161 = add i64 %157, 5
- 240 store i64 %161, i64* %3, align 8
- 241 %162 = inttoptr i64 %159 to i32*
- 242 store i32 %160, i32* %162, align 4
- 243 %163 = load i32, i32* %EDX.i9, align 4
- 244 %164 = zext i32 %163 to i64
- 245 %165 = load i64, i64* %3, align 8
- 246 store i64 %164, i64* %RAX.i46, align 8
- 247 %166 = load i64, i64* %6, align 8
- 248 %167 = add i64 %166, 32
- 249 store i64 %167, i64* %6, align 8
- 250 %168 = icmp ugt i64 %166, -33
- 251 %169 = zext i1 %168 to i8
- 252 store i8 %169, i8* %14, align 1
- 253 %170 = trunc i64 %167 to i32
- 254 %171 = and i32 %170, 255
- 255 %172 = tail call i32 @llvm.ctpop.i32(i32 %171)
- 256 %173 = trunc i32 %172 to i8
- 257 %174 = and i8 %173, 1
- 258 %175 = xor i8 %174, 1
- 259 store i8 %175, i8* %21, align 1
- 260 %176 = xor i64 %167, %166
- 261 %177 = lshr i64 %176, 4
- 262 %178 = trunc i64 %177 to i8
- 263 %179 = and i8 %178, 1
- 264 store i8 %179, i8* %26, align 1
- 265 %180 = icmp eq i64 %167, 0
- 266 %181 = zext i1 %180 to i8
- 267 store i8 %181, i8* %29, align 1
- 268 %182 = lshr i64 %167, 63
- 269 %183 = trunc i64 %182 to i8
- 270 store i8 %183, i8* %32, align 1
- 271 %184 = lshr i64 %166, 63
- 272 %185 = xor i64 %182, %184
- 273 %186 = add nuw nsw i64 %185, %182
- 274 %187 = icmp eq i64 %186, 2
- 275 %188 = zext i1 %187 to i8
- 276 store i8 %188, i8* %38, align 1
- 277 %189 = add i64 %165, 7
- 278 store i64 %189, i64* %3, align 8
- 279 %190 = add i64 %166, 40
- 280 %191 = inttoptr i64 %167 to i64*
- 281 %192 = load i64, i64* %191, align 8
- 282 store i64 %192, i64* %RBP.i, align 8
- 283 store i64 %190, i64* %6, align 8
- 284 %193 = add i64 %165, 8
- 285 store i64 %193, i64* %3, align 8
- 286 %194 = inttoptr i64 %190 to i64*
- 287 %195 = load i64, i64* %194, align 8
- 288 store i64 %195, i64* %3, align 8
- 289 %196 = add i64 %166, 48
- 290 store i64 %196, i64* %6, align 8
- 291 \<badref\> = ret %struct.Memory* %156
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25a9e2e158>, {0: {0}, 1: {13}, 2: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 3: {15}, 4: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 5: {12}, 6: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 7: {64, 196, 173, 80, 18, 275}, 8: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 9: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 10: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 11: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 12: {23}, 13: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 14: {25}, 15: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 16: {27}, 17: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 18: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 19: {90, 222, 30}, 20: {201, 178, 280, 91, 31, 223}, 21: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 22: {33, 225, 99, 231, 40, 93}, 23: {34, 226, 94}, 24: {35}, 25: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 26: {96, 228, 37, 108, 240, 52}, 27: {97, 229, 38}, 28: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 29: {33, 225, 99, 231, 40, 93}, 30: {41}, 31: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 32: {233, 43, 101}, 33: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 34: {45}, 35: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 36: {239, 51, 236, 47}, 37: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 38: {49}, 39: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 40: {239, 51, 236, 47}, 41: {96, 228, 37, 108, 240, 52}, 42: {132, 109, 241, 114, 53}, 43: {110, 242, 54, 87}, 44: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 45: {56}, 46: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 47: {58}, 48: {59}, 49: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 50: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 51: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 52: {6}, 53: {2, 3, 5, 7}, 54: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 55: {64, 196, 173, 80, 18, 275}, 56: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 57: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 58: {135, 67, 150, 127}, 59: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 60: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 61: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 62: {10}, 63: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 64: {72, 260}, 65: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 66: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 67: {82, 75, 261}, 68: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 69: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 70: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 71: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 72: {64, 196, 173, 80, 18, 275}, 73: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 74: {82, 75, 261}, 75: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 76: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 77: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 78: {86}, 79: {110, 242, 54, 87}, 80: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 81: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 82: {90, 222, 30}, 83: {201, 178, 280, 91, 31, 223}, 84: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 85: {33, 225, 99, 231, 40, 93}, 86: {34, 226, 94}, 87: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 88: {96, 228, 37, 108, 240, 52}, 89: {97, 229, 38}, 90: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 91: {33, 225, 99, 231, 40, 93}, 92: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 93: {233, 43, 101}, 94: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 95: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 96: {104, 107}, 97: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 98: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 99: {104, 107}, 100: {96, 228, 37, 108, 240, 52}, 101: {132, 109, 241, 114, 53}, 102: {110, 242, 54, 87}, 103: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 104: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 105: {113}, 106: {132, 109, 241, 114, 53}, 107: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 108: {1}, 109: {8, 9, 11}, 110: {116}, 111: {72, 260}, 112: {82, 75, 261}, 113: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 114: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 115: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 116: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 117: {8, 9, 11}, 118: {266, 267, 252}, 119: {266, 267, 252}, 120: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 121: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 122: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 123: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 124: {272}, 125: {273, 183}, 126: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 127: {64, 196, 173, 80, 18, 275}, 128: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 129: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 130: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 131: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 132: {201, 178, 280, 91, 31, 223}, 133: {2, 3, 5, 7}, 134: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 135: {134, 126}, 136: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 137: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 138: {135, 67, 150, 127}, 139: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 140: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 141: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 142: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 143: set(), 144: {120, 284}, 145: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 146: {2, 3, 5, 7}, 147: {134, 126}, 148: {266, 267, 252}, 149: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 150: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 151: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 152: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 153: {117, 207}, 154: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 155: {8, 9, 11}, 156: {120, 284}, 157: {121, 122, 125}, 158: {121, 122, 125}, 159: {121, 122, 125}, 160: {121, 122, 125}, 161: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 162: {134, 126}, 163: {135, 67, 150, 127}, 164: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 165: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 166: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 167: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 168: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 169: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 170: {148, 142}, 171: {143}, 172: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 173: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 174: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 175: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 176: {148, 142}, 177: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 178: {135, 67, 150, 127}, 179: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 180: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 181: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 182: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 183: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 184: {156}, 185: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 186: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 187: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 188: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 189: {161, 182}, 190: {162}, 191: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 192: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 193: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 194: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 195: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 196: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 197: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 198: {170}, 199: {171, 245}, 200: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 201: {64, 196, 173, 80, 18, 275}, 202: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 203: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 204: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 205: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 206: {201, 178, 280, 91, 31, 223}, 207: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 208: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 209: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 210: {161, 182}, 211: {273, 183}, 212: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 213: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 214: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 215: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 216: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 217: {4}, 218: {8, 9, 11}, 219: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 220: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 221: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 222: {2, 3, 5, 7}, 223: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 224: {193}, 225: {194}, 226: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 227: {64, 196, 173, 80, 18, 275}, 228: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 229: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 230: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 231: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 232: {201, 178, 280, 91, 31, 223}, 233: {2, 3, 5, 7}, 234: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 235: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 236: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 237: {205}, 238: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 239: {117, 207}, 240: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 241: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 242: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 243: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 244: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 245: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 246: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 247: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 248: {216}, 249: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 250: {218}, 251: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 252: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 253: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 254: {90, 222, 30}, 255: {201, 178, 280, 91, 31, 223}, 256: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 257: {33, 225, 99, 231, 40, 93}, 258: {34, 226, 94}, 259: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 260: {96, 228, 37, 108, 240, 52}, 261: {97, 229, 38}, 262: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 263: {33, 225, 99, 231, 40, 93}, 264: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 265: {233, 43, 101}, 266: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 267: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 268: {239, 51, 236, 47}, 269: {32, 224, 98, 230, 39, 105, 237, 48, 221, 92, 29}, 270: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 271: {239, 51, 236, 47}, 272: {96, 228, 37, 108, 240, 52}, 273: {132, 109, 241, 114, 53}, 274: {110, 242, 54, 87}, 275: {102, 154, 167, 234, 139, 44, 219, 111, 243, 212, 55, 88, 26, 187, 190, 159}, 276: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 277: {171, 245}, 278: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 279: {247}, 280: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 281: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 282: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 283: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 284: {266, 267, 252}, 285: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 286: {248, 129, 164, 69, 197, 263, 137, 77, 174, 269, 145, 209, 19, 84, 276, 152, 185, 61, 254}, 287: {131, 133, 264, 138, 14, 270, 17, 274, 147, 21, 149, 153, 281, 282, 283, 158, 166, 168, 172, 179, 181, 186, 189, 63, 65, 66, 195, 71, 73, 74, 202, 204, 206, 79, 81, 211, 85, 213, 215, 249, 255}, 288: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 289: {257}, 290: {128, 256, 130, 258, 262, 136, 265, 140, 141, 268, 271, 16, 144, 146, 20, 277, 22, 151, 24, 278, 279, 155, 28, 157, 160, 163, 36, 165, 169, 42, 46, 175, 176, 177, 50, 180, 184, 57, 60, 188, 62, 191, 192, 68, 70, 198, 199, 200, 203, 76, 78, 208, 210, 83, 214, 89, 217, 220, 95, 227, 100, 103, 232, 106, 235, 238, 112, 115, 244, 118, 119, 246, 250, 251, 253}, 291: {259}})
Equivalent! frozenset({81, 74}) {73, 66}
Equivalent! frozenset({82, 75}) {74, 67}
Equivalent! frozenset({83, 76}) {75, 68}
Equivalent! frozenset({274, 195, 172}) {200, 226, 126}
Equivalent! frozenset({275, 196, 173}) {201, 227, 127}
Equivalent! frozenset({176, 278, 199}) {130, 204, 230}
Equivalent! frozenset({120, 284}) {144, 156}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25a9e2e158>, {0: {0}, 1: {13}, 2: {14}, 3: {15}, 4: {16}, 5: {12}, 6: {17}, 7: {18}, 8: {19}, 9: {20}, 10: {21}, 11: {22}, 12: {23}, 13: {24}, 14: {25}, 15: {26}, 16: {27}, 17: {28}, 18: {29}, 19: {30}, 20: {31}, 21: {32}, 22: {33}, 23: {34}, 24: {35}, 25: {36}, 26: {37}, 27: {38}, 28: {39}, 29: {40}, 30: {41}, 31: {42}, 32: {43}, 33: {44}, 34: {45}, 35: {46}, 36: {47}, 37: {48}, 38: {49}, 39: {50}, 40: {51}, 41: {52}, 42: {53}, 43: {54}, 44: {55}, 45: {56}, 46: {57}, 47: {58}, 48: {59}, 49: {60}, 50: {61}, 51: {62}, 52: {6}, 53: {7}, 54: {63}, 55: {64}, 56: {65}, 57: {66, 149}, 58: {67, 150}, 59: {68, 151}, 60: {69}, 61: {70}, 62: {10}, 63: {71}, 64: {72}, 65: {73}, 66: {74}, 67: {75}, 68: {76}, 69: {77}, 70: {78}, 71: {79}, 72: {80}, 73: {81}, 74: {82}, 75: {83}, 76: {84}, 77: {85}, 78: {86}, 79: {87}, 80: {88}, 81: {89}, 82: {90}, 83: {91}, 84: {92}, 85: {93}, 86: {94}, 87: {95}, 88: {96}, 89: {97}, 90: {98}, 91: {99}, 92: {100}, 93: {101}, 94: {102}, 95: {103}, 96: {104}, 97: {105}, 98: {106}, 99: {107}, 100: {108}, 101: {109}, 102: {110}, 103: {111}, 104: {112}, 105: {113}, 106: {114}, 107: {115}, 108: {1}, 109: {8}, 110: {116}, 111: {260}, 112: {261}, 113: {262}, 114: {263}, 115: {264}, 116: {265}, 117: {11}, 118: {266}, 119: {267}, 120: {268}, 121: {269}, 122: {270}, 123: {271}, 124: {272}, 125: {273}, 126: {172}, 127: {173}, 128: {276}, 129: {277}, 130: {176}, 131: {279}, 132: {280}, 133: set(), 134: set(), 135: set(), 136: set(), 137: {66, 149}, 138: {67, 150}, 139: {68, 151}, 140: set(), 141: set(), 142: set(), 143: set(), 144: {120}, 145: {160, 265, 140, 214, 119}, 146: set(), 147: set(), 148: {267}, 149: {268}, 150: set(), 151: set(), 152: {202}, 153: {207}, 154: {208}, 155: set(), 156: {284}, 157: set(), 158: set(), 159: set(), 160: {125}, 161: {133}, 162: {134}, 163: set(), 164: set(), 165: {137}, 166: {138}, 167: {139}, 168: {140}, 169: set(), 170: {142}, 171: set(), 172: set(), 173: {145}, 174: {146}, 175: {147}, 176: {148}, 177: {66, 149}, 178: {67, 150}, 179: {68, 151}, 180: {152}, 181: {153}, 182: {154}, 183: {155}, 184: {156}, 185: {157}, 186: {158}, 187: {159}, 188: {160}, 189: {161}, 190: {162}, 191: {163}, 192: {164}, 193: {165}, 194: set(), 195: set(), 196: {168}, 197: set(), 198: {170}, 199: {171}, 200: {274}, 201: {275}, 202: {174}, 203: {175}, 204: {278}, 205: {177}, 206: {178}, 207: {179}, 208: set(), 209: {181}, 210: {182}, 211: {183}, 212: {184}, 213: {185}, 214: {186}, 215: {187}, 216: {188}, 217: {4}, 218: {9}, 219: set(), 220: set(), 221: set(), 222: {2}, 223: {192}, 224: {193}, 225: {194}, 226: {195}, 227: {196}, 228: {197}, 229: {198}, 230: {199}, 231: {200}, 232: {201}, 233: {5}, 234: {202}, 235: {203, 191}, 236: set(), 237: set(), 238: set(), 239: {207}, 240: {208}, 241: set(), 242: set(), 243: {211}, 244: {212}, 245: {213}, 246: {214}, 247: {215}, 248: {216}, 249: {217}, 250: {218}, 251: {219}, 252: {220}, 253: {221}, 254: {222}, 255: {223}, 256: {224}, 257: {225}, 258: {226}, 259: {227}, 260: {228}, 261: {229}, 262: {230}, 263: {231}, 264: {232}, 265: {233}, 266: {234}, 267: {235}, 268: {236}, 269: {237}, 270: {238}, 271: {239}, 272: {240}, 273: {241}, 274: {242}, 275: {243}, 276: {244}, 277: {245}, 278: {246}, 279: {247}, 280: {248}, 281: {249}, 282: {250}, 283: {251}, 284: {252}, 285: {253}, 286: {254}, 287: {255}, 288: {256}, 289: {257}, 290: {258}, 291: {259}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 add add
EXACT 48 add add
EXACT 49 store store
EXACT 50 inttoptr inttoptr
EXACT 51 store store
EXACT 52 getelementptr getelementptr
EXACT 53 bitcast bitcast
EXACT 54 load load
EXACT 55 add add
EXACT 56 load load
MORE 57 POT: 2
MORE 58 POT: 2
MORE 59 POT: 2
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
EXACT 76 inttoptr inttoptr
EXACT 77 load load
EXACT 78 add add
EXACT 79 icmp icmp
EXACT 80 zext zext
EXACT 81 store store
EXACT 82 and and
EXACT 83 tail tail
EXACT 84 trunc trunc
EXACT 85 and and
EXACT 86 xor xor
EXACT 87 store store
EXACT 88 xor xor
EXACT 89 lshr lshr
EXACT 90 trunc trunc
EXACT 91 and and
EXACT 92 store store
EXACT 93 icmp icmp
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 lshr lshr
EXACT 97 trunc trunc
EXACT 98 store store
EXACT 99 lshr lshr
EXACT 100 xor xor
EXACT 101 add add
EXACT 102 icmp icmp
EXACT 103 zext zext
EXACT 104 store store
EXACT 105 select select
EXACT 106 add add
EXACT 107 store store
EXACT 108 getelementptr getelementptr
EXACT 109 getelementptr getelementptr
EXACT 110 br br
EXACT 111 add add
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 load load
EXACT 116 store store
EXACT 117 getelementptr getelementptr
EXACT 118 add add
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 load load
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 load load
EXACT 127 add add
EXACT 128 inttoptr inttoptr
EXACT 129 store store
EXACT 130 store store
EXACT 131 store store
EXACT 132 tail tail
NO MATCH 133
NO MATCH 134
NO MATCH 135
NO MATCH 136
MORE 137 POT: 2
MORE 138 POT: 2
MORE 139 POT: 2
NO MATCH 140
NO MATCH 141
NO MATCH 142
NO MATCH 143
EXACT 144 br br
MORE 145 POT: 5
NO MATCH 146
NO MATCH 147
EXACT 148 add add
EXACT 149 store store
NO MATCH 150
NO MATCH 151
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
NO MATCH 155
EXACT 156 br br
NO MATCH 157
NO MATCH 158
NO MATCH 159
EXACT 160 phi phi
EXACT 161 load load
EXACT 162 add add
NO MATCH 163
NO MATCH 164
EXACT 165 inttoptr inttoptr
EXACT 166 load load
EXACT 167 zext zext
EXACT 168 store store
NO MATCH 169
EXACT 170 add add
NO MATCH 171
NO MATCH 172
EXACT 173 inttoptr inttoptr
EXACT 174 store store
EXACT 175 load load
EXACT 176 add add
MORE 177 POT: 2
MORE 178 POT: 2
MORE 179 POT: 2
EXACT 180 inttoptr inttoptr
EXACT 181 load load
EXACT 182 zext zext
EXACT 183 store store
EXACT 184 add add
EXACT 185 store store
EXACT 186 load load
EXACT 187 zext zext
EXACT 188 store store
EXACT 189 add add
EXACT 190 add add
EXACT 191 store store
EXACT 192 inttoptr inttoptr
EXACT 193 store store
NO MATCH 194
NO MATCH 195
EXACT 196 load load
NO MATCH 197
EXACT 198 add add
EXACT 199 add add
EXACT 200 load load
EXACT 201 add add
EXACT 202 inttoptr inttoptr
EXACT 203 store store
EXACT 204 store store
EXACT 205 store store
EXACT 206 tail tail
EXACT 207 load load
NO MATCH 208
EXACT 209 load load
EXACT 210 add add
EXACT 211 add add
EXACT 212 store store
EXACT 213 inttoptr inttoptr
EXACT 214 load load
EXACT 215 zext zext
EXACT 216 store store
EXACT 217 getelementptr getelementptr
EXACT 218 getelementptr getelementptr
NO MATCH 219
NO MATCH 220
NO MATCH 221
EXACT 222 bitcast bitcast
EXACT 223 store store
EXACT 224 add add
EXACT 225 add add
EXACT 226 load load
EXACT 227 add add
EXACT 228 inttoptr inttoptr
EXACT 229 store store
EXACT 230 store store
EXACT 231 store store
EXACT 232 tail tail
EXACT 233 bitcast bitcast
EXACT 234 load load
MORE 235 POT: 2
NO MATCH 236
NO MATCH 237
NO MATCH 238
EXACT 239 add add
EXACT 240 store store
NO MATCH 241
NO MATCH 242
EXACT 243 load load
EXACT 244 zext zext
EXACT 245 load load
EXACT 246 store store
EXACT 247 load load
EXACT 248 add add
EXACT 249 store store
EXACT 250 icmp icmp
EXACT 251 zext zext
EXACT 252 store store
EXACT 253 trunc trunc
EXACT 254 and and
EXACT 255 tail tail
EXACT 256 trunc trunc
EXACT 257 and and
EXACT 258 xor xor
EXACT 259 store store
EXACT 260 xor xor
EXACT 261 lshr lshr
EXACT 262 trunc trunc
EXACT 263 and and
EXACT 264 store store
EXACT 265 icmp icmp
EXACT 266 zext zext
EXACT 267 store store
EXACT 268 lshr lshr
EXACT 269 trunc trunc
EXACT 270 store store
EXACT 271 lshr lshr
EXACT 272 xor xor
EXACT 273 add add
EXACT 274 icmp icmp
EXACT 275 zext zext
EXACT 276 store store
EXACT 277 add add
EXACT 278 store store
EXACT 279 add add
EXACT 280 inttoptr inttoptr
EXACT 281 load load
EXACT 282 store store
EXACT 283 store store
EXACT 284 add add
EXACT 285 store store
EXACT 286 inttoptr inttoptr
EXACT 287 load load
EXACT 288 store store
EXACT 289 add add
EXACT 290 store store
EXACT 291 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 5 %EDX = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 7 %EDI = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 11 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 12 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 13 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 14 %6 = load i64, i64* %RBP, align 8
- 15 %7 = add i64 %1, 1
- 16 store i64 %7, i64* %PC, align 8
- 17 %8 = load i64, i64* %RSP, align 8
- 18 %9 = add i64 %8, -8
- 19 %10 = inttoptr i64 %9 to i64*
- 20 store i64 %6, i64* %10, align 8
- 21 %11 = load i64, i64* %PC, align 8
- 22 store i64 %9, i64* %RBP, align 8
- 23 %12 = add i64 %8, -40
- 24 store i64 %12, i64* %RSP, align 8
- 25 %13 = icmp ult i64 %9, 32
- 26 %14 = zext i1 %13 to i8
- 27 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 28 store i8 %14, i8* %15, align 1
- 29 %16 = trunc i64 %12 to i32
- 30 %17 = and i32 %16, 255
- 31 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 32 %19 = trunc i32 %18 to i8
- 33 %20 = and i8 %19, 1
- 34 %21 = xor i8 %20, 1
- 35 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 36 store i8 %21, i8* %22, align 1
- 37 %23 = xor i64 %9, %12
- 38 %24 = lshr i64 %23, 4
- 39 %25 = trunc i64 %24 to i8
- 40 %26 = and i8 %25, 1
- 41 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 42 store i8 %26, i8* %27, align 1
- 43 %28 = icmp eq i64 %12, 0
- 44 %29 = zext i1 %28 to i8
- 45 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 store i8 %29, i8* %30, align 1
- 47 %31 = lshr i64 %12, 63
- 48 %32 = trunc i64 %31 to i8
- 49 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 store i8 %32, i8* %33, align 1
- 51 %34 = lshr i64 %9, 63
- 52 %35 = xor i64 %31, %34
- 53 %36 = add nuw nsw i64 %35, %34
- 54 %37 = icmp eq i64 %36, 2
- 55 %38 = zext i1 %37 to i8
- 56 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 57 store i8 %38, i8* %39, align 1
- 58 %40 = add i64 %8, -12
- 59 %41 = add i64 %11, 14
- 60 store i64 %41, i64* %PC, align 8
- 61 %42 = inttoptr i64 %40 to i32*
- 62 store i32 0, i32* %42, align 4
- 63 %43 = load i64, i64* %RBP, align 8
- 64 %44 = add i64 %43, -8
- 65 %45 = load i32, i32* %EDI, align 4
- 66 %46 = load i64, i64* %PC, align 8
- 67 %47 = add i64 %46, 3
- 68 store i64 %47, i64* %PC, align 8
- 69 %48 = inttoptr i64 %44 to i32*
- 70 store i32 %45, i32* %48, align 4
- 71 %49 = load i64, i64* %RBP, align 8
- 72 %50 = add i64 %49, -16
- 73 %51 = load i64, i64* %RSI, align 8
- 74 %52 = load i64, i64* %PC, align 8
- 75 %53 = add i64 %52, 4
- 76 store i64 %53, i64* %PC, align 8
- 77 %54 = inttoptr i64 %50 to i64*
- 78 store i64 %51, i64* %54, align 8
- 79 %55 = load i64, i64* %RBP, align 8
- 80 %56 = add i64 %55, -8
- 81 %57 = load i64, i64* %PC, align 8
- 82 %58 = add i64 %57, 4
- 83 store i64 %58, i64* %PC, align 8
- 84 %59 = inttoptr i64 %56 to i32*
- 85 %60 = load i32, i32* %59, align 4
- 86 %61 = add i32 %60, -2
- 87 %62 = icmp ult i32 %60, 2
- 88 %63 = zext i1 %62 to i8
- 89 store i8 %63, i8* %15, align 1
- 90 %64 = and i32 %61, 255
- 91 %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12
- 92 %66 = trunc i32 %65 to i8
- 93 %67 = and i8 %66, 1
- 94 %68 = xor i8 %67, 1
- 95 store i8 %68, i8* %22, align 1
- 96 %69 = xor i32 %61, %60
- 97 %70 = lshr i32 %69, 4
- 98 %71 = trunc i32 %70 to i8
- 99 %72 = and i8 %71, 1
- 100 store i8 %72, i8* %27, align 1
- 101 %73 = icmp eq i32 %61, 0
- 102 %74 = zext i1 %73 to i8
- 103 store i8 %74, i8* %30, align 1
- 104 %75 = lshr i32 %61, 31
- 105 %76 = trunc i32 %75 to i8
- 106 store i8 %76, i8* %33, align 1
- 107 %77 = lshr i32 %60, 31
- 108 %78 = xor i32 %75, %77
- 109 %79 = add nuw nsw i32 %78, %77
- 110 %80 = icmp eq i32 %79, 2
- 111 %81 = zext i1 %80 to i8
- 112 store i8 %81, i8* %39, align 1
- 113 %.v = select i1 %73, i64 10, i64 31
- 114 %82 = add i64 %57, %.v
- 115 store i64 %82, i64* %PC, align 8
- 116 \<badref\> = br i1 %73, label %block_400600, label %block_400615
- 117 %83 = add i64 %82, 5
- 118 store i64 %83, i64* %PC, align 8
- 119 store i64 8, i64* %RAX, align 8
- 120 \<badref\> = br label %block_400622
- 121 %84 = phi i64 [ %.pre, %block_400600 ], [ %83, %block_400615 ]
- 122 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_400600 ], [ %55, %block_400615 ]
- 123 %.sink = phi i32 [ %.sink.pre, %block_400600 ], [ 8, %block_400615 ]
- 124 %.sink5 = phi i64 [ 18, %block_400600 ], [ 5, %block_400615 ]
- 125 %MEMORY.0 = phi %struct.Memory* [ %188, %block_400600 ], [ %2, %block_400615 ]
- 126 %.sink7 = add i64 %.sink7.in, -24
- 127 %85 = add i64 %84, 3
- 128 store i64 %85, i64* %PC, align 8
- 129 %86 = inttoptr i64 %.sink7 to i32*
- 130 store i32 %.sink, i32* %86, align 4
- 131 %87 = load i64, i64* %PC, align 8
- 132 %88 = add i64 %87, %.sink5
- 133 %89 = load i64, i64* %RBP, align 8
- 134 %90 = add i64 %89, -24
- 135 %91 = add i64 %88, 3
- 136 store i64 %91, i64* %PC, align 8
- 137 %92 = inttoptr i64 %90 to i32*
- 138 %93 = load i32, i32* %92, align 4
- 139 %94 = zext i32 %93 to i64
- 140 store i64 %94, i64* %RAX, align 8
- 141 store i64 3, i64* %RDI, align 8
- 142 %95 = add i64 %89, -20
- 143 %96 = add i64 %88, 11
- 144 store i64 %96, i64* %PC, align 8
- 145 %97 = inttoptr i64 %95 to i32*
- 146 store i32 %93, i32* %97, align 4
- 147 %98 = load i64, i64* %RBP, align 8
- 148 %99 = add i64 %98, -20
- 149 %100 = load i64, i64* %PC, align 8
- 150 %101 = add i64 %100, 3
- 151 store i64 %101, i64* %PC, align 8
- 152 %102 = inttoptr i64 %99 to i32*
- 153 %103 = load i32, i32* %102, align 4
- 154 %104 = zext i32 %103 to i64
- 155 store i64 %104, i64* %RSI, align 8
- 156 %105 = add i64 %100, 6
- 157 store i64 %105, i64* %PC, align 8
- 158 %106 = load i32, i32* %102, align 4
- 159 %107 = zext i32 %106 to i64
- 160 store i64 %107, i64* %RAX, align 8
- 161 %108 = add i64 %98, -28
- 162 %109 = add i64 %100, 9
- 163 store i64 %109, i64* %PC, align 8
- 164 %110 = inttoptr i64 %108 to i32*
- 165 store i32 %103, i32* %110, align 4
- 166 %111 = load i32, i32* %EAX, align 4
- 167 %112 = zext i32 %111 to i64
- 168 %113 = load i64, i64* %PC, align 8
- 169 store i64 %112, i64* %RSI, align 8
- 170 %114 = add i64 %113, -214
- 171 %115 = add i64 %113, 7
- 172 %116 = load i64, i64* %RSP, align 8
- 173 %117 = add i64 %116, -8
- 174 %118 = inttoptr i64 %117 to i64*
- 175 store i64 %115, i64* %118, align 8
- 176 store i64 %117, i64* %RSP, align 8
- 177 store i64 %114, i64* %PC, align 8
- 178 %119 = tail call %struct.Memory* @sub_400560_Ack_renamed_(%struct.State* nonnull %0, i64 %114, %struct.Memory* %MEMORY.0)
- 179 %120 = load i64, i64* %PC, align 8
- 180 store i64 add (i64 ptrtoint (%seg_4006e0__rodata_type* @seg_4006e0__rodata to i64), i64 4), i64* %RDI, align 8
- 181 %121 = load i64, i64* %RBP, align 8
- 182 %122 = add i64 %121, -28
- 183 %123 = add i64 %120, 13
- 184 store i64 %123, i64* %PC, align 8
- 185 %124 = inttoptr i64 %122 to i32*
- 186 %125 = load i32, i32* %124, align 4
- 187 %126 = zext i32 %125 to i64
- 188 store i64 %126, i64* %RSI, align 8
- 189 %127 = load i32, i32* %EAX, align 4
- 190 %128 = zext i32 %127 to i64
- 191 store i64 %128, i64* %RDX, align 8
- 192 store i8 0, i8* %AL, align 1
- 193 %129 = add i64 %120, -493
- 194 %130 = add i64 %120, 22
- 195 %131 = load i64, i64* %RSP, align 8
- 196 %132 = add i64 %131, -8
- 197 %133 = inttoptr i64 %132 to i64*
- 198 store i64 %130, i64* %133, align 8
- 199 store i64 %132, i64* %RSP, align 8
- 200 store i64 %129, i64* %PC, align 8
- 201 %134 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %119)
- 202 %135 = load i64, i64* %PC, align 8
- 203 store i64 0, i64* %RDX, align 8
- 204 %136 = load i64, i64* %RBP, align 8
- 205 %137 = add i64 %136, -32
- 206 %138 = load i32, i32* %EAX, align 4
- 207 %139 = add i64 %135, 5
- 208 store i64 %139, i64* %PC, align 8
- 209 %140 = inttoptr i64 %137 to i32*
- 210 store i32 %138, i32* %140, align 4
- 211 %141 = load i32, i32* %EDX, align 4
- 212 %142 = zext i32 %141 to i64
- 213 %143 = load i64, i64* %PC, align 8
- 214 store i64 %142, i64* %RAX, align 8
- 215 %144 = load i64, i64* %RSP, align 8
- 216 %145 = add i64 %144, 32
- 217 store i64 %145, i64* %RSP, align 8
- 218 %146 = icmp ugt i64 %144, -33
- 219 %147 = zext i1 %146 to i8
- 220 store i8 %147, i8* %15, align 1
- 221 %148 = trunc i64 %145 to i32
- 222 %149 = and i32 %148, 255
- 223 %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #12
- 224 %151 = trunc i32 %150 to i8
- 225 %152 = and i8 %151, 1
- 226 %153 = xor i8 %152, 1
- 227 store i8 %153, i8* %22, align 1
- 228 %154 = xor i64 %145, %144
- 229 %155 = lshr i64 %154, 4
- 230 %156 = trunc i64 %155 to i8
- 231 %157 = and i8 %156, 1
- 232 store i8 %157, i8* %27, align 1
- 233 %158 = icmp eq i64 %145, 0
- 234 %159 = zext i1 %158 to i8
- 235 store i8 %159, i8* %30, align 1
- 236 %160 = lshr i64 %145, 63
- 237 %161 = trunc i64 %160 to i8
- 238 store i8 %161, i8* %33, align 1
- 239 %162 = lshr i64 %144, 63
- 240 %163 = xor i64 %160, %162
- 241 %164 = add nuw nsw i64 %163, %160
- 242 %165 = icmp eq i64 %164, 2
- 243 %166 = zext i1 %165 to i8
- 244 store i8 %166, i8* %39, align 1
- 245 %167 = add i64 %143, 7
- 246 store i64 %167, i64* %PC, align 8
- 247 %168 = add i64 %144, 40
- 248 %169 = inttoptr i64 %145 to i64*
- 249 %170 = load i64, i64* %169, align 8
- 250 store i64 %170, i64* %RBP, align 8
- 251 store i64 %168, i64* %RSP, align 8
- 252 %171 = add i64 %143, 8
- 253 store i64 %171, i64* %PC, align 8
- 254 %172 = inttoptr i64 %168 to i64*
- 255 %173 = load i64, i64* %172, align 8
- 256 store i64 %173, i64* %PC, align 8
- 257 %174 = add i64 %144, 48
- 258 store i64 %174, i64* %RSP, align 8
- 259 \<badref\> = ret %struct.Memory* %134
- 260 %175 = add i64 %55, -16
- 261 %176 = add i64 %82, 4
- 262 store i64 %176, i64* %PC, align 8
- 263 %177 = inttoptr i64 %175 to i64*
- 264 %178 = load i64, i64* %177, align 8
- 265 store i64 %178, i64* %RAX, align 8
- 266 %179 = add i64 %178, 8
- 267 %180 = add i64 %82, 8
- 268 store i64 %180, i64* %PC, align 8
- 269 %181 = inttoptr i64 %179 to i64*
- 270 %182 = load i64, i64* %181, align 8
- 271 store i64 %182, i64* %RDI, align 8
- 272 %183 = add i64 %82, -416
- 273 %184 = add i64 %82, 13
- 274 %185 = load i64, i64* %RSP, align 8
- 275 %186 = add i64 %185, -8
- 276 %187 = inttoptr i64 %186 to i64*
- 277 store i64 %184, i64* %187, align 8
- 278 store i64 %186, i64* %RSP, align 8
- 279 store i64 %183, i64* %PC, align 8
- 280 %188 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 281 %.sink.pre = load i32, i32* %EAX, align 4
- 282 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 283 %.pre = load i64, i64* %PC, align 8
- 284 \<badref\> = br label %block_400622
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25a9e2e400>, {0: {0}, 1: {108}, 2: {133, 233, 146, 53, 222}, 3: {133, 233, 146, 53, 222}, 4: {217}, 5: {133, 233, 146, 53, 222}, 6: {52}, 7: {133, 233, 146, 53, 222}, 8: {218, 117, 155, 109}, 9: {218, 117, 155, 109}, 10: {62}, 11: {218, 117, 155, 109}, 12: {5}, 13: {1}, 14: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 15: {3}, 16: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 17: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 18: {227, 7, 72, 201, 55, 127}, 19: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 20: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 21: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 22: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 23: {12}, 24: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 25: {14}, 26: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 27: {16}, 28: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 29: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 30: {82, 19, 254}, 31: {132, 232, 206, 83, 20, 255}, 32: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 33: {257, 263, 85, 22, 91, 29}, 34: {258, 86, 23}, 35: {24}, 36: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 37: {100, 260, 41, 272, 88, 26}, 38: {89, 27, 261}, 39: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 40: {257, 263, 85, 22, 91, 29}, 41: {30}, 42: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 43: {32, 265, 93}, 44: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 45: {34}, 46: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 47: {40, 36, 268, 271}, 48: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 49: {38}, 50: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 51: {40, 36, 268, 271}, 52: {100, 260, 41, 272, 88, 26}, 53: {273, 42, 101, 106}, 54: {274, 43, 102, 79}, 55: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 56: {45}, 57: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 58: {47}, 59: {48}, 60: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 61: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 62: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 63: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 64: {227, 7, 72, 201, 55, 127}, 65: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 66: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 67: {178, 58, 163, 138}, 68: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 69: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 70: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 71: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 72: {64, 111}, 73: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 74: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 75: {112, 74, 67}, 76: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 77: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 78: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 79: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 80: {227, 7, 72, 201, 55, 127}, 81: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 82: {112, 74, 67}, 83: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 84: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 85: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 86: {78}, 87: {274, 43, 102, 79}, 88: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 89: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 90: {82, 19, 254}, 91: {132, 232, 206, 83, 20, 255}, 92: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 93: {257, 263, 85, 22, 91, 29}, 94: {258, 86, 23}, 95: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 96: {100, 260, 41, 272, 88, 26}, 97: {89, 27, 261}, 98: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 99: {257, 263, 85, 22, 91, 29}, 100: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 101: {32, 265, 93}, 102: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 103: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 104: {96, 99}, 105: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 106: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 107: {96, 99}, 108: {100, 260, 41, 272, 88, 26}, 109: {273, 42, 101, 106}, 110: {274, 43, 102, 79}, 111: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 112: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 113: {105}, 114: {273, 42, 101, 106}, 115: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 116: {110}, 117: {153, 239}, 118: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 119: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 120: {144, 156}, 121: {160, 157, 158, 159}, 122: {160, 157, 158, 159}, 123: set(), 124: set(), 125: {160, 157, 158, 159}, 126: {162, 147, 135}, 127: {178, 58, 163, 138}, 128: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 129: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 130: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 131: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 132: {273, 42, 101, 106}, 133: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 134: {162, 147, 135}, 135: {178, 58, 163, 138}, 136: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 137: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 138: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 139: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 140: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 141: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 142: {176, 170}, 143: {171}, 144: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 145: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 146: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 147: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 148: {176, 170}, 149: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 150: {178, 58, 163, 138}, 151: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 152: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 153: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 154: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 155: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 156: {184}, 157: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 158: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 159: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 160: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 161: {210, 189}, 162: {190}, 163: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 164: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 165: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 166: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 167: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 168: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 169: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 170: {198}, 171: {277, 199}, 172: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 173: {227, 7, 72, 201, 55, 127}, 174: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 175: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 176: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 177: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 178: {132, 232, 206, 83, 20, 255}, 179: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 180: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 181: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 182: {210, 189}, 183: {211, 125}, 184: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 185: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 186: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 187: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 188: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 189: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 190: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 191: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 192: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 193: {224}, 194: {225}, 195: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 196: {227, 7, 72, 201, 55, 127}, 197: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 198: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 199: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 200: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 201: {132, 232, 206, 83, 20, 255}, 202: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 203: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 204: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 205: {237}, 206: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 207: {153, 239}, 208: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 209: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 210: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 211: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 212: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 213: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 214: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 215: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 216: {248}, 217: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 218: {250}, 219: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 220: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 221: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 222: {82, 19, 254}, 223: {132, 232, 206, 83, 20, 255}, 224: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 225: {257, 263, 85, 22, 91, 29}, 226: {258, 86, 23}, 227: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 228: {100, 260, 41, 272, 88, 26}, 229: {89, 27, 261}, 230: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 231: {257, 263, 85, 22, 91, 29}, 232: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 233: {32, 265, 93}, 234: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 235: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 236: {40, 36, 268, 271}, 237: {256, 97, 37, 262, 269, 18, 84, 21, 90, 28, 253}, 238: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 239: {40, 36, 268, 271}, 240: {100, 260, 41, 272, 88, 26}, 241: {273, 42, 101, 106}, 242: {274, 43, 102, 79}, 243: {33, 195, 103, 167, 266, 44, 15, 80, 251, 275, 244, 182, 215, 187, 220, 94}, 244: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 245: {277, 199}, 246: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 247: {279}, 248: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 249: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 250: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 251: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 252: {148, 284, 118, 119}, 253: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 254: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 255: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 256: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 257: {289}, 258: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 259: {291}, 260: {64, 111}, 261: {112, 74, 67}, 262: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 263: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 264: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 265: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 266: {148, 284, 118, 119}, 267: {148, 284, 118, 119}, 268: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 269: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 270: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 271: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 272: {124}, 273: {211, 125}, 274: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 275: {227, 7, 72, 201, 55, 127}, 276: {128, 192, 228, 69, 165, 8, 202, 76, 140, 173, 241, 50, 114, 180, 213, 150, 280, 121, 60, 286}, 277: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 278: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 279: {129, 130, 131, 4, 259, 264, 9, 11, 139, 13, 141, 267, 270, 17, 145, 276, 149, 278, 151, 25, 154, 282, 283, 285, 31, 288, 290, 35, 164, 39, 168, 169, 172, 46, 174, 49, 51, 179, 183, 185, 59, 188, 61, 191, 193, 68, 197, 70, 75, 203, 204, 205, 208, 81, 212, 87, 216, 92, 221, 95, 223, 98, 229, 230, 231, 104, 107, 235, 240, 113, 242, 116, 246, 120, 249, 123, 252}, 280: {132, 232, 206, 83, 20, 255}, 281: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 282: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 283: {2, 6, 134, 136, 137, 10, 142, 152, 281, 287, 161, 166, 175, 177, 181, 54, 56, 57, 186, 63, 65, 66, 194, 196, 71, 200, 73, 77, 207, 209, 214, 219, 226, 234, 236, 238, 115, 243, 245, 247, 122, 126}, 284: {144, 156}})
Equivalent! frozenset({73, 66}) {81, 74}
Equivalent! frozenset({74, 67}) {82, 75}
Equivalent! frozenset({75, 68}) {83, 76}
Equivalent! frozenset({144, 156}) {120, 284}
Equivalent! frozenset({200, 226, 126}) {274, 195, 172}
Equivalent! frozenset({201, 227, 127}) {275, 196, 173}
Equivalent! frozenset({130, 204, 230}) {176, 278, 199}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25a9e2e400>, {0: {0}, 1: {108}, 2: {222}, 3: set(), 4: {217}, 5: {233}, 6: {52}, 7: {53}, 8: {109}, 9: {218}, 10: {62}, 11: {117}, 12: {5}, 13: {1}, 14: {2}, 15: {3}, 16: {4}, 17: {6}, 18: {7}, 19: {8}, 20: {9}, 21: {10}, 22: {11}, 23: {12}, 24: {13}, 25: {14}, 26: {15}, 27: {16}, 28: {17}, 29: {18}, 30: {19}, 31: {20}, 32: {21}, 33: {22}, 34: {23}, 35: {24}, 36: {25}, 37: {26}, 38: {27}, 39: {28}, 40: {29}, 41: {30}, 42: {31}, 43: {32}, 44: {33}, 45: {34}, 46: {35}, 47: {36}, 48: {37}, 49: {38}, 50: {39}, 51: {40}, 52: {41}, 53: {42}, 54: {43}, 55: {44}, 56: {45}, 57: {46}, 58: {47}, 59: {48}, 60: {49}, 61: {50}, 62: {51}, 63: {54}, 64: {55}, 65: {56}, 66: {137, 177, 57}, 67: {178, 58, 138}, 68: {59, 139, 179}, 69: {60}, 70: {61}, 71: {63}, 72: {64}, 73: {65}, 74: {66}, 75: {67}, 76: {68}, 77: {69}, 78: {70}, 79: {71}, 80: {72}, 81: {73}, 82: {74}, 83: {75}, 84: {76}, 85: {77}, 86: {78}, 87: {79}, 88: {80}, 89: {81}, 90: {82}, 91: {83}, 92: {84}, 93: {85}, 94: {86}, 95: {87}, 96: {88}, 97: {89}, 98: {90}, 99: {91}, 100: {92}, 101: {93}, 102: {94}, 103: {95}, 104: {96}, 105: {97}, 106: {98}, 107: {99}, 108: {100}, 109: {101}, 110: {102}, 111: {103}, 112: {104}, 113: {105}, 114: {106}, 115: {107}, 116: {110}, 117: set(), 118: set(), 119: {168, 145, 116, 246, 188}, 120: {144}, 121: set(), 122: set(), 123: set(), 124: set(), 125: {160}, 126: set(), 127: set(), 128: set(), 129: set(), 130: set(), 131: set(), 132: set(), 133: {161}, 134: {162}, 135: set(), 136: set(), 137: {165}, 138: {166}, 139: {167}, 140: {168}, 141: {123}, 142: {170}, 143: set(), 144: set(), 145: {173}, 146: {174}, 147: {175}, 148: {176}, 149: {137, 177, 57}, 150: {178, 58, 138}, 151: {59, 139, 179}, 152: {180}, 153: {181}, 154: {182}, 155: {183}, 156: {184}, 157: {185}, 158: {186}, 159: {187}, 160: {188}, 161: {189}, 162: {190}, 163: {191}, 164: {192}, 165: {193}, 166: set(), 167: set(), 168: {196}, 169: set(), 170: {198}, 171: {199}, 172: {126}, 173: {127}, 174: {202}, 175: {203}, 176: {130}, 177: {205}, 178: {206}, 179: {207}, 180: {123}, 181: {209}, 182: {210}, 183: {211}, 184: {212}, 185: {213}, 186: {214}, 187: {215}, 188: {216}, 189: set(), 190: set(), 191: set(), 192: {223}, 193: {224}, 194: {225}, 195: {226}, 196: {227}, 197: {228}, 198: {229}, 199: {230}, 200: {231}, 201: {232}, 202: {152, 234}, 203: {235, 221}, 204: set(), 205: set(), 206: set(), 207: {153, 239}, 208: {240, 154}, 209: set(), 210: set(), 211: {243}, 212: {244}, 213: {245}, 214: {246}, 215: {247}, 216: {248}, 217: {249}, 218: {250}, 219: {251}, 220: {252}, 221: {253}, 222: {254}, 223: {255}, 224: {256}, 225: {257}, 226: {258}, 227: {259}, 228: {260}, 229: {261}, 230: {262}, 231: {263}, 232: {264}, 233: {265}, 234: {266}, 235: {267}, 236: {268}, 237: {269}, 238: {270}, 239: {271}, 240: {272}, 241: {273}, 242: {274}, 243: {275}, 244: {276}, 245: {277}, 246: {278}, 247: {279}, 248: {280}, 249: {281}, 250: {282}, 251: {283}, 252: {284}, 253: {285}, 254: {286}, 255: {287}, 256: {288}, 257: {289}, 258: {290}, 259: {291}, 260: {111}, 261: {112}, 262: {113}, 263: {114}, 264: {115}, 265: {116}, 266: {118}, 267: {148, 119}, 268: {120, 149}, 269: {121}, 270: {122}, 271: {123}, 272: {124}, 273: {125}, 274: {200}, 275: {201}, 276: {128}, 277: {129}, 278: {204}, 279: {131}, 280: {132}, 281: set(), 282: set(), 283: set(), 284: {156}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
NO MATCH 3
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 load load
EXACT 15 add add
EXACT 16 store store
EXACT 17 load load
EXACT 18 add add
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 load load
EXACT 22 store store
EXACT 23 add add
EXACT 24 store store
EXACT 25 icmp icmp
EXACT 26 zext zext
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 tail tail
EXACT 32 trunc trunc
EXACT 33 and and
EXACT 34 xor xor
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 xor xor
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 trunc trunc
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 lshr lshr
EXACT 52 xor xor
EXACT 53 add add
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 add add
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
MORE 66 POT: 3
MORE 67 POT: 3
MORE 68 POT: 3
EXACT 69 inttoptr inttoptr
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
EXACT 74 load load
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
EXACT 81 load load
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 load load
EXACT 86 add add
EXACT 87 icmp icmp
EXACT 88 zext zext
EXACT 89 store store
EXACT 90 and and
EXACT 91 tail tail
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 xor xor
EXACT 95 store store
EXACT 96 xor xor
EXACT 97 lshr lshr
EXACT 98 trunc trunc
EXACT 99 and and
EXACT 100 store store
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 lshr lshr
EXACT 105 trunc trunc
EXACT 106 store store
EXACT 107 lshr lshr
EXACT 108 xor xor
EXACT 109 add add
EXACT 110 icmp icmp
EXACT 111 zext zext
EXACT 112 store store
EXACT 113 select select
EXACT 114 add add
EXACT 115 store store
EXACT 116 br br
NO MATCH 117
NO MATCH 118
MORE 119 POT: 5
EXACT 120 br br
NO MATCH 121
NO MATCH 122
NO MATCH 123
NO MATCH 124
EXACT 125 phi phi
NO MATCH 126
NO MATCH 127
NO MATCH 128
NO MATCH 129
NO MATCH 130
NO MATCH 131
NO MATCH 132
EXACT 133 load load
EXACT 134 add add
NO MATCH 135
NO MATCH 136
EXACT 137 inttoptr inttoptr
EXACT 138 load load
EXACT 139 zext zext
EXACT 140 store store
EXACT 141 store store
EXACT 142 add add
NO MATCH 143
NO MATCH 144
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 load load
EXACT 148 add add
MORE 149 POT: 3
MORE 150 POT: 3
MORE 151 POT: 3
EXACT 152 inttoptr inttoptr
EXACT 153 load load
EXACT 154 zext zext
EXACT 155 store store
EXACT 156 add add
EXACT 157 store store
EXACT 158 load load
EXACT 159 zext zext
EXACT 160 store store
EXACT 161 add add
EXACT 162 add add
EXACT 163 store store
EXACT 164 inttoptr inttoptr
EXACT 165 store store
NO MATCH 166
NO MATCH 167
EXACT 168 load load
NO MATCH 169
EXACT 170 add add
EXACT 171 add add
EXACT 172 load load
EXACT 173 add add
EXACT 174 inttoptr inttoptr
EXACT 175 store store
EXACT 176 store store
EXACT 177 store store
EXACT 178 tail tail
EXACT 179 load load
EXACT 180 store store
EXACT 181 load load
EXACT 182 add add
EXACT 183 add add
EXACT 184 store store
EXACT 185 inttoptr inttoptr
EXACT 186 load load
EXACT 187 zext zext
EXACT 188 store store
NO MATCH 189
NO MATCH 190
NO MATCH 191
EXACT 192 store store
EXACT 193 add add
EXACT 194 add add
EXACT 195 load load
EXACT 196 add add
EXACT 197 inttoptr inttoptr
EXACT 198 store store
EXACT 199 store store
EXACT 200 store store
EXACT 201 tail tail
MORE 202 POT: 2
MORE 203 POT: 2
NO MATCH 204
NO MATCH 205
NO MATCH 206
MORE 207 POT: 2
MORE 208 POT: 2
NO MATCH 209
NO MATCH 210
EXACT 211 load load
EXACT 212 zext zext
EXACT 213 load load
EXACT 214 store store
EXACT 215 load load
EXACT 216 add add
EXACT 217 store store
EXACT 218 icmp icmp
EXACT 219 zext zext
EXACT 220 store store
EXACT 221 trunc trunc
EXACT 222 and and
EXACT 223 tail tail
EXACT 224 trunc trunc
EXACT 225 and and
EXACT 226 xor xor
EXACT 227 store store
EXACT 228 xor xor
EXACT 229 lshr lshr
EXACT 230 trunc trunc
EXACT 231 and and
EXACT 232 store store
EXACT 233 icmp icmp
EXACT 234 zext zext
EXACT 235 store store
EXACT 236 lshr lshr
EXACT 237 trunc trunc
EXACT 238 store store
EXACT 239 lshr lshr
EXACT 240 xor xor
EXACT 241 add add
EXACT 242 icmp icmp
EXACT 243 zext zext
EXACT 244 store store
EXACT 245 add add
EXACT 246 store store
EXACT 247 add add
EXACT 248 inttoptr inttoptr
EXACT 249 load load
EXACT 250 store store
EXACT 251 store store
EXACT 252 add add
EXACT 253 store store
EXACT 254 inttoptr inttoptr
EXACT 255 load load
EXACT 256 store store
EXACT 257 add add
EXACT 258 store store
EXACT 259 ret ret
EXACT 260 add add
EXACT 261 add add
EXACT 262 store store
EXACT 263 inttoptr inttoptr
EXACT 264 load load
EXACT 265 store store
EXACT 266 add add
MORE 267 POT: 2
MORE 268 POT: 2
EXACT 269 inttoptr inttoptr
EXACT 270 load load
EXACT 271 store store
EXACT 272 add add
EXACT 273 add add
EXACT 274 load load
EXACT 275 add add
EXACT 276 inttoptr inttoptr
EXACT 277 store store
EXACT 278 store store
EXACT 279 store store
EXACT 280 tail tail
NO MATCH 281
NO MATCH 282
NO MATCH 283
EXACT 284 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI.i64, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %3, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %14, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64)', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %21, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %26, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %29, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %32, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %38, align 1', '%.v = select i1 %73, i64 10, i64 31', '%82 = add i64 %57, %.v', 'store i64 %82, i64* %3, align 8', '%84 = add i64 %55, -16', '%85 = add i64 %82, 4', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %84 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %RAX.i46, align 8', '%88 = add i64 %87, 8', '%89 = add i64 %82, 8', 'store i64 %89, i64* %3, align 8', '%90 = inttoptr i64 %88 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %RDI.i56, align 8', '%92 = add i64 %82, -416', '%93 = add i64 %82, 13', '%94 = load i64, i64* %6, align 8', '%95 = add i64 %94, -8', '%96 = inttoptr i64 %95 to i64*', 'store i64 %93, i64* %96, align 8', 'store i64 %95, i64* %6, align 8', 'store i64 %92, i64* %3, align 8', '%107 = add i64 %82, 8', 'store i64 %107, i64* %3, align 8', 'store i64 %110, i64* %3, align 8', '%111 = load i64, i64* %RBP.i, align 8', '%112 = add i64 %111, -24', '%114 = inttoptr i64 %112 to i32*', '%115 = load i32, i32* %114, align 4', '%116 = zext i32 %115 to i64', 'store i64 %116, i64* %RAX.i46, align 8', '%117 = add i64 %111, -20', '%119 = inttoptr i64 %117 to i32*', 'store i32 %115, i32* %119, align 4', '%120 = load i64, i64* %RBP.i, align 8', '%121 = add i64 %120, -20', '%124 = inttoptr i64 %121 to i32*', '%125 = load i32, i32* %124, align 4', '%126 = zext i32 %125 to i64', 'store i64 %126, i64* %RSI.i64, align 8', '%127 = add i64 %122, 6', 'store i64 %127, i64* %3, align 8', '%128 = load i32, i32* %124, align 4', '%129 = zext i32 %128 to i64', 'store i64 %129, i64* %RAX.i46, align 8', '%130 = add i64 %120, -28', '%131 = add i64 %122, 9', 'store i64 %131, i64* %3, align 8', '%132 = inttoptr i64 %130 to i32*', 'store i32 %125, i32* %132, align 4', '%137 = add i64 %135, 7', '%138 = load i64, i64* %6, align 8', '%139 = add i64 %138, -8', '%140 = inttoptr i64 %139 to i64*', 'store i64 %137, i64* %140, align 8', 'store i64 %139, i64* %6, align 8', 'store i64 %136, i64* %3, align 8', '%141 = load i64, i64* %3, align 8', '%142 = load i64, i64* %RBP.i, align 8', '%143 = add i64 %142, -28', '%144 = add i64 %141, 13', 'store i64 %144, i64* %3, align 8', '%145 = inttoptr i64 %143 to i32*', '%146 = load i32, i32* %145, align 4', '%147 = zext i32 %146 to i64', 'store i64 %147, i64* %RSI.i64, align 8', '%AL.i = bitcast %union.anon* %83 to i8*', 'store i8 0, i8* %AL.i, align 1', '%151 = add i64 %141, -493', '%152 = add i64 %141, 22', '%153 = load i64, i64* %6, align 8', '%154 = add i64 %153, -8', '%155 = inttoptr i64 %154 to i64*', 'store i64 %152, i64* %155, align 8', 'store i64 %154, i64* %6, align 8', 'store i64 %151, i64* %3, align 8', '%EDX.i9 = bitcast %union.anon* %148 to i32*', '%157 = load i64, i64* %3, align 8', '%161 = add i64 %157, 5', 'store i64 %161, i64* %3, align 8', '%163 = load i32, i32* %EDX.i9, align 4', '%164 = zext i32 %163 to i64', '%165 = load i64, i64* %3, align 8', 'store i64 %164, i64* %RAX.i46, align 8', '%166 = load i64, i64* %6, align 8', '%167 = add i64 %166, 32', 'store i64 %167, i64* %6, align 8', '%168 = icmp ugt i64 %166, -33', '%169 = zext i1 %168 to i8', 'store i8 %169, i8* %14, align 1', '%170 = trunc i64 %167 to i32', '%171 = and i32 %170, 255', '%172 = tail call i32 @llvm.ctpop.i32(i32 %171)', '%173 = trunc i32 %172 to i8', '%174 = and i8 %173, 1', '%175 = xor i8 %174, 1', 'store i8 %175, i8* %21, align 1', '%176 = xor i64 %167, %166', '%177 = lshr i64 %176, 4', '%178 = trunc i64 %177 to i8', '%179 = and i8 %178, 1', 'store i8 %179, i8* %26, align 1', '%180 = icmp eq i64 %167, 0', '%181 = zext i1 %180 to i8', 'store i8 %181, i8* %29, align 1', '%182 = lshr i64 %167, 63', '%183 = trunc i64 %182 to i8', 'store i8 %183, i8* %32, align 1', '%184 = lshr i64 %166, 63', '%185 = xor i64 %182, %184', '%186 = add nuw nsw i64 %185, %182', '%187 = icmp eq i64 %186, 2', '%188 = zext i1 %187 to i8', 'store i8 %188, i8* %38, align 1', '%189 = add i64 %165, 7', 'store i64 %189, i64* %3, align 8', '%190 = add i64 %166, 40', '%191 = inttoptr i64 %167 to i64*', '%192 = load i64, i64* %191, align 8', 'store i64 %192, i64* %RBP.i, align 8', 'store i64 %190, i64* %6, align 8', '%193 = add i64 %165, 8', 'store i64 %193, i64* %3, align 8', '%194 = inttoptr i64 %190 to i64*', '%195 = load i64, i64* %194, align 8', 'store i64 %195, i64* %3, align 8', '%196 = add i64 %166, 48', 'store i64 %196, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = add i64 %10, 14
Found line to remove! store i64 %40, i64* %3, align 8
Found line to remove! %41 = inttoptr i64 %39 to i32*
Found line to remove! store i32 0, i32* %41, align 4
Keep: %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %42 to i32*
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI.i, align 4
Keep: %46 = load i64, i64* %3, align 8
Keep: %47 = add i64 %46, 3
Keep: store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Keep: %RSI.i64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI.i64, align 8
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %RBP.i, align 8
Keep: %56 = add i64 %55, -8
Found line to remove! %57 = load i64, i64* %3, align 8
Found line to remove! %58 = add i64 %57, 4
Found line to remove! store i64 %58, i64* %3, align 8
Keep: %59 = inttoptr i64 %56 to i32*
Keep: %60 = load i32, i32* %59, align 4
Keep: %61 = add i32 %60, -2
Found line to remove! %62 = icmp ult i32 %60, 2
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %14, align 1
Found line to remove! %64 = and i32 %61, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %21, align 1
Found line to remove! %69 = xor i32 %61, %60
Found line to remove! %70 = lshr i32 %69, 4
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! store i8 %72, i8* %26, align 1
Keep: %73 = icmp eq i32 %61, 0
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %29, align 1
Found line to remove! %75 = lshr i32 %61, 31
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! store i8 %76, i8* %32, align 1
Found line to remove! %77 = lshr i32 %60, 31
Found line to remove! %78 = xor i32 %75, %77
Found line to remove! %79 = add nuw nsw i32 %78, %77
Found line to remove! %80 = icmp eq i32 %79, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %38, align 1
Found line to remove! %.v = select i1 %73, i64 10, i64 31
Found line to remove! %82 = add i64 %57, %.v
Found line to remove! store i64 %82, i64* %3, align 8
Keep: %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
Keep: br i1 %73, label %block_400600, label %block_.L_400615
Keep: 
Keep: block_400600:                                     ; preds = %entry
Found line to remove! %84 = add i64 %55, -16
Found line to remove! %85 = add i64 %82, 4
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! %86 = inttoptr i64 %84 to i64*
Found line to remove! %87 = load i64, i64* %86, align 8
Found line to remove! store i64 %87, i64* %RAX.i46, align 8
Keep: %RDI.i56 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Found line to remove! %88 = add i64 %87, 8
Found line to remove! %89 = add i64 %82, 8
Found line to remove! store i64 %89, i64* %3, align 8
Found line to remove! %90 = inttoptr i64 %88 to i64*
Found line to remove! %91 = load i64, i64* %90, align 8
Found line to remove! store i64 %91, i64* %RDI.i56, align 8
Found line to remove! %92 = add i64 %82, -416
Found line to remove! %93 = add i64 %82, 13
Found line to remove! %94 = load i64, i64* %6, align 8
Found line to remove! %95 = add i64 %94, -8
Found line to remove! %96 = inttoptr i64 %95 to i64*
Found line to remove! store i64 %93, i64* %96, align 8
Found line to remove! store i64 %95, i64* %6, align 8
Found line to remove! store i64 %92, i64* %3, align 8
Keep: %97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i49 = bitcast %union.anon* %83 to i32*
Keep: %98 = load i64, i64* %RBP.i, align 8
Keep: %99 = add i64 %98, -24
Keep: %100 = load i32, i32* %EAX.i49, align 4
Keep: %101 = load i64, i64* %3, align 8
Keep: %102 = add i64 %101, 3
Keep: store i64 %102, i64* %3, align 8
Keep: %103 = inttoptr i64 %99 to i32*
Keep: store i32 %100, i32* %103, align 4
Keep: %104 = load i64, i64* %3, align 8
Keep: %105 = add i64 %104, 18
Keep: br label %block_.L_400622
Keep: 
Keep: block_.L_400615:                                  ; preds = %entry
Keep: store i64 8, i64* %RAX.i46, align 8
Keep: %EAX.i43 = bitcast %union.anon* %83 to i32*
Keep: %106 = add i64 %55, -24
Found line to remove! %107 = add i64 %82, 8
Found line to remove! store i64 %107, i64* %3, align 8
Keep: %108 = inttoptr i64 %106 to i32*
Keep: store i32 8, i32* %108, align 4
Keep: %109 = load i64, i64* %3, align 8
Keep: %110 = add i64 %109, 5
Found line to remove! store i64 %110, i64* %3, align 8
Keep: %.pre = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Keep: br label %block_.L_400622
Keep: 
Keep: block_.L_400622:                                  ; preds = %block_.L_400615, %block_400600
Keep: %EAX.i34.pre-phi = phi i32* [ %EAX.i43, %block_.L_400615 ], [ %EAX.i49, %block_400600 ]
Keep: %RDI.i37.pre-phi = phi i64* [ %.pre, %block_.L_400615 ], [ %RDI.i56, %block_400600 ]
Keep: %storemerge = phi i64 [ %110, %block_.L_400615 ], [ %105, %block_400600 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_400615 ], [ %97, %block_400600 ]
Found line to remove! %111 = load i64, i64* %RBP.i, align 8
Found line to remove! %112 = add i64 %111, -24
Keep: %113 = add i64 %storemerge, 3
Keep: store i64 %113, i64* %3, align 8
Found line to remove! %114 = inttoptr i64 %112 to i32*
Found line to remove! %115 = load i32, i32* %114, align 4
Found line to remove! %116 = zext i32 %115 to i64
Found line to remove! store i64 %116, i64* %RAX.i46, align 8
Keep: store i64 3, i64* %RDI.i37.pre-phi, align 8
Found line to remove! %117 = add i64 %111, -20
Keep: %118 = add i64 %storemerge, 11
Keep: store i64 %118, i64* %3, align 8
Found line to remove! %119 = inttoptr i64 %117 to i32*
Found line to remove! store i32 %115, i32* %119, align 4
Found line to remove! %120 = load i64, i64* %RBP.i, align 8
Found line to remove! %121 = add i64 %120, -20
Keep: %122 = load i64, i64* %3, align 8
Keep: %123 = add i64 %122, 3
Keep: store i64 %123, i64* %3, align 8
Found line to remove! %124 = inttoptr i64 %121 to i32*
Found line to remove! %125 = load i32, i32* %124, align 4
Found line to remove! %126 = zext i32 %125 to i64
Found line to remove! store i64 %126, i64* %RSI.i64, align 8
Found line to remove! %127 = add i64 %122, 6
Found line to remove! store i64 %127, i64* %3, align 8
Found line to remove! %128 = load i32, i32* %124, align 4
Found line to remove! %129 = zext i32 %128 to i64
Found line to remove! store i64 %129, i64* %RAX.i46, align 8
Found line to remove! %130 = add i64 %120, -28
Found line to remove! %131 = add i64 %122, 9
Found line to remove! store i64 %131, i64* %3, align 8
Found line to remove! %132 = inttoptr i64 %130 to i32*
Found line to remove! store i32 %125, i32* %132, align 4
Keep: %133 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %134 = zext i32 %133 to i64
Keep: %135 = load i64, i64* %3, align 8
Keep: store i64 %134, i64* %RSI.i64, align 8
Keep: %136 = add i64 %135, -214
Found line to remove! %137 = add i64 %135, 7
Found line to remove! %138 = load i64, i64* %6, align 8
Found line to remove! %139 = add i64 %138, -8
Found line to remove! %140 = inttoptr i64 %139 to i64*
Found line to remove! store i64 %137, i64* %140, align 8
Found line to remove! store i64 %139, i64* %6, align 8
Found line to remove! store i64 %136, i64* %3, align 8
Keep: %call2_400638 = tail call %struct.Memory* @sub_400560.Ack(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
Found line to remove! %141 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x4006e4_type* @G__0x4006e4 to i64), i64* %RDI.i37.pre-phi, align 8
Found line to remove! %142 = load i64, i64* %RBP.i, align 8
Found line to remove! %143 = add i64 %142, -28
Found line to remove! %144 = add i64 %141, 13
Found line to remove! store i64 %144, i64* %3, align 8
Found line to remove! %145 = inttoptr i64 %143 to i32*
Found line to remove! %146 = load i32, i32* %145, align 4
Found line to remove! %147 = zext i32 %146 to i64
Found line to remove! store i64 %147, i64* %RSI.i64, align 8
Keep: %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Keep: %RDX.i17 = getelementptr inbounds %union.anon, %union.anon* %148, i64 0, i32 0
Keep: %149 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %150 = zext i32 %149 to i64
Keep: store i64 %150, i64* %RDX.i17, align 8
Found line to remove! %AL.i = bitcast %union.anon* %83 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %151 = add i64 %141, -493
Found line to remove! %152 = add i64 %141, 22
Found line to remove! %153 = load i64, i64* %6, align 8
Found line to remove! %154 = add i64 %153, -8
Found line to remove! %155 = inttoptr i64 %154 to i64*
Found line to remove! store i64 %152, i64* %155, align 8
Found line to remove! store i64 %154, i64* %6, align 8
Found line to remove! store i64 %151, i64* %3, align 8
Keep: %156 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400638)
Found line to remove! %EDX.i9 = bitcast %union.anon* %148 to i32*
Found line to remove! %157 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RDX.i17, align 8
Keep: %158 = load i64, i64* %RBP.i, align 8
Keep: %159 = add i64 %158, -32
Keep: %160 = load i32, i32* %EAX.i34.pre-phi, align 4
Found line to remove! %161 = add i64 %157, 5
Found line to remove! store i64 %161, i64* %3, align 8
Keep: %162 = inttoptr i64 %159 to i32*
Keep: store i32 %160, i32* %162, align 4
Found line to remove! %163 = load i32, i32* %EDX.i9, align 4
Found line to remove! %164 = zext i32 %163 to i64
Found line to remove! %165 = load i64, i64* %3, align 8
Found line to remove! store i64 %164, i64* %RAX.i46, align 8
Found line to remove! %166 = load i64, i64* %6, align 8
Found line to remove! %167 = add i64 %166, 32
Found line to remove! store i64 %167, i64* %6, align 8
Found line to remove! %168 = icmp ugt i64 %166, -33
Found line to remove! %169 = zext i1 %168 to i8
Found line to remove! store i8 %169, i8* %14, align 1
Found line to remove! %170 = trunc i64 %167 to i32
Found line to remove! %171 = and i32 %170, 255
Found line to remove! %172 = tail call i32 @llvm.ctpop.i32(i32 %171)
Found line to remove! %173 = trunc i32 %172 to i8
Found line to remove! %174 = and i8 %173, 1
Found line to remove! %175 = xor i8 %174, 1
Found line to remove! store i8 %175, i8* %21, align 1
Found line to remove! %176 = xor i64 %167, %166
Found line to remove! %177 = lshr i64 %176, 4
Found line to remove! %178 = trunc i64 %177 to i8
Found line to remove! %179 = and i8 %178, 1
Found line to remove! store i8 %179, i8* %26, align 1
Found line to remove! %180 = icmp eq i64 %167, 0
Found line to remove! %181 = zext i1 %180 to i8
Found line to remove! store i8 %181, i8* %29, align 1
Found line to remove! %182 = lshr i64 %167, 63
Found line to remove! %183 = trunc i64 %182 to i8
Found line to remove! store i8 %183, i8* %32, align 1
Found line to remove! %184 = lshr i64 %166, 63
Found line to remove! %185 = xor i64 %182, %184
Found line to remove! %186 = add nuw nsw i64 %185, %182
Found line to remove! %187 = icmp eq i64 %186, 2
Found line to remove! %188 = zext i1 %187 to i8
Found line to remove! store i8 %188, i8* %38, align 1
Found line to remove! %189 = add i64 %165, 7
Found line to remove! store i64 %189, i64* %3, align 8
Found line to remove! %190 = add i64 %166, 40
Found line to remove! %191 = inttoptr i64 %167 to i64*
Found line to remove! %192 = load i64, i64* %191, align 8
Found line to remove! store i64 %192, i64* %RBP.i, align 8
Found line to remove! store i64 %190, i64* %6, align 8
Found line to remove! %193 = add i64 %165, 8
Found line to remove! store i64 %193, i64* %3, align 8
Found line to remove! %194 = inttoptr i64 %190 to i64*
Found line to remove! %195 = load i64, i64* %194, align 8
Found line to remove! store i64 %195, i64* %3, align 8
Found line to remove! %196 = add i64 %166, 48
Found line to remove! store i64 %196, i64* %6, align 8
Keep: ret %struct.Memory* %156
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI.i64, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %3, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %14, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64)', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %21, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %26, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %29, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %32, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %38, align 1', '%.v = select i1 %73, i64 10, i64 31', '%82 = add i64 %57, %.v', 'store i64 %82, i64* %3, align 8', '%84 = add i64 %55, -16', '%85 = add i64 %82, 4', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %84 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %RAX.i46, align 8', '%88 = add i64 %87, 8', '%89 = add i64 %82, 8', 'store i64 %89, i64* %3, align 8', '%90 = inttoptr i64 %88 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %RDI.i56, align 8', '%92 = add i64 %82, -416', '%93 = add i64 %82, 13', '%94 = load i64, i64* %6, align 8', '%95 = add i64 %94, -8', '%96 = inttoptr i64 %95 to i64*', 'store i64 %93, i64* %96, align 8', 'store i64 %95, i64* %6, align 8', 'store i64 %92, i64* %3, align 8', '%107 = add i64 %82, 8', 'store i64 %107, i64* %3, align 8', 'store i64 %110, i64* %3, align 8', '%111 = load i64, i64* %RBP.i, align 8', '%112 = add i64 %111, -24', '%114 = inttoptr i64 %112 to i32*', '%115 = load i32, i32* %114, align 4', '%116 = zext i32 %115 to i64', 'store i64 %116, i64* %RAX.i46, align 8', '%117 = add i64 %111, -20', '%119 = inttoptr i64 %117 to i32*', 'store i32 %115, i32* %119, align 4', '%120 = load i64, i64* %RBP.i, align 8', '%121 = add i64 %120, -20', '%124 = inttoptr i64 %121 to i32*', '%125 = load i32, i32* %124, align 4', '%126 = zext i32 %125 to i64', 'store i64 %126, i64* %RSI.i64, align 8', '%127 = add i64 %122, 6', 'store i64 %127, i64* %3, align 8', '%128 = load i32, i32* %124, align 4', '%129 = zext i32 %128 to i64', 'store i64 %129, i64* %RAX.i46, align 8', '%130 = add i64 %120, -28', '%131 = add i64 %122, 9', 'store i64 %131, i64* %3, align 8', '%132 = inttoptr i64 %130 to i32*', 'store i32 %125, i32* %132, align 4', '%137 = add i64 %135, 7', '%138 = load i64, i64* %6, align 8', '%139 = add i64 %138, -8', '%140 = inttoptr i64 %139 to i64*', 'store i64 %137, i64* %140, align 8', 'store i64 %139, i64* %6, align 8', 'store i64 %136, i64* %3, align 8', '%141 = load i64, i64* %3, align 8', '%142 = load i64, i64* %RBP.i, align 8', '%143 = add i64 %142, -28', '%144 = add i64 %141, 13', 'store i64 %144, i64* %3, align 8', '%145 = inttoptr i64 %143 to i32*', '%146 = load i32, i32* %145, align 4', '%147 = zext i32 %146 to i64', 'store i64 %147, i64* %RSI.i64, align 8', '%AL.i = bitcast %union.anon* %83 to i8*', 'store i8 0, i8* %AL.i, align 1', '%151 = add i64 %141, -493', '%152 = add i64 %141, 22', '%153 = load i64, i64* %6, align 8', '%154 = add i64 %153, -8', '%155 = inttoptr i64 %154 to i64*', 'store i64 %152, i64* %155, align 8', 'store i64 %154, i64* %6, align 8', 'store i64 %151, i64* %3, align 8', '%EDX.i9 = bitcast %union.anon* %148 to i32*', '%157 = load i64, i64* %3, align 8', '%161 = add i64 %157, 5', 'store i64 %161, i64* %3, align 8', '%163 = load i32, i32* %EDX.i9, align 4', '%164 = zext i32 %163 to i64', '%165 = load i64, i64* %3, align 8', 'store i64 %164, i64* %RAX.i46, align 8', '%166 = load i64, i64* %6, align 8', '%167 = add i64 %166, 32', 'store i64 %167, i64* %6, align 8', '%168 = icmp ugt i64 %166, -33', '%169 = zext i1 %168 to i8', 'store i8 %169, i8* %14, align 1', '%170 = trunc i64 %167 to i32', '%171 = and i32 %170, 255', '%172 = tail call i32 @llvm.ctpop.i32(i32 %171)', '%173 = trunc i32 %172 to i8', '%174 = and i8 %173, 1', '%175 = xor i8 %174, 1', 'store i8 %175, i8* %21, align 1', '%176 = xor i64 %167, %166', '%177 = lshr i64 %176, 4', '%178 = trunc i64 %177 to i8', '%179 = and i8 %178, 1', 'store i8 %179, i8* %26, align 1', '%180 = icmp eq i64 %167, 0', '%181 = zext i1 %180 to i8', 'store i8 %181, i8* %29, align 1', '%182 = lshr i64 %167, 63', '%183 = trunc i64 %182 to i8', 'store i8 %183, i8* %32, align 1', '%184 = lshr i64 %166, 63', '%185 = xor i64 %182, %184', '%186 = add nuw nsw i64 %185, %182', '%187 = icmp eq i64 %186, 2', '%188 = zext i1 %187 to i8', 'store i8 %188, i8* %38, align 1', '%189 = add i64 %165, 7', 'store i64 %189, i64* %3, align 8', '%190 = add i64 %166, 40', '%191 = inttoptr i64 %167 to i64*', '%192 = load i64, i64* %191, align 8', 'store i64 %192, i64* %RBP.i, align 8', 'store i64 %190, i64* %6, align 8', '%193 = add i64 %165, 8', 'store i64 %193, i64* %3, align 8', '%194 = inttoptr i64 %190 to i64*', '%195 = load i64, i64* %194, align 8', 'store i64 %195, i64* %3, align 8', '%196 = add i64 %166, 48', 'store i64 %196, i64* %6, align 8'])
TO REMOVE: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%EDX = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %5 to i32*', '%RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %15, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %22, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %27, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %30, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %33, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %39, align 1', 'store i64 %82, i64* %PC, align 8', '%89 = load i64, i64* %RBP, align 8', '%90 = add i64 %89, -24', '%92 = inttoptr i64 %90 to i32*', '%93 = load i32, i32* %92, align 4', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RAX, align 8', 'store i64 3, i64* %RDI, align 8', '%95 = add i64 %89, -20', '%97 = inttoptr i64 %95 to i32*', 'store i32 %93, i32* %97, align 4', '%98 = load i64, i64* %RBP, align 8', '%99 = add i64 %98, -20', '%102 = inttoptr i64 %99 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = zext i32 %103 to i64', 'store i64 %104, i64* %RSI, align 8', '%105 = add i64 %100, 6', 'store i64 %105, i64* %PC, align 8', '%106 = load i32, i32* %102, align 4', '%107 = zext i32 %106 to i64', 'store i64 %107, i64* %RAX, align 8', '%108 = add i64 %98, -28', '%109 = add i64 %100, 9', 'store i64 %109, i64* %PC, align 8', '%110 = inttoptr i64 %108 to i32*', 'store i32 %103, i32* %110, align 4', '%115 = add i64 %113, 7', '%116 = load i64, i64* %RSP, align 8', '%117 = add i64 %116, -8', '%118 = inttoptr i64 %117 to i64*', 'store i64 %115, i64* %118, align 8', 'store i64 %117, i64* %RSP, align 8', 'store i64 %114, i64* %PC, align 8', '%120 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_4006e0__rodata_type* @seg_4006e0__rodata to i64), i64 4), i64* %RDI, align 8', '%121 = load i64, i64* %RBP, align 8', '%122 = add i64 %121, -28', '%123 = add i64 %120, 13', 'store i64 %123, i64* %PC, align 8', '%124 = inttoptr i64 %122 to i32*', '%125 = load i32, i32* %124, align 4', '%126 = zext i32 %125 to i64', 'store i64 %126, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%129 = add i64 %120, -493', '%130 = add i64 %120, 22', '%131 = load i64, i64* %RSP, align 8', '%132 = add i64 %131, -8', '%133 = inttoptr i64 %132 to i64*', 'store i64 %130, i64* %133, align 8', 'store i64 %132, i64* %RSP, align 8', 'store i64 %129, i64* %PC, align 8', '%141 = load i32, i32* %EDX, align 4', '%142 = zext i32 %141 to i64', '%143 = load i64, i64* %PC, align 8', 'store i64 %142, i64* %RAX, align 8', '%144 = load i64, i64* %RSP, align 8', '%145 = add i64 %144, 32', 'store i64 %145, i64* %RSP, align 8', '%146 = icmp ugt i64 %144, -33', '%147 = zext i1 %146 to i8', 'store i8 %147, i8* %15, align 1', '%148 = trunc i64 %145 to i32', '%149 = and i32 %148, 255', '%150 = tail call i32 @llvm.ctpop.i32(i32 %149) #12', '%151 = trunc i32 %150 to i8', '%152 = and i8 %151, 1', '%153 = xor i8 %152, 1', 'store i8 %153, i8* %22, align 1', '%154 = xor i64 %145, %144', '%155 = lshr i64 %154, 4', '%156 = trunc i64 %155 to i8', '%157 = and i8 %156, 1', 'store i8 %157, i8* %27, align 1', '%158 = icmp eq i64 %145, 0', '%159 = zext i1 %158 to i8', 'store i8 %159, i8* %30, align 1', '%160 = lshr i64 %145, 63', '%161 = trunc i64 %160 to i8', 'store i8 %161, i8* %33, align 1', '%162 = lshr i64 %144, 63', '%163 = xor i64 %160, %162', '%164 = add nuw nsw i64 %163, %160', '%165 = icmp eq i64 %164, 2', '%166 = zext i1 %165 to i8', 'store i8 %166, i8* %39, align 1', '%167 = add i64 %143, 7', 'store i64 %167, i64* %PC, align 8', '%168 = add i64 %144, 40', '%169 = inttoptr i64 %145 to i64*', '%170 = load i64, i64* %169, align 8', 'store i64 %170, i64* %RBP, align 8', 'store i64 %168, i64* %RSP, align 8', '%171 = add i64 %143, 8', 'store i64 %171, i64* %PC, align 8', '%172 = inttoptr i64 %168 to i64*', '%173 = load i64, i64* %172, align 8', 'store i64 %173, i64* %PC, align 8', '%174 = add i64 %144, 48', 'store i64 %174, i64* %RSP, align 8', '%175 = add i64 %55, -16', '%176 = add i64 %82, 4', 'store i64 %176, i64* %PC, align 8', '%177 = inttoptr i64 %175 to i64*', '%178 = load i64, i64* %177, align 8', 'store i64 %178, i64* %RAX, align 8', '%179 = add i64 %178, 8', '%181 = inttoptr i64 %179 to i64*', '%182 = load i64, i64* %181, align 8', 'store i64 %182, i64* %RDI, align 8', '%183 = add i64 %82, -416', '%184 = add i64 %82, 13', '%185 = load i64, i64* %RSP, align 8', '%186 = add i64 %185, -8', '%187 = inttoptr i64 %186 to i64*', 'store i64 %184, i64* %187, align 8', 'store i64 %186, i64* %RSP, align 8', 'store i64 %183, i64* %PC, align 8'])
Keep: block_4005e0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Keep: %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %EDX = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Keep: %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -12
Found line to remove! %41 = add i64 %11, 14
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Keep: %46 = load i64, i64* %PC, align 8
Keep: %47 = add i64 %46, 3
Keep: store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %RBP, align 8
Keep: %56 = add i64 %55, -8
Keep: %57 = load i64, i64* %PC, align 8
Found line to remove! %58 = add i64 %57, 4
Found line to remove! store i64 %58, i64* %PC, align 8
Keep: %59 = inttoptr i64 %56 to i32*
Keep: %60 = load i32, i32* %59, align 4
Keep: %61 = add i32 %60, -2
Found line to remove! %62 = icmp ult i32 %60, 2
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %15, align 1
Found line to remove! %64 = and i32 %61, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %22, align 1
Found line to remove! %69 = xor i32 %61, %60
Found line to remove! %70 = lshr i32 %69, 4
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! store i8 %72, i8* %27, align 1
Keep: %73 = icmp eq i32 %61, 0
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %30, align 1
Found line to remove! %75 = lshr i32 %61, 31
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! store i8 %76, i8* %33, align 1
Found line to remove! %77 = lshr i32 %60, 31
Found line to remove! %78 = xor i32 %75, %77
Found line to remove! %79 = add nuw nsw i32 %78, %77
Found line to remove! %80 = icmp eq i32 %79, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %39, align 1
Keep: %.v = select i1 %73, i64 10, i64 31
Keep: %82 = add i64 %57, %.v
Found line to remove! store i64 %82, i64* %PC, align 8
Keep: br i1 %73, label %block_400600, label %block_400615
Keep: 
Keep: block_400615:                                     ; preds = %block_4005e0
Keep: %83 = add i64 %82, 5
Keep: store i64 %83, i64* %PC, align 8
Keep: store i64 8, i64* %RAX, align 8
Keep: br label %block_400622
Keep: 
Keep: block_400622:                                     ; preds = %block_400600, %block_400615
Keep: %84 = phi i64 [ %.pre, %block_400600 ], [ %83, %block_400615 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_400600 ], [ %55, %block_400615 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_400600 ], [ 8, %block_400615 ]
Keep: %.sink5 = phi i64 [ 18, %block_400600 ], [ 5, %block_400615 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %188, %block_400600 ], [ %2, %block_400615 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %85 = add i64 %84, 3
Keep: store i64 %85, i64* %PC, align 8
Keep: %86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %86, align 4
Keep: %87 = load i64, i64* %PC, align 8
Keep: %88 = add i64 %87, %.sink5
Found line to remove! %89 = load i64, i64* %RBP, align 8
Found line to remove! %90 = add i64 %89, -24
Keep: %91 = add i64 %88, 3
Keep: store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %90 to i32*
Found line to remove! %93 = load i32, i32* %92, align 4
Found line to remove! %94 = zext i32 %93 to i64
Found line to remove! store i64 %94, i64* %RAX, align 8
Found line to remove! store i64 3, i64* %RDI, align 8
Found line to remove! %95 = add i64 %89, -20
Keep: %96 = add i64 %88, 11
Keep: store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %95 to i32*
Found line to remove! store i32 %93, i32* %97, align 4
Found line to remove! %98 = load i64, i64* %RBP, align 8
Found line to remove! %99 = add i64 %98, -20
Keep: %100 = load i64, i64* %PC, align 8
Keep: %101 = add i64 %100, 3
Keep: store i64 %101, i64* %PC, align 8
Found line to remove! %102 = inttoptr i64 %99 to i32*
Found line to remove! %103 = load i32, i32* %102, align 4
Found line to remove! %104 = zext i32 %103 to i64
Found line to remove! store i64 %104, i64* %RSI, align 8
Found line to remove! %105 = add i64 %100, 6
Found line to remove! store i64 %105, i64* %PC, align 8
Found line to remove! %106 = load i32, i32* %102, align 4
Found line to remove! %107 = zext i32 %106 to i64
Found line to remove! store i64 %107, i64* %RAX, align 8
Found line to remove! %108 = add i64 %98, -28
Found line to remove! %109 = add i64 %100, 9
Found line to remove! store i64 %109, i64* %PC, align 8
Found line to remove! %110 = inttoptr i64 %108 to i32*
Found line to remove! store i32 %103, i32* %110, align 4
Keep: %111 = load i32, i32* %EAX, align 4
Keep: %112 = zext i32 %111 to i64
Keep: %113 = load i64, i64* %PC, align 8
Keep: store i64 %112, i64* %RSI, align 8
Keep: %114 = add i64 %113, -214
Found line to remove! %115 = add i64 %113, 7
Found line to remove! %116 = load i64, i64* %RSP, align 8
Found line to remove! %117 = add i64 %116, -8
Found line to remove! %118 = inttoptr i64 %117 to i64*
Found line to remove! store i64 %115, i64* %118, align 8
Found line to remove! store i64 %117, i64* %RSP, align 8
Found line to remove! store i64 %114, i64* %PC, align 8
Keep: %119 = tail call %struct.Memory* @sub_400560_Ack_renamed_(%struct.State* nonnull %0, i64 %114, %struct.Memory* %MEMORY.0)
Found line to remove! %120 = load i64, i64* %PC, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006e0__rodata_type* @seg_4006e0__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %121 = load i64, i64* %RBP, align 8
Found line to remove! %122 = add i64 %121, -28
Found line to remove! %123 = add i64 %120, 13
Found line to remove! store i64 %123, i64* %PC, align 8
Found line to remove! %124 = inttoptr i64 %122 to i32*
Found line to remove! %125 = load i32, i32* %124, align 4
Found line to remove! %126 = zext i32 %125 to i64
Found line to remove! store i64 %126, i64* %RSI, align 8
Keep: %127 = load i32, i32* %EAX, align 4
Keep: %128 = zext i32 %127 to i64
Keep: store i64 %128, i64* %RDX, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %129 = add i64 %120, -493
Found line to remove! %130 = add i64 %120, 22
Found line to remove! %131 = load i64, i64* %RSP, align 8
Found line to remove! %132 = add i64 %131, -8
Found line to remove! %133 = inttoptr i64 %132 to i64*
Found line to remove! store i64 %130, i64* %133, align 8
Found line to remove! store i64 %132, i64* %RSP, align 8
Found line to remove! store i64 %129, i64* %PC, align 8
Keep: %134 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %119)
Keep: %135 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RDX, align 8
Keep: %136 = load i64, i64* %RBP, align 8
Keep: %137 = add i64 %136, -32
Keep: %138 = load i32, i32* %EAX, align 4
Keep: %139 = add i64 %135, 5
Keep: store i64 %139, i64* %PC, align 8
Keep: %140 = inttoptr i64 %137 to i32*
Keep: store i32 %138, i32* %140, align 4
Found line to remove! %141 = load i32, i32* %EDX, align 4
Found line to remove! %142 = zext i32 %141 to i64
Found line to remove! %143 = load i64, i64* %PC, align 8
Found line to remove! store i64 %142, i64* %RAX, align 8
Found line to remove! %144 = load i64, i64* %RSP, align 8
Found line to remove! %145 = add i64 %144, 32
Found line to remove! store i64 %145, i64* %RSP, align 8
Found line to remove! %146 = icmp ugt i64 %144, -33
Found line to remove! %147 = zext i1 %146 to i8
Found line to remove! store i8 %147, i8* %15, align 1
Found line to remove! %148 = trunc i64 %145 to i32
Found line to remove! %149 = and i32 %148, 255
Found line to remove! %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #12
Found line to remove! %151 = trunc i32 %150 to i8
Found line to remove! %152 = and i8 %151, 1
Found line to remove! %153 = xor i8 %152, 1
Found line to remove! store i8 %153, i8* %22, align 1
Found line to remove! %154 = xor i64 %145, %144
Found line to remove! %155 = lshr i64 %154, 4
Found line to remove! %156 = trunc i64 %155 to i8
Found line to remove! %157 = and i8 %156, 1
Found line to remove! store i8 %157, i8* %27, align 1
Found line to remove! %158 = icmp eq i64 %145, 0
Found line to remove! %159 = zext i1 %158 to i8
Found line to remove! store i8 %159, i8* %30, align 1
Found line to remove! %160 = lshr i64 %145, 63
Found line to remove! %161 = trunc i64 %160 to i8
Found line to remove! store i8 %161, i8* %33, align 1
Found line to remove! %162 = lshr i64 %144, 63
Found line to remove! %163 = xor i64 %160, %162
Found line to remove! %164 = add nuw nsw i64 %163, %160
Found line to remove! %165 = icmp eq i64 %164, 2
Found line to remove! %166 = zext i1 %165 to i8
Found line to remove! store i8 %166, i8* %39, align 1
Found line to remove! %167 = add i64 %143, 7
Found line to remove! store i64 %167, i64* %PC, align 8
Found line to remove! %168 = add i64 %144, 40
Found line to remove! %169 = inttoptr i64 %145 to i64*
Found line to remove! %170 = load i64, i64* %169, align 8
Found line to remove! store i64 %170, i64* %RBP, align 8
Found line to remove! store i64 %168, i64* %RSP, align 8
Found line to remove! %171 = add i64 %143, 8
Found line to remove! store i64 %171, i64* %PC, align 8
Found line to remove! %172 = inttoptr i64 %168 to i64*
Found line to remove! %173 = load i64, i64* %172, align 8
Found line to remove! store i64 %173, i64* %PC, align 8
Found line to remove! %174 = add i64 %144, 48
Found line to remove! store i64 %174, i64* %RSP, align 8
Keep: ret %struct.Memory* %134
Keep: 
Keep: block_400600:                                     ; preds = %block_4005e0
Found line to remove! %175 = add i64 %55, -16
Found line to remove! %176 = add i64 %82, 4
Found line to remove! store i64 %176, i64* %PC, align 8
Found line to remove! %177 = inttoptr i64 %175 to i64*
Found line to remove! %178 = load i64, i64* %177, align 8
Found line to remove! store i64 %178, i64* %RAX, align 8
Found line to remove! %179 = add i64 %178, 8
Keep: %180 = add i64 %82, 8
Keep: store i64 %180, i64* %PC, align 8
Found line to remove! %181 = inttoptr i64 %179 to i64*
Found line to remove! %182 = load i64, i64* %181, align 8
Found line to remove! store i64 %182, i64* %RDI, align 8
Found line to remove! %183 = add i64 %82, -416
Found line to remove! %184 = add i64 %82, 13
Found line to remove! %185 = load i64, i64* %RSP, align 8
Found line to remove! %186 = add i64 %185, -8
Found line to remove! %187 = inttoptr i64 %186 to i64*
Found line to remove! store i64 %184, i64* %187, align 8
Found line to remove! store i64 %186, i64* %RSP, align 8
Found line to remove! store i64 %183, i64* %PC, align 8
Keep: %188 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400622
Missed: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%EDX = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %5 to i32*', '%RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %15, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %22, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %27, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %30, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %33, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %39, align 1', 'store i64 %82, i64* %PC, align 8', '%89 = load i64, i64* %RBP, align 8', '%90 = add i64 %89, -24', '%92 = inttoptr i64 %90 to i32*', '%93 = load i32, i32* %92, align 4', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RAX, align 8', 'store i64 3, i64* %RDI, align 8', '%95 = add i64 %89, -20', '%97 = inttoptr i64 %95 to i32*', 'store i32 %93, i32* %97, align 4', '%98 = load i64, i64* %RBP, align 8', '%99 = add i64 %98, -20', '%102 = inttoptr i64 %99 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = zext i32 %103 to i64', 'store i64 %104, i64* %RSI, align 8', '%105 = add i64 %100, 6', 'store i64 %105, i64* %PC, align 8', '%106 = load i32, i32* %102, align 4', '%107 = zext i32 %106 to i64', 'store i64 %107, i64* %RAX, align 8', '%108 = add i64 %98, -28', '%109 = add i64 %100, 9', 'store i64 %109, i64* %PC, align 8', '%110 = inttoptr i64 %108 to i32*', 'store i32 %103, i32* %110, align 4', '%115 = add i64 %113, 7', '%116 = load i64, i64* %RSP, align 8', '%117 = add i64 %116, -8', '%118 = inttoptr i64 %117 to i64*', 'store i64 %115, i64* %118, align 8', 'store i64 %117, i64* %RSP, align 8', 'store i64 %114, i64* %PC, align 8', '%120 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_4006e0__rodata_type* @seg_4006e0__rodata to i64), i64 4), i64* %RDI, align 8', '%121 = load i64, i64* %RBP, align 8', '%122 = add i64 %121, -28', '%123 = add i64 %120, 13', 'store i64 %123, i64* %PC, align 8', '%124 = inttoptr i64 %122 to i32*', '%125 = load i32, i32* %124, align 4', '%126 = zext i32 %125 to i64', 'store i64 %126, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%129 = add i64 %120, -493', '%130 = add i64 %120, 22', '%131 = load i64, i64* %RSP, align 8', '%132 = add i64 %131, -8', '%133 = inttoptr i64 %132 to i64*', 'store i64 %130, i64* %133, align 8', 'store i64 %132, i64* %RSP, align 8', 'store i64 %129, i64* %PC, align 8', '%141 = load i32, i32* %EDX, align 4', '%142 = zext i32 %141 to i64', '%143 = load i64, i64* %PC, align 8', 'store i64 %142, i64* %RAX, align 8', '%144 = load i64, i64* %RSP, align 8', '%145 = add i64 %144, 32', 'store i64 %145, i64* %RSP, align 8', '%146 = icmp ugt i64 %144, -33', '%147 = zext i1 %146 to i8', 'store i8 %147, i8* %15, align 1', '%148 = trunc i64 %145 to i32', '%149 = and i32 %148, 255', '%150 = tail call i32 @llvm.ctpop.i32(i32 %149) #12', '%151 = trunc i32 %150 to i8', '%152 = and i8 %151, 1', '%153 = xor i8 %152, 1', 'store i8 %153, i8* %22, align 1', '%154 = xor i64 %145, %144', '%155 = lshr i64 %154, 4', '%156 = trunc i64 %155 to i8', '%157 = and i8 %156, 1', 'store i8 %157, i8* %27, align 1', '%158 = icmp eq i64 %145, 0', '%159 = zext i1 %158 to i8', 'store i8 %159, i8* %30, align 1', '%160 = lshr i64 %145, 63', '%161 = trunc i64 %160 to i8', 'store i8 %161, i8* %33, align 1', '%162 = lshr i64 %144, 63', '%163 = xor i64 %160, %162', '%164 = add nuw nsw i64 %163, %160', '%165 = icmp eq i64 %164, 2', '%166 = zext i1 %165 to i8', 'store i8 %166, i8* %39, align 1', '%167 = add i64 %143, 7', 'store i64 %167, i64* %PC, align 8', '%168 = add i64 %144, 40', '%169 = inttoptr i64 %145 to i64*', '%170 = load i64, i64* %169, align 8', 'store i64 %170, i64* %RBP, align 8', 'store i64 %168, i64* %RSP, align 8', '%171 = add i64 %143, 8', 'store i64 %171, i64* %PC, align 8', '%172 = inttoptr i64 %168 to i64*', '%173 = load i64, i64* %172, align 8', 'store i64 %173, i64* %PC, align 8', '%174 = add i64 %144, 48', 'store i64 %174, i64* %RSP, align 8', '%175 = add i64 %55, -16', '%176 = add i64 %82, 4', 'store i64 %176, i64* %PC, align 8', '%177 = inttoptr i64 %175 to i64*', '%178 = load i64, i64* %177, align 8', 'store i64 %178, i64* %RAX, align 8', '%179 = add i64 %178, 8', '%181 = inttoptr i64 %179 to i64*', '%182 = load i64, i64* %181, align 8', 'store i64 %182, i64* %RDI, align 8', '%183 = add i64 %82, -416', '%184 = add i64 %82, 13', '%185 = load i64, i64* %RSP, align 8', '%186 = add i64 %185, -8', '%187 = inttoptr i64 %186 to i64*', 'store i64 %184, i64* %187, align 8', 'store i64 %186, i64* %RSP, align 8', 'store i64 %183, i64* %PC, align 8'])Writing '/tmp/tmp8l5_i1ko.dot'...
Writing '/tmp/tmp8l5_i1ko.dot':Done

Reading LLVM: /tmp/tmpdpppb0t2-query.ll
Extracting function [main] from /tmp/tmpdpppb0t2-query.ll
Dot file generated!
Writing '/tmp/tmpb6lh8fw9.dot'...
Writing '/tmp/tmpb6lh8fw9.dot':Done

Reading LLVM: /tmp/tmps3llbkhz-target.ll
Extracting function [main] from /tmp/tmps3llbkhz-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_46 = load i64, i64* %var_2_3, align 8
- 3 %var_2_47 = add i64 %var_2_46, 3
- 4 store i64 %var_2_47, i64* %var_2_3, align 8
- 5 %RSI.i64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 6 %var_2_55 = load i64, i64* %RBP.i, align 8
- 7 %var_2_56 = add i64 %var_2_55, -8
- 8 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 9 %var_2_60 = load i32, i32* %var_2_59, align 4
- 10 %var_2_73 = icmp eq i32 %var_2_60, 2
- 11 %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 12 \<badref\> = br i1 %var_2_73, label %block_400600, label %block_.L_400615
- 13 %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 14 %EAX.i49 = bitcast %union.anon* %var_2_83 to i32*
- 15 %var_2_98 = load i64, i64* %RBP.i, align 8
- 16 %var_2_100 = load i32, i32* %EAX.i49, align 4
- 17 %var_2_101 = load i64, i64* %var_2_3, align 8
- 18 %var_2_102 = add i64 %var_2_101, 3
- 19 store i64 %var_2_102, i64* %var_2_3, align 8
- 20 \<badref\> = br label %block_.L_400622
- 21 %RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0
- 22 store i64 8, i64* %RAX.i46, align 8
- 23 %EAX.i43 = bitcast %union.anon* %var_2_83 to i32*
- 24 \<badref\> = br label %block_.L_400622
- 25 %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_400615 ], [ %var_2_98, %block_400600 ]
- 26 %.sink1 = phi i32 [ 8, %block_.L_400615 ], [ %var_2_100, %block_400600 ]
- 27 %.sink = phi i64 [ 5, %block_.L_400615 ], [ 18, %block_400600 ]
- 28 %EAX.i34.pre-phi = phi i32* [ %EAX.i43, %block_.L_400615 ], [ %EAX.i49, %block_400600 ]
- 29 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_400615 ], [ %var_2_97, %block_400600 ]
- 30 %var_2_106.sink = add i64 %var_2_106.sink.in, -24
- 31 %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
- 32 store i32 %.sink1, i32* %var_2_108, align 4
- 33 %var_2_109 = load i64, i64* %var_2_3, align 8
- 34 %var_2_110 = add i64 %var_2_109, %.sink
- 35 %RDI.i37.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 36 store i64 3, i64* %RDI.i37.pre-phi, align 8
- 37 %var_2_123 = add i64 %var_2_110, 14
- 38 store i64 %var_2_123, i64* %var_2_3, align 8
- 39 %var_2_133 = load i32, i32* %EAX.i34.pre-phi, align 4
- 40 %var_2_134 = zext i32 %var_2_133 to i64
- 41 store i64 %var_2_134, i64* %RSI.i64, align 8
- 42 %var_2_136 = add i64 %var_2_110, -200
- 43 %call2_400638 = tail call %struct.Memory* @sub_400560.Ack(%struct.State* nonnull %0, i64 %var_2_136, %struct.Memory* %MEMORY.0)
- 44 store i64 ptrtoint (%G__0x4006e4_type* @G__0x4006e4 to i64), i64* %RDI.i37.pre-phi, align 8
- 45 %RDX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 46 %var_2_149 = load i32, i32* %EAX.i34.pre-phi, align 4
- 47 %var_2_150 = zext i32 %var_2_149 to i64
- 48 store i64 %var_2_150, i64* %RDX.i17, align 8
- 49 %var_2_156 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400638)
- 50 store i64 0, i64* %RDX.i17, align 8
- 51 %var_2_158 = load i64, i64* %RBP.i, align 8
- 52 %var_2_159 = add i64 %var_2_158, -32
- 53 %var_2_160 = load i32, i32* %EAX.i34.pre-phi, align 4
- 54 %var_2_162 = inttoptr i64 %var_2_159 to i32*
- 55 store i32 %var_2_160, i32* %var_2_162, align 4
- 56 \<badref\> = ret %struct.Memory* %var_2_156
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa7762f0>, {0: {0}, 1: {5}, 2: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 3: {28, 7}, 4: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 5: {4}, 6: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 7: {10}, 8: {11, 52, 30}, 9: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 10: {13}, 11: {1}, 12: {16}, 13: {40, 57, 44}, 14: {2}, 15: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 16: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 17: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 18: {28, 7}, 19: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 20: {61, 21}, 21: {17}, 22: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 23: {2}, 24: {61, 21}, 25: {26, 22, 23}, 26: set(), 27: set(), 28: {26, 22, 23}, 29: {26, 22, 23}, 30: {27}, 31: {11, 52, 30}, 32: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 33: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 34: {33, 15}, 35: set(), 36: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 37: {34}, 38: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 39: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 40: {42, 37}, 41: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 42: {39}, 43: {40, 57, 44}, 44: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 45: {3}, 46: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 47: {42, 37}, 48: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 49: {40, 57, 44}, 50: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 51: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 52: {48}, 53: {32, 36, 6, 9, 41, 12, 45, 47, 49, 58, 59, 60}, 54: {11, 52, 30}, 55: {35, 38, 8, 43, 46, 19, 20, 51, 53, 56, 29, 31}, 56: {54}})
Equivalent! frozenset({61, 21}) {24, 20}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa7762f0>, {0: {0}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: set(), 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {1}, 12: {16}, 13: set(), 14: set(), 15: set(), 16: set(), 17: {6}, 18: {7}, 19: {8}, 20: {21}, 21: {17}, 22: {20}, 23: set(), 24: {61}, 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: {3}, 46: set(), 47: set(), 48: set(), 49: set(), 50: {43, 46}, 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: set()})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
NO MATCH 5
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
EXACT 10 icmp icmp
EXACT 11 getelementptr getelementptr
EXACT 12 br br
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
EXACT 17 load load
EXACT 18 add add
EXACT 19 store store
EXACT 20 br br
EXACT 21 getelementptr getelementptr
EXACT 22 store store
NO MATCH 23
EXACT 24 br br
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
EXACT 45 getelementptr getelementptr
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
MORE 50 POT: 2
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 4 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %var_2_46 = load i64, i64* %PC, align 8
- 7 %var_2_47 = add i64 %var_2_46, 3
- 8 store i64 %var_2_47, i64* %PC, align 8
- 9 %var_2_55 = load i64, i64* %RBP, align 8
- 10 %var_2_56 = add i64 %var_2_55, -8
- 11 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 12 %var_2_60 = load i32, i32* %var_2_59, align 4
- 13 %var_2_73 = icmp eq i32 %var_2_60, 2
- 14 %.v = select i1 %var_2_73, i64 10, i64 31
- 15 %var_2_82 = add i64 %.v, %var_2_47
- 16 \<badref\> = br i1 %var_2_73, label %block_400600, label %block_400615
- 17 %RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0
- 18 %var_2_83 = add i64 %var_2_82, 5
- 19 store i64 %var_2_83, i64* %PC, align 8
- 20 store i64 8, i64* %RAX, align 8
- 21 \<badref\> = br label %block_400622
- 22 %var_2_84 = phi i64 [ %.pre, %block_400600 ], [ %var_2_83, %block_400615 ]
- 23 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_400600 ], [ %var_2_55, %block_400615 ]
- 24 %.sink = phi i32 [ %.sink.pre, %block_400600 ], [ 8, %block_400615 ]
- 25 %.sink5 = phi i64 [ 18, %block_400600 ], [ 5, %block_400615 ]
- 26 %MEMORY.0 = phi %struct.Memory* [ %var_2_188, %block_400600 ], [ %2, %block_400615 ]
- 27 %.sink7 = add i64 %.sink7.in, -24
- 28 %var_2_85 = add i64 %var_2_84, 3
- 29 store i64 %var_2_85, i64* %PC, align 8
- 30 %var_2_86 = inttoptr i64 %.sink7 to i32*
- 31 store i32 %.sink, i32* %var_2_86, align 4
- 32 %var_2_87 = load i64, i64* %PC, align 8
- 33 %var_2_88 = add i64 %var_2_87, %.sink5
- 34 %var_2_101 = add i64 %var_2_88, 14
- 35 store i64 %var_2_101, i64* %PC, align 8
- 36 %var_2_111 = load i32, i32* %EAX, align 4
- 37 %var_2_112 = zext i32 %var_2_111 to i64
- 38 store i64 %var_2_112, i64* %RSI, align 8
- 39 %var_2_114 = add i64 %var_2_88, -200
- 40 %var_2_119 = tail call %struct.Memory* @sub_400560_Ack_renamed_(%struct.State* nonnull %0, i64 %var_2_114, %struct.Memory* %MEMORY.0)
- 41 %var_2_127 = load i32, i32* %EAX, align 4
- 42 %var_2_128 = zext i32 %var_2_127 to i64
- 43 store i64 %var_2_128, i64* %RDX, align 8
- 44 %var_2_134 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_119)
- 45 %var_2_135 = load i64, i64* %PC, align 8
- 46 store i64 0, i64* %RDX, align 8
- 47 %var_2_136 = load i64, i64* %RBP, align 8
- 48 %var_2_137 = add i64 %var_2_136, -32
- 49 %var_2_138 = load i32, i32* %EAX, align 4
- 50 %var_2_139 = add i64 %var_2_135, 5
- 51 store i64 %var_2_139, i64* %PC, align 8
- 52 %var_2_140 = inttoptr i64 %var_2_137 to i32*
- 53 store i32 %var_2_138, i32* %var_2_140, align 4
- 54 \<badref\> = ret %struct.Memory* %var_2_134
- 55 %var_2_180 = add i64 %var_2_82, 8
- 56 store i64 %var_2_180, i64* %PC, align 8
- 57 %var_2_188 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 58 %.sink.pre = load i32, i32* %EAX, align 4
- 59 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 60 %.pre = load i64, i64* %PC, align 8
- 61 \<badref\> = br label %block_400622
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa6a6b70>, {0: {0}, 1: {11}, 2: {14, 23}, 3: {45}, 4: {5}, 5: {1}, 6: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 7: {18, 3}, 8: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 9: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 10: {7}, 11: {8, 54, 31}, 12: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 13: {10}, 14: set(), 15: {34}, 16: {12}, 17: {21}, 18: set(), 19: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 20: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 21: {24, 20}, 22: {25, 28, 29}, 23: {25, 28, 29}, 24: set(), 25: set(), 26: {25, 28, 29}, 27: {30}, 28: {18, 3}, 29: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 30: {8, 54, 31}, 31: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 32: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 33: {34}, 34: {37}, 35: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 36: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 37: {40, 47}, 38: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 39: {42}, 40: {49, 43, 13}, 41: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 42: {40, 47}, 43: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 44: {49, 43, 13}, 45: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 46: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 47: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 48: {52}, 49: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 50: set(), 51: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 52: {8, 54, 31}, 53: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 54: {56}, 55: set(), 56: {32, 4, 36, 38, 41, 44, 48, 50, 19, 22, 55}, 57: {49, 43, 13}, 58: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 59: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 60: {33, 2, 6, 39, 9, 46, 15, 16, 17, 51, 53}, 61: {24, 20}})
Equivalent! frozenset({24, 20}) {61, 21}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa6a6b70>, {0: {0}, 1: {11}, 2: set(), 3: {45}, 4: set(), 5: {1}, 6: {17, 2}, 7: {18, 3}, 8: {19, 4}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: set(), 15: set(), 16: {12}, 17: {21}, 18: set(), 19: set(), 20: {22}, 21: {20}, 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: set(), 46: {48, 50}, 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: set(), 57: set(), 58: set(), 59: set(), 60: set(), 61: {24}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
NO MATCH 4
EXACT 5 getelementptr getelementptr
MORE 6 POT: 2
MORE 7 POT: 2
MORE 8 POT: 2
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 icmp icmp
NO MATCH 14
NO MATCH 15
EXACT 16 br br
EXACT 17 getelementptr getelementptr
NO MATCH 18
NO MATCH 19
EXACT 20 store store
EXACT 21 br br
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
NO MATCH 45
MORE 46 POT: 2
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
NO MATCH 57
NO MATCH 58
NO MATCH 59
NO MATCH 60
EXACT 61 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_46 = load i64, i64* %var_2_3, align 8', '%var_2_47 = add i64 %var_2_46, 3', 'store i64 %var_2_47, i64* %var_2_3, align 8', '%var_2_101 = load i64, i64* %var_2_3, align 8', '%var_2_102 = add i64 %var_2_101, 3', 'store i64 %var_2_102, i64* %var_2_3, align 8', '%RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0', 'store i64 8, i64* %RAX.i46, align 8'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_46 = load i64, i64* %var_2_3, align 8
Found line to remove! %var_2_47 = add i64 %var_2_46, 3
Found line to remove! store i64 %var_2_47, i64* %var_2_3, align 8
Keep: %RSI.i64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %var_2_55 = load i64, i64* %RBP.i, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: br i1 %var_2_73, label %block_400600, label %block_.L_400615
Keep: 
Keep: block_400600:                                     ; preds = %entry
Keep: %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i49 = bitcast %union.anon* %var_2_83 to i32*
Keep: %var_2_98 = load i64, i64* %RBP.i, align 8
Keep: %var_2_100 = load i32, i32* %EAX.i49, align 4
Found line to remove! %var_2_101 = load i64, i64* %var_2_3, align 8
Found line to remove! %var_2_102 = add i64 %var_2_101, 3
Found line to remove! store i64 %var_2_102, i64* %var_2_3, align 8
Keep: br label %block_.L_400622
Keep: 
Keep: block_.L_400615:                                  ; preds = %entry
Found line to remove! %RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0
Found line to remove! store i64 8, i64* %RAX.i46, align 8
Keep: %EAX.i43 = bitcast %union.anon* %var_2_83 to i32*
Keep: br label %block_.L_400622
Keep:Writing '/tmp/tmpg8mnv0o1.dot'...
Writing '/tmp/tmpg8mnv0o1.dot':Done

Reading LLVM: /tmp/tmpdpppb0t2-query.ll
Extracting function [main] from /tmp/tmpdpppb0t2-query.ll
Dot file generated!
Writing '/tmp/tmptqymwxu9.dot'...
Writing '/tmp/tmptqymwxu9.dot':Done

Reading LLVM: /tmp/tmps3llbkhz-target.ll
Extracting function [main] from /tmp/tmps3llbkhz-target.ll
Dot file generated!
 
Keep: block_.L_400622:                                  ; preds = %block_.L_400615, %block_400600
Keep: %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_400615 ], [ %var_2_98, %block_400600 ]
Keep: %.sink1 = phi i32 [ 8, %block_.L_400615 ], [ %var_2_100, %block_400600 ]
Keep: %.sink = phi i64 [ 5, %block_.L_400615 ], [ 18, %block_400600 ]
Keep: %EAX.i34.pre-phi = phi i32* [ %EAX.i43, %block_.L_400615 ], [ %EAX.i49, %block_400600 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_400615 ], [ %var_2_97, %block_400600 ]
Keep: %var_2_106.sink = add i64 %var_2_106.sink.in, -24
Keep: %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
Keep: store i32 %.sink1, i32* %var_2_108, align 4
Keep: %var_2_109 = load i64, i64* %var_2_3, align 8
Keep: %var_2_110 = add i64 %var_2_109, %.sink
Keep: %RDI.i37.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: store i64 3, i64* %RDI.i37.pre-phi, align 8
Keep: %var_2_123 = add i64 %var_2_110, 14
Keep: store i64 %var_2_123, i64* %var_2_3, align 8
Keep: %var_2_133 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %var_2_134 = zext i32 %var_2_133 to i64
Keep: store i64 %var_2_134, i64* %RSI.i64, align 8
Keep: %var_2_136 = add i64 %var_2_110, -200
Keep: %call2_400638 = tail call %struct.Memory* @sub_400560.Ack(%struct.State* nonnull %0, i64 %var_2_136, %struct.Memory* %MEMORY.0)
Keep: store i64 ptrtoint (%G__0x4006e4_type* @G__0x4006e4 to i64), i64* %RDI.i37.pre-phi, align 8
Keep: %RDX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %var_2_149 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %var_2_150 = zext i32 %var_2_149 to i64
Keep: store i64 %var_2_150, i64* %RDX.i17, align 8
Keep: %var_2_156 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400638)
Keep: store i64 0, i64* %RDX.i17, align 8
Keep: %var_2_158 = load i64, i64* %RBP.i, align 8
Keep: %var_2_159 = add i64 %var_2_158, -32
Keep: %var_2_160 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %var_2_162 = inttoptr i64 %var_2_159 to i32*
Keep: store i32 %var_2_160, i32* %var_2_162, align 4
Keep: ret %struct.Memory* %var_2_156
Missed: dict_keys(['%var_2_46 = load i64, i64* %var_2_3, align 8', '%var_2_47 = add i64 %var_2_46, 3', 'store i64 %var_2_47, i64* %var_2_3, align 8', '%var_2_101 = load i64, i64* %var_2_3, align 8', '%var_2_102 = add i64 %var_2_101, 3', 'store i64 %var_2_102, i64* %var_2_3, align 8', '%RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0', 'store i64 8, i64* %RAX.i46, align 8'])
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0', 'store i64 8, i64* %RAX, align 8'])
Keep: block_4005e0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Keep: %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_47 = add i64 %var_2_46, 3
Keep: store i64 %var_2_47, i64* %PC, align 8
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_82 = add i64 %.v, %var_2_47
Keep: br i1 %var_2_73, label %block_400600, label %block_400615
Keep: 
Keep: block_400615:                                     ; preds = %block_4005e0
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0
Keep: %var_2_83 = add i64 %var_2_82, 5
Keep: store i64 %var_2_83, i64* %PC, align 8
Found line to remove! store i64 8, i64* %RAX, align 8
Keep: br label %block_400622
Keep: 
Keep: block_400622:                                     ; preds = %block_400600, %block_400615
Keep: %var_2_84 = phi i64 [ %.pre, %block_400600 ], [ %var_2_83, %block_400615 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_400600 ], [ %var_2_55, %block_400615 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_400600 ], [ 8, %block_400615 ]
Keep: %.sink5 = phi i64 [ 18, %block_400600 ], [ 5, %block_400615 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %var_2_188, %block_400600 ], [ %2, %block_400615 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %var_2_85 = add i64 %var_2_84, 3
Keep: store i64 %var_2_85, i64* %PC, align 8
Keep: %var_2_86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %var_2_86, align 4
Keep: %var_2_87 = load i64, i64* %PC, align 8
Keep: %var_2_88 = add i64 %var_2_87, %.sink5
Keep: %var_2_101 = add i64 %var_2_88, 14
Keep: store i64 %var_2_101, i64* %PC, align 8
Keep: %var_2_111 = load i32, i32* %EAX, align 4
Keep: %var_2_112 = zext i32 %var_2_111 to i64
Keep: store i64 %var_2_112, i64* %RSI, align 8
Keep: %var_2_114 = add i64 %var_2_88, -200
Keep: %var_2_119 = tail call %struct.Memory* @sub_400560_Ack_renamed_(%struct.State* nonnull %0, i64 %var_2_114, %struct.Memory* %MEMORY.0)
Keep: %var_2_127 = load i32, i32* %EAX, align 4
Keep: %var_2_128 = zext i32 %var_2_127 to i64
Keep: store i64 %var_2_128, i64* %RDX, align 8
Keep: %var_2_134 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_119)
Keep: %var_2_135 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RDX, align 8
Keep: %var_2_136 = load i64, i64* %RBP, align 8
Keep: %var_2_137 = add i64 %var_2_136, -32
Keep: %var_2_138 = load i32, i32* %EAX, align 4
Keep: %var_2_139 = add i64 %var_2_135, 5
Keep: store i64 %var_2_139, i64* %PC, align 8
Keep: %var_2_140 = inttoptr i64 %var_2_137 to i32*
Keep: store i32 %var_2_138, i32* %var_2_140, align 4
Keep: ret %struct.Memory* %var_2_134
Keep: 
Keep: block_400600:                                     ; preds = %block_4005e0
Keep: %var_2_180 = add i64 %var_2_82, 8
Keep: store i64 %var_2_180, i64* %PC, align 8
Keep: %var_2_188 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400622
Missed: dict_keys(['%RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0', 'store i64 8, i64* %RAX, align 8'])
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %RSI.i64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 3 %var_2_55 = load i64, i64* %RBP.i, align 8
- 4 %var_2_56 = add i64 %var_2_55, -8
- 5 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 6 %var_2_60 = load i32, i32* %var_2_59, align 4
- 7 %var_2_73 = icmp eq i32 %var_2_60, 2
- 8 %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 9 \<badref\> = br i1 %var_2_73, label %block_400600, label %block_.L_400615
- 10 %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 11 %EAX.i49 = bitcast %union.anon* %var_2_83 to i32*
- 12 %var_2_98 = load i64, i64* %RBP.i, align 8
- 13 %var_2_100 = load i32, i32* %EAX.i49, align 4
- 14 \<badref\> = br label %block_.L_400622
- 15 %EAX.i43 = bitcast %union.anon* %var_2_83 to i32*
- 16 \<badref\> = br label %block_.L_400622
- 17 %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_400615 ], [ %var_2_98, %block_400600 ]
- 18 %.sink1 = phi i32 [ 8, %block_.L_400615 ], [ %var_2_100, %block_400600 ]
- 19 %.sink = phi i64 [ 5, %block_.L_400615 ], [ 18, %block_400600 ]
- 20 %EAX.i34.pre-phi = phi i32* [ %EAX.i43, %block_.L_400615 ], [ %EAX.i49, %block_400600 ]
- 21 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_400615 ], [ %var_2_97, %block_400600 ]
- 22 %var_2_106.sink = add i64 %var_2_106.sink.in, -24
- 23 %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
- 24 store i32 %.sink1, i32* %var_2_108, align 4
- 25 %var_2_109 = load i64, i64* %var_2_3, align 8
- 26 %var_2_110 = add i64 %var_2_109, %.sink
- 27 %RDI.i37.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 28 store i64 3, i64* %RDI.i37.pre-phi, align 8
- 29 %var_2_123 = add i64 %var_2_110, 14
- 30 store i64 %var_2_123, i64* %var_2_3, align 8
- 31 %var_2_133 = load i32, i32* %EAX.i34.pre-phi, align 4
- 32 %var_2_134 = zext i32 %var_2_133 to i64
- 33 store i64 %var_2_134, i64* %RSI.i64, align 8
- 34 %var_2_136 = add i64 %var_2_110, -200
- 35 %call2_400638 = tail call %struct.Memory* @sub_400560.Ack(%struct.State* nonnull %0, i64 %var_2_136, %struct.Memory* %MEMORY.0)
- 36 store i64 ptrtoint (%G__0x4006e4_type* @G__0x4006e4 to i64), i64* %RDI.i37.pre-phi, align 8
- 37 %RDX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 38 %var_2_149 = load i32, i32* %EAX.i34.pre-phi, align 4
- 39 %var_2_150 = zext i32 %var_2_149 to i64
- 40 store i64 %var_2_150, i64* %RDX.i17, align 8
- 41 %var_2_156 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400638)
- 42 store i64 0, i64* %RDX.i17, align 8
- 43 %var_2_158 = load i64, i64* %RBP.i, align 8
- 44 %var_2_159 = add i64 %var_2_158, -32
- 45 %var_2_160 = load i32, i32* %EAX.i34.pre-phi, align 4
- 46 %var_2_162 = inttoptr i64 %var_2_159 to i32*
- 47 store i32 %var_2_160, i32* %var_2_162, align 4
- 48 \<badref\> = ret %struct.Memory* %var_2_156
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa6d6378>, {0: {0}, 1: {5}, 2: {4}, 3: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 4: {10}, 5: {50, 11, 28}, 6: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 7: {13}, 8: {1}, 9: {16}, 10: {42, 38, 55}, 11: {2}, 12: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 13: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 14: {59, 19}, 15: {2}, 16: {59, 19}, 17: {24, 20, 21}, 18: set(), 19: set(), 20: {24, 20, 21}, 21: {24, 20, 21}, 22: {25}, 23: {50, 11, 28}, 24: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 25: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 26: {31, 15}, 27: set(), 28: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 29: {32}, 30: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 31: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 32: {40, 35}, 33: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 34: {37}, 35: {42, 38, 55}, 36: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 37: {3}, 38: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 39: {40, 35}, 40: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 41: {42, 38, 55}, 42: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 43: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 44: {46}, 45: {34, 6, 39, 9, 43, 12, 45, 47, 56, 57, 58, 30}, 46: {50, 11, 28}, 47: {33, 36, 8, 41, 44, 49, 18, 51, 54, 27, 29}, 48: {52}})
Equivalent! frozenset({59, 19}) {16, 14}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa6d6378>, {0: set(), 1: {5}, 2: set(), 3: {9}, 4: {10}, 5: {11}, 6: {12}, 7: {13}, 8: set(), 9: {16}, 10: set(), 11: set(), 12: set(), 13: set(), 14: {19}, 15: set(), 16: {59}, 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: {3}, 38: set(), 39: set(), 40: set(), 41: set(), 42: {41, 44}, 43: set(), 44: set(), 45: set(), 46: set(), 47: set(), 48: set()})
NO MATCH 0
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 load load
EXACT 4 add add
EXACT 5 inttoptr inttoptr
EXACT 6 load load
EXACT 7 icmp icmp
NO MATCH 8
EXACT 9 br br
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
EXACT 14 br br
NO MATCH 15
EXACT 16 br br
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
EXACT 37 getelementptr getelementptr
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
MORE 42 POT: 2
NO MATCH 43
NO MATCH 44
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 4 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %var_2_46 = load i64, i64* %PC, align 8
- 7 %var_2_47 = add i64 %var_2_46, 3
- 8 store i64 %var_2_47, i64* %PC, align 8
- 9 %var_2_55 = load i64, i64* %RBP, align 8
- 10 %var_2_56 = add i64 %var_2_55, -8
- 11 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 12 %var_2_60 = load i32, i32* %var_2_59, align 4
- 13 %var_2_73 = icmp eq i32 %var_2_60, 2
- 14 %.v = select i1 %var_2_73, i64 10, i64 31
- 15 %var_2_82 = add i64 %.v, %var_2_47
- 16 \<badref\> = br i1 %var_2_73, label %block_400600, label %block_400615
- 17 %var_2_83 = add i64 %var_2_82, 5
- 18 store i64 %var_2_83, i64* %PC, align 8
- 19 \<badref\> = br label %block_400622
- 20 %var_2_84 = phi i64 [ %.pre, %block_400600 ], [ %var_2_83, %block_400615 ]
- 21 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_400600 ], [ %var_2_55, %block_400615 ]
- 22 %.sink = phi i32 [ %.sink.pre, %block_400600 ], [ 8, %block_400615 ]
- 23 %.sink5 = phi i64 [ 18, %block_400600 ], [ 5, %block_400615 ]
- 24 %MEMORY.0 = phi %struct.Memory* [ %var_2_188, %block_400600 ], [ %2, %block_400615 ]
- 25 %.sink7 = add i64 %.sink7.in, -24
- 26 %var_2_85 = add i64 %var_2_84, 3
- 27 store i64 %var_2_85, i64* %PC, align 8
- 28 %var_2_86 = inttoptr i64 %.sink7 to i32*
- 29 store i32 %.sink, i32* %var_2_86, align 4
- 30 %var_2_87 = load i64, i64* %PC, align 8
- 31 %var_2_88 = add i64 %var_2_87, %.sink5
- 32 %var_2_101 = add i64 %var_2_88, 14
- 33 store i64 %var_2_101, i64* %PC, align 8
- 34 %var_2_111 = load i32, i32* %EAX, align 4
- 35 %var_2_112 = zext i32 %var_2_111 to i64
- 36 store i64 %var_2_112, i64* %RSI, align 8
- 37 %var_2_114 = add i64 %var_2_88, -200
- 38 %var_2_119 = tail call %struct.Memory* @sub_400560_Ack_renamed_(%struct.State* nonnull %0, i64 %var_2_114, %struct.Memory* %MEMORY.0)
- 39 %var_2_127 = load i32, i32* %EAX, align 4
- 40 %var_2_128 = zext i32 %var_2_127 to i64
- 41 store i64 %var_2_128, i64* %RDX, align 8
- 42 %var_2_134 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_119)
- 43 %var_2_135 = load i64, i64* %PC, align 8
- 44 store i64 0, i64* %RDX, align 8
- 45 %var_2_136 = load i64, i64* %RBP, align 8
- 46 %var_2_137 = add i64 %var_2_136, -32
- 47 %var_2_138 = load i32, i32* %EAX, align 4
- 48 %var_2_139 = add i64 %var_2_135, 5
- 49 store i64 %var_2_139, i64* %PC, align 8
- 50 %var_2_140 = inttoptr i64 %var_2_137 to i32*
- 51 store i32 %var_2_138, i32* %var_2_140, align 4
- 52 \<badref\> = ret %struct.Memory* %var_2_134
- 53 %var_2_180 = add i64 %var_2_82, 8
- 54 store i64 %var_2_180, i64* %PC, align 8
- 55 %var_2_188 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 56 %.sink.pre = load i32, i32* %EAX, align 4
- 57 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 58 %.pre = load i64, i64* %PC, align 8
- 59 \<badref\> = br label %block_400622
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa0f87b8>, {0: {0}, 1: {8}, 2: {11, 15}, 3: {37}, 4: {2}, 5: {1}, 6: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 7: set(), 8: {33, 36, 40, 42, 47, 24, 28, 30}, 9: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 10: {4}, 11: {5, 46, 23}, 12: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 13: {7}, 14: set(), 15: {26}, 16: {9}, 17: set(), 18: {33, 36, 40, 42, 47, 24, 28, 30}, 19: {16, 14}, 20: {17, 20, 21}, 21: {17, 20, 21}, 22: set(), 23: set(), 24: {17, 20, 21}, 25: {22}, 26: set(), 27: {33, 36, 40, 42, 47, 24, 28, 30}, 28: {5, 46, 23}, 29: {33, 36, 40, 42, 47, 24, 28, 30}, 30: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 31: {26}, 32: {29}, 33: {33, 36, 40, 42, 47, 24, 28, 30}, 34: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 35: {32, 39}, 36: {33, 36, 40, 42, 47, 24, 28, 30}, 37: {34}, 38: {41, 10, 35}, 39: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 40: {32, 39}, 41: {33, 36, 40, 42, 47, 24, 28, 30}, 42: {41, 10, 35}, 43: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 44: {33, 36, 40, 42, 47, 24, 28, 30}, 45: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 46: {44}, 47: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 48: set(), 49: {33, 36, 40, 42, 47, 24, 28, 30}, 50: {5, 46, 23}, 51: {33, 36, 40, 42, 47, 24, 28, 30}, 52: {48}, 53: set(), 54: {33, 36, 40, 42, 47, 24, 28, 30}, 55: {41, 10, 35}, 56: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 57: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 58: {3, 6, 38, 43, 12, 13, 45, 25, 31}, 59: {16, 14}})
Equivalent! frozenset({16, 14}) {59, 19}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f25aa0f87b8>, {0: set(), 1: set(), 2: set(), 3: {37}, 4: set(), 5: {1}, 6: set(), 7: set(), 8: set(), 9: {3}, 10: {4}, 11: {5}, 12: {6}, 13: {7}, 14: set(), 15: set(), 16: {9}, 17: set(), 18: set(), 19: {14}, 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: {40, 42}, 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: set(), 57: set(), 58: set(), 59: {16}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
EXACT 3 getelementptr getelementptr
NO MATCH 4
EXACT 5 getelementptr getelementptr
NO MATCH 6
NO MATCH 7
NO MATCH 8
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 icmp icmp
NO MATCH 14
NO MATCH 15
EXACT 16 br br
NO MATCH 17
NO MATCH 18
EXACT 19 br br
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
MORE 44 POT: 2
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
NO MATCH 57
NO MATCH 58
EXACT 59 br br
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %RSI.i64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %var_2_55 = load i64, i64* %RBP.i, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: br i1 %var_2_73, label %block_400600, label %block_.L_400615
Keep: 
Keep: block_400600:                                     ; preds = %entry
Keep: %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i49 = bitcast %union.anon* %var_2_83 to i32*
Keep: %var_2_98 = load i64, i64* %RBP.i, align 8
Keep: %var_2_100 = load i32, i32* %EAX.i49, align 4
Keep: br label %block_.L_400622
Keep: 
Keep: block_.L_400615:                                  ; preds = %entry
Keep: %EAX.i43 = bitcast %union.anon* %var_2_83 to i32*
Keep: br label %block_.L_400622
Keep: 
Keep: block_.L_400622:                                  ; preds = %block_.L_400615, %block_400600
Keep: %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_400615 ], [ %var_2_98, %block_400600 ]
Keep: %.sink1 = phi i32 [ 8, %block_.L_400615 ], [ %var_2_100, %block_400600 ]
Keep: %.sink = phi i64 [ 5, %block_.L_400615 ], [ 18, %block_400600 ]
Keep: %EAX.i34.pre-phi = phi i32* [ %EAX.i43, %block_.L_400615 ], [ %EAX.i49, %block_400600 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_400615 ], [ %var_2_97, %block_400600 ]
Keep: %var_2_106.sink = add i64 %var_2_106.sink.in, -24
Keep: %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
Keep: store i32 %.sink1, i32* %var_2_108, align 4
Keep: %var_2_109 = load i64, i64* %var_2_3, align 8
Keep: %var_2_110 = add i64 %var_2_109, %.sink
Keep: %RDI.i37.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: store i64 3, i64* %RDI.i37.pre-phi, align 8
Keep: %var_2_123 = add i64 %var_2_110, 14
Keep: store i64 %var_2_123, i64* %var_2_3, align 8
Keep: %var_2_133 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %var_2_134 = zext i32 %var_2_133 to i64
Keep: store i64 %var_2_134, i64* %RSI.i64, align 8
Keep: %var_2_136 = add i64 %var_2_110, -200
Keep: %call2_400638 = tail call %struct.Memory* @sub_400560.Ack(%struct.State* nonnull %0, i64 %var_2_136, %struct.Memory* %MEMORY.0)
Keep: store i64 ptrtoint (%G__0x4006e4_type* @G__0x4006e4 to i64), i64* %RDI.i37.pre-phi, align 8
Keep: %RDX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %var_2_149 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %var_2_150 = zext i32 %var_2_149 to i64
Keep: store i64 %var_2_150, i64* %RDX.i17, align 8
Keep: %var_2_156 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400638)
Keep: store i64 0, i64* %RDX.i17, align 8
Keep: %var_2_158 = load i64, i64* %RBP.i, align 8
Keep: %var_2_159 = add i64 %var_2_158, -32
Keep: %var_2_160 = load i32, i32* %EAX.i34.pre-phi, align 4
Keep: %var_2_162 = inttoptr i64 %var_2_159 to i32*
Keep: store i32 %var_2_160, i32* %var_2_162, align 4
Keep: ret %struct.Memory* %var_2_156
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_4005e0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Keep: %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_47 = add i64 %var_2_46, 3
Keep: store i64 %var_2_47, i64* %PC, align 8
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_82 = add i64 %.v, %var_2_47
Keep: br i1 %var_2_73, label %block_400600, label %block_400615
Keep: 
Keep: block_400615:                                     ; preds = %block_4005e0
Keep: %var_2_83 = add i64 %var_2_82, 5
Keep: store i64 %var_2_83, i64* %PC, align 8
Keep: br label %block_400622
Keep: 
Keep: block_400622:                                     ; preds = %block_400600, %block_400615
Keep: %var_2_84 = phi i64 [ %.pre, %block_400600 ], [ %var_2_83, %block_400615 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_400600 ], [ %var_2_55, %block_400615 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_400600 ], [ 8, %block_400615 ]
Keep: %.sink5 = phi i64 [ 18, %block_400600 ], [ 5, %block_400615 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %var_2_188, %block_400600 ], [ %2, %block_400615 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %var_2_85 = add i64 %var_2_84, 3
Keep: store i64 %var_2_85, i64* %PC, align 8
Keep: %var_2_86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %var_2_86, align 4
Keep: %var_2_87 = load i64, i64* %PC, align 8
Keep: %var_2_88 = add i64 %var_2_87, %.sink5
Keep: %var_2_101 = add i64 %var_2_88, 14
Keep: store i64 %var_2_101, i64* %PC, align 8
Keep: %var_2_111 = load i32, i32* %EAX, align 4
Keep: %var_2_112 = zext i32 %var_2_111 to i64
Keep: store i64 %var_2_112, i64* %RSI, align 8
Keep: %var_2_114 = add i64 %var_2_88, -200
Keep: %var_2_119 = tail call %struct.Memory* @sub_400560_Ack_renamed_(%struct.State* nonnull %0, i64 %var_2_114, %struct.Memory* %MEMORY.0)
Keep: %var_2_127 = load i32, i32* %EAX, align 4
Keep: %var_2_128 = zext i32 %var_2_127 to i64
Keep: store i64 %var_2_128, i64* %RDX, align 8
Keep: %var_2_134 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_119)
Keep: %var_2_135 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RDX, align 8
Keep: %var_2_136 = load i64, i64* %RBP, align 8
Keep: %var_2_137 = add i64 %var_2_136, -32
Keep: %var_2_138 = load i32, i32* %EAX, align 4
Keep: %var_2_139 = add i64 %var_2_135, 5
Keep: store i64 %var_2_139, i64* %PC, align 8
Keep: %var_2_140 = inttoptr i64 %var_2_137 to i32*
Keep: store i32 %var_2_138, i32* %var_2_140, align 4
Keep: ret %struct.Memory* %var_2_134
Keep: 
Keep: block_400600:                                     ; preds = %block_4005e0
Keep: %var_2_180 = add i64 %var_2_82, 8
Keep: store i64 %var_2_180, i64* %PC, align 8
Keep: %var_2_188 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400622
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/binary/test.mcsema.calls_renamed.ll main
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/main/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_33/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
