Writing '/tmp/tmpoxrkdwif.dot'...
Writing '/tmp/tmpoxrkdwif.dot':Done

Reading LLVM: /tmp/tmp9if15n_f-query.ll
Extracting function [check] from /tmp/tmp9if15n_f-query.ll
Dot file generated!
Writing '/tmp/tmpj68m_szb.dot'...
Writing '/tmp/tmpj68m_szb.dot':Done

Reading LLVM: /tmp/tmprnr7kllh-target.ll
Extracting function [check] from /tmp/tmprnr7kllh-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %RAX.i30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 14 %11 = add i64 %7, 8
- 15 %12 = add i64 %10, 7
- 16 store i64 %12, i64* %3, align 8
- 17 %13 = inttoptr i64 %11 to i64*
- 18 %14 = load i64, i64* %13, align 8
- 19 store i64 %14, i64* %RAX.i30, align 8
- 20 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 21 %EDI.i = bitcast %union.anon* %15 to i32*
- 22 %16 = add i64 %7, -12
- 23 %17 = load i32, i32* %EDI.i, align 4
- 24 %18 = add i64 %10, 10
- 25 store i64 %18, i64* %3, align 8
- 26 %19 = inttoptr i64 %16 to i32*
- 27 store i32 %17, i32* %19, align 4
- 28 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 29 %ESI.i = bitcast %union.anon* %20 to i32*
- 30 %21 = load i64, i64* %RBP.i, align 8
- 31 %22 = add i64 %21, -8
- 32 %23 = load i32, i32* %ESI.i, align 4
- 33 %24 = load i64, i64* %3, align 8
- 34 %25 = add i64 %24, 3
- 35 store i64 %25, i64* %3, align 8
- 36 %26 = inttoptr i64 %22 to i32*
- 37 store i32 %23, i32* %26, align 4
- 38 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 39 %EDX.i = bitcast %union.anon* %27 to i32*
- 40 %28 = load i64, i64* %RBP.i, align 8
- 41 %29 = add i64 %28, -12
- 42 %30 = load i32, i32* %EDX.i, align 4
- 43 %31 = load i64, i64* %3, align 8
- 44 %32 = add i64 %31, 3
- 45 store i64 %32, i64* %3, align 8
- 46 %33 = inttoptr i64 %29 to i32*
- 47 store i32 %30, i32* %33, align 4
- 48 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 49 %ECX.i21 = bitcast %union.anon* %34 to i32*
- 50 %35 = load i64, i64* %RBP.i, align 8
- 51 %36 = add i64 %35, -16
- 52 %37 = load i32, i32* %ECX.i21, align 4
- 53 %38 = load i64, i64* %3, align 8
- 54 %39 = add i64 %38, 3
- 55 store i64 %39, i64* %3, align 8
- 56 %40 = inttoptr i64 %36 to i32*
- 57 store i32 %37, i32* %40, align 4
- 58 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 59 %R8D.i = bitcast %union.anon* %41 to i32*
- 60 %42 = load i64, i64* %RBP.i, align 8
- 61 %43 = add i64 %42, -20
- 62 %44 = load i32, i32* %R8D.i, align 4
- 63 %45 = load i64, i64* %3, align 8
- 64 %46 = add i64 %45, 4
- 65 store i64 %46, i64* %3, align 8
- 66 %47 = inttoptr i64 %43 to i32*
- 67 store i32 %44, i32* %47, align 4
- 68 %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
- 69 %R9D.i = bitcast %union.anon* %48 to i32*
- 70 %49 = load i64, i64* %RBP.i, align 8
- 71 %50 = add i64 %49, -24
- 72 %51 = load i32, i32* %R9D.i, align 4
- 73 %52 = load i64, i64* %3, align 8
- 74 %53 = add i64 %52, 4
- 75 store i64 %53, i64* %3, align 8
- 76 %54 = inttoptr i64 %50 to i32*
- 77 store i32 %51, i32* %54, align 4
- 78 %55 = load i64, i64* %RBP.i, align 8
- 79 %56 = add i64 %55, -32
- 80 %57 = load i64, i64* %RAX.i30, align 8
- 81 %58 = load i64, i64* %3, align 8
- 82 %59 = add i64 %58, 4
- 83 store i64 %59, i64* %3, align 8
- 84 %60 = inttoptr i64 %56 to i64*
- 85 store i64 %57, i64* %60, align 8
- 86 %61 = load i64, i64* %RBP.i, align 8
- 87 %62 = add i64 %61, -32
- 88 %63 = load i64, i64* %3, align 8
- 89 %64 = add i64 %63, 4
- 90 store i64 %64, i64* %3, align 8
- 91 %65 = inttoptr i64 %62 to i64*
- 92 %66 = load i64, i64* %65, align 8
- 93 store i64 %66, i64* %RAX.i30, align 8
- 94 %RCX.i = getelementptr inbounds %union.anon, %union.anon* %34, i64 0, i32 0
- 95 %67 = add i64 %63, 6
- 96 store i64 %67, i64* %3, align 8
- 97 %68 = inttoptr i64 %66 to i32*
- 98 %69 = load i32, i32* %68, align 4
- 99 %70 = zext i32 %69 to i64
- 100 store i64 %70, i64* %RCX.i, align 8
- 101 %71 = add i64 %61, -36
- 102 %72 = add i64 %63, 9
- 103 store i64 %72, i64* %3, align 8
- 104 %73 = inttoptr i64 %71 to i32*
- 105 store i32 %69, i32* %73, align 4
- 106 %74 = load i64, i64* %RBP.i, align 8
- 107 %75 = add i64 %74, -36
- 108 %76 = load i64, i64* %3, align 8
- 109 %77 = add i64 %76, 3
- 110 store i64 %77, i64* %3, align 8
- 111 %78 = inttoptr i64 %75 to i32*
- 112 %79 = load i32, i32* %78, align 4
- 113 %80 = zext i32 %79 to i64
- 114 store i64 %80, i64* %RAX.i30, align 8
- 115 %81 = add i64 %76, 4
- 116 store i64 %81, i64* %3, align 8
- 117 %82 = load i64, i64* %6, align 8
- 118 %83 = add i64 %82, 8
- 119 %84 = inttoptr i64 %82 to i64*
- 120 %85 = load i64, i64* %84, align 8
- 121 store i64 %85, i64* %RBP.i, align 8
- 122 store i64 %83, i64* %6, align 8
- 123 %86 = add i64 %76, 5
- 124 store i64 %86, i64* %3, align 8
- 125 %87 = inttoptr i64 %83 to i64*
- 126 %88 = load i64, i64* %87, align 8
- 127 store i64 %88, i64* %3, align 8
- 128 %89 = add i64 %82, 16
- 129 store i64 %89, i64* %6, align 8
- 130 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb3372bef28>, {0: {0}, 1: {15}, 2: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 3: {17}, 4: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 5: {19}, 6: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 7: {40, 21}, 8: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 9: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 10: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 11: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 12: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 13: {13}, 14: {27, 118}, 15: {28}, 16: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 17: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 18: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 19: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 20: {7}, 21: {2, 4, 6, 8, 10, 12}, 22: {48, 33}, 23: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 24: {35}, 25: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 26: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 27: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 28: {5}, 29: {2, 4, 6, 8, 10, 12}, 30: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 31: {40, 21}, 32: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 33: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 34: {51, 43, 109, 59}, 35: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 36: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 37: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 38: {3}, 39: {2, 4, 6, 8, 10, 12}, 40: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 41: {48, 33}, 42: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 43: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 44: {51, 43, 109, 59}, 45: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 46: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 47: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 48: {1}, 49: {2, 4, 6, 8, 10, 12}, 50: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 51: {56}, 52: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 53: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 54: {51, 43, 109, 59}, 55: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 56: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 57: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 58: {9}, 59: {2, 4, 6, 8, 10, 12}, 60: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 61: {64}, 62: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 63: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 64: {67, 75, 83, 115, 90}, 65: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 66: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 67: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 68: {11}, 69: {2, 4, 6, 8, 10, 12}, 70: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 71: {72}, 72: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 73: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 74: {67, 75, 83, 115, 90}, 75: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 76: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 77: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 78: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 79: {80, 88}, 80: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 81: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 82: {67, 75, 83, 115, 90}, 83: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 84: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 85: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 86: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 87: {80, 88}, 88: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 89: {67, 75, 83, 115, 90}, 90: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 91: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 92: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 93: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 94: {14}, 95: {95}, 96: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 97: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 98: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 99: {113, 99}, 100: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 101: {107, 101}, 102: {102}, 103: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 104: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 105: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 106: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 107: {107, 101}, 108: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 109: {51, 43, 109, 59}, 110: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 111: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 112: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 113: {113, 99}, 114: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 115: {67, 75, 83, 115, 90}, 116: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 117: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 118: {27, 118}, 119: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 120: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 121: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 122: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 123: {123}, 124: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 125: {97, 37, 69, 104, 45, 77, 111, 119, 53, 22, 85, 125, 92, 61, 30}, 126: {16, 20, 25, 31, 34, 39, 41, 42, 47, 49, 50, 55, 57, 58, 63, 65, 66, 71, 73, 74, 79, 81, 82, 87, 89, 93, 98, 106, 108, 112, 117, 120, 126}, 127: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 128: {128}, 129: {129, 18, 23, 24, 26, 29, 32, 36, 38, 44, 46, 52, 54, 60, 62, 68, 70, 76, 78, 84, 86, 91, 94, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 130: {130}})
Equivalent! frozenset({43, 51, 109, 59}) {34, 44, 109, 54}
Equivalent! frozenset({44, 60, 110, 52}) {35, 45, 110, 55}
Equivalent! frozenset({67, 115, 83, 90, 75}) {64, 74, 82, 115, 89}
Equivalent! frozenset({68, 116, 84, 91, 76}) {65, 75, 83, 116, 90}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb3372bef28>, {0: {0}, 1: {15}, 2: {16}, 3: {17}, 4: {18}, 5: {19}, 6: {20}, 7: {21}, 8: {22}, 9: {23}, 10: {24}, 11: {25}, 12: {26}, 13: {13}, 14: {27}, 15: {28}, 16: {29}, 17: {30}, 18: {31}, 19: {32}, 20: {7}, 21: {8}, 22: {33}, 23: {34}, 24: {35}, 25: {36}, 26: {37}, 27: {38}, 28: {5}, 29: {6}, 30: {39}, 31: {40}, 32: {41}, 33: {108, 42, 50, 58}, 34: {43}, 35: {44}, 36: {45}, 37: {46}, 38: {3}, 39: {4}, 40: {47}, 41: {48}, 42: {49}, 43: {108, 42, 50, 58}, 44: {51}, 45: {60}, 46: {53}, 47: {54}, 48: {1}, 49: {2}, 50: {55}, 51: {56}, 52: {57}, 53: {108, 42, 50, 58}, 54: {59}, 55: {52}, 56: {61}, 57: {62}, 58: {9}, 59: {10}, 60: {63}, 61: {64}, 62: {65}, 63: {66, 74, 108, 82, 89}, 64: {67}, 65: {68}, 66: {69}, 67: {70}, 68: {11}, 69: {12}, 70: {71}, 71: {72}, 72: {73}, 73: {66, 74, 108, 82, 89}, 74: {115}, 75: {116}, 76: {77}, 77: {78}, 78: {79}, 79: {80}, 80: {81}, 81: {66, 74, 108, 82, 89}, 82: {83}, 83: {84}, 84: {85}, 85: {86}, 86: {87}, 87: {88}, 88: {66, 74, 108, 82, 89}, 89: {75}, 90: {76}, 91: {92}, 92: {93}, 93: {94}, 94: {14}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {66, 42, 74, 108, 50, 82, 89, 58}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {90}, 116: {91}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 add add
EXACT 16 store store
EXACT 17 inttoptr inttoptr
EXACT 18 load load
EXACT 19 store store
EXACT 20 getelementptr getelementptr
EXACT 21 bitcast bitcast
EXACT 22 add add
EXACT 23 load load
EXACT 24 add add
EXACT 25 store store
EXACT 26 inttoptr inttoptr
EXACT 27 store store
EXACT 28 getelementptr getelementptr
EXACT 29 bitcast bitcast
EXACT 30 load load
EXACT 31 add add
EXACT 32 load load
MORE 33 POT: 4
EXACT 34 add add
EXACT 35 store store
EXACT 36 inttoptr inttoptr
EXACT 37 store store
EXACT 38 getelementptr getelementptr
EXACT 39 bitcast bitcast
EXACT 40 load load
EXACT 41 add add
EXACT 42 load load
MORE 43 POT: 4
EXACT 44 add add
EXACT 45 store store
EXACT 46 inttoptr inttoptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 bitcast bitcast
EXACT 50 load load
EXACT 51 add add
EXACT 52 load load
MORE 53 POT: 4
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 getelementptr getelementptr
EXACT 59 bitcast bitcast
EXACT 60 load load
EXACT 61 add add
EXACT 62 load load
MORE 63 POT: 5
EXACT 64 add add
EXACT 65 store store
EXACT 66 inttoptr inttoptr
EXACT 67 store store
EXACT 68 getelementptr getelementptr
EXACT 69 bitcast bitcast
EXACT 70 load load
EXACT 71 add add
EXACT 72 load load
MORE 73 POT: 5
EXACT 74 add add
EXACT 75 store store
EXACT 76 inttoptr inttoptr
EXACT 77 store store
EXACT 78 load load
EXACT 79 add add
EXACT 80 load load
MORE 81 POT: 5
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 store store
EXACT 86 load load
EXACT 87 add add
MORE 88 POT: 5
EXACT 89 add add
EXACT 90 store store
EXACT 91 inttoptr inttoptr
EXACT 92 load load
EXACT 93 store store
EXACT 94 getelementptr getelementptr
EXACT 95 add add
EXACT 96 store store
EXACT 97 inttoptr inttoptr
EXACT 98 load load
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 add add
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 store store
EXACT 106 load load
EXACT 107 add add
MORE 108 POT: 8
EXACT 109 add add
EXACT 110 store store
EXACT 111 inttoptr inttoptr
EXACT 112 load load
EXACT 113 zext zext
EXACT 114 store store
EXACT 115 add add
EXACT 116 store store
EXACT 117 load load
EXACT 118 add add
EXACT 119 inttoptr inttoptr
EXACT 120 load load
EXACT 121 store store
EXACT 122 store store
EXACT 123 add add
EXACT 124 store store
EXACT 125 inttoptr inttoptr
EXACT 126 load load
EXACT 127 store store
EXACT 128 add add
EXACT 129 store store
EXACT 130 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 2 %ECX = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 4 %EDX = bitcast %union.anon* %4 to i32*
- 5 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 6 %ESI = bitcast %union.anon* %5 to i32*
- 7 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 8 %EDI = bitcast %union.anon* %6 to i32*
- 9 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
- 10 %R8D = bitcast %union.anon* %7 to i32*
- 11 %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
- 12 %R9D = bitcast %union.anon* %8 to i32*
- 13 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 14 %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 15 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 16 %9 = load i64, i64* %RBP, align 8
- 17 %10 = add i64 %1, 1
- 18 store i64 %10, i64* %PC, align 8
- 19 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 20 %12 = load i64, i64* %11, align 8
- 21 %13 = add i64 %12, -8
- 22 %14 = inttoptr i64 %13 to i64*
- 23 store i64 %9, i64* %14, align 8
- 24 store i64 %13, i64* %11, align 8
- 25 %15 = load i64, i64* %PC, align 8
- 26 store i64 %13, i64* %RBP, align 8
- 27 %16 = add i64 %12, 8
- 28 %17 = add i64 %15, 7
- 29 store i64 %17, i64* %PC, align 8
- 30 %18 = inttoptr i64 %16 to i64*
- 31 %19 = load i64, i64* %18, align 8
- 32 store i64 %19, i64* %RAX, align 8
- 33 %20 = add i64 %12, -12
- 34 %21 = load i32, i32* %EDI, align 4
- 35 %22 = add i64 %15, 10
- 36 store i64 %22, i64* %PC, align 8
- 37 %23 = inttoptr i64 %20 to i32*
- 38 store i32 %21, i32* %23, align 4
- 39 %24 = load i64, i64* %RBP, align 8
- 40 %25 = add i64 %24, -8
- 41 %26 = load i32, i32* %ESI, align 4
- 42 %27 = load i64, i64* %PC, align 8
- 43 %28 = add i64 %27, 3
- 44 store i64 %28, i64* %PC, align 8
- 45 %29 = inttoptr i64 %25 to i32*
- 46 store i32 %26, i32* %29, align 4
- 47 %30 = load i64, i64* %RBP, align 8
- 48 %31 = add i64 %30, -12
- 49 %32 = load i32, i32* %EDX, align 4
- 50 %33 = load i64, i64* %PC, align 8
- 51 %34 = add i64 %33, 3
- 52 store i64 %34, i64* %PC, align 8
- 53 %35 = inttoptr i64 %31 to i32*
- 54 store i32 %32, i32* %35, align 4
- 55 %36 = load i64, i64* %RBP, align 8
- 56 %37 = add i64 %36, -16
- 57 %38 = load i32, i32* %ECX, align 4
- 58 %39 = load i64, i64* %PC, align 8
- 59 %40 = add i64 %39, 3
- 60 store i64 %40, i64* %PC, align 8
- 61 %41 = inttoptr i64 %37 to i32*
- 62 store i32 %38, i32* %41, align 4
- 63 %42 = load i64, i64* %RBP, align 8
- 64 %43 = add i64 %42, -20
- 65 %44 = load i32, i32* %R8D, align 4
- 66 %45 = load i64, i64* %PC, align 8
- 67 %46 = add i64 %45, 4
- 68 store i64 %46, i64* %PC, align 8
- 69 %47 = inttoptr i64 %43 to i32*
- 70 store i32 %44, i32* %47, align 4
- 71 %48 = load i64, i64* %RBP, align 8
- 72 %49 = add i64 %48, -24
- 73 %50 = load i32, i32* %R9D, align 4
- 74 %51 = load i64, i64* %PC, align 8
- 75 %52 = add i64 %51, 4
- 76 store i64 %52, i64* %PC, align 8
- 77 %53 = inttoptr i64 %49 to i32*
- 78 store i32 %50, i32* %53, align 4
- 79 %54 = load i64, i64* %RBP, align 8
- 80 %55 = add i64 %54, -32
- 81 %56 = load i64, i64* %RAX, align 8
- 82 %57 = load i64, i64* %PC, align 8
- 83 %58 = add i64 %57, 4
- 84 store i64 %58, i64* %PC, align 8
- 85 %59 = inttoptr i64 %55 to i64*
- 86 store i64 %56, i64* %59, align 8
- 87 %60 = load i64, i64* %RBP, align 8
- 88 %61 = add i64 %60, -32
- 89 %62 = load i64, i64* %PC, align 8
- 90 %63 = add i64 %62, 4
- 91 store i64 %63, i64* %PC, align 8
- 92 %64 = inttoptr i64 %61 to i64*
- 93 %65 = load i64, i64* %64, align 8
- 94 store i64 %65, i64* %RAX, align 8
- 95 %66 = add i64 %62, 6
- 96 store i64 %66, i64* %PC, align 8
- 97 %67 = inttoptr i64 %65 to i32*
- 98 %68 = load i32, i32* %67, align 4
- 99 %69 = zext i32 %68 to i64
- 100 store i64 %69, i64* %RCX, align 8
- 101 %70 = add i64 %60, -36
- 102 %71 = add i64 %62, 9
- 103 store i64 %71, i64* %PC, align 8
- 104 %72 = inttoptr i64 %70 to i32*
- 105 store i32 %68, i32* %72, align 4
- 106 %73 = load i64, i64* %RBP, align 8
- 107 %74 = add i64 %73, -36
- 108 %75 = load i64, i64* %PC, align 8
- 109 %76 = add i64 %75, 3
- 110 store i64 %76, i64* %PC, align 8
- 111 %77 = inttoptr i64 %74 to i32*
- 112 %78 = load i32, i32* %77, align 4
- 113 %79 = zext i32 %78 to i64
- 114 store i64 %79, i64* %RAX, align 8
- 115 %80 = add i64 %75, 4
- 116 store i64 %80, i64* %PC, align 8
- 117 %81 = load i64, i64* %11, align 8
- 118 %82 = add i64 %81, 8
- 119 %83 = inttoptr i64 %81 to i64*
- 120 %84 = load i64, i64* %83, align 8
- 121 store i64 %84, i64* %RBP, align 8
- 122 store i64 %82, i64* %11, align 8
- 123 %85 = add i64 %75, 5
- 124 store i64 %85, i64* %PC, align 8
- 125 %86 = inttoptr i64 %82 to i64*
- 126 %87 = load i64, i64* %86, align 8
- 127 store i64 %87, i64* %PC, align 8
- 128 %88 = add i64 %81, 16
- 129 store i64 %88, i64* %11, align 8
- 130 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb3378ae6a8>, {0: {0}, 1: {48}, 2: {69, 39, 49, 21, 59, 29}, 3: {38}, 4: {69, 39, 49, 21, 59, 29}, 5: {28}, 6: {69, 39, 49, 21, 59, 29}, 7: {20}, 8: {69, 39, 49, 21, 59, 29}, 9: {58}, 10: {69, 39, 49, 21, 59, 29}, 11: {68}, 12: {69, 39, 49, 21, 59, 29}, 13: {13}, 14: {94}, 15: {1}, 16: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 17: {3}, 18: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 19: {5}, 20: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 21: {31, 7}, 22: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 23: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 24: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 25: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 26: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 27: {118, 14}, 28: {15}, 29: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 30: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 31: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 32: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 33: {41, 22}, 34: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 35: {24}, 36: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 37: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 38: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 39: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 40: {31, 7}, 41: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 42: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 43: {34, 44, 109, 54}, 44: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 45: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 46: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 47: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 48: {41, 22}, 49: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 50: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 51: {34, 44, 109, 54}, 52: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 53: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 54: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 55: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 56: {51}, 57: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 58: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 59: {34, 44, 109, 54}, 60: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 61: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 62: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 63: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 64: {61}, 65: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 66: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 67: {64, 74, 82, 115, 89}, 68: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 69: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 70: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 71: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 72: {71}, 73: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 74: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 75: {64, 74, 82, 115, 89}, 76: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 77: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 78: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 79: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 80: {87, 79}, 81: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 82: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 83: {64, 74, 82, 115, 89}, 84: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 85: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 86: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 87: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 88: {87, 79}, 89: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 90: {64, 74, 82, 115, 89}, 91: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 92: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 93: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 94: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 95: {95}, 96: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 97: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 98: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 99: {113, 99}, 100: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 101: {107, 101}, 102: {102}, 103: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 104: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 105: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 106: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 107: {107, 101}, 108: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 109: {34, 44, 109, 54}, 110: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 111: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 112: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 113: {113, 99}, 114: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 115: {64, 74, 82, 115, 89}, 116: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 117: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 118: {118, 14}, 119: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 120: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 121: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 122: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 123: {123}, 124: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 125: {97, 66, 36, 8, 104, 76, 46, 111, 17, 84, 119, 56, 26, 91, 125}, 126: {2, 6, 11, 18, 23, 30, 32, 33, 40, 42, 43, 50, 52, 53, 60, 62, 63, 70, 72, 73, 78, 80, 81, 86, 88, 92, 98, 106, 108, 112, 117, 120, 126}, 127: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 128: {128}, 129: {129, 4, 9, 10, 12, 16, 19, 25, 27, 35, 37, 45, 47, 55, 57, 65, 67, 75, 77, 83, 85, 90, 93, 96, 100, 103, 105, 110, 114, 116, 121, 122, 124, 127}, 130: {130}})
Equivalent! frozenset({34, 44, 109, 54}) {51, 43, 109, 59}
Equivalent! frozenset({35, 45, 110, 55}) {110, 44, 52, 60}
Equivalent! frozenset({64, 82, 115, 89, 74}) {67, 75, 83, 115, 90}
Equivalent! frozenset({65, 83, 116, 90, 75}) {68, 76, 116, 84, 91}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb3378ae6a8>, {0: {0}, 1: {48}, 2: {49}, 3: {38}, 4: {39}, 5: {28}, 6: {29}, 7: {20}, 8: {21}, 9: {58}, 10: {59}, 11: {68}, 12: {69}, 13: {13}, 14: {94}, 15: {1}, 16: {2}, 17: {3}, 18: {4}, 19: {5}, 20: {6}, 21: {7}, 22: {8}, 23: {9}, 24: {10}, 25: {11}, 26: {12}, 27: {14}, 28: {15}, 29: {16}, 30: {17}, 31: {18}, 32: {19}, 33: {22}, 34: {23}, 35: {24}, 36: {25}, 37: {26}, 38: {27}, 39: {30}, 40: {31}, 41: {32}, 42: {33, 43, 108, 53}, 43: {44}, 44: {45}, 45: {36}, 46: {37}, 47: {40}, 48: {41}, 49: {42}, 50: {33, 43, 108, 53}, 51: {34}, 52: {110}, 53: {46}, 54: {47}, 55: {50}, 56: {51}, 57: {52}, 58: {33, 43, 108, 53}, 59: {54}, 60: {55}, 61: {56}, 62: {57}, 63: {60}, 64: {61}, 65: {62}, 66: {73, 108, 81, 88, 63}, 67: {64}, 68: {65}, 69: {66}, 70: {67}, 71: {70}, 72: {71}, 73: {72}, 74: {73, 108, 81, 88, 63}, 75: {82}, 76: {83}, 77: {76}, 78: {77}, 79: {78}, 80: {79}, 81: {80}, 82: {73, 108, 81, 88, 63}, 83: {115}, 84: {90}, 85: {84}, 86: {85}, 87: {86}, 88: {87}, 89: {73, 108, 81, 88, 63}, 90: {74}, 91: {75}, 92: {91}, 93: {92}, 94: {93}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {33, 73, 43, 108, 81, 53, 88, 63}, 109: {109}, 110: {35}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {89}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 bitcast bitcast
EXACT 7 getelementptr getelementptr
EXACT 8 bitcast bitcast
EXACT 9 getelementptr getelementptr
EXACT 10 bitcast bitcast
EXACT 11 getelementptr getelementptr
EXACT 12 bitcast bitcast
EXACT 13 getelementptr getelementptr
EXACT 14 getelementptr getelementptr
EXACT 15 getelementptr getelementptr
EXACT 16 load load
EXACT 17 add add
EXACT 18 store store
EXACT 19 getelementptr getelementptr
EXACT 20 load load
EXACT 21 add add
EXACT 22 inttoptr inttoptr
EXACT 23 store store
EXACT 24 store store
EXACT 25 load load
EXACT 26 store store
EXACT 27 add add
EXACT 28 add add
EXACT 29 store store
EXACT 30 inttoptr inttoptr
EXACT 31 load load
EXACT 32 store store
EXACT 33 add add
EXACT 34 load load
EXACT 35 add add
EXACT 36 store store
EXACT 37 inttoptr inttoptr
EXACT 38 store store
EXACT 39 load load
EXACT 40 add add
EXACT 41 load load
MORE 42 POT: 4
EXACT 43 add add
EXACT 44 store store
EXACT 45 inttoptr inttoptr
EXACT 46 store store
EXACT 47 load load
EXACT 48 add add
EXACT 49 load load
MORE 50 POT: 4
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
MORE 58 POT: 4
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
MORE 66 POT: 5
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
MORE 74 POT: 5
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
EXACT 81 load load
MORE 82 POT: 5
EXACT 83 add add
EXACT 84 store store
EXACT 85 inttoptr inttoptr
EXACT 86 store store
EXACT 87 load load
EXACT 88 add add
MORE 89 POT: 5
EXACT 90 add add
EXACT 91 store store
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 store store
EXACT 95 add add
EXACT 96 store store
EXACT 97 inttoptr inttoptr
EXACT 98 load load
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 add add
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 store store
EXACT 106 load load
EXACT 107 add add
MORE 108 POT: 8
EXACT 109 add add
EXACT 110 store store
EXACT 111 inttoptr inttoptr
EXACT 112 load load
EXACT 113 zext zext
EXACT 114 store store
EXACT 115 add add
EXACT 116 store store
EXACT 117 load load
EXACT 118 add add
EXACT 119 inttoptr inttoptr
EXACT 120 load load
EXACT 121 store store
EXACT 122 store store
EXACT 123 add add
EXACT 124 store store
EXACT 125 inttoptr inttoptr
EXACT 126 load load
EXACT 127 store store
EXACT 128 add add
EXACT 129 store store
EXACT 130 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RAX.i30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%11 = add i64 %7, 8', '%12 = add i64 %10, 7', 'store i64 %12, i64* %3, align 8', '%13 = inttoptr i64 %11 to i64*', '%14 = load i64, i64* %13, align 8', 'store i64 %14, i64* %RAX.i30, align 8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %15 to i32*', '%16 = add i64 %7, -12', '%17 = load i32, i32* %EDI.i, align 4', '%18 = add i64 %10, 10', 'store i64 %18, i64* %3, align 8', '%19 = inttoptr i64 %16 to i32*', 'store i32 %17, i32* %19, align 4', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI.i = bitcast %union.anon* %20 to i32*', '%21 = load i64, i64* %RBP.i, align 8', '%22 = add i64 %21, -8', '%23 = load i32, i32* %ESI.i, align 4', '%25 = add i64 %24, 3', 'store i64 %25, i64* %3, align 8', '%26 = inttoptr i64 %22 to i32*', 'store i32 %23, i32* %26, align 4', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%EDX.i = bitcast %union.anon* %27 to i32*', '%28 = load i64, i64* %RBP.i, align 8', '%29 = add i64 %28, -12', '%30 = load i32, i32* %EDX.i, align 4', '%32 = add i64 %31, 3', 'store i64 %32, i64* %3, align 8', '%33 = inttoptr i64 %29 to i32*', 'store i32 %30, i32* %33, align 4', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i21 = bitcast %union.anon* %34 to i32*', '%35 = load i64, i64* %RBP.i, align 8', '%36 = add i64 %35, -16', '%37 = load i32, i32* %ECX.i21, align 4', '%39 = add i64 %38, 3', 'store i64 %39, i64* %3, align 8', '%40 = inttoptr i64 %36 to i32*', 'store i32 %37, i32* %40, align 4', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8D.i = bitcast %union.anon* %41 to i32*', '%42 = load i64, i64* %RBP.i, align 8', '%43 = add i64 %42, -20', '%44 = load i32, i32* %R8D.i, align 4', '%46 = add i64 %45, 4', 'store i64 %46, i64* %3, align 8', '%47 = inttoptr i64 %43 to i32*', 'store i32 %44, i32* %47, align 4', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0', '%R9D.i = bitcast %union.anon* %48 to i32*', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -24', '%51 = load i32, i32* %R9D.i, align 4', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i32*', 'store i32 %51, i32* %54, align 4', '%55 = load i64, i64* %RBP.i, align 8', '%56 = add i64 %55, -32', '%57 = load i64, i64* %RAX.i30, align 8', '%59 = add i64 %58, 4', 'store i64 %59, i64* %3, align 8', '%60 = inttoptr i64 %56 to i64*', 'store i64 %57, i64* %60, align 8', '%61 = load i64, i64* %RBP.i, align 8', '%62 = add i64 %61, -32', '%64 = add i64 %63, 4', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %62 to i64*', '%66 = load i64, i64* %65, align 8', 'store i64 %66, i64* %RAX.i30, align 8', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %34, i64 0, i32 0', '%67 = add i64 %63, 6', 'store i64 %67, i64* %3, align 8', '%68 = inttoptr i64 %66 to i32*', '%69 = load i32, i32* %68, align 4', '%70 = zext i32 %69 to i64', 'store i64 %70, i64* %RCX.i, align 8', '%71 = add i64 %61, -36', '%72 = add i64 %63, 9', 'store i64 %72, i64* %3, align 8', '%73 = inttoptr i64 %71 to i32*', 'store i32 %69, i32* %73, align 4', '%74 = load i64, i64* %RBP.i, align 8', '%75 = add i64 %74, -36', '%77 = add i64 %76, 3', 'store i64 %77, i64* %3, align 8', '%78 = inttoptr i64 %75 to i32*', '%79 = load i32, i32* %78, align 4', '%80 = zext i32 %79 to i64', 'store i64 %80, i64* %RAX.i30, align 8', '%81 = add i64 %76, 4', 'store i64 %81, i64* %3, align 8', '%82 = load i64, i64* %6, align 8', '%83 = add i64 %82, 8', '%84 = inttoptr i64 %82 to i64*', '%85 = load i64, i64* %84, align 8', 'store i64 %85, i64* %RBP.i, align 8', 'store i64 %83, i64* %6, align 8', '%86 = add i64 %76, 5', 'store i64 %86, i64* %3, align 8', '%87 = inttoptr i64 %83 to i64*', '%88 = load i64, i64* %87, align 8', 'store i64 %88, i64* %3, align 8', '%89 = add i64 %82, 16', 'store i64 %89, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %RAX.i30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %11 = add i64 %7, 8
Found line to remove! %12 = add i64 %10, 7
Found line to remove! store i64 %12, i64* %3, align 8
Found line to remove! %13 = inttoptr i64 %11 to i64*
Found line to remove! %14 = load i64, i64* %13, align 8
Found line to remove! store i64 %14, i64* %RAX.i30, align 8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %15 to i32*
Found line to remove! %16 = add i64 %7, -12
Found line to remove! %17 = load i32, i32* %EDI.i, align 4
Found line to remove! %18 = add i64 %10, 10
Found line to remove! store i64 %18, i64* %3, align 8
Found line to remove! %19 = inttoptr i64 %16 to i32*
Found line to remove! store i32 %17, i32* %19, align 4
Found line to remove! %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI.i = bitcast %union.anon* %20 to i32*
Found line to remove! %21 = load i64, i64* %RBP.i, align 8
Found line to remove! %22 = add i64 %21, -8
Found line to remove! %23 = load i32, i32* %ESI.i, align 4
Keep: %24 = load i64, i64* %3, align 8
Found line to remove! %25 = add i64 %24, 3
Found line to remove! store i64 %25, i64* %3, align 8
Found line to remove! %26 = inttoptr i64 %22 to i32*
Found line to remove! store i32 %23, i32* %26, align 4
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %EDX.i = bitcast %union.anon* %27 to i32*
Found line to remove! %28 = load i64, i64* %RBP.i, align 8
Found line to remove! %29 = add i64 %28, -12
Found line to remove! %30 = load i32, i32* %EDX.i, align 4
Keep: %31 = load i64, i64* %3, align 8
Found line to remove! %32 = add i64 %31, 3
Found line to remove! store i64 %32, i64* %3, align 8
Found line to remove! %33 = inttoptr i64 %29 to i32*
Found line to remove! store i32 %30, i32* %33, align 4
Found line to remove! %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX.i21 = bitcast %union.anon* %34 to i32*
Found line to remove! %35 = load i64, i64* %RBP.i, align 8
Found line to remove! %36 = add i64 %35, -16
Found line to remove! %37 = load i32, i32* %ECX.i21, align 4
Keep: %38 = load i64, i64* %3, align 8
Found line to remove! %39 = add i64 %38, 3
Found line to remove! store i64 %39, i64* %3, align 8
Found line to remove! %40 = inttoptr i64 %36 to i32*
Found line to remove! store i32 %37, i32* %40, align 4
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8D.i = bitcast %union.anon* %41 to i32*
Found line to remove! %42 = load i64, i64* %RBP.i, align 8
Found line to remove! %43 = add i64 %42, -20
Found line to remove! %44 = load i32, i32* %R8D.i, align 4
Keep: %45 = load i64, i64* %3, align 8
Found line to remove! %46 = add i64 %45, 4
Found line to remove! store i64 %46, i64* %3, align 8
Found line to remove! %47 = inttoptr i64 %43 to i32*
Found line to remove! store i32 %44, i32* %47, align 4
Found line to remove! %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
Found line to remove! %R9D.i = bitcast %union.anon* %48 to i32*
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -24
Found line to remove! %51 = load i32, i32* %R9D.i, align 4
Keep: %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = inttoptr i64 %50 to i32*
Found line to remove! store i32 %51, i32* %54, align 4
Found line to remove! %55 = load i64, i64* %RBP.i, align 8
Found line to remove! %56 = add i64 %55, -32
Found line to remove! %57 = load i64, i64* %RAX.i30, align 8
Keep: %58 = load i64, i64* %3, align 8
Found line to remove! %59 = add i64 %58, 4
Found line to remove! store i64 %59, i64* %3, align 8
Found line to remove! %60 = inttoptr i64 %56 to i64*
Found line to remove! store i64 %57, i64* %60, align 8
Found line to remove! %61 = load i64, i64* %RBP.i, align 8
Found line to remove! %62 = add i64 %61, -32
Keep: %63 = load i64, i64* %3, align 8
Found line to remove! %64 = add i64 %63, 4
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %65 = inttoptr i64 %62 to i64*
Found line to remove! %66 = load i64, i64* %65, align 8
Found line to remove! store i64 %66, i64* %RAX.i30, align 8
Found line to remove! %RCX.i = getelementptr inbounds %union.anon, %union.anon* %34, i64 0, i32 0
Found line to remove! %67 = add i64 %63, 6
Found line to remove! store i64 %67, i64* %3, align 8
Found line to remove! %68 = inttoptr i64 %66 to i32*
Found line to remove! %69 = load i32, i32* %68, align 4
Found line to remove! %70 = zext i32 %69 to i64
Found line to remove! store i64 %70, i64* %RCX.i, align 8
Found line to remove! %71 = add i64 %61, -36
Found line to remove! %72 = add i64 %63, 9
Found line to remove! store i64 %72, i64* %3, align 8
Found line to remove! %73 = inttoptr i64 %71 to i32*
Found line to remove! store i32 %69, i32* %73, align 4
Found line to remove! %74 = load i64, i64* %RBP.i, align 8
Found line to remove! %75 = add i64 %74, -36
Keep: %76 = load i64, i64* %3, align 8
Found line to remove! %77 = add i64 %76, 3
Found line to remove! store i64 %77, i64* %3, align 8
Found line to remove! %78 = inttoptr i64 %75 to i32*
Found line to remove! %79 = load i32, i32* %78, align 4
Found line to remove! %80 = zext i32 %79 to i64
Found line to remove! store i64 %80, i64* %RAX.i30, align 8
Found line to remove! %81 = add i64 %76, 4
Found line to remove! store i64 %81, i64* %3, align 8
Found line to remove! %82 = load i64, i64* %6, align 8
Found line to remove! %83 = add i64 %82, 8
Found line to remove! %84 = inttoptr i64 %82 to i64*
Found line to remove! %85 = load i64, i64* %84, align 8
Found line to remove! store i64 %85, i64* %RBP.i, align 8
Found line to remove! store i64 %83, i64* %6, align 8
Found line to remove! %86 = add i64 %76, 5
Found line to remove! store i64 %86, i64* %3, align 8
Found line to remove! %87 = inttoptr i64 %83 to i64*
Found line to remove! %88 = load i64, i64* %87, align 8
Found line to remove! store i64 %88, i64* %3, align 8
Found line to remove! %89 = add i64 %82, 16
Found line to remove! store i64 %89, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RAX.i30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%11 = add i64 %7, 8', '%12 = add i64 %10, 7', 'store i64 %12, i64* %3, align 8', '%13 = inttoptr i64 %11 to i64*', '%14 = load i64, i64* %13, align 8', 'store i64 %14, i64* %RAX.i30, align 8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %15 to i32*', '%16 = add i64 %7, -12', '%17 = load i32, i32* %EDI.i, align 4', '%18 = add i64 %10, 10', 'store i64 %18, i64* %3, align 8', '%19 = inttoptr i64 %16 to i32*', 'store i32 %17, i32* %19, align 4', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI.i = bitcast %union.anon* %20 to i32*', '%21 = load i64, i64* %RBP.i, align 8', '%22 = add i64 %21, -8', '%23 = load i32, i32* %ESI.i, align 4', '%25 = add i64 %24, 3', 'store i64 %25, i64* %3, align 8', '%26 = inttoptr i64 %22 to i32*', 'store i32 %23, i32* %26, align 4', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%EDX.i = bitcast %union.anon* %27 to i32*', '%28 = load i64, i64* %RBP.i, align 8', '%29 = add i64 %28, -12', '%30 = load i32, i32* %EDX.i, align 4', '%32 = add i64 %31, 3', 'store i64 %32, i64* %3, align 8', '%33 = inttoptr i64 %29 to i32*', 'store i32 %30, i32* %33, align 4', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i21 = bitcast %union.anon* %34 to i32*', '%35 = load i64, i64* %RBP.i, align 8', '%36 = add i64 %35, -16', '%37 = load i32, i32* %ECX.i21, align 4', '%39 = add i64 %38, 3', 'store i64 %39, i64* %3, align 8', '%40 = inttoptr i64 %36 to i32*', 'store i32 %37, i32* %40, align 4', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8D.i = bitcast %union.anon* %41 to i32*', '%42 = load i64, i64* %RBP.i, align 8', '%43 = add i64 %42, -20', '%44 = load i32, i32* %R8D.i, align 4', '%46 = add i64 %45, 4', 'store i64 %46, i64* %3, align 8', '%47 = inttoptr i64 %43 to i32*', 'store i32 %44, i32* %47, align 4', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0', '%R9D.i = bitcast %union.anon* %48 to i32*', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -24', '%51 = load i32, i32* %R9D.i, align 4', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i32*', 'store i32 %51, i32* %54, align 4', '%55 = load i64, i64* %RBP.i, align 8', '%56 = add i64 %55, -32', '%57 = load i64, i64* %RAX.i30, align 8', '%59 = add i64 %58, 4', 'store i64 %59, i64* %3, align 8', '%60 = inttoptr i64 %56 to i64*', 'store i64 %57, i64* %60, align 8', '%61 = load i64, i64* %RBP.i, align 8', '%62 = add i64 %61, -32', '%64 = add i64 %63, 4', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %62 to i64*', '%66 = load i64, i64* %65, align 8', 'store i64 %66, i64* %RAX.i30, align 8', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %34, i64 0, i32 0', '%67 = add i64 %63, 6', 'store i64 %67, i64* %3, align 8', '%68 = inttoptr i64 %66 to i32*', '%69 = load i32, i32* %68, align 4', '%70 = zext i32 %69 to i64', 'store i64 %70, i64* %RCX.i, align 8', '%71 = add i64 %61, -36', '%72 = add i64 %63, 9', 'store i64 %72, i64* %3, align 8', '%73 = inttoptr i64 %71 to i32*', 'store i32 %69, i32* %73, align 4', '%74 = load i64, i64* %RBP.i, align 8', '%75 = add i64 %74, -36', '%77 = add i64 %76, 3', 'store i64 %77, i64* %3, align 8', '%78 = inttoptr i64 %75 to i32*', '%79 = load i32, i32* %78, align 4', '%80 = zext i32 %79 to i64', 'store i64 %80, i64* %RAX.i30, align 8', '%81 = add i64 %76, 4', 'store i64 %81, i64* %3, align 8', '%82 = load i64, i64* %6, align 8', '%83 = add i64 %82, 8', '%84 = inttoptr i64 %82 to i64*', '%85 = load i64, i64* %84, align 8', 'store i64 %85, i64* %RBP.i, align 8', 'store i64 %83, i64* %6, align 8', '%86 = add i64 %76, 5', 'store i64 %86, i64* %3, align 8', '%87 = inttoptr i64 %83 to i64*', '%88 = load i64, i64* %87, align 8', 'store i64 %88, i64* %3, align 8', '%89 = add i64 %82, 16', 'store i64 %89, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%EDX = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %5 to i32*', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %6 to i32*', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8D = bitcast %union.anon* %7 to i32*', '%8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0', '%R9D = bitcast %union.anon* %8 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%9 = load i64, i64* %RBP, align 8', '%10 = add i64 %1, 1', 'store i64 %10, i64* %PC, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%12 = load i64, i64* %11, align 8', '%13 = add i64 %12, -8', '%14 = inttoptr i64 %13 to i64*', 'store i64 %9, i64* %14, align 8', 'store i64 %13, i64* %11, align 8', '%15 = load i64, i64* %PC, align 8', 'store i64 %13, i64* %RBP, align 8', '%16 = add i64 %12, 8', '%17 = add i64 %15, 7', 'store i64 %17, i64* %PC, align 8', '%18 = inttoptr i64 %16 to i64*', '%19 = load i64, i64* %18, align 8', 'store i64 %19, i64* %RAX, align 8', '%20 = add i64 %12, -12', '%21 = load i32, i32* %EDI, align 4', '%22 = add i64 %15, 10', 'store i64 %22, i64* %PC, align 8', '%23 = inttoptr i64 %20 to i32*', 'store i32 %21, i32* %23, align 4', '%24 = load i64, i64* %RBP, align 8', '%25 = add i64 %24, -8', '%26 = load i32, i32* %ESI, align 4', '%28 = add i64 %27, 3', 'store i64 %28, i64* %PC, align 8', '%29 = inttoptr i64 %25 to i32*', 'store i32 %26, i32* %29, align 4', '%30 = load i64, i64* %RBP, align 8', '%31 = add i64 %30, -12', '%32 = load i32, i32* %EDX, align 4', '%34 = add i64 %33, 3', 'store i64 %34, i64* %PC, align 8', '%35 = inttoptr i64 %31 to i32*', 'store i32 %32, i32* %35, align 4', '%36 = load i64, i64* %RBP, align 8', '%37 = add i64 %36, -16', '%38 = load i32, i32* %ECX, align 4', '%40 = add i64 %39, 3', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %37 to i32*', 'store i32 %38, i32* %41, align 4', '%42 = load i64, i64* %RBP, align 8', '%43 = add i64 %42, -20', '%44 = load i32, i32* %R8D, align 4', '%46 = add i64 %45, 4', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %43 to i32*', 'store i32 %44, i32* %47, align 4', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -24', '%50 = load i32, i32* %R9D, align 4', '%52 = add i64 %51, 4', 'store i64 %52, i64* %PC, align 8', '%53 = inttoptr i64 %49 to i32*', 'store i32 %50, i32* %53, align 4', '%54 = load i64, i64* %RBP, align 8', '%55 = add i64 %54, -32', '%56 = load i64, i64* %RAX, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%59 = inttoptr i64 %55 to i64*', 'store i64 %56, i64* %59, align 8', '%60 = load i64, i64* %RBP, align 8', '%61 = add i64 %60, -32', '%63 = add i64 %62, 4', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %61 to i64*', '%65 = load i64, i64* %64, align 8', 'store i64 %65, i64* %RAX, align 8', '%66 = add i64 %62, 6', 'store i64 %66, i64* %PC, align 8', '%67 = inttoptr i64 %65 to i32*', '%68 = load i32, i32* %67, align 4', '%69 = zext i32 %68 to i64', 'store i64 %69, i64* %RCX, align 8', '%70 = add i64 %60, -36', '%71 = add i64 %62, 9', 'store i64 %71, i64* %PC, align 8', '%72 = inttoptr i64 %70 to i32*', 'store i32 %68, i32* %72, align 4', '%73 = load i64, i64* %RBP, align 8', '%74 = add i64 %73, -36', '%76 = add i64 %75, 3', 'store i64 %76, i64* %PC, align 8', '%77 = inttoptr i64 %74 to i32*', '%78 = load i32, i32* %77, align 4', '%79 = zext i32 %78 to i64', 'store i64 %79, i64* %RAX, align 8', '%80 = add i64 %75, 4', 'store i64 %80, i64* %PC, align 8', '%81 = load i64, i64* %11, align 8', '%82 = add i64 %81, 8', '%83 = inttoptr i64 %81 to i64*', '%84 = load i64, i64* %83, align 8', 'store i64 %84, i64* %RBP, align 8', 'store i64 %82, i64* %11, align 8', '%85 = add i64 %75, 5', 'store i64 %85, i64* %PC, align 8', '%86 = inttoptr i64 %82 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %PC, align 8', '%88 = add i64 %81, 16', 'store i64 %88, i64* %11, align 8'])
Keep: block_400520:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %EDX = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %5 to i32*
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %6 to i32*
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
Found line to remove! %R8D = bitcast %union.anon* %7 to i32*
Found line to remove! %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
Found line to remove! %R9D = bitcast %union.anon* %8 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %9 = load i64, i64* %RBP, align 8
Found line to remove! %10 = add i64 %1, 1
Found line to remove! store i64 %10, i64* %PC, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %12 = load i64, i64* %11, align 8
Found line to remove! %13 = add i64 %12, -8
Found line to remove! %14 = inttoptr i64 %13 to i64*
Found line to remove! store i64 %9, i64* %14, align 8
Found line to remove! store i64 %13, i64* %11, align 8
Found line to remove! %15 = load i64, i64* %PC, align 8
Found line to remove! store i64 %13, i64* %RBP, align 8
Found line to remove! %16 = add i64 %12, 8
Found line to remove! %17 = add i64 %15, 7
Found line to remove! store i64 %17, i64* %PC, align 8
Found line to remove! %18 = inttoptr i64 %16 to i64*
Found line to remove! %19 = load i64, i64* %18, align 8
Found line to remove! store i64 %19, i64* %RAX, align 8
Found line to remove! %20 = add i64 %12, -12
Found line to remove! %21 = load i32, i32* %EDI, align 4
Found line to remove! %22 = add i64 %15, 10
Found line to remove! store i64 %22, i64* %PC, align 8
Found line to remove! %23 = inttoptr i64 %20 to i32*
Found line to remove! store i32 %21, i32* %23, align 4
Found line to remove! %24 = load i64, i64* %RBP, align 8
Found line to remove! %25 = add i64 %24, -8
Found line to remove! %26 = load i32, i32* %ESI, align 4
Keep: %27 = load i64, i64* %PC, align 8
Found line to remove! %28 = add i64 %27, 3
Found line to remove! store i64 %28, i64* %PC, align 8
Found line to remove! %29 = inttoptr i64 %25 to i32*
Found line to remove! store i32 %26, i32* %29, align 4
Found line to remove! %30 = load i64, i64* %RBP, align 8
Found line to remove! %31 = add i64 %30, -12
Found line to remove! %32 = load i32, i32* %EDX, align 4
Keep: %33 = load i64, i64* %PC, align 8
Found line to remove! %34 = add i64 %33, 3
Found line to remove! store i64 %34, i64* %PC, align 8
Found line to remove! %35 = inttoptr i64 %31 to i32*
Found line to remove! store i32 %32, i32* %35, align 4
Found line to remove! %36 = load i64, i64* %RBP, align 8
Found line to remove! %37 = add i64 %36, -16
Found line to remove! %38 = load i32, i32* %ECX, align 4
Keep: %39 = load i64, i64* %PC, align 8
Found line to remove! %40 = add i64 %39, 3
Found line to remove! store i64 %40, i64* %PC, align 8
Found line to remove! %41 = inttoptr i64 %37 to i32*
Found line to remove! store i32 %38, i32* %41, align 4
Found line to remove! %42 = load i64, i64* %RBP, align 8
Found line to remove! %43 = add i64 %42, -20
Found line to remove! %44 = load i32, i32* %R8D, align 4
Keep: %45 = load i64, i64* %PC, align 8
Found line to remove! %46 = add i64 %45, 4
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = inttoptr i64 %43 to i32*
Found line to remove! store i32 %44, i32* %47, align 4
Found line to remove! %48 = load i64, i64* %RBP, align 8
Found line to remove! %49 = add i64 %48, -24
Found line to remove! %50 = load i32, i32* %R9D, align 4
Keep: %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %PC, align 8
Found line to remove! %53 = inttoptr i64 %49 to i32*
Found line to remove! store i32 %50, i32* %53, align 4
Found line to remove! %54 = load i64, i64* %RBP, align 8
Found line to remove! %55 = add i64 %54, -32
Found line to remove! %56 = load i64, i64* %RAX, align 8
Keep: %57 = load i64, i64* %PC, align 8
Found line to remove! %58 = add i64 %57, 4
Found line to remove! store i64 %58, i64* %PC, align 8
Found line to remove! %59 = inttoptr i64 %55 to i64*
Found line to remove! store i64 %56, i64* %59, align 8
Found line to remove! %60 = load i64, i64* %RBP, align 8
Found line to remove! %61 = add i64 %60, -32
Keep: %62 = load i64, i64* %PC, align 8
Found line to remove! %63 = add i64 %62, 4
Found line to remove! store i64 %63, i64* %PC, align 8
Found line to remove! %64 = inttoptr i64 %61 to i64*
Found line to remove! %65 = load i64, i64* %64, align 8
Found line to remove! store i64 %65, i64* %RAX, align 8
Found line to remove! %66 = add i64 %62, 6
Found line to remove! store i64 %66, i64* %PC, align 8
Found line to remove! %67 = inttoptr i64 %65 to i32*
Found line to remove! %68 = load i32, i32* %67, align 4
Found line to remove! %69 = zext i32 %68 to i64
Found line to remove! store i64 %69, i64* %RCX, align 8
Found line to remove! %70 = add i64 %60, -36
Found line to remove! %71 = add i64 %62, 9
Found line to remove! store i64 %71, i64* %PC, align 8
Found line to remove! %72 = inttoptr i64 %70 to i32*
Found line to remove! store i32 %68, i32* %72, align 4
Found line to remove! %73 = load i64, i64* %RBP, align 8
Found line to remove! %74 = add i64 %73, -36
Keep: %75 = load i64, i64* %PC, align 8
Found line to remove! %76 = add i64 %75, 3
Found line to remove! store i64 %76, i64* %PC, align 8
Found line to remove! %77 = inttoptr i64 %74 to i32*
Found line to remove! %78 = load i32, i32* %77, align 4
Found line to remove! %79 = zext i32 %78 to i64
Found line to remove! store i64 %79, i64* %RAX, align 8
Found line to remove! %80 = add i64 %75, 4
Found line to remove! store i64 %80, i64* %PC, align 8
Found line to remove! %81 = load i64, i64* %11, align 8
Found line to remove! %82 = add i64 %81, 8
Found line to remove! %83 = inttoptr i64 %81 to i64*
Found line to remove! %84 = load i64, i64* %83, align 8
Found line to remove! store i64 %84, i64* %RBP, align 8
Found line to remove! store i64 %82, i64* %11, align 8
Found line to remove! %85 = add i64 %75, 5
Found line to remove! store i64 %85, i64* %PC, align 8
Found line to remove! %86 = inttoptr i64 %82 to i64*
Found line to remove! %87 = load i64, i64* %86, align 8
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %88 = add i64 %81, 16
Found line to remove! store i64 %88, i64* %11, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%EDX = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %5 to i32*', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %6 to i32*', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0', '%R8D = bitcast %union.anon* %7 to i32*', '%8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0', '%R9D = bitcast %union.anon* %8 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%9 = load i64, i64* %RBP, align 8', '%10 = add i64 %1, 1', 'store i64 %10, i64* %PC, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%12 = load i64, i64* %11, align 8', '%13 = add i64 %12, -8', '%14 = inttoptr i64 %13 to i64*', 'store i64 %9, i64* %14, align 8', 'store i64 %13, i64* %11, align 8', '%15 = load i64, i64* %PC, align 8', 'store i64 %13, i64* %RBP, align 8', '%16 = add i64 %12, 8', '%17 = add i64 %15, 7', 'store i64 %17, i64* %PC, align 8', '%18 = inttoptr i64 %16 to i64*', '%19 = load i64, i64* %18, align 8', 'store i64 %19, i64* %RAX, align 8', '%20 = add i64 %12, -12', '%21 = load i32, i32* %EDI, align 4', '%22 = add i64 %15, 10', 'store i64 %22, i64* %PC, align 8', '%23 = inttoptr i64 %20 to i32*', 'store i32 %21, i32* %23, align 4', '%24 = load i64, i64* %RBP, align 8', '%25 = add i64 %24, -8', '%26 = load i32, i32* %ESI, align 4', '%28 = add i64 %27, 3', 'store i64 %28, i64* %PC, align 8', '%29 = inttoptr i64 %25 to i32*', 'store i32 %26, i32* %29, align 4', '%30 = load i64, i64* %RBP, align 8', '%31 = add i64 %30, -12', '%32 = load i32, i32* %EDX, align 4', '%34 = add i64 %33, 3', 'store i64 %34, i64* %PC, align 8', '%35 = inttoptr i64 %31 to i32*', 'store i32 %32, i32* %35, align 4', '%36 = load i64, i64* %RBP, align 8', '%37 = add i64 %36, -16', '%38 = load i32, i32* %ECX, align 4', '%40 = add i64 %39, 3', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %37 to i32*', 'store i32 %38, i32* %41, align 4', '%42 = load i64, i64* %RBP, align 8', '%43 = add i64 %42, -20', '%44 = load i32, i32* %R8D, align 4', '%46 = add i64 %45, 4', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %43 to i32*', 'store i32 %44, i32* %47, align 4', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -24', '%50 = load i32, i32* %R9D, align 4', '%52 = add i64 %51, 4', 'store i64 %52, i64* %PC, align 8', '%53 = inttoptr i64 %49 to i32*', 'store i32 %50, i32* %53, align 4', '%54 = load i64, i64* %RBP, align 8', '%55 = add i64 %54, -32', '%56 = load i64, i64* %RAX, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%59 = inttoptr i64 %55 to i64*', 'store i64 %56, i64* %59, align 8', '%60 = load i64, i64* %RBP, align 8', '%61 = add i64 %60, -32', '%63 = add i64 %62, 4', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %61 to i64*', '%65 = load i64, i64* %64, align 8', 'store i64 %65, i64* %RAX, align 8', '%66 = add i64 %62, 6', 'store i64 %66, i64* %PC, align 8', '%67 = inttoptr i64 %65 to i32*', '%68 = load i32, i32* %67, align 4', '%69 = zext i32 %68 to i64', 'store i64 %69, i64* %RCX, align 8', '%70 = add i64 %60, -36', '%71 = add i64 %62, 9', 'store i64 %71, i64* %PC, align 8', '%72 = inttoptr i64 %70 to i32*', 'store i32 %68, i32* %72, align 4', '%73 = load i64, i64* %RBP, align 8', '%74 = add i64 %73, -36', '%76 = add i64 %75, 3', 'store i64 %76, i64* %PC, align 8', '%77 = inttoptr i64 %74 to i32*', '%78 = load i32, i32* %77, align 4', '%79 = zext i32 %78 to i64', 'store i64 %79, i64* %RAX, align 8', '%80 = add i64 %75, 4', 'store i64 %80, i64* %PC, align 8', '%81 = load i64, i64* %11, align 8', '%82 = add i64 %81, 8', '%83 = inttoptr i64 %81 to i64*', '%84 = load i64, i64* %83, align 8', 'store i64 %84, i64* %RBP, align 8', 'store i64 %82, i64* %11, align 8', '%85 = add i64 %75, 5', 'store i64 %85, i64* %PC, align 8', '%86 = inttoptr i64 %82 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %PC, align 8', '%88 = add i64 %81, 16', 'store i64 %88, i64* %11, align 8'])Writing '/tmp/tmpsl_ev8t9.dot'...
Writing '/tmp/tmpsl_ev8t9.dot':Done

Reading LLVM: /tmp/tmp9if15n_f-query.ll
Extracting function [check] from /tmp/tmp9if15n_f-query.ll
Dot file generated!
Writing '/tmp/tmpu0lnsxsh.dot'...
Writing '/tmp/tmpu0lnsxsh.dot':Done

Reading LLVM: /tmp/tmprnr7kllh-target.ll
Extracting function [check] from /tmp/tmprnr7kllh-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb3378bfae8>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb3378bfae8>, {0: {0}})
EXACT 0 ret ret
================ Starting round 3
MAPPING:
- 0 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb33762db70>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb33762db70>, {0: {0}})
EXACT 0 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys([])
Keep: entry:
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_400520:
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_7_1/check/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_7_1/binary/test.mcsema.calls_renamed.ll check
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
