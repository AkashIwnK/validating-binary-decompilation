Matching sub_400490_main Vs main


[Info] Retrieve Potential Matches...
[0x55aed09560d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55aed09cff00]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55aed0990b10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55aed09d0260]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55aed099a7a8]:   %62 = load i64, i64* %RSP, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed099a808]:   %63 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed099a880]:   %64 = add i64 %62, 16 {
	[0x55aed09753f0]:  %65 = add i64 %63, 16
	}

[0x55aed099a900]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099a9c0]:   %65 = icmp ugt i64 %62, -17 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed099aa28]:   %66 = zext i1 %65 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed099aaa0]:   store i8 %66, i8* %14, align 1, !tbaa !1265 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099b118]:   %67 = trunc i64 %64 to i32 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed099b190]:   %68 = and i32 %67, 255 {
	[0x55aed0978340]:  %69 = and i32 %68, 255
	[0x55aed09e3780]:  %16 = and i32 %15, 255
	}

[0x55aed099b210]:   %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #9 {
	[0x55aed0974b00]:  %call2_4004a8 = tail call %struct.Memory.32* @sub_4004c0.printdata(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x55aed09b6e80]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55aed09fa620]:  %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
	}

[0x55aed099b2d8]:   %70 = trunc i32 %69 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed099b350]:   %71 = and i8 %70, 1 {
	[0x55aed09722c0]:  %26 = and i8 %25, 1
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	[0x55aed097b4c0]:  %78 = and i8 %77, 1
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed099b3d0]:   %72 = xor i8 %71, 1 {
	[0x55aed0977fc0]:  %73 = xor i8 %72, 1
	[0x55aed09e4bb0]:  %20 = xor i8 %19, 1
	}

[0x55aed099b450]:   store i8 %72, i8* %21, align 1, !tbaa !1279 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099bae0]:   %73 = xor i64 %62, 16 {
	[0x55aed0971ee0]:  %22 = xor i64 %8, 16
	[0x55aed0977d70]:  %74 = xor i64 %63, 16
	}

[0x55aed099bb60]:   %74 = xor i64 %73, %64 {
	[0x55aed0976420]:  %75 = xor i64 %74, %65
	[0x55aed097b780]:  %84 = xor i64 %81, %83
	[0x55aed09e3980]:  %35 = xor i64 %31, %34
	[0x55aed09e4880]:  %23 = xor i64 %22, %11
	}

[0x55aed099bbe0]:   %75 = lshr i64 %74, 4 {
	[0x55aed0971990]:  %24 = lshr i64 %23, 4
	[0x55aed0978b00]:  %76 = lshr i64 %75, 4
	}

[0x55aed099bc48]:   %76 = trunc i64 %75 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed099bcc0]:   %77 = and i8 %76, 1 {
	[0x55aed09722c0]:  %26 = and i8 %25, 1
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	[0x55aed097b4c0]:  %78 = and i8 %77, 1
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed099bd40]:   store i8 %77, i8* %27, align 1, !tbaa !1280 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099c3d0]:   %78 = icmp eq i64 %64, 0 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed099c438]:   %79 = zext i1 %78 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed099c4b0]:   store i8 %79, i8* %30, align 1, !tbaa !1281 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099cb40]:   %80 = lshr i64 %64, 63 {
	[0x55aed09792c0]:  %83 = lshr i64 %63, 63
	[0x55aed097aed0]:  %81 = lshr i64 %65, 63
	[0x55aed09e4ee0]:  %34 = lshr i64 %8, 63
	[0x55aed09e5100]:  %31 = lshr i64 %11, 63
	}

[0x55aed099cba8]:   %81 = trunc i64 %80 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed099cc20]:   store i8 %81, i8* %33, align 1, !tbaa !1282 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099d2b0]:   %82 = lshr i64 %62, 63 {
	[0x55aed09792c0]:  %83 = lshr i64 %63, 63
	[0x55aed097aed0]:  %81 = lshr i64 %65, 63
	[0x55aed09e4ee0]:  %34 = lshr i64 %8, 63
	[0x55aed09e5100]:  %31 = lshr i64 %11, 63
	}

[0x55aed099d330]:   %83 = xor i64 %80, %82 {
	[0x55aed0976420]:  %75 = xor i64 %74, %65
	[0x55aed097b780]:  %84 = xor i64 %81, %83
	[0x55aed09e3980]:  %35 = xor i64 %31, %34
	[0x55aed09e4880]:  %23 = xor i64 %22, %11
	}

[0x55aed099d3b0]:   %84 = add nuw nsw i64 %83, %80 {
	[0x55aed0972ea0]:  %85 = add nuw nsw i64 %84, %81
	[0x55aed0973800]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55aed099d430]:   %85 = icmp eq i64 %84, 2 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed099d498]:   %86 = zext i1 %85 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed099d510]:   store i8 %86, i8* %39, align 1, !tbaa !1283 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099dba0]:   %87 = add i64 %63, 5 {
	[0x55aed0972ac0]:  %88 = add i64 %64, 5
	}

[0x55aed099dc20]:   store i64 %87, i64* %PC, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099dce0]:   %88 = add i64 %62, 24 {
	[0x55aed0972790]:  %89 = add i64 %63, 24
	}

[0x55aed099dd48]:   %89 = inttoptr i64 %64 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed099dda8]:   %90 = load i64, i64* %89, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed099de20]:   store i64 %90, i64* %RBP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099dea0]:   store i64 %88, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099df20]:   %91 = add i64 %63, 6 {
	[0x55aed097e4b0]:  %92 = add i64 %64, 6
	}

[0x55aed099dfa0]:   store i64 %91, i64* %PC, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099e008]:   %92 = inttoptr i64 %88 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed099e068]:   %93 = load i64, i64* %92, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed099e0e0]:   store i64 %93, i64* %PC, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099e1a0]:   %94 = add i64 %62, 32 {
	[0x55aed097e090]:  %95 = add i64 %63, 32
	}

[0x55aed099e220]:   store i64 %94, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed099e288]:   ret %struct.Memory* %61 {
	[0x55aed09eaa98]:  ret %struct.Memory.32* %call2_4004a8
	}

[0x55aed09b7820]: %struct.State* %0 {
	[0x55aed0971ac0]:%struct.State.1* %0
	}

[0x55aed09b7860]: i64 %1 {
	[0x55aed09e4ab0]:i64 %1
	}

[0x55aed09b78a0]: %struct.Memory* %2 {
	[0x55aed09e3b80]:%struct.Memory.32* %2
	}

[0x55aed09b7b28]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed09b7ba0]:   %6 = add i64 %1, 1 {
	[0x55aed09df0b0]:  %5 = add i64 %1, 1
	}

[0x55aed09b7c20]:   store i64 %6, i64* %PC, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed09b7c88]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed09da608]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55aed09e5bc8]:  %EDI.i = bitcast %union.anon.5* %43 to i32*
	[0x55aed09e7348]:  %AL.i = bitcast %union.anon.5* %56 to i8*
	}

[0x55aed09da6d8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55aed09e5bc8]:  %EDI.i = bitcast %union.anon.5* %43 to i32*
	[0x55aed09e7348]:  %AL.i = bitcast %union.anon.5* %56 to i8*
	}

[0x55aed09f8790]:   %40 = add i64 %7, -12 {
	[0x55aed09e5760]:  %40 = add i64 %7, -12
	}

[0x55aed09f8810]:   %41 = add i64 %10, 14 {
	[0x55aed0973ac0]:  %41 = add i64 %10, 14
	}

[0x55aed09f8890]:   store i64 %41, i64* %PC, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed09f88f8]:   %42 = inttoptr i64 %40 to i32* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed09f8970]:   store i32 0, i32* %42, align 4 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed09f89d8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed09f8a50]:   %44 = add i64 %43, -8 {
	[0x55aed0970370]:  %8 = add i64 %7, -8
	[0x55aed0973960]:  %45 = add i64 %44, -8
	[0x55aed0976c70]:  %61 = add i64 %60, -8
	}

[0x55aed09f8ab8]:   %45 = load i32, i32* %EDI, align 4 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed09f8b90]:   %47 = add i64 %46, 3 {
	[0x55aed09e5980]:  %48 = add i64 %47, 3
	}

[0x55aed09f8c10]:   store i64 %47, i64* %PC, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed09f8c78]:   %48 = inttoptr i64 %44 to i32* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed09f8cf0]:   store i32 %45, i32* %48, align 4 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a043a0]:   %8 = add i64 %7, -8 {
	[0x55aed0970370]:  %8 = add i64 %7, -8
	[0x55aed0973960]:  %45 = add i64 %44, -8
	[0x55aed0976c70]:  %61 = add i64 %60, -8
	}

[0x55aed0a04420]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55aed0974b00]:  %call2_4004a8 = tail call %struct.Memory.32* @sub_4004c0.printdata(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x55aed09b6e80]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55aed09fa620]:  %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
	}

[0x55aed0a04498]:   %9 = inttoptr i64 %8 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed0a04510]:   store i64 %5, i64* %9, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed0a045f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a04cc0]:   %11 = add i64 %7, -24 {
	[0x55aed096faf0]:  %11 = add i64 %7, -24
	}

[0x55aed0a04d40]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a04e00]:   %12 = icmp ult i64 %8, 16 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed0a04e68]:   %13 = zext i1 %12 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed0a04ee0]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a05078]:   %15 = trunc i64 %11 to i32 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed0a05130]:   %16 = and i32 %15, 255 {
	[0x55aed0978340]:  %69 = and i32 %68, 255
	[0x55aed09e3780]:  %16 = and i32 %15, 255
	}

[0x55aed0a051d8]:   %18 = trunc i32 %17 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed0a05290]:   %19 = and i8 %18, 1 {
	[0x55aed09722c0]:  %26 = and i8 %25, 1
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	[0x55aed097b4c0]:  %78 = and i8 %77, 1
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed0a05310]:   %20 = xor i8 %19, 1 {
	[0x55aed0977fc0]:  %73 = xor i8 %72, 1
	[0x55aed09e4bb0]:  %20 = xor i8 %19, 1
	}

[0x55aed0a05390]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a05520]:   %22 = xor i64 %8, 16 {
	[0x55aed0971ee0]:  %22 = xor i64 %8, 16
	[0x55aed0977d70]:  %74 = xor i64 %63, 16
	}

[0x55aed0a055a0]:   %23 = xor i64 %22, %11 {
	[0x55aed0976420]:  %75 = xor i64 %74, %65
	[0x55aed097b780]:  %84 = xor i64 %81, %83
	[0x55aed09e3980]:  %35 = xor i64 %31, %34
	[0x55aed09e4880]:  %23 = xor i64 %22, %11
	}

[0x55aed0a05620]:   %24 = lshr i64 %23, 4 {
	[0x55aed0971990]:  %24 = lshr i64 %23, 4
	[0x55aed0978b00]:  %76 = lshr i64 %75, 4
	}

[0x55aed0a05688]:   %25 = trunc i64 %24 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed0a05700]:   %26 = and i8 %25, 1 {
	[0x55aed09722c0]:  %26 = and i8 %25, 1
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	[0x55aed097b4c0]:  %78 = and i8 %77, 1
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed0a057b0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55aed09edb30]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55aed0a05840]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a059f0]:   %28 = icmp eq i64 %11, 0 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed0a05a58]:   %29 = zext i1 %28 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed0a05b00]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55aed097d6e0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55aed0a05b90]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a05d80]:   %31 = lshr i64 %11, 63 {
	[0x55aed09792c0]:  %83 = lshr i64 %63, 63
	[0x55aed097aed0]:  %81 = lshr i64 %65, 63
	[0x55aed09e4ee0]:  %34 = lshr i64 %8, 63
	[0x55aed09e5100]:  %31 = lshr i64 %11, 63
	}

[0x55aed0a05de8]:   %32 = trunc i64 %31 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed0a05e90]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55aed0978780]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55aed0a05f20]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a060d0]:   %34 = lshr i64 %8, 63 {
	[0x55aed09792c0]:  %83 = lshr i64 %63, 63
	[0x55aed097aed0]:  %81 = lshr i64 %65, 63
	[0x55aed09e4ee0]:  %34 = lshr i64 %8, 63
	[0x55aed09e5100]:  %31 = lshr i64 %11, 63
	}

[0x55aed0a06150]:   %35 = xor i64 %31, %34 {
	[0x55aed0976420]:  %75 = xor i64 %74, %65
	[0x55aed097b780]:  %84 = xor i64 %81, %83
	[0x55aed09e3980]:  %35 = xor i64 %31, %34
	[0x55aed09e4880]:  %23 = xor i64 %22, %11
	}

[0x55aed0a061d0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x55aed0972ea0]:  %85 = add nuw nsw i64 %84, %81
	[0x55aed0973800]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55aed0a06250]:   %37 = icmp eq i64 %36, 2 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed0a062b8]:   %38 = zext i1 %37 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed0a06360]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55aed0974d70]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55aed0a063f0]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07198]:   %49 = load i64, i64* %RBP, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed0a07250]:   %50 = add i64 %49, -16 {
	[0x55aed0974690]:  %51 = add i64 %50, -16
	}

[0x55aed0a072b8]:   %51 = load i64, i64* %RSI, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed0a07390]:   %53 = add i64 %52, 4 {
	[0x55aed09744f0]:  %54 = add i64 %53, 4
	}

[0x55aed0a07410]:   store i64 %53, i64* %PC, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07478]:   %54 = inttoptr i64 %50 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed0a074f0]:   store i64 %51, i64* %54, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed0a075d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a077c0]:   %56 = add i64 %55, 26 {
	[0x55aed0975140]:  %58 = add i64 %57, 26
	}

[0x55aed0a07840]:   %57 = add i64 %55, 7 {
	[0x55aed0976200]:  %59 = add i64 %57, 7
	}

[0x55aed0a078a8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed0a07920]:   %59 = add i64 %58, -8 {
	[0x55aed0970370]:  %8 = add i64 %7, -8
	[0x55aed0973960]:  %45 = add i64 %44, -8
	[0x55aed0976c70]:  %61 = add i64 %60, -8
	}

[0x55aed0a07988]:   %60 = inttoptr i64 %59 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed0a07a00]:   store i64 %57, i64* %60, align 8 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07a80]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07b00]:   store i64 %56, i64* %PC, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07dd0]:   %61 = tail call %struct.Memory* @sub_4004c0_printdata(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x55aed0974b00]:  %call2_4004a8 = tail call %struct.Memory.32* @sub_4004c0.printdata(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x55aed09b6e80]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x55aed09fa620]:  %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
	}

[0x55aed0a19ed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55aed0a31858]:  %56 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55aed0a1ac28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55aed0a27838]:  %43 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55aed0a31f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55aed0962350]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55aed0a32140]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x55aed09cfd10]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x55aed0a37080]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55aed0967080]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55aed0a37190]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55aed0aba300]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55aed09e0de8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55aed09b7b28]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55aed0a04510]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x55aed096ffe0]:   store i64 %8, i64* %RBP.i, align 8
[0x55aed0970130]:   store i64 %4, i64* %9, align 8
[0x55aed0971840]:   store i64 %5, i64* %3, align 8
[0x55aed0972040]:   store i8 %20, i8* %21, align 1
[0x55aed09726b0]:   store i64 %91, i64* %RBP.i, align 8
[0x55aed0972970]:   store i64 %88, i64* %3, align 8
[0x55aed0972be0]:   store i8 %87, i8* %39, align 1
[0x55aed0973170]:   store i8 %29, i8* %30, align 1
[0x55aed0973c10]:   store i8 %38, i8* %39, align 1
[0x55aed09740d0]:   store i8 0, i8* %AL.i, align 1
[0x55aed0974390]:   store i64 %54, i64* %3, align 8
[0x55aed0974ff0]:   store i64 %48, i64* %3, align 8
[0x55aed09752a0]:   store i64 %65, i64* %6, align 8
[0x55aed0975550]:   store i64 %58, i64* %3, align 8
[0x55aed0975780]:   store i64 %61, i64* %6, align 8
[0x55aed0975980]:   store i64 %59, i64* %62, align 8
[0x55aed0976680]:   store i8 %67, i8* %14, align 1
[0x55aed0976750]:   store i8 %73, i8* %21, align 1
[0x55aed097ad70]:   store i8 %82, i8* %33, align 1
[0x55aed097b030]:   store i8 %80, i8* %30, align 1
[0x55aed097b370]:   store i8 %78, i8* %27, align 1
[0x55aed097dad0]:   store i64 %89, i64* %6, align 8
[0x55aed097df30]:   store i64 %95, i64* %6, align 8
[0x55aed097e270]:   store i64 %94, i64* %3, align 8
[0x55aed097e3d0]:   store i64 %92, i64* %3, align 8
[0x55aed09e3580]:   store i64 %11, i64* %6, align 8
[0x55aed09e3ad0]:   store i8 %32, i8* %33, align 1
[0x55aed09e4770]:   store i8 %13, i8* %14, align 1
[0x55aed09e5320]:   store i8 %26, i8* %27, align 1
[0x55aed09e5540]:   store i32 0, i32* %42, align 4
[0x55aed09e5650]:   store i64 %41, i64* %3, align 8
[0x55aed09e58b0]:   store i32 %46, i32* %49, align 4
[0x55aed09e5a90]:   store i64 %52, i64* %55, align 8


Adj: [0x55aed0974690]:   %51 = add i64 %50, -16


Removing: [0x55aed09e3c18]:   %44 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55aed09b7b28]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55aed0a04510]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x55aed096ffe0]:   store i64 %8, i64* %RBP.i, align 8
[0x55aed0970130]:   store i64 %4, i64* %9, align 8
[0x55aed0971840]:   store i64 %5, i64* %3, align 8
[0x55aed0972040]:   store i8 %20, i8* %21, align 1
[0x55aed09726b0]:   store i64 %91, i64* %RBP.i, align 8
[0x55aed0972970]:   store i64 %88, i64* %3, align 8
[0x55aed0972be0]:   store i8 %87, i8* %39, align 1
[0x55aed0973170]:   store i8 %29, i8* %30, align 1
[0x55aed0973c10]:   store i8 %38, i8* %39, align 1
[0x55aed09740d0]:   store i8 0, i8* %AL.i, align 1
[0x55aed0974390]:   store i64 %54, i64* %3, align 8
[0x55aed0974ff0]:   store i64 %48, i64* %3, align 8
[0x55aed09752a0]:   store i64 %65, i64* %6, align 8
[0x55aed0975550]:   store i64 %58, i64* %3, align 8
[0x55aed0975780]:   store i64 %61, i64* %6, align 8
[0x55aed0975980]:   store i64 %59, i64* %62, align 8
[0x55aed0976680]:   store i8 %67, i8* %14, align 1
[0x55aed0976750]:   store i8 %73, i8* %21, align 1
[0x55aed097ad70]:   store i8 %82, i8* %33, align 1
[0x55aed097b030]:   store i8 %80, i8* %30, align 1
[0x55aed097b370]:   store i8 %78, i8* %27, align 1
[0x55aed097dad0]:   store i64 %89, i64* %6, align 8
[0x55aed097df30]:   store i64 %95, i64* %6, align 8
[0x55aed097e270]:   store i64 %94, i64* %3, align 8
[0x55aed097e3d0]:   store i64 %92, i64* %3, align 8
[0x55aed09e3580]:   store i64 %11, i64* %6, align 8
[0x55aed09e3ad0]:   store i8 %32, i8* %33, align 1
[0x55aed09e4770]:   store i8 %13, i8* %14, align 1
[0x55aed09e5320]:   store i8 %26, i8* %27, align 1
[0x55aed09e5540]:   store i32 0, i32* %42, align 4
[0x55aed09e5650]:   store i64 %41, i64* %3, align 8
[0x55aed09e58b0]:   store i32 %46, i32* %49, align 4
[0x55aed09e5a90]:   store i64 %52, i64* %55, align 8


Adj: [0x55aed0973960]:   %45 = add i64 %44, -8


Removing: [0x55aed09e6768]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x55aed09b7c88]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55aed09f8790]:   %40 = add i64 %7, -12


Uprime Matches: [0x55aed09e5760]:   %40 = add i64 %7, -12


Adj: [0x55aed0972790]:   %89 = add i64 %63, 24
[0x55aed09753f0]:   %65 = add i64 %63, 16
[0x55aed0976310]:   %66 = icmp ugt i64 %63, -17
[0x55aed0977d70]:   %74 = xor i64 %63, 16
[0x55aed09792c0]:   %83 = lshr i64 %63, 63
[0x55aed097e090]:   %95 = add i64 %63, 32


Removing: [0x55aed09e6d58]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x55aed09b7c88]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55aed09f8790]:   %40 = add i64 %7, -12


Uprime Matches: [0x55aed09e5760]:   %40 = add i64 %7, -12


Adj: [0x55aed0976c70]:   %61 = add i64 %60, -8


Removing: [0x55aed09666f8]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8810]:   %41 = add i64 %10, 14


Uprime Matches: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Adj: [0x55aed09e5980]:   %48 = add i64 %47, 3


Removing: [0x55aed09e7218]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8810]:   %41 = add i64 %10, 14


Uprime Matches: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Adj: [0x55aed0975140]:   %58 = add i64 %57, 26
[0x55aed0976200]:   %59 = add i64 %57, 7


Removing: [0x55aed09e7f28]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8810]:   %41 = add i64 %10, 14


Uprime Matches: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Adj: [0x55aed09744f0]:   %54 = add i64 %53, 4


Removing: [0x55aed09e8188]:   %64 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8810]:   %41 = add i64 %10, 14


Uprime Matches: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Adj: [0x55aed0972ac0]:   %88 = add i64 %64, 5
[0x55aed097e4b0]:   %92 = add i64 %64, 6


Removing: [0x55aed098f5e8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09e3ad0]:   store i8 %32, i8* %33, align 1


Removing: [0x55aed09dfbd8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09e3780]:   %16 = and i32 %15, 255


Removing: [0x55aed09e83e8]:   %82 = trunc i64 %81 to i8
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed097ad70]:   store i8 %82, i8* %33, align 1


Removing: [0x55aed09e9d88]:   %68 = trunc i64 %65 to i32
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed0978340]:   %69 = and i32 %68, 255


Removing: [0x55aed09722c0]:   %26 = and i8 %25, 1
From the pot matches of: [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime : [0x55aed0a05310]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55aed0977fc0]:   %73 = xor i8 %72, 1
[0x55aed09e4bb0]:   %20 = xor i8 %19, 1


Adj: [0x55aed09e5320]:   store i8 %26, i8* %27, align 1


Removing: [0x55aed097b4c0]:   %78 = and i8 %77, 1
From the pot matches of: [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime : [0x55aed0a05310]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55aed0977fc0]:   %73 = xor i8 %72, 1
[0x55aed09e4bb0]:   %20 = xor i8 %19, 1


Adj: [0x55aed097b370]:   store i8 %78, i8* %27, align 1


Removing: [0x55aed09cf708]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55aed09f89d8]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x55aed09f8a50]:   %44 = add i64 %43, -8


Uprime Matches: [0x55aed0970370]:   %8 = add i64 %7, -8
[0x55aed0973960]:   %45 = add i64 %44, -8
[0x55aed0976c70]:   %61 = add i64 %60, -8


Adj: [0x55aed0970130]:   store i64 %4, i64* %9, align 8


Removing: [0x55aed09e0de8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55aed09f89d8]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x55aed09f8a50]:   %44 = add i64 %43, -8


Uprime Matches: [0x55aed0970370]:   %8 = add i64 %7, -8
[0x55aed0973960]:   %45 = add i64 %44, -8
[0x55aed0976c70]:   %61 = add i64 %60, -8


Adj: [0x55aed0974690]:   %51 = add i64 %50, -16


Removing: [0x55aed09e15d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8b90]:   %47 = add i64 %46, 3


Uprime Matches: [0x55aed09e5980]:   %48 = add i64 %47, 3


Adj: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Removing: [0x55aed09e7218]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8b90]:   %47 = add i64 %46, 3


Uprime Matches: [0x55aed09e5980]:   %48 = add i64 %47, 3


Adj: [0x55aed0975140]:   %58 = add i64 %57, 26
[0x55aed0976200]:   %59 = add i64 %57, 7


Removing: [0x55aed09e7f28]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8b90]:   %47 = add i64 %46, 3


Uprime Matches: [0x55aed09e5980]:   %48 = add i64 %47, 3


Adj: [0x55aed09744f0]:   %54 = add i64 %53, 4


Removing: [0x55aed09e8188]:   %64 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x55aed09f8b90]:   %47 = add i64 %46, 3


Uprime Matches: [0x55aed09e5980]:   %48 = add i64 %47, 3


Adj: [0x55aed0972ac0]:   %88 = add i64 %64, 5
[0x55aed097e4b0]:   %92 = add i64 %64, 6


Removing: [0x55aed09cf708]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55aed0a07198]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x55aed0a07250]:   %50 = add i64 %49, -16


Uprime Matches: [0x55aed0974690]:   %51 = add i64 %50, -16


Adj: [0x55aed0970130]:   store i64 %4, i64* %9, align 8


Removing: [0x55aed09e3c18]:   %44 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55aed0a07198]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x55aed0a07250]:   %50 = add i64 %49, -16


Uprime Matches: [0x55aed0974690]:   %51 = add i64 %50, -16


Adj: [0x55aed0973960]:   %45 = add i64 %44, -8


Removing: [0x55aed09666f8]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07390]:   %53 = add i64 %52, 4


Uprime Matches: [0x55aed09744f0]:   %54 = add i64 %53, 4


Adj: [0x55aed09e5980]:   %48 = add i64 %47, 3


Removing: [0x55aed09e15d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07390]:   %53 = add i64 %52, 4


Uprime Matches: [0x55aed09744f0]:   %54 = add i64 %53, 4


Adj: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Removing: [0x55aed09e7218]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07390]:   %53 = add i64 %52, 4


Uprime Matches: [0x55aed09744f0]:   %54 = add i64 %53, 4


Adj: [0x55aed0975140]:   %58 = add i64 %57, 26
[0x55aed0976200]:   %59 = add i64 %57, 7


Removing: [0x55aed09e8188]:   %64 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07390]:   %53 = add i64 %52, 4


Uprime Matches: [0x55aed09744f0]:   %54 = add i64 %53, 4


Adj: [0x55aed0972ac0]:   %88 = add i64 %64, 5
[0x55aed097e4b0]:   %92 = add i64 %64, 6


Removing: [0x55aed09666f8]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07840]:   %57 = add i64 %55, 7


Uprime Matches: [0x55aed0976200]:   %59 = add i64 %57, 7


Adj: [0x55aed09e5980]:   %48 = add i64 %47, 3


Removing: [0x55aed09e15d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07840]:   %57 = add i64 %55, 7


Uprime Matches: [0x55aed0976200]:   %59 = add i64 %57, 7


Adj: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Removing: [0x55aed09e7f28]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07840]:   %57 = add i64 %55, 7


Uprime Matches: [0x55aed0976200]:   %59 = add i64 %57, 7


Adj: [0x55aed09744f0]:   %54 = add i64 %53, 4


Removing: [0x55aed09e8188]:   %64 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x55aed0a07840]:   %57 = add i64 %55, 7


Uprime Matches: [0x55aed0976200]:   %59 = add i64 %57, 7


Adj: [0x55aed0972ac0]:   %88 = add i64 %64, 5
[0x55aed097e4b0]:   %92 = add i64 %64, 6


Removing: [0x55aed09e6768]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x55aed0a078a8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55aed0a07920]:   %59 = add i64 %58, -8


Uprime Matches: [0x55aed0970370]:   %8 = add i64 %7, -8
[0x55aed0973960]:   %45 = add i64 %44, -8
[0x55aed0976c70]:   %61 = add i64 %60, -8


Adj: [0x55aed0972790]:   %89 = add i64 %63, 24
[0x55aed09753f0]:   %65 = add i64 %63, 16
[0x55aed0976310]:   %66 = icmp ugt i64 %63, -17
[0x55aed0977d70]:   %74 = xor i64 %63, 16
[0x55aed09792c0]:   %83 = lshr i64 %63, 63
[0x55aed097e090]:   %95 = add i64 %63, 32


Removing: [0x55aed0970370]:   %8 = add i64 %7, -8
From the pot matches of: [0x55aed0a07920]:   %59 = add i64 %58, -8


Uprime : [0x55aed0a07a80]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x55aed09752a0]:   store i64 %65, i64* %6, align 8
[0x55aed0975780]:   store i64 %61, i64* %6, align 8
[0x55aed097dad0]:   store i64 %89, i64* %6, align 8
[0x55aed097df30]:   store i64 %95, i64* %6, align 8
[0x55aed09e3580]:   store i64 %11, i64* %6, align 8


Adj: [0x55aed0955fd8]:   %9 = inttoptr i64 %8 to i64*
[0x55aed096ffe0]:   store i64 %8, i64* %RBP.i, align 8
[0x55aed0971ee0]:   %22 = xor i64 %8, 16
[0x55aed09e19a0]:   %12 = icmp ult i64 %8, 16
[0x55aed09e4ee0]:   %34 = lshr i64 %8, 63


Removing: [0x55aed09cf8f8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55aed099a7a8]:   %62 = load i64, i64* %RSP, align 8


Uprime : [0x55aed099e1a0]:   %94 = add i64 %62, 32


Uprime Matches: [0x55aed097e090]:   %95 = add i64 %63, 32


Adj: [0x55aed096faf0]:   %11 = add i64 %7, -24
[0x55aed0970370]:   %8 = add i64 %7, -8
[0x55aed09e5760]:   %40 = add i64 %7, -12


Removing: [0x55aed09e6d58]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x55aed099a7a8]:   %62 = load i64, i64* %RSP, align 8


Uprime : [0x55aed099e1a0]:   %94 = add i64 %62, 32


Uprime Matches: [0x55aed097e090]:   %95 = add i64 %63, 32


Adj: [0x55aed0976c70]:   %61 = add i64 %60, -8


Removing: [0x55aed09666f8]:   %47 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed099a808]:   %63 = load i64, i64* %PC, align 8


Uprime : [0x55aed099df20]:   %91 = add i64 %63, 6


Uprime Matches: [0x55aed097e4b0]:   %92 = add i64 %64, 6


Adj: [0x55aed09e5980]:   %48 = add i64 %47, 3


Removing: [0x55aed09e15d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed099a808]:   %63 = load i64, i64* %PC, align 8


Uprime : [0x55aed099df20]:   %91 = add i64 %63, 6


Uprime Matches: [0x55aed097e4b0]:   %92 = add i64 %64, 6


Adj: [0x55aed0973ac0]:   %41 = add i64 %10, 14


Removing: [0x55aed09e7218]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed099a808]:   %63 = load i64, i64* %PC, align 8


Uprime : [0x55aed099df20]:   %91 = add i64 %63, 6


Uprime Matches: [0x55aed097e4b0]:   %92 = add i64 %64, 6


Adj: [0x55aed0975140]:   %58 = add i64 %57, 26
[0x55aed0976200]:   %59 = add i64 %57, 7


Removing: [0x55aed09e7f28]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x55aed099a808]:   %63 = load i64, i64* %PC, align 8


Uprime : [0x55aed099df20]:   %91 = add i64 %63, 6


Uprime Matches: [0x55aed097e4b0]:   %92 = add i64 %64, 6


Adj: [0x55aed09744f0]:   %54 = add i64 %53, 4


Removing: [0x55aed098f5e8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09e3ad0]:   store i8 %32, i8* %33, align 1


Removing: [0x55aed09dfbd8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09e3780]:   %16 = and i32 %15, 255


Removing: [0x55aed09e83e8]:   %82 = trunc i64 %81 to i8
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed097ad70]:   store i8 %82, i8* %33, align 1


Removing: [0x55aed09e9d88]:   %68 = trunc i64 %65 to i32
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09722c0]:   %26 = and i8 %25, 1
[0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed097b4c0]:   %78 = and i8 %77, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed0978340]:   %69 = and i32 %68, 255


Removing: [0x55aed09722c0]:   %26 = and i8 %25, 1
From the pot matches of: [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime : [0x55aed099b3d0]:   %72 = xor i8 %71, 1


Uprime Matches: [0x55aed0977fc0]:   %73 = xor i8 %72, 1
[0x55aed09e4bb0]:   %20 = xor i8 %19, 1


Adj: [0x55aed09e5320]:   store i8 %26, i8* %27, align 1


Removing: [0x55aed097b4c0]:   %78 = and i8 %77, 1
From the pot matches of: [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime : [0x55aed099b3d0]:   %72 = xor i8 %71, 1


Uprime Matches: [0x55aed0977fc0]:   %73 = xor i8 %72, 1
[0x55aed09e4bb0]:   %20 = xor i8 %19, 1


Adj: [0x55aed097b370]:   store i8 %78, i8* %27, align 1

Round: 1

Removing: [0x55aed09bd7f8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09722c0]:   %26 = and i8 %25, 1


Removing: [0x55aed09e8648]:   %77 = trunc i64 %76 to i8
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed097b4c0]:   %78 = and i8 %77, 1


Removing: [0x55aed09cf8f8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55aed0a078a8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55aed0a07920]:   %59 = add i64 %58, -8


Uprime Matches: [0x55aed0976c70]:   %61 = add i64 %60, -8


Adj: [0x55aed096faf0]:   %11 = add i64 %7, -24
[0x55aed0970370]:   %8 = add i64 %7, -8
[0x55aed09e5760]:   %40 = add i64 %7, -12


Removing: [0x55aed09bd7f8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09722c0]:   %26 = and i8 %25, 1


Removing: [0x55aed09e8648]:   %77 = trunc i64 %76 to i8
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09768a0]:   %72 = and i8 %71, 1
[0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed097b4c0]:   %78 = and i8 %77, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x55aed09560d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55aed09cff00]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55aed0990b10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55aed09d0260]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55aed099a7a8]:   %62 = load i64, i64* %RSP, align 8 {
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	}

[0x55aed099a808]:   %63 = load i64, i64* %PC, align 8 {
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	}

[0x55aed099a880]:   %64 = add i64 %62, 16 {
	[0x55aed09753f0]:  %65 = add i64 %63, 16
	}

[0x55aed099a900]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	}

[0x55aed099a9c0]:   %65 = icmp ugt i64 %62, -17 {
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	}

[0x55aed099aa28]:   %66 = zext i1 %65 to i8 {
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed099aaa0]:   store i8 %66, i8* %14, align 1, !tbaa !1265 {
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	}

[0x55aed099b118]:   %67 = trunc i64 %64 to i32 {
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed099b190]:   %68 = and i32 %67, 255 {
	[0x55aed0978340]:  %69 = and i32 %68, 255
	}

[0x55aed099b210]:   %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #9 {
	[0x55aed09fa620]:  %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
	}

[0x55aed099b2d8]:   %70 = trunc i32 %69 to i8 {
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	}

[0x55aed099b350]:   %71 = and i8 %70, 1 {
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed099b3d0]:   %72 = xor i8 %71, 1 {
	[0x55aed0977fc0]:  %73 = xor i8 %72, 1
	[0x55aed09e4bb0]:  %20 = xor i8 %19, 1
	}

[0x55aed099b450]:   store i8 %72, i8* %21, align 1, !tbaa !1279 {
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	}

[0x55aed099bae0]:   %73 = xor i64 %62, 16 {
	[0x55aed0977d70]:  %74 = xor i64 %63, 16
	}

[0x55aed099bb60]:   %74 = xor i64 %73, %64 {
	[0x55aed0976420]:  %75 = xor i64 %74, %65
	}

[0x55aed099bbe0]:   %75 = lshr i64 %74, 4 {
	[0x55aed0978b00]:  %76 = lshr i64 %75, 4
	}

[0x55aed099bc48]:   %76 = trunc i64 %75 to i8 {
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	}

[0x55aed099bcc0]:   %77 = and i8 %76, 1 {
	[0x55aed097b4c0]:  %78 = and i8 %77, 1
	}

[0x55aed099bd40]:   store i8 %77, i8* %27, align 1, !tbaa !1280 {
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	}

[0x55aed099c3d0]:   %78 = icmp eq i64 %64, 0 {
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	}

[0x55aed099c438]:   %79 = zext i1 %78 to i8 {
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	}

[0x55aed099c4b0]:   store i8 %79, i8* %30, align 1, !tbaa !1281 {
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	}

[0x55aed099cb40]:   %80 = lshr i64 %64, 63 {
	[0x55aed097aed0]:  %81 = lshr i64 %65, 63
	}

[0x55aed099cba8]:   %81 = trunc i64 %80 to i8 {
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	}

[0x55aed099cc20]:   store i8 %81, i8* %33, align 1, !tbaa !1282 {
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	}

[0x55aed099d2b0]:   %82 = lshr i64 %62, 63 {
	[0x55aed09792c0]:  %83 = lshr i64 %63, 63
	}

[0x55aed099d330]:   %83 = xor i64 %80, %82 {
	[0x55aed097b780]:  %84 = xor i64 %81, %83
	}

[0x55aed099d3b0]:   %84 = add nuw nsw i64 %83, %80 {
	[0x55aed0972ea0]:  %85 = add nuw nsw i64 %84, %81
	}

[0x55aed099d430]:   %85 = icmp eq i64 %84, 2 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	}

[0x55aed099d498]:   %86 = zext i1 %85 to i8 {
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	}

[0x55aed099d510]:   store i8 %86, i8* %39, align 1, !tbaa !1283 {
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	}

[0x55aed099dba0]:   %87 = add i64 %63, 5 {
	[0x55aed0972ac0]:  %88 = add i64 %64, 5
	}

[0x55aed099dc20]:   store i64 %87, i64* %PC, align 8 {
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	}

[0x55aed099dce0]:   %88 = add i64 %62, 24 {
	[0x55aed0972790]:  %89 = add i64 %63, 24
	}

[0x55aed099dd48]:   %89 = inttoptr i64 %64 to i64* {
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	}

[0x55aed099dda8]:   %90 = load i64, i64* %89, align 8 {
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed099de20]:   store i64 %90, i64* %RBP, align 8, !tbaa !1261 {
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	}

[0x55aed099dea0]:   store i64 %88, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	}

[0x55aed099df20]:   %91 = add i64 %63, 6 {
	[0x55aed097e4b0]:  %92 = add i64 %64, 6
	}

[0x55aed099dfa0]:   store i64 %91, i64* %PC, align 8 {
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	}

[0x55aed099e008]:   %92 = inttoptr i64 %88 to i64* {
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed099e068]:   %93 = load i64, i64* %92, align 8 {
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	}

[0x55aed099e0e0]:   store i64 %93, i64* %PC, align 8, !tbaa !1261 {
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	}

[0x55aed099e1a0]:   %94 = add i64 %62, 32 {
	[0x55aed097e090]:  %95 = add i64 %63, 32
	}

[0x55aed099e220]:   store i64 %94, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	}

[0x55aed099e288]:   ret %struct.Memory* %61 {
	[0x55aed09eaa98]:  ret %struct.Memory.32* %call2_4004a8
	}

[0x55aed09b7820]: %struct.State* %0 {
	[0x55aed0971ac0]:%struct.State.1* %0
	}

[0x55aed09b7860]: i64 %1 {
	[0x55aed09e4ab0]:i64 %1
	}

[0x55aed09b78a0]: %struct.Memory* %2 {
	[0x55aed09e3b80]:%struct.Memory.32* %2
	}

[0x55aed09b7b28]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55aed09b7ba0]:   %6 = add i64 %1, 1 {
	[0x55aed09df0b0]:  %5 = add i64 %1, 1
	}

[0x55aed09b7c20]:   store i64 %6, i64* %PC, align 8 {
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	}

[0x55aed09b7c88]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	}

[0x55aed09da608]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55aed09e7348]:  %AL.i = bitcast %union.anon.5* %56 to i8*
	}

[0x55aed09da6d8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55aed09e5bc8]:  %EDI.i = bitcast %union.anon.5* %43 to i32*
	}

[0x55aed09f8790]:   %40 = add i64 %7, -12 {
	[0x55aed09e5760]:  %40 = add i64 %7, -12
	}

[0x55aed09f8810]:   %41 = add i64 %10, 14 {
	[0x55aed0973ac0]:  %41 = add i64 %10, 14
	}

[0x55aed09f8890]:   store i64 %41, i64* %PC, align 8 {
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	}

[0x55aed09f88f8]:   %42 = inttoptr i64 %40 to i32* {
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x55aed09f8970]:   store i32 0, i32* %42, align 4 {
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	}

[0x55aed09f89d8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x55aed09f8a50]:   %44 = add i64 %43, -8 {
	[0x55aed0973960]:  %45 = add i64 %44, -8
	}

[0x55aed09f8ab8]:   %45 = load i32, i32* %EDI, align 4 {
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	}

[0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	}

[0x55aed09f8b90]:   %47 = add i64 %46, 3 {
	[0x55aed09e5980]:  %48 = add i64 %47, 3
	}

[0x55aed09f8c10]:   store i64 %47, i64* %PC, align 8 {
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	}

[0x55aed09f8c78]:   %48 = inttoptr i64 %44 to i32* {
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	}

[0x55aed09f8cf0]:   store i32 %45, i32* %48, align 4 {
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	}

[0x55aed0a043a0]:   %8 = add i64 %7, -8 {
	[0x55aed0970370]:  %8 = add i64 %7, -8
	}

[0x55aed0a04420]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55aed09b6e80]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55aed0a04498]:   %9 = inttoptr i64 %8 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55aed0a04510]:   store i64 %5, i64* %9, align 8 {
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	}

[0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8 {
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	}

[0x55aed0a045f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55aed0a04cc0]:   %11 = add i64 %7, -24 {
	[0x55aed096faf0]:  %11 = add i64 %7, -24
	}

[0x55aed0a04d40]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	}

[0x55aed0a04e00]:   %12 = icmp ult i64 %8, 16 {
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed0a04e68]:   %13 = zext i1 %12 to i8 {
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	}

[0x55aed0a04ee0]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	}

[0x55aed0a05078]:   %15 = trunc i64 %11 to i32 {
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	}

[0x55aed0a05130]:   %16 = and i32 %15, 255 {
	[0x55aed09e3780]:  %16 = and i32 %15, 255
	}

[0x55aed0a051d8]:   %18 = trunc i32 %17 to i8 {
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	}

[0x55aed0a05290]:   %19 = and i8 %18, 1 {
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed0a05310]:   %20 = xor i8 %19, 1 {
	[0x55aed0977fc0]:  %73 = xor i8 %72, 1
	[0x55aed09e4bb0]:  %20 = xor i8 %19, 1
	}

[0x55aed0a05390]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	}

[0x55aed0a05520]:   %22 = xor i64 %8, 16 {
	[0x55aed0971ee0]:  %22 = xor i64 %8, 16
	}

[0x55aed0a055a0]:   %23 = xor i64 %22, %11 {
	[0x55aed09e4880]:  %23 = xor i64 %22, %11
	}

[0x55aed0a05620]:   %24 = lshr i64 %23, 4 {
	[0x55aed0971990]:  %24 = lshr i64 %23, 4
	}

[0x55aed0a05688]:   %25 = trunc i64 %24 to i8 {
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	}

[0x55aed0a05700]:   %26 = and i8 %25, 1 {
	[0x55aed09722c0]:  %26 = and i8 %25, 1
	}

[0x55aed0a057b0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55aed09edb30]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55aed0a05840]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	}

[0x55aed0a059f0]:   %28 = icmp eq i64 %11, 0 {
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	}

[0x55aed0a05a58]:   %29 = zext i1 %28 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	}

[0x55aed0a05b00]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55aed097d6e0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55aed0a05b90]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	}

[0x55aed0a05d80]:   %31 = lshr i64 %11, 63 {
	[0x55aed09e5100]:  %31 = lshr i64 %11, 63
	}

[0x55aed0a05de8]:   %32 = trunc i64 %31 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	}

[0x55aed0a05e90]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55aed0978780]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55aed0a05f20]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	}

[0x55aed0a060d0]:   %34 = lshr i64 %8, 63 {
	[0x55aed09e4ee0]:  %34 = lshr i64 %8, 63
	}

[0x55aed0a06150]:   %35 = xor i64 %31, %34 {
	[0x55aed09e3980]:  %35 = xor i64 %31, %34
	}

[0x55aed0a061d0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x55aed0973800]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55aed0a06250]:   %37 = icmp eq i64 %36, 2 {
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	}

[0x55aed0a062b8]:   %38 = zext i1 %37 to i8 {
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	}

[0x55aed0a06360]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55aed0974d70]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55aed0a063f0]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	}

[0x55aed0a07198]:   %49 = load i64, i64* %RBP, align 8 {
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x55aed0a07250]:   %50 = add i64 %49, -16 {
	[0x55aed0974690]:  %51 = add i64 %50, -16
	}

[0x55aed0a072b8]:   %51 = load i64, i64* %RSI, align 8 {
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	}

[0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8 {
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	}

[0x55aed0a07390]:   %53 = add i64 %52, 4 {
	[0x55aed09744f0]:  %54 = add i64 %53, 4
	}

[0x55aed0a07410]:   store i64 %53, i64* %PC, align 8 {
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	}

[0x55aed0a07478]:   %54 = inttoptr i64 %50 to i64* {
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	}

[0x55aed0a074f0]:   store i64 %51, i64* %54, align 8 {
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8 {
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	}

[0x55aed0a075d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	}

[0x55aed0a077c0]:   %56 = add i64 %55, 26 {
	[0x55aed0975140]:  %58 = add i64 %57, 26
	}

[0x55aed0a07840]:   %57 = add i64 %55, 7 {
	[0x55aed0976200]:  %59 = add i64 %57, 7
	}

[0x55aed0a078a8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	}

[0x55aed0a07920]:   %59 = add i64 %58, -8 {
	[0x55aed0976c70]:  %61 = add i64 %60, -8
	}

[0x55aed0a07988]:   %60 = inttoptr i64 %59 to i64* {
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	}

[0x55aed0a07a00]:   store i64 %57, i64* %60, align 8 {
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	}

[0x55aed0a07a80]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	}

[0x55aed0a07b00]:   store i64 %56, i64* %PC, align 8, !tbaa !1261 {
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	}

[0x55aed0a07dd0]:   %61 = tail call %struct.Memory* @sub_4004c0_printdata(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x55aed0974b00]:  %call2_4004a8 = tail call %struct.Memory.32* @sub_4004c0.printdata(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	}

[0x55aed0a19ed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55aed0a31858]:  %56 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55aed0a1ac28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55aed0a27838]:  %43 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55aed0a31f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55aed0962350]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55aed0a32140]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x55aed09cfd10]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x55aed0a37080]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55aed0967080]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55aed0a37190]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55aed0aba300]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x55aed09b78e0]: block_400490 {
	[0x55aed096e290]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x55aed0977fc0]:   %73 = xor i8 %72, 1
From the pot matches of: [0x55aed0a05310]:   %20 = xor i8 %19, 1


Uprime : [0x55aed0a05390]:   store i8 %20, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x55aed0972040]:   store i8 %20, i8* %21, align 1


Adj: [0x55aed0976750]:   store i8 %73, i8* %21, align 1


Removing: [0x55aed09e4bb0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x55aed099b3d0]:   %72 = xor i8 %71, 1


Uprime : [0x55aed099b450]:   store i8 %72, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x55aed0976750]:   store i8 %73, i8* %21, align 1


Adj: [0x55aed0972040]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x55aed09768a0]:   %72 = and i8 %71, 1
From the pot matches of: [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime : [0x55aed0a05310]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55aed09e4bb0]:   %20 = xor i8 %19, 1


Adj: [0x55aed0977fc0]:   %73 = xor i8 %72, 1


Removing: [0x55aed09e4cc0]:   %19 = and i8 %18, 1
From the pot matches of: [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime : [0x55aed099b3d0]:   %72 = xor i8 %71, 1


Uprime Matches: [0x55aed0977fc0]:   %73 = xor i8 %72, 1


Adj: [0x55aed09e4bb0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x55aed09e9798]:   %71 = trunc i32 %70 to i8
From the pot matches of: [0x55aed0a051d8]:   %18 = trunc i32 %17 to i8


Uprime : [0x55aed0a05290]:   %19 = and i8 %18, 1


Uprime Matches: [0x55aed09e4cc0]:   %19 = and i8 %18, 1


Adj: [0x55aed09768a0]:   %72 = and i8 %71, 1


Removing: [0x55aed09df7a8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x55aed099b2d8]:   %70 = trunc i32 %69 to i8


Uprime : [0x55aed099b350]:   %71 = and i8 %70, 1


Uprime Matches: [0x55aed09768a0]:   %72 = and i8 %71, 1


Adj: [0x55aed09e4cc0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x55aed09560d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55aed09cff00]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55aed0990b10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55aed09d0260]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55aed099a7a8]:   %62 = load i64, i64* %RSP, align 8 {
	[0x55aed09e6768]:  %63 = load i64, i64* %6, align 8
	}

[0x55aed099a808]:   %63 = load i64, i64* %PC, align 8 {
	[0x55aed09e8188]:  %64 = load i64, i64* %3, align 8
	}

[0x55aed099a880]:   %64 = add i64 %62, 16 {
	[0x55aed09753f0]:  %65 = add i64 %63, 16
	}

[0x55aed099a900]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09752a0]:  store i64 %65, i64* %6, align 8
	}

[0x55aed099a9c0]:   %65 = icmp ugt i64 %62, -17 {
	[0x55aed0976310]:  %66 = icmp ugt i64 %63, -17
	}

[0x55aed099aa28]:   %66 = zext i1 %65 to i8 {
	[0x55aed09e9eb8]:  %67 = zext i1 %66 to i8
	}

[0x55aed099aaa0]:   store i8 %66, i8* %14, align 1, !tbaa !1265 {
	[0x55aed0976680]:  store i8 %67, i8* %14, align 1
	}

[0x55aed099b118]:   %67 = trunc i64 %64 to i32 {
	[0x55aed09e9d88]:  %68 = trunc i64 %65 to i32
	}

[0x55aed099b190]:   %68 = and i32 %67, 255 {
	[0x55aed0978340]:  %69 = and i32 %68, 255
	}

[0x55aed099b210]:   %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #9 {
	[0x55aed09fa620]:  %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
	}

[0x55aed099b2d8]:   %70 = trunc i32 %69 to i8 {
	[0x55aed09e9798]:  %71 = trunc i32 %70 to i8
	}

[0x55aed099b350]:   %71 = and i8 %70, 1 {
	[0x55aed09768a0]:  %72 = and i8 %71, 1
	}

[0x55aed099b3d0]:   %72 = xor i8 %71, 1 {
	[0x55aed0977fc0]:  %73 = xor i8 %72, 1
	}

[0x55aed099b450]:   store i8 %72, i8* %21, align 1, !tbaa !1279 {
	[0x55aed0976750]:  store i8 %73, i8* %21, align 1
	}

[0x55aed099bae0]:   %73 = xor i64 %62, 16 {
	[0x55aed0977d70]:  %74 = xor i64 %63, 16
	}

[0x55aed099bb60]:   %74 = xor i64 %73, %64 {
	[0x55aed0976420]:  %75 = xor i64 %74, %65
	}

[0x55aed099bbe0]:   %75 = lshr i64 %74, 4 {
	[0x55aed0978b00]:  %76 = lshr i64 %75, 4
	}

[0x55aed099bc48]:   %76 = trunc i64 %75 to i8 {
	[0x55aed09e8648]:  %77 = trunc i64 %76 to i8
	}

[0x55aed099bcc0]:   %77 = and i8 %76, 1 {
	[0x55aed097b4c0]:  %78 = and i8 %77, 1
	}

[0x55aed099bd40]:   store i8 %77, i8* %27, align 1, !tbaa !1280 {
	[0x55aed097b370]:  store i8 %78, i8* %27, align 1
	}

[0x55aed099c3d0]:   %78 = icmp eq i64 %64, 0 {
	[0x55aed097b190]:  %79 = icmp eq i64 %65, 0
	}

[0x55aed099c438]:   %79 = zext i1 %78 to i8 {
	[0x55aed09e8518]:  %80 = zext i1 %79 to i8
	}

[0x55aed099c4b0]:   store i8 %79, i8* %30, align 1, !tbaa !1281 {
	[0x55aed097b030]:  store i8 %80, i8* %30, align 1
	}

[0x55aed099cb40]:   %80 = lshr i64 %64, 63 {
	[0x55aed097aed0]:  %81 = lshr i64 %65, 63
	}

[0x55aed099cba8]:   %81 = trunc i64 %80 to i8 {
	[0x55aed09e83e8]:  %82 = trunc i64 %81 to i8
	}

[0x55aed099cc20]:   store i8 %81, i8* %33, align 1, !tbaa !1282 {
	[0x55aed097ad70]:  store i8 %82, i8* %33, align 1
	}

[0x55aed099d2b0]:   %82 = lshr i64 %62, 63 {
	[0x55aed09792c0]:  %83 = lshr i64 %63, 63
	}

[0x55aed099d330]:   %83 = xor i64 %80, %82 {
	[0x55aed097b780]:  %84 = xor i64 %81, %83
	}

[0x55aed099d3b0]:   %84 = add nuw nsw i64 %83, %80 {
	[0x55aed0972ea0]:  %85 = add nuw nsw i64 %84, %81
	}

[0x55aed099d430]:   %85 = icmp eq i64 %84, 2 {
	[0x55aed0972d40]:  %86 = icmp eq i64 %85, 2
	}

[0x55aed099d498]:   %86 = zext i1 %85 to i8 {
	[0x55aed09e82b8]:  %87 = zext i1 %86 to i8
	}

[0x55aed099d510]:   store i8 %86, i8* %39, align 1, !tbaa !1283 {
	[0x55aed0972be0]:  store i8 %87, i8* %39, align 1
	}

[0x55aed099dba0]:   %87 = add i64 %63, 5 {
	[0x55aed0972ac0]:  %88 = add i64 %64, 5
	}

[0x55aed099dc20]:   store i64 %87, i64* %PC, align 8 {
	[0x55aed0972970]:  store i64 %88, i64* %3, align 8
	}

[0x55aed099dce0]:   %88 = add i64 %62, 24 {
	[0x55aed0972790]:  %89 = add i64 %63, 24
	}

[0x55aed099dd48]:   %89 = inttoptr i64 %64 to i64* {
	[0x55aed09ea118]:  %90 = inttoptr i64 %65 to i64*
	}

[0x55aed099dda8]:   %90 = load i64, i64* %89, align 8 {
	[0x55aed09eb2e8]:  %91 = load i64, i64* %90, align 8
	}

[0x55aed099de20]:   store i64 %90, i64* %RBP, align 8, !tbaa !1261 {
	[0x55aed09726b0]:  store i64 %91, i64* %RBP.i, align 8
	}

[0x55aed099dea0]:   store i64 %88, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed097dad0]:  store i64 %89, i64* %6, align 8
	}

[0x55aed099df20]:   %91 = add i64 %63, 6 {
	[0x55aed097e4b0]:  %92 = add i64 %64, 6
	}

[0x55aed099dfa0]:   store i64 %91, i64* %PC, align 8 {
	[0x55aed097e3d0]:  store i64 %92, i64* %3, align 8
	}

[0x55aed099e008]:   %92 = inttoptr i64 %88 to i64* {
	[0x55aed09eb1b8]:  %93 = inttoptr i64 %89 to i64*
	}

[0x55aed099e068]:   %93 = load i64, i64* %92, align 8 {
	[0x55aed09eabc8]:  %94 = load i64, i64* %93, align 8
	}

[0x55aed099e0e0]:   store i64 %93, i64* %PC, align 8, !tbaa !1261 {
	[0x55aed097e270]:  store i64 %94, i64* %3, align 8
	}

[0x55aed099e1a0]:   %94 = add i64 %62, 32 {
	[0x55aed097e090]:  %95 = add i64 %63, 32
	}

[0x55aed099e220]:   store i64 %94, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed097df30]:  store i64 %95, i64* %6, align 8
	}

[0x55aed099e288]:   ret %struct.Memory* %61 {
	[0x55aed09eaa98]:  ret %struct.Memory.32* %call2_4004a8
	}

[0x55aed09b7820]: %struct.State* %0 {
	[0x55aed0971ac0]:%struct.State.1* %0
	}

[0x55aed09b7860]: i64 %1 {
	[0x55aed09e4ab0]:i64 %1
	}

[0x55aed09b78a0]: %struct.Memory* %2 {
	[0x55aed09e3b80]:%struct.Memory.32* %2
	}

[0x55aed09b7b28]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55aed09cf708]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55aed09b7ba0]:   %6 = add i64 %1, 1 {
	[0x55aed09df0b0]:  %5 = add i64 %1, 1
	}

[0x55aed09b7c20]:   store i64 %6, i64* %PC, align 8 {
	[0x55aed0971840]:  store i64 %5, i64* %3, align 8
	}

[0x55aed09b7c88]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09cf8f8]:  %7 = load i64, i64* %6, align 8
	}

[0x55aed09da608]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55aed09e7348]:  %AL.i = bitcast %union.anon.5* %56 to i8*
	}

[0x55aed09da6d8]:   %EDI = bitcast %union.anon* %4 to i32* {
	[0x55aed09e5bc8]:  %EDI.i = bitcast %union.anon.5* %43 to i32*
	}

[0x55aed09f8790]:   %40 = add i64 %7, -12 {
	[0x55aed09e5760]:  %40 = add i64 %7, -12
	}

[0x55aed09f8810]:   %41 = add i64 %10, 14 {
	[0x55aed0973ac0]:  %41 = add i64 %10, 14
	}

[0x55aed09f8890]:   store i64 %41, i64* %PC, align 8 {
	[0x55aed09e5650]:  store i64 %41, i64* %3, align 8
	}

[0x55aed09f88f8]:   %42 = inttoptr i64 %40 to i32* {
	[0x55aed09e5cf8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x55aed09f8970]:   store i32 0, i32* %42, align 4 {
	[0x55aed09e5540]:  store i32 0, i32* %42, align 4
	}

[0x55aed09f89d8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x55aed09e3c18]:  %44 = load i64, i64* %RBP.i, align 8
	}

[0x55aed09f8a50]:   %44 = add i64 %43, -8 {
	[0x55aed0973960]:  %45 = add i64 %44, -8
	}

[0x55aed09f8ab8]:   %45 = load i32, i32* %EDI, align 4 {
	[0x55aed0972148]:  %46 = load i32, i32* %EDI.i, align 4
	}

[0x55aed09f8b18]:   %46 = load i64, i64* %PC, align 8 {
	[0x55aed09666f8]:  %47 = load i64, i64* %3, align 8
	}

[0x55aed09f8b90]:   %47 = add i64 %46, 3 {
	[0x55aed09e5980]:  %48 = add i64 %47, 3
	}

[0x55aed09f8c10]:   store i64 %47, i64* %PC, align 8 {
	[0x55aed0974ff0]:  store i64 %48, i64* %3, align 8
	}

[0x55aed09f8c78]:   %48 = inttoptr i64 %44 to i32* {
	[0x55aed09e2da8]:  %49 = inttoptr i64 %45 to i32*
	}

[0x55aed09f8cf0]:   store i32 %45, i32* %48, align 4 {
	[0x55aed09e58b0]:  store i32 %46, i32* %49, align 4
	}

[0x55aed0a043a0]:   %8 = add i64 %7, -8 {
	[0x55aed0970370]:  %8 = add i64 %7, -8
	}

[0x55aed0a04420]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55aed09b6e80]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55aed0a04498]:   %9 = inttoptr i64 %8 to i64* {
	[0x55aed0955fd8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55aed0a04510]:   store i64 %5, i64* %9, align 8 {
	[0x55aed0970130]:  store i64 %4, i64* %9, align 8
	}

[0x55aed0a04578]:   %10 = load i64, i64* %PC, align 8 {
	[0x55aed09e15d8]:  %10 = load i64, i64* %3, align 8
	}

[0x55aed0a045f0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55aed096ffe0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55aed0a04cc0]:   %11 = add i64 %7, -24 {
	[0x55aed096faf0]:  %11 = add i64 %7, -24
	}

[0x55aed0a04d40]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09e3580]:  store i64 %11, i64* %6, align 8
	}

[0x55aed0a04e00]:   %12 = icmp ult i64 %8, 16 {
	[0x55aed09e19a0]:  %12 = icmp ult i64 %8, 16
	}

[0x55aed0a04e68]:   %13 = zext i1 %12 to i8 {
	[0x55aed09e18a8]:  %13 = zext i1 %12 to i8
	}

[0x55aed0a04ee0]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55aed09e4770]:  store i8 %13, i8* %14, align 1
	}

[0x55aed0a05078]:   %15 = trunc i64 %11 to i32 {
	[0x55aed09dfbd8]:  %15 = trunc i64 %11 to i32
	}

[0x55aed0a05130]:   %16 = and i32 %15, 255 {
	[0x55aed09e3780]:  %16 = and i32 %15, 255
	}

[0x55aed0a051d8]:   %18 = trunc i32 %17 to i8 {
	[0x55aed09df7a8]:  %18 = trunc i32 %17 to i8
	}

[0x55aed0a05290]:   %19 = and i8 %18, 1 {
	[0x55aed09e4cc0]:  %19 = and i8 %18, 1
	}

[0x55aed0a05310]:   %20 = xor i8 %19, 1 {
	[0x55aed09e4bb0]:  %20 = xor i8 %19, 1
	}

[0x55aed0a05390]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55aed0972040]:  store i8 %20, i8* %21, align 1
	}

[0x55aed0a05520]:   %22 = xor i64 %8, 16 {
	[0x55aed0971ee0]:  %22 = xor i64 %8, 16
	}

[0x55aed0a055a0]:   %23 = xor i64 %22, %11 {
	[0x55aed09e4880]:  %23 = xor i64 %22, %11
	}

[0x55aed0a05620]:   %24 = lshr i64 %23, 4 {
	[0x55aed0971990]:  %24 = lshr i64 %23, 4
	}

[0x55aed0a05688]:   %25 = trunc i64 %24 to i8 {
	[0x55aed09bd7f8]:  %25 = trunc i64 %24 to i8
	}

[0x55aed0a05700]:   %26 = and i8 %25, 1 {
	[0x55aed09722c0]:  %26 = and i8 %25, 1
	}

[0x55aed0a057b0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55aed09edb30]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55aed0a05840]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x55aed09e5320]:  store i8 %26, i8* %27, align 1
	}

[0x55aed0a059f0]:   %28 = icmp eq i64 %11, 0 {
	[0x55aed09732d0]:  %28 = icmp eq i64 %11, 0
	}

[0x55aed0a05a58]:   %29 = zext i1 %28 to i8 {
	[0x55aed094b3f8]:  %29 = zext i1 %28 to i8
	}

[0x55aed0a05b00]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55aed097d6e0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55aed0a05b90]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x55aed0973170]:  store i8 %29, i8* %30, align 1
	}

[0x55aed0a05d80]:   %31 = lshr i64 %11, 63 {
	[0x55aed09e5100]:  %31 = lshr i64 %11, 63
	}

[0x55aed0a05de8]:   %32 = trunc i64 %31 to i8 {
	[0x55aed098f5e8]:  %32 = trunc i64 %31 to i8
	}

[0x55aed0a05e90]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55aed0978780]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55aed0a05f20]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x55aed09e3ad0]:  store i8 %32, i8* %33, align 1
	}

[0x55aed0a060d0]:   %34 = lshr i64 %8, 63 {
	[0x55aed09e4ee0]:  %34 = lshr i64 %8, 63
	}

[0x55aed0a06150]:   %35 = xor i64 %31, %34 {
	[0x55aed09e3980]:  %35 = xor i64 %31, %34
	}

[0x55aed0a061d0]:   %36 = add nuw nsw i64 %35, %34 {
	[0x55aed0973800]:  %36 = add nuw nsw i64 %35, %34
	}

[0x55aed0a06250]:   %37 = icmp eq i64 %36, 2 {
	[0x55aed0973f80]:  %37 = icmp eq i64 %36, 2
	}

[0x55aed0a062b8]:   %38 = zext i1 %37 to i8 {
	[0x55aed09e2998]:  %38 = zext i1 %37 to i8
	}

[0x55aed0a06360]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55aed0974d70]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55aed0a063f0]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x55aed0973c10]:  store i8 %38, i8* %39, align 1
	}

[0x55aed0a07198]:   %49 = load i64, i64* %RBP, align 8 {
	[0x55aed09e0de8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x55aed0a07250]:   %50 = add i64 %49, -16 {
	[0x55aed0974690]:  %51 = add i64 %50, -16
	}

[0x55aed0a072b8]:   %51 = load i64, i64* %RSI, align 8 {
	[0x55aed09e6088]:  %52 = load i64, i64* %RSI.i, align 8
	}

[0x55aed0a07318]:   %52 = load i64, i64* %PC, align 8 {
	[0x55aed09e7f28]:  %53 = load i64, i64* %3, align 8
	}

[0x55aed0a07390]:   %53 = add i64 %52, 4 {
	[0x55aed09744f0]:  %54 = add i64 %53, 4
	}

[0x55aed0a07410]:   store i64 %53, i64* %PC, align 8 {
	[0x55aed0974390]:  store i64 %54, i64* %3, align 8
	}

[0x55aed0a07478]:   %54 = inttoptr i64 %50 to i64* {
	[0x55aed09e7478]:  %55 = inttoptr i64 %51 to i64*
	}

[0x55aed0a074f0]:   store i64 %51, i64* %54, align 8 {
	[0x55aed09e5a90]:  store i64 %52, i64* %55, align 8
	}

[0x55aed0a07558]:   %55 = load i64, i64* %PC, align 8 {
	[0x55aed09e7218]:  %57 = load i64, i64* %3, align 8
	}

[0x55aed0a075d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x55aed09740d0]:  store i8 0, i8* %AL.i, align 1
	}

[0x55aed0a077c0]:   %56 = add i64 %55, 26 {
	[0x55aed0975140]:  %58 = add i64 %57, 26
	}

[0x55aed0a07840]:   %57 = add i64 %55, 7 {
	[0x55aed0976200]:  %59 = add i64 %57, 7
	}

[0x55aed0a078a8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed09e6d58]:  %60 = load i64, i64* %6, align 8
	}

[0x55aed0a07920]:   %59 = add i64 %58, -8 {
	[0x55aed0976c70]:  %61 = add i64 %60, -8
	}

[0x55aed0a07988]:   %60 = inttoptr i64 %59 to i64* {
	[0x55aed09e69c8]:  %62 = inttoptr i64 %61 to i64*
	}

[0x55aed0a07a00]:   store i64 %57, i64* %60, align 8 {
	[0x55aed0975980]:  store i64 %59, i64* %62, align 8
	}

[0x55aed0a07a80]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261 {
	[0x55aed0975780]:  store i64 %61, i64* %6, align 8
	}

[0x55aed0a07b00]:   store i64 %56, i64* %PC, align 8, !tbaa !1261 {
	[0x55aed0975550]:  store i64 %58, i64* %3, align 8
	}

[0x55aed0a07dd0]:   %61 = tail call %struct.Memory* @sub_4004c0_printdata(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x55aed0974b00]:  %call2_4004a8 = tail call %struct.Memory.32* @sub_4004c0.printdata(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	}

[0x55aed0a19ed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55aed0a31858]:  %56 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55aed0a1ac28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55aed0a27838]:  %43 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x55aed0a31f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55aed0962350]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55aed0a32140]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x55aed09cfd10]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x55aed0a37080]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55aed0967080]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55aed0a37190]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55aed0aba300]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55aed09b78e0]: block_400490 {
	[0x55aed096e290]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
