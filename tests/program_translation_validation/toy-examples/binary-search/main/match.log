Matching sub_400520_main Vs main


[Info] Retrieve Potential Matches...
[0x56106d6bfa70]:   %37 = add i64 %5, -40 {
	[0x56106d6fbc00]:  %11 = add i64 %7, -40
	[0x56106d7b6300]:  %39 = add i64 %7, -40
	}

[0x56106d6c4f58]:   ret %struct.Memory* %59 {
	[0x56106d708458]:  ret %struct.Memory.31* %call2_400555
	}

[0x56106d6c5b80]:   store i64 %37, i64* %RDI, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c5c00]:   %38 = add i64 %5, -12 {
	[0x56106d7be500]:  %40 = add i64 %7, -12
	}

[0x56106d6c5c80]:   %39 = add i64 %8, 28 {
	[0x56106d7be5b0]:  %41 = add i64 %10, 28
	}

[0x56106d6c5d00]:   store i64 %39, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c5d68]:   %40 = inttoptr i64 %38 to i32* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c5de0]:   store i32 0, i32* %40, align 4 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c5fe8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6060]:   %44 = add i64 %43, -32 {
	[0x56106d7c3420]:  %46 = add i64 %45, -32
	}

[0x56106d6c60e0]:   %45 = add i64 %41, 12 {
	[0x56106d65b190]:  %53 = add i64 %49, 12
	[0x56106d7c0260]:  %47 = add i64 %43, 12
	}

[0x56106d6c6160]:   store i64 %45, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c61c8]:   %46 = inttoptr i64 %44 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c6240]:   store i64 %42, i64* %46, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6488]:   %49 = load i64, i64* %RBP, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6500]:   %50 = add i64 %49, -24 {
	[0x56106d6595f0]:  %52 = add i64 %51, -24
	}

[0x56106d6c6580]:   %51 = add i64 %47, 12 {
	[0x56106d65b190]:  %53 = add i64 %49, 12
	[0x56106d7c0260]:  %47 = add i64 %43, 12
	}

[0x56106d6c6600]:   store i64 %51, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6668]:   %52 = inttoptr i64 %50 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c66e0]:   store i64 %48, i64* %52, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6800]:   %54 = add i64 %53, -229 {
	[0x56106d71f870]:  %56 = add i64 %55, -229
	}

[0x56106d6c6880]:   %55 = add i64 %53, 5 {
	[0x56106d720130]:  %57 = add i64 %55, 5
	[0x56106d72ccb0]:  %85 = add i64 %62, 5
	}

[0x56106d6c68e8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6960]:   %57 = add i64 %56, -8 {
	[0x56106d649f60]:  %8 = add i64 %7, -8
	[0x56106d720310]:  %59 = add i64 %58, -8
	}

[0x56106d6c69c8]:   %58 = inttoptr i64 %57 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c6a40]:   store i64 %55, i64* %58, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6ac0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6b40]:   store i64 %54, i64* %PC, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6c40]:   %59 = tail call %struct.Memory* @sub_400470_binary_search(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x56106d707540]:  %call2_400555 = tail call %struct.Memory.31* @sub_400470.binary_search(%struct.State.0* %0, i64 %56, %struct.Memory.31* %2)
	[0x56106d71ee00]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x56106d7275d0]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x56106d6c6cb8]:   %60 = load i64, i64* %RSP, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6d90]:   %62 = add i64 %60, 32 {
	[0x56106d723cd0]:  %63 = add i64 %61, 32
	}

[0x56106d6c6e10]:   store i64 %62, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6ed0]:   %63 = icmp ugt i64 %60, -33 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6c6f38]:   %64 = zext i1 %63 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6c73a8]:   %68 = trunc i32 %67 to i8 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6c7420]:   %69 = and i8 %68, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	[0x56106d6fe460]:  %25 = and i8 %24, 1
	[0x56106d71e9e0]:  %75 = and i8 %74, 1
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6c74a0]:   %70 = xor i8 %69, 1 {
	[0x56106d6fdfe0]:  %20 = xor i8 %19, 1
	[0x56106d721340]:  %71 = xor i8 %70, 1
	}

[0x56106d6c7520]:   store i8 %70, i8* %19, align 1, !tbaa !1275 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c75a0]:   %71 = xor i64 %62, %60 {
	[0x56106d6fe200]:  %22 = xor i64 %8, %11
	[0x56106d71e640]:  %72 = xor i64 %63, %61
	[0x56106d721e10]:  %34 = xor i64 %30, %33
	[0x56106d7232e0]:  %81 = xor i64 %78, %80
	}

[0x56106d6c7620]:   %72 = lshr i64 %71, 4 {
	[0x56106d71d570]:  %23 = lshr i64 %22, 4
	[0x56106d71e910]:  %73 = lshr i64 %72, 4
	}

[0x56106d6c7688]:   %73 = trunc i64 %72 to i8 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6c7700]:   %74 = and i8 %73, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	[0x56106d6fe460]:  %25 = and i8 %24, 1
	[0x56106d71e9e0]:  %75 = and i8 %74, 1
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6c7780]:   store i8 %74, i8* %24, align 1, !tbaa !1276 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c7800]:   %75 = icmp eq i64 %62, 0 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6c7868]:   %76 = zext i1 %75 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6c78e0]:   store i8 %76, i8* %27, align 1, !tbaa !1277 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c7960]:   %77 = lshr i64 %62, 63 {
	[0x56106d6feb90]:  %30 = lshr i64 %11, 63
	[0x56106d6ff500]:  %33 = lshr i64 %8, 63
	[0x56106d727a10]:  %80 = lshr i64 %61, 63
	[0x56106d72a550]:  %78 = lshr i64 %63, 63
	}

[0x56106d6c79c8]:   %78 = trunc i64 %77 to i8 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6c7a40]:   store i8 %78, i8* %30, align 1, !tbaa !1278 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c7ac0]:   %79 = lshr i64 %60, 63 {
	[0x56106d6feb90]:  %30 = lshr i64 %11, 63
	[0x56106d6ff500]:  %33 = lshr i64 %8, 63
	[0x56106d727a10]:  %80 = lshr i64 %61, 63
	[0x56106d72a550]:  %78 = lshr i64 %63, 63
	}

[0x56106d6c7b40]:   %80 = xor i64 %77, %79 {
	[0x56106d6fe200]:  %22 = xor i64 %8, %11
	[0x56106d71e640]:  %72 = xor i64 %63, %61
	[0x56106d721e10]:  %34 = xor i64 %30, %33
	[0x56106d7232e0]:  %81 = xor i64 %78, %80
	}

[0x56106d6c7bc0]:   %81 = add nuw nsw i64 %80, %77 {
	[0x56106d721d00]:  %35 = add nuw nsw i64 %34, %33
	[0x56106d72c410]:  %82 = add nuw nsw i64 %81, %78
	}

[0x56106d6c7c40]:   %82 = icmp eq i64 %81, 2 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6c7ca8]:   %83 = zext i1 %82 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6c7d20]:   store i8 %83, i8* %36, align 1, !tbaa !1279 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c7da0]:   %84 = add i64 %61, 5 {
	[0x56106d720130]:  %57 = add i64 %55, 5
	[0x56106d72ccb0]:  %85 = add i64 %62, 5
	}

[0x56106d6c7e20]:   store i64 %84, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c7ea0]:   %85 = add i64 %60, 40 {
	[0x56106d70aea0]:  %86 = add i64 %61, 40
	}

[0x56106d6c7f08]:   %86 = inttoptr i64 %62 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c7f68]:   %87 = load i64, i64* %86, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c7fe0]:   store i64 %87, i64* %RBP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c8060]:   store i64 %85, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c80e0]:   %88 = add i64 %61, 6 {
	[0x56106d7301a0]:  %89 = add i64 %62, 6
	}

[0x56106d6c8160]:   store i64 %88, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c81c8]:   %89 = inttoptr i64 %85 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c8228]:   %90 = load i64, i64* %89, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c82a0]:   store i64 %90, i64* %PC, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c8320]:   %91 = add i64 %60, 48 {
	[0x56106d730e30]:  %92 = add i64 %61, 48
	}

[0x56106d6c83a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6ca3d0]: %struct.Memory* %2 {
	[0x56106d730b90]:%struct.Memory.31* %2
	}

[0x56106d6cb2e0]:   store i64 30, i64* %RDX, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6cb760]: %struct.State* %0 {
	[0x56106d70a470]:%struct.State.0* %0
	}

[0x56106d6cb900]: i64 %1 {
	[0x56106d70b180]:i64 %1
	}

[0x56106d6d37d8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6d38b0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56106d693d20]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56106d6d39a0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x56106d697840]:  %RAX.i14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x56106d6d3a90]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x56106d696d20]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x56106d6d3ba0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x56106d6958f0]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x56106d6d3cb0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x56106d6974c0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x56106d6d3dc0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x56106d6954f0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56106d6d3ed0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x56106d695360]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56106d6d3f80]:   %4 = add i64 %1, 1 {
	[0x56106d64b000]:  %5 = add i64 %1, 1
	}

[0x56106d6d4050]:   store i64 %4, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d40b8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6d4130]:   %6 = add i64 %5, -8 {
	[0x56106d649f60]:  %8 = add i64 %7, -8
	[0x56106d720310]:  %59 = add i64 %58, -8
	}

[0x56106d6d4198]:   %7 = inttoptr i64 %6 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6d4210]:   store i64 %3, i64* %7, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6d42f0]:   %17 = and i8 %16, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	[0x56106d6fe460]:  %25 = and i8 %24, 1
	[0x56106d71e9e0]:  %75 = and i8 %74, 1
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6d4380]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d4400]:   %9 = add i64 %5, -40 {
	[0x56106d6fbc00]:  %11 = add i64 %7, -40
	[0x56106d7b6300]:  %39 = add i64 %7, -40
	}

[0x56106d6d92a0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d9320]:   %10 = icmp ult i64 %6, 32 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6d9388]:   %11 = zext i1 %10 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6d9430]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x56106d6fe560]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x56106d6d94c0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d9528]:   %13 = trunc i64 %9 to i32 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6d95a0]:   %14 = and i32 %13, 255 {
	[0x56106d6fdad0]:  %16 = and i32 %15, 255
	[0x56106d727260]:  %67 = and i32 %66, 255
	}

[0x56106d6d9660]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x56106d707540]:  %call2_400555 = tail call %struct.Memory.31* @sub_400470.binary_search(%struct.State.0* %0, i64 %56, %struct.Memory.31* %2)
	[0x56106d71ee00]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x56106d7275d0]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x56106d6d96d8]:   %16 = trunc i32 %15 to i8 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6d9750]:   %33 = add nuw nsw i64 %32, %31 {
	[0x56106d721d00]:  %35 = add nuw nsw i64 %34, %33
	[0x56106d72c410]:  %82 = add nuw nsw i64 %81, %78
	}

[0x56106d6d97d0]:   %34 = icmp eq i64 %33, 2 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6d9860]:   %18 = xor i8 %17, 1 {
	[0x56106d6fdfe0]:  %20 = xor i8 %19, 1
	[0x56106d721340]:  %71 = xor i8 %70, 1
	}

[0x56106d6d9910]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x56106d6fcd40]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x56106d6d99a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d9a20]:   %20 = xor i64 %6, %9 {
	[0x56106d6fe200]:  %22 = xor i64 %8, %11
	[0x56106d71e640]:  %72 = xor i64 %63, %61
	[0x56106d721e10]:  %34 = xor i64 %30, %33
	[0x56106d7232e0]:  %81 = xor i64 %78, %80
	}

[0x56106d6d9aa0]:   %21 = lshr i64 %20, 4 {
	[0x56106d71d570]:  %23 = lshr i64 %22, 4
	[0x56106d71e910]:  %73 = lshr i64 %72, 4
	}

[0x56106d6d9b08]:   %22 = trunc i64 %21 to i8 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6d9b80]:   %23 = and i8 %22, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	[0x56106d6fe460]:  %25 = and i8 %24, 1
	[0x56106d71e9e0]:  %75 = and i8 %74, 1
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6d9c30]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x56106d706cf0]:  %26 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x56106d6d9cc0]:   store i8 %23, i8* %24, align 1, !tbaa !1276 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d9d40]:   %25 = icmp eq i64 %9, 0 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6d9da8]:   %26 = zext i1 %25 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6d9e50]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56106d706f50]:  %29 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x56106d6d9ee0]:   store i8 %26, i8* %27, align 1, !tbaa !1277 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6d9f60]:   %28 = lshr i64 %9, 63 {
	[0x56106d6feb90]:  %30 = lshr i64 %11, 63
	[0x56106d6ff500]:  %33 = lshr i64 %8, 63
	[0x56106d727a10]:  %80 = lshr i64 %61, 63
	[0x56106d72a550]:  %78 = lshr i64 %63, 63
	}

[0x56106d6d9fc8]:   %29 = trunc i64 %28 to i8 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6da070]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56106d707080]:  %32 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x56106d6da100]:   store i8 %29, i8* %30, align 1, !tbaa !1278 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6da180]:   %31 = lshr i64 %6, 63 {
	[0x56106d6feb90]:  %30 = lshr i64 %11, 63
	[0x56106d6ff500]:  %33 = lshr i64 %8, 63
	[0x56106d727a10]:  %80 = lshr i64 %61, 63
	[0x56106d72a550]:  %78 = lshr i64 %63, 63
	}

[0x56106d6da200]:   %32 = xor i64 %28, %31 {
	[0x56106d6fe200]:  %22 = xor i64 %8, %11
	[0x56106d71e640]:  %72 = xor i64 %63, %61
	[0x56106d721e10]:  %34 = xor i64 %30, %33
	[0x56106d7232e0]:  %81 = xor i64 %78, %80
	}

[0x56106d6da280]:   store i8 %64, i8* %12, align 1, !tbaa !1261 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6da2e8]:   %65 = trunc i64 %62 to i32 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6da360]:   %66 = and i32 %65, 255 {
	[0x56106d6fdad0]:  %16 = and i32 %15, 255
	[0x56106d727260]:  %67 = and i32 %66, 255
	}

[0x56106d6da400]:   %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9 {
	[0x56106d707540]:  %call2_400555 = tail call %struct.Memory.31* @sub_400470.binary_search(%struct.State.0* %0, i64 %56, %struct.Memory.31* %2)
	[0x56106d71ee00]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x56106d7275d0]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x56106d6da478]:   %35 = zext i1 %34 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6da520]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56106d7072e0]:  %38 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x56106d6da5b0]:   store i8 %35, i8* %36, align 1, !tbaa !1279 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6da630]:   store i64 4, i64* %RSI, align 8, !tbaa !1257 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x56106d7012b8]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6d37d8]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x56106d6d4210]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7c3420]:   %46 = add i64 %45, -32


Removing: [0x56106d703b28]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6d37d8]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x56106d6d4210]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d6595f0]:   %52 = add i64 %51, -24


Removing: [0x56106d705548]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6d40b8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x56106d6c5c00]:   %38 = add i64 %5, -12


Uprime Matches: [0x56106d7be500]:   %40 = add i64 %7, -12


Adj: [0x56106d70aea0]:   %86 = add i64 %61, 40
[0x56106d71e640]:   %72 = xor i64 %63, %61
[0x56106d723cd0]:   %63 = add i64 %61, 32
[0x56106d726980]:   %64 = icmp ugt i64 %61, -33
[0x56106d727a10]:   %80 = lshr i64 %61, 63
[0x56106d730e30]:   %92 = add i64 %61, 48


Removing: [0x56106d721c48]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6d40b8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x56106d6c5c00]:   %38 = add i64 %5, -12


Uprime Matches: [0x56106d7be500]:   %40 = add i64 %7, -12


Adj: [0x56106d720310]:   %59 = add i64 %58, -8


Removing: [0x56106d701058]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c5c80]:   %39 = add i64 %8, 28


Uprime Matches: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Adj: [0x56106d7c0260]:   %47 = add i64 %43, 12


Removing: [0x56106d701fc8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c5c80]:   %39 = add i64 %8, 28


Uprime Matches: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Adj: [0x56106d65b190]:   %53 = add i64 %49, 12


Removing: [0x56106d704378]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c5c80]:   %39 = add i64 %8, 28


Uprime Matches: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Adj: [0x56106d71f870]:   %56 = add i64 %55, -229
[0x56106d720130]:   %57 = add i64 %55, 5


Removing: [0x56106d706128]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c5c80]:   %39 = add i64 %8, 28


Uprime Matches: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Adj: [0x56106d72ccb0]:   %85 = add i64 %62, 5
[0x56106d7301a0]:   %89 = add i64 %62, 6


Removing: [0x56106d7b6300]:   %39 = add i64 %7, -40
From the pot matches of: [0x56106d6d4400]:   %9 = add i64 %5, -40


Uprime : [0x56106d6d9f60]:   %28 = lshr i64 %9, 63


Uprime Matches: [0x56106d6feb90]:   %30 = lshr i64 %11, 63
[0x56106d6ff500]:   %33 = lshr i64 %8, 63
[0x56106d727a10]:   %80 = lshr i64 %61, 63
[0x56106d72a550]:   %78 = lshr i64 %63, 63


Adj: [0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8


Removing: [0x56106d6ff458]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fdad0]:   %16 = and i32 %15, 255


Removing: [0x56106d700348]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fece0]:   store i8 %31, i8* %32, align 1


Removing: [0x56106d7064b8]:   %66 = trunc i64 %63 to i32
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d727260]:   %67 = and i32 %66, 255


Removing: [0x56106d706aa8]:   %79 = trunc i64 %78 to i8
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d727820]:   store i8 %79, i8* %32, align 1


Removing: [0x56106d6fe460]:   %25 = and i8 %24, 1
From the pot matches of: [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime : [0x56106d6d9860]:   %18 = xor i8 %17, 1


Uprime Matches: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1
[0x56106d721340]:   %71 = xor i8 %70, 1


Adj: [0x56106d6fe640]:   store i8 %25, i8* %26, align 1


Removing: [0x56106d71e9e0]:   %75 = and i8 %74, 1
From the pot matches of: [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime : [0x56106d6d9860]:   %18 = xor i8 %17, 1


Uprime Matches: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1
[0x56106d721340]:   %71 = xor i8 %70, 1


Adj: [0x56106d729840]:   store i8 %75, i8* %26, align 1


Removing: [0x56106d6fbc00]:   %11 = add i64 %7, -40
From the pot matches of: [0x56106d6bfa70]:   %37 = add i64 %5, -40


Uprime : [0x56106d6c5b80]:   store i64 %37, i64* %RDI, align 8, !tbaa !1257


Uprime Matches: [0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8


Adj: [0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe200]:   %22 = xor i64 %8, %11
[0x56106d6feb90]:   %30 = lshr i64 %11, 63
[0x56106d6ff458]:   %15 = trunc i64 %11 to i32
[0x56106d71ddf0]:   %27 = icmp eq i64 %11, 0


Removing: [0x56106d6fb278]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c60e0]:   %45 = add i64 %41, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12
[0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Removing: [0x56106d704378]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c60e0]:   %45 = add i64 %41, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12
[0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d71f870]:   %56 = add i64 %55, -229
[0x56106d720130]:   %57 = add i64 %55, 5


Removing: [0x56106d706128]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c60e0]:   %45 = add i64 %41, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12
[0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d72ccb0]:   %85 = add i64 %62, 5
[0x56106d7301a0]:   %89 = add i64 %62, 6


Removing: [0x56106d6f03b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d649f60]:   %8 = add i64 %7, -8
[0x56106d6fbc00]:   %11 = add i64 %7, -40
[0x56106d7b6300]:   %39 = add i64 %7, -40
[0x56106d7be500]:   %40 = add i64 %7, -12


Removing: [0x56106d6fb278]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Removing: [0x56106d701058]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7c0260]:   %47 = add i64 %43, 12


Removing: [0x56106d7012b8]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7c3420]:   %46 = add i64 %45, -32


Removing: [0x56106d701fc8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d65b190]:   %53 = add i64 %49, 12


Removing: [0x56106d703b28]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d6595f0]:   %52 = add i64 %51, -24


Removing: [0x56106d704378]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d71f870]:   %56 = add i64 %55, -229
[0x56106d720130]:   %57 = add i64 %55, 5


Removing: [0x56106d705548]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d70aea0]:   %86 = add i64 %61, 40
[0x56106d71e640]:   %72 = xor i64 %63, %61
[0x56106d723cd0]:   %63 = add i64 %61, 32
[0x56106d726980]:   %64 = icmp ugt i64 %61, -33
[0x56106d727a10]:   %80 = lshr i64 %61, 63
[0x56106d730e30]:   %92 = add i64 %61, 48


Removing: [0x56106d706128]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d72ccb0]:   %85 = add i64 %62, 5
[0x56106d7301a0]:   %89 = add i64 %62, 6


Removing: [0x56106d721c48]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d720310]:   %59 = add i64 %58, -8


Removing: [0x56106d6b3e48]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c5fe8]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x56106d6c6060]:   %44 = add i64 %43, -32


Uprime Matches: [0x56106d7c3420]:   %46 = add i64 %45, -32


Adj: [0x56106d6fbd10]:   store i64 %4, i64* %9, align 8


Removing: [0x56106d703b28]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c5fe8]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x56106d6c6060]:   %44 = add i64 %43, -32


Uprime Matches: [0x56106d7c3420]:   %46 = add i64 %45, -32


Adj: [0x56106d6595f0]:   %52 = add i64 %51, -24


Removing: [0x56106d6fb278]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6580]:   %51 = add i64 %47, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12
[0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Removing: [0x56106d704378]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6580]:   %51 = add i64 %47, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12
[0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d71f870]:   %56 = add i64 %55, -229
[0x56106d720130]:   %57 = add i64 %55, 5


Removing: [0x56106d706128]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6580]:   %51 = add i64 %47, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12
[0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d72ccb0]:   %85 = add i64 %62, 5
[0x56106d7301a0]:   %89 = add i64 %62, 6


Removing: [0x56106d6f03b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d649f60]:   %8 = add i64 %7, -8
[0x56106d6fbc00]:   %11 = add i64 %7, -40
[0x56106d7b6300]:   %39 = add i64 %7, -40
[0x56106d7be500]:   %40 = add i64 %7, -12


Removing: [0x56106d6fb278]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Removing: [0x56106d701058]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7c0260]:   %47 = add i64 %43, 12


Removing: [0x56106d7012b8]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d7c3420]:   %46 = add i64 %45, -32


Removing: [0x56106d701fc8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d65b190]:   %53 = add i64 %49, 12


Removing: [0x56106d703b28]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d6595f0]:   %52 = add i64 %51, -24


Removing: [0x56106d704378]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d71f870]:   %56 = add i64 %55, -229
[0x56106d720130]:   %57 = add i64 %55, 5


Removing: [0x56106d705548]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d70aea0]:   %86 = add i64 %61, 40
[0x56106d71e640]:   %72 = xor i64 %63, %61
[0x56106d723cd0]:   %63 = add i64 %61, 32
[0x56106d726980]:   %64 = icmp ugt i64 %61, -33
[0x56106d727a10]:   %80 = lshr i64 %61, 63
[0x56106d730e30]:   %92 = add i64 %61, 48


Removing: [0x56106d706128]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d72ccb0]:   %85 = add i64 %62, 5
[0x56106d7301a0]:   %89 = add i64 %62, 6


Removing: [0x56106d721c48]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c66e0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x56106d64a720]:   store i64 %5, i64* %3, align 8
[0x56106d660640]:   store i64 %53, i64* %3, align 8
[0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d6ae630]:   store i64 %44, i64* %48, align 8
[0x56106d6fbd10]:   store i64 %4, i64* %9, align 8
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fce60]:   store i8 %13, i8* %14, align 1
[0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1
[0x56106d6fe640]:   store i8 %25, i8* %26, align 1
[0x56106d6feac0]:   store i8 %28, i8* %29, align 1
[0x56106d6fece0]:   store i8 %31, i8* %32, align 1
[0x56106d71df70]:   store i8 %71, i8* %21, align 1
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8
[0x56106d722840]:   store i64 %56, i64* %3, align 8
[0x56106d722e20]:   store i64 %57, i64* %60, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d726e90]:   store i8 %65, i8* %14, align 1
[0x56106d727820]:   store i8 %79, i8* %32, align 1
[0x56106d729840]:   store i8 %75, i8* %26, align 1
[0x56106d72a420]:   store i8 %77, i8* %29, align 1
[0x56106d72b580]:   store i64 %92, i64* %6, align 8
[0x56106d72c920]:   store i8 %84, i8* %38, align 1
[0x56106d72ce30]:   store i64 %85, i64* %3, align 8
[0x56106d730320]:   store i64 %89, i64* %3, align 8
[0x56106d730620]:   store i64 %91, i64* %3, align 8
[0x56106d7ac420]:   store i8 %37, i8* %38, align 1
[0x56106d7b4ff0]:   store i64 4, i64* %RSI.i, align 8
[0x56106d7b7810]:   store i64 30, i64* %RDX.i, align 8
[0x56106d7bcd30]:   store i64 %39, i64* %RDI.i, align 8
[0x56106d7bf960]:   store i64 %41, i64* %3, align 8
[0x56106d7c0e10]:   store i32 0, i32* %42, align 4
[0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d720310]:   %59 = add i64 %58, -8


Removing: [0x56106d6b3e48]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257


Uprime Matches: [0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x56106d6fbd10]:   store i64 %4, i64* %9, align 8


Removing: [0x56106d701188]:   %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257


Uprime Matches: [0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x56106d6ae630]:   store i64 %44, i64* %48, align 8


Removing: [0x56106d7026a8]:   %88 = load i64, i64* %87, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257


Uprime Matches: [0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8


Removing: [0x56106d708328]:   %91 = load i64, i64* %90, align 8
From the pot matches of: [0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257


Uprime Matches: [0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x56106d730620]:   store i64 %91, i64* %3, align 8


Removing: [0x56106d6b3e48]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c6488]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x56106d6c6500]:   %50 = add i64 %49, -24


Uprime Matches: [0x56106d6595f0]:   %52 = add i64 %51, -24


Adj: [0x56106d6fbd10]:   store i64 %4, i64* %9, align 8


Removing: [0x56106d7012b8]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c6488]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x56106d6c6500]:   %50 = add i64 %49, -24


Uprime Matches: [0x56106d6595f0]:   %52 = add i64 %51, -24


Adj: [0x56106d7c3420]:   %46 = add i64 %45, -32


Removing: [0x56106d6fb278]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6880]:   %55 = add i64 %53, 5


Uprime Matches: [0x56106d720130]:   %57 = add i64 %55, 5
[0x56106d72ccb0]:   %85 = add i64 %62, 5


Adj: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Removing: [0x56106d701058]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6880]:   %55 = add i64 %53, 5


Uprime Matches: [0x56106d720130]:   %57 = add i64 %55, 5
[0x56106d72ccb0]:   %85 = add i64 %62, 5


Adj: [0x56106d7c0260]:   %47 = add i64 %43, 12


Removing: [0x56106d701fc8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6880]:   %55 = add i64 %53, 5


Uprime Matches: [0x56106d720130]:   %57 = add i64 %55, 5
[0x56106d72ccb0]:   %85 = add i64 %62, 5


Adj: [0x56106d65b190]:   %53 = add i64 %49, 12


Removing: [0x56106d706128]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6800]:   %54 = add i64 %53, -229


Uprime Matches: [0x56106d71f870]:   %56 = add i64 %55, -229


Adj: [0x56106d72ccb0]:   %85 = add i64 %62, 5
[0x56106d7301a0]:   %89 = add i64 %62, 6


Removing: [0x56106d705548]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c68e8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x56106d6c6960]:   %57 = add i64 %56, -8


Uprime Matches: [0x56106d649f60]:   %8 = add i64 %7, -8
[0x56106d720310]:   %59 = add i64 %58, -8


Adj: [0x56106d70aea0]:   %86 = add i64 %61, 40
[0x56106d71e640]:   %72 = xor i64 %63, %61
[0x56106d723cd0]:   %63 = add i64 %61, 32
[0x56106d726980]:   %64 = icmp ugt i64 %61, -33
[0x56106d727a10]:   %80 = lshr i64 %61, 63
[0x56106d730e30]:   %92 = add i64 %61, 48


Removing: [0x56106d649f60]:   %8 = add i64 %7, -8
From the pot matches of: [0x56106d6c6960]:   %57 = add i64 %56, -8


Uprime : [0x56106d6c6ac0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x56106d6fcf70]:   store i64 %11, i64* %6, align 8
[0x56106d723750]:   store i64 %59, i64* %6, align 8
[0x56106d723fe0]:   store i64 %63, i64* %6, align 8
[0x56106d724f00]:   store i64 %86, i64* %6, align 8
[0x56106d72b580]:   store i64 %92, i64* %6, align 8


Adj: [0x56106d6f93a8]:   %9 = inttoptr i64 %8 to i64*
[0x56106d6fbe20]:   store i64 %8, i64* %RBP.i, align 8
[0x56106d6fd080]:   %12 = icmp ult i64 %8, 32
[0x56106d6fe200]:   %22 = xor i64 %8, %11
[0x56106d6ff500]:   %33 = lshr i64 %8, 63


Removing: [0x56106d6f03b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c6cb8]:   %60 = load i64, i64* %RSP, align 8


Uprime : [0x56106d6c8320]:   %91 = add i64 %60, 48


Uprime Matches: [0x56106d730e30]:   %92 = add i64 %61, 48


Adj: [0x56106d649f60]:   %8 = add i64 %7, -8
[0x56106d6fbc00]:   %11 = add i64 %7, -40
[0x56106d7b6300]:   %39 = add i64 %7, -40
[0x56106d7be500]:   %40 = add i64 %7, -12


Removing: [0x56106d721c48]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c6cb8]:   %60 = load i64, i64* %RSP, align 8


Uprime : [0x56106d6c8320]:   %91 = add i64 %60, 48


Uprime Matches: [0x56106d730e30]:   %92 = add i64 %61, 48


Adj: [0x56106d720310]:   %59 = add i64 %58, -8


Removing: [0x56106d6fb278]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c80e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x56106d7301a0]:   %89 = add i64 %62, 6


Adj: [0x56106d7be5b0]:   %41 = add i64 %10, 28


Removing: [0x56106d701058]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c80e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x56106d7301a0]:   %89 = add i64 %62, 6


Adj: [0x56106d7c0260]:   %47 = add i64 %43, 12


Removing: [0x56106d701fc8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c80e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x56106d7301a0]:   %89 = add i64 %62, 6


Adj: [0x56106d65b190]:   %53 = add i64 %49, 12


Removing: [0x56106d704378]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c80e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x56106d7301a0]:   %89 = add i64 %62, 6


Adj: [0x56106d71f870]:   %56 = add i64 %55, -229
[0x56106d720130]:   %57 = add i64 %55, 5


Removing: [0x56106d6ff458]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fdad0]:   %16 = and i32 %15, 255


Removing: [0x56106d700348]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fece0]:   store i8 %31, i8* %32, align 1


Removing: [0x56106d7064b8]:   %66 = trunc i64 %63 to i32
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d727260]:   %67 = and i32 %66, 255


Removing: [0x56106d706aa8]:   %79 = trunc i64 %78 to i8
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d6fe460]:   %25 = and i8 %24, 1
[0x56106d71e9e0]:   %75 = and i8 %74, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d727820]:   store i8 %79, i8* %32, align 1


Removing: [0x56106d6fe460]:   %25 = and i8 %24, 1
From the pot matches of: [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime : [0x56106d6c74a0]:   %70 = xor i8 %69, 1


Uprime Matches: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1
[0x56106d721340]:   %71 = xor i8 %70, 1


Adj: [0x56106d6fe640]:   store i8 %25, i8* %26, align 1


Removing: [0x56106d71e9e0]:   %75 = and i8 %74, 1
From the pot matches of: [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime : [0x56106d6c74a0]:   %70 = xor i8 %69, 1


Uprime Matches: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1
[0x56106d721340]:   %71 = xor i8 %70, 1


Adj: [0x56106d729840]:   store i8 %75, i8* %26, align 1

Round: 1

Removing: [0x56106d6ffa48]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fe460]:   %25 = and i8 %24, 1


Removing: [0x56106d706718]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d71e9e0]:   %75 = and i8 %74, 1


Removing: [0x56106d6b3e48]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d6ae630]:   store i64 %44, i64* %48, align 8


Adj: [0x56106d6fbd10]:   store i64 %4, i64* %9, align 8


Removing: [0x56106d7026a8]:   %88 = load i64, i64* %87, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d6ae630]:   store i64 %44, i64* %48, align 8


Adj: [0x56106d724de0]:   store i64 %88, i64* %RBP.i, align 8


Removing: [0x56106d7039f8]:   %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d6ae630]:   store i64 %44, i64* %48, align 8


Adj: [0x56106d6ae1d0]:   store i64 %50, i64* %RAX.i14, align 8
[0x56106d71fae0]:   store i64 %50, i64* %54, align 8


Removing: [0x56106d708328]:   %91 = load i64, i64* %90, align 8
From the pot matches of: [0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x56106d6c6240]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x56106d6ae630]:   store i64 %44, i64* %48, align 8


Adj: [0x56106d730620]:   store i64 %91, i64* %3, align 8


Removing: [0x56106d6f03b8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56106d6c68e8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x56106d6c6960]:   %57 = add i64 %56, -8


Uprime Matches: [0x56106d720310]:   %59 = add i64 %58, -8


Adj: [0x56106d649f60]:   %8 = add i64 %7, -8
[0x56106d6fbc00]:   %11 = add i64 %7, -40
[0x56106d7b6300]:   %39 = add i64 %7, -40
[0x56106d7be500]:   %40 = add i64 %7, -12


Removing: [0x56106d6ffa48]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fe460]:   %25 = and i8 %24, 1


Removing: [0x56106d706718]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1
[0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d71e9e0]:   %75 = and i8 %74, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x56106d6bfa70]:   %37 = add i64 %5, -40 {
	[0x56106d7b6300]:  %39 = add i64 %7, -40
	}

[0x56106d6c4f58]:   ret %struct.Memory* %59 {
	[0x56106d708458]:  ret %struct.Memory.31* %call2_400555
	}

[0x56106d6c5b80]:   store i64 %37, i64* %RDI, align 8, !tbaa !1257 {
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	}

[0x56106d6c5c00]:   %38 = add i64 %5, -12 {
	[0x56106d7be500]:  %40 = add i64 %7, -12
	}

[0x56106d6c5c80]:   %39 = add i64 %8, 28 {
	[0x56106d7be5b0]:  %41 = add i64 %10, 28
	}

[0x56106d6c5d00]:   store i64 %39, i64* %PC, align 8 {
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	}

[0x56106d6c5d68]:   %40 = inttoptr i64 %38 to i32* {
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	}

[0x56106d6c5de0]:   store i32 0, i32* %40, align 4 {
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	}

[0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8 {
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	}

[0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16 {
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	}

[0x56106d6c5fe8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	}

[0x56106d6c6060]:   %44 = add i64 %43, -32 {
	[0x56106d7c3420]:  %46 = add i64 %45, -32
	}

[0x56106d6c60e0]:   %45 = add i64 %41, 12 {
	[0x56106d65b190]:  %53 = add i64 %49, 12
	[0x56106d7c0260]:  %47 = add i64 %43, 12
	}

[0x56106d6c6160]:   store i64 %45, i64* %PC, align 8 {
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c61c8]:   %46 = inttoptr i64 %44 to i64* {
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	}

[0x56106d6c6240]:   store i64 %42, i64* %46, align 8 {
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	}

[0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8 {
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	}

[0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8 {
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	}

[0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257 {
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	}

[0x56106d6c6488]:   %49 = load i64, i64* %RBP, align 8 {
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	}

[0x56106d6c6500]:   %50 = add i64 %49, -24 {
	[0x56106d6595f0]:  %52 = add i64 %51, -24
	}

[0x56106d6c6580]:   %51 = add i64 %47, 12 {
	[0x56106d65b190]:  %53 = add i64 %49, 12
	[0x56106d7c0260]:  %47 = add i64 %43, 12
	}

[0x56106d6c6600]:   store i64 %51, i64* %PC, align 8 {
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c6668]:   %52 = inttoptr i64 %50 to i64* {
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	}

[0x56106d6c66e0]:   store i64 %48, i64* %52, align 8 {
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	}

[0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8 {
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	}

[0x56106d6c6800]:   %54 = add i64 %53, -229 {
	[0x56106d71f870]:  %56 = add i64 %55, -229
	}

[0x56106d6c6880]:   %55 = add i64 %53, 5 {
	[0x56106d720130]:  %57 = add i64 %55, 5
	}

[0x56106d6c68e8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6960]:   %57 = add i64 %56, -8 {
	[0x56106d720310]:  %59 = add i64 %58, -8
	}

[0x56106d6c69c8]:   %58 = inttoptr i64 %57 to i64* {
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	}

[0x56106d6c6a40]:   store i64 %55, i64* %58, align 8 {
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	}

[0x56106d6c6ac0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	}

[0x56106d6c6b40]:   store i64 %54, i64* %PC, align 8, !tbaa !1257 {
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	}

[0x56106d6c6c40]:   %59 = tail call %struct.Memory* @sub_400470_binary_search(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x56106d707540]:  %call2_400555 = tail call %struct.Memory.31* @sub_400470.binary_search(%struct.State.0* %0, i64 %56, %struct.Memory.31* %2)
	}

[0x56106d6c6cb8]:   %60 = load i64, i64* %RSP, align 8 {
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	}

[0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8 {
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	}

[0x56106d6c6d90]:   %62 = add i64 %60, 32 {
	[0x56106d723cd0]:  %63 = add i64 %61, 32
	}

[0x56106d6c6e10]:   store i64 %62, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	}

[0x56106d6c6ed0]:   %63 = icmp ugt i64 %60, -33 {
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	}

[0x56106d6c6f38]:   %64 = zext i1 %63 to i8 {
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	}

[0x56106d6c73a8]:   %68 = trunc i32 %67 to i8 {
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	}

[0x56106d6c7420]:   %69 = and i8 %68, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6c74a0]:   %70 = xor i8 %69, 1 {
	[0x56106d6fdfe0]:  %20 = xor i8 %19, 1
	[0x56106d721340]:  %71 = xor i8 %70, 1
	}

[0x56106d6c7520]:   store i8 %70, i8* %19, align 1, !tbaa !1275 {
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	}

[0x56106d6c75a0]:   %71 = xor i64 %62, %60 {
	[0x56106d71e640]:  %72 = xor i64 %63, %61
	}

[0x56106d6c7620]:   %72 = lshr i64 %71, 4 {
	[0x56106d71e910]:  %73 = lshr i64 %72, 4
	}

[0x56106d6c7688]:   %73 = trunc i64 %72 to i8 {
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	}

[0x56106d6c7700]:   %74 = and i8 %73, 1 {
	[0x56106d71e9e0]:  %75 = and i8 %74, 1
	}

[0x56106d6c7780]:   store i8 %74, i8* %24, align 1, !tbaa !1276 {
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	}

[0x56106d6c7800]:   %75 = icmp eq i64 %62, 0 {
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	}

[0x56106d6c7868]:   %76 = zext i1 %75 to i8 {
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	}

[0x56106d6c78e0]:   store i8 %76, i8* %27, align 1, !tbaa !1277 {
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	}

[0x56106d6c7960]:   %77 = lshr i64 %62, 63 {
	[0x56106d72a550]:  %78 = lshr i64 %63, 63
	}

[0x56106d6c79c8]:   %78 = trunc i64 %77 to i8 {
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6c7a40]:   store i8 %78, i8* %30, align 1, !tbaa !1278 {
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	}

[0x56106d6c7ac0]:   %79 = lshr i64 %60, 63 {
	[0x56106d727a10]:  %80 = lshr i64 %61, 63
	}

[0x56106d6c7b40]:   %80 = xor i64 %77, %79 {
	[0x56106d7232e0]:  %81 = xor i64 %78, %80
	}

[0x56106d6c7bc0]:   %81 = add nuw nsw i64 %80, %77 {
	[0x56106d72c410]:  %82 = add nuw nsw i64 %81, %78
	}

[0x56106d6c7c40]:   %82 = icmp eq i64 %81, 2 {
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6c7ca8]:   %83 = zext i1 %82 to i8 {
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6c7d20]:   store i8 %83, i8* %36, align 1, !tbaa !1279 {
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	}

[0x56106d6c7da0]:   %84 = add i64 %61, 5 {
	[0x56106d72ccb0]:  %85 = add i64 %62, 5
	}

[0x56106d6c7e20]:   store i64 %84, i64* %PC, align 8 {
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	}

[0x56106d6c7ea0]:   %85 = add i64 %60, 40 {
	[0x56106d70aea0]:  %86 = add i64 %61, 40
	}

[0x56106d6c7f08]:   %86 = inttoptr i64 %62 to i64* {
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c7f68]:   %87 = load i64, i64* %86, align 8 {
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	}

[0x56106d6c7fe0]:   store i64 %87, i64* %RBP, align 8, !tbaa !1257 {
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	}

[0x56106d6c8060]:   store i64 %85, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	}

[0x56106d6c80e0]:   %88 = add i64 %61, 6 {
	[0x56106d7301a0]:  %89 = add i64 %62, 6
	}

[0x56106d6c8160]:   store i64 %88, i64* %PC, align 8 {
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	}

[0x56106d6c81c8]:   %89 = inttoptr i64 %85 to i64* {
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	}

[0x56106d6c8228]:   %90 = load i64, i64* %89, align 8 {
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	}

[0x56106d6c82a0]:   store i64 %90, i64* %PC, align 8, !tbaa !1257 {
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	}

[0x56106d6c8320]:   %91 = add i64 %60, 48 {
	[0x56106d730e30]:  %92 = add i64 %61, 48
	}

[0x56106d6c83a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	}

[0x56106d6ca3d0]: %struct.Memory* %2 {
	[0x56106d730b90]:%struct.Memory.31* %2
	}

[0x56106d6cb2e0]:   store i64 30, i64* %RDX, align 8, !tbaa !1257 {
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	}

[0x56106d6cb760]: %struct.State* %0 {
	[0x56106d70a470]:%struct.State.0* %0
	}

[0x56106d6cb900]: i64 %1 {
	[0x56106d70b180]:i64 %1
	}

[0x56106d6d37d8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x56106d6d38b0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56106d693d20]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56106d6d39a0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x56106d697840]:  %RAX.i14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x56106d6d3a90]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x56106d696d20]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x56106d6d3ba0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x56106d6958f0]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x56106d6d3cb0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x56106d6974c0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x56106d6d3dc0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x56106d6954f0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56106d6d3ed0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x56106d695360]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56106d6d3f80]:   %4 = add i64 %1, 1 {
	[0x56106d64b000]:  %5 = add i64 %1, 1
	}

[0x56106d6d4050]:   store i64 %4, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	}

[0x56106d6d40b8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	}

[0x56106d6d4130]:   %6 = add i64 %5, -8 {
	[0x56106d649f60]:  %8 = add i64 %7, -8
	}

[0x56106d6d4198]:   %7 = inttoptr i64 %6 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x56106d6d4210]:   store i64 %3, i64* %7, align 8 {
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	}

[0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8 {
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	}

[0x56106d6d42f0]:   %17 = and i8 %16, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6d4380]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x56106d6d4400]:   %9 = add i64 %5, -40 {
	[0x56106d6fbc00]:  %11 = add i64 %7, -40
	}

[0x56106d6d92a0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	}

[0x56106d6d9320]:   %10 = icmp ult i64 %6, 32 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	}

[0x56106d6d9388]:   %11 = zext i1 %10 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	}

[0x56106d6d9430]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x56106d6fe560]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x56106d6d94c0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	}

[0x56106d6d9528]:   %13 = trunc i64 %9 to i32 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	}

[0x56106d6d95a0]:   %14 = and i32 %13, 255 {
	[0x56106d6fdad0]:  %16 = and i32 %15, 255
	}

[0x56106d6d9660]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x56106d71ee00]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56106d6d96d8]:   %16 = trunc i32 %15 to i8 {
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	}

[0x56106d6d9750]:   %33 = add nuw nsw i64 %32, %31 {
	[0x56106d721d00]:  %35 = add nuw nsw i64 %34, %33
	}

[0x56106d6d97d0]:   %34 = icmp eq i64 %33, 2 {
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	}

[0x56106d6d9860]:   %18 = xor i8 %17, 1 {
	[0x56106d6fdfe0]:  %20 = xor i8 %19, 1
	[0x56106d721340]:  %71 = xor i8 %70, 1
	}

[0x56106d6d9910]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x56106d6fcd40]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x56106d6d99a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	}

[0x56106d6d9a20]:   %20 = xor i64 %6, %9 {
	[0x56106d6fe200]:  %22 = xor i64 %8, %11
	}

[0x56106d6d9aa0]:   %21 = lshr i64 %20, 4 {
	[0x56106d71d570]:  %23 = lshr i64 %22, 4
	}

[0x56106d6d9b08]:   %22 = trunc i64 %21 to i8 {
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	}

[0x56106d6d9b80]:   %23 = and i8 %22, 1 {
	[0x56106d6fe460]:  %25 = and i8 %24, 1
	}

[0x56106d6d9c30]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x56106d706cf0]:  %26 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x56106d6d9cc0]:   store i8 %23, i8* %24, align 1, !tbaa !1276 {
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	}

[0x56106d6d9d40]:   %25 = icmp eq i64 %9, 0 {
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	}

[0x56106d6d9da8]:   %26 = zext i1 %25 to i8 {
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	}

[0x56106d6d9e50]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56106d706f50]:  %29 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x56106d6d9ee0]:   store i8 %26, i8* %27, align 1, !tbaa !1277 {
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	}

[0x56106d6d9f60]:   %28 = lshr i64 %9, 63 {
	[0x56106d6feb90]:  %30 = lshr i64 %11, 63
	}

[0x56106d6d9fc8]:   %29 = trunc i64 %28 to i8 {
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	}

[0x56106d6da070]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56106d707080]:  %32 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x56106d6da100]:   store i8 %29, i8* %30, align 1, !tbaa !1278 {
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	}

[0x56106d6da180]:   %31 = lshr i64 %6, 63 {
	[0x56106d6ff500]:  %33 = lshr i64 %8, 63
	}

[0x56106d6da200]:   %32 = xor i64 %28, %31 {
	[0x56106d721e10]:  %34 = xor i64 %30, %33
	}

[0x56106d6da280]:   store i8 %64, i8* %12, align 1, !tbaa !1261 {
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	}

[0x56106d6da2e8]:   %65 = trunc i64 %62 to i32 {
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	}

[0x56106d6da360]:   %66 = and i32 %65, 255 {
	[0x56106d727260]:  %67 = and i32 %66, 255
	}

[0x56106d6da400]:   %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9 {
	[0x56106d7275d0]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x56106d6da478]:   %35 = zext i1 %34 to i8 {
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	}

[0x56106d6da520]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56106d7072e0]:  %38 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x56106d6da5b0]:   store i8 %35, i8* %36, align 1, !tbaa !1279 {
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	}

[0x56106d6da630]:   store i64 4, i64* %RSI, align 8, !tbaa !1257 {
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x56106d6d3660]: block_400520 {
	[0x56106d71bbc0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x56106d721340]:   %71 = xor i8 %70, 1
From the pot matches of: [0x56106d6d9860]:   %18 = xor i8 %17, 1


Uprime : [0x56106d6d99a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1


Adj: [0x56106d71df70]:   store i8 %71, i8* %21, align 1


Removing: [0x56106d65b190]:   %53 = add i64 %49, 12
From the pot matches of: [0x56106d6c60e0]:   %45 = add i64 %41, 12


Uprime : [0x56106d6c6160]:   store i64 %45, i64* %PC, align 8


Uprime Matches: [0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Adj: [0x56106d660640]:   store i64 %53, i64* %3, align 8


Removing: [0x56106d7c0260]:   %47 = add i64 %43, 12
From the pot matches of: [0x56106d6c6580]:   %51 = add i64 %47, 12


Uprime : [0x56106d6c6600]:   store i64 %51, i64* %PC, align 8


Uprime Matches: [0x56106d660640]:   store i64 %53, i64* %3, align 8


Adj: [0x56106d7c6c30]:   store i64 %47, i64* %3, align 8


Removing: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x56106d6c74a0]:   %70 = xor i8 %69, 1


Uprime : [0x56106d6c7520]:   store i8 %70, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x56106d71df70]:   store i8 %71, i8* %21, align 1


Adj: [0x56106d6fe0f0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x56106d727490]:   %70 = and i8 %69, 1
From the pot matches of: [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime : [0x56106d6d9860]:   %18 = xor i8 %17, 1


Uprime Matches: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1


Adj: [0x56106d721340]:   %71 = xor i8 %70, 1


Removing: [0x56106d701fc8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c60e0]:   %45 = add i64 %41, 12


Uprime Matches: [0x56106d7c0260]:   %47 = add i64 %43, 12


Adj: [0x56106d65b190]:   %53 = add i64 %49, 12


Removing: [0x56106d701058]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x56106d6c6580]:   %51 = add i64 %47, 12


Uprime Matches: [0x56106d65b190]:   %53 = add i64 %49, 12


Adj: [0x56106d7c0260]:   %47 = add i64 %43, 12


Removing: [0x56106d6fded0]:   %19 = and i8 %18, 1
From the pot matches of: [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime : [0x56106d6c74a0]:   %70 = xor i8 %69, 1


Uprime Matches: [0x56106d721340]:   %71 = xor i8 %70, 1


Adj: [0x56106d6fdfe0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x56106d7065e8]:   %69 = trunc i32 %68 to i8
From the pot matches of: [0x56106d6d96d8]:   %16 = trunc i32 %15 to i8


Uprime : [0x56106d6d42f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x56106d6fded0]:   %19 = and i8 %18, 1


Adj: [0x56106d727490]:   %70 = and i8 %69, 1


Removing: [0x56106d6ff6b8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x56106d6c73a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x56106d6c7420]:   %69 = and i8 %68, 1


Uprime Matches: [0x56106d727490]:   %70 = and i8 %69, 1


Adj: [0x56106d6fded0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x56106d6bfa70]:   %37 = add i64 %5, -40 {
	[0x56106d7b6300]:  %39 = add i64 %7, -40
	}

[0x56106d6c4f58]:   ret %struct.Memory* %59 {
	[0x56106d708458]:  ret %struct.Memory.31* %call2_400555
	}

[0x56106d6c5b80]:   store i64 %37, i64* %RDI, align 8, !tbaa !1257 {
	[0x56106d7bcd30]:  store i64 %39, i64* %RDI.i, align 8
	}

[0x56106d6c5c00]:   %38 = add i64 %5, -12 {
	[0x56106d7be500]:  %40 = add i64 %7, -12
	}

[0x56106d6c5c80]:   %39 = add i64 %8, 28 {
	[0x56106d7be5b0]:  %41 = add i64 %10, 28
	}

[0x56106d6c5d00]:   store i64 %39, i64* %PC, align 8 {
	[0x56106d7bf960]:  store i64 %41, i64* %3, align 8
	}

[0x56106d6c5d68]:   %40 = inttoptr i64 %38 to i32* {
	[0x56106d700f28]:  %42 = inttoptr i64 %40 to i32*
	}

[0x56106d6c5de0]:   store i32 0, i32* %40, align 4 {
	[0x56106d7c0e10]:  store i32 0, i32* %42, align 4
	}

[0x56106d6c5e48]:   %41 = load i64, i64* %PC, align 8 {
	[0x56106d701058]:  %43 = load i64, i64* %3, align 8
	}

[0x56106d6c5f88]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 16) to i64*), align 16 {
	[0x56106d701188]:  %44 = load i64, i64* inttoptr (i64 4195824 to i64*), align 16
	}

[0x56106d6c5fe8]:   %43 = load i64, i64* %RBP, align 8 {
	[0x56106d7012b8]:  %45 = load i64, i64* %RBP.i, align 8
	}

[0x56106d6c6060]:   %44 = add i64 %43, -32 {
	[0x56106d7c3420]:  %46 = add i64 %45, -32
	}

[0x56106d6c60e0]:   %45 = add i64 %41, 12 {
	[0x56106d7c0260]:  %47 = add i64 %43, 12
	}

[0x56106d6c6160]:   store i64 %45, i64* %PC, align 8 {
	[0x56106d7c6c30]:  store i64 %47, i64* %3, align 8
	}

[0x56106d6c61c8]:   %46 = inttoptr i64 %44 to i64* {
	[0x56106d701e98]:  %48 = inttoptr i64 %46 to i64*
	}

[0x56106d6c6240]:   store i64 %42, i64* %46, align 8 {
	[0x56106d6ae630]:  store i64 %44, i64* %48, align 8
	}

[0x56106d6c62a8]:   %47 = load i64, i64* %PC, align 8 {
	[0x56106d701fc8]:  %49 = load i64, i64* %3, align 8
	}

[0x56106d6c63a8]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005e0__rodata_type* @seg_4005e0__rodata to i64), i64 24) to i64*), align 8 {
	[0x56106d7039f8]:  %50 = load i64, i64* inttoptr (i64 4195832 to i64*), align 8
	}

[0x56106d6c6420]:   store i64 %48, i64* %RAX, align 8, !tbaa !1257 {
	[0x56106d6ae1d0]:  store i64 %50, i64* %RAX.i14, align 8
	}

[0x56106d6c6488]:   %49 = load i64, i64* %RBP, align 8 {
	[0x56106d703b28]:  %51 = load i64, i64* %RBP.i, align 8
	}

[0x56106d6c6500]:   %50 = add i64 %49, -24 {
	[0x56106d6595f0]:  %52 = add i64 %51, -24
	}

[0x56106d6c6580]:   %51 = add i64 %47, 12 {
	[0x56106d65b190]:  %53 = add i64 %49, 12
	}

[0x56106d6c6600]:   store i64 %51, i64* %PC, align 8 {
	[0x56106d660640]:  store i64 %53, i64* %3, align 8
	}

[0x56106d6c6668]:   %52 = inttoptr i64 %50 to i64* {
	[0x56106d704248]:  %54 = inttoptr i64 %52 to i64*
	}

[0x56106d6c66e0]:   store i64 %48, i64* %52, align 8 {
	[0x56106d71fae0]:  store i64 %50, i64* %54, align 8
	}

[0x56106d6c6748]:   %53 = load i64, i64* %PC, align 8 {
	[0x56106d704378]:  %55 = load i64, i64* %3, align 8
	}

[0x56106d6c6800]:   %54 = add i64 %53, -229 {
	[0x56106d71f870]:  %56 = add i64 %55, -229
	}

[0x56106d6c6880]:   %55 = add i64 %53, 5 {
	[0x56106d720130]:  %57 = add i64 %55, 5
	}

[0x56106d6c68e8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d721c48]:  %58 = load i64, i64* %6, align 8
	}

[0x56106d6c6960]:   %57 = add i64 %56, -8 {
	[0x56106d720310]:  %59 = add i64 %58, -8
	}

[0x56106d6c69c8]:   %58 = inttoptr i64 %57 to i64* {
	[0x56106d705418]:  %60 = inttoptr i64 %59 to i64*
	}

[0x56106d6c6a40]:   store i64 %55, i64* %58, align 8 {
	[0x56106d722e20]:  store i64 %57, i64* %60, align 8
	}

[0x56106d6c6ac0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d723750]:  store i64 %59, i64* %6, align 8
	}

[0x56106d6c6b40]:   store i64 %54, i64* %PC, align 8, !tbaa !1257 {
	[0x56106d722840]:  store i64 %56, i64* %3, align 8
	}

[0x56106d6c6c40]:   %59 = tail call %struct.Memory* @sub_400470_binary_search(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x56106d707540]:  %call2_400555 = tail call %struct.Memory.31* @sub_400470.binary_search(%struct.State.0* %0, i64 %56, %struct.Memory.31* %2)
	}

[0x56106d6c6cb8]:   %60 = load i64, i64* %RSP, align 8 {
	[0x56106d705548]:  %61 = load i64, i64* %6, align 8
	}

[0x56106d6c6d18]:   %61 = load i64, i64* %PC, align 8 {
	[0x56106d706128]:  %62 = load i64, i64* %3, align 8
	}

[0x56106d6c6d90]:   %62 = add i64 %60, 32 {
	[0x56106d723cd0]:  %63 = add i64 %61, 32
	}

[0x56106d6c6e10]:   store i64 %62, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d723fe0]:  store i64 %63, i64* %6, align 8
	}

[0x56106d6c6ed0]:   %63 = icmp ugt i64 %60, -33 {
	[0x56106d726980]:  %64 = icmp ugt i64 %61, -33
	}

[0x56106d6c6f38]:   %64 = zext i1 %63 to i8 {
	[0x56106d706388]:  %65 = zext i1 %64 to i8
	}

[0x56106d6c73a8]:   %68 = trunc i32 %67 to i8 {
	[0x56106d7065e8]:  %69 = trunc i32 %68 to i8
	}

[0x56106d6c7420]:   %69 = and i8 %68, 1 {
	[0x56106d727490]:  %70 = and i8 %69, 1
	}

[0x56106d6c74a0]:   %70 = xor i8 %69, 1 {
	[0x56106d721340]:  %71 = xor i8 %70, 1
	}

[0x56106d6c7520]:   store i8 %70, i8* %19, align 1, !tbaa !1275 {
	[0x56106d71df70]:  store i8 %71, i8* %21, align 1
	}

[0x56106d6c75a0]:   %71 = xor i64 %62, %60 {
	[0x56106d71e640]:  %72 = xor i64 %63, %61
	}

[0x56106d6c7620]:   %72 = lshr i64 %71, 4 {
	[0x56106d71e910]:  %73 = lshr i64 %72, 4
	}

[0x56106d6c7688]:   %73 = trunc i64 %72 to i8 {
	[0x56106d706718]:  %74 = trunc i64 %73 to i8
	}

[0x56106d6c7700]:   %74 = and i8 %73, 1 {
	[0x56106d71e9e0]:  %75 = and i8 %74, 1
	}

[0x56106d6c7780]:   store i8 %74, i8* %24, align 1, !tbaa !1276 {
	[0x56106d729840]:  store i8 %75, i8* %26, align 1
	}

[0x56106d6c7800]:   %75 = icmp eq i64 %62, 0 {
	[0x56106d72a050]:  %76 = icmp eq i64 %63, 0
	}

[0x56106d6c7868]:   %76 = zext i1 %75 to i8 {
	[0x56106d706978]:  %77 = zext i1 %76 to i8
	}

[0x56106d6c78e0]:   store i8 %76, i8* %27, align 1, !tbaa !1277 {
	[0x56106d72a420]:  store i8 %77, i8* %29, align 1
	}

[0x56106d6c7960]:   %77 = lshr i64 %62, 63 {
	[0x56106d72a550]:  %78 = lshr i64 %63, 63
	}

[0x56106d6c79c8]:   %78 = trunc i64 %77 to i8 {
	[0x56106d706aa8]:  %79 = trunc i64 %78 to i8
	}

[0x56106d6c7a40]:   store i8 %78, i8* %30, align 1, !tbaa !1278 {
	[0x56106d727820]:  store i8 %79, i8* %32, align 1
	}

[0x56106d6c7ac0]:   %79 = lshr i64 %60, 63 {
	[0x56106d727a10]:  %80 = lshr i64 %61, 63
	}

[0x56106d6c7b40]:   %80 = xor i64 %77, %79 {
	[0x56106d7232e0]:  %81 = xor i64 %78, %80
	}

[0x56106d6c7bc0]:   %81 = add nuw nsw i64 %80, %77 {
	[0x56106d72c410]:  %82 = add nuw nsw i64 %81, %78
	}

[0x56106d6c7c40]:   %82 = icmp eq i64 %81, 2 {
	[0x56106d72c590]:  %83 = icmp eq i64 %82, 2
	}

[0x56106d6c7ca8]:   %83 = zext i1 %82 to i8 {
	[0x56106d706bd8]:  %84 = zext i1 %83 to i8
	}

[0x56106d6c7d20]:   store i8 %83, i8* %36, align 1, !tbaa !1279 {
	[0x56106d72c920]:  store i8 %84, i8* %38, align 1
	}

[0x56106d6c7da0]:   %84 = add i64 %61, 5 {
	[0x56106d72ccb0]:  %85 = add i64 %62, 5
	}

[0x56106d6c7e20]:   store i64 %84, i64* %PC, align 8 {
	[0x56106d72ce30]:  store i64 %85, i64* %3, align 8
	}

[0x56106d6c7ea0]:   %85 = add i64 %60, 40 {
	[0x56106d70aea0]:  %86 = add i64 %61, 40
	}

[0x56106d6c7f08]:   %86 = inttoptr i64 %62 to i64* {
	[0x56106d706e38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x56106d6c7f68]:   %87 = load i64, i64* %86, align 8 {
	[0x56106d7026a8]:  %88 = load i64, i64* %87, align 8
	}

[0x56106d6c7fe0]:   store i64 %87, i64* %RBP, align 8, !tbaa !1257 {
	[0x56106d724de0]:  store i64 %88, i64* %RBP.i, align 8
	}

[0x56106d6c8060]:   store i64 %85, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d724f00]:  store i64 %86, i64* %6, align 8
	}

[0x56106d6c80e0]:   %88 = add i64 %61, 6 {
	[0x56106d7301a0]:  %89 = add i64 %62, 6
	}

[0x56106d6c8160]:   store i64 %88, i64* %PC, align 8 {
	[0x56106d730320]:  store i64 %89, i64* %3, align 8
	}

[0x56106d6c81c8]:   %89 = inttoptr i64 %85 to i64* {
	[0x56106d702a38]:  %90 = inttoptr i64 %86 to i64*
	}

[0x56106d6c8228]:   %90 = load i64, i64* %89, align 8 {
	[0x56106d708328]:  %91 = load i64, i64* %90, align 8
	}

[0x56106d6c82a0]:   store i64 %90, i64* %PC, align 8, !tbaa !1257 {
	[0x56106d730620]:  store i64 %91, i64* %3, align 8
	}

[0x56106d6c8320]:   %91 = add i64 %60, 48 {
	[0x56106d730e30]:  %92 = add i64 %61, 48
	}

[0x56106d6c83a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d72b580]:  store i64 %92, i64* %6, align 8
	}

[0x56106d6ca3d0]: %struct.Memory* %2 {
	[0x56106d730b90]:%struct.Memory.31* %2
	}

[0x56106d6cb2e0]:   store i64 30, i64* %RDX, align 8, !tbaa !1257 {
	[0x56106d7b7810]:  store i64 30, i64* %RDX.i, align 8
	}

[0x56106d6cb760]: %struct.State* %0 {
	[0x56106d70a470]:%struct.State.0* %0
	}

[0x56106d6cb900]: i64 %1 {
	[0x56106d70b180]:i64 %1
	}

[0x56106d6d37d8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x56106d6b3e48]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x56106d6d38b0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56106d693d20]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56106d6d39a0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x56106d697840]:  %RAX.i14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x56106d6d3a90]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x56106d696d20]:  %RDX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x56106d6d3ba0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x56106d6958f0]:  %RSI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x56106d6d3cb0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x56106d6974c0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x56106d6d3dc0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x56106d6954f0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56106d6d3ed0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x56106d695360]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56106d6d3f80]:   %4 = add i64 %1, 1 {
	[0x56106d64b000]:  %5 = add i64 %1, 1
	}

[0x56106d6d4050]:   store i64 %4, i64* %PC, align 8 {
	[0x56106d64a720]:  store i64 %5, i64* %3, align 8
	}

[0x56106d6d40b8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d6f03b8]:  %7 = load i64, i64* %6, align 8
	}

[0x56106d6d4130]:   %6 = add i64 %5, -8 {
	[0x56106d649f60]:  %8 = add i64 %7, -8
	}

[0x56106d6d4198]:   %7 = inttoptr i64 %6 to i64* {
	[0x56106d6f93a8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x56106d6d4210]:   store i64 %3, i64* %7, align 8 {
	[0x56106d6fbd10]:  store i64 %4, i64* %9, align 8
	}

[0x56106d6d4278]:   %8 = load i64, i64* %PC, align 8 {
	[0x56106d6fb278]:  %10 = load i64, i64* %3, align 8
	}

[0x56106d6d42f0]:   %17 = and i8 %16, 1 {
	[0x56106d6fded0]:  %19 = and i8 %18, 1
	}

[0x56106d6d4380]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x56106d6fbe20]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x56106d6d4400]:   %9 = add i64 %5, -40 {
	[0x56106d6fbc00]:  %11 = add i64 %7, -40
	}

[0x56106d6d92a0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x56106d6fcf70]:  store i64 %11, i64* %6, align 8
	}

[0x56106d6d9320]:   %10 = icmp ult i64 %6, 32 {
	[0x56106d6fd080]:  %12 = icmp ult i64 %8, 32
	}

[0x56106d6d9388]:   %11 = zext i1 %10 to i8 {
	[0x56106d6fa9d8]:  %13 = zext i1 %12 to i8
	}

[0x56106d6d9430]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x56106d6fe560]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x56106d6d94c0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x56106d6fce60]:  store i8 %13, i8* %14, align 1
	}

[0x56106d6d9528]:   %13 = trunc i64 %9 to i32 {
	[0x56106d6ff458]:  %15 = trunc i64 %11 to i32
	}

[0x56106d6d95a0]:   %14 = and i32 %13, 255 {
	[0x56106d6fdad0]:  %16 = and i32 %15, 255
	}

[0x56106d6d9660]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x56106d71ee00]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56106d6d96d8]:   %16 = trunc i32 %15 to i8 {
	[0x56106d6ff6b8]:  %18 = trunc i32 %17 to i8
	}

[0x56106d6d9750]:   %33 = add nuw nsw i64 %32, %31 {
	[0x56106d721d00]:  %35 = add nuw nsw i64 %34, %33
	}

[0x56106d6d97d0]:   %34 = icmp eq i64 %33, 2 {
	[0x56106d702940]:  %36 = icmp eq i64 %35, 2
	}

[0x56106d6d9860]:   %18 = xor i8 %17, 1 {
	[0x56106d6fdfe0]:  %20 = xor i8 %19, 1
	}

[0x56106d6d9910]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x56106d6fcd40]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x56106d6d99a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x56106d6fe0f0]:  store i8 %20, i8* %21, align 1
	}

[0x56106d6d9a20]:   %20 = xor i64 %6, %9 {
	[0x56106d6fe200]:  %22 = xor i64 %8, %11
	}

[0x56106d6d9aa0]:   %21 = lshr i64 %20, 4 {
	[0x56106d71d570]:  %23 = lshr i64 %22, 4
	}

[0x56106d6d9b08]:   %22 = trunc i64 %21 to i8 {
	[0x56106d6ffa48]:  %24 = trunc i64 %23 to i8
	}

[0x56106d6d9b80]:   %23 = and i8 %22, 1 {
	[0x56106d6fe460]:  %25 = and i8 %24, 1
	}

[0x56106d6d9c30]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x56106d706cf0]:  %26 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x56106d6d9cc0]:   store i8 %23, i8* %24, align 1, !tbaa !1276 {
	[0x56106d6fe640]:  store i8 %25, i8* %26, align 1
	}

[0x56106d6d9d40]:   %25 = icmp eq i64 %9, 0 {
	[0x56106d71ddf0]:  %27 = icmp eq i64 %11, 0
	}

[0x56106d6d9da8]:   %26 = zext i1 %25 to i8 {
	[0x56106d6ffb78]:  %28 = zext i1 %27 to i8
	}

[0x56106d6d9e50]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56106d706f50]:  %29 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x56106d6d9ee0]:   store i8 %26, i8* %27, align 1, !tbaa !1277 {
	[0x56106d6feac0]:  store i8 %28, i8* %29, align 1
	}

[0x56106d6d9f60]:   %28 = lshr i64 %9, 63 {
	[0x56106d6feb90]:  %30 = lshr i64 %11, 63
	}

[0x56106d6d9fc8]:   %29 = trunc i64 %28 to i8 {
	[0x56106d700348]:  %31 = trunc i64 %30 to i8
	}

[0x56106d6da070]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56106d707080]:  %32 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x56106d6da100]:   store i8 %29, i8* %30, align 1, !tbaa !1278 {
	[0x56106d6fece0]:  store i8 %31, i8* %32, align 1
	}

[0x56106d6da180]:   %31 = lshr i64 %6, 63 {
	[0x56106d6ff500]:  %33 = lshr i64 %8, 63
	}

[0x56106d6da200]:   %32 = xor i64 %28, %31 {
	[0x56106d721e10]:  %34 = xor i64 %30, %33
	}

[0x56106d6da280]:   store i8 %64, i8* %12, align 1, !tbaa !1261 {
	[0x56106d726e90]:  store i8 %65, i8* %14, align 1
	}

[0x56106d6da2e8]:   %65 = trunc i64 %62 to i32 {
	[0x56106d7064b8]:  %66 = trunc i64 %63 to i32
	}

[0x56106d6da360]:   %66 = and i32 %65, 255 {
	[0x56106d727260]:  %67 = and i32 %66, 255
	}

[0x56106d6da400]:   %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9 {
	[0x56106d7275d0]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x56106d6da478]:   %35 = zext i1 %34 to i8 {
	[0x56106d700808]:  %37 = zext i1 %36 to i8
	}

[0x56106d6da520]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56106d7072e0]:  %38 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x56106d6da5b0]:   store i8 %35, i8* %36, align 1, !tbaa !1279 {
	[0x56106d7ac420]:  store i8 %37, i8* %38, align 1
	}

[0x56106d6da630]:   store i64 4, i64* %RSI, align 8, !tbaa !1257 {
	[0x56106d7b4ff0]:  store i64 4, i64* %RSI.i, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x56106d6d3660]: block_400520 {
	[0x56106d71bbc0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
