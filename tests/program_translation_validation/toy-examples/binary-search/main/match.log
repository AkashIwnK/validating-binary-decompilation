Matching sub_400540_main Vs main


[Info] Retrieve Potential Matches...
[0x563331a9cde0]: %struct.State* %0 {
	[0x563331a5e460]:%struct.State.1* %0
	}

[0x563331a9ce20]: i64 %1 {
	[0x563331a5e1b0]:i64 %1
	}

[0x563331a9ce60]: %struct.Memory* %2 {
	[0x563331a5dda0]:%struct.Memory.32* %2
	}

[0x563331a9d018]:   %3 = load i64, i64* %RBP, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331a9d0f0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x563331a2b050]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x563331a9d1c0]:   %63 = icmp ugt i64 %60, -33 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331abc298]:   %64 = zext i1 %63 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331abc310]:   store i8 %64, i8* %12, align 1, !tbaa !1265 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abc378]:   %65 = trunc i64 %62 to i32 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331abc3f0]:   %66 = and i32 %65, 255 {
	[0x563331a604e0]:  %67 = and i32 %66, 255
	[0x563331acef50]:  %16 = and i32 %15, 255
	}

[0x563331abc4a8]:   %68 = trunc i32 %67 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331abc520]:   %69 = and i8 %68, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	[0x563331a60f50]:  %70 = and i8 %69, 1
	[0x563331a635a0]:  %75 = and i8 %74, 1
	[0x563331acf060]:  %25 = and i8 %24, 1
	}

[0x563331abc5a0]:   %70 = xor i8 %69, 1 {
	[0x563331a5c1f0]:  %20 = xor i8 %19, 1
	[0x563331a60b80]:  %71 = xor i8 %70, 1
	}

[0x563331abc620]:   store i8 %70, i8* %19, align 1, !tbaa !1279 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abc6a0]:   %71 = xor i64 %62, %60 {
	[0x563331a5bca0]:  %22 = xor i64 %8, %11
	[0x563331a5caa0]:  %81 = xor i64 %78, %80
	[0x563331a651b0]:  %72 = xor i64 %63, %61
	[0x563331acdd10]:  %34 = xor i64 %30, %33
	}

[0x563331abc720]:   %72 = lshr i64 %71, 4 {
	[0x563331a65050]:  %73 = lshr i64 %72, 4
	[0x563331aceb10]:  %23 = lshr i64 %22, 4
	}

[0x563331abc788]:   %73 = trunc i64 %72 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331abc800]:   %74 = and i8 %73, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	[0x563331a60f50]:  %70 = and i8 %69, 1
	[0x563331a635a0]:  %75 = and i8 %74, 1
	[0x563331acf060]:  %25 = and i8 %24, 1
	}

[0x563331abc880]:   store i8 %74, i8* %24, align 1, !tbaa !1280 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abc900]:   %75 = icmp eq i64 %62, 0 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331abc968]:   %76 = zext i1 %75 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331abc9e0]:   store i8 %76, i8* %27, align 1, !tbaa !1281 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abca60]:   %77 = lshr i64 %62, 63 {
	[0x563331a5c5d0]:  %33 = lshr i64 %8, 63
	[0x563331a5cc80]:  %80 = lshr i64 %61, 63
	[0x563331a65470]:  %78 = lshr i64 %63, 63
	[0x563331acf280]:  %30 = lshr i64 %11, 63
	}

[0x563331abcac8]:   %78 = trunc i64 %77 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331abcb40]:   store i8 %78, i8* %30, align 1, !tbaa !1282 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abcbc0]:   %79 = lshr i64 %60, 63 {
	[0x563331a5c5d0]:  %33 = lshr i64 %8, 63
	[0x563331a5cc80]:  %80 = lshr i64 %61, 63
	[0x563331a65470]:  %78 = lshr i64 %63, 63
	[0x563331acf280]:  %30 = lshr i64 %11, 63
	}

[0x563331abcc40]:   %80 = xor i64 %77, %79 {
	[0x563331a5bca0]:  %22 = xor i64 %8, %11
	[0x563331a5caa0]:  %81 = xor i64 %78, %80
	[0x563331a651b0]:  %72 = xor i64 %63, %61
	[0x563331acdd10]:  %34 = xor i64 %30, %33
	}

[0x563331abccc0]:   %81 = add nuw nsw i64 %80, %77 {
	[0x563331a5c9c0]:  %82 = add nuw nsw i64 %81, %78
	[0x563331a5d660]:  %35 = add nuw nsw i64 %34, %33
	}

[0x563331abcd40]:   %82 = icmp eq i64 %81, 2 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331abcda8]:   %83 = zext i1 %82 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331abce20]:   store i8 %83, i8* %36, align 1, !tbaa !1283 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abcea0]:   %84 = add i64 %61, 5 {
	[0x563331a5f420]:  %57 = add i64 %55, 5
	[0x563331a65650]:  %85 = add i64 %62, 5
	}

[0x563331abcf20]:   store i64 %84, i64* %PC, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abcfa0]:   %85 = add i64 %60, 40 {
	[0x563331a68370]:  %86 = add i64 %61, 40
	}

[0x563331abd008]:   %86 = inttoptr i64 %62 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331abd068]:   %87 = load i64, i64* %86, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331abd0e0]:   store i64 %87, i64* %RBP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abd160]:   store i64 %85, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abd1e0]:   %88 = add i64 %61, 6 {
	[0x563331a67b00]:  %89 = add i64 %62, 6
	}

[0x563331abd260]:   store i64 %88, i64* %PC, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abd2c8]:   %89 = inttoptr i64 %85 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331abd328]:   %90 = load i64, i64* %89, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331abd3a0]:   store i64 %90, i64* %PC, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abd420]:   %91 = add i64 %60, 48 {
	[0x563331a5d050]:  %92 = add i64 %61, 48
	}

[0x563331abd4a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331abd508]:   ret %struct.Memory* %59 {
	[0x563331ad5688]:  ret %struct.Memory.32* %call2_400575
	}

[0x563331af7c00]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x563331aaf2c0]:  %RAX.i14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x563331af7cf0]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x563331aaf810]:  %RDX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x563331af7e00]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x563331aaf9e0]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x563331af7f10]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x563331aaf490]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x563331af8020]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x563331aafb70]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x563331af8130]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x563331ab0b60]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x563331af81e0]:   %4 = add i64 %1, 1 {
	[0x563331a5a680]:  %5 = add i64 %1, 1
	}

[0x563331af82b0]:   store i64 %4, i64* %PC, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af8318]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331af8390]:   %6 = add i64 %5, -8 {
	[0x563331a5a2f0]:  %8 = add i64 %7, -8
	[0x563331a5f2d0]:  %59 = add i64 %58, -8
	}

[0x563331af83f8]:   %7 = inttoptr i64 %6 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331af8470]:   store i64 %3, i64* %7, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af84d8]:   %8 = load i64, i64* %PC, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331af8550]:   %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9 {
	[0x563331a5ede0]:  %call2_400575 = tail call %struct.Memory.32* @sub_400490.binary_search(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	[0x563331a977b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x563331adac50]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x563331af85e0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af8660]:   %9 = add i64 %5, -40 {
	[0x563331a5dcf0]:  %39 = add i64 %7, -40
	[0x563331acbde0]:  %11 = add i64 %7, -40
	}

[0x563331af86e0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af8760]:   %10 = icmp ult i64 %6, 32 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331af87c8]:   %11 = zext i1 %10 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331af8870]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x563331ba4610]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x563331af8900]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af8968]:   %13 = trunc i64 %9 to i32 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331af89e0]:   %14 = and i32 %13, 255 {
	[0x563331a604e0]:  %67 = and i32 %66, 255
	[0x563331acef50]:  %16 = and i32 %15, 255
	}

[0x563331af8aa0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x563331a5ede0]:  %call2_400575 = tail call %struct.Memory.32* @sub_400490.binary_search(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	[0x563331a977b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x563331adac50]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x563331af8b18]:   %16 = trunc i32 %15 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331af8b90]:   %17 = and i8 %16, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	[0x563331a60f50]:  %70 = and i8 %69, 1
	[0x563331a635a0]:  %75 = and i8 %74, 1
	[0x563331acf060]:  %25 = and i8 %24, 1
	}

[0x563331af8c10]:   %18 = xor i8 %17, 1 {
	[0x563331a5c1f0]:  %20 = xor i8 %19, 1
	[0x563331a60b80]:  %71 = xor i8 %70, 1
	}

[0x563331af8cc0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x563331ac57c0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x563331af8d50]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af8dd0]:   %20 = xor i64 %6, %9 {
	[0x563331a5bca0]:  %22 = xor i64 %8, %11
	[0x563331a5caa0]:  %81 = xor i64 %78, %80
	[0x563331a651b0]:  %72 = xor i64 %63, %61
	[0x563331acdd10]:  %34 = xor i64 %30, %33
	}

[0x563331af8e50]:   %21 = lshr i64 %20, 4 {
	[0x563331a65050]:  %73 = lshr i64 %72, 4
	[0x563331aceb10]:  %23 = lshr i64 %22, 4
	}

[0x563331af8eb8]:   %22 = trunc i64 %21 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331af8f30]:   %23 = and i8 %22, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	[0x563331a60f50]:  %70 = and i8 %69, 1
	[0x563331a635a0]:  %75 = and i8 %74, 1
	[0x563331acf060]:  %25 = and i8 %24, 1
	}

[0x563331af8fe0]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x563331ad7da0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x563331af9070]:   store i8 %23, i8* %24, align 1, !tbaa !1280 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af90f0]:   %25 = icmp eq i64 %9, 0 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331af9158]:   %26 = zext i1 %25 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331af9200]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x563331a675b0]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x563331af9290]:   store i8 %26, i8* %27, align 1, !tbaa !1281 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9310]:   %28 = lshr i64 %9, 63 {
	[0x563331a5c5d0]:  %33 = lshr i64 %8, 63
	[0x563331a5cc80]:  %80 = lshr i64 %61, 63
	[0x563331a65470]:  %78 = lshr i64 %63, 63
	[0x563331acf280]:  %30 = lshr i64 %11, 63
	}

[0x563331af9378]:   %29 = trunc i64 %28 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331af9420]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x563331a62a60]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x563331af94b0]:   store i8 %29, i8* %30, align 1, !tbaa !1282 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9530]:   %31 = lshr i64 %6, 63 {
	[0x563331a5c5d0]:  %33 = lshr i64 %8, 63
	[0x563331a5cc80]:  %80 = lshr i64 %61, 63
	[0x563331a65470]:  %78 = lshr i64 %63, 63
	[0x563331acf280]:  %30 = lshr i64 %11, 63
	}

[0x563331af95b0]:   %32 = xor i64 %28, %31 {
	[0x563331a5bca0]:  %22 = xor i64 %8, %11
	[0x563331a5caa0]:  %81 = xor i64 %78, %80
	[0x563331a651b0]:  %72 = xor i64 %63, %61
	[0x563331acdd10]:  %34 = xor i64 %30, %33
	}

[0x563331af9630]:   %33 = add nuw nsw i64 %32, %31 {
	[0x563331a5c9c0]:  %82 = add nuw nsw i64 %81, %78
	[0x563331a5d660]:  %35 = add nuw nsw i64 %34, %33
	}

[0x563331af96b0]:   %34 = icmp eq i64 %33, 2 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331af9718]:   %35 = zext i1 %34 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331af97c0]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x563331a5f050]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x563331af9850]:   store i8 %35, i8* %36, align 1, !tbaa !1283 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af98d0]:   store i64 4, i64* %RSI, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9990]:   store i64 30, i64* %RDX, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9a10]:   %37 = add i64 %5, -40 {
	[0x563331a5dcf0]:  %39 = add i64 %7, -40
	[0x563331acbde0]:  %11 = add i64 %7, -40
	}

[0x563331af9a90]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9b50]:   %38 = add i64 %5, -12 {
	[0x563331a5d7c0]:  %40 = add i64 %7, -12
	}

[0x563331af9c10]:   %39 = add i64 %8, 28 {
	[0x563331acfb00]:  %41 = add i64 %10, 28
	}

[0x563331af9c90]:   store i64 %39, i64* %PC, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9cf8]:   %40 = inttoptr i64 %38 to i32* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331af9d70]:   store i32 0, i32* %40, align 4 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331af9f78]:   %43 = load i64, i64* %RBP, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331af9ff0]:   %44 = add i64 %43, -32 {
	[0x563331acfe30]:  %46 = add i64 %45, -32
	}

[0x563331afa070]:   %45 = add i64 %41, 12 {
	[0x563331a5e3b0]:  %47 = add i64 %43, 12
	[0x563331a5fa60]:  %53 = add i64 %49, 12
	}

[0x563331afa0f0]:   store i64 %45, i64* %PC, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa158]:   %46 = inttoptr i64 %44 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331afa1d0]:   store i64 %42, i64* %46, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa238]:   %47 = load i64, i64* %PC, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa418]:   %49 = load i64, i64* %RBP, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afa490]:   %50 = add i64 %49, -24 {
	[0x563331a5e970]:  %52 = add i64 %51, -24
	}

[0x563331afa510]:   %51 = add i64 %47, 12 {
	[0x563331a5e3b0]:  %47 = add i64 %43, 12
	[0x563331a5fa60]:  %53 = add i64 %49, 12
	}

[0x563331afa590]:   store i64 %51, i64* %PC, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa5f8]:   %52 = inttoptr i64 %50 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331afa670]:   store i64 %48, i64* %52, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afa790]:   %54 = add i64 %53, -229 {
	[0x563331a5f580]:  %56 = add i64 %55, -229
	}

[0x563331afa810]:   %55 = add i64 %53, 5 {
	[0x563331a5f420]:  %57 = add i64 %55, 5
	[0x563331a65650]:  %85 = add i64 %62, 5
	}

[0x563331afa878]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afa8f0]:   %57 = add i64 %56, -8 {
	[0x563331a5a2f0]:  %8 = add i64 %7, -8
	[0x563331a5f2d0]:  %59 = add i64 %58, -8
	}

[0x563331afa958]:   %58 = inttoptr i64 %57 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331afa9d0]:   store i64 %55, i64* %58, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afaa50]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afaad0]:   store i64 %54, i64* %PC, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afabd0]:   %59 = tail call %struct.Memory* @sub_400490_binary_search(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x563331a5ede0]:  %call2_400575 = tail call %struct.Memory.32* @sub_400490.binary_search(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	[0x563331a977b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x563331adac50]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x563331afac98]:   %60 = load i64, i64* %RSP, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afacf8]:   %61 = load i64, i64* %PC, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331afad70]:   %62 = add i64 %60, 32 {
	[0x563331a60a30]:  %63 = add i64 %61, 32
	}

[0x563331afadf0]:   store i64 %62, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x563331ad0428]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331a9d018]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x563331af8470]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331acfe30]:   %46 = add i64 %45, -32


Removing: [0x563331ad28b8]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331a9d018]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x563331af8470]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5e970]:   %52 = add i64 %51, -24


Removing: [0x563331ad1818]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x563331af8318]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563331af9b50]:   %38 = add i64 %5, -12


Uprime Matches: [0x563331a5d7c0]:   %40 = add i64 %7, -12


Adj: [0x563331a5cc80]:   %80 = lshr i64 %61, 63
[0x563331a5d050]:   %92 = add i64 %61, 48
[0x563331a60700]:   %64 = icmp ugt i64 %61, -33
[0x563331a60a30]:   %63 = add i64 %61, 32
[0x563331a651b0]:   %72 = xor i64 %63, %61
[0x563331a68370]:   %86 = add i64 %61, 40


Removing: [0x563331ad2528]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x563331af8318]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563331af9b50]:   %38 = add i64 %5, -12


Uprime Matches: [0x563331a5d7c0]:   %40 = add i64 %7, -12


Adj: [0x563331a5f2d0]:   %59 = add i64 %58, -8


Removing: [0x563331acff68]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af84d8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x563331af9c10]:   %39 = add i64 %8, 28


Uprime Matches: [0x563331acfb00]:   %41 = add i64 %10, 28


Adj: [0x563331a5fa60]:   %53 = add i64 %49, 12


Removing: [0x563331ad10f8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af84d8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x563331af9c10]:   %39 = add i64 %8, 28


Uprime Matches: [0x563331acfb00]:   %41 = add i64 %10, 28


Adj: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Removing: [0x563331ad16e8]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af84d8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x563331af9c10]:   %39 = add i64 %8, 28


Uprime Matches: [0x563331acfb00]:   %41 = add i64 %10, 28


Adj: [0x563331a65650]:   %85 = add i64 %62, 5
[0x563331a67b00]:   %89 = add i64 %62, 6


Removing: [0x563331ad2658]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af84d8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x563331af9c10]:   %39 = add i64 %8, 28


Uprime Matches: [0x563331acfb00]:   %41 = add i64 %10, 28


Adj: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a5f580]:   %56 = add i64 %55, -229


Removing: [0x563331a5dcf0]:   %39 = add i64 %7, -40
From the pot matches of: [0x563331af8660]:   %9 = add i64 %5, -40


Uprime : [0x563331af9310]:   %28 = lshr i64 %9, 63


Uprime Matches: [0x563331a5c5d0]:   %33 = lshr i64 %8, 63
[0x563331a5cc80]:   %80 = lshr i64 %61, 63
[0x563331a65470]:   %78 = lshr i64 %63, 63
[0x563331acf280]:   %30 = lshr i64 %11, 63


Adj: [0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8


Removing: [0x563331ac9be8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331acdf10]:   store i8 %31, i8* %32, align 1


Removing: [0x563331accd38]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331acef50]:   %16 = and i32 %15, 255


Removing: [0x563331ad4128]:   %79 = trunc i64 %78 to i8
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331a5cdd0]:   store i8 %79, i8* %32, align 1


Removing: [0x563331ad4718]:   %66 = trunc i64 %63 to i32
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331a604e0]:   %67 = and i32 %66, 255


Removing: [0x563331a635a0]:   %75 = and i8 %74, 1
From the pot matches of: [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime : [0x563331af8c10]:   %18 = xor i8 %17, 1


Uprime Matches: [0x563331a5c1f0]:   %20 = xor i8 %19, 1
[0x563331a60b80]:   %71 = xor i8 %70, 1


Adj: [0x563331a62de0]:   store i8 %75, i8* %26, align 1


Removing: [0x563331acf060]:   %25 = and i8 %24, 1
From the pot matches of: [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime : [0x563331af8c10]:   %18 = xor i8 %17, 1


Uprime Matches: [0x563331a5c1f0]:   %20 = xor i8 %19, 1
[0x563331a60b80]:   %71 = xor i8 %70, 1


Adj: [0x563331acf4a0]:   store i8 %25, i8* %26, align 1


Removing: [0x563331acbde0]:   %11 = add i64 %7, -40
From the pot matches of: [0x563331af9a10]:   %37 = add i64 %5, -40


Uprime : [0x563331af9a90]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8


Adj: [0x563331a5bca0]:   %22 = xor i64 %8, %11
[0x563331a5d510]:   %27 = icmp eq i64 %11, 0
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331accd38]:   %15 = trunc i64 %11 to i32
[0x563331acf280]:   %30 = lshr i64 %11, 63


Removing: [0x563331ab9548]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x563331afa070]:   %45 = add i64 %41, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12
[0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331acfb00]:   %41 = add i64 %10, 28


Removing: [0x563331ad16e8]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x563331afa070]:   %45 = add i64 %41, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12
[0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331a65650]:   %85 = add i64 %62, 5
[0x563331a67b00]:   %89 = add i64 %62, 6


Removing: [0x563331ad2658]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x563331afa070]:   %45 = add i64 %41, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12
[0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a5f580]:   %56 = add i64 %55, -229


Removing: [0x563331ab0558]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5a2f0]:   %8 = add i64 %7, -8
[0x563331a5d7c0]:   %40 = add i64 %7, -12
[0x563331a5dcf0]:   %39 = add i64 %7, -40
[0x563331acbde0]:   %11 = add i64 %7, -40


Removing: [0x563331ab9548]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331acfb00]:   %41 = add i64 %10, 28


Removing: [0x563331acff68]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5fa60]:   %53 = add i64 %49, 12


Removing: [0x563331ad0428]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331acfe30]:   %46 = add i64 %45, -32


Removing: [0x563331ad10f8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Removing: [0x563331ad16e8]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a65650]:   %85 = add i64 %62, 5
[0x563331a67b00]:   %89 = add i64 %62, 6


Removing: [0x563331ad1818]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5cc80]:   %80 = lshr i64 %61, 63
[0x563331a5d050]:   %92 = add i64 %61, 48
[0x563331a60700]:   %64 = icmp ugt i64 %61, -33
[0x563331a60a30]:   %63 = add i64 %61, 32
[0x563331a651b0]:   %72 = xor i64 %63, %61
[0x563331a68370]:   %86 = add i64 %61, 40


Removing: [0x563331ad2528]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5f2d0]:   %59 = add i64 %58, -8


Removing: [0x563331ad2658]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a5f580]:   %56 = add i64 %55, -229


Removing: [0x563331ad28b8]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5e970]:   %52 = add i64 %51, -24


Removing: [0x563331ab03c8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331af9f78]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x563331af9ff0]:   %44 = add i64 %43, -32


Uprime Matches: [0x563331acfe30]:   %46 = add i64 %45, -32


Adj: [0x563331a51800]:   store i64 %4, i64* %9, align 8


Removing: [0x563331ad28b8]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331af9f78]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x563331af9ff0]:   %44 = add i64 %43, -32


Uprime Matches: [0x563331acfe30]:   %46 = add i64 %45, -32


Adj: [0x563331a5e970]:   %52 = add i64 %51, -24


Removing: [0x563331ab9548]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa238]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x563331afa510]:   %51 = add i64 %47, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12
[0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331acfb00]:   %41 = add i64 %10, 28


Removing: [0x563331ad16e8]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa238]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x563331afa510]:   %51 = add i64 %47, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12
[0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331a65650]:   %85 = add i64 %62, 5
[0x563331a67b00]:   %89 = add i64 %62, 6


Removing: [0x563331ad2658]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa238]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x563331afa510]:   %51 = add i64 %47, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12
[0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a5f580]:   %56 = add i64 %55, -229


Removing: [0x563331ab0558]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5a2f0]:   %8 = add i64 %7, -8
[0x563331a5d7c0]:   %40 = add i64 %7, -12
[0x563331a5dcf0]:   %39 = add i64 %7, -40
[0x563331acbde0]:   %11 = add i64 %7, -40


Removing: [0x563331ab9548]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331acfb00]:   %41 = add i64 %10, 28


Removing: [0x563331acff68]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5fa60]:   %53 = add i64 %49, 12


Removing: [0x563331ad0428]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331acfe30]:   %46 = add i64 %45, -32


Removing: [0x563331ad10f8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Removing: [0x563331ad16e8]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a65650]:   %85 = add i64 %62, 5
[0x563331a67b00]:   %89 = add i64 %62, 6


Removing: [0x563331ad1818]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5cc80]:   %80 = lshr i64 %61, 63
[0x563331a5d050]:   %92 = add i64 %61, 48
[0x563331a60700]:   %64 = icmp ugt i64 %61, -33
[0x563331a60a30]:   %63 = add i64 %61, 32
[0x563331a651b0]:   %72 = xor i64 %63, %61
[0x563331a68370]:   %86 = add i64 %61, 40


Removing: [0x563331ad2528]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5f2d0]:   %59 = add i64 %58, -8


Removing: [0x563331ad2658]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a5f580]:   %56 = add i64 %55, -229


Removing: [0x563331ad28b8]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa670]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x563331a51800]:   store i64 %4, i64* %9, align 8
[0x563331a5a440]:   store i64 %5, i64* %3, align 8
[0x563331a5cdd0]:   store i8 %79, i8* %32, align 1
[0x563331a5cef0]:   store i64 %85, i64* %3, align 8
[0x563331a5d1b0]:   store i64 %91, i64* %3, align 8
[0x563331a5d3b0]:   store i8 %28, i8* %29, align 1
[0x563331a5de50]:   store i64 30, i64* %RDX.i, align 8
[0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5e260]:   store i64 %44, i64* %48, align 8
[0x563331a5e670]:   store i32 0, i32* %42, align 4
[0x563331a5e7d0]:   store i64 %41, i64* %3, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8
[0x563331a5f830]:   store i64 %53, i64* %3, align 8
[0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a605f0]:   store i8 %65, i8* %14, align 1
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a622a0]:   store i64 %56, i64* %3, align 8
[0x563331a62620]:   store i8 %77, i8* %29, align 1
[0x563331a62de0]:   store i8 %75, i8* %26, align 1
[0x563331a65310]:   store i8 %71, i8* %21, align 1
[0x563331a657a0]:   store i8 %84, i8* %38, align 1
[0x563331a679a0]:   store i64 %89, i64* %3, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8
[0x563331acdc20]:   store i8 %13, i8* %14, align 1
[0x563331acdf10]:   store i8 %31, i8* %32, align 1
[0x563331acec20]:   store i8 %20, i8* %21, align 1
[0x563331acf4a0]:   store i8 %25, i8* %26, align 1
[0x563331acf6c0]:   store i64 %39, i64* %RDI.i, align 8
[0x563331acf8e0]:   store i64 4, i64* %RSI.i, align 8
[0x563331acf9f0]:   store i8 %37, i8* %38, align 1
[0x563331acfc50]:   store i64 %57, i64* %60, align 8
[0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5e970]:   %52 = add i64 %51, -24


Removing: [0x563331ab03c8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x563331a51800]:   store i64 %4, i64* %9, align 8


Removing: [0x563331ad0b08]:   %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x563331a5e260]:   store i64 %44, i64* %48, align 8


Removing: [0x563331ad4aa8]:   %88 = load i64, i64* %87, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8


Removing: [0x563331ad57b8]:   %91 = load i64, i64* %90, align 8
From the pot matches of: [0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8


Adj: [0x563331a5d1b0]:   store i64 %91, i64* %3, align 8


Removing: [0x563331ab03c8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331afa418]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x563331afa490]:   %50 = add i64 %49, -24


Uprime Matches: [0x563331a5e970]:   %52 = add i64 %51, -24


Adj: [0x563331a51800]:   store i64 %4, i64* %9, align 8


Removing: [0x563331ad0428]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331afa418]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x563331afa490]:   %50 = add i64 %49, -24


Uprime Matches: [0x563331a5e970]:   %52 = add i64 %51, -24


Adj: [0x563331acfe30]:   %46 = add i64 %45, -32


Removing: [0x563331ab9548]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x563331afa810]:   %55 = add i64 %53, 5


Uprime Matches: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a65650]:   %85 = add i64 %62, 5


Adj: [0x563331acfb00]:   %41 = add i64 %10, 28


Removing: [0x563331acff68]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x563331afa810]:   %55 = add i64 %53, 5


Uprime Matches: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a65650]:   %85 = add i64 %62, 5


Adj: [0x563331a5fa60]:   %53 = add i64 %49, 12


Removing: [0x563331ad10f8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x563331afa810]:   %55 = add i64 %53, 5


Uprime Matches: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a65650]:   %85 = add i64 %62, 5


Adj: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Removing: [0x563331ad16e8]:   %62 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x563331afa790]:   %54 = add i64 %53, -229


Uprime Matches: [0x563331a5f580]:   %56 = add i64 %55, -229


Adj: [0x563331a65650]:   %85 = add i64 %62, 5
[0x563331a67b00]:   %89 = add i64 %62, 6


Removing: [0x563331ad1818]:   %61 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afa878]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563331afa8f0]:   %57 = add i64 %56, -8


Uprime Matches: [0x563331a5a2f0]:   %8 = add i64 %7, -8
[0x563331a5f2d0]:   %59 = add i64 %58, -8


Adj: [0x563331a5cc80]:   %80 = lshr i64 %61, 63
[0x563331a5d050]:   %92 = add i64 %61, 48
[0x563331a60700]:   %64 = icmp ugt i64 %61, -33
[0x563331a60a30]:   %63 = add i64 %61, 32
[0x563331a651b0]:   %72 = xor i64 %63, %61
[0x563331a68370]:   %86 = add i64 %61, 40


Removing: [0x563331a5a2f0]:   %8 = add i64 %7, -8
From the pot matches of: [0x563331afa8f0]:   %57 = add i64 %56, -8


Uprime : [0x563331afaa50]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x563331a5fc60]:   store i64 %59, i64* %6, align 8
[0x563331a62050]:   store i64 %63, i64* %6, align 8
[0x563331a67ca0]:   store i64 %86, i64* %6, align 8
[0x563331a68550]:   store i64 %92, i64* %6, align 8
[0x563331ac94f0]:   store i64 %11, i64* %6, align 8


Adj: [0x563331a5bb50]:   %12 = icmp ult i64 %8, 32
[0x563331a5bca0]:   %22 = xor i64 %8, %11
[0x563331a5c5d0]:   %33 = lshr i64 %8, 63
[0x563331ab0748]:   %9 = inttoptr i64 %8 to i64*
[0x563331acd920]:   store i64 %8, i64* %RBP.i, align 8


Removing: [0x563331ab0558]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afac98]:   %60 = load i64, i64* %RSP, align 8


Uprime : [0x563331abd420]:   %91 = add i64 %60, 48


Uprime Matches: [0x563331a5d050]:   %92 = add i64 %61, 48


Adj: [0x563331a5a2f0]:   %8 = add i64 %7, -8
[0x563331a5d7c0]:   %40 = add i64 %7, -12
[0x563331a5dcf0]:   %39 = add i64 %7, -40
[0x563331acbde0]:   %11 = add i64 %7, -40


Removing: [0x563331ad2528]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afac98]:   %60 = load i64, i64* %RSP, align 8


Uprime : [0x563331abd420]:   %91 = add i64 %60, 48


Uprime Matches: [0x563331a5d050]:   %92 = add i64 %61, 48


Adj: [0x563331a5f2d0]:   %59 = add i64 %58, -8


Removing: [0x563331ab9548]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afacf8]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x563331abd1e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x563331a67b00]:   %89 = add i64 %62, 6


Adj: [0x563331acfb00]:   %41 = add i64 %10, 28


Removing: [0x563331acff68]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afacf8]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x563331abd1e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x563331a67b00]:   %89 = add i64 %62, 6


Adj: [0x563331a5fa60]:   %53 = add i64 %49, 12


Removing: [0x563331ad10f8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afacf8]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x563331abd1e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x563331a67b00]:   %89 = add i64 %62, 6


Adj: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Removing: [0x563331ad2658]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afacf8]:   %61 = load i64, i64* %PC, align 8


Uprime : [0x563331abd1e0]:   %88 = add i64 %61, 6


Uprime Matches: [0x563331a67b00]:   %89 = add i64 %62, 6


Adj: [0x563331a5f420]:   %57 = add i64 %55, 5
[0x563331a5f580]:   %56 = add i64 %55, -229


Removing: [0x563331ac9be8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331acdf10]:   store i8 %31, i8* %32, align 1


Removing: [0x563331accd38]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331acef50]:   %16 = and i32 %15, 255


Removing: [0x563331ad4128]:   %79 = trunc i64 %78 to i8
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331a5cdd0]:   store i8 %79, i8* %32, align 1


Removing: [0x563331ad4718]:   %66 = trunc i64 %63 to i32
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1
[0x563331a635a0]:   %75 = and i8 %74, 1
[0x563331acf060]:   %25 = and i8 %24, 1


Adj: [0x563331a604e0]:   %67 = and i32 %66, 255


Removing: [0x563331a635a0]:   %75 = and i8 %74, 1
From the pot matches of: [0x563331abc520]:   %69 = and i8 %68, 1


Uprime : [0x563331abc5a0]:   %70 = xor i8 %69, 1


Uprime Matches: [0x563331a5c1f0]:   %20 = xor i8 %19, 1
[0x563331a60b80]:   %71 = xor i8 %70, 1


Adj: [0x563331a62de0]:   store i8 %75, i8* %26, align 1


Removing: [0x563331acf060]:   %25 = and i8 %24, 1
From the pot matches of: [0x563331abc520]:   %69 = and i8 %68, 1


Uprime : [0x563331abc5a0]:   %70 = xor i8 %69, 1


Uprime Matches: [0x563331a5c1f0]:   %20 = xor i8 %19, 1
[0x563331a60b80]:   %71 = xor i8 %70, 1


Adj: [0x563331acf4a0]:   store i8 %25, i8* %26, align 1

Round: 1

Removing: [0x563331acbce8]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1


Adj: [0x563331acf060]:   %25 = and i8 %24, 1


Removing: [0x563331ad44b8]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1


Adj: [0x563331a635a0]:   %75 = and i8 %74, 1


Removing: [0x563331ab03c8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a5e260]:   store i64 %44, i64* %48, align 8


Adj: [0x563331a51800]:   store i64 %4, i64* %9, align 8


Removing: [0x563331ad15b8]:   %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a5e260]:   store i64 %44, i64* %48, align 8


Adj: [0x563331a5e100]:   store i64 %50, i64* %RAX.i14, align 8
[0x563331a5f6d0]:   store i64 %50, i64* %54, align 8


Removing: [0x563331ad4aa8]:   %88 = load i64, i64* %87, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a5e260]:   store i64 %44, i64* %48, align 8


Adj: [0x563331a67e00]:   store i64 %88, i64* %RBP.i, align 8


Removing: [0x563331ad57b8]:   %91 = load i64, i64* %90, align 8
From the pot matches of: [0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x563331afa1d0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x563331a5e260]:   store i64 %44, i64* %48, align 8


Adj: [0x563331a5d1b0]:   store i64 %91, i64* %3, align 8


Removing: [0x563331ab0558]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x563331afa878]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x563331afa8f0]:   %57 = add i64 %56, -8


Uprime Matches: [0x563331a5f2d0]:   %59 = add i64 %58, -8


Adj: [0x563331a5a2f0]:   %8 = add i64 %7, -8
[0x563331a5d7c0]:   %40 = add i64 %7, -12
[0x563331a5dcf0]:   %39 = add i64 %7, -40
[0x563331acbde0]:   %11 = add i64 %7, -40


Removing: [0x563331acbce8]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1


Adj: [0x563331acf060]:   %25 = and i8 %24, 1


Removing: [0x563331ad44b8]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1
[0x563331a60f50]:   %70 = and i8 %69, 1


Adj: [0x563331a635a0]:   %75 = and i8 %74, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x563331a9cde0]: %struct.State* %0 {
	[0x563331a5e460]:%struct.State.1* %0
	}

[0x563331a9ce20]: i64 %1 {
	[0x563331a5e1b0]:i64 %1
	}

[0x563331a9ce60]: %struct.Memory* %2 {
	[0x563331a5dda0]:%struct.Memory.32* %2
	}

[0x563331a9d018]:   %3 = load i64, i64* %RBP, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x563331a9d0f0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x563331a2b050]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x563331a9d1c0]:   %63 = icmp ugt i64 %60, -33 {
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	}

[0x563331abc298]:   %64 = zext i1 %63 to i8 {
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	}

[0x563331abc310]:   store i8 %64, i8* %12, align 1, !tbaa !1265 {
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	}

[0x563331abc378]:   %65 = trunc i64 %62 to i32 {
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331abc3f0]:   %66 = and i32 %65, 255 {
	[0x563331a604e0]:  %67 = and i32 %66, 255
	}

[0x563331abc4a8]:   %68 = trunc i32 %67 to i8 {
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	}

[0x563331abc520]:   %69 = and i8 %68, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	[0x563331a60f50]:  %70 = and i8 %69, 1
	}

[0x563331abc5a0]:   %70 = xor i8 %69, 1 {
	[0x563331a5c1f0]:  %20 = xor i8 %19, 1
	[0x563331a60b80]:  %71 = xor i8 %70, 1
	}

[0x563331abc620]:   store i8 %70, i8* %19, align 1, !tbaa !1279 {
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	}

[0x563331abc6a0]:   %71 = xor i64 %62, %60 {
	[0x563331a651b0]:  %72 = xor i64 %63, %61
	}

[0x563331abc720]:   %72 = lshr i64 %71, 4 {
	[0x563331a65050]:  %73 = lshr i64 %72, 4
	}

[0x563331abc788]:   %73 = trunc i64 %72 to i8 {
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	}

[0x563331abc800]:   %74 = and i8 %73, 1 {
	[0x563331a635a0]:  %75 = and i8 %74, 1
	}

[0x563331abc880]:   store i8 %74, i8* %24, align 1, !tbaa !1280 {
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	}

[0x563331abc900]:   %75 = icmp eq i64 %62, 0 {
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	}

[0x563331abc968]:   %76 = zext i1 %75 to i8 {
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331abc9e0]:   store i8 %76, i8* %27, align 1, !tbaa !1281 {
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	}

[0x563331abca60]:   %77 = lshr i64 %62, 63 {
	[0x563331a65470]:  %78 = lshr i64 %63, 63
	}

[0x563331abcac8]:   %78 = trunc i64 %77 to i8 {
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	}

[0x563331abcb40]:   store i8 %78, i8* %30, align 1, !tbaa !1282 {
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	}

[0x563331abcbc0]:   %79 = lshr i64 %60, 63 {
	[0x563331a5cc80]:  %80 = lshr i64 %61, 63
	}

[0x563331abcc40]:   %80 = xor i64 %77, %79 {
	[0x563331a5caa0]:  %81 = xor i64 %78, %80
	}

[0x563331abccc0]:   %81 = add nuw nsw i64 %80, %77 {
	[0x563331a5c9c0]:  %82 = add nuw nsw i64 %81, %78
	}

[0x563331abcd40]:   %82 = icmp eq i64 %81, 2 {
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331abcda8]:   %83 = zext i1 %82 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	}

[0x563331abce20]:   store i8 %83, i8* %36, align 1, !tbaa !1283 {
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	}

[0x563331abcea0]:   %84 = add i64 %61, 5 {
	[0x563331a65650]:  %85 = add i64 %62, 5
	}

[0x563331abcf20]:   store i64 %84, i64* %PC, align 8 {
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	}

[0x563331abcfa0]:   %85 = add i64 %60, 40 {
	[0x563331a68370]:  %86 = add i64 %61, 40
	}

[0x563331abd008]:   %86 = inttoptr i64 %62 to i64* {
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x563331abd068]:   %87 = load i64, i64* %86, align 8 {
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	}

[0x563331abd0e0]:   store i64 %87, i64* %RBP, align 8, !tbaa !1261 {
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	}

[0x563331abd160]:   store i64 %85, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	}

[0x563331abd1e0]:   %88 = add i64 %61, 6 {
	[0x563331a67b00]:  %89 = add i64 %62, 6
	}

[0x563331abd260]:   store i64 %88, i64* %PC, align 8 {
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	}

[0x563331abd2c8]:   %89 = inttoptr i64 %85 to i64* {
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331abd328]:   %90 = load i64, i64* %89, align 8 {
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331abd3a0]:   store i64 %90, i64* %PC, align 8, !tbaa !1261 {
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	}

[0x563331abd420]:   %91 = add i64 %60, 48 {
	[0x563331a5d050]:  %92 = add i64 %61, 48
	}

[0x563331abd4a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	}

[0x563331abd508]:   ret %struct.Memory* %59 {
	[0x563331ad5688]:  ret %struct.Memory.32* %call2_400575
	}

[0x563331af7c00]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x563331aaf2c0]:  %RAX.i14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x563331af7cf0]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x563331aaf810]:  %RDX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x563331af7e00]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x563331aaf9e0]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x563331af7f10]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x563331aaf490]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x563331af8020]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x563331aafb70]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x563331af8130]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x563331ab0b60]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x563331af81e0]:   %4 = add i64 %1, 1 {
	[0x563331a5a680]:  %5 = add i64 %1, 1
	}

[0x563331af82b0]:   store i64 %4, i64* %PC, align 8 {
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	}

[0x563331af8318]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	}

[0x563331af8390]:   %6 = add i64 %5, -8 {
	[0x563331a5a2f0]:  %8 = add i64 %7, -8
	}

[0x563331af83f8]:   %7 = inttoptr i64 %6 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	}

[0x563331af8470]:   store i64 %3, i64* %7, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	}

[0x563331af84d8]:   %8 = load i64, i64* %PC, align 8 {
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	}

[0x563331af8550]:   %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9 {
	[0x563331adac50]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x563331af85e0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x563331af8660]:   %9 = add i64 %5, -40 {
	[0x563331acbde0]:  %11 = add i64 %7, -40
	}

[0x563331af86e0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	}

[0x563331af8760]:   %10 = icmp ult i64 %6, 32 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	}

[0x563331af87c8]:   %11 = zext i1 %10 to i8 {
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	}

[0x563331af8870]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x563331ba4610]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x563331af8900]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	}

[0x563331af8968]:   %13 = trunc i64 %9 to i32 {
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	}

[0x563331af89e0]:   %14 = and i32 %13, 255 {
	[0x563331acef50]:  %16 = and i32 %15, 255
	}

[0x563331af8aa0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x563331a977b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x563331af8b18]:   %16 = trunc i32 %15 to i8 {
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	}

[0x563331af8b90]:   %17 = and i8 %16, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	[0x563331a60f50]:  %70 = and i8 %69, 1
	}

[0x563331af8c10]:   %18 = xor i8 %17, 1 {
	[0x563331a5c1f0]:  %20 = xor i8 %19, 1
	[0x563331a60b80]:  %71 = xor i8 %70, 1
	}

[0x563331af8cc0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x563331ac57c0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x563331af8d50]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	}

[0x563331af8dd0]:   %20 = xor i64 %6, %9 {
	[0x563331a5bca0]:  %22 = xor i64 %8, %11
	}

[0x563331af8e50]:   %21 = lshr i64 %20, 4 {
	[0x563331aceb10]:  %23 = lshr i64 %22, 4
	}

[0x563331af8eb8]:   %22 = trunc i64 %21 to i8 {
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	}

[0x563331af8f30]:   %23 = and i8 %22, 1 {
	[0x563331acf060]:  %25 = and i8 %24, 1
	}

[0x563331af8fe0]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x563331ad7da0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x563331af9070]:   store i8 %23, i8* %24, align 1, !tbaa !1280 {
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	}

[0x563331af90f0]:   %25 = icmp eq i64 %9, 0 {
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	}

[0x563331af9158]:   %26 = zext i1 %25 to i8 {
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	}

[0x563331af9200]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x563331a675b0]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x563331af9290]:   store i8 %26, i8* %27, align 1, !tbaa !1281 {
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	}

[0x563331af9310]:   %28 = lshr i64 %9, 63 {
	[0x563331acf280]:  %30 = lshr i64 %11, 63
	}

[0x563331af9378]:   %29 = trunc i64 %28 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	}

[0x563331af9420]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x563331a62a60]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x563331af94b0]:   store i8 %29, i8* %30, align 1, !tbaa !1282 {
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	}

[0x563331af9530]:   %31 = lshr i64 %6, 63 {
	[0x563331a5c5d0]:  %33 = lshr i64 %8, 63
	}

[0x563331af95b0]:   %32 = xor i64 %28, %31 {
	[0x563331acdd10]:  %34 = xor i64 %30, %33
	}

[0x563331af9630]:   %33 = add nuw nsw i64 %32, %31 {
	[0x563331a5d660]:  %35 = add nuw nsw i64 %34, %33
	}

[0x563331af96b0]:   %34 = icmp eq i64 %33, 2 {
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	}

[0x563331af9718]:   %35 = zext i1 %34 to i8 {
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	}

[0x563331af97c0]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x563331a5f050]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x563331af9850]:   store i8 %35, i8* %36, align 1, !tbaa !1283 {
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	}

[0x563331af98d0]:   store i64 4, i64* %RSI, align 8, !tbaa !1261 {
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	}

[0x563331af9990]:   store i64 30, i64* %RDX, align 8, !tbaa !1261 {
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	}

[0x563331af9a10]:   %37 = add i64 %5, -40 {
	[0x563331a5dcf0]:  %39 = add i64 %7, -40
	}

[0x563331af9a90]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261 {
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	}

[0x563331af9b50]:   %38 = add i64 %5, -12 {
	[0x563331a5d7c0]:  %40 = add i64 %7, -12
	}

[0x563331af9c10]:   %39 = add i64 %8, 28 {
	[0x563331acfb00]:  %41 = add i64 %10, 28
	}

[0x563331af9c90]:   store i64 %39, i64* %PC, align 8 {
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	}

[0x563331af9cf8]:   %40 = inttoptr i64 %38 to i32* {
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563331af9d70]:   store i32 0, i32* %40, align 4 {
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	}

[0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8 {
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	}

[0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16 {
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	}

[0x563331af9f78]:   %43 = load i64, i64* %RBP, align 8 {
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	}

[0x563331af9ff0]:   %44 = add i64 %43, -32 {
	[0x563331acfe30]:  %46 = add i64 %45, -32
	}

[0x563331afa070]:   %45 = add i64 %41, 12 {
	[0x563331a5e3b0]:  %47 = add i64 %43, 12
	[0x563331a5fa60]:  %53 = add i64 %49, 12
	}

[0x563331afa0f0]:   store i64 %45, i64* %PC, align 8 {
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa158]:   %46 = inttoptr i64 %44 to i64* {
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	}

[0x563331afa1d0]:   store i64 %42, i64* %46, align 8 {
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	}

[0x563331afa238]:   %47 = load i64, i64* %PC, align 8 {
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	}

[0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8 {
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	}

[0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261 {
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	}

[0x563331afa418]:   %49 = load i64, i64* %RBP, align 8 {
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	}

[0x563331afa490]:   %50 = add i64 %49, -24 {
	[0x563331a5e970]:  %52 = add i64 %51, -24
	}

[0x563331afa510]:   %51 = add i64 %47, 12 {
	[0x563331a5e3b0]:  %47 = add i64 %43, 12
	[0x563331a5fa60]:  %53 = add i64 %49, 12
	}

[0x563331afa590]:   store i64 %51, i64* %PC, align 8 {
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa5f8]:   %52 = inttoptr i64 %50 to i64* {
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	}

[0x563331afa670]:   store i64 %48, i64* %52, align 8 {
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	}

[0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8 {
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	}

[0x563331afa790]:   %54 = add i64 %53, -229 {
	[0x563331a5f580]:  %56 = add i64 %55, -229
	}

[0x563331afa810]:   %55 = add i64 %53, 5 {
	[0x563331a5f420]:  %57 = add i64 %55, 5
	}

[0x563331afa878]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	}

[0x563331afa8f0]:   %57 = add i64 %56, -8 {
	[0x563331a5f2d0]:  %59 = add i64 %58, -8
	}

[0x563331afa958]:   %58 = inttoptr i64 %57 to i64* {
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	}

[0x563331afa9d0]:   store i64 %55, i64* %58, align 8 {
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	}

[0x563331afaa50]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	}

[0x563331afaad0]:   store i64 %54, i64* %PC, align 8, !tbaa !1261 {
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	}

[0x563331afabd0]:   %59 = tail call %struct.Memory* @sub_400490_binary_search(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x563331a5ede0]:  %call2_400575 = tail call %struct.Memory.32* @sub_400490.binary_search(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	}

[0x563331afac98]:   %60 = load i64, i64* %RSP, align 8 {
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	}

[0x563331afacf8]:   %61 = load i64, i64* %PC, align 8 {
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	}

[0x563331afad70]:   %62 = add i64 %60, 32 {
	[0x563331a60a30]:  %63 = add i64 %61, 32
	}

[0x563331afadf0]:   store i64 %62, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x563331a9cea0]: block_400540 {
	[0x563331a58630]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x563331a60b80]:   %71 = xor i8 %70, 1
From the pot matches of: [0x563331af8c10]:   %18 = xor i8 %17, 1


Uprime : [0x563331af8d50]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x563331acec20]:   store i8 %20, i8* %21, align 1


Adj: [0x563331a65310]:   store i8 %71, i8* %21, align 1


Removing: [0x563331a5fa60]:   %53 = add i64 %49, 12
From the pot matches of: [0x563331afa070]:   %45 = add i64 %41, 12


Uprime : [0x563331afa0f0]:   store i64 %45, i64* %PC, align 8


Uprime Matches: [0x563331acfd20]:   store i64 %47, i64* %3, align 8


Adj: [0x563331a5f830]:   store i64 %53, i64* %3, align 8


Removing: [0x563331a5e3b0]:   %47 = add i64 %43, 12
From the pot matches of: [0x563331afa510]:   %51 = add i64 %47, 12


Uprime : [0x563331afa590]:   store i64 %51, i64* %PC, align 8


Uprime Matches: [0x563331a5f830]:   store i64 %53, i64* %3, align 8


Adj: [0x563331acfd20]:   store i64 %47, i64* %3, align 8


Removing: [0x563331a5c1f0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x563331abc5a0]:   %70 = xor i8 %69, 1


Uprime : [0x563331abc620]:   store i8 %70, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x563331a65310]:   store i8 %71, i8* %21, align 1


Adj: [0x563331acec20]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x563331a60f50]:   %70 = and i8 %69, 1
From the pot matches of: [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime : [0x563331af8c10]:   %18 = xor i8 %17, 1


Uprime Matches: [0x563331a5c1f0]:   %20 = xor i8 %19, 1


Adj: [0x563331a60b80]:   %71 = xor i8 %70, 1


Removing: [0x563331acff68]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x563331afa070]:   %45 = add i64 %41, 12


Uprime Matches: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Adj: [0x563331a5fa60]:   %53 = add i64 %49, 12


Removing: [0x563331ad10f8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x563331afa238]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x563331afa510]:   %51 = add i64 %47, 12


Uprime Matches: [0x563331a5fa60]:   %53 = add i64 %49, 12


Adj: [0x563331a5e3b0]:   %47 = add i64 %43, 12


Removing: [0x563331a5c350]:   %19 = and i8 %18, 1
From the pot matches of: [0x563331abc520]:   %69 = and i8 %68, 1


Uprime : [0x563331abc5a0]:   %70 = xor i8 %69, 1


Uprime Matches: [0x563331a60b80]:   %71 = xor i8 %70, 1


Adj: [0x563331a5c1f0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x563331ad45e8]:   %69 = trunc i32 %68 to i8
From the pot matches of: [0x563331af8b18]:   %16 = trunc i32 %15 to i8


Uprime : [0x563331af8b90]:   %17 = and i8 %16, 1


Uprime Matches: [0x563331a5c350]:   %19 = and i8 %18, 1


Adj: [0x563331a60f50]:   %70 = and i8 %69, 1


Removing: [0x563331acba18]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x563331abc4a8]:   %68 = trunc i32 %67 to i8


Uprime : [0x563331abc520]:   %69 = and i8 %68, 1


Uprime Matches: [0x563331a60f50]:   %70 = and i8 %69, 1


Adj: [0x563331a5c350]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x563331a9cde0]: %struct.State* %0 {
	[0x563331a5e460]:%struct.State.1* %0
	}

[0x563331a9ce20]: i64 %1 {
	[0x563331a5e1b0]:i64 %1
	}

[0x563331a9ce60]: %struct.Memory* %2 {
	[0x563331a5dda0]:%struct.Memory.32* %2
	}

[0x563331a9d018]:   %3 = load i64, i64* %RBP, align 8 {
	[0x563331ab03c8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x563331a9d0f0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x563331a2b050]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x563331a9d1c0]:   %63 = icmp ugt i64 %60, -33 {
	[0x563331a60700]:  %64 = icmp ugt i64 %61, -33
	}

[0x563331abc298]:   %64 = zext i1 %63 to i8 {
	[0x563331ad29e8]:  %65 = zext i1 %64 to i8
	}

[0x563331abc310]:   store i8 %64, i8* %12, align 1, !tbaa !1265 {
	[0x563331a605f0]:  store i8 %65, i8* %14, align 1
	}

[0x563331abc378]:   %65 = trunc i64 %62 to i32 {
	[0x563331ad4718]:  %66 = trunc i64 %63 to i32
	}

[0x563331abc3f0]:   %66 = and i32 %65, 255 {
	[0x563331a604e0]:  %67 = and i32 %66, 255
	}

[0x563331abc4a8]:   %68 = trunc i32 %67 to i8 {
	[0x563331ad45e8]:  %69 = trunc i32 %68 to i8
	}

[0x563331abc520]:   %69 = and i8 %68, 1 {
	[0x563331a60f50]:  %70 = and i8 %69, 1
	}

[0x563331abc5a0]:   %70 = xor i8 %69, 1 {
	[0x563331a60b80]:  %71 = xor i8 %70, 1
	}

[0x563331abc620]:   store i8 %70, i8* %19, align 1, !tbaa !1279 {
	[0x563331a65310]:  store i8 %71, i8* %21, align 1
	}

[0x563331abc6a0]:   %71 = xor i64 %62, %60 {
	[0x563331a651b0]:  %72 = xor i64 %63, %61
	}

[0x563331abc720]:   %72 = lshr i64 %71, 4 {
	[0x563331a65050]:  %73 = lshr i64 %72, 4
	}

[0x563331abc788]:   %73 = trunc i64 %72 to i8 {
	[0x563331ad44b8]:  %74 = trunc i64 %73 to i8
	}

[0x563331abc800]:   %74 = and i8 %73, 1 {
	[0x563331a635a0]:  %75 = and i8 %74, 1
	}

[0x563331abc880]:   store i8 %74, i8* %24, align 1, !tbaa !1280 {
	[0x563331a62de0]:  store i8 %75, i8* %26, align 1
	}

[0x563331abc900]:   %75 = icmp eq i64 %62, 0 {
	[0x563331a60960]:  %76 = icmp eq i64 %63, 0
	}

[0x563331abc968]:   %76 = zext i1 %75 to i8 {
	[0x563331ad4258]:  %77 = zext i1 %76 to i8
	}

[0x563331abc9e0]:   store i8 %76, i8* %27, align 1, !tbaa !1281 {
	[0x563331a62620]:  store i8 %77, i8* %29, align 1
	}

[0x563331abca60]:   %77 = lshr i64 %62, 63 {
	[0x563331a65470]:  %78 = lshr i64 %63, 63
	}

[0x563331abcac8]:   %78 = trunc i64 %77 to i8 {
	[0x563331ad4128]:  %79 = trunc i64 %78 to i8
	}

[0x563331abcb40]:   store i8 %78, i8* %30, align 1, !tbaa !1282 {
	[0x563331a5cdd0]:  store i8 %79, i8* %32, align 1
	}

[0x563331abcbc0]:   %79 = lshr i64 %60, 63 {
	[0x563331a5cc80]:  %80 = lshr i64 %61, 63
	}

[0x563331abcc40]:   %80 = xor i64 %77, %79 {
	[0x563331a5caa0]:  %81 = xor i64 %78, %80
	}

[0x563331abccc0]:   %81 = add nuw nsw i64 %80, %77 {
	[0x563331a5c9c0]:  %82 = add nuw nsw i64 %81, %78
	}

[0x563331abcd40]:   %82 = icmp eq i64 %81, 2 {
	[0x563331a65a60]:  %83 = icmp eq i64 %82, 2
	}

[0x563331abcda8]:   %83 = zext i1 %82 to i8 {
	[0x563331a5d2f8]:  %84 = zext i1 %83 to i8
	}

[0x563331abce20]:   store i8 %83, i8* %36, align 1, !tbaa !1283 {
	[0x563331a657a0]:  store i8 %84, i8* %38, align 1
	}

[0x563331abcea0]:   %84 = add i64 %61, 5 {
	[0x563331a65650]:  %85 = add i64 %62, 5
	}

[0x563331abcf20]:   store i64 %84, i64* %PC, align 8 {
	[0x563331a5cef0]:  store i64 %85, i64* %3, align 8
	}

[0x563331abcfa0]:   %85 = add i64 %60, 40 {
	[0x563331a68370]:  %86 = add i64 %61, 40
	}

[0x563331abd008]:   %86 = inttoptr i64 %62 to i64* {
	[0x563331ad3b38]:  %87 = inttoptr i64 %63 to i64*
	}

[0x563331abd068]:   %87 = load i64, i64* %86, align 8 {
	[0x563331ad4aa8]:  %88 = load i64, i64* %87, align 8
	}

[0x563331abd0e0]:   store i64 %87, i64* %RBP, align 8, !tbaa !1261 {
	[0x563331a67e00]:  store i64 %88, i64* %RBP.i, align 8
	}

[0x563331abd160]:   store i64 %85, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a67ca0]:  store i64 %86, i64* %6, align 8
	}

[0x563331abd1e0]:   %88 = add i64 %61, 6 {
	[0x563331a67b00]:  %89 = add i64 %62, 6
	}

[0x563331abd260]:   store i64 %88, i64* %PC, align 8 {
	[0x563331a679a0]:  store i64 %89, i64* %3, align 8
	}

[0x563331abd2c8]:   %89 = inttoptr i64 %85 to i64* {
	[0x563331ad58e8]:  %90 = inttoptr i64 %86 to i64*
	}

[0x563331abd328]:   %90 = load i64, i64* %89, align 8 {
	[0x563331ad57b8]:  %91 = load i64, i64* %90, align 8
	}

[0x563331abd3a0]:   store i64 %90, i64* %PC, align 8, !tbaa !1261 {
	[0x563331a5d1b0]:  store i64 %91, i64* %3, align 8
	}

[0x563331abd420]:   %91 = add i64 %60, 48 {
	[0x563331a5d050]:  %92 = add i64 %61, 48
	}

[0x563331abd4a0]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a68550]:  store i64 %92, i64* %6, align 8
	}

[0x563331abd508]:   ret %struct.Memory* %59 {
	[0x563331ad5688]:  ret %struct.Memory.32* %call2_400575
	}

[0x563331af7c00]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x563331aaf2c0]:  %RAX.i14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x563331af7cf0]:   %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0 {
	[0x563331aaf810]:  %RDX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 7, i32 0, i32 0
	}

[0x563331af7e00]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x563331aaf9e0]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x563331af7f10]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x563331aaf490]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x563331af8020]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x563331aafb70]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x563331af8130]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x563331ab0b60]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x563331af81e0]:   %4 = add i64 %1, 1 {
	[0x563331a5a680]:  %5 = add i64 %1, 1
	}

[0x563331af82b0]:   store i64 %4, i64* %PC, align 8 {
	[0x563331a5a440]:  store i64 %5, i64* %3, align 8
	}

[0x563331af8318]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ab0558]:  %7 = load i64, i64* %6, align 8
	}

[0x563331af8390]:   %6 = add i64 %5, -8 {
	[0x563331a5a2f0]:  %8 = add i64 %7, -8
	}

[0x563331af83f8]:   %7 = inttoptr i64 %6 to i64* {
	[0x563331ab0748]:  %9 = inttoptr i64 %8 to i64*
	}

[0x563331af8470]:   store i64 %3, i64* %7, align 8 {
	[0x563331a51800]:  store i64 %4, i64* %9, align 8
	}

[0x563331af84d8]:   %8 = load i64, i64* %PC, align 8 {
	[0x563331ab9548]:  %10 = load i64, i64* %3, align 8
	}

[0x563331af8550]:   %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9 {
	[0x563331adac50]:  %68 = tail call i32 @llvm.ctpop.i32(i32 %67)
	}

[0x563331af85e0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x563331acd920]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x563331af8660]:   %9 = add i64 %5, -40 {
	[0x563331acbde0]:  %11 = add i64 %7, -40
	}

[0x563331af86e0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ac94f0]:  store i64 %11, i64* %6, align 8
	}

[0x563331af8760]:   %10 = icmp ult i64 %6, 32 {
	[0x563331a5bb50]:  %12 = icmp ult i64 %8, 32
	}

[0x563331af87c8]:   %11 = zext i1 %10 to i8 {
	[0x563331acb228]:  %13 = zext i1 %12 to i8
	}

[0x563331af8870]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x563331ba4610]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x563331af8900]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x563331acdc20]:  store i8 %13, i8* %14, align 1
	}

[0x563331af8968]:   %13 = trunc i64 %9 to i32 {
	[0x563331accd38]:  %15 = trunc i64 %11 to i32
	}

[0x563331af89e0]:   %14 = and i32 %13, 255 {
	[0x563331acef50]:  %16 = and i32 %15, 255
	}

[0x563331af8aa0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x563331a977b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x563331af8b18]:   %16 = trunc i32 %15 to i8 {
	[0x563331acba18]:  %18 = trunc i32 %17 to i8
	}

[0x563331af8b90]:   %17 = and i8 %16, 1 {
	[0x563331a5c350]:  %19 = and i8 %18, 1
	}

[0x563331af8c10]:   %18 = xor i8 %17, 1 {
	[0x563331a5c1f0]:  %20 = xor i8 %19, 1
	}

[0x563331af8cc0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x563331ac57c0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x563331af8d50]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x563331acec20]:  store i8 %20, i8* %21, align 1
	}

[0x563331af8dd0]:   %20 = xor i64 %6, %9 {
	[0x563331a5bca0]:  %22 = xor i64 %8, %11
	}

[0x563331af8e50]:   %21 = lshr i64 %20, 4 {
	[0x563331aceb10]:  %23 = lshr i64 %22, 4
	}

[0x563331af8eb8]:   %22 = trunc i64 %21 to i8 {
	[0x563331acbce8]:  %24 = trunc i64 %23 to i8
	}

[0x563331af8f30]:   %23 = and i8 %22, 1 {
	[0x563331acf060]:  %25 = and i8 %24, 1
	}

[0x563331af8fe0]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x563331ad7da0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x563331af9070]:   store i8 %23, i8* %24, align 1, !tbaa !1280 {
	[0x563331acf4a0]:  store i8 %25, i8* %26, align 1
	}

[0x563331af90f0]:   %25 = icmp eq i64 %9, 0 {
	[0x563331a5d510]:  %27 = icmp eq i64 %11, 0
	}

[0x563331af9158]:   %26 = zext i1 %25 to i8 {
	[0x563331aca018]:  %28 = zext i1 %27 to i8
	}

[0x563331af9200]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x563331a675b0]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x563331af9290]:   store i8 %26, i8* %27, align 1, !tbaa !1281 {
	[0x563331a5d3b0]:  store i8 %28, i8* %29, align 1
	}

[0x563331af9310]:   %28 = lshr i64 %9, 63 {
	[0x563331acf280]:  %30 = lshr i64 %11, 63
	}

[0x563331af9378]:   %29 = trunc i64 %28 to i8 {
	[0x563331ac9be8]:  %31 = trunc i64 %30 to i8
	}

[0x563331af9420]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x563331a62a60]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x563331af94b0]:   store i8 %29, i8* %30, align 1, !tbaa !1282 {
	[0x563331acdf10]:  store i8 %31, i8* %32, align 1
	}

[0x563331af9530]:   %31 = lshr i64 %6, 63 {
	[0x563331a5c5d0]:  %33 = lshr i64 %8, 63
	}

[0x563331af95b0]:   %32 = xor i64 %28, %31 {
	[0x563331acdd10]:  %34 = xor i64 %30, %33
	}

[0x563331af9630]:   %33 = add nuw nsw i64 %32, %31 {
	[0x563331a5d660]:  %35 = add nuw nsw i64 %34, %33
	}

[0x563331af96b0]:   %34 = icmp eq i64 %33, 2 {
	[0x563331a5dfb0]:  %36 = icmp eq i64 %35, 2
	}

[0x563331af9718]:   %35 = zext i1 %34 to i8 {
	[0x563331ac0fa8]:  %37 = zext i1 %36 to i8
	}

[0x563331af97c0]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x563331a5f050]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x563331af9850]:   store i8 %35, i8* %36, align 1, !tbaa !1283 {
	[0x563331acf9f0]:  store i8 %37, i8* %38, align 1
	}

[0x563331af98d0]:   store i64 4, i64* %RSI, align 8, !tbaa !1261 {
	[0x563331acf8e0]:  store i64 4, i64* %RSI.i, align 8
	}

[0x563331af9990]:   store i64 30, i64* %RDX, align 8, !tbaa !1261 {
	[0x563331a5de50]:  store i64 30, i64* %RDX.i, align 8
	}

[0x563331af9a10]:   %37 = add i64 %5, -40 {
	[0x563331a5dcf0]:  %39 = add i64 %7, -40
	}

[0x563331af9a90]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261 {
	[0x563331acf6c0]:  store i64 %39, i64* %RDI.i, align 8
	}

[0x563331af9b50]:   %38 = add i64 %5, -12 {
	[0x563331a5d7c0]:  %40 = add i64 %7, -12
	}

[0x563331af9c10]:   %39 = add i64 %8, 28 {
	[0x563331acfb00]:  %41 = add i64 %10, 28
	}

[0x563331af9c90]:   store i64 %39, i64* %PC, align 8 {
	[0x563331a5e7d0]:  store i64 %41, i64* %3, align 8
	}

[0x563331af9cf8]:   %40 = inttoptr i64 %38 to i32* {
	[0x563331acd148]:  %42 = inttoptr i64 %40 to i32*
	}

[0x563331af9d70]:   store i32 0, i32* %40, align 4 {
	[0x563331a5e670]:  store i32 0, i32* %42, align 4
	}

[0x563331af9dd8]:   %41 = load i64, i64* %PC, align 8 {
	[0x563331ad10f8]:  %43 = load i64, i64* %3, align 8
	}

[0x563331af9f18]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16) to i64*), align 16 {
	[0x563331ad0b08]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400610 to i64), i64 184) to i64*), align 8
	}

[0x563331af9f78]:   %43 = load i64, i64* %RBP, align 8 {
	[0x563331ad0428]:  %45 = load i64, i64* %RBP.i, align 8
	}

[0x563331af9ff0]:   %44 = add i64 %43, -32 {
	[0x563331acfe30]:  %46 = add i64 %45, -32
	}

[0x563331afa070]:   %45 = add i64 %41, 12 {
	[0x563331a5e3b0]:  %47 = add i64 %43, 12
	}

[0x563331afa0f0]:   store i64 %45, i64* %PC, align 8 {
	[0x563331acfd20]:  store i64 %47, i64* %3, align 8
	}

[0x563331afa158]:   %46 = inttoptr i64 %44 to i64* {
	[0x563331ad0098]:  %48 = inttoptr i64 %46 to i64*
	}

[0x563331afa1d0]:   store i64 %42, i64* %46, align 8 {
	[0x563331a5e260]:  store i64 %44, i64* %48, align 8
	}

[0x563331afa238]:   %47 = load i64, i64* %PC, align 8 {
	[0x563331acff68]:  %49 = load i64, i64* %3, align 8
	}

[0x563331afa338]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 24) to i64*), align 8 {
	[0x563331ad15b8]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x400618 to i64), i64 192) to i64*), align 8
	}

[0x563331afa3b0]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261 {
	[0x563331a5e100]:  store i64 %50, i64* %RAX.i14, align 8
	}

[0x563331afa418]:   %49 = load i64, i64* %RBP, align 8 {
	[0x563331ad28b8]:  %51 = load i64, i64* %RBP.i, align 8
	}

[0x563331afa490]:   %50 = add i64 %49, -24 {
	[0x563331a5e970]:  %52 = add i64 %51, -24
	}

[0x563331afa510]:   %51 = add i64 %47, 12 {
	[0x563331a5fa60]:  %53 = add i64 %49, 12
	}

[0x563331afa590]:   store i64 %51, i64* %PC, align 8 {
	[0x563331a5f830]:  store i64 %53, i64* %3, align 8
	}

[0x563331afa5f8]:   %52 = inttoptr i64 %50 to i64* {
	[0x563331ad2788]:  %54 = inttoptr i64 %52 to i64*
	}

[0x563331afa670]:   store i64 %48, i64* %52, align 8 {
	[0x563331a5f6d0]:  store i64 %50, i64* %54, align 8
	}

[0x563331afa6d8]:   %53 = load i64, i64* %PC, align 8 {
	[0x563331ad2658]:  %55 = load i64, i64* %3, align 8
	}

[0x563331afa790]:   %54 = add i64 %53, -229 {
	[0x563331a5f580]:  %56 = add i64 %55, -229
	}

[0x563331afa810]:   %55 = add i64 %53, 5 {
	[0x563331a5f420]:  %57 = add i64 %55, 5
	}

[0x563331afa878]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331ad2528]:  %58 = load i64, i64* %6, align 8
	}

[0x563331afa8f0]:   %57 = add i64 %56, -8 {
	[0x563331a5f2d0]:  %59 = add i64 %58, -8
	}

[0x563331afa958]:   %58 = inttoptr i64 %57 to i64* {
	[0x563331ad22c8]:  %60 = inttoptr i64 %59 to i64*
	}

[0x563331afa9d0]:   store i64 %55, i64* %58, align 8 {
	[0x563331acfc50]:  store i64 %57, i64* %60, align 8
	}

[0x563331afaa50]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a5fc60]:  store i64 %59, i64* %6, align 8
	}

[0x563331afaad0]:   store i64 %54, i64* %PC, align 8, !tbaa !1261 {
	[0x563331a622a0]:  store i64 %56, i64* %3, align 8
	}

[0x563331afabd0]:   %59 = tail call %struct.Memory* @sub_400490_binary_search(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x563331a5ede0]:  %call2_400575 = tail call %struct.Memory.32* @sub_400490.binary_search(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	}

[0x563331afac98]:   %60 = load i64, i64* %RSP, align 8 {
	[0x563331ad1818]:  %61 = load i64, i64* %6, align 8
	}

[0x563331afacf8]:   %61 = load i64, i64* %PC, align 8 {
	[0x563331ad16e8]:  %62 = load i64, i64* %3, align 8
	}

[0x563331afad70]:   %62 = add i64 %60, 32 {
	[0x563331a60a30]:  %63 = add i64 %61, 32
	}

[0x563331afadf0]:   store i64 %62, i64* %RSP, align 8, !tbaa !1261 {
	[0x563331a62050]:  store i64 %63, i64* %6, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x563331a9cea0]: block_400540 {
	[0x563331a58630]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
