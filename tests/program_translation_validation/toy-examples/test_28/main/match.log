Matching sub_400550_main Vs main


[Info] Retrieve Potential Matches...
[0x560d47ae97a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47ae9820]:   %6 = add i64 %5, -8 {
	[0x560d47abe940]:  %8 = add i64 %7, -8
	[0x560d47ac2cf0]:  %47 = add i64 %46, -8
	}

[0x560d47ae9888]:   %7 = inttoptr i64 %6 to i64* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47ae9900]:   store i64 %3, i64* %7, align 8 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47ae9968]:   %8 = load i64, i64* %PC, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47ae9a70]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47ae9b30]:   %9 = add i64 %5, -24 {
	[0x560d47b31f00]:  %11 = add i64 %7, -24
	}

[0x560d47ae9bb0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aeae50]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aeb4e0]:   %20 = xor i64 %6, 16 {
	[0x560d47ac02f0]:  %22 = xor i64 %8, 16
	[0x560d47b34230]:  %60 = xor i64 %50, 16
	}

[0x560d47aeb560]:   %21 = xor i64 %20, %9 {
	[0x560d47ac42e0]:  %61 = xor i64 %60, %51
	[0x560d47ac9990]:  %70 = xor i64 %67, %69
	[0x560d47b32310]:  %35 = xor i64 %31, %34
	[0x560d47b330f0]:  %23 = xor i64 %22, %11
	}

[0x560d47aeb5e0]:   %22 = lshr i64 %21, 4 {
	[0x560d47ac01a0]:  %24 = lshr i64 %23, 4
	[0x560d47ac6920]:  %62 = lshr i64 %61, 4
	}

[0x560d47aeb648]:   %23 = trunc i64 %22 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aeb6c0]:   %24 = and i8 %23, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	[0x560d47ac50b0]:  %64 = and i8 %63, 1
	[0x560d47b33640]:  %26 = and i8 %25, 1
	}

[0x560d47aeb770]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560d47acc040]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x560d47aeb800]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aebe90]:   %26 = icmp eq i64 %9, 0 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47aebef8]:   %27 = zext i1 %26 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aebfa0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x560d47ac70e0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x560d47aec030]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aec6c0]:   %29 = lshr i64 %9, 63 {
	[0x560d47ac0c20]:  %34 = lshr i64 %8, 63
	[0x560d47ac4b60]:  %67 = lshr i64 %51, 63
	[0x560d47ac5200]:  %69 = lshr i64 %50, 63
	[0x560d47b33860]:  %31 = lshr i64 %11, 63
	}

[0x560d47aec728]:   %30 = trunc i64 %29 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aec7d0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x560d47ac36d0]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x560d47aec860]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aecef0]:   %32 = lshr i64 %6, 63 {
	[0x560d47ac0c20]:  %34 = lshr i64 %8, 63
	[0x560d47ac4b60]:  %67 = lshr i64 %51, 63
	[0x560d47ac5200]:  %69 = lshr i64 %50, 63
	[0x560d47b33860]:  %31 = lshr i64 %11, 63
	}

[0x560d47aecf70]:   %33 = xor i64 %29, %32 {
	[0x560d47ac42e0]:  %61 = xor i64 %60, %51
	[0x560d47ac9990]:  %70 = xor i64 %67, %69
	[0x560d47b32310]:  %35 = xor i64 %31, %34
	[0x560d47b330f0]:  %23 = xor i64 %22, %11
	}

[0x560d47aecff0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x560d47ac1ce0]:  %36 = add nuw nsw i64 %35, %34
	[0x560d47ac9830]:  %71 = add nuw nsw i64 %70, %67
	}

[0x560d47aed070]:   %35 = icmp eq i64 %34, 2 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47aed0d8]:   %36 = zext i1 %35 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aed180]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x560d47ac3460]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x560d47aed210]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aed8a0]:   store i64 2, i64* %RDI, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aed960]:   %38 = add i64 %5, -12 {
	[0x560d47ac24d0]:  %40 = add i64 %7, -12
	}

[0x560d47aeda20]:   %39 = add i64 %8, 19 {
	[0x560d47ac2370]:  %41 = add i64 %10, 19
	}

[0x560d47aedaa0]:   store i64 %39, i64* %PC, align 8 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aedb08]:   %40 = inttoptr i64 %38 to i32* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47aedb80]:   store i32 0, i32* %40, align 4 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aedbe8]:   %41 = load i64, i64* %PC, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aedca0]:   %42 = add i64 %41, -100 {
	[0x560d47b340e0]:  %44 = add i64 %43, -100
	}

[0x560d47aedd20]:   %43 = add i64 %41, 5 {
	[0x560d47ac2e50]:  %45 = add i64 %43, 5
	}

[0x560d47aedd88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aede00]:   %45 = add i64 %44, -8 {
	[0x560d47abe940]:  %8 = add i64 %7, -8
	[0x560d47ac2cf0]:  %47 = add i64 %46, -8
	}

[0x560d47aede68]:   %46 = inttoptr i64 %45 to i64* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47aedee0]:   store i64 %43, i64* %46, align 8 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aedf60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aedfe0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aee110]:   %47 = tail call %struct.Memory* @sub_400500_func(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x560d47ac1f50]:  %call2_400564 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x560d47b05810]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560d47b48e40]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x560d47aee1d8]:   %48 = load i64, i64* %PC, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aee250]:   store i64 0, i64* %RAX, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aee2b8]:   %49 = load i64, i64* %RSP, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aee330]:   %50 = add i64 %49, 16 {
	[0x560d47ac2780]:  %51 = add i64 %50, 16
	}

[0x560d47aee3b0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aee470]:   %51 = icmp ugt i64 %49, -17 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47aee4d8]:   %52 = zext i1 %51 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aee550]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aee5b8]:   %53 = trunc i64 %50 to i32 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aee630]:   %54 = and i32 %53, 255 {
	[0x560d47ac3d50]:  %55 = and i32 %54, 255
	[0x560d47b33530]:  %16 = and i32 %15, 255
	}

[0x560d47aee6b0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x560d47ac1f50]:  %call2_400564 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x560d47b05810]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560d47b48e40]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x560d47aee778]:   %56 = trunc i32 %55 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aee7f0]:   %57 = and i8 %56, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	[0x560d47ac50b0]:  %64 = and i8 %63, 1
	[0x560d47b33640]:  %26 = and i8 %25, 1
	}

[0x560d47aee870]:   %58 = xor i8 %57, 1 {
	[0x560d47ac0840]:  %20 = xor i8 %19, 1
	[0x560d47ac3aa0]:  %59 = xor i8 %58, 1
	}

[0x560d47aee8f0]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aee970]:   %59 = xor i64 %49, 16 {
	[0x560d47ac02f0]:  %22 = xor i64 %8, 16
	[0x560d47b34230]:  %60 = xor i64 %50, 16
	}

[0x560d47aee9f0]:   %60 = xor i64 %59, %50 {
	[0x560d47ac42e0]:  %61 = xor i64 %60, %51
	[0x560d47ac9990]:  %70 = xor i64 %67, %69
	[0x560d47b32310]:  %35 = xor i64 %31, %34
	[0x560d47b330f0]:  %23 = xor i64 %22, %11
	}

[0x560d47aeea70]:   %61 = lshr i64 %60, 4 {
	[0x560d47ac01a0]:  %24 = lshr i64 %23, 4
	[0x560d47ac6920]:  %62 = lshr i64 %61, 4
	}

[0x560d47aeead8]:   %62 = trunc i64 %61 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aeeb50]:   %63 = and i8 %62, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	[0x560d47ac50b0]:  %64 = and i8 %63, 1
	[0x560d47b33640]:  %26 = and i8 %25, 1
	}

[0x560d47aeebd0]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aeec50]:   %64 = icmp eq i64 %50, 0 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47aeecb8]:   %65 = zext i1 %64 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aeed30]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aeedb0]:   %66 = lshr i64 %50, 63 {
	[0x560d47ac0c20]:  %34 = lshr i64 %8, 63
	[0x560d47ac4b60]:  %67 = lshr i64 %51, 63
	[0x560d47ac5200]:  %69 = lshr i64 %50, 63
	[0x560d47b33860]:  %31 = lshr i64 %11, 63
	}

[0x560d47aeee18]:   %67 = trunc i64 %66 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aeee90]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aeef10]:   %68 = lshr i64 %49, 63 {
	[0x560d47ac0c20]:  %34 = lshr i64 %8, 63
	[0x560d47ac4b60]:  %67 = lshr i64 %51, 63
	[0x560d47ac5200]:  %69 = lshr i64 %50, 63
	[0x560d47b33860]:  %31 = lshr i64 %11, 63
	}

[0x560d47aeef90]:   %69 = xor i64 %66, %68 {
	[0x560d47ac42e0]:  %61 = xor i64 %60, %51
	[0x560d47ac9990]:  %70 = xor i64 %67, %69
	[0x560d47b32310]:  %35 = xor i64 %31, %34
	[0x560d47b330f0]:  %23 = xor i64 %22, %11
	}

[0x560d47aef010]:   %70 = add nuw nsw i64 %69, %66 {
	[0x560d47ac1ce0]:  %36 = add nuw nsw i64 %35, %34
	[0x560d47ac9830]:  %71 = add nuw nsw i64 %70, %67
	}

[0x560d47aef090]:   %71 = icmp eq i64 %70, 2 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47aef0f8]:   %72 = zext i1 %71 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aef170]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef1f0]:   %73 = add i64 %48, 7 {
	[0x560d47ac7460]:  %74 = add i64 %49, 7
	}

[0x560d47aef270]:   store i64 %73, i64* %PC, align 8 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef330]:   %74 = add i64 %49, 24 {
	[0x560d47ac6ca0]:  %75 = add i64 %50, 24
	}

[0x560d47aef398]:   %75 = inttoptr i64 %50 to i64* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47aef3f8]:   %76 = load i64, i64* %75, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aef470]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef4f0]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef570]:   %77 = add i64 %48, 8 {
	[0x560d47ac12d0]:  %78 = add i64 %49, 8
	}

[0x560d47aef5f0]:   store i64 %77, i64* %PC, align 8 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef658]:   %78 = inttoptr i64 %74 to i64* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47aef6b8]:   %79 = load i64, i64* %78, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aef730]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef7f0]:   %80 = add i64 %49, 32 {
	[0x560d47aca0e0]:  %81 = add i64 %50, 32
	}

[0x560d47aef870]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aef8d8]:   ret %struct.Memory* %47 {
	[0x560d47b38838]:  ret %struct.Memory.32* %call2_400564
	}

[0x560d47afd150]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x560d47b22490]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x560d47b4b4a0]:   %10 = icmp ult i64 %6, 16 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47b4b508]:   %11 = zext i1 %10 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47b4b5b0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x560d47c08c80]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x560d47b4b640]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47b4b6a8]:   %13 = trunc i64 %9 to i32 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47b4b720]:   %14 = and i32 %13, 255 {
	[0x560d47ac3d50]:  %55 = and i32 %54, 255
	[0x560d47b33530]:  %16 = and i32 %15, 255
	}

[0x560d47b4b7e0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x560d47ac1f50]:  %call2_400564 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x560d47b05810]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560d47b48e40]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x560d47b4b858]:   %16 = trunc i32 %15 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47b4b8d0]:   %17 = and i8 %16, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	[0x560d47ac50b0]:  %64 = and i8 %63, 1
	[0x560d47b33640]:  %26 = and i8 %25, 1
	}

[0x560d47b4b950]:   %18 = xor i8 %17, 1 {
	[0x560d47ac0840]:  %20 = xor i8 %19, 1
	[0x560d47ac3aa0]:  %59 = xor i8 %58, 1
	}

[0x560d47b4ba00]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x560d47b689d0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x560d47b56750]: %struct.State* %0 {
	[0x560d47ac2420]:%struct.State.1* %0
	}

[0x560d47b56790]: i64 %1 {
	[0x560d47b33dc0]:i64 %1
	}

[0x560d47b567d0]: %struct.Memory* %2 {
	[0x560d47ac2130]:%struct.Memory.32* %2
	}

[0x560d47b56988]:   %3 = load i64, i64* %RBP, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47b56a60]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x560d47b1f020]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x560d47b56b70]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560d47b1f1b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x560d47b56c80]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560d47b1f3a0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x560d47b56d30]:   %4 = add i64 %1, 1 {
	[0x560d47b7a720]:  %5 = add i64 %1, 1
	}

[0x560d47b56e00]:   store i64 %4, i64* %PC, align 8 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47b81310]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x560d47b1ee50]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x560d47ab54f8]:   %50 = load i64, i64* %6, align 8
From the pot matches of: [0x560d47ae97a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x560d47aed960]:   %38 = add i64 %5, -12


Uprime Matches: [0x560d47ac24d0]:   %40 = add i64 %7, -12


Adj: [0x560d47ac2780]:   %51 = add i64 %50, 16
[0x560d47ac40e0]:   %52 = icmp ugt i64 %50, -17
[0x560d47ac5200]:   %69 = lshr i64 %50, 63
[0x560d47ac6ca0]:   %75 = add i64 %50, 24
[0x560d47aca0e0]:   %81 = add i64 %50, 32
[0x560d47b34230]:   %60 = xor i64 %50, 16


Removing: [0x560d47b34678]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x560d47ae97a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x560d47aed960]:   %38 = add i64 %5, -12


Uprime Matches: [0x560d47ac24d0]:   %40 = add i64 %7, -12


Adj: [0x560d47ac2cf0]:   %47 = add i64 %46, -8


Removing: [0x560d47ac0aa8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x560d47ae9968]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x560d47aeda20]:   %39 = add i64 %8, 19


Uprime Matches: [0x560d47ac2370]:   %41 = add i64 %10, 19


Adj: [0x560d47ac12d0]:   %78 = add i64 %49, 8
[0x560d47ac7460]:   %74 = add i64 %49, 7


Removing: [0x560d47b34a08]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x560d47ae9968]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x560d47aeda20]:   %39 = add i64 %8, 19


Uprime Matches: [0x560d47ac2370]:   %41 = add i64 %10, 19


Adj: [0x560d47ac2e50]:   %45 = add i64 %43, 5
[0x560d47b340e0]:   %44 = add i64 %43, -100


Removing: [0x560d47b2f768]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47ac3d50]:   %55 = and i32 %54, 255


Removing: [0x560d47b30228]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47b33530]:   %16 = and i32 %15, 255


Removing: [0x560d47b35df8]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47ac55d0]:   store i8 %68, i8* %33, align 1


Removing: [0x560d47b675c8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47b32510]:   store i8 %32, i8* %33, align 1


Removing: [0x560d47ac50b0]:   %64 = and i8 %63, 1
From the pot matches of: [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime : [0x560d47b4b950]:   %18 = xor i8 %17, 1


Uprime Matches: [0x560d47ac0840]:   %20 = xor i8 %19, 1
[0x560d47ac3aa0]:   %59 = xor i8 %58, 1


Adj: [0x560d47ac66d0]:   store i8 %64, i8* %27, align 1


Removing: [0x560d47b33640]:   %26 = and i8 %25, 1
From the pot matches of: [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime : [0x560d47b4b950]:   %18 = xor i8 %17, 1


Uprime Matches: [0x560d47ac0840]:   %20 = xor i8 %19, 1
[0x560d47ac3aa0]:   %59 = xor i8 %58, 1


Adj: [0x560d47b33a80]:   store i8 %26, i8* %27, align 1


Removing: [0x560d47ab2168]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560d47aedbe8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x560d47aedd20]:   %43 = add i64 %41, 5


Uprime Matches: [0x560d47ac2e50]:   %45 = add i64 %43, 5


Adj: [0x560d47ac2370]:   %41 = add i64 %10, 19


Removing: [0x560d47ac0aa8]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x560d47aedbe8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x560d47aedd20]:   %43 = add i64 %41, 5


Uprime Matches: [0x560d47ac2e50]:   %45 = add i64 %43, 5


Adj: [0x560d47ac12d0]:   %78 = add i64 %49, 8
[0x560d47ac7460]:   %74 = add i64 %49, 7


Removing: [0x560d47ab54f8]:   %50 = load i64, i64* %6, align 8
From the pot matches of: [0x560d47aedd88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x560d47aede00]:   %45 = add i64 %44, -8


Uprime Matches: [0x560d47abe940]:   %8 = add i64 %7, -8
[0x560d47ac2cf0]:   %47 = add i64 %46, -8


Adj: [0x560d47ac2780]:   %51 = add i64 %50, 16
[0x560d47ac40e0]:   %52 = icmp ugt i64 %50, -17
[0x560d47ac5200]:   %69 = lshr i64 %50, 63
[0x560d47ac6ca0]:   %75 = add i64 %50, 24
[0x560d47aca0e0]:   %81 = add i64 %50, 32
[0x560d47b34230]:   %60 = xor i64 %50, 16


Removing: [0x560d47abe940]:   %8 = add i64 %7, -8
From the pot matches of: [0x560d47aede00]:   %45 = add i64 %44, -8


Uprime : [0x560d47aedf60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x560d47ac1420]:   store i64 %75, i64* %6, align 8
[0x560d47ac2a30]:   store i64 %47, i64* %6, align 8
[0x560d47ac2ff0]:   store i64 %51, i64* %6, align 8
[0x560d47ac9e20]:   store i64 %81, i64* %6, align 8
[0x560d47b30320]:   store i64 %11, i64* %6, align 8


Adj: [0x560d47ab5e50]:   store i64 %8, i64* %RBP.i, align 8
[0x560d47ac02f0]:   %22 = xor i64 %8, 16
[0x560d47ac0c20]:   %34 = lshr i64 %8, 63
[0x560d47b1e658]:   %9 = inttoptr i64 %8 to i64*
[0x560d47b2da30]:   %12 = icmp ult i64 %8, 16


Removing: [0x560d47ab2168]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560d47aee1d8]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x560d47aef570]:   %77 = add i64 %48, 8


Uprime Matches: [0x560d47ac12d0]:   %78 = add i64 %49, 8


Adj: [0x560d47ac2370]:   %41 = add i64 %10, 19


Removing: [0x560d47b34a08]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x560d47aee1d8]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x560d47aef570]:   %77 = add i64 %48, 8


Uprime Matches: [0x560d47ac12d0]:   %78 = add i64 %49, 8


Adj: [0x560d47ac2e50]:   %45 = add i64 %43, 5
[0x560d47b340e0]:   %44 = add i64 %43, -100


Removing: [0x560d47b1e4c8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x560d47aee2b8]:   %49 = load i64, i64* %RSP, align 8


Uprime : [0x560d47aef7f0]:   %80 = add i64 %49, 32


Uprime Matches: [0x560d47aca0e0]:   %81 = add i64 %50, 32


Adj: [0x560d47abe940]:   %8 = add i64 %7, -8
[0x560d47ac24d0]:   %40 = add i64 %7, -12
[0x560d47b31f00]:   %11 = add i64 %7, -24


Removing: [0x560d47b34678]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x560d47aee2b8]:   %49 = load i64, i64* %RSP, align 8


Uprime : [0x560d47aef7f0]:   %80 = add i64 %49, 32


Uprime Matches: [0x560d47aca0e0]:   %81 = add i64 %50, 32


Adj: [0x560d47ac2cf0]:   %47 = add i64 %46, -8


Removing: [0x560d47b2f768]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47ac3d50]:   %55 = and i32 %54, 255


Removing: [0x560d47b30228]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47b33530]:   %16 = and i32 %15, 255


Removing: [0x560d47b35df8]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47ac55d0]:   store i8 %68, i8* %33, align 1


Removing: [0x560d47b675c8]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1
[0x560d47ac50b0]:   %64 = and i8 %63, 1
[0x560d47b33640]:   %26 = and i8 %25, 1


Adj: [0x560d47b32510]:   store i8 %32, i8* %33, align 1


Removing: [0x560d47ac50b0]:   %64 = and i8 %63, 1
From the pot matches of: [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime : [0x560d47aee870]:   %58 = xor i8 %57, 1


Uprime Matches: [0x560d47ac0840]:   %20 = xor i8 %19, 1
[0x560d47ac3aa0]:   %59 = xor i8 %58, 1


Adj: [0x560d47ac66d0]:   store i8 %64, i8* %27, align 1


Removing: [0x560d47b33640]:   %26 = and i8 %25, 1
From the pot matches of: [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime : [0x560d47aee870]:   %58 = xor i8 %57, 1


Uprime Matches: [0x560d47ac0840]:   %20 = xor i8 %19, 1
[0x560d47ac3aa0]:   %59 = xor i8 %58, 1


Adj: [0x560d47b33a80]:   store i8 %26, i8* %27, align 1

Round: 1

Removing: [0x560d47b2e128]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1


Adj: [0x560d47b33640]:   %26 = and i8 %25, 1


Removing: [0x560d47b36b08]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1


Adj: [0x560d47ac50b0]:   %64 = and i8 %63, 1


Removing: [0x560d47b1e4c8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x560d47aedd88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x560d47aede00]:   %45 = add i64 %44, -8


Uprime Matches: [0x560d47ac2cf0]:   %47 = add i64 %46, -8


Adj: [0x560d47abe940]:   %8 = add i64 %7, -8
[0x560d47ac24d0]:   %40 = add i64 %7, -12
[0x560d47b31f00]:   %11 = add i64 %7, -24


Removing: [0x560d47b2e128]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1


Adj: [0x560d47b33640]:   %26 = and i8 %25, 1


Removing: [0x560d47b36b08]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1
[0x560d47ac3c00]:   %58 = and i8 %57, 1


Adj: [0x560d47ac50b0]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x560d47ae97a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	}

[0x560d47ae9820]:   %6 = add i64 %5, -8 {
	[0x560d47abe940]:  %8 = add i64 %7, -8
	}

[0x560d47ae9888]:   %7 = inttoptr i64 %6 to i64* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	}

[0x560d47ae9900]:   store i64 %3, i64* %7, align 8 {
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	}

[0x560d47ae9968]:   %8 = load i64, i64* %PC, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	}

[0x560d47ae9a70]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x560d47ae9b30]:   %9 = add i64 %5, -24 {
	[0x560d47b31f00]:  %11 = add i64 %7, -24
	}

[0x560d47ae9bb0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	}

[0x560d47aeae50]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	}

[0x560d47aeb4e0]:   %20 = xor i64 %6, 16 {
	[0x560d47ac02f0]:  %22 = xor i64 %8, 16
	}

[0x560d47aeb560]:   %21 = xor i64 %20, %9 {
	[0x560d47b330f0]:  %23 = xor i64 %22, %11
	}

[0x560d47aeb5e0]:   %22 = lshr i64 %21, 4 {
	[0x560d47ac01a0]:  %24 = lshr i64 %23, 4
	}

[0x560d47aeb648]:   %23 = trunc i64 %22 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	}

[0x560d47aeb6c0]:   %24 = and i8 %23, 1 {
	[0x560d47b33640]:  %26 = and i8 %25, 1
	}

[0x560d47aeb770]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560d47acc040]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x560d47aeb800]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	}

[0x560d47aebe90]:   %26 = icmp eq i64 %9, 0 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	}

[0x560d47aebef8]:   %27 = zext i1 %26 to i8 {
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aebfa0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x560d47ac70e0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x560d47aec030]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	}

[0x560d47aec6c0]:   %29 = lshr i64 %9, 63 {
	[0x560d47b33860]:  %31 = lshr i64 %11, 63
	}

[0x560d47aec728]:   %30 = trunc i64 %29 to i8 {
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aec7d0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x560d47ac36d0]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x560d47aec860]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	}

[0x560d47aecef0]:   %32 = lshr i64 %6, 63 {
	[0x560d47ac0c20]:  %34 = lshr i64 %8, 63
	}

[0x560d47aecf70]:   %33 = xor i64 %29, %32 {
	[0x560d47b32310]:  %35 = xor i64 %31, %34
	}

[0x560d47aecff0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x560d47ac1ce0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x560d47aed070]:   %35 = icmp eq i64 %34, 2 {
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	}

[0x560d47aed0d8]:   %36 = zext i1 %35 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	}

[0x560d47aed180]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x560d47ac3460]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x560d47aed210]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	}

[0x560d47aed8a0]:   store i64 2, i64* %RDI, align 8, !tbaa !1261 {
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	}

[0x560d47aed960]:   %38 = add i64 %5, -12 {
	[0x560d47ac24d0]:  %40 = add i64 %7, -12
	}

[0x560d47aeda20]:   %39 = add i64 %8, 19 {
	[0x560d47ac2370]:  %41 = add i64 %10, 19
	}

[0x560d47aedaa0]:   store i64 %39, i64* %PC, align 8 {
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	}

[0x560d47aedb08]:   %40 = inttoptr i64 %38 to i32* {
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	}

[0x560d47aedb80]:   store i32 0, i32* %40, align 4 {
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	}

[0x560d47aedbe8]:   %41 = load i64, i64* %PC, align 8 {
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	}

[0x560d47aedca0]:   %42 = add i64 %41, -100 {
	[0x560d47b340e0]:  %44 = add i64 %43, -100
	}

[0x560d47aedd20]:   %43 = add i64 %41, 5 {
	[0x560d47ac2e50]:  %45 = add i64 %43, 5
	}

[0x560d47aedd88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	}

[0x560d47aede00]:   %45 = add i64 %44, -8 {
	[0x560d47ac2cf0]:  %47 = add i64 %46, -8
	}

[0x560d47aede68]:   %46 = inttoptr i64 %45 to i64* {
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	}

[0x560d47aedee0]:   store i64 %43, i64* %46, align 8 {
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aedf60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	}

[0x560d47aedfe0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	}

[0x560d47aee110]:   %47 = tail call %struct.Memory* @sub_400500_func(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x560d47ac1f50]:  %call2_400564 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x560d47aee1d8]:   %48 = load i64, i64* %PC, align 8 {
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	}

[0x560d47aee250]:   store i64 0, i64* %RAX, align 8, !tbaa !1261 {
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	}

[0x560d47aee2b8]:   %49 = load i64, i64* %RSP, align 8 {
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	}

[0x560d47aee330]:   %50 = add i64 %49, 16 {
	[0x560d47ac2780]:  %51 = add i64 %50, 16
	}

[0x560d47aee3b0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	}

[0x560d47aee470]:   %51 = icmp ugt i64 %49, -17 {
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	}

[0x560d47aee4d8]:   %52 = zext i1 %51 to i8 {
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	}

[0x560d47aee550]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	}

[0x560d47aee5b8]:   %53 = trunc i64 %50 to i32 {
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	}

[0x560d47aee630]:   %54 = and i32 %53, 255 {
	[0x560d47ac3d50]:  %55 = and i32 %54, 255
	}

[0x560d47aee6b0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x560d47b48e40]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x560d47aee778]:   %56 = trunc i32 %55 to i8 {
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	}

[0x560d47aee7f0]:   %57 = and i8 %56, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	}

[0x560d47aee870]:   %58 = xor i8 %57, 1 {
	[0x560d47ac0840]:  %20 = xor i8 %19, 1
	[0x560d47ac3aa0]:  %59 = xor i8 %58, 1
	}

[0x560d47aee8f0]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	}

[0x560d47aee970]:   %59 = xor i64 %49, 16 {
	[0x560d47b34230]:  %60 = xor i64 %50, 16
	}

[0x560d47aee9f0]:   %60 = xor i64 %59, %50 {
	[0x560d47ac42e0]:  %61 = xor i64 %60, %51
	}

[0x560d47aeea70]:   %61 = lshr i64 %60, 4 {
	[0x560d47ac6920]:  %62 = lshr i64 %61, 4
	}

[0x560d47aeead8]:   %62 = trunc i64 %61 to i8 {
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	}

[0x560d47aeeb50]:   %63 = and i8 %62, 1 {
	[0x560d47ac50b0]:  %64 = and i8 %63, 1
	}

[0x560d47aeebd0]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	}

[0x560d47aeec50]:   %64 = icmp eq i64 %50, 0 {
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	}

[0x560d47aeecb8]:   %65 = zext i1 %64 to i8 {
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	}

[0x560d47aeed30]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	}

[0x560d47aeedb0]:   %66 = lshr i64 %50, 63 {
	[0x560d47ac4b60]:  %67 = lshr i64 %51, 63
	}

[0x560d47aeee18]:   %67 = trunc i64 %66 to i8 {
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	}

[0x560d47aeee90]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	}

[0x560d47aeef10]:   %68 = lshr i64 %49, 63 {
	[0x560d47ac5200]:  %69 = lshr i64 %50, 63
	}

[0x560d47aeef90]:   %69 = xor i64 %66, %68 {
	[0x560d47ac9990]:  %70 = xor i64 %67, %69
	}

[0x560d47aef010]:   %70 = add nuw nsw i64 %69, %66 {
	[0x560d47ac9830]:  %71 = add nuw nsw i64 %70, %67
	}

[0x560d47aef090]:   %71 = icmp eq i64 %70, 2 {
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	}

[0x560d47aef0f8]:   %72 = zext i1 %71 to i8 {
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	}

[0x560d47aef170]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	}

[0x560d47aef1f0]:   %73 = add i64 %48, 7 {
	[0x560d47ac7460]:  %74 = add i64 %49, 7
	}

[0x560d47aef270]:   store i64 %73, i64* %PC, align 8 {
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	}

[0x560d47aef330]:   %74 = add i64 %49, 24 {
	[0x560d47ac6ca0]:  %75 = add i64 %50, 24
	}

[0x560d47aef398]:   %75 = inttoptr i64 %50 to i64* {
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47aef3f8]:   %76 = load i64, i64* %75, align 8 {
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	}

[0x560d47aef470]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x560d47aef4f0]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	}

[0x560d47aef570]:   %77 = add i64 %48, 8 {
	[0x560d47ac12d0]:  %78 = add i64 %49, 8
	}

[0x560d47aef5f0]:   store i64 %77, i64* %PC, align 8 {
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	}

[0x560d47aef658]:   %78 = inttoptr i64 %74 to i64* {
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	}

[0x560d47aef6b8]:   %79 = load i64, i64* %78, align 8 {
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aef730]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	}

[0x560d47aef7f0]:   %80 = add i64 %49, 32 {
	[0x560d47aca0e0]:  %81 = add i64 %50, 32
	}

[0x560d47aef870]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	}

[0x560d47aef8d8]:   ret %struct.Memory* %47 {
	[0x560d47b38838]:  ret %struct.Memory.32* %call2_400564
	}

[0x560d47afd150]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x560d47b22490]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x560d47b4b4a0]:   %10 = icmp ult i64 %6, 16 {
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47b4b508]:   %11 = zext i1 %10 to i8 {
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	}

[0x560d47b4b5b0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x560d47c08c80]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x560d47b4b640]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	}

[0x560d47b4b6a8]:   %13 = trunc i64 %9 to i32 {
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	}

[0x560d47b4b720]:   %14 = and i32 %13, 255 {
	[0x560d47b33530]:  %16 = and i32 %15, 255
	}

[0x560d47b4b7e0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x560d47b05810]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x560d47b4b858]:   %16 = trunc i32 %15 to i8 {
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	}

[0x560d47b4b8d0]:   %17 = and i8 %16, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	}

[0x560d47b4b950]:   %18 = xor i8 %17, 1 {
	[0x560d47ac0840]:  %20 = xor i8 %19, 1
	[0x560d47ac3aa0]:  %59 = xor i8 %58, 1
	}

[0x560d47b4ba00]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x560d47b689d0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x560d47b56750]: %struct.State* %0 {
	[0x560d47ac2420]:%struct.State.1* %0
	}

[0x560d47b56790]: i64 %1 {
	[0x560d47b33dc0]:i64 %1
	}

[0x560d47b567d0]: %struct.Memory* %2 {
	[0x560d47ac2130]:%struct.Memory.32* %2
	}

[0x560d47b56988]:   %3 = load i64, i64* %RBP, align 8 {
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x560d47b56a60]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x560d47b1f020]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x560d47b56b70]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560d47b1f1b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x560d47b56c80]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560d47b1f3a0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x560d47b56d30]:   %4 = add i64 %1, 1 {
	[0x560d47b7a720]:  %5 = add i64 %1, 1
	}

[0x560d47b56e00]:   store i64 %4, i64* %PC, align 8 {
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	}

[0x560d47b81310]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x560d47b1ee50]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x560d47b56810]: block_400550 {
	[0x560d47abcc60]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x560d47ac3aa0]:   %59 = xor i8 %58, 1
From the pot matches of: [0x560d47b4b950]:   %18 = xor i8 %17, 1


Uprime : [0x560d47aeae50]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x560d47b33200]:   store i8 %20, i8* %21, align 1


Adj: [0x560d47ac3950]:   store i8 %59, i8* %21, align 1


Removing: [0x560d47ac0840]:   %20 = xor i8 %19, 1
From the pot matches of: [0x560d47aee870]:   %58 = xor i8 %57, 1


Uprime : [0x560d47aee8f0]:   store i8 %58, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x560d47ac3950]:   store i8 %59, i8* %21, align 1


Adj: [0x560d47b33200]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x560d47ac3c00]:   %58 = and i8 %57, 1
From the pot matches of: [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime : [0x560d47b4b950]:   %18 = xor i8 %17, 1


Uprime Matches: [0x560d47ac0840]:   %20 = xor i8 %19, 1


Adj: [0x560d47ac3aa0]:   %59 = xor i8 %58, 1


Removing: [0x560d47ac09a0]:   %19 = and i8 %18, 1
From the pot matches of: [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime : [0x560d47aee870]:   %58 = xor i8 %57, 1


Uprime Matches: [0x560d47ac3aa0]:   %59 = xor i8 %58, 1


Adj: [0x560d47ac0840]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x560d47b350e8]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x560d47b4b858]:   %16 = trunc i32 %15 to i8


Uprime : [0x560d47b4b8d0]:   %17 = and i8 %16, 1


Uprime Matches: [0x560d47ac09a0]:   %19 = and i8 %18, 1


Adj: [0x560d47ac3c00]:   %58 = and i8 %57, 1


Removing: [0x560d47b2e558]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x560d47aee778]:   %56 = trunc i32 %55 to i8


Uprime : [0x560d47aee7f0]:   %57 = and i8 %56, 1


Uprime Matches: [0x560d47ac3c00]:   %58 = and i8 %57, 1


Adj: [0x560d47ac09a0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x560d47ae97a8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47b1e4c8]:  %7 = load i64, i64* %6, align 8
	}

[0x560d47ae9820]:   %6 = add i64 %5, -8 {
	[0x560d47abe940]:  %8 = add i64 %7, -8
	}

[0x560d47ae9888]:   %7 = inttoptr i64 %6 to i64* {
	[0x560d47b1e658]:  %9 = inttoptr i64 %8 to i64*
	}

[0x560d47ae9900]:   store i64 %3, i64* %7, align 8 {
	[0x560d47ab6250]:  store i64 %4, i64* %9, align 8
	}

[0x560d47ae9968]:   %8 = load i64, i64* %PC, align 8 {
	[0x560d47ab2168]:  %10 = load i64, i64* %3, align 8
	}

[0x560d47ae9a70]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x560d47ab5e50]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x560d47ae9b30]:   %9 = add i64 %5, -24 {
	[0x560d47b31f00]:  %11 = add i64 %7, -24
	}

[0x560d47ae9bb0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47b30320]:  store i64 %11, i64* %6, align 8
	}

[0x560d47aeae50]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x560d47b33200]:  store i8 %20, i8* %21, align 1
	}

[0x560d47aeb4e0]:   %20 = xor i64 %6, 16 {
	[0x560d47ac02f0]:  %22 = xor i64 %8, 16
	}

[0x560d47aeb560]:   %21 = xor i64 %20, %9 {
	[0x560d47b330f0]:  %23 = xor i64 %22, %11
	}

[0x560d47aeb5e0]:   %22 = lshr i64 %21, 4 {
	[0x560d47ac01a0]:  %24 = lshr i64 %23, 4
	}

[0x560d47aeb648]:   %23 = trunc i64 %22 to i8 {
	[0x560d47b2e128]:  %25 = trunc i64 %24 to i8
	}

[0x560d47aeb6c0]:   %24 = and i8 %23, 1 {
	[0x560d47b33640]:  %26 = and i8 %25, 1
	}

[0x560d47aeb770]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560d47acc040]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x560d47aeb800]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x560d47b33a80]:  store i8 %26, i8* %27, align 1
	}

[0x560d47aebe90]:   %26 = icmp eq i64 %9, 0 {
	[0x560d47ac1b90]:  %28 = icmp eq i64 %11, 0
	}

[0x560d47aebef8]:   %27 = zext i1 %26 to i8 {
	[0x560d47b67fa8]:  %29 = zext i1 %28 to i8
	}

[0x560d47aebfa0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x560d47ac70e0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x560d47aec030]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x560d47ac1a30]:  store i8 %29, i8* %30, align 1
	}

[0x560d47aec6c0]:   %29 = lshr i64 %9, 63 {
	[0x560d47b33860]:  %31 = lshr i64 %11, 63
	}

[0x560d47aec728]:   %30 = trunc i64 %29 to i8 {
	[0x560d47b675c8]:  %32 = trunc i64 %31 to i8
	}

[0x560d47aec7d0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x560d47ac36d0]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x560d47aec860]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x560d47b32510]:  store i8 %32, i8* %33, align 1
	}

[0x560d47aecef0]:   %32 = lshr i64 %6, 63 {
	[0x560d47ac0c20]:  %34 = lshr i64 %8, 63
	}

[0x560d47aecf70]:   %33 = xor i64 %29, %32 {
	[0x560d47b32310]:  %35 = xor i64 %31, %34
	}

[0x560d47aecff0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x560d47ac1ce0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x560d47aed070]:   %35 = icmp eq i64 %34, 2 {
	[0x560d47ac2630]:  %37 = icmp eq i64 %36, 2
	}

[0x560d47aed0d8]:   %36 = zext i1 %35 to i8 {
	[0x560d47b08f98]:  %38 = zext i1 %37 to i8
	}

[0x560d47aed180]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x560d47ac3460]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x560d47aed210]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x560d47b33fd0]:  store i8 %38, i8* %39, align 1
	}

[0x560d47aed8a0]:   store i64 2, i64* %RDI, align 8, !tbaa !1261 {
	[0x560d47b33ec0]:  store i64 2, i64* %RDI.i, align 8
	}

[0x560d47aed960]:   %38 = add i64 %5, -12 {
	[0x560d47ac24d0]:  %40 = add i64 %7, -12
	}

[0x560d47aeda20]:   %39 = add i64 %8, 19 {
	[0x560d47ac2370]:  %41 = add i64 %10, 19
	}

[0x560d47aedaa0]:   store i64 %39, i64* %PC, align 8 {
	[0x560d47b33ca0]:  store i64 %41, i64* %3, align 8
	}

[0x560d47aedb08]:   %40 = inttoptr i64 %38 to i32* {
	[0x560d47b31318]:  %42 = inttoptr i64 %40 to i32*
	}

[0x560d47aedb80]:   store i32 0, i32* %40, align 4 {
	[0x560d47ac1e40]:  store i32 0, i32* %42, align 4
	}

[0x560d47aedbe8]:   %41 = load i64, i64* %PC, align 8 {
	[0x560d47b34a08]:  %43 = load i64, i64* %3, align 8
	}

[0x560d47aedca0]:   %42 = add i64 %41, -100 {
	[0x560d47b340e0]:  %44 = add i64 %43, -100
	}

[0x560d47aedd20]:   %43 = add i64 %41, 5 {
	[0x560d47ac2e50]:  %45 = add i64 %43, 5
	}

[0x560d47aedd88]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47b34678]:  %46 = load i64, i64* %6, align 8
	}

[0x560d47aede00]:   %45 = add i64 %44, -8 {
	[0x560d47ac2cf0]:  %47 = add i64 %46, -8
	}

[0x560d47aede68]:   %46 = inttoptr i64 %45 to i64* {
	[0x560d47b34548]:  %48 = inttoptr i64 %47 to i64*
	}

[0x560d47aedee0]:   store i64 %43, i64* %46, align 8 {
	[0x560d47b34410]:  store i64 %45, i64* %48, align 8
	}

[0x560d47aedf60]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac2a30]:  store i64 %47, i64* %6, align 8
	}

[0x560d47aedfe0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x560d47b34300]:  store i64 %44, i64* %3, align 8
	}

[0x560d47aee110]:   %47 = tail call %struct.Memory* @sub_400500_func(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x560d47ac1f50]:  %call2_400564 = tail call %struct.Memory.32* @sub_400500.func(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x560d47aee1d8]:   %48 = load i64, i64* %PC, align 8 {
	[0x560d47ac0aa8]:  %49 = load i64, i64* %3, align 8
	}

[0x560d47aee250]:   store i64 0, i64* %RAX, align 8, !tbaa !1261 {
	[0x560d47ac28e0]:  store i64 0, i64* %RAX.i, align 8
	}

[0x560d47aee2b8]:   %49 = load i64, i64* %RSP, align 8 {
	[0x560d47ab54f8]:  %50 = load i64, i64* %6, align 8
	}

[0x560d47aee330]:   %50 = add i64 %49, 16 {
	[0x560d47ac2780]:  %51 = add i64 %50, 16
	}

[0x560d47aee3b0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac2ff0]:  store i64 %51, i64* %6, align 8
	}

[0x560d47aee470]:   %51 = icmp ugt i64 %49, -17 {
	[0x560d47ac40e0]:  %52 = icmp ugt i64 %50, -17
	}

[0x560d47aee4d8]:   %52 = zext i1 %51 to i8 {
	[0x560d47b31728]:  %53 = zext i1 %52 to i8
	}

[0x560d47aee550]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x560d47ac3eb0]:  store i8 %53, i8* %14, align 1
	}

[0x560d47aee5b8]:   %53 = trunc i64 %50 to i32 {
	[0x560d47b2f768]:  %54 = trunc i64 %51 to i32
	}

[0x560d47aee630]:   %54 = and i32 %53, 255 {
	[0x560d47ac3d50]:  %55 = and i32 %54, 255
	}

[0x560d47aee6b0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x560d47b48e40]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x560d47aee778]:   %56 = trunc i32 %55 to i8 {
	[0x560d47b350e8]:  %57 = trunc i32 %56 to i8
	}

[0x560d47aee7f0]:   %57 = and i8 %56, 1 {
	[0x560d47ac3c00]:  %58 = and i8 %57, 1
	}

[0x560d47aee870]:   %58 = xor i8 %57, 1 {
	[0x560d47ac3aa0]:  %59 = xor i8 %58, 1
	}

[0x560d47aee8f0]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x560d47ac3950]:  store i8 %59, i8* %21, align 1
	}

[0x560d47aee970]:   %59 = xor i64 %49, 16 {
	[0x560d47b34230]:  %60 = xor i64 %50, 16
	}

[0x560d47aee9f0]:   %60 = xor i64 %59, %50 {
	[0x560d47ac42e0]:  %61 = xor i64 %60, %51
	}

[0x560d47aeea70]:   %61 = lshr i64 %60, 4 {
	[0x560d47ac6920]:  %62 = lshr i64 %61, 4
	}

[0x560d47aeead8]:   %62 = trunc i64 %61 to i8 {
	[0x560d47b36b08]:  %63 = trunc i64 %62 to i8
	}

[0x560d47aeeb50]:   %63 = and i8 %62, 1 {
	[0x560d47ac50b0]:  %64 = and i8 %63, 1
	}

[0x560d47aeebd0]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x560d47ac66d0]:  store i8 %64, i8* %27, align 1
	}

[0x560d47aeec50]:   %64 = icmp eq i64 %50, 0 {
	[0x560d47ac4d80]:  %65 = icmp eq i64 %51, 0
	}

[0x560d47aeecb8]:   %65 = zext i1 %64 to i8 {
	[0x560d47b368a8]:  %66 = zext i1 %65 to i8
	}

[0x560d47aeed30]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x560d47ac4c70]:  store i8 %66, i8* %30, align 1
	}

[0x560d47aeedb0]:   %66 = lshr i64 %50, 63 {
	[0x560d47ac4b60]:  %67 = lshr i64 %51, 63
	}

[0x560d47aeee18]:   %67 = trunc i64 %66 to i8 {
	[0x560d47b35df8]:  %68 = trunc i64 %67 to i8
	}

[0x560d47aeee90]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x560d47ac55d0]:  store i8 %68, i8* %33, align 1
	}

[0x560d47aeef10]:   %68 = lshr i64 %49, 63 {
	[0x560d47ac5200]:  %69 = lshr i64 %50, 63
	}

[0x560d47aeef90]:   %69 = xor i64 %66, %68 {
	[0x560d47ac9990]:  %70 = xor i64 %67, %69
	}

[0x560d47aef010]:   %70 = add nuw nsw i64 %69, %66 {
	[0x560d47ac9830]:  %71 = add nuw nsw i64 %70, %67
	}

[0x560d47aef090]:   %71 = icmp eq i64 %70, 2 {
	[0x560d47ac96d0]:  %72 = icmp eq i64 %71, 2
	}

[0x560d47aef0f8]:   %72 = zext i1 %71 to i8 {
	[0x560d47b35cc8]:  %73 = zext i1 %72 to i8
	}

[0x560d47aef170]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x560d47ac7c20]:  store i8 %73, i8* %39, align 1
	}

[0x560d47aef1f0]:   %73 = add i64 %48, 7 {
	[0x560d47ac7460]:  %74 = add i64 %49, 7
	}

[0x560d47aef270]:   store i64 %73, i64* %PC, align 8 {
	[0x560d47ac4fe0]:  store i64 %74, i64* %3, align 8
	}

[0x560d47aef330]:   %74 = add i64 %49, 24 {
	[0x560d47ac6ca0]:  %75 = add i64 %50, 24
	}

[0x560d47aef398]:   %75 = inttoptr i64 %50 to i64* {
	[0x560d47b35b98]:  %76 = inttoptr i64 %51 to i64*
	}

[0x560d47aef3f8]:   %76 = load i64, i64* %75, align 8 {
	[0x560d47b356d8]:  %77 = load i64, i64* %76, align 8
	}

[0x560d47aef470]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x560d47ac9af0]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x560d47aef4f0]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac1420]:  store i64 %75, i64* %6, align 8
	}

[0x560d47aef570]:   %77 = add i64 %48, 8 {
	[0x560d47ac12d0]:  %78 = add i64 %49, 8
	}

[0x560d47aef5f0]:   store i64 %77, i64* %PC, align 8 {
	[0x560d47ac10f0]:  store i64 %78, i64* %3, align 8
	}

[0x560d47aef658]:   %78 = inttoptr i64 %74 to i64* {
	[0x560d47b35348]:  %79 = inttoptr i64 %75 to i64*
	}

[0x560d47aef6b8]:   %79 = load i64, i64* %78, align 8 {
	[0x560d47b36c38]:  %80 = load i64, i64* %79, align 8
	}

[0x560d47aef730]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x560d47ac1010]:  store i64 %80, i64* %3, align 8
	}

[0x560d47aef7f0]:   %80 = add i64 %49, 32 {
	[0x560d47aca0e0]:  %81 = add i64 %50, 32
	}

[0x560d47aef870]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x560d47ac9e20]:  store i64 %81, i64* %6, align 8
	}

[0x560d47aef8d8]:   ret %struct.Memory* %47 {
	[0x560d47b38838]:  ret %struct.Memory.32* %call2_400564
	}

[0x560d47afd150]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x560d47b22490]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x560d47b4b4a0]:   %10 = icmp ult i64 %6, 16 {
	[0x560d47b2da30]:  %12 = icmp ult i64 %8, 16
	}

[0x560d47b4b508]:   %11 = zext i1 %10 to i8 {
	[0x560d47b2ff58]:  %13 = zext i1 %12 to i8
	}

[0x560d47b4b5b0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x560d47c08c80]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x560d47b4b640]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x560d47abecd0]:  store i8 %13, i8* %14, align 1
	}

[0x560d47b4b6a8]:   %13 = trunc i64 %9 to i32 {
	[0x560d47b30228]:  %15 = trunc i64 %11 to i32
	}

[0x560d47b4b720]:   %14 = and i32 %13, 255 {
	[0x560d47b33530]:  %16 = and i32 %15, 255
	}

[0x560d47b4b7e0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x560d47b05810]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x560d47b4b858]:   %16 = trunc i32 %15 to i8 {
	[0x560d47b2e558]:  %18 = trunc i32 %17 to i8
	}

[0x560d47b4b8d0]:   %17 = and i8 %16, 1 {
	[0x560d47ac09a0]:  %19 = and i8 %18, 1
	}

[0x560d47b4b950]:   %18 = xor i8 %17, 1 {
	[0x560d47ac0840]:  %20 = xor i8 %19, 1
	}

[0x560d47b4ba00]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x560d47b689d0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x560d47b56750]: %struct.State* %0 {
	[0x560d47ac2420]:%struct.State.1* %0
	}

[0x560d47b56790]: i64 %1 {
	[0x560d47b33dc0]:i64 %1
	}

[0x560d47b567d0]: %struct.Memory* %2 {
	[0x560d47ac2130]:%struct.Memory.32* %2
	}

[0x560d47b56988]:   %3 = load i64, i64* %RBP, align 8 {
	[0x560d47b1e2f8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x560d47b56a60]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x560d47b1f020]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x560d47b56b70]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560d47b1f1b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x560d47b56c80]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560d47b1f3a0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x560d47b56d30]:   %4 = add i64 %1, 1 {
	[0x560d47b7a720]:  %5 = add i64 %1, 1
	}

[0x560d47b56e00]:   store i64 %4, i64* %PC, align 8 {
	[0x560d47abea90]:  store i64 %5, i64* %3, align 8
	}

[0x560d47b81310]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x560d47b1ee50]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x560d47b56810]: block_400550 {
	[0x560d47abcc60]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
