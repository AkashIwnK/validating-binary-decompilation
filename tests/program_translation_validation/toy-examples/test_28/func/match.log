Writing '/tmp/tmp4bdhy_1s.dot'...
Writing '/tmp/tmp4bdhy_1s.dot':Done

Reading LLVM: /tmp/tmpykeujz9r-query.ll
Extracting function [func] from /tmp/tmpykeujz9r-query.ll
Dot file generated!
Writing '/tmp/tmpl0k5x_2w.dot'...
Writing '/tmp/tmpl0k5x_2w.dot':Done

Reading LLVM: /tmp/tmpgl1obza7-target.ll
Extracting function [func] from /tmp/tmpgl1obza7-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 49 %EDI.i = bitcast %union.anon* %40 to i32*
- 50 %41 = add i64 %7, -12
- 51 %42 = load i32, i32* %EDI.i, align 4
- 52 %43 = add i64 %10, 10
- 53 store i64 %43, i64* %3, align 8
- 54 %44 = inttoptr i64 %41 to i32*
- 55 store i32 %42, i32* %44, align 4
- 56 %45 = load i64, i64* %RBP.i, align 8
- 57 %46 = add i64 %45, -8
- 58 %47 = load i64, i64* %3, align 8
- 59 %48 = add i64 %47, 7
- 60 store i64 %48, i64* %3, align 8
- 61 %49 = inttoptr i64 %46 to i32*
- 62 store i32 0, i32* %49, align 4
- 63 %50 = load i64, i64* %RBP.i, align 8
- 64 %51 = add i64 %50, -8
- 65 %52 = load i64, i64* %3, align 8
- 66 %53 = add i64 %52, 7
- 67 store i64 %53, i64* %3, align 8
- 68 %54 = inttoptr i64 %51 to i32*
- 69 store i32 0, i32* %54, align 4
- 70 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 71 %RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
- 72 %EAX.i23 = bitcast %union.anon* %55 to i32*
- 73 %RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
- 74 %AL.i = bitcast %union.anon* %55 to i8*
- 75 %.pre = load i64, i64* %3, align 8
- 76 \<badref\> = br label %block_.L_400539
- 77 %56 = phi i64 [ %.pre, %entry ], [ %137, %block_400545 ]
- 78 %MEMORY.0 = phi %struct.Memory* [ %2, %entry ], [ %99, %block_400545 ]
- 79 %57 = load i64, i64* %RBP.i, align 8
- 80 %58 = add i64 %57, -8
- 81 %59 = add i64 %56, 3
- 82 store i64 %59, i64* %3, align 8
- 83 %60 = inttoptr i64 %58 to i32*
- 84 %61 = load i32, i32* %60, align 4
- 85 %62 = zext i32 %61 to i64
- 86 store i64 %62, i64* %RAX.i26, align 8
- 87 %63 = add i64 %57, -4
- 88 %64 = add i64 %56, 6
- 89 store i64 %64, i64* %3, align 8
- 90 %65 = inttoptr i64 %63 to i32*
- 91 %66 = load i32, i32* %65, align 4
- 92 %67 = sub i32 %61, %66
- 93 %68 = icmp ult i32 %61, %66
- 94 %69 = zext i1 %68 to i8
- 95 store i8 %69, i8* %14, align 1
- 96 %70 = and i32 %67, 255
- 97 %71 = tail call i32 @llvm.ctpop.i32(i32 %70)
- 98 %72 = trunc i32 %71 to i8
- 99 %73 = and i8 %72, 1
- 100 %74 = xor i8 %73, 1
- 101 store i8 %74, i8* %21, align 1
- 102 %75 = xor i32 %66, %61
- 103 %76 = xor i32 %75, %67
- 104 %77 = lshr i32 %76, 4
- 105 %78 = trunc i32 %77 to i8
- 106 %79 = and i8 %78, 1
- 107 store i8 %79, i8* %27, align 1
- 108 %80 = icmp eq i32 %67, 0
- 109 %81 = zext i1 %80 to i8
- 110 store i8 %81, i8* %30, align 1
- 111 %82 = lshr i32 %67, 31
- 112 %83 = trunc i32 %82 to i8
- 113 store i8 %83, i8* %33, align 1
- 114 %84 = lshr i32 %61, 31
- 115 %85 = lshr i32 %66, 31
- 116 %86 = xor i32 %85, %84
- 117 %87 = xor i32 %82, %84
- 118 %88 = add nuw nsw i32 %87, %86
- 119 %89 = icmp eq i32 %88, 2
- 120 %90 = zext i1 %89 to i8
- 121 store i8 %90, i8* %39, align 1
- 122 %91 = icmp ne i8 %83, 0
- 123 %92 = xor i1 %91, %89
- 124 %.v = select i1 %92, i64 12, i64 46
- 125 %93 = add i64 %56, %.v
- 126 store i64 %93, i64* %3, align 8
- 127 \<badref\> = br i1 %92, label %block_400545, label %block_.L_400567
- 128 store i64 add (i64 ptrtoint (%G__0x400624_type* @G__0x400624 to i64), i64 204), i64* %RDI.i, align 8
- 129 store i8 0, i8* %AL.i, align 1
- 130 %94 = add i64 %93, -293
- 131 %95 = add i64 %93, 17
- 132 %96 = load i64, i64* %6, align 8
- 133 %97 = add i64 %96, -8
- 134 %98 = inttoptr i64 %97 to i64*
- 135 store i64 %95, i64* %98, align 8
- 136 store i64 %97, i64* %6, align 8
- 137 store i64 %94, i64* %3, align 8
- 138 %99 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.0)
- 139 %100 = load i64, i64* %RBP.i, align 8
- 140 %101 = add i64 %100, -12
- 141 %102 = load i32, i32* %EAX.i23, align 4
- 142 %103 = load i64, i64* %3, align 8
- 143 %104 = add i64 %103, 3
- 144 store i64 %104, i64* %3, align 8
- 145 %105 = inttoptr i64 %101 to i32*
- 146 store i32 %102, i32* %105, align 4
- 147 %106 = load i64, i64* %RBP.i, align 8
- 148 %107 = add i64 %106, -8
- 149 %108 = load i64, i64* %3, align 8
- 150 %109 = add i64 %108, 3
- 151 store i64 %109, i64* %3, align 8
- 152 %110 = inttoptr i64 %107 to i32*
- 153 %111 = load i32, i32* %110, align 4
- 154 %112 = add i32 %111, 1
- 155 %113 = zext i32 %112 to i64
- 156 store i64 %113, i64* %RAX.i26, align 8
- 157 %114 = icmp eq i32 %111, -1
- 158 %115 = icmp eq i32 %112, 0
- 159 %116 = or i1 %114, %115
- 160 %117 = zext i1 %116 to i8
- 161 store i8 %117, i8* %14, align 1
- 162 %118 = and i32 %112, 255
- 163 %119 = tail call i32 @llvm.ctpop.i32(i32 %118)
- 164 %120 = trunc i32 %119 to i8
- 165 %121 = and i8 %120, 1
- 166 %122 = xor i8 %121, 1
- 167 store i8 %122, i8* %21, align 1
- 168 %123 = xor i32 %112, %111
- 169 %124 = lshr i32 %123, 4
- 170 %125 = trunc i32 %124 to i8
- 171 %126 = and i8 %125, 1
- 172 store i8 %126, i8* %27, align 1
- 173 %127 = zext i1 %115 to i8
- 174 store i8 %127, i8* %30, align 1
- 175 %128 = lshr i32 %112, 31
- 176 %129 = trunc i32 %128 to i8
- 177 store i8 %129, i8* %33, align 1
- 178 %130 = lshr i32 %111, 31
- 179 %131 = xor i32 %128, %130
- 180 %132 = add nuw nsw i32 %131, %128
- 181 %133 = icmp eq i32 %132, 2
- 182 %134 = zext i1 %133 to i8
- 183 store i8 %134, i8* %39, align 1
- 184 %135 = add i64 %108, 9
- 185 store i64 %135, i64* %3, align 8
- 186 store i32 %112, i32* %110, align 4
- 187 %136 = load i64, i64* %3, align 8
- 188 %137 = add i64 %136, -41
- 189 store i64 %137, i64* %3, align 8
- 190 \<badref\> = br label %block_.L_400539
- 191 %138 = load i64, i64* %6, align 8
- 192 %139 = add i64 %138, 16
- 193 store i64 %139, i64* %6, align 8
- 194 %140 = icmp ugt i64 %138, -17
- 195 %141 = zext i1 %140 to i8
- 196 store i8 %141, i8* %14, align 1
- 197 %142 = trunc i64 %139 to i32
- 198 %143 = and i32 %142, 255
- 199 %144 = tail call i32 @llvm.ctpop.i32(i32 %143)
- 200 %145 = trunc i32 %144 to i8
- 201 %146 = and i8 %145, 1
- 202 %147 = xor i8 %146, 1
- 203 store i8 %147, i8* %21, align 1
- 204 %148 = xor i64 %138, 16
- 205 %149 = xor i64 %148, %139
- 206 %150 = lshr i64 %149, 4
- 207 %151 = trunc i64 %150 to i8
- 208 %152 = and i8 %151, 1
- 209 store i8 %152, i8* %27, align 1
- 210 %153 = icmp eq i64 %139, 0
- 211 %154 = zext i1 %153 to i8
- 212 store i8 %154, i8* %30, align 1
- 213 %155 = lshr i64 %139, 63
- 214 %156 = trunc i64 %155 to i8
- 215 store i8 %156, i8* %33, align 1
- 216 %157 = lshr i64 %138, 63
- 217 %158 = xor i64 %155, %157
- 218 %159 = add nuw nsw i64 %158, %155
- 219 %160 = icmp eq i64 %159, 2
- 220 %161 = zext i1 %160 to i8
- 221 store i8 %161, i8* %39, align 1
- 222 %162 = add i64 %93, 5
- 223 store i64 %162, i64* %3, align 8
- 224 %163 = add i64 %138, 24
- 225 %164 = inttoptr i64 %139 to i64*
- 226 %165 = load i64, i64* %164, align 8
- 227 store i64 %165, i64* %RBP.i, align 8
- 228 store i64 %163, i64* %6, align 8
- 229 %166 = add i64 %93, 6
- 230 store i64 %166, i64* %3, align 8
- 231 %167 = inttoptr i64 %163 to i64*
- 232 %168 = load i64, i64* %167, align 8
- 233 store i64 %168, i64* %3, align 8
- 234 %169 = add i64 %138, 32
- 235 store i64 %169, i64* %6, align 8
- 236 \<badref\> = ret %struct.Memory* %MEMORY.0
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbc4a96a8>, {0: {0}, 1: {9}, 2: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 3: {11, 149}, 4: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 5: {8}, 6: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 7: {128, 69, 14, 143, 189, 62}, 8: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 9: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 10: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 11: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 12: {19}, 13: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 14: {21}, 15: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 16: {23}, 17: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 18: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 19: {205, 26, 84, 157}, 20: {133, 206, 85, 27, 158}, 21: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 22: {160, 37, 166, 208, 87, 215, 29, 94}, 23: {88, 161, 209, 30}, 24: {31}, 25: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 26: {33, 90}, 27: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 28: {164, 35, 92, 213}, 29: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 30: {160, 37, 166, 208, 87, 215, 29, 94}, 31: {38}, 32: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 33: {96, 217, 231, 40, 202, 153}, 34: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 35: {42}, 36: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 37: {48, 99, 44, 102}, 38: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 39: {46}, 40: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 41: {48, 99, 44, 102}, 42: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 43: {227, 104, 234, 175, 50}, 44: {176, 105, 51, 228}, 45: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 46: {53}, 47: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 48: {4}, 49: {2, 3, 5}, 50: {135, 55}, 51: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 52: {57}, 53: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 54: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 55: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 56: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 57: {128, 69, 14, 143, 189, 62}, 58: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 59: {64, 71}, 60: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 61: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 62: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 63: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 64: {128, 69, 14, 143, 189, 62}, 65: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 66: {64, 71}, 67: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 68: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 69: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 70: {1}, 71: {6, 7}, 72: {2, 3, 5}, 73: {6, 7}, 74: {2, 3, 5}, 75: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 76: {185, 76}, 77: {186, 187}, 78: {186, 187}, 79: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 80: {128, 69, 14, 143, 189, 62}, 81: {145, 138, 190}, 82: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 83: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 84: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 85: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 86: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 87: {196}, 88: {115, 197}, 89: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 90: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 91: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 92: {201}, 93: {96, 217, 231, 40, 202, 153}, 94: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 95: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 96: {205, 26, 84, 157}, 97: {133, 206, 85, 27, 158}, 98: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 99: {160, 37, 166, 208, 87, 215, 29, 94}, 100: {88, 161, 209, 30}, 101: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 102: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 103: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 104: {164, 35, 92, 213}, 105: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 106: {160, 37, 166, 208, 87, 215, 29, 94}, 107: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 108: {96, 217, 231, 40, 202, 153}, 109: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 110: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 111: {224, 170, 173, 220, 223}, 112: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 113: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 114: {224, 170, 173, 220, 223}, 115: {224, 170, 173, 220, 223}, 116: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 117: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 118: {227, 104, 234, 175, 50}, 119: {176, 105, 51, 228}, 120: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 121: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 122: {96, 217, 231, 40, 202, 153}, 123: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 124: {233}, 125: {227, 104, 234, 175, 50}, 126: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 127: {236}, 128: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 129: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 130: {125}, 131: {126}, 132: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 133: {128, 69, 14, 143, 189, 62}, 134: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 135: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 136: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 137: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 138: {133, 206, 85, 27, 158}, 139: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 140: {135, 55}, 141: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 142: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 143: {145, 138, 190}, 144: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 145: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 146: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 147: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 148: {128, 69, 14, 143, 189, 62}, 149: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 150: {145, 138, 190}, 151: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 152: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 153: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 154: {11, 149}, 155: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 156: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 157: {152}, 158: {96, 217, 231, 40, 202, 153}, 159: {154}, 160: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 161: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 162: {205, 26, 84, 157}, 163: {133, 206, 85, 27, 158}, 164: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 165: {160, 37, 166, 208, 87, 215, 29, 94}, 166: {88, 161, 209, 30}, 167: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 168: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 169: {164, 35, 92, 213}, 170: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 171: {160, 37, 166, 208, 87, 215, 29, 94}, 172: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 173: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 174: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 175: {224, 170, 173, 220, 223}, 176: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 177: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 178: {224, 170, 173, 220, 223}, 179: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 180: {227, 104, 234, 175, 50}, 181: {176, 105, 51, 228}, 182: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 183: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 184: {179}, 185: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 186: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 187: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 188: {183}, 189: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 190: {185, 76}, 191: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 192: {78}, 193: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 194: {80}, 195: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 196: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 197: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 198: {205, 26, 84, 157}, 199: {133, 206, 85, 27, 158}, 200: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 201: {160, 37, 166, 208, 87, 215, 29, 94}, 202: {88, 161, 209, 30}, 203: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 204: {33, 90}, 205: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 206: {164, 35, 92, 213}, 207: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 208: {160, 37, 166, 208, 87, 215, 29, 94}, 209: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 210: {96, 217, 231, 40, 202, 153}, 211: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 212: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 213: {48, 99, 44, 102}, 214: {36, 100, 165, 171, 45, 207, 83, 86, 214, 221, 25, 28, 93, 159}, 215: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 216: {48, 99, 44, 102}, 217: {225, 34, 163, 226, 103, 232, 174, 49, 211, 212, 91}, 218: {227, 104, 234, 175, 50}, 219: {176, 105, 51, 228}, 220: {97, 194, 229, 168, 41, 106, 203, 81, 177, 52, 22, 150, 218, 155}, 221: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 222: {108}, 223: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 224: {110}, 225: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 226: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 227: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 228: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 229: {115, 197}, 230: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 231: {192, 129, 66, 199, 73, 140, 111, 15, 147, 117, 59}, 232: {134, 136, 137, 10, 13, 142, 144, 17, 148, 182, 56, 188, 61, 63, 193, 68, 70, 200, 75, 77, 112, 118, 127}, 233: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 234: {120}, 235: {130, 131, 132, 139, 12, 141, 16, 18, 146, 20, 151, 24, 156, 32, 162, 39, 167, 169, 43, 172, 47, 178, 180, 181, 54, 184, 58, 60, 191, 65, 67, 195, 198, 72, 74, 204, 79, 82, 210, 216, 89, 219, 222, 95, 98, 101, 230, 107, 235, 109, 113, 114, 116, 119, 121, 123, 124}, 236: {122}})
Equivalent! frozenset({70, 63}) {65, 58}
Equivalent! frozenset({64, 71}) {66, 59}
Equivalent! frozenset({72, 65}) {67, 60}
Equivalent! frozenset({185, 76}) {76, 190}
Equivalent! frozenset({144, 137}) {149, 142}
Equivalent! frozenset({145, 138}) {150, 143}
Equivalent! frozenset({146, 139}) {144, 151}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbc4a96a8>, {0: {0}, 1: {9}, 2: {10}, 3: {11}, 4: {12}, 5: {8}, 6: {13}, 7: {14}, 8: {15}, 9: {16}, 10: {17}, 11: {18}, 12: {19}, 13: {20}, 14: {21}, 15: {22}, 16: {23}, 17: {24}, 18: {25}, 19: {26}, 20: {27}, 21: {28}, 22: {29}, 23: {30}, 24: {31}, 25: {32}, 26: {33}, 27: {34}, 28: {35}, 29: {36}, 30: {37}, 31: {38}, 32: {39}, 33: {40}, 34: {41}, 35: {42}, 36: {43}, 37: {44}, 38: {45}, 39: {46}, 40: {47}, 41: {48}, 42: {49}, 43: {50}, 44: {51}, 45: {52}, 46: {53}, 47: {54}, 48: {4}, 49: {5}, 50: {55}, 51: {56}, 52: {57}, 53: {58}, 54: {59}, 55: {60}, 56: {68, 61, 142}, 57: {69, 62, 143}, 58: {63}, 59: {71}, 60: {65}, 61: {73, 66, 147}, 62: {74, 67, 181}, 63: {68, 61, 142}, 64: {69, 62, 143}, 65: {70}, 66: {64}, 67: {72}, 68: {73, 66, 147}, 69: {74, 67, 181}, 70: {1}, 71: {6}, 72: {3}, 73: {7}, 74: {2}, 75: {75}, 76: {185}, 77: {186}, 78: {187}, 79: {188}, 80: {189}, 81: {190}, 82: {191}, 83: {192}, 84: {193}, 85: {194}, 86: {195}, 87: {196}, 88: {197}, 89: {198}, 90: {199}, 91: {200}, 92: {201}, 93: {202}, 94: {203}, 95: {204}, 96: {205}, 97: {206}, 98: {207}, 99: {208}, 100: {209}, 101: {210}, 102: {211}, 103: {212}, 104: {213}, 105: {214}, 106: {215}, 107: {216}, 108: {217}, 109: {218}, 110: {219}, 111: {220}, 112: {221}, 113: {222}, 114: {223}, 115: {224}, 116: {225}, 117: {226}, 118: {227}, 119: {228}, 120: {229}, 121: {230}, 122: {231}, 123: {232}, 124: {233}, 125: {234}, 126: {235}, 127: {236}, 128: {123}, 129: {124}, 130: {125}, 131: {126}, 132: {127}, 133: {128}, 134: {129}, 135: {130}, 136: {131}, 137: {132}, 138: {133}, 139: {134}, 140: {135}, 141: {136}, 142: {137}, 143: {138}, 144: {146}, 145: {140}, 146: {141}, 147: {142}, 148: {143}, 149: {144}, 150: {145}, 151: {139}, 152: {147}, 153: {148}, 154: {149}, 155: {150}, 156: {151}, 157: {152}, 158: {153}, 159: {154}, 160: {155}, 161: {156}, 162: {157}, 163: {158}, 164: {159}, 165: {160}, 166: {161}, 167: {162}, 168: {163}, 169: {164}, 170: {165}, 171: {166}, 172: {167}, 173: {168}, 174: {169}, 175: {170}, 176: {171}, 177: {172}, 178: {173}, 179: {174}, 180: {175}, 181: {176}, 182: {177}, 183: {178}, 184: {179}, 185: {180}, 186: {181}, 187: {182}, 188: {183}, 189: {184}, 190: {76}, 191: {77}, 192: {78}, 193: {79}, 194: {80}, 195: {81}, 196: {82}, 197: {83}, 198: {84}, 199: {85}, 200: {86}, 201: {87}, 202: {88}, 203: {89}, 204: {90}, 205: {91}, 206: {92}, 207: {93}, 208: {94}, 209: {95}, 210: {96}, 211: {97}, 212: {98}, 213: {99}, 214: {100}, 215: {101}, 216: {102}, 217: {103}, 218: {104}, 219: {105}, 220: {106}, 221: {107}, 222: {108}, 223: {109}, 224: {110}, 225: {111}, 226: {112}, 227: {113}, 228: {114}, 229: {115}, 230: {116}, 231: {117}, 232: {118}, 233: {119}, 234: {120}, 235: {121}, 236: {122}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 bitcast bitcast
EXACT 50 add add
EXACT 51 load load
EXACT 52 add add
EXACT 53 store store
EXACT 54 inttoptr inttoptr
EXACT 55 store store
MORE 56 POT: 3
MORE 57 POT: 3
EXACT 58 load load
EXACT 59 add add
EXACT 60 store store
MORE 61 POT: 3
MORE 62 POT: 3
MORE 63 POT: 3
MORE 64 POT: 3
EXACT 65 load load
EXACT 66 add add
EXACT 67 store store
MORE 68 POT: 3
MORE 69 POT: 3
EXACT 70 getelementptr getelementptr
EXACT 71 getelementptr getelementptr
EXACT 72 bitcast bitcast
EXACT 73 getelementptr getelementptr
EXACT 74 bitcast bitcast
EXACT 75 load load
EXACT 76 br br
EXACT 77 phi phi
EXACT 78 phi phi
EXACT 79 load load
EXACT 80 add add
EXACT 81 add add
EXACT 82 store store
EXACT 83 inttoptr inttoptr
EXACT 84 load load
EXACT 85 zext zext
EXACT 86 store store
EXACT 87 add add
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 load load
EXACT 92 sub sub
EXACT 93 icmp icmp
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 and and
EXACT 97 tail tail
EXACT 98 trunc trunc
EXACT 99 and and
EXACT 100 xor xor
EXACT 101 store store
EXACT 102 xor xor
EXACT 103 xor xor
EXACT 104 lshr lshr
EXACT 105 trunc trunc
EXACT 106 and and
EXACT 107 store store
EXACT 108 icmp icmp
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 lshr lshr
EXACT 112 trunc trunc
EXACT 113 store store
EXACT 114 lshr lshr
EXACT 115 lshr lshr
EXACT 116 xor xor
EXACT 117 xor xor
EXACT 118 add add
EXACT 119 icmp icmp
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 icmp icmp
EXACT 123 xor xor
EXACT 124 select select
EXACT 125 add add
EXACT 126 store store
EXACT 127 br br
EXACT 128 store store
EXACT 129 store store
EXACT 130 add add
EXACT 131 add add
EXACT 132 load load
EXACT 133 add add
EXACT 134 inttoptr inttoptr
EXACT 135 store store
EXACT 136 store store
EXACT 137 store store
EXACT 138 tail tail
EXACT 139 load load
EXACT 140 add add
EXACT 141 load load
EXACT 142 load load
EXACT 143 add add
EXACT 144 store store
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 load load
EXACT 148 add add
EXACT 149 load load
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 load load
EXACT 154 add add
EXACT 155 zext zext
EXACT 156 store store
EXACT 157 icmp icmp
EXACT 158 icmp icmp
EXACT 159 or or
EXACT 160 zext zext
EXACT 161 store store
EXACT 162 and and
EXACT 163 tail tail
EXACT 164 trunc trunc
EXACT 165 and and
EXACT 166 xor xor
EXACT 167 store store
EXACT 168 xor xor
EXACT 169 lshr lshr
EXACT 170 trunc trunc
EXACT 171 and and
EXACT 172 store store
EXACT 173 zext zext
EXACT 174 store store
EXACT 175 lshr lshr
EXACT 176 trunc trunc
EXACT 177 store store
EXACT 178 lshr lshr
EXACT 179 xor xor
EXACT 180 add add
EXACT 181 icmp icmp
EXACT 182 zext zext
EXACT 183 store store
EXACT 184 add add
EXACT 185 store store
EXACT 186 store store
EXACT 187 load load
EXACT 188 add add
EXACT 189 store store
EXACT 190 br br
EXACT 191 load load
EXACT 192 add add
EXACT 193 store store
EXACT 194 icmp icmp
EXACT 195 zext zext
EXACT 196 store store
EXACT 197 trunc trunc
EXACT 198 and and
EXACT 199 tail tail
EXACT 200 trunc trunc
EXACT 201 and and
EXACT 202 xor xor
EXACT 203 store store
EXACT 204 xor xor
EXACT 205 xor xor
EXACT 206 lshr lshr
EXACT 207 trunc trunc
EXACT 208 and and
EXACT 209 store store
EXACT 210 icmp icmp
EXACT 211 zext zext
EXACT 212 store store
EXACT 213 lshr lshr
EXACT 214 trunc trunc
EXACT 215 store store
EXACT 216 lshr lshr
EXACT 217 xor xor
EXACT 218 add add
EXACT 219 icmp icmp
EXACT 220 zext zext
EXACT 221 store store
EXACT 222 add add
EXACT 223 store store
EXACT 224 add add
EXACT 225 inttoptr inttoptr
EXACT 226 load load
EXACT 227 store store
EXACT 228 store store
EXACT 229 add add
EXACT 230 store store
EXACT 231 inttoptr inttoptr
EXACT 232 load load
EXACT 233 store store
EXACT 234 add add
EXACT 235 store store
EXACT 236 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 5 %EDI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 9 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 10 %5 = load i64, i64* %RBP, align 8
- 11 %6 = add i64 %1, 1
- 12 store i64 %6, i64* %PC, align 8
- 13 %7 = load i64, i64* %RSP, align 8
- 14 %8 = add i64 %7, -8
- 15 %9 = inttoptr i64 %8 to i64*
- 16 store i64 %5, i64* %9, align 8
- 17 %10 = load i64, i64* %PC, align 8
- 18 store i64 %8, i64* %RBP, align 8
- 19 %11 = add i64 %7, -24
- 20 store i64 %11, i64* %RSP, align 8
- 21 %12 = icmp ult i64 %8, 16
- 22 %13 = zext i1 %12 to i8
- 23 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 24 store i8 %13, i8* %14, align 1
- 25 %15 = trunc i64 %11 to i32
- 26 %16 = and i32 %15, 255
- 27 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 28 %18 = trunc i32 %17 to i8
- 29 %19 = and i8 %18, 1
- 30 %20 = xor i8 %19, 1
- 31 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 32 store i8 %20, i8* %21, align 1
- 33 %22 = xor i64 %8, 16
- 34 %23 = xor i64 %22, %11
- 35 %24 = lshr i64 %23, 4
- 36 %25 = trunc i64 %24 to i8
- 37 %26 = and i8 %25, 1
- 38 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 store i8 %26, i8* %27, align 1
- 40 %28 = icmp eq i64 %11, 0
- 41 %29 = zext i1 %28 to i8
- 42 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 43 store i8 %29, i8* %30, align 1
- 44 %31 = lshr i64 %11, 63
- 45 %32 = trunc i64 %31 to i8
- 46 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 store i8 %32, i8* %33, align 1
- 48 %34 = lshr i64 %8, 63
- 49 %35 = xor i64 %31, %34
- 50 %36 = add nuw nsw i64 %35, %34
- 51 %37 = icmp eq i64 %36, 2
- 52 %38 = zext i1 %37 to i8
- 53 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 54 store i8 %38, i8* %39, align 1
- 55 %40 = add i64 %7, -12
- 56 %41 = load i32, i32* %EDI, align 4
- 57 %42 = add i64 %10, 10
- 58 store i64 %42, i64* %PC, align 8
- 59 %43 = inttoptr i64 %40 to i32*
- 60 store i32 %41, i32* %43, align 4
- 61 %44 = load i64, i64* %RBP, align 8
- 62 %45 = add i64 %44, -8
- 63 %46 = load i64, i64* %PC, align 8
- 64 %47 = add i64 %46, 7
- 65 store i64 %47, i64* %PC, align 8
- 66 %48 = inttoptr i64 %45 to i32*
- 67 store i32 0, i32* %48, align 4
- 68 %49 = load i64, i64* %RBP, align 8
- 69 %50 = add i64 %49, -8
- 70 %51 = load i64, i64* %PC, align 8
- 71 %52 = add i64 %51, 7
- 72 store i64 %52, i64* %PC, align 8
- 73 %53 = inttoptr i64 %50 to i32*
- 74 store i32 0, i32* %53, align 4
- 75 %.pre = load i64, i64* %PC, align 8
- 76 \<badref\> = br label %block_400539
- 77 %54 = load i64, i64* %RSP, align 8
- 78 %55 = add i64 %54, 16
- 79 store i64 %55, i64* %RSP, align 8
- 80 %56 = icmp ugt i64 %54, -17
- 81 %57 = zext i1 %56 to i8
- 82 store i8 %57, i8* %14, align 1
- 83 %58 = trunc i64 %55 to i32
- 84 %59 = and i32 %58, 255
- 85 %60 = tail call i32 @llvm.ctpop.i32(i32 %59) #12
- 86 %61 = trunc i32 %60 to i8
- 87 %62 = and i8 %61, 1
- 88 %63 = xor i8 %62, 1
- 89 store i8 %63, i8* %21, align 1
- 90 %64 = xor i64 %54, 16
- 91 %65 = xor i64 %64, %55
- 92 %66 = lshr i64 %65, 4
- 93 %67 = trunc i64 %66 to i8
- 94 %68 = and i8 %67, 1
- 95 store i8 %68, i8* %27, align 1
- 96 %69 = icmp eq i64 %55, 0
- 97 %70 = zext i1 %69 to i8
- 98 store i8 %70, i8* %30, align 1
- 99 %71 = lshr i64 %55, 63
- 100 %72 = trunc i64 %71 to i8
- 101 store i8 %72, i8* %33, align 1
- 102 %73 = lshr i64 %54, 63
- 103 %74 = xor i64 %71, %73
- 104 %75 = add nuw nsw i64 %74, %71
- 105 %76 = icmp eq i64 %75, 2
- 106 %77 = zext i1 %76 to i8
- 107 store i8 %77, i8* %39, align 1
- 108 %78 = add i64 %167, 5
- 109 store i64 %78, i64* %PC, align 8
- 110 %79 = add i64 %54, 24
- 111 %80 = inttoptr i64 %55 to i64*
- 112 %81 = load i64, i64* %80, align 8
- 113 store i64 %81, i64* %RBP, align 8
- 114 store i64 %79, i64* %RSP, align 8
- 115 %82 = add i64 %167, 6
- 116 store i64 %82, i64* %PC, align 8
- 117 %83 = inttoptr i64 %79 to i64*
- 118 %84 = load i64, i64* %83, align 8
- 119 store i64 %84, i64* %PC, align 8
- 120 %85 = add i64 %54, 32
- 121 store i64 %85, i64* %RSP, align 8
- 122 \<badref\> = ret %struct.Memory* %MEMORY.0
- 123 store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 4), i64* %RDI, align 8
- 124 store i8 0, i8* %AL, align 1
- 125 %86 = add i64 %167, -293
- 126 %87 = add i64 %167, 17
- 127 %88 = load i64, i64* %RSP, align 8
- 128 %89 = add i64 %88, -8
- 129 %90 = inttoptr i64 %89 to i64*
- 130 store i64 %87, i64* %90, align 8
- 131 store i64 %89, i64* %RSP, align 8
- 132 store i64 %86, i64* %PC, align 8
- 133 %91 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
- 134 %92 = load i64, i64* %RBP, align 8
- 135 %93 = add i64 %92, -12
- 136 %94 = load i32, i32* %EAX, align 4
- 137 %95 = load i64, i64* %PC, align 8
- 138 %96 = add i64 %95, 3
- 139 store i64 %96, i64* %PC, align 8
- 140 %97 = inttoptr i64 %93 to i32*
- 141 store i32 %94, i32* %97, align 4
- 142 %98 = load i64, i64* %RBP, align 8
- 143 %99 = add i64 %98, -8
- 144 %100 = load i64, i64* %PC, align 8
- 145 %101 = add i64 %100, 3
- 146 store i64 %101, i64* %PC, align 8
- 147 %102 = inttoptr i64 %99 to i32*
- 148 %103 = load i32, i32* %102, align 4
- 149 %104 = add i32 %103, 1
- 150 %105 = zext i32 %104 to i64
- 151 store i64 %105, i64* %RAX, align 8
- 152 %106 = icmp eq i32 %103, -1
- 153 %107 = icmp eq i32 %104, 0
- 154 %108 = or i1 %106, %107
- 155 %109 = zext i1 %108 to i8
- 156 store i8 %109, i8* %14, align 1
- 157 %110 = and i32 %104, 255
- 158 %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
- 159 %112 = trunc i32 %111 to i8
- 160 %113 = and i8 %112, 1
- 161 %114 = xor i8 %113, 1
- 162 store i8 %114, i8* %21, align 1
- 163 %115 = xor i32 %104, %103
- 164 %116 = lshr i32 %115, 4
- 165 %117 = trunc i32 %116 to i8
- 166 %118 = and i8 %117, 1
- 167 store i8 %118, i8* %27, align 1
- 168 %119 = zext i1 %107 to i8
- 169 store i8 %119, i8* %30, align 1
- 170 %120 = lshr i32 %104, 31
- 171 %121 = trunc i32 %120 to i8
- 172 store i8 %121, i8* %33, align 1
- 173 %122 = lshr i32 %103, 31
- 174 %123 = xor i32 %120, %122
- 175 %124 = add nuw nsw i32 %123, %120
- 176 %125 = icmp eq i32 %124, 2
- 177 %126 = zext i1 %125 to i8
- 178 store i8 %126, i8* %39, align 1
- 179 %127 = add i64 %100, 9
- 180 store i64 %127, i64* %PC, align 8
- 181 store i32 %104, i32* %102, align 4
- 182 %128 = load i64, i64* %PC, align 8
- 183 %129 = add i64 %128, -41
- 184 store i64 %129, i64* %PC, align 8
- 185 \<badref\> = br label %block_400539
- 186 %130 = phi i64 [ %.pre, %block_400520 ], [ %129, %block_400545 ]
- 187 %MEMORY.0 = phi %struct.Memory* [ %2, %block_400520 ], [ %91, %block_400545 ]
- 188 %131 = load i64, i64* %RBP, align 8
- 189 %132 = add i64 %131, -8
- 190 %133 = add i64 %130, 3
- 191 store i64 %133, i64* %PC, align 8
- 192 %134 = inttoptr i64 %132 to i32*
- 193 %135 = load i32, i32* %134, align 4
- 194 %136 = zext i32 %135 to i64
- 195 store i64 %136, i64* %RAX, align 8
- 196 %137 = add i64 %131, -4
- 197 %138 = add i64 %130, 6
- 198 store i64 %138, i64* %PC, align 8
- 199 %139 = inttoptr i64 %137 to i32*
- 200 %140 = load i32, i32* %139, align 4
- 201 %141 = sub i32 %135, %140
- 202 %142 = icmp ult i32 %135, %140
- 203 %143 = zext i1 %142 to i8
- 204 store i8 %143, i8* %14, align 1
- 205 %144 = and i32 %141, 255
- 206 %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #12
- 207 %146 = trunc i32 %145 to i8
- 208 %147 = and i8 %146, 1
- 209 %148 = xor i8 %147, 1
- 210 store i8 %148, i8* %21, align 1
- 211 %149 = xor i32 %140, %135
- 212 %150 = xor i32 %149, %141
- 213 %151 = lshr i32 %150, 4
- 214 %152 = trunc i32 %151 to i8
- 215 %153 = and i8 %152, 1
- 216 store i8 %153, i8* %27, align 1
- 217 %154 = icmp eq i32 %141, 0
- 218 %155 = zext i1 %154 to i8
- 219 store i8 %155, i8* %30, align 1
- 220 %156 = lshr i32 %141, 31
- 221 %157 = trunc i32 %156 to i8
- 222 store i8 %157, i8* %33, align 1
- 223 %158 = lshr i32 %135, 31
- 224 %159 = lshr i32 %140, 31
- 225 %160 = xor i32 %159, %158
- 226 %161 = xor i32 %156, %158
- 227 %162 = add nuw nsw i32 %161, %160
- 228 %163 = icmp eq i32 %162, 2
- 229 %164 = zext i1 %163 to i8
- 230 store i8 %164, i8* %39, align 1
- 231 %165 = icmp ne i8 %157, 0
- 232 %166 = xor i1 %165, %163
- 233 %.v = select i1 %166, i64 12, i64 46
- 234 %167 = add i64 %130, %.v
- 235 store i64 %167, i64* %PC, align 8
- 236 \<badref\> = br i1 %166, label %block_400545, label %block_400567
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbc4a9598>, {0: {0}, 1: {70}, 2: {72, 49, 74}, 3: {72, 49, 74}, 4: {48}, 5: {72, 49, 74}, 6: {73, 71}, 7: {73, 71}, 8: {5}, 9: {1}, 10: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 11: {154, 3}, 12: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 13: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 14: {64, 133, 7, 80, 148, 57}, 15: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 16: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 17: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 18: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 19: {12}, 20: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 21: {14}, 22: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 23: {16}, 24: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 25: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 26: {96, 162, 19, 198}, 27: {97, 163, 199, 138, 20}, 28: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 29: {99, 165, 201, 106, 171, 208, 22, 30}, 30: {202, 100, 166, 23}, 31: {24}, 32: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 33: {26, 204}, 34: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 35: {104, 169, 28, 206}, 36: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 37: {99, 165, 201, 106, 171, 208, 22, 30}, 38: {31}, 39: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 40: {33, 108, 210, 122, 93, 158}, 41: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 42: {35}, 43: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 44: {213, 41, 37, 216}, 45: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 46: {39}, 47: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 48: {213, 41, 37, 216}, 49: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 50: {43, 180, 118, 218, 125}, 51: {219, 44, 181, 119}, 52: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 53: {46}, 54: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 55: {50, 140}, 56: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 57: {52}, 58: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 59: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 60: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 61: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 62: {64, 133, 7, 80, 148, 57}, 63: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 64: {66, 59}, 65: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 66: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 67: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 68: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 69: {64, 133, 7, 80, 148, 57}, 70: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 71: {66, 59}, 72: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 73: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 74: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 75: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 76: {76, 190}, 77: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 78: {192}, 79: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 80: {194}, 81: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 82: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 83: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 84: {96, 162, 19, 198}, 85: {97, 163, 199, 138, 20}, 86: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 87: {99, 165, 201, 106, 171, 208, 22, 30}, 88: {202, 100, 166, 23}, 89: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 90: {26, 204}, 91: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 92: {104, 169, 28, 206}, 93: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 94: {99, 165, 201, 106, 171, 208, 22, 30}, 95: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 96: {33, 108, 210, 122, 93, 158}, 97: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 98: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 99: {213, 41, 37, 216}, 100: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 101: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 102: {213, 41, 37, 216}, 103: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 104: {43, 180, 118, 218, 125}, 105: {219, 44, 181, 119}, 106: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 107: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 108: {222}, 109: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 110: {224}, 111: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 112: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 113: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 114: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 115: {88, 229}, 116: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 117: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 118: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 119: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 120: {234}, 121: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 122: {236}, 123: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 124: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 125: {130}, 126: {131}, 127: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 128: {64, 133, 7, 80, 148, 57}, 129: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 130: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 131: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 132: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 133: {97, 163, 199, 138, 20}, 134: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 135: {50, 140}, 136: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 137: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 138: {81, 150, 143}, 139: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 140: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 141: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 142: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 143: {64, 133, 7, 80, 148, 57}, 144: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 145: {81, 150, 143}, 146: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 147: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 148: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 149: {154, 3}, 150: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 151: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 152: {157}, 153: {33, 108, 210, 122, 93, 158}, 154: {159}, 155: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 156: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 157: {96, 162, 19, 198}, 158: {97, 163, 199, 138, 20}, 159: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 160: {99, 165, 201, 106, 171, 208, 22, 30}, 161: {202, 100, 166, 23}, 162: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 163: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 164: {104, 169, 28, 206}, 165: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 166: {99, 165, 201, 106, 171, 208, 22, 30}, 167: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 168: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 169: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 170: {175, 111, 178, 114, 115}, 171: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 172: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 173: {175, 111, 178, 114, 115}, 174: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 175: {43, 180, 118, 218, 125}, 176: {219, 44, 181, 119}, 177: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 178: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 179: {184}, 180: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 181: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 182: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 183: {188}, 184: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 185: {76, 190}, 186: {77, 78}, 187: {77, 78}, 188: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 189: {64, 133, 7, 80, 148, 57}, 190: {81, 150, 143}, 191: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 192: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 193: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 194: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 195: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 196: {87}, 197: {88, 229}, 198: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 199: {225, 68, 134, 231, 8, 145, 83, 54, 152, 90, 61}, 200: {2, 132, 6, 10, 139, 141, 142, 147, 149, 153, 51, 56, 58, 187, 191, 63, 65, 75, 79, 84, 91, 226, 232}, 201: {92}, 202: {33, 108, 210, 122, 93, 158}, 203: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 204: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 205: {96, 162, 19, 198}, 206: {97, 163, 199, 138, 20}, 207: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 208: {99, 165, 201, 106, 171, 208, 22, 30}, 209: {202, 100, 166, 23}, 210: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 211: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 212: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 213: {104, 169, 28, 206}, 214: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 215: {99, 165, 201, 106, 171, 208, 22, 30}, 216: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 217: {33, 108, 210, 122, 93, 158}, 218: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 219: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 220: {175, 111, 178, 114, 115}, 221: {98, 164, 197, 38, 200, 105, 170, 207, 112, 176, 18, 21, 214, 29}, 222: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 223: {175, 111, 178, 114, 115}, 224: {175, 111, 178, 114, 115}, 225: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 226: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 227: {43, 180, 118, 218, 125}, 228: {219, 44, 181, 119}, 229: {160, 34, 195, 45, 109, 15, 173, 211, 85, 182, 120, 155, 220, 94}, 230: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 231: {33, 108, 210, 122, 93, 158}, 232: {102, 103, 168, 42, 123, 205, 179, 116, 117, 217, 27}, 233: {124}, 234: {43, 180, 118, 218, 125}, 235: {128, 129, 4, 135, 136, 9, 137, 11, 13, 144, 17, 146, 151, 25, 156, 32, 161, 36, 167, 40, 172, 174, 47, 177, 53, 55, 183, 185, 186, 60, 189, 62, 193, 67, 196, 69, 203, 209, 82, 212, 86, 215, 89, 221, 95, 223, 227, 228, 101, 230, 233, 107, 235, 110, 113, 121, 126}, 236: {127}})
Equivalent! frozenset({65, 58}) {70, 63}
Equivalent! frozenset({66, 59}) {64, 71}
Equivalent! frozenset({67, 60}) {72, 65}
Equivalent! frozenset({76, 190}) {185, 76}
Equivalent! frozenset({149, 142}) {144, 137}
Equivalent! frozenset({150, 143}) {145, 138}
Equivalent! frozenset({144, 151}) {146, 139}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbc4a9598>, {0: {0}, 1: {70}, 2: {74}, 3: {72}, 4: {48}, 5: {49}, 6: {71}, 7: {73}, 8: {5}, 9: {1}, 10: {2}, 11: {3}, 12: {4}, 13: {6}, 14: {7}, 15: {8}, 16: {9}, 17: {10}, 18: {11}, 19: {12}, 20: {13}, 21: {14}, 22: {15}, 23: {16}, 24: {17}, 25: {18}, 26: {19}, 27: {20}, 28: {21}, 29: {22}, 30: {23}, 31: {24}, 32: {25}, 33: {26}, 34: {27}, 35: {28}, 36: {29}, 37: {30}, 38: {31}, 39: {32}, 40: {33}, 41: {34}, 42: {35}, 43: {36}, 44: {37}, 45: {38}, 46: {39}, 47: {40}, 48: {41}, 49: {42}, 50: {43}, 51: {44}, 52: {45}, 53: {46}, 54: {47}, 55: {50}, 56: {51}, 57: {52}, 58: {53}, 59: {54}, 60: {55}, 61: {56, 147, 63}, 62: {64, 57, 148}, 63: {58}, 64: {66}, 65: {60}, 66: {152, 68, 61}, 67: {186, 69, 62}, 68: {56, 147, 63}, 69: {64, 57, 148}, 70: {65}, 71: {59}, 72: {67}, 73: {152, 68, 61}, 74: {186, 69, 62}, 75: {75}, 76: {190}, 77: {191}, 78: {192}, 79: {193}, 80: {194}, 81: {195}, 82: {196}, 83: {197}, 84: {198}, 85: {199}, 86: {200}, 87: {201}, 88: {202}, 89: {203}, 90: {204}, 91: {205}, 92: {206}, 93: {207}, 94: {208}, 95: {209}, 96: {210}, 97: {211}, 98: {212}, 99: {213}, 100: {214}, 101: {215}, 102: {216}, 103: {217}, 104: {218}, 105: {219}, 106: {220}, 107: {221}, 108: {222}, 109: {223}, 110: {224}, 111: {225}, 112: {226}, 113: {227}, 114: {228}, 115: {229}, 116: {230}, 117: {231}, 118: {232}, 119: {233}, 120: {234}, 121: {235}, 122: {236}, 123: {128}, 124: {129}, 125: {130}, 126: {131}, 127: {132}, 128: {133}, 129: {134}, 130: {135}, 131: {136}, 132: {137}, 133: {138}, 134: {139}, 135: {140}, 136: {141}, 137: {142}, 138: {143}, 139: {151}, 140: {145}, 141: {146}, 142: {147}, 143: {148}, 144: {149}, 145: {150}, 146: {144}, 147: {152}, 148: {153}, 149: {154}, 150: {155}, 151: {156}, 152: {157}, 153: {158}, 154: {159}, 155: {160}, 156: {161}, 157: {162}, 158: {163}, 159: {164}, 160: {165}, 161: {166}, 162: {167}, 163: {168}, 164: {169}, 165: {170}, 166: {171}, 167: {172}, 168: {173}, 169: {174}, 170: {175}, 171: {176}, 172: {177}, 173: {178}, 174: {179}, 175: {180}, 176: {181}, 177: {182}, 178: {183}, 179: {184}, 180: {185}, 181: {186}, 182: {187}, 183: {188}, 184: {189}, 185: {76}, 186: {77}, 187: {78}, 188: {79}, 189: {80}, 190: {81}, 191: {82}, 192: {83}, 193: {84}, 194: {85}, 195: {86}, 196: {87}, 197: {88}, 198: {89}, 199: {90}, 200: {91}, 201: {92}, 202: {93}, 203: {94}, 204: {95}, 205: {96}, 206: {97}, 207: {98}, 208: {99}, 209: {100}, 210: {101}, 211: {102}, 212: {103}, 213: {104}, 214: {105}, 215: {106}, 216: {107}, 217: {108}, 218: {109}, 219: {110}, 220: {111}, 221: {112}, 222: {113}, 223: {114}, 224: {115}, 225: {116}, 226: {117}, 227: {118}, 228: {119}, 229: {120}, 230: {121}, 231: {122}, 232: {123}, 233: {124}, 234: {125}, 235: {126}, 236: {127}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 load load
EXACT 11 add add
EXACT 12 store store
EXACT 13 load load
EXACT 14 add add
EXACT 15 inttoptr inttoptr
EXACT 16 store store
EXACT 17 load load
EXACT 18 store store
EXACT 19 add add
EXACT 20 store store
EXACT 21 icmp icmp
EXACT 22 zext zext
EXACT 23 getelementptr getelementptr
EXACT 24 store store
EXACT 25 trunc trunc
EXACT 26 and and
EXACT 27 tail tail
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 xor xor
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 xor xor
EXACT 34 xor xor
EXACT 35 lshr lshr
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 icmp icmp
EXACT 41 zext zext
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 trunc trunc
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 xor xor
EXACT 50 add add
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 add add
EXACT 56 load load
EXACT 57 add add
EXACT 58 store store
EXACT 59 inttoptr inttoptr
EXACT 60 store store
MORE 61 POT: 3
MORE 62 POT: 3
EXACT 63 load load
EXACT 64 add add
EXACT 65 store store
MORE 66 POT: 3
MORE 67 POT: 3
MORE 68 POT: 3
MORE 69 POT: 3
EXACT 70 load load
EXACT 71 add add
EXACT 72 store store
MORE 73 POT: 3
MORE 74 POT: 3
EXACT 75 load load
EXACT 76 br br
EXACT 77 load load
EXACT 78 add add
EXACT 79 store store
EXACT 80 icmp icmp
EXACT 81 zext zext
EXACT 82 store store
EXACT 83 trunc trunc
EXACT 84 and and
EXACT 85 tail tail
EXACT 86 trunc trunc
EXACT 87 and and
EXACT 88 xor xor
EXACT 89 store store
EXACT 90 xor xor
EXACT 91 xor xor
EXACT 92 lshr lshr
EXACT 93 trunc trunc
EXACT 94 and and
EXACT 95 store store
EXACT 96 icmp icmp
EXACT 97 zext zext
EXACT 98 store store
EXACT 99 lshr lshr
EXACT 100 trunc trunc
EXACT 101 store store
EXACT 102 lshr lshr
EXACT 103 xor xor
EXACT 104 add add
EXACT 105 icmp icmp
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 add add
EXACT 109 store store
EXACT 110 add add
EXACT 111 inttoptr inttoptr
EXACT 112 load load
EXACT 113 store store
EXACT 114 store store
EXACT 115 add add
EXACT 116 store store
EXACT 117 inttoptr inttoptr
EXACT 118 load load
EXACT 119 store store
EXACT 120 add add
EXACT 121 store store
EXACT 122 ret ret
EXACT 123 store store
EXACT 124 store store
EXACT 125 add add
EXACT 126 add add
EXACT 127 load load
EXACT 128 add add
EXACT 129 inttoptr inttoptr
EXACT 130 store store
EXACT 131 store store
EXACT 132 store store
EXACT 133 tail tail
EXACT 134 load load
EXACT 135 add add
EXACT 136 load load
EXACT 137 load load
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 store store
EXACT 142 load load
EXACT 143 add add
EXACT 144 load load
EXACT 145 add add
EXACT 146 store store
EXACT 147 inttoptr inttoptr
EXACT 148 load load
EXACT 149 add add
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 icmp icmp
EXACT 153 icmp icmp
EXACT 154 or or
EXACT 155 zext zext
EXACT 156 store store
EXACT 157 and and
EXACT 158 tail tail
EXACT 159 trunc trunc
EXACT 160 and and
EXACT 161 xor xor
EXACT 162 store store
EXACT 163 xor xor
EXACT 164 lshr lshr
EXACT 165 trunc trunc
EXACT 166 and and
EXACT 167 store store
EXACT 168 zext zext
EXACT 169 store store
EXACT 170 lshr lshr
EXACT 171 trunc trunc
EXACT 172 store store
EXACT 173 lshr lshr
EXACT 174 xor xor
EXACT 175 add add
EXACT 176 icmp icmp
EXACT 177 zext zext
EXACT 178 store store
EXACT 179 add add
EXACT 180 store store
EXACT 181 store store
EXACT 182 load load
EXACT 183 add add
EXACT 184 store store
EXACT 185 br br
EXACT 186 phi phi
EXACT 187 phi phi
EXACT 188 load load
EXACT 189 add add
EXACT 190 add add
EXACT 191 store store
EXACT 192 inttoptr inttoptr
EXACT 193 load load
EXACT 194 zext zext
EXACT 195 store store
EXACT 196 add add
EXACT 197 add add
EXACT 198 store store
EXACT 199 inttoptr inttoptr
EXACT 200 load load
EXACT 201 sub sub
EXACT 202 icmp icmp
EXACT 203 zext zext
EXACT 204 store store
EXACT 205 and and
EXACT 206 tail tail
EXACT 207 trunc trunc
EXACT 208 and and
EXACT 209 xor xor
EXACT 210 store store
EXACT 211 xor xor
EXACT 212 xor xor
EXACT 213 lshr lshr
EXACT 214 trunc trunc
EXACT 215 and and
EXACT 216 store store
EXACT 217 icmp icmp
EXACT 218 zext zext
EXACT 219 store store
EXACT 220 lshr lshr
EXACT 221 trunc trunc
EXACT 222 store store
EXACT 223 lshr lshr
EXACT 224 lshr lshr
EXACT 225 xor xor
EXACT 226 xor xor
EXACT 227 add add
EXACT 228 icmp icmp
EXACT 229 zext zext
EXACT 230 store store
EXACT 231 icmp icmp
EXACT 232 xor xor
EXACT 233 select select
EXACT 234 add add
EXACT 235 store store
EXACT 236 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %40 to i32*', '%41 = add i64 %7, -12', '%42 = load i32, i32* %EDI.i, align 4', '%43 = add i64 %10, 10', 'store i64 %43, i64* %3, align 8', '%44 = inttoptr i64 %41 to i32*', 'store i32 %42, i32* %44, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 7', 'store i64 %48, i64* %3, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 7', 'store i64 %53, i64* %3, align 8', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%EAX.i23 = bitcast %union.anon* %55 to i32*', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0', '%AL.i = bitcast %union.anon* %55 to i8*', '%.pre = load i64, i64* %3, align 8', '%56 = phi i64 [ %.pre, %entry ], [ %137, %block_400545 ]', '%59 = add i64 %56, 3', 'store i64 %59, i64* %3, align 8', '%62 = zext i32 %61 to i64', 'store i64 %62, i64* %RAX.i26, align 8', '%64 = add i64 %56, 6', 'store i64 %64, i64* %3, align 8', '%68 = icmp ult i32 %61, %66', '%69 = zext i1 %68 to i8', 'store i8 %69, i8* %14, align 1', '%70 = and i32 %67, 255', '%71 = tail call i32 @llvm.ctpop.i32(i32 %70)', '%72 = trunc i32 %71 to i8', '%73 = and i8 %72, 1', '%74 = xor i8 %73, 1', 'store i8 %74, i8* %21, align 1', '%75 = xor i32 %66, %61', '%76 = xor i32 %75, %67', '%77 = lshr i32 %76, 4', '%78 = trunc i32 %77 to i8', '%79 = and i8 %78, 1', 'store i8 %79, i8* %27, align 1', '%80 = icmp eq i32 %67, 0', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %30, align 1', 'store i8 %83, i8* %33, align 1', '%90 = zext i1 %89 to i8', 'store i8 %90, i8* %39, align 1', '%.v = select i1 %92, i64 12, i64 46', '%93 = add i64 %56, %.v', 'store i64 %93, i64* %3, align 8', 'store i64 add (i64 ptrtoint (%G__0x400624_type* @G__0x400624 to i64), i64 204), i64* %RDI.i, align 8', 'store i8 0, i8* %AL.i, align 1', '%94 = add i64 %93, -293', '%95 = add i64 %93, 17', '%96 = load i64, i64* %6, align 8', '%97 = add i64 %96, -8', '%98 = inttoptr i64 %97 to i64*', 'store i64 %95, i64* %98, align 8', 'store i64 %97, i64* %6, align 8', 'store i64 %94, i64* %3, align 8', '%100 = load i64, i64* %RBP.i, align 8', '%101 = add i64 %100, -12', '%102 = load i32, i32* %EAX.i23, align 4', '%103 = load i64, i64* %3, align 8', '%104 = add i64 %103, 3', 'store i64 %104, i64* %3, align 8', '%105 = inttoptr i64 %101 to i32*', 'store i32 %102, i32* %105, align 4', '%106 = load i64, i64* %RBP.i, align 8', '%107 = add i64 %106, -8', '%108 = load i64, i64* %3, align 8', '%109 = add i64 %108, 3', 'store i64 %109, i64* %3, align 8', '%110 = inttoptr i64 %107 to i32*', '%111 = load i32, i32* %110, align 4', '%112 = add i32 %111, 1', '%113 = zext i32 %112 to i64', 'store i64 %113, i64* %RAX.i26, align 8', '%114 = icmp eq i32 %111, -1', '%115 = icmp eq i32 %112, 0', '%116 = or i1 %114, %115', '%117 = zext i1 %116 to i8', 'store i8 %117, i8* %14, align 1', '%118 = and i32 %112, 255', '%119 = tail call i32 @llvm.ctpop.i32(i32 %118)', '%120 = trunc i32 %119 to i8', '%121 = and i8 %120, 1', '%122 = xor i8 %121, 1', 'store i8 %122, i8* %21, align 1', '%123 = xor i32 %112, %111', '%124 = lshr i32 %123, 4', '%125 = trunc i32 %124 to i8', '%126 = and i8 %125, 1', 'store i8 %126, i8* %27, align 1', '%127 = zext i1 %115 to i8', 'store i8 %127, i8* %30, align 1', '%128 = lshr i32 %112, 31', '%129 = trunc i32 %128 to i8', 'store i8 %129, i8* %33, align 1', '%130 = lshr i32 %111, 31', '%131 = xor i32 %128, %130', '%132 = add nuw nsw i32 %131, %128', '%133 = icmp eq i32 %132, 2', '%134 = zext i1 %133 to i8', 'store i8 %134, i8* %39, align 1', '%135 = add i64 %108, 9', 'store i64 %135, i64* %3, align 8', 'store i32 %112, i32* %110, align 4', '%136 = load i64, i64* %3, align 8', '%137 = add i64 %136, -41', 'store i64 %137, i64* %3, align 8', '%138 = load i64, i64* %6, align 8', '%139 = add i64 %138, 16', 'store i64 %139, i64* %6, align 8', '%140 = icmp ugt i64 %138, -17', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %14, align 1', '%142 = trunc i64 %139 to i32', '%143 = and i32 %142, 255', '%144 = tail call i32 @llvm.ctpop.i32(i32 %143)', '%145 = trunc i32 %144 to i8', '%146 = and i8 %145, 1', '%147 = xor i8 %146, 1', 'store i8 %147, i8* %21, align 1', '%148 = xor i64 %138, 16', '%149 = xor i64 %148, %139', '%150 = lshr i64 %149, 4', '%151 = trunc i64 %150 to i8', '%152 = and i8 %151, 1', 'store i8 %152, i8* %27, align 1', '%153 = icmp eq i64 %139, 0', '%154 = zext i1 %153 to i8', 'store i8 %154, i8* %30, align 1', '%155 = lshr i64 %139, 63', '%156 = trunc i64 %155 to i8', 'store i8 %156, i8* %33, align 1', '%157 = lshr i64 %138, 63', '%158 = xor i64 %155, %157', '%159 = add nuw nsw i64 %158, %155', '%160 = icmp eq i64 %159, 2', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %39, align 1', '%162 = add i64 %93, 5', 'store i64 %162, i64* %3, align 8', '%163 = add i64 %138, 24', '%164 = inttoptr i64 %139 to i64*', '%165 = load i64, i64* %164, align 8', 'store i64 %165, i64* %RBP.i, align 8', 'store i64 %163, i64* %6, align 8', '%166 = add i64 %93, 6', 'store i64 %166, i64* %3, align 8', '%167 = inttoptr i64 %163 to i64*', '%168 = load i64, i64* %167, align 8', 'store i64 %168, i64* %3, align 8', '%169 = add i64 %138, 32', 'store i64 %169, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %40 to i32*
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = load i32, i32* %EDI.i, align 4
Found line to remove! %43 = add i64 %10, 10
Found line to remove! store i64 %43, i64* %3, align 8
Found line to remove! %44 = inttoptr i64 %41 to i32*
Found line to remove! store i32 %42, i32* %44, align 4
Keep: %45 = load i64, i64* %RBP.i, align 8
Keep: %46 = add i64 %45, -8
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 7
Found line to remove! store i64 %48, i64* %3, align 8
Keep: %49 = inttoptr i64 %46 to i32*
Keep: store i32 0, i32* %49, align 4
Keep: %50 = load i64, i64* %RBP.i, align 8
Keep: %51 = add i64 %50, -8
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 7
Found line to remove! store i64 %53, i64* %3, align 8
Keep: %54 = inttoptr i64 %51 to i32*
Keep: store i32 0, i32* %54, align 4
Found line to remove! %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
Found line to remove! %EAX.i23 = bitcast %union.anon* %55 to i32*
Found line to remove! %RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %55 to i8*
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_400539
Keep: 
Keep: block_.L_400539:                                  ; preds = %block_400545, %entry
Found line to remove! %56 = phi i64 [ %.pre, %entry ], [ %137, %block_400545 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %entry ], [ %99, %block_400545 ]
Keep: %57 = load i64, i64* %RBP.i, align 8
Keep: %58 = add i64 %57, -8
Found line to remove! %59 = add i64 %56, 3
Found line to remove! store i64 %59, i64* %3, align 8
Keep: %60 = inttoptr i64 %58 to i32*
Keep: %61 = load i32, i32* %60, align 4
Found line to remove! %62 = zext i32 %61 to i64
Found line to remove! store i64 %62, i64* %RAX.i26, align 8
Keep: %63 = add i64 %57, -4
Found line to remove! %64 = add i64 %56, 6
Found line to remove! store i64 %64, i64* %3, align 8
Keep: %65 = inttoptr i64 %63 to i32*
Keep: %66 = load i32, i32* %65, align 4
Keep: %67 = sub i32 %61, %66
Found line to remove! %68 = icmp ult i32 %61, %66
Found line to remove! %69 = zext i1 %68 to i8
Found line to remove! store i8 %69, i8* %14, align 1
Found line to remove! %70 = and i32 %67, 255
Found line to remove! %71 = tail call i32 @llvm.ctpop.i32(i32 %70)
Found line to remove! %72 = trunc i32 %71 to i8
Found line to remove! %73 = and i8 %72, 1
Found line to remove! %74 = xor i8 %73, 1
Found line to remove! store i8 %74, i8* %21, align 1
Found line to remove! %75 = xor i32 %66, %61
Found line to remove! %76 = xor i32 %75, %67
Found line to remove! %77 = lshr i32 %76, 4
Found line to remove! %78 = trunc i32 %77 to i8
Found line to remove! %79 = and i8 %78, 1
Found line to remove! store i8 %79, i8* %27, align 1
Found line to remove! %80 = icmp eq i32 %67, 0
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %30, align 1
Keep: %82 = lshr i32 %67, 31
Keep: %83 = trunc i32 %82 to i8
Found line to remove! store i8 %83, i8* %33, align 1
Keep: %84 = lshr i32 %61, 31
Keep: %85 = lshr i32 %66, 31
Keep: %86 = xor i32 %85, %84
Keep: %87 = xor i32 %82, %84
Keep: %88 = add nuw nsw i32 %87, %86
Keep: %89 = icmp eq i32 %88, 2
Found line to remove! %90 = zext i1 %89 to i8
Found line to remove! store i8 %90, i8* %39, align 1
Keep: %91 = icmp ne i8 %83, 0
Keep: %92 = xor i1 %91, %89
Found line to remove! %.v = select i1 %92, i64 12, i64 46
Found line to remove! %93 = add i64 %56, %.v
Found line to remove! store i64 %93, i64* %3, align 8
Keep: br i1 %92, label %block_400545, label %block_.L_400567
Keep: 
Keep: block_400545:                                     ; preds = %block_.L_400539
Found line to remove! store i64 add (i64 ptrtoint (%G__0x400624_type* @G__0x400624 to i64), i64 204), i64* %RDI.i, align 8
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %94 = add i64 %93, -293
Found line to remove! %95 = add i64 %93, 17
Found line to remove! %96 = load i64, i64* %6, align 8
Found line to remove! %97 = add i64 %96, -8
Found line to remove! %98 = inttoptr i64 %97 to i64*
Found line to remove! store i64 %95, i64* %98, align 8
Found line to remove! store i64 %97, i64* %6, align 8
Found line to remove! store i64 %94, i64* %3, align 8
Keep: %99 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.0)
Found line to remove! %100 = load i64, i64* %RBP.i, align 8
Found line to remove! %101 = add i64 %100, -12
Found line to remove! %102 = load i32, i32* %EAX.i23, align 4
Found line to remove! %103 = load i64, i64* %3, align 8
Found line to remove! %104 = add i64 %103, 3
Found line to remove! store i64 %104, i64* %3, align 8
Found line to remove! %105 = inttoptr i64 %101 to i32*
Found line to remove! store i32 %102, i32* %105, align 4
Found line to remove! %106 = load i64, i64* %RBP.i, align 8
Found line to remove! %107 = add i64 %106, -8
Found line to remove! %108 = load i64, i64* %3, align 8
Found line to remove! %109 = add i64 %108, 3
Found line to remove! store i64 %109, i64* %3, align 8
Found line to remove! %110 = inttoptr i64 %107 to i32*
Found line to remove! %111 = load i32, i32* %110, align 4
Found line to remove! %112 = add i32 %111, 1
Found line to remove! %113 = zext i32 %112 to i64
Found line to remove! store i64 %113, i64* %RAX.i26, align 8
Found line to remove! %114 = icmp eq i32 %111, -1
Found line to remove! %115 = icmp eq i32 %112, 0
Found line to remove! %116 = or i1 %114, %115
Found line to remove! %117 = zext i1 %116 to i8
Found line to remove! store i8 %117, i8* %14, align 1
Found line to remove! %118 = and i32 %112, 255
Found line to remove! %119 = tail call i32 @llvm.ctpop.i32(i32 %118)
Found line to remove! %120 = trunc i32 %119 to i8
Found line to remove! %121 = and i8 %120, 1
Found line to remove! %122 = xor i8 %121, 1
Found line to remove! store i8 %122, i8* %21, align 1
Found line to remove! %123 = xor i32 %112, %111
Found line to remove! %124 = lshr i32 %123, 4
Found line to remove! %125 = trunc i32 %124 to i8
Found line to remove! %126 = and i8 %125, 1
Found line to remove! store i8 %126, i8* %27, align 1
Found line to remove! %127 = zext i1 %115 to i8
Found line to remove! store i8 %127, i8* %30, align 1
Found line to remove! %128 = lshr i32 %112, 31
Found line to remove! %129 = trunc i32 %128 to i8
Found line to remove! store i8 %129, i8* %33, align 1
Found line to remove! %130 = lshr i32 %111, 31
Found line to remove! %131 = xor i32 %128, %130
Found line to remove! %132 = add nuw nsw i32 %131, %128
Found line to remove! %133 = icmp eq i32 %132, 2
Found line to remove! %134 = zext i1 %133 to i8
Found line to remove! store i8 %134, i8* %39, align 1
Found line to remove! %135 = add i64 %108, 9
Found line to remove! store i64 %135, i64* %3, align 8
Found line to remove! store i32 %112, i32* %110, align 4
Found line to remove! %136 = load i64, i64* %3, align 8
Found line to remove! %137 = add i64 %136, -41
Found line to remove! store i64 %137, i64* %3, align 8
Keep: br label %block_.L_400539
Keep: 
Keep: block_.L_400567:                                  ; preds = %block_.L_400539
Found line to remove! %138 = load i64, i64* %6, align 8
Found line to remove! %139 = add i64 %138, 16
Found line to remove! store i64 %139, i64* %6, align 8
Found line to remove! %140 = icmp ugt i64 %138, -17
Found line to remove! %141 = zext i1 %140 to i8
Found line to remove! store i8 %141, i8* %14, align 1
Found line to remove! %142 = trunc i64 %139 to i32
Found line to remove! %143 = and i32 %142, 255
Found line to remove! %144 = tail call i32 @llvm.ctpop.i32(i32 %143)
Found line to remove! %145 = trunc i32 %144 to i8
Found line to remove! %146 = and i8 %145, 1
Found line to remove! %147 = xor i8 %146, 1
Found line to remove! store i8 %147, i8* %21, align 1
Found line to remove! %148 = xor i64 %138, 16
Found line to remove! %149 = xor i64 %148, %139
Found line to remove! %150 = lshr i64 %149, 4
Found line to remove! %151 = trunc i64 %150 to i8
Found line to remove! %152 = and i8 %151, 1
Found line to remove! store i8 %152, i8* %27, align 1
Found line to remove! %153 = icmp eq i64 %139, 0
Found line to remove! %154 = zext i1 %153 to i8
Found line to remove! store i8 %154, i8* %30, align 1
Found line to remove! %155 = lshr i64 %139, 63
Found line to remove! %156 = trunc i64 %155 to i8
Found line to remove! store i8 %156, i8* %33, align 1
Found line to remove! %157 = lshr i64 %138, 63
Found line to remove! %158 = xor i64 %155, %157
Found line to remove! %159 = add nuw nsw i64 %158, %155
Found line to remove! %160 = icmp eq i64 %159, 2
Found line to remove! %161 = zext i1 %160 to i8
Found line to remove! store i8 %161, i8* %39, align 1
Found line to remove! %162 = add i64 %93, 5
Found line to remove! store i64 %162, i64* %3, align 8
Found line to remove! %163 = add i64 %138, 24
Found line to remove! %164 = inttoptr i64 %139 to i64*
Found line to remove! %165 = load i64, i64* %164, align 8
Found line to remove! store i64 %165, i64* %RBP.i, align 8
Found line to remove! store i64 %163, i64* %6, align 8
Found line to remove! %166 = add i64 %93, 6
Found line to remove! store i64 %166, i64* %3, align 8
Found line to remove! %167 = inttoptr i64 %163 to i64*
Found line to remove! %168 = load i64, i64* %167, align 8
Found line to remove! store i64 %168, i64* %3, align 8
Found line to remove! %169 = add i64 %138, 32
Found line to remove! store i64 %169, i64* %6, align 8
Keep: ret %struct.Memory* %MEMORY.0
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %40 to i32*', '%41 = add i64 %7, -12', '%42 = load i32, i32* %EDI.i, align 4', '%43 = add i64 %10, 10', 'store i64 %43, i64* %3, align 8', '%44 = inttoptr i64 %41 to i32*', 'store i32 %42, i32* %44, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 7', 'store i64 %48, i64* %3, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 7', 'store i64 %53, i64* %3, align 8', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i26 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%EAX.i23 = bitcast %union.anon* %55 to i32*', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0', '%AL.i = bitcast %union.anon* %55 to i8*', '%.pre = load i64, i64* %3, align 8', '%56 = phi i64 [ %.pre, %entry ], [ %137, %block_400545 ]', '%59 = add i64 %56, 3', 'store i64 %59, i64* %3, align 8', '%62 = zext i32 %61 to i64', 'store i64 %62, i64* %RAX.i26, align 8', '%64 = add i64 %56, 6', 'store i64 %64, i64* %3, align 8', '%68 = icmp ult i32 %61, %66', '%69 = zext i1 %68 to i8', 'store i8 %69, i8* %14, align 1', '%70 = and i32 %67, 255', '%71 = tail call i32 @llvm.ctpop.i32(i32 %70)', '%72 = trunc i32 %71 to i8', '%73 = and i8 %72, 1', '%74 = xor i8 %73, 1', 'store i8 %74, i8* %21, align 1', '%75 = xor i32 %66, %61', '%76 = xor i32 %75, %67', '%77 = lshr i32 %76, 4', '%78 = trunc i32 %77 to i8', '%79 = and i8 %78, 1', 'store i8 %79, i8* %27, align 1', '%80 = icmp eq i32 %67, 0', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %30, align 1', 'store i8 %83, i8* %33, align 1', '%90 = zext i1 %89 to i8', 'store i8 %90, i8* %39, align 1', '%.v = select i1 %92, i64 12, i64 46', '%93 = add i64 %56, %.v', 'store i64 %93, i64* %3, align 8', 'store i64 add (i64 ptrtoint (%G__0x400624_type* @G__0x400624 to i64), i64 204), i64* %RDI.i, align 8', 'store i8 0, i8* %AL.i, align 1', '%94 = add i64 %93, -293', '%95 = add i64 %93, 17', '%96 = load i64, i64* %6, align 8', '%97 = add i64 %96, -8', '%98 = inttoptr i64 %97 to i64*', 'store i64 %95, i64* %98, align 8', 'store i64 %97, i64* %6, align 8', 'store i64 %94, i64* %3, align 8', '%100 = load i64, i64* %RBP.i, align 8', '%101 = add i64 %100, -12', '%102 = load i32, i32* %EAX.i23, align 4', '%103 = load i64, i64* %3, align 8', '%104 = add i64 %103, 3', 'store i64 %104, i64* %3, align 8', '%105 = inttoptr i64 %101 to i32*', 'store i32 %102, i32* %105, align 4', '%106 = load i64, i64* %RBP.i, align 8', '%107 = add i64 %106, -8', '%108 = load i64, i64* %3, align 8', '%109 = add i64 %108, 3', 'store i64 %109, i64* %3, align 8', '%110 = inttoptr i64 %107 to i32*', '%111 = load i32, i32* %110, align 4', '%112 = add i32 %111, 1', '%113 = zext i32 %112 to i64', 'store i64 %113, i64* %RAX.i26, align 8', '%114 = icmp eq i32 %111, -1', '%115 = icmp eq i32 %112, 0', '%116 = or i1 %114, %115', '%117 = zext i1 %116 to i8', 'store i8 %117, i8* %14, align 1', '%118 = and i32 %112, 255', '%119 = tail call i32 @llvm.ctpop.i32(i32 %118)', '%120 = trunc i32 %119 to i8', '%121 = and i8 %120, 1', '%122 = xor i8 %121, 1', 'store i8 %122, i8* %21, align 1', '%123 = xor i32 %112, %111', '%124 = lshr i32 %123, 4', '%125 = trunc i32 %124 to i8', '%126 = and i8 %125, 1', 'store i8 %126, i8* %27, align 1', '%127 = zext i1 %115 to i8', 'store i8 %127, i8* %30, align 1', '%128 = lshr i32 %112, 31', '%129 = trunc i32 %128 to i8', 'store i8 %129, i8* %33, align 1', '%130 = lshr i32 %111, 31', '%131 = xor i32 %128, %130', '%132 = add nuw nsw i32 %131, %128', '%133 = icmp eq i32 %132, 2', '%134 = zext i1 %133 to i8', 'store i8 %134, i8* %39, align 1', '%135 = add i64 %108, 9', 'store i64 %135, i64* %3, align 8', 'store i32 %112, i32* %110, align 4', '%136 = load i64, i64* %3, align 8', '%137 = add i64 %136, -41', 'store i64 %137, i64* %3, align 8', '%138 = load i64, i64* %6, align 8', '%139 = add i64 %138, 16', 'store i64 %139, i64* %6, align 8', '%140 = icmp ugt i64 %138, -17', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %14, align 1', '%142 = trunc i64 %139 to i32', '%143 = and i32 %142, 255', '%144 = tail call i32 @llvm.ctpop.i32(i32 %143)', '%145 = trunc i32 %144 to i8', '%146 = and i8 %145, 1', '%147 = xor i8 %146, 1', 'store i8 %147, i8* %21, align 1', '%148 = xor i64 %138, 16', '%149 = xor i64 %148, %139', '%150 = lshr i64 %149, 4', '%151 = trunc i64 %150 to i8', '%152 = and i8 %151, 1', 'store i8 %152, i8* %27, align 1', '%153 = icmp eq i64 %139, 0', '%154 = zext i1 %153 to i8', 'store i8 %154, i8* %30, align 1', '%155 = lshr i64 %139, 63', '%156 = trunc i64 %155 to i8', 'store i8 %156, i8* %33, align 1', '%157 = lshr i64 %138, 63', '%158 = xor i64 %155, %157', '%159 = add nuw nsw i64 %158, %155', '%160 = icmp eq i64 %159, 2', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %39, align 1', '%162 = add i64 %93, 5', 'store i64 %162, i64* %3, align 8', '%163 = add i64 %138, 24', '%164 = inttoptr i64 %139 to i64*', '%165 = load i64, i64* %164, align 8', 'store i64 %165, i64* %RBP.i, align 8', 'store i64 %163, i64* %6, align 8', '%166 = add i64 %93, 6', 'store i64 %166, i64* %3, align 8', '%167 = inttoptr i64 %163 to i64*', '%168 = load i64, i64* %167, align 8', 'store i64 %168, i64* %3, align 8', '%169 = add i64 %138, 32', 'store i64 %169, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = load i32, i32* %EDI, align 4', '%42 = add i64 %10, 10', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %40 to i32*', 'store i32 %41, i32* %43, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 7', 'store i64 %47, i64* %PC, align 8', '%51 = load i64, i64* %PC, align 8', '%52 = add i64 %51, 7', 'store i64 %52, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%54 = load i64, i64* %RSP, align 8', '%55 = add i64 %54, 16', 'store i64 %55, i64* %RSP, align 8', '%56 = icmp ugt i64 %54, -17', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %14, align 1', '%58 = trunc i64 %55 to i32', '%59 = and i32 %58, 255', '%60 = tail call i32 @llvm.ctpop.i32(i32 %59) #12', '%61 = trunc i32 %60 to i8', '%62 = and i8 %61, 1', '%63 = xor i8 %62, 1', 'store i8 %63, i8* %21, align 1', '%64 = xor i64 %54, 16', '%65 = xor i64 %64, %55', '%66 = lshr i64 %65, 4', '%67 = trunc i64 %66 to i8', '%68 = and i8 %67, 1', 'store i8 %68, i8* %27, align 1', '%69 = icmp eq i64 %55, 0', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %30, align 1', '%71 = lshr i64 %55, 63', '%72 = trunc i64 %71 to i8', 'store i8 %72, i8* %33, align 1', '%73 = lshr i64 %54, 63', '%74 = xor i64 %71, %73', '%75 = add nuw nsw i64 %74, %71', '%76 = icmp eq i64 %75, 2', '%77 = zext i1 %76 to i8', 'store i8 %77, i8* %39, align 1', '%78 = add i64 %167, 5', 'store i64 %78, i64* %PC, align 8', '%79 = add i64 %54, 24', '%80 = inttoptr i64 %55 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %RBP, align 8', 'store i64 %79, i64* %RSP, align 8', '%82 = add i64 %167, 6', 'store i64 %82, i64* %PC, align 8', '%83 = inttoptr i64 %79 to i64*', '%84 = load i64, i64* %83, align 8', 'store i64 %84, i64* %PC, align 8', '%85 = add i64 %54, 32', 'store i64 %85, i64* %RSP, align 8', 'store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 4), i64* %RDI, align 8', 'store i8 0, i8* %AL, align 1', '%86 = add i64 %167, -293', '%87 = add i64 %167, 17', '%88 = load i64, i64* %RSP, align 8', '%89 = add i64 %88, -8', '%90 = inttoptr i64 %89 to i64*', 'store i64 %87, i64* %90, align 8', 'store i64 %89, i64* %RSP, align 8', 'store i64 %86, i64* %PC, align 8', '%92 = load i64, i64* %RBP, align 8', '%93 = add i64 %92, -12', '%94 = load i32, i32* %EAX, align 4', '%95 = load i64, i64* %PC, align 8', '%96 = add i64 %95, 3', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %93 to i32*', 'store i32 %94, i32* %97, align 4', '%98 = load i64, i64* %RBP, align 8', '%99 = add i64 %98, -8', '%100 = load i64, i64* %PC, align 8', '%101 = add i64 %100, 3', 'store i64 %101, i64* %PC, align 8', '%102 = inttoptr i64 %99 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = add i32 %103, 1', '%105 = zext i32 %104 to i64', 'store i64 %105, i64* %RAX, align 8', '%106 = icmp eq i32 %103, -1', '%107 = icmp eq i32 %104, 0', '%108 = or i1 %106, %107', '%109 = zext i1 %108 to i8', 'store i8 %109, i8* %14, align 1', '%110 = and i32 %104, 255', '%111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', '%114 = xor i8 %113, 1', 'store i8 %114, i8* %21, align 1', '%115 = xor i32 %104, %103', '%116 = lshr i32 %115, 4', '%117 = trunc i32 %116 to i8', '%118 = and i8 %117, 1', 'store i8 %118, i8* %27, align 1', '%119 = zext i1 %107 to i8', 'store i8 %119, i8* %30, align 1', '%120 = lshr i32 %104, 31', '%121 = trunc i32 %120 to i8', 'store i8 %121, i8* %33, align 1', '%122 = lshr i32 %103, 31', '%123 = xor i32 %120, %122', '%124 = add nuw nsw i32 %123, %120', '%125 = icmp eq i32 %124, 2', '%126 = zext i1 %125 to i8', 'store i8 %126, i8* %39, align 1', '%127 = add i64 %100, 9', 'store i64 %127, i64* %PC, align 8', 'store i32 %104, i32* %102, align 4', '%128 = load i64, i64* %PC, align 8', '%129 = add i64 %128, -41', 'store i64 %129, i64* %PC, align 8', '%130 = phi i64 [ %.pre, %block_400520 ], [ %129, %block_400545 ]', '%133 = add i64 %130, 3', 'store i64 %133, i64* %PC, align 8', '%136 = zext i32 %135 to i64', 'store i64 %136, i64* %RAX, align 8', '%138 = add i64 %130, 6', 'store i64 %138, i64* %PC, align 8', '%142 = icmp ult i32 %135, %140', '%143 = zext i1 %142 to i8', 'store i8 %143, i8* %14, align 1', '%144 = and i32 %141, 255', '%145 = tail call i32 @llvm.ctpop.i32(i32 %144) #12', '%146 = trunc i32 %145 to i8', '%147 = and i8 %146, 1', '%148 = xor i8 %147, 1', 'store i8 %148, i8* %21, align 1', '%149 = xor i32 %140, %135', '%150 = xor i32 %149, %141', '%151 = lshr i32 %150, 4', '%152 = trunc i32 %151 to i8', '%153 = and i8 %152, 1', 'store i8 %153, i8* %27, align 1', '%154 = icmp eq i32 %141, 0', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %30, align 1', 'store i8 %157, i8* %33, align 1', '%164 = zext i1 %163 to i8', 'store i8 %164, i8* %39, align 1', '%.v = select i1 %166, i64 12, i64 46', '%167 = add i64 %130, %.v', 'store i64 %167, i64* %PC, align 8'])
Keep: block_400520:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = load i32, i32* %EDI, align 4
Found line to remove! %42 = add i64 %10, 10
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %40 to i32*
Found line to remove! store i32 %41, i32* %43, align 4
Keep: %44 = load i64, i64* %RBP, align 8
Keep: %45 = add i64 %44, -8
Found line to remove! %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 7
Found line to remove! store i64 %47, i64* %PC, align 8
Keep: %48 = inttoptr i64 %45 to i32*
Keep: store i32 0, i32* %48, align 4
Keep: %49 = load i64, i64* %RBP, align 8
Keep: %50 = add i64 %49, -8
Found line to remove! %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 7
Found line to remove! store i64 %52, i64* %PC, align 8
Keep: %53 = inttoptr i64 %50 to i32*
Keep: store i32 0, i32* %53, align 4
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400539
Keep: 
Keep: block_400567:                                     ; preds = %block_400539
Found line to remove! %54 = load i64, i64* %RSP, align 8
Found line to remove! %55 = add i64 %54, 16
Found line to remove! store i64 %55, i64* %RSP, align 8
Found line to remove! %56 = icmp ugt i64 %54, -17
Found line to remove! %57 = zext i1 %56 to i8
Found line to remove! store i8 %57, i8* %14, align 1
Found line to remove! %58 = trunc i64 %55 to i32
Found line to remove! %59 = and i32 %58, 255
Found line to remove! %60 = tail call i32 @llvm.ctpop.i32(i32 %59) #12
Found line to remove! %61 = trunc i32 %60 to i8
Found line to remove! %62 = and i8 %61, 1
Found line to remove! %63 = xor i8 %62, 1
Found line to remove! store i8 %63, i8* %21, align 1
Found line to remove! %64 = xor i64 %54, 16
Found line to remove! %65 = xor i64 %64, %55
Found line to remove! %66 = lshr i64 %65, 4
Found line to remove! %67 = trunc i64 %66 to i8
Found line to remove! %68 = and i8 %67, 1
Found line to remove! store i8 %68, i8* %27, align 1
Found line to remove! %69 = icmp eq i64 %55, 0
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %30, align 1
Found line to remove! %71 = lshr i64 %55, 63
Found line to remove! %72 = trunc i64 %71 to i8
Found line to remove! store i8 %72, i8* %33, align 1
Found line to remove! %73 = lshr i64 %54, 63
Found line to remove! %74 = xor i64 %71, %73
Found line to remove! %75 = add nuw nsw i64 %74, %71
Found line to remove! %76 = icmp eq i64 %75, 2
Found line to remove! %77 = zext i1 %76 to i8
Found line to remove! store i8 %77, i8* %39, align 1
Found line to remove! %78 = add i64 %167, 5
Found line to remove! store i64 %78, i64* %PC, align 8
Found line to remove! %79 = add i64 %54, 24
Found line to remove! %80 = inttoptr i64 %55 to i64*
Found line to remove! %81 = load i64, i64* %80, align 8
Found line to remove! store i64 %81, i64* %RBP, align 8
Found line to remove! store i64 %79, i64* %RSP, align 8
Found line to remove! %82 = add i64 %167, 6
Found line to remove! store i64 %82, i64* %PC, align 8
Found line to remove! %83 = inttoptr i64 %79 to i64*
Found line to remove! %84 = load i64, i64* %83, align 8
Found line to remove! store i64 %84, i64* %PC, align 8
Found line to remove! %85 = add i64 %54, 32
Found line to remove! store i64 %85, i64* %RSP, align 8
Keep: ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_400545:                                     ; preds = %block_400539
Found line to remove! store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %86 = add i64 %167, -293
Found line to remove! %87 = add i64 %167, 17
Found line to remove! %88 = load i64, i64* %RSP, align 8
Found line to remove! %89 = add i64 %88, -8
Found line to remove! %90 = inttoptr i64 %89 to i64*
Found line to remove! store i64 %87, i64* %90, align 8
Found line to remove! store i64 %89, i64* %RSP, align 8
Found line to remove! store i64 %86, i64* %PC, align 8
Keep: %91 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
Found line to remove! %92 = load i64, i64* %RBP, align 8
Found line to remove! %93 = add i64 %92, -12
Found line to remove! %94 = load i32, i32* %EAX, align 4
Found line to remove! %95 = load i64, i64* %PC, align 8
Found line to remove! %96 = add i64 %95, 3
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %93 to i32*
Found line to remove! store i32 %94, i32* %97, align 4
Found line to remove! %98 = load i64, i64* %RBP, align 8
Found line to remove! %99 = add i64 %98, -8
Found line to remove! %100 = load i64, i64* %PC, align 8
Found line to remove! %101 = add i64 %100, 3
Found line to remove! store i64 %101, i64* %PC, align 8
Found line to remove! %102 = inttoptr i64 %99 to i32*
Found line to remove! %103 = load i32, i32* %102, align 4
Found line to remove! %104 = add i32 %103, 1
Found line to remove! %105 = zext i32 %104 to i64
Found line to remove! store i64 %105, i64* %RAX, align 8
Found line to remove! %106 = icmp eq i32 %103, -1
Found line to remove! %107 = icmp eq i32 %104, 0
Found line to remove! %108 = or i1 %106, %107
Found line to remove! %109 = zext i1 %108 to i8
Found line to remove! store i8 %109, i8* %14, align 1
Found line to remove! %110 = and i32 %104, 255
Found line to remove! %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
Found line to remove! %112 = trunc i32 %111 to i8
Found line to remove! %113 = and i8 %112, 1
Found line to remove! %114 = xor i8 %113, 1
Found line to remove! store i8 %114, i8* %21, align 1
Found line to remove! %115 = xor i32 %104, %103
Found line to remove! %116 = lshr i32 %115, 4
Found line to remove! %117 = trunc i32 %116 to i8
Found line to remove! %118 = and i8 %117, 1
Found line to remove! store i8 %118, i8* %27, align 1
Found line to remove! %119 = zext i1 %107 to i8
Found line to remove! store i8 %119, i8* %30, align 1
Found line to remove! %120 = lshr i32 %104, 31
Found line to remove! %121 = trunc i32 %120 to i8
Found line to remove! store i8 %121, i8* %33, align 1
Found line to remove! %122 = lshr i32 %103, 31
Found line to remove! %123 = xor i32 %120, %122
Found line to remove! %124 = add nuw nsw i32 %123, %120
Found line to remove! %125 = icmp eq i32 %124, 2
Found line to remove! %126 = zext i1 %125 to i8
Found line to remove! store i8 %126, i8* %39, align 1
Found line to remove! %127 = add i64 %100, 9
Found line to remove! store i64 %127, i64* %PC, align 8
Found line to remove! store i32 %104, i32* %102, align 4
Found line to remove! %128 = load i64, i64* %PC, align 8
Found line to remove! %129 = add i64 %128, -41
Found line to remove! store i64 %129, i64* %PC, align 8
Keep: br label %block_400539
Keep: 
Keep: block_400539:                                     ; preds = %block_400545, %block_400520
Found line to remove! %130 = phi i64 [ %.pre, %block_400520 ], [ %129, %block_400545 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_400520 ], [ %91, %block_400545 ]
Keep: %131 = load i64, i64* %RBP, align 8
Keep: %132 = add i64 %131, -8
Found line to remove! %133 = add i64 %130, 3
Found line to remove! store i64 %133, i64* %PC, align 8
Keep: %134 = inttoptr i64 %132 to i32*
Keep: %135 = load i32, i32* %134, align 4
Found line to remove! %136 = zext i32 %135 to i64
Found line to remove! store i64 %136, i64* %RAX, align 8
Keep: %137 = add i64 %131, -4
Found line to remove! %138 = add i64 %130, 6
Found line to remove! store i64 %138, i64* %PC, align 8
Keep: %139 = inttoptr i64 %137 to i32*
Keep: %140 = load i32, i32* %139, align 4
Keep: %141 = sub i32 %135, %140
Found line to remove! %142 = icmp ult i32 %135, %140
Found line to remove! %143 = zext i1 %142 to i8
Found line to remove! store i8 %143, i8* %14, align 1
Found line to remove! %144 = and i32 %141, 255
Found line to remove! %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #12
Found line to remove! %146 = trunc i32 %145 to i8
Found line to remove! %147 = and i8 %146, 1
Found line to remove! %148 = xor i8 %147, 1
Found line to remove! store i8 %148, i8* %21, align 1
Found line to remove! %149 = xor i32 %140, %135
Found line to remove! %150 = xor i32 %149, %141
Found line to remove! %151 = lshr i32 %150, 4
Found line to remove! %152 = trunc i32 %151 to i8
Found line to remove! %153 = and i8 %152, 1
Found line to remove! store i8 %153, i8* %27, align 1
Found line to remove! %154 = icmp eq i32 %141, 0
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %30, align 1
Keep: %156 = lshr i32 %141, 31
Keep: %157 = trunc i32 %156 to i8
Found line to remove! store i8 %157, i8* %33, align 1
Keep: %158 = lshr i32 %135, 31
Keep: %159 = lshr i32 %140, 31
Keep: %160 = xor i32 %159, %158
Keep: %161 = xor i32 %156, %158
Keep: %162 = add nuw nsw i32 %161, %160
Keep: %163 = icmp eq i32 %162, 2
Found line to remove! %164 = zext i1 %163 to i8
Found line to remove! store i8 %164, i8* %39, align 1
Keep: %165 = icmp ne i8 %157, 0
Keep: %166 = xor i1 %165, %163
Found line to remove! %.v = select i1 %166, i64 12, i64 46
Found line to remove! %167 = add i64 %130, %.v
Found line to remove! store i64 %167, i64* %PC, align 8
Keep: br i1 %166, label %block_400545, label %block_400567
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = load i32, i32* %EDI, align 4', '%42 = add i64 %10, 10', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %40 to i32*', 'store i32 %41, i32* %43, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 7', 'store i64 %47, i64* %PC, align 8', '%51 = load i64, i64* %PC, align 8', '%52 = add i64 %51, 7', 'store i64 %52, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%54 = load i64, i64* %RSP, align 8', '%55 = add i64 %54, 16', 'store i64 %55, i64* %RSP, align 8', '%56 = icmp ugt i64 %54, -17', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %14, align 1', '%58 = trunc i64 %55 to i32', '%59 = and i32 %58, 255', '%60 = tail call i32 @llvm.ctpop.i32(i32 %59) #12', '%61 = trunc i32 %60 to i8', '%62 = and i8 %61, 1', '%63 = xor i8 %62, 1', 'store i8 %63, i8* %21, align 1', '%64 = xor i64 %54, 16', '%65 = xor i64 %64, %55', '%66 = lshr i64 %65, 4', '%67 = trunc i64 %66 to i8', '%68 = and i8 %67, 1', 'store i8 %68, i8* %27, align 1', '%69 = icmp eq i64 %55, 0', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %30, align 1', '%71 = lshr i64 %55, 63', '%72 = trunc i64 %71 to i8', 'store i8 %72, i8* %33, align 1', '%73 = lshr i64 %54, 63', '%74 = xor i64 %71, %73', '%75 = add nuw nsw i64 %74, %71', '%76 = icmp eq i64 %75, 2', '%77 = zext i1 %76 to i8', 'store i8 %77, i8* %39, align 1', '%78 = add i64 %167, 5', 'store i64 %78, i64* %PC, align 8', '%79 = add i64 %54, 24', '%80 = inttoptr i64 %55 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %RBP, align 8', 'store i64 %79, i64* %RSP, align 8', '%82 = add i64 %167, 6', 'store i64 %82, i64* %PC, align 8', '%83 = inttoptr i64 %79 to i64*', '%84 = load i64, i64* %83, align 8', 'store i64 %84, i64* %PC, align 8', '%85 = add i64 %54, 32', 'store i64 %85, i64* %RSP, align 8', 'store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 4), i64* %RDI, align 8', 'store i8 0, i8* %AL, align 1', '%86 = add i64 %167, -293', '%87 = add i64 %167, 17', '%88 = load i64, i64* %RSP, align 8', '%89 = add i64 %88, -8', '%90 = inttoptr i64 %89 to i64*', 'store i64 %87, i64* %90, align 8', 'store i64 %89, i64* %RSP, align 8', 'store i64 %86, i64* %PC, align 8', '%92 = load i64, i64* %RBP, align 8', '%93 = add i64 %92, -12', '%94 = load i32, i32* %EAX, align 4', '%95 = load i64, i64* %PC, align 8', '%96 = add i64 %95, 3', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %93 to i32*', 'store i32 %94, i32* %97, align 4', '%98 = load i64, i64* %RBP, align 8', '%99 = add i64 %98, -8', '%100 = load i64, i64* %PC, align 8', '%101 = add i64 %100, 3', 'store i64 %101, i64* %PC, align 8', '%102 = inttoptr i64 %99 to i32*', '%103 = load i32, i32* %102, align 4', '%104 = add i32 %103, 1', '%105 = zext i32 %104 to i64', 'store i64 %105, i64* %RAX, align 8', '%106 = icmp eq i32 %103, -1', '%107 = icmp eq i32 %104, 0', '%108 = or i1 %106, %107', '%109 = zext i1 %108 to i8', 'store i8 %109, i8* %14, align 1', '%110 = and i32 %104, 255', '%111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', '%114 = xor i8 %113, 1', 'store i8 %114, i8* %21, align 1', '%115 = xor i32 %104, %103', '%116 = lshr i32 %115, 4', '%117 = trunc i32 %116 to i8', '%118 = and i8 %117, 1', 'store i8 %118, i8* %27, align 1', '%119 = zext i1 %107 to i8', 'store i8 %119, i8* %30, align 1', '%120 = lshr i32 %104, 31', '%121 = trunc i32 %120 to i8', 'store i8 %121, i8* %33, align 1', '%122 = lshr i32 %103, 31', '%123 = xor i32 %120, %122', '%124 = add nuw nsw i32 %123, %120', '%125 = icmp eq i32 %124, 2', '%126 = zext i1 %125 to i8', 'store i8 %126, i8* %39, align 1', '%127 = add i64 %100, 9', 'store i64 %127, i64* %PC, align 8', 'store i32 %104, i32* %102, align 4', '%128 = load i64, i64* %PC, align 8', '%129 = add i64 %128, -41', 'store i64 %129, i64* %PC, align 8', '%130 = phi i64 [ %.pre, %block_400520 ], [ %129, %block_400545 ]', '%133 = add i64 %130, 3', 'store i64 %133, i64* %PC, align 8', '%136 = zext i32 %135 to i64', 'store i64 %136, i64* %RAX, align 8', '%138 = add i64 %130, 6', 'store i64 %138, i64* %PC, align 8', '%142 = icmp ult i32 %135, %140', '%143 = zext i1 %142 to i8', 'store i8 %143, i8* %14, align 1', '%144 = and i32 %141, 255', '%145 = tail call i32 @llvm.ctpop.i32(i32 %144) #12', '%146 = trunc i32 %145 to i8', '%147 = and i8 %146, 1', '%148 = xor i8 %147, 1', 'store i8 %148, i8* %21, align 1', '%149 = xor i32 %140, %135', '%150 = xor i32 %149, %141', '%151 = lshr i32 %150, 4', '%152 = trunc i32 %151 to i8', '%153 = and i8 %152, 1', 'store i8 %153, i8* %27, align 1', '%154 = icmp eq i32 %141, 0', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %30, align 1', 'store i8 %157, i8* %33, align 1', '%164 = zext i1 %163 to i8', 'store i8 %164, i8* %39, align 1', '%.v = select i1 %166, i64 12, i64 46', '%167 = add i64 %130, %.v', 'store i64 %167, i64* %PC, align 8'])Writing '/tmp/tmpsbd7ft8k.dot'...
Writing '/tmp/tmpsbd7ft8k.dot':Done

Reading LLVM: /tmp/tmpykeujz9r-query.ll
Extracting function [func] from /tmp/tmpykeujz9r-query.ll
Dot file generated!
Writing '/tmp/tmppc1n_487.dot'...
Writing '/tmp/tmppc1n_487.dot':Done

Reading LLVM: /tmp/tmpgl1obza7-target.ll
Extracting function [func] from /tmp/tmpgl1obza7-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_45 = load i64, i64* %RBP.i, align 8
- 2 %var_2_46 = add i64 %var_2_45, -8
- 3 %var_2_49 = inttoptr i64 %var_2_46 to i32*
- 4 store i32 0, i32* %var_2_49, align 4
- 5 %var_2_50 = load i64, i64* %RBP.i, align 8
- 6 %var_2_51 = add i64 %var_2_50, -8
- 7 %var_2_54 = inttoptr i64 %var_2_51 to i32*
- 8 store i32 0, i32* %var_2_54, align 4
- 9 %var_2_571 = load i64, i64* %RBP.i, align 8
- 10 %var_2_582 = add i64 %var_2_571, -8
- 11 %var_2_603 = inttoptr i64 %var_2_582 to i32*
- 12 %var_2_614 = load i32, i32* %var_2_603, align 4
- 13 %var_2_635 = add i64 %var_2_571, -4
- 14 %var_2_656 = inttoptr i64 %var_2_635 to i32*
- 15 %var_2_667 = load i32, i32* %var_2_656, align 4
- 16 %var_2_678 = sub i32 %var_2_614, %var_2_667
- 17 %var_2_829 = lshr i32 %var_2_678, 31
- 18 %var_2_8410 = lshr i32 %var_2_614, 31
- 19 %var_2_8511 = lshr i32 %var_2_667, 31
- 20 %var_2_8612 = xor i32 %var_2_8511, %var_2_8410
- 21 %var_2_8713 = xor i32 %var_2_829, %var_2_8410
- 22 %var_2_8814 = add nuw nsw i32 %var_2_8713, %var_2_8612
- 23 %var_2_8915 = icmp eq i32 %var_2_8814, 2
- 24 %var_2_9116 = icmp ne i32 %var_2_829, 0
- 25 %var_2_9217 = xor i1 %var_2_9116, %var_2_8915
- 26 \<badref\> = br i1 %var_2_9217, label %block_400545.preheader, label %block_.L_400567
- 27 \<badref\> = br label %block_400545
- 28 %MEMORY.018 = phi %struct.Memory* [ %var_2_99, %block_400545 ], [ %2, %block_400545.preheader ]
- 29 %var_2_99 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.018)
- 30 %var_2_57 = load i64, i64* %RBP.i, align 8
- 31 %var_2_58 = add i64 %var_2_57, -8
- 32 %var_2_60 = inttoptr i64 %var_2_58 to i32*
- 33 %var_2_61 = load i32, i32* %var_2_60, align 4
- 34 %var_2_63 = add i64 %var_2_57, -4
- 35 %var_2_65 = inttoptr i64 %var_2_63 to i32*
- 36 %var_2_66 = load i32, i32* %var_2_65, align 4
- 37 %var_2_67 = sub i32 %var_2_61, %var_2_66
- 38 %var_2_82 = lshr i32 %var_2_67, 31
- 39 %var_2_84 = lshr i32 %var_2_61, 31
- 40 %var_2_85 = lshr i32 %var_2_66, 31
- 41 %var_2_86 = xor i32 %var_2_85, %var_2_84
- 42 %var_2_87 = xor i32 %var_2_82, %var_2_84
- 43 %var_2_88 = add nuw nsw i32 %var_2_87, %var_2_86
- 44 %var_2_89 = icmp eq i32 %var_2_88, 2
- 45 %var_2_91 = icmp ne i32 %var_2_82, 0
- 46 %var_2_92 = xor i1 %var_2_91, %var_2_89
- 47 \<badref\> = br i1 %var_2_92, label %block_400545, label %block_.L_400567.loopexit
- 48 \<badref\> = br label %block_.L_400567
- 49 %MEMORY.0.lcssa = phi %struct.Memory* [ %2, %entry ], [ %var_2_99, %block_.L_400567.loopexit ]
- 50 \<badref\> = ret %struct.Memory* %MEMORY.0.lcssa
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbc441268>, {0: {0}, 1: {1, 33, 36, 5, 39, 9, 12, 15}, 2: {2, 10, 34, 6}, 3: {35, 3, 38, 7, 11, 14}, 4: {8, 4}, 5: {1, 33, 36, 5, 39, 9, 12, 15}, 6: {2, 10, 34, 6}, 7: {35, 3, 38, 7, 11, 14}, 8: {8, 4}, 9: {1, 33, 36, 5, 39, 9, 12, 15}, 10: {2, 10, 34, 6}, 11: {35, 3, 38, 7, 11, 14}, 12: {1, 33, 36, 5, 39, 9, 12, 15}, 13: {37, 13}, 14: {35, 3, 38, 7, 11, 14}, 15: {1, 33, 36, 5, 39, 9, 12, 15}, 16: {16, 40}, 17: {41, 42, 43, 17, 18, 19}, 18: {41, 42, 43, 17, 18, 19}, 19: {41, 42, 43, 17, 18, 19}, 20: {44, 45, 49, 20, 21, 25}, 21: {44, 45, 49, 20, 21, 25}, 22: {46, 22}, 23: {47, 23}, 24: {24, 48}, 25: {44, 45, 49, 20, 21, 25}, 26: {26, 50}, 27: {27, 28}, 28: {29, 31}, 29: {32}, 30: {1, 33, 36, 5, 39, 9, 12, 15}, 31: {2, 10, 34, 6}, 32: {35, 3, 38, 7, 11, 14}, 33: {1, 33, 36, 5, 39, 9, 12, 15}, 34: {37, 13}, 35: {35, 3, 38, 7, 11, 14}, 36: {1, 33, 36, 5, 39, 9, 12, 15}, 37: {16, 40}, 38: {41, 42, 43, 17, 18, 19}, 39: {41, 42, 43, 17, 18, 19}, 40: {41, 42, 43, 17, 18, 19}, 41: {44, 45, 49, 20, 21, 25}, 42: {44, 45, 49, 20, 21, 25}, 43: {46, 22}, 44: {47, 23}, 45: {24, 48}, 46: {44, 45, 49, 20, 21, 25}, 47: {26, 50}, 48: {27, 28}, 49: {29, 31}, 50: {30}})
Equivalent! frozenset({1, 5}) {1, 5}
Equivalent! frozenset({2, 6}) {2, 6}
Equivalent! frozenset({3, 7}) {3, 7}
Equivalent! frozenset({8, 4}) {8, 4}
Equivalent! frozenset({33, 9}) {9, 30}
Equivalent! frozenset({34, 10}) {10, 31}
Equivalent! frozenset({35, 11}) {32, 11}
Equivalent! frozenset({36, 12}) {33, 12}
Equivalent! frozenset({37, 13}) {34, 13}
Equivalent! frozenset({38, 14}) {35, 14}
Equivalent! frozenset({39, 15}) {36, 15}
Equivalent! frozenset({40, 16}) {16, 37}
Equivalent! frozenset({41, 17}) {17, 38}
Equivalent! frozenset({42, 18}) {18, 39}
Equivalent! frozenset({43, 19}) {40, 19}
Equivalent! frozenset({44, 20}) {41, 20}
Equivalent! frozenset({45, 21}) {42, 21}
Equivalent! frozenset({46, 22}) {43, 22}
Equivalent! frozenset({47, 23}) {44, 23}
Equivalent! frozenset({48, 24}) {24, 45}
Equivalent! frozenset({49, 25}) {25, 46}
Equivalent! frozenset({50, 26}) {26, 47}
Equivalent! frozenset({27, 28}) {48, 27}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbc441268>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {33}, 10: {34}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {40}, 17: {41}, 18: {42}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {48}, 25: {49}, 26: {50}, 27: {28}, 28: {31}, 29: {32}, 30: {9}, 31: {10}, 32: {35}, 33: {36}, 34: {37}, 35: {38}, 36: {39}, 37: {16}, 38: {17}, 39: {18}, 40: {43}, 41: {44}, 42: {45}, 43: {46}, 44: {47}, 45: {24}, 46: {25}, 47: {26}, 48: {27}, 49: {29}, 50: {30}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 load load
EXACT 16 sub sub
EXACT 17 lshr lshr
EXACT 18 lshr lshr
EXACT 19 lshr lshr
EXACT 20 xor xor
EXACT 21 xor xor
EXACT 22 add add
EXACT 23 icmp icmp
EXACT 24 icmp icmp
EXACT 25 xor xor
EXACT 26 br br
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 tail tail
EXACT 30 load load
EXACT 31 add add
EXACT 32 inttoptr inttoptr
EXACT 33 load load
EXACT 34 add add
EXACT 35 inttoptr inttoptr
EXACT 36 load load
EXACT 37 sub sub
EXACT 38 lshr lshr
EXACT 39 lshr lshr
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 icmp icmp
EXACT 46 xor xor
EXACT 47 br br
EXACT 48 br br
EXACT 49 phi phi
EXACT 50 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_44 = load i64, i64* %RBP, align 8
- 2 %var_2_45 = add i64 %var_2_44, -8
- 3 %var_2_48 = inttoptr i64 %var_2_45 to i32*
- 4 store i32 0, i32* %var_2_48, align 4
- 5 %var_2_49 = load i64, i64* %RBP, align 8
- 6 %var_2_50 = add i64 %var_2_49, -8
- 7 %var_2_53 = inttoptr i64 %var_2_50 to i32*
- 8 store i32 0, i32* %var_2_53, align 4
- 9 %var_2_1311 = load i64, i64* %RBP, align 8
- 10 %var_2_1322 = add i64 %var_2_1311, -8
- 11 %var_2_1343 = inttoptr i64 %var_2_1322 to i32*
- 12 %var_2_1354 = load i32, i32* %var_2_1343, align 4
- 13 %var_2_1375 = add i64 %var_2_1311, -4
- 14 %var_2_1396 = inttoptr i64 %var_2_1375 to i32*
- 15 %var_2_1407 = load i32, i32* %var_2_1396, align 4
- 16 %var_2_1418 = sub i32 %var_2_1354, %var_2_1407
- 17 %var_2_1569 = lshr i32 %var_2_1418, 31
- 18 %var_2_15810 = lshr i32 %var_2_1354, 31
- 19 %var_2_15911 = lshr i32 %var_2_1407, 31
- 20 %var_2_16012 = xor i32 %var_2_15911, %var_2_15810
- 21 %var_2_16113 = xor i32 %var_2_1569, %var_2_15810
- 22 %var_2_16214 = add nuw nsw i32 %var_2_16113, %var_2_16012
- 23 %var_2_16315 = icmp eq i32 %var_2_16214, 2
- 24 %var_2_16516 = icmp ne i32 %var_2_1569, 0
- 25 %var_2_16617 = xor i1 %var_2_16516, %var_2_16315
- 26 \<badref\> = br i1 %var_2_16617, label %block_400545.preheader, label %block_400567
- 27 \<badref\> = br label %block_400545
- 28 \<badref\> = br label %block_400567
- 29 %MEMORY.0.lcssa = phi %struct.Memory* [ %2, %block_400520 ], [ %var_2_91, %block_400567.loopexit ]
- 30 \<badref\> = ret %struct.Memory* %MEMORY.0.lcssa
- 31 %MEMORY.018 = phi %struct.Memory* [ %var_2_91, %block_400545 ], [ %2, %block_400545.preheader ]
- 32 %var_2_91 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.018)
- 33 %var_2_131 = load i64, i64* %RBP, align 8
- 34 %var_2_132 = add i64 %var_2_131, -8
- 35 %var_2_134 = inttoptr i64 %var_2_132 to i32*
- 36 %var_2_135 = load i32, i32* %var_2_134, align 4
- 37 %var_2_137 = add i64 %var_2_131, -4
- 38 %var_2_139 = inttoptr i64 %var_2_137 to i32*
- 39 %var_2_140 = load i32, i32* %var_2_139, align 4
- 40 %var_2_141 = sub i32 %var_2_135, %var_2_140
- 41 %var_2_156 = lshr i32 %var_2_141, 31
- 42 %var_2_158 = lshr i32 %var_2_135, 31
- 43 %var_2_159 = lshr i32 %var_2_140, 31
- 44 %var_2_160 = xor i32 %var_2_159, %var_2_158
- 45 %var_2_161 = xor i32 %var_2_156, %var_2_158
- 46 %var_2_162 = add nuw nsw i32 %var_2_161, %var_2_160
- 47 %var_2_163 = icmp eq i32 %var_2_162, 2
- 48 %var_2_165 = icmp ne i32 %var_2_156, 0
- 49 %var_2_166 = xor i1 %var_2_165, %var_2_163
- 50 \<badref\> = br i1 %var_2_166, label %block_400545, label %block_400567.loopexit
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbd1cebf8>, {0: {0}, 1: {1, 33, 36, 5, 9, 12, 15, 30}, 2: {2, 10, 6, 31}, 3: {32, 3, 35, 7, 11, 14}, 4: {8, 4}, 5: {1, 33, 36, 5, 9, 12, 15, 30}, 6: {2, 10, 6, 31}, 7: {32, 3, 35, 7, 11, 14}, 8: {8, 4}, 9: {1, 33, 36, 5, 9, 12, 15, 30}, 10: {2, 10, 6, 31}, 11: {32, 3, 35, 7, 11, 14}, 12: {1, 33, 36, 5, 9, 12, 15, 30}, 13: {34, 13}, 14: {32, 3, 35, 7, 11, 14}, 15: {1, 33, 36, 5, 9, 12, 15, 30}, 16: {16, 37}, 17: {38, 39, 40, 17, 18, 19}, 18: {38, 39, 40, 17, 18, 19}, 19: {38, 39, 40, 17, 18, 19}, 20: {41, 42, 46, 20, 21, 25}, 21: {41, 42, 46, 20, 21, 25}, 22: {43, 22}, 23: {44, 23}, 24: {24, 45}, 25: {41, 42, 46, 20, 21, 25}, 26: {26, 47}, 27: {48, 27}, 28: {48, 27}, 29: {49, 28}, 30: {50}, 31: {49, 28}, 32: {29}, 33: {1, 33, 36, 5, 9, 12, 15, 30}, 34: {2, 10, 6, 31}, 35: {32, 3, 35, 7, 11, 14}, 36: {1, 33, 36, 5, 9, 12, 15, 30}, 37: {34, 13}, 38: {32, 3, 35, 7, 11, 14}, 39: {1, 33, 36, 5, 9, 12, 15, 30}, 40: {16, 37}, 41: {38, 39, 40, 17, 18, 19}, 42: {38, 39, 40, 17, 18, 19}, 43: {38, 39, 40, 17, 18, 19}, 44: {41, 42, 46, 20, 21, 25}, 45: {41, 42, 46, 20, 21, 25}, 46: {43, 22}, 47: {44, 23}, 48: {24, 45}, 49: {41, 42, 46, 20, 21, 25}, 50: {26, 47}})
Equivalent! frozenset({1, 5}) {1, 5}
Equivalent! frozenset({2, 6}) {2, 6}
Equivalent! frozenset({3, 7}) {3, 7}
Equivalent! frozenset({8, 4}) {8, 4}
Equivalent! frozenset({9, 30}) {9, 33}
Equivalent! frozenset({10, 31}) {10, 34}
Equivalent! frozenset({32, 11}) {35, 11}
Equivalent! frozenset({33, 12}) {12, 36}
Equivalent! frozenset({34, 13}) {37, 13}
Equivalent! frozenset({35, 14}) {38, 14}
Equivalent! frozenset({36, 15}) {39, 15}
Equivalent! frozenset({16, 37}) {16, 40}
Equivalent! frozenset({17, 38}) {17, 41}
Equivalent! frozenset({18, 39}) {18, 42}
Equivalent! frozenset({40, 19}) {43, 19}
Equivalent! frozenset({41, 20}) {20, 44}
Equivalent! frozenset({42, 21}) {45, 21}
Equivalent! frozenset({43, 22}) {46, 22}
Equivalent! frozenset({44, 23}) {47, 23}
Equivalent! frozenset({24, 45}) {24, 48}
Equivalent! frozenset({25, 46}) {25, 49}
Equivalent! frozenset({26, 47}) {26, 50}
Equivalent! frozenset({48, 27}) {27, 28}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fcfbd1cebf8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {33}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {41}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {48}, 28: {27}, 29: {49}, 30: {50}, 31: {28}, 32: {29}, 33: {30}, 34: {31}, 35: {32}, 36: {12}, 37: {34}, 38: {35}, 39: {36}, 40: {37}, 41: {38}, 42: {39}, 43: {40}, 44: {20}, 45: {42}, 46: {43}, 47: {44}, 48: {45}, 49: {46}, 50: {47}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 load load
EXACT 16 sub sub
EXACT 17 lshr lshr
EXACT 18 lshr lshr
EXACT 19 lshr lshr
EXACT 20 xor xor
EXACT 21 xor xor
EXACT 22 add add
EXACT 23 icmp icmp
EXACT 24 icmp icmp
EXACT 25 xor xor
EXACT 26 br br
EXACT 27 br br
EXACT 28 br br
EXACT 29 phi phi
EXACT 30 ret ret
EXACT 31 phi phi
EXACT 32 tail tail
EXACT 33 load load
EXACT 34 add add
EXACT 35 inttoptr inttoptr
EXACT 36 load load
EXACT 37 add add
EXACT 38 inttoptr inttoptr
EXACT 39 load load
EXACT 40 sub sub
EXACT 41 lshr lshr
EXACT 42 lshr lshr
EXACT 43 lshr lshr
EXACT 44 xor xor
EXACT 45 xor xor
EXACT 46 add add
EXACT 47 icmp icmp
EXACT 48 icmp icmp
EXACT 49 xor xor
EXACT 50 br br
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_45 = load i64, i64* %RBP.i, align 8', '%var_2_46 = add i64 %var_2_45, -8', '%var_2_49 = inttoptr i64 %var_2_46 to i32*', 'store i32 0, i32* %var_2_49, align 4', '%var_2_50 = load i64, i64* %RBP.i, align 8', '%var_2_51 = add i64 %var_2_50, -8', '%var_2_54 = inttoptr i64 %var_2_51 to i32*', 'store i32 0, i32* %var_2_54, align 4'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_45 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_46 = add i64 %var_2_45, -8
Found line to remove! %var_2_49 = inttoptr i64 %var_2_46 to i32*
Found line to remove! store i32 0, i32* %var_2_49, align 4
Found line to remove! %var_2_50 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_51 = add i64 %var_2_50, -8
Found line to remove! %var_2_54 = inttoptr i64 %var_2_51 to i32*
Found line to remove! store i32 0, i32* %var_2_54, align 4
Keep: %var_2_571 = load i64, i64* %RBP.i, align 8
Keep: %var_2_582 = add i64 %var_2_571, -8
Keep: %var_2_603 = inttoptr i64 %var_2_582 to i32*
Keep: %var_2_614 = load i32, i32* %var_2_603, align 4
Keep: %var_2_635 = add i64 %var_2_571, -4
Keep: %var_2_656 = inttoptr i64 %var_2_635 to i32*
Keep: %var_2_667 = load i32, i32* %var_2_656, align 4
Keep: %var_2_678 = sub i32 %var_2_614, %var_2_667
Keep: %var_2_829 = lshr i32 %var_2_678, 31
Keep: %var_2_8410 = lshr i32 %var_2_614, 31
Keep: %var_2_8511 = lshr i32 %var_2_667, 31
Keep: %var_2_8612 = xor i32 %var_2_8511, %var_2_8410
Keep: %var_2_8713 = xor i32 %var_2_829, %var_2_8410
Keep: %var_2_8814 = add nuw nsw i32 %var_2_8713, %var_2_8612
Keep: %var_2_8915 = icmp eq i32 %var_2_8814, 2
Keep: %var_2_9116 = icmp ne i32 %var_2_829, 0
Keep: %var_2_9217 = xor i1 %var_2_9116, %var_2_8915
Keep: br i1 %var_2_9217, label %block_400545.preheader, label %block_.L_400567
Keep: 
Keep: block_400545.preheader:                           ; preds = %entry
Keep: br label %block_400545
Keep: 
Keep: block_400545:                                     ; preds = %block_400545.preheader, %block_400545
Keep: %MEMORY.018 = phi %struct.Memory* [ %var_2_99, %block_400545 ], [ %2, %block_400545.preheader ]
Keep: %var_2_99 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.018)
Keep: %var_2_57 = load i64, i64* %RBP.i, align 8
Keep: %var_2_58 = add i64 %var_2_57, -8
Keep: %var_2_60 = inttoptr i64 %var_2_58 to i32*
Keep: %var_2_61 = load i32, i32* %var_2_60, align 4
Keep: %var_2_63 = add i64 %var_2_57, -4
Keep: %var_2_65 = inttoptr i64 %var_2_63 to i32*
Keep: %var_2_66 = load i32, i32* %var_2_65, align 4
Keep: %var_2_67 = sub i32 %var_2_61, %var_2_66
Keep: %var_2_82 = lshr i32 %var_2_67, 31
Keep: %var_2_84 = lshr i32 %var_2_61, 31
Keep: %var_2_85 = lshr i32 %var_2_66, 31
Keep: %var_2_86 = xor i32 %var_2_85, %var_2_84
Keep: %var_2_87 = xor i32 %var_2_82, %var_2_84
Keep: %var_2_88 = add nuw nsw i32 %var_2_87, %var_2_86
Keep: %var_2_89 = icmp eq i32 %var_2_88, 2
Keep: %var_2_91 = icmp ne i32 %var_2_82, 0
Keep: %var_2_92 = xor i1 %var_2_91, %var_2_89
Keep: br i1 %var_2_92, label %block_400545, label %block_.L_400567.loopexit
Keep: 
Keep: block_.L_400567.loopexit:                         ; preds = %block_400545
Keep: br label %block_.L_400567
Keep: 
Keep: block_.L_400567:                                  ; preds = %block_.L_400567.loopexit, %entry
Keep: %MEMORY.0.lcssa = phi %struct.Memory* [ %2, %entry ], [ %var_2_99, %block_.L_400567.loopexit ]
Keep: ret %struct.Memory* %MEMORY.0.lcssa
Missed: dict_keys(['%var_2_45 = load i64, i64* %RBP.i, align 8', '%var_2_46 = add i64 %var_2_45, -8', '%var_2_49 = inttoptr i64 %var_2_46 to i32*', 'store i32 0, i32* %var_2_49, align 4', '%var_2_50 = load i64, i64* %RBP.i, align 8', '%var_2_51 = add i64 %var_2_50, -8', '%var_2_54 = inttoptr i64 %var_2_51 to i32*', 'store i32 0, i32* %var_2_54, align 4'])
TO REMOVE: dict_keys(['%var_2_44 = load i64, i64* %RBP, align 8', '%var_2_45 = add i64 %var_2_44, -8', '%var_2_48 = inttoptr i64 %var_2_45 to i32*', 'store i32 0, i32* %var_2_48, align 4', '%var_2_49 = load i64, i64* %RBP, align 8', '%var_2_50 = add i64 %var_2_49, -8', '%var_2_53 = inttoptr i64 %var_2_50 to i32*', 'store i32 0, i32* %var_2_53, align 4'])
Keep: block_400520:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_44 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_45 = add i64 %var_2_44, -8
Found line to remove! %var_2_48 = inttoptr i64 %var_2_45 to i32*
Found line to remove! store i32 0, i32* %var_2_48, align 4
Found line to remove! %var_2_49 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_50 = add i64 %var_2_49, -8
Found line to remove! %var_2_53 = inttoptr i64 %var_2_50 to i32*
Found line to remove! store i32 0, i32* %var_2_53, align 4
Keep: %var_2_1311 = load i64, i64* %RBP, align 8
Keep: %var_2_1322 = add i64 %var_2_1311, -8
Keep: %var_2_1343 = inttoptr i64 %var_2_1322 to i32*
Keep: %var_2_1354 = load i32, i32* %var_2_1343, align 4
Keep: %var_2_1375 = add i64 %var_2_1311, -4
Keep: %var_2_1396 = inttoptr i64 %var_2_1375 to i32*
Keep: %var_2_1407 = load i32, i32* %var_2_1396, align 4
Keep: %var_2_1418 = sub i32 %var_2_1354, %var_2_1407
Keep: %var_2_1569 = lshr i32 %var_2_1418, 31
Keep: %var_2_15810 = lshr i32 %var_2_1354, 31
Keep: %var_2_15911 = lshr i32 %var_2_1407, 31
Keep: %var_2_16012 = xor i32 %var_2_15911, %var_2_15810
Keep: %var_2_16113 = xor i32 %var_2_1569, %var_2_15810
Keep: %var_2_16214 = add nuw nsw i32 %var_2_16113, %var_2_16012
Keep: %var_2_16315 = icmp eq i32 %var_2_16214, 2
Keep: %var_2_16516 = icmp ne i32 %var_2_1569, 0
Keep: %var_2_16617 = xor i1 %var_2_16516, %var_2_16315
Keep: br i1 %var_2_16617, label %block_400545.preheader, label %block_400567
Keep: 
Keep: block_400545.preheader:                           ; preds = %block_400520
Keep: br label %block_400545
Keep: 
Keep: block_400567.loopexit:                            ; preds = %block_400545
Keep: br label %block_400567
Keep: 
Keep: block_400567:                                     ; preds = %block_400567.loopexit, %block_400520
Keep: %MEMORY.0.lcssa = phi %struct.Memory* [ %2, %block_400520 ], [ %var_2_91, %block_400567.loopexit ]
Keep: ret %struct.Memory* %MEMORY.0.lcssa
Keep: 
Keep: block_400545:                                     ; preds = %block_400545.preheader, %block_400545
Keep: %MEMORY.018 = phi %struct.Memory* [ %var_2_91, %block_400545 ], [ %2, %block_400545.preheader ]
Keep: %var_2_91 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.018)
Keep: %var_2_131 = load i64, i64* %RBP, align 8
Keep: %var_2_132 = add i64 %var_2_131, -8
Keep: %var_2_134 = inttoptr i64 %var_2_132 to i32*
Keep: %var_2_135 = load i32, i32* %var_2_134, align 4
Keep: %var_2_137 = add i64 %var_2_131, -4
Keep: %var_2_139 = inttoptr i64 %var_2_137 to i32*
Keep: %var_2_140 = load i32, i32* %var_2_139, align 4
Keep: %var_2_141 = sub i32 %var_2_135, %var_2_140
Keep: %var_2_156 = lshr i32 %var_2_141, 31
Keep: %var_2_158 = lshr i32 %var_2_135, 31
Keep: %var_2_159 = lshr i32 %var_2_140, 31
Keep: %var_2_160 = xor i32 %var_2_159, %var_2_158
Keep: %var_2_161 = xor i32 %var_2_156, %var_2_158
Keep: %var_2_162 = add nuw nsw i32 %var_2_161, %var_2_160
Keep: %var_2_163 = icmp eq i32 %var_2_162, 2
Keep: %var_2_165 = icmp ne i32 %var_2_156, 0
Keep: %var_2_166 = xor i1 %var_2_165, %var_2_163
Keep: br i1 %var_2_166, label %block_400545, label %block_400567.loopexit
Missed: dict_keys(['%var_2_44 = load i64, i64* %RBP, align 8', '%var_2_45 = add i64 %var_2_44, -8', '%var_2_48 = inttoptr i64 %var_2_45 to i32*', 'store i32 0, i32* %var_2_48, align 4', '%var_2_49 = load i64, i64* %RBP, align 8', '%var_2_50 = add i64 %var_2_49, -8', '%var_2_53 = inttoptr i64 %var_2_50 to i32*', 'store i32 0, i32* %var_2_53, align 4'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_28/func/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_28/binary/test.mcsema.calls_renamed.ll func
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
