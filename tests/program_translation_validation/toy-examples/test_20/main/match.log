Writing '/tmp/tmpiwz3lady.dot'...
Writing '/tmp/tmpiwz3lady.dot':Done

Reading LLVM: /tmp/tmpp_8zgxj1-query.ll
Extracting function [main] from /tmp/tmpp_8zgxj1-query.ll
Dot file generated!
Writing '/tmp/tmpr2c6tcx9.dot'...
Writing '/tmp/tmpr2c6tcx9.dot':Done

Reading LLVM: /tmp/tmpk5k4hewm-target.ll
Extracting function [main] from /tmp/tmpk5k4hewm-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = add i64 %7, -12
- 48 %40 = add i64 %10, 14
- 49 store i64 %40, i64* %3, align 8
- 50 %41 = inttoptr i64 %39 to i32*
- 51 store i32 0, i32* %41, align 4
- 52 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 53 %EDI.i = bitcast %union.anon* %42 to i32*
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -8
- 56 %45 = load i32, i32* %EDI.i, align 4
- 57 %46 = load i64, i64* %3, align 8
- 58 %47 = add i64 %46, 3
- 59 store i64 %47, i64* %3, align 8
- 60 %48 = inttoptr i64 %44 to i32*
- 61 store i32 %45, i32* %48, align 4
- 62 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -16
- 65 %51 = load i64, i64* %RSI.i, align 8
- 66 %52 = load i64, i64* %3, align 8
- 67 %53 = add i64 %52, 4
- 68 store i64 %53, i64* %3, align 8
- 69 %54 = inttoptr i64 %50 to i64*
- 70 store i64 %51, i64* %54, align 8
- 71 %55 = load i64, i64* %RBP.i, align 8
- 72 %56 = add i64 %55, -20
- 73 %57 = load i64, i64* %3, align 8
- 74 %58 = add i64 %57, 7
- 75 store i64 %58, i64* %3, align 8
- 76 %59 = inttoptr i64 %56 to i32*
- 77 store i32 0, i32* %59, align 4
- 78 %60 = load i64, i64* %RBP.i, align 8
- 79 %61 = add i64 %60, -20
- 80 %62 = load i64, i64* %3, align 8
- 81 %63 = add i64 %62, 7
- 82 store i64 %63, i64* %3, align 8
- 83 %64 = inttoptr i64 %61 to i32*
- 84 store i32 0, i32* %64, align 4
- 85 %RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 86 %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 87 %AL.i = bitcast %union.anon* %65 to i8*
- 88 %EAX.i16 = bitcast %union.anon* %65 to i32*
- 89 %RAX.i13 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
- 90 %.pre = load i64, i64* %3, align 8
- 91 \<badref\> = br label %block_.L_4004d4
- 92 %66 = phi i64 [ %142, %block_4004e1 ], [ %.pre, %entry ]
- 93 %67 = load i64, i64* %RBP.i, align 8
- 94 %68 = add i64 %67, -20
- 95 %69 = add i64 %66, 7
- 96 store i64 %69, i64* %3, align 8
- 97 %70 = inttoptr i64 %68 to i32*
- 98 %71 = load i32, i32* %70, align 4
- 99 %72 = add i32 %71, -255
- 100 %73 = icmp ult i32 %71, 255
- 101 %74 = zext i1 %73 to i8
- 102 store i8 %74, i8* %14, align 1
- 103 %75 = and i32 %72, 255
- 104 %76 = tail call i32 @llvm.ctpop.i32(i32 %75)
- 105 %77 = trunc i32 %76 to i8
- 106 %78 = and i8 %77, 1
- 107 %79 = xor i8 %78, 1
- 108 store i8 %79, i8* %21, align 1
- 109 %80 = xor i32 %71, 16
- 110 %81 = xor i32 %80, %72
- 111 %82 = lshr i32 %81, 4
- 112 %83 = trunc i32 %82 to i8
- 113 %84 = and i8 %83, 1
- 114 store i8 %84, i8* %26, align 1
- 115 %85 = icmp eq i32 %72, 0
- 116 %86 = zext i1 %85 to i8
- 117 store i8 %86, i8* %29, align 1
- 118 %87 = lshr i32 %72, 31
- 119 %88 = trunc i32 %87 to i8
- 120 store i8 %88, i8* %32, align 1
- 121 %89 = lshr i32 %71, 31
- 122 %90 = xor i32 %87, %89
- 123 %91 = add nuw nsw i32 %90, %89
- 124 %92 = icmp eq i32 %91, 2
- 125 %93 = zext i1 %92 to i8
- 126 store i8 %93, i8* %38, align 1
- 127 %94 = icmp ne i8 %88, 0
- 128 %95 = xor i1 %94, %92
- 129 %.demorgan = or i1 %85, %95
- 130 %.v = select i1 %.demorgan, i64 13, i64 40
- 131 %96 = add i64 %66, %.v
- 132 store i64 %96, i64* %3, align 8
- 133 \<badref\> = br i1 %.demorgan, label %block_4004e1, label %block_.L_4004fc
- 134 %97 = add i64 %96, 3
- 135 store i64 %97, i64* %3, align 8
- 136 %98 = load i32, i32* %70, align 4
- 137 %99 = zext i32 %98 to i64
- 138 store i64 %99, i64* %RDI.i, align 8
- 139 store i8 0, i8* %AL.i, align 1
- 140 %100 = add i64 %96, 47
- 141 %101 = add i64 %96, 10
- 142 %102 = load i64, i64* %6, align 8
- 143 %103 = add i64 %102, -8
- 144 %104 = inttoptr i64 %103 to i64*
- 145 store i64 %101, i64* %104, align 8
- 146 store i64 %103, i64* %6, align 8
- 147 store i64 %100, i64* %3, align 8
- 148 %call2_4004e6 = tail call %struct.Memory* @sub_400510.switches(%struct.State* nonnull %0, i64 %100, %struct.Memory* %2)
- 149 %105 = load i64, i64* %RBP.i, align 8
- 150 %106 = add i64 %105, -24
- 151 %107 = load i32, i32* %EAX.i16, align 4
- 152 %108 = load i64, i64* %3, align 8
- 153 %109 = add i64 %108, 3
- 154 store i64 %109, i64* %3, align 8
- 155 %110 = inttoptr i64 %106 to i32*
- 156 store i32 %107, i32* %110, align 4
- 157 %111 = load i64, i64* %RBP.i, align 8
- 158 %112 = add i64 %111, -20
- 159 %113 = load i64, i64* %3, align 8
- 160 %114 = add i64 %113, 3
- 161 store i64 %114, i64* %3, align 8
- 162 %115 = inttoptr i64 %112 to i32*
- 163 %116 = load i32, i32* %115, align 4
- 164 %117 = add i32 %116, 1
- 165 %118 = zext i32 %117 to i64
- 166 store i64 %118, i64* %RAX.i13, align 8
- 167 %119 = icmp eq i32 %116, -1
- 168 %120 = icmp eq i32 %117, 0
- 169 %121 = or i1 %119, %120
- 170 %122 = zext i1 %121 to i8
- 171 store i8 %122, i8* %14, align 1
- 172 %123 = and i32 %117, 255
- 173 %124 = tail call i32 @llvm.ctpop.i32(i32 %123)
- 174 %125 = trunc i32 %124 to i8
- 175 %126 = and i8 %125, 1
- 176 %127 = xor i8 %126, 1
- 177 store i8 %127, i8* %21, align 1
- 178 %128 = xor i32 %117, %116
- 179 %129 = lshr i32 %128, 4
- 180 %130 = trunc i32 %129 to i8
- 181 %131 = and i8 %130, 1
- 182 store i8 %131, i8* %26, align 1
- 183 %132 = zext i1 %120 to i8
- 184 store i8 %132, i8* %29, align 1
- 185 %133 = lshr i32 %117, 31
- 186 %134 = trunc i32 %133 to i8
- 187 store i8 %134, i8* %32, align 1
- 188 %135 = lshr i32 %116, 31
- 189 %136 = xor i32 %133, %135
- 190 %137 = add nuw nsw i32 %136, %133
- 191 %138 = icmp eq i32 %137, 2
- 192 %139 = zext i1 %138 to i8
- 193 store i8 %139, i8* %38, align 1
- 194 %140 = add i64 %113, 9
- 195 store i64 %140, i64* %3, align 8
- 196 store i32 %117, i32* %115, align 4
- 197 %141 = load i64, i64* %3, align 8
- 198 %142 = add i64 %141, -35
- 199 store i64 %142, i64* %3, align 8
- 200 \<badref\> = br label %block_.L_4004d4
- 201 store i64 0, i64* %RAX.i13, align 8
- 202 %143 = load i64, i64* %6, align 8
- 203 %144 = add i64 %143, 32
- 204 store i64 %144, i64* %6, align 8
- 205 %145 = icmp ugt i64 %143, -33
- 206 %146 = zext i1 %145 to i8
- 207 store i8 %146, i8* %14, align 1
- 208 %147 = trunc i64 %144 to i32
- 209 %148 = and i32 %147, 255
- 210 %149 = tail call i32 @llvm.ctpop.i32(i32 %148)
- 211 %150 = trunc i32 %149 to i8
- 212 %151 = and i8 %150, 1
- 213 %152 = xor i8 %151, 1
- 214 store i8 %152, i8* %21, align 1
- 215 %153 = xor i64 %144, %143
- 216 %154 = lshr i64 %153, 4
- 217 %155 = trunc i64 %154 to i8
- 218 %156 = and i8 %155, 1
- 219 store i8 %156, i8* %26, align 1
- 220 %157 = icmp eq i64 %144, 0
- 221 %158 = zext i1 %157 to i8
- 222 store i8 %158, i8* %29, align 1
- 223 %159 = lshr i64 %144, 63
- 224 %160 = trunc i64 %159 to i8
- 225 store i8 %160, i8* %32, align 1
- 226 %161 = lshr i64 %143, 63
- 227 %162 = xor i64 %159, %161
- 228 %163 = add nuw nsw i64 %162, %159
- 229 %164 = icmp eq i64 %163, 2
- 230 %165 = zext i1 %164 to i8
- 231 store i8 %165, i8* %38, align 1
- 232 %166 = add i64 %96, 7
- 233 store i64 %166, i64* %3, align 8
- 234 %167 = add i64 %143, 40
- 235 %168 = inttoptr i64 %144 to i64*
- 236 %169 = load i64, i64* %168, align 8
- 237 store i64 %169, i64* %RBP.i, align 8
- 238 store i64 %167, i64* %6, align 8
- 239 %170 = add i64 %96, 8
- 240 store i64 %170, i64* %3, align 8
- 241 %171 = inttoptr i64 %167 to i64*
- 242 %172 = load i64, i64* %171, align 8
- 243 store i64 %172, i64* %3, align 8
- 244 %173 = add i64 %143, 48
- 245 store i64 %173, i64* %6, align 8
- 246 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f17323378>, {0: {0}, 1: {10}, 2: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 3: {210, 12}, 4: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 5: {9}, 6: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 7: {189, 61, 15}, 8: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 9: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 10: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 11: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 12: {20}, 13: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 14: {22}, 15: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 16: {24}, 17: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 18: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 19: {218, 27, 100, 149}, 20: {194, 101, 150, 219, 28}, 21: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 22: {227, 37, 103, 109, 152, 221, 30, 159}, 23: {104, 153, 222, 31}, 24: {32}, 25: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 26: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 27: {107, 225, 35, 157}, 28: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 29: {227, 37, 103, 109, 152, 221, 30, 159}, 30: {38}, 31: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 32: {161, 40, 173, 111, 214}, 33: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 34: {42}, 35: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 36: {48, 114, 44, 117}, 37: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 38: {46}, 39: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 40: {48, 114, 44, 117}, 41: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 42: {169, 236, 177, 50, 119}, 43: {120, 170, 51, 237}, 44: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 45: {53}, 46: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 47: {55}, 48: {56}, 49: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 50: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 51: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 52: {4}, 53: {2, 3, 5}, 54: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 55: {189, 61, 15}, 56: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 57: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 58: {64, 180, 206, 199}, 59: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 60: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 61: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 62: {7}, 63: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 64: {69}, 65: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 66: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 67: {72}, 68: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 69: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 70: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 71: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 72: {140, 204, 84, 77}, 73: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 74: {123, 141, 86, 79}, 75: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 76: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 77: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 78: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 79: {140, 204, 84, 77}, 80: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 81: {123, 141, 86, 79}, 82: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 83: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 84: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 85: {8, 6}, 86: {1}, 87: {2, 3, 5}, 88: {2, 3, 5}, 89: {8, 6}, 90: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 91: {91, 246}, 92: {138}, 93: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 94: {140, 204, 84, 77}, 95: {123, 141, 86, 79}, 96: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 97: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 98: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 99: {145}, 100: {146}, 101: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 102: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 103: {218, 27, 100, 149}, 104: {194, 101, 150, 219, 28}, 105: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 106: {227, 37, 103, 109, 152, 221, 30, 159}, 107: {104, 153, 222, 31}, 108: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 109: {155}, 110: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 111: {107, 225, 35, 157}, 112: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 113: {227, 37, 103, 109, 152, 221, 30, 159}, 114: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 115: {161, 40, 173, 111, 214}, 116: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 117: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 118: {234, 231, 164, 167}, 119: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 120: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 121: {234, 231, 164, 167}, 122: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 123: {169, 236, 177, 50, 119}, 124: {120, 170, 51, 237}, 125: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 126: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 127: {161, 40, 173, 111, 214}, 128: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 129: {215, 175}, 130: {176}, 131: {169, 236, 177, 50, 119}, 132: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 133: {179}, 134: {64, 180, 206, 199}, 135: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 136: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 137: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 138: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 139: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 140: {186}, 141: {187}, 142: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 143: {189, 61, 15}, 144: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 145: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 146: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 147: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 148: {194, 101, 150, 219, 28}, 149: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 150: {196}, 151: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 152: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 153: {64, 180, 206, 199}, 154: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 155: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 156: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 157: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 158: {140, 204, 84, 77}, 159: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 160: {64, 180, 206, 199}, 161: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 162: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 163: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 164: {210, 12}, 165: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 166: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 167: {213}, 168: {161, 40, 173, 111, 214}, 169: {215, 175}, 170: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 171: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 172: {218, 27, 100, 149}, 173: {194, 101, 150, 219, 28}, 174: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 175: {227, 37, 103, 109, 152, 221, 30, 159}, 176: {104, 153, 222, 31}, 177: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 178: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 179: {107, 225, 35, 157}, 180: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 181: {227, 37, 103, 109, 152, 221, 30, 159}, 182: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 183: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 184: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 185: {234, 231, 164, 167}, 186: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 187: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 188: {234, 231, 164, 167}, 189: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 190: {169, 236, 177, 50, 119}, 191: {120, 170, 51, 237}, 192: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 193: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 194: {240}, 195: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 196: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 197: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 198: {244}, 199: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 200: {91, 246}, 201: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 202: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 203: {94}, 204: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 205: {96}, 206: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 207: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 208: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 209: {218, 27, 100, 149}, 210: {194, 101, 150, 219, 28}, 211: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 212: {227, 37, 103, 109, 152, 221, 30, 159}, 213: {104, 153, 222, 31}, 214: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 215: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 216: {107, 225, 35, 157}, 217: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 218: {227, 37, 103, 109, 152, 221, 30, 159}, 219: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 220: {161, 40, 173, 111, 214}, 221: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 222: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 223: {48, 114, 44, 117}, 224: {226, 99, 36, 165, 102, 232, 108, 45, 115, 151, 26, 220, 29, 158}, 225: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 226: {48, 114, 44, 117}, 227: {224, 34, 168, 106, 235, 174, 49, 118, 156}, 228: {169, 236, 177, 50, 119}, 229: {120, 170, 51, 237}, 230: {97, 162, 229, 41, 171, 238, 112, 147, 52, 211, 23, 216, 121, 183}, 231: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 232: {123, 141, 86, 79}, 233: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 234: {125}, 235: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 236: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 237: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 238: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 239: {130}, 240: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 241: {66, 132, 201, 74, 143, 16, 81, 208, 88, 58, 190, 126}, 242: {133, 11, 139, 14, 144, 18, 182, 188, 60, 62, 63, 195, 68, 197, 70, 71, 198, 203, 76, 205, 78, 209, 83, 85, 90, 93, 243, 127}, 243: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 244: {135}, 245: {128, 129, 131, 134, 136, 13, 142, 17, 19, 148, 21, 25, 154, 160, 33, 163, 166, 39, 43, 172, 47, 178, 181, 54, 184, 57, 185, 59, 191, 192, 65, 193, 67, 200, 73, 202, 75, 207, 80, 82, 212, 87, 89, 217, 92, 95, 223, 98, 228, 230, 105, 233, 110, 239, 113, 241, 242, 116, 245, 122, 124}, 246: {137}})
Equivalent! frozenset({205, 198, 63}) {152, 57, 159}
Equivalent! frozenset({64, 206, 199}) {160, 153, 58}
Equivalent! frozenset({200, 65, 207}) {161, 154, 59}
Equivalent! frozenset({85, 78}) {80, 73}
Equivalent! frozenset({86, 79}) {81, 74}
Equivalent! frozenset({80, 87}) {82, 75}
Equivalent! frozenset({91, 246}) {200, 91}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f17323378>, {0: {0}, 1: {10}, 2: {11}, 3: {12}, 4: {13}, 5: {9}, 6: {14}, 7: {15}, 8: {16}, 9: {17}, 10: {18}, 11: {19}, 12: {20}, 13: {21}, 14: {22}, 15: {23}, 16: {24}, 17: {25}, 18: {26}, 19: {27}, 20: {28}, 21: {29}, 22: {30}, 23: {31}, 24: {32}, 25: {33}, 26: {34}, 27: {35}, 28: {36}, 29: {37}, 30: {38}, 31: {39}, 32: {40}, 33: {41}, 34: {42}, 35: {43}, 36: {44}, 37: {45}, 38: {46}, 39: {47}, 40: {48}, 41: {49}, 42: {50}, 43: {51}, 44: {52}, 45: {53}, 46: {54}, 47: {55}, 48: {56}, 49: {57}, 50: {58}, 51: {59}, 52: {4}, 53: {5}, 54: {60}, 55: {61}, 56: {62}, 57: {198}, 58: {199}, 59: {207}, 60: {66}, 61: {67}, 62: {7}, 63: {68}, 64: {69}, 65: {70}, 66: {71}, 67: {72}, 68: {73}, 69: {74}, 70: {75}, 71: {83, 76, 203}, 72: {204, 77, 84}, 73: {78}, 74: {79}, 75: {87}, 76: {208, 81, 88}, 77: {89, 242, 82}, 78: {83, 76, 203}, 79: {204, 77, 84}, 80: {85}, 81: {86}, 82: {80}, 83: {208, 81, 88}, 84: {89, 242, 82}, 85: {8}, 86: {1}, 87: {2}, 88: {3}, 89: {6}, 90: {90}, 91: {246}, 92: {138}, 93: {139}, 94: {140}, 95: {141}, 96: {142}, 97: {143}, 98: {144}, 99: {145}, 100: {146}, 101: {147}, 102: {148}, 103: {149}, 104: {150}, 105: {151}, 106: {152}, 107: {153}, 108: {154}, 109: {155}, 110: {156}, 111: {157}, 112: {158}, 113: {159}, 114: {160}, 115: {161}, 116: {162}, 117: {163}, 118: {164}, 119: {165}, 120: {166}, 121: {167}, 122: {168}, 123: {169}, 124: {170}, 125: {171}, 126: {172}, 127: {173}, 128: {174}, 129: {175}, 130: {176}, 131: {177}, 132: {178}, 133: {179}, 134: {180}, 135: {181}, 136: {182}, 137: {183}, 138: {184}, 139: {185}, 140: {186}, 141: {187}, 142: {188}, 143: {189}, 144: {190}, 145: {191}, 146: {192}, 147: {193}, 148: {194}, 149: {195}, 150: {196}, 151: {197}, 152: {205}, 153: {206}, 154: {65}, 155: {201}, 156: {202}, 157: {203}, 158: {204}, 159: {63}, 160: {64}, 161: {200}, 162: {208}, 163: {209}, 164: {210}, 165: {211}, 166: {212}, 167: {213}, 168: {214}, 169: {215}, 170: {216}, 171: {217}, 172: {218}, 173: {219}, 174: {220}, 175: {221}, 176: {222}, 177: {223}, 178: {224}, 179: {225}, 180: {226}, 181: {227}, 182: {228}, 183: {229}, 184: {230}, 185: {231}, 186: {232}, 187: {233}, 188: {234}, 189: {235}, 190: {236}, 191: {237}, 192: {238}, 193: {239}, 194: {240}, 195: {241}, 196: {242}, 197: {243}, 198: {244}, 199: {245}, 200: {91}, 201: {212, 92}, 202: {93}, 203: {94}, 204: {95}, 205: {96}, 206: {97}, 207: {98}, 208: {99}, 209: {100}, 210: {101}, 211: {102}, 212: {103}, 213: {104}, 214: {105}, 215: {106}, 216: {107}, 217: {108}, 218: {109}, 219: {110}, 220: {111}, 221: {112}, 222: {113}, 223: {114}, 224: {115}, 225: {116}, 226: {117}, 227: {118}, 228: {119}, 229: {120}, 230: {121}, 231: {122}, 232: {123}, 233: {124}, 234: {125}, 235: {126}, 236: {127}, 237: {128}, 238: {129}, 239: {130}, 240: {131}, 241: {132}, 242: {133}, 243: {134}, 244: {135}, 245: {136}, 246: {137}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 add add
EXACT 48 add add
EXACT 49 store store
EXACT 50 inttoptr inttoptr
EXACT 51 store store
EXACT 52 getelementptr getelementptr
EXACT 53 bitcast bitcast
EXACT 54 load load
EXACT 55 add add
EXACT 56 load load
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 store store
MORE 71 POT: 3
MORE 72 POT: 3
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
MORE 76 POT: 3
MORE 77 POT: 3
MORE 78 POT: 3
MORE 79 POT: 3
EXACT 80 load load
EXACT 81 add add
EXACT 82 store store
MORE 83 POT: 3
MORE 84 POT: 3
EXACT 85 getelementptr getelementptr
EXACT 86 getelementptr getelementptr
EXACT 87 bitcast bitcast
EXACT 88 bitcast bitcast
EXACT 89 getelementptr getelementptr
EXACT 90 load load
EXACT 91 br br
EXACT 92 phi phi
EXACT 93 load load
EXACT 94 add add
EXACT 95 add add
EXACT 96 store store
EXACT 97 inttoptr inttoptr
EXACT 98 load load
EXACT 99 add add
EXACT 100 icmp icmp
EXACT 101 zext zext
EXACT 102 store store
EXACT 103 and and
EXACT 104 tail tail
EXACT 105 trunc trunc
EXACT 106 and and
EXACT 107 xor xor
EXACT 108 store store
EXACT 109 xor xor
EXACT 110 xor xor
EXACT 111 lshr lshr
EXACT 112 trunc trunc
EXACT 113 and and
EXACT 114 store store
EXACT 115 icmp icmp
EXACT 116 zext zext
EXACT 117 store store
EXACT 118 lshr lshr
EXACT 119 trunc trunc
EXACT 120 store store
EXACT 121 lshr lshr
EXACT 122 xor xor
EXACT 123 add add
EXACT 124 icmp icmp
EXACT 125 zext zext
EXACT 126 store store
EXACT 127 icmp icmp
EXACT 128 xor xor
EXACT 129 or or
EXACT 130 select select
EXACT 131 add add
EXACT 132 store store
EXACT 133 br br
EXACT 134 add add
EXACT 135 store store
EXACT 136 load load
EXACT 137 zext zext
EXACT 138 store store
EXACT 139 store store
EXACT 140 add add
EXACT 141 add add
EXACT 142 load load
EXACT 143 add add
EXACT 144 inttoptr inttoptr
EXACT 145 store store
EXACT 146 store store
EXACT 147 store store
EXACT 148 tail tail
EXACT 149 load load
EXACT 150 add add
EXACT 151 load load
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 store store
EXACT 157 load load
EXACT 158 add add
EXACT 159 load load
EXACT 160 add add
EXACT 161 store store
EXACT 162 inttoptr inttoptr
EXACT 163 load load
EXACT 164 add add
EXACT 165 zext zext
EXACT 166 store store
EXACT 167 icmp icmp
EXACT 168 icmp icmp
EXACT 169 or or
EXACT 170 zext zext
EXACT 171 store store
EXACT 172 and and
EXACT 173 tail tail
EXACT 174 trunc trunc
EXACT 175 and and
EXACT 176 xor xor
EXACT 177 store store
EXACT 178 xor xor
EXACT 179 lshr lshr
EXACT 180 trunc trunc
EXACT 181 and and
EXACT 182 store store
EXACT 183 zext zext
EXACT 184 store store
EXACT 185 lshr lshr
EXACT 186 trunc trunc
EXACT 187 store store
EXACT 188 lshr lshr
EXACT 189 xor xor
EXACT 190 add add
EXACT 191 icmp icmp
EXACT 192 zext zext
EXACT 193 store store
EXACT 194 add add
EXACT 195 store store
EXACT 196 store store
EXACT 197 load load
EXACT 198 add add
EXACT 199 store store
EXACT 200 br br
MORE 201 POT: 2
EXACT 202 load load
EXACT 203 add add
EXACT 204 store store
EXACT 205 icmp icmp
EXACT 206 zext zext
EXACT 207 store store
EXACT 208 trunc trunc
EXACT 209 and and
EXACT 210 tail tail
EXACT 211 trunc trunc
EXACT 212 and and
EXACT 213 xor xor
EXACT 214 store store
EXACT 215 xor xor
EXACT 216 lshr lshr
EXACT 217 trunc trunc
EXACT 218 and and
EXACT 219 store store
EXACT 220 icmp icmp
EXACT 221 zext zext
EXACT 222 store store
EXACT 223 lshr lshr
EXACT 224 trunc trunc
EXACT 225 store store
EXACT 226 lshr lshr
EXACT 227 xor xor
EXACT 228 add add
EXACT 229 icmp icmp
EXACT 230 zext zext
EXACT 231 store store
EXACT 232 add add
EXACT 233 store store
EXACT 234 add add
EXACT 235 inttoptr inttoptr
EXACT 236 load load
EXACT 237 store store
EXACT 238 store store
EXACT 239 add add
EXACT 240 store store
EXACT 241 inttoptr inttoptr
EXACT 242 load load
EXACT 243 store store
EXACT 244 add add
EXACT 245 store store
EXACT 246 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 5 %EDI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 8 %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = load i64, i64* %RBP, align 8
- 12 %6 = add i64 %1, 1
- 13 store i64 %6, i64* %PC, align 8
- 14 %7 = load i64, i64* %RSP, align 8
- 15 %8 = add i64 %7, -8
- 16 %9 = inttoptr i64 %8 to i64*
- 17 store i64 %5, i64* %9, align 8
- 18 %10 = load i64, i64* %PC, align 8
- 19 store i64 %8, i64* %RBP, align 8
- 20 %11 = add i64 %7, -40
- 21 store i64 %11, i64* %RSP, align 8
- 22 %12 = icmp ult i64 %8, 32
- 23 %13 = zext i1 %12 to i8
- 24 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 store i8 %13, i8* %14, align 1
- 26 %15 = trunc i64 %11 to i32
- 27 %16 = and i32 %15, 255
- 28 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 29 %18 = trunc i32 %17 to i8
- 30 %19 = and i8 %18, 1
- 31 %20 = xor i8 %19, 1
- 32 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 33 store i8 %20, i8* %21, align 1
- 34 %22 = xor i64 %8, %11
- 35 %23 = lshr i64 %22, 4
- 36 %24 = trunc i64 %23 to i8
- 37 %25 = and i8 %24, 1
- 38 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 store i8 %25, i8* %26, align 1
- 40 %27 = icmp eq i64 %11, 0
- 41 %28 = zext i1 %27 to i8
- 42 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 43 store i8 %28, i8* %29, align 1
- 44 %30 = lshr i64 %11, 63
- 45 %31 = trunc i64 %30 to i8
- 46 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 store i8 %31, i8* %32, align 1
- 48 %33 = lshr i64 %8, 63
- 49 %34 = xor i64 %30, %33
- 50 %35 = add nuw nsw i64 %34, %33
- 51 %36 = icmp eq i64 %35, 2
- 52 %37 = zext i1 %36 to i8
- 53 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 54 store i8 %37, i8* %38, align 1
- 55 %39 = add i64 %7, -12
- 56 %40 = add i64 %10, 14
- 57 store i64 %40, i64* %PC, align 8
- 58 %41 = inttoptr i64 %39 to i32*
- 59 store i32 0, i32* %41, align 4
- 60 %42 = load i64, i64* %RBP, align 8
- 61 %43 = add i64 %42, -8
- 62 %44 = load i32, i32* %EDI, align 4
- 63 %45 = load i64, i64* %PC, align 8
- 64 %46 = add i64 %45, 3
- 65 store i64 %46, i64* %PC, align 8
- 66 %47 = inttoptr i64 %43 to i32*
- 67 store i32 %44, i32* %47, align 4
- 68 %48 = load i64, i64* %RBP, align 8
- 69 %49 = add i64 %48, -16
- 70 %50 = load i64, i64* %RSI, align 8
- 71 %51 = load i64, i64* %PC, align 8
- 72 %52 = add i64 %51, 4
- 73 store i64 %52, i64* %PC, align 8
- 74 %53 = inttoptr i64 %49 to i64*
- 75 store i64 %50, i64* %53, align 8
- 76 %54 = load i64, i64* %RBP, align 8
- 77 %55 = add i64 %54, -20
- 78 %56 = load i64, i64* %PC, align 8
- 79 %57 = add i64 %56, 7
- 80 store i64 %57, i64* %PC, align 8
- 81 %58 = inttoptr i64 %55 to i32*
- 82 store i32 0, i32* %58, align 4
- 83 %59 = load i64, i64* %RBP, align 8
- 84 %60 = add i64 %59, -20
- 85 %61 = load i64, i64* %PC, align 8
- 86 %62 = add i64 %61, 7
- 87 store i64 %62, i64* %PC, align 8
- 88 %63 = inttoptr i64 %60 to i32*
- 89 store i32 0, i32* %63, align 4
- 90 %.pre = load i64, i64* %PC, align 8
- 91 \<badref\> = br label %block_4004d4
- 92 store i64 0, i64* %RAX, align 8
- 93 %64 = load i64, i64* %RSP, align 8
- 94 %65 = add i64 %64, 32
- 95 store i64 %65, i64* %RSP, align 8
- 96 %66 = icmp ugt i64 %64, -33
- 97 %67 = zext i1 %66 to i8
- 98 store i8 %67, i8* %14, align 1
- 99 %68 = trunc i64 %65 to i32
- 100 %69 = and i32 %68, 255
- 101 %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #12
- 102 %71 = trunc i32 %70 to i8
- 103 %72 = and i8 %71, 1
- 104 %73 = xor i8 %72, 1
- 105 store i8 %73, i8* %21, align 1
- 106 %74 = xor i64 %65, %64
- 107 %75 = lshr i64 %74, 4
- 108 %76 = trunc i64 %75 to i8
- 109 %77 = and i8 %76, 1
- 110 store i8 %77, i8* %26, align 1
- 111 %78 = icmp eq i64 %65, 0
- 112 %79 = zext i1 %78 to i8
- 113 store i8 %79, i8* %29, align 1
- 114 %80 = lshr i64 %65, 63
- 115 %81 = trunc i64 %80 to i8
- 116 store i8 %81, i8* %32, align 1
- 117 %82 = lshr i64 %64, 63
- 118 %83 = xor i64 %80, %82
- 119 %84 = add nuw nsw i64 %83, %80
- 120 %85 = icmp eq i64 %84, 2
- 121 %86 = zext i1 %85 to i8
- 122 store i8 %86, i8* %38, align 1
- 123 %87 = add i64 %125, 7
- 124 store i64 %87, i64* %PC, align 8
- 125 %88 = add i64 %64, 40
- 126 %89 = inttoptr i64 %65 to i64*
- 127 %90 = load i64, i64* %89, align 8
- 128 store i64 %90, i64* %RBP, align 8
- 129 store i64 %88, i64* %RSP, align 8
- 130 %91 = add i64 %125, 8
- 131 store i64 %91, i64* %PC, align 8
- 132 %92 = inttoptr i64 %88 to i64*
- 133 %93 = load i64, i64* %92, align 8
- 134 store i64 %93, i64* %PC, align 8
- 135 %94 = add i64 %64, 48
- 136 store i64 %94, i64* %RSP, align 8
- 137 \<badref\> = ret %struct.Memory* %2
- 138 %95 = phi i64 [ %172, %block_4004e1 ], [ %.pre, %block_4004b0 ]
- 139 %96 = load i64, i64* %RBP, align 8
- 140 %97 = add i64 %96, -20
- 141 %98 = add i64 %95, 7
- 142 store i64 %98, i64* %PC, align 8
- 143 %99 = inttoptr i64 %97 to i32*
- 144 %100 = load i32, i32* %99, align 4
- 145 %101 = add i32 %100, -255
- 146 %102 = icmp ult i32 %100, 255
- 147 %103 = zext i1 %102 to i8
- 148 store i8 %103, i8* %14, align 1
- 149 %104 = and i32 %101, 255
- 150 %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12
- 151 %106 = trunc i32 %105 to i8
- 152 %107 = and i8 %106, 1
- 153 %108 = xor i8 %107, 1
- 154 store i8 %108, i8* %21, align 1
- 155 %109 = xor i32 %100, 16
- 156 %110 = xor i32 %109, %101
- 157 %111 = lshr i32 %110, 4
- 158 %112 = trunc i32 %111 to i8
- 159 %113 = and i8 %112, 1
- 160 store i8 %113, i8* %26, align 1
- 161 %114 = icmp eq i32 %101, 0
- 162 %115 = zext i1 %114 to i8
- 163 store i8 %115, i8* %29, align 1
- 164 %116 = lshr i32 %101, 31
- 165 %117 = trunc i32 %116 to i8
- 166 store i8 %117, i8* %32, align 1
- 167 %118 = lshr i32 %100, 31
- 168 %119 = xor i32 %116, %118
- 169 %120 = add nuw nsw i32 %119, %118
- 170 %121 = icmp eq i32 %120, 2
- 171 %122 = zext i1 %121 to i8
- 172 store i8 %122, i8* %38, align 1
- 173 %123 = icmp ne i8 %117, 0
- 174 %124 = xor i1 %123, %121
- 175 %.demorgan = or i1 %114, %124
- 176 %.v = select i1 %.demorgan, i64 13, i64 40
- 177 %125 = add i64 %95, %.v
- 178 store i64 %125, i64* %PC, align 8
- 179 \<badref\> = br i1 %.demorgan, label %block_4004e1, label %block_4004fc
- 180 %126 = add i64 %125, 3
- 181 store i64 %126, i64* %PC, align 8
- 182 %127 = load i32, i32* %99, align 4
- 183 %128 = zext i32 %127 to i64
- 184 store i64 %128, i64* %RDI, align 8
- 185 store i8 0, i8* %AL, align 1
- 186 %129 = add i64 %125, 47
- 187 %130 = add i64 %125, 10
- 188 %131 = load i64, i64* %RSP, align 8
- 189 %132 = add i64 %131, -8
- 190 %133 = inttoptr i64 %132 to i64*
- 191 store i64 %130, i64* %133, align 8
- 192 store i64 %132, i64* %RSP, align 8
- 193 store i64 %129, i64* %PC, align 8
- 194 %134 = tail call %struct.Memory* @sub_400510_switches_renamed_(%struct.State* nonnull %0, i64 %129, %struct.Memory* %2)
- 195 %135 = load i64, i64* %RBP, align 8
- 196 %136 = add i64 %135, -24
- 197 %137 = load i32, i32* %EAX, align 4
- 198 %138 = load i64, i64* %PC, align 8
- 199 %139 = add i64 %138, 3
- 200 store i64 %139, i64* %PC, align 8
- 201 %140 = inttoptr i64 %136 to i32*
- 202 store i32 %137, i32* %140, align 4
- 203 %141 = load i64, i64* %RBP, align 8
- 204 %142 = add i64 %141, -20
- 205 %143 = load i64, i64* %PC, align 8
- 206 %144 = add i64 %143, 3
- 207 store i64 %144, i64* %PC, align 8
- 208 %145 = inttoptr i64 %142 to i32*
- 209 %146 = load i32, i32* %145, align 4
- 210 %147 = add i32 %146, 1
- 211 %148 = zext i32 %147 to i64
- 212 store i64 %148, i64* %RAX, align 8
- 213 %149 = icmp eq i32 %146, -1
- 214 %150 = icmp eq i32 %147, 0
- 215 %151 = or i1 %149, %150
- 216 %152 = zext i1 %151 to i8
- 217 store i8 %152, i8* %14, align 1
- 218 %153 = and i32 %147, 255
- 219 %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12
- 220 %155 = trunc i32 %154 to i8
- 221 %156 = and i8 %155, 1
- 222 %157 = xor i8 %156, 1
- 223 store i8 %157, i8* %21, align 1
- 224 %158 = xor i32 %147, %146
- 225 %159 = lshr i32 %158, 4
- 226 %160 = trunc i32 %159 to i8
- 227 %161 = and i8 %160, 1
- 228 store i8 %161, i8* %26, align 1
- 229 %162 = zext i1 %150 to i8
- 230 store i8 %162, i8* %29, align 1
- 231 %163 = lshr i32 %147, 31
- 232 %164 = trunc i32 %163 to i8
- 233 store i8 %164, i8* %32, align 1
- 234 %165 = lshr i32 %146, 31
- 235 %166 = xor i32 %163, %165
- 236 %167 = add nuw nsw i32 %166, %163
- 237 %168 = icmp eq i32 %167, 2
- 238 %169 = zext i1 %168 to i8
- 239 store i8 %169, i8* %38, align 1
- 240 %170 = add i64 %143, 9
- 241 store i64 %170, i64* %PC, align 8
- 242 store i32 %147, i32* %145, align 4
- 243 %171 = load i64, i64* %PC, align 8
- 244 %172 = add i64 %171, -35
- 245 store i64 %172, i64* %PC, align 8
- 246 \<badref\> = br label %block_4004d4
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f17323510>, {0: {0}, 1: {86}, 2: {88, 53, 87}, 3: {88, 53, 87}, 4: {52}, 5: {88, 53, 87}, 6: {89, 85}, 7: {62}, 8: {89, 85}, 9: {5}, 10: {1}, 11: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 12: {3, 164}, 13: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 14: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 15: {143, 55, 7}, 16: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 17: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 18: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 19: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 20: {12}, 21: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 22: {14}, 23: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 24: {16}, 25: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 26: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 27: {209, 19, 172, 103}, 28: {104, 173, 210, 148, 20}, 29: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 30: {106, 175, 113, 212, 181, 22, 218, 29}, 31: {176, 107, 213, 23}, 32: {24}, 33: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 34: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 35: {216, 27, 179, 111}, 36: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 37: {106, 175, 113, 212, 181, 22, 218, 29}, 38: {30}, 39: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 40: {32, 168, 115, 220, 127}, 41: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 42: {34}, 43: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 44: {40, 226, 36, 223}, 45: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 46: {38}, 47: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 48: {40, 226, 36, 223}, 49: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 50: {131, 228, 42, 123, 190}, 51: {43, 124, 229, 191}, 52: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 53: {45}, 54: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 55: {47}, 56: {48}, 57: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 58: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 59: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 60: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 61: {143, 55, 7}, 62: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 63: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 64: {160, 153, 58, 134}, 65: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 66: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 67: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 68: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 69: {64}, 70: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 71: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 72: {67}, 73: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 74: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 75: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 76: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 77: {72, 158, 94, 79}, 78: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 79: {232, 81, 74, 95}, 80: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 81: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 82: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 83: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 84: {72, 158, 94, 79}, 85: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 86: {232, 81, 74, 95}, 87: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 88: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 89: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 90: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 91: {200, 91}, 92: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 93: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 94: {203}, 95: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 96: {205}, 97: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 98: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 99: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 100: {209, 19, 172, 103}, 101: {104, 173, 210, 148, 20}, 102: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 103: {106, 175, 113, 212, 181, 22, 218, 29}, 104: {176, 107, 213, 23}, 105: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 106: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 107: {216, 27, 179, 111}, 108: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 109: {106, 175, 113, 212, 181, 22, 218, 29}, 110: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 111: {32, 168, 115, 220, 127}, 112: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 113: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 114: {40, 226, 36, 223}, 115: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 116: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 117: {40, 226, 36, 223}, 118: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 119: {131, 228, 42, 123, 190}, 120: {43, 124, 229, 191}, 121: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 122: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 123: {232, 81, 74, 95}, 124: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 125: {234}, 126: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 127: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 128: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 129: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 130: {239}, 131: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 132: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 133: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 134: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 135: {244}, 136: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 137: {246}, 138: {92}, 139: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 140: {72, 158, 94, 79}, 141: {232, 81, 74, 95}, 142: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 143: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 144: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 145: {99}, 146: {100}, 147: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 148: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 149: {209, 19, 172, 103}, 150: {104, 173, 210, 148, 20}, 151: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 152: {106, 175, 113, 212, 181, 22, 218, 29}, 153: {176, 107, 213, 23}, 154: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 155: {109}, 156: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 157: {216, 27, 179, 111}, 158: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 159: {106, 175, 113, 212, 181, 22, 218, 29}, 160: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 161: {32, 168, 115, 220, 127}, 162: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 163: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 164: {121, 185, 188, 118}, 165: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 166: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 167: {121, 185, 188, 118}, 168: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 169: {131, 228, 42, 123, 190}, 170: {43, 124, 229, 191}, 171: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 172: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 173: {32, 168, 115, 220, 127}, 174: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 175: {129, 169}, 176: {130}, 177: {131, 228, 42, 123, 190}, 178: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 179: {133}, 180: {160, 153, 58, 134}, 181: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 182: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 183: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 184: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 185: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 186: {140}, 187: {141}, 188: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 189: {143, 55, 7}, 190: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 191: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 192: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 193: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 194: {104, 173, 210, 148, 20}, 195: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 196: {150}, 197: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 198: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 199: {160, 153, 58, 134}, 200: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 201: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 202: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 203: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 204: {72, 158, 94, 79}, 205: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 206: {160, 153, 58, 134}, 207: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 208: {97, 162, 69, 8, 235, 76, 144, 241, 50, 83, 155, 60}, 209: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 210: {3, 164}, 211: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 212: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 213: {167}, 214: {32, 168, 115, 220, 127}, 215: {129, 169}, 216: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 217: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 218: {209, 19, 172, 103}, 219: {104, 173, 210, 148, 20}, 220: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 221: {106, 175, 113, 212, 181, 22, 218, 29}, 222: {176, 107, 213, 23}, 223: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 224: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 225: {216, 27, 179, 111}, 226: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 227: {106, 175, 113, 212, 181, 22, 218, 29}, 228: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 229: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 230: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 231: {121, 185, 188, 118}, 232: {224, 37, 105, 174, 112, 208, 18, 211, 180, 21, 119, 217, 186, 28}, 233: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 234: {121, 185, 188, 118}, 235: {128, 227, 122, 41, 110, 178, 215, 26, 189}, 236: {131, 228, 42, 123, 190}, 237: {43, 124, 229, 191}, 238: {192, 33, 101, 165, 230, 137, 170, 44, 206, 15, 116, 183, 221, 125}, 239: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 240: {194}, 241: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 242: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 243: {2, 6, 136, 10, 142, 149, 151, 152, 157, 159, 163, 54, 56, 57, 63, 65, 66, 197, 71, 73, 202, 78, 80, 90, 93, 98, 236, 242}, 244: {198}, 245: {4, 132, 135, 9, 138, 11, 139, 13, 17, 145, 146, 147, 25, 154, 156, 31, 161, 35, 166, 39, 171, 46, 49, 177, 51, 182, 184, 59, 187, 61, 193, 195, 68, 196, 70, 199, 201, 75, 204, 77, 207, 82, 84, 214, 219, 222, 96, 225, 102, 231, 233, 108, 237, 238, 240, 114, 243, 117, 245, 120, 126}, 246: {200, 91}})
Equivalent! frozenset({152, 57, 159}) {205, 198, 63}
Equivalent! frozenset({160, 153, 58}) {64, 206, 199}
Equivalent! frozenset({161, 154, 59}) {200, 65, 207}
Equivalent! frozenset({80, 73}) {85, 78}
Equivalent! frozenset({81, 74}) {86, 79}
Equivalent! frozenset({82, 75}) {80, 87}
Equivalent! frozenset({200, 91}) {91, 246}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f17323510>, {0: {0}, 1: {86}, 2: {87}, 3: {88}, 4: {52}, 5: {53}, 6: {89}, 7: {62}, 8: {85}, 9: {5}, 10: {1}, 11: {2}, 12: {3}, 13: {4}, 14: {6}, 15: {7}, 16: {8}, 17: {9}, 18: {10}, 19: {11}, 20: {12}, 21: {13}, 22: {14}, 23: {15}, 24: {16}, 25: {17}, 26: {18}, 27: {19}, 28: {20}, 29: {21}, 30: {22}, 31: {23}, 32: {24}, 33: {25}, 34: {26}, 35: {27}, 36: {28}, 37: {29}, 38: {30}, 39: {31}, 40: {32}, 41: {33}, 42: {34}, 43: {35}, 44: {36}, 45: {37}, 46: {38}, 47: {39}, 48: {40}, 49: {41}, 50: {42}, 51: {43}, 52: {44}, 53: {45}, 54: {46}, 55: {47}, 56: {48}, 57: {49}, 58: {50}, 59: {51}, 60: {54}, 61: {55}, 62: {56}, 63: {159}, 64: {160}, 65: {154}, 66: {60}, 67: {61}, 68: {63}, 69: {64}, 70: {65}, 71: {66}, 72: {67}, 73: {68}, 74: {69}, 75: {70}, 76: {157, 78, 71}, 77: {72, 158, 79}, 78: {73}, 79: {74}, 80: {82}, 81: {162, 83, 76}, 82: {196, 77, 84}, 83: {157, 78, 71}, 84: {72, 158, 79}, 85: {80}, 86: {81}, 87: {75}, 88: {162, 83, 76}, 89: {196, 77, 84}, 90: {90}, 91: {200}, 92: {201, 166}, 93: {202}, 94: {203}, 95: {204}, 96: {205}, 97: {206}, 98: {207}, 99: {208}, 100: {209}, 101: {210}, 102: {211}, 103: {212}, 104: {213}, 105: {214}, 106: {215}, 107: {216}, 108: {217}, 109: {218}, 110: {219}, 111: {220}, 112: {221}, 113: {222}, 114: {223}, 115: {224}, 116: {225}, 117: {226}, 118: {227}, 119: {228}, 120: {229}, 121: {230}, 122: {231}, 123: {232}, 124: {233}, 125: {234}, 126: {235}, 127: {236}, 128: {237}, 129: {238}, 130: {239}, 131: {240}, 132: {241}, 133: {242}, 134: {243}, 135: {244}, 136: {245}, 137: {246}, 138: {92}, 139: {93}, 140: {94}, 141: {95}, 142: {96}, 143: {97}, 144: {98}, 145: {99}, 146: {100}, 147: {101}, 148: {102}, 149: {103}, 150: {104}, 151: {105}, 152: {106}, 153: {107}, 154: {108}, 155: {109}, 156: {110}, 157: {111}, 158: {112}, 159: {113}, 160: {114}, 161: {115}, 162: {116}, 163: {117}, 164: {118}, 165: {119}, 166: {120}, 167: {121}, 168: {122}, 169: {123}, 170: {124}, 171: {125}, 172: {126}, 173: {127}, 174: {128}, 175: {129}, 176: {130}, 177: {131}, 178: {132}, 179: {133}, 180: {134}, 181: {135}, 182: {136}, 183: {137}, 184: {138}, 185: {139}, 186: {140}, 187: {141}, 188: {142}, 189: {143}, 190: {144}, 191: {145}, 192: {146}, 193: {147}, 194: {148}, 195: {149}, 196: {150}, 197: {151}, 198: {57}, 199: {58}, 200: {161}, 201: {155}, 202: {156}, 203: {157}, 204: {158}, 205: {152}, 206: {153}, 207: {59}, 208: {162}, 209: {163}, 210: {164}, 211: {165}, 212: {166}, 213: {167}, 214: {168}, 215: {169}, 216: {170}, 217: {171}, 218: {172}, 219: {173}, 220: {174}, 221: {175}, 222: {176}, 223: {177}, 224: {178}, 225: {179}, 226: {180}, 227: {181}, 228: {182}, 229: {183}, 230: {184}, 231: {185}, 232: {186}, 233: {187}, 234: {188}, 235: {189}, 236: {190}, 237: {191}, 238: {192}, 239: {193}, 240: {194}, 241: {195}, 242: {196}, 243: {197}, 244: {198}, 245: {199}, 246: {91}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 store store
EXACT 14 load load
EXACT 15 add add
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 store store
EXACT 20 add add
EXACT 21 store store
EXACT 22 icmp icmp
EXACT 23 zext zext
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 tail tail
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 xor xor
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 xor xor
EXACT 35 lshr lshr
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 icmp icmp
EXACT 41 zext zext
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 trunc trunc
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 xor xor
EXACT 50 add add
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 add add
EXACT 56 add add
EXACT 57 store store
EXACT 58 inttoptr inttoptr
EXACT 59 store store
EXACT 60 load load
EXACT 61 add add
EXACT 62 load load
EXACT 63 load load
EXACT 64 add add
EXACT 65 store store
EXACT 66 inttoptr inttoptr
EXACT 67 store store
EXACT 68 load load
EXACT 69 add add
EXACT 70 load load
EXACT 71 load load
EXACT 72 add add
EXACT 73 store store
EXACT 74 inttoptr inttoptr
EXACT 75 store store
MORE 76 POT: 3
MORE 77 POT: 3
EXACT 78 load load
EXACT 79 add add
EXACT 80 store store
MORE 81 POT: 3
MORE 82 POT: 3
MORE 83 POT: 3
MORE 84 POT: 3
EXACT 85 load load
EXACT 86 add add
EXACT 87 store store
MORE 88 POT: 3
MORE 89 POT: 3
EXACT 90 load load
EXACT 91 br br
MORE 92 POT: 2
EXACT 93 load load
EXACT 94 add add
EXACT 95 store store
EXACT 96 icmp icmp
EXACT 97 zext zext
EXACT 98 store store
EXACT 99 trunc trunc
EXACT 100 and and
EXACT 101 tail tail
EXACT 102 trunc trunc
EXACT 103 and and
EXACT 104 xor xor
EXACT 105 store store
EXACT 106 xor xor
EXACT 107 lshr lshr
EXACT 108 trunc trunc
EXACT 109 and and
EXACT 110 store store
EXACT 111 icmp icmp
EXACT 112 zext zext
EXACT 113 store store
EXACT 114 lshr lshr
EXACT 115 trunc trunc
EXACT 116 store store
EXACT 117 lshr lshr
EXACT 118 xor xor
EXACT 119 add add
EXACT 120 icmp icmp
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 add add
EXACT 124 store store
EXACT 125 add add
EXACT 126 inttoptr inttoptr
EXACT 127 load load
EXACT 128 store store
EXACT 129 store store
EXACT 130 add add
EXACT 131 store store
EXACT 132 inttoptr inttoptr
EXACT 133 load load
EXACT 134 store store
EXACT 135 add add
EXACT 136 store store
EXACT 137 ret ret
EXACT 138 phi phi
EXACT 139 load load
EXACT 140 add add
EXACT 141 add add
EXACT 142 store store
EXACT 143 inttoptr inttoptr
EXACT 144 load load
EXACT 145 add add
EXACT 146 icmp icmp
EXACT 147 zext zext
EXACT 148 store store
EXACT 149 and and
EXACT 150 tail tail
EXACT 151 trunc trunc
EXACT 152 and and
EXACT 153 xor xor
EXACT 154 store store
EXACT 155 xor xor
EXACT 156 xor xor
EXACT 157 lshr lshr
EXACT 158 trunc trunc
EXACT 159 and and
EXACT 160 store store
EXACT 161 icmp icmp
EXACT 162 zext zext
EXACT 163 store store
EXACT 164 lshr lshr
EXACT 165 trunc trunc
EXACT 166 store store
EXACT 167 lshr lshr
EXACT 168 xor xor
EXACT 169 add add
EXACT 170 icmp icmp
EXACT 171 zext zext
EXACT 172 store store
EXACT 173 icmp icmp
EXACT 174 xor xor
EXACT 175 or or
EXACT 176 select select
EXACT 177 add add
EXACT 178 store store
EXACT 179 br br
EXACT 180 add add
EXACT 181 store store
EXACT 182 load load
EXACT 183 zext zext
EXACT 184 store store
EXACT 185 store store
EXACT 186 add add
EXACT 187 add add
EXACT 188 load load
EXACT 189 add add
EXACT 190 inttoptr inttoptr
EXACT 191 store store
EXACT 192 store store
EXACT 193 store store
EXACT 194 tail tail
EXACT 195 load load
EXACT 196 add add
EXACT 197 load load
EXACT 198 load load
EXACT 199 add add
EXACT 200 store store
EXACT 201 inttoptr inttoptr
EXACT 202 store store
EXACT 203 load load
EXACT 204 add add
EXACT 205 load load
EXACT 206 add add
EXACT 207 store store
EXACT 208 inttoptr inttoptr
EXACT 209 load load
EXACT 210 add add
EXACT 211 zext zext
EXACT 212 store store
EXACT 213 icmp icmp
EXACT 214 icmp icmp
EXACT 215 or or
EXACT 216 zext zext
EXACT 217 store store
EXACT 218 and and
EXACT 219 tail tail
EXACT 220 trunc trunc
EXACT 221 and and
EXACT 222 xor xor
EXACT 223 store store
EXACT 224 xor xor
EXACT 225 lshr lshr
EXACT 226 trunc trunc
EXACT 227 and and
EXACT 228 store store
EXACT 229 zext zext
EXACT 230 store store
EXACT 231 lshr lshr
EXACT 232 trunc trunc
EXACT 233 store store
EXACT 234 lshr lshr
EXACT 235 xor xor
EXACT 236 add add
EXACT 237 icmp icmp
EXACT 238 zext zext
EXACT 239 store store
EXACT 240 add add
EXACT 241 store store
EXACT 242 store store
EXACT 243 load load
EXACT 244 add add
EXACT 245 store store
EXACT 246 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI.i, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 7', 'store i64 %58, i64* %3, align 8', '%62 = load i64, i64* %3, align 8', '%63 = add i64 %62, 7', 'store i64 %63, i64* %3, align 8', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0', '%AL.i = bitcast %union.anon* %65 to i8*', '%EAX.i16 = bitcast %union.anon* %65 to i32*', '%.pre = load i64, i64* %3, align 8', '%66 = phi i64 [ %142, %block_4004e1 ], [ %.pre, %entry ]', '%69 = add i64 %66, 7', 'store i64 %69, i64* %3, align 8', '%73 = icmp ult i32 %71, 255', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %14, align 1', '%75 = and i32 %72, 255', '%76 = tail call i32 @llvm.ctpop.i32(i32 %75)', '%77 = trunc i32 %76 to i8', '%78 = and i8 %77, 1', '%79 = xor i8 %78, 1', 'store i8 %79, i8* %21, align 1', '%80 = xor i32 %71, 16', '%81 = xor i32 %80, %72', '%82 = lshr i32 %81, 4', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', 'store i8 %84, i8* %26, align 1', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %29, align 1', 'store i8 %88, i8* %32, align 1', '%93 = zext i1 %92 to i8', 'store i8 %93, i8* %38, align 1', '%.v = select i1 %.demorgan, i64 13, i64 40', '%96 = add i64 %66, %.v', 'store i64 %96, i64* %3, align 8', '%97 = add i64 %96, 3', 'store i64 %97, i64* %3, align 8', '%98 = load i32, i32* %70, align 4', '%99 = zext i32 %98 to i64', 'store i64 %99, i64* %RDI.i, align 8', 'store i8 0, i8* %AL.i, align 1', '%100 = add i64 %96, 47', '%101 = add i64 %96, 10', '%102 = load i64, i64* %6, align 8', '%103 = add i64 %102, -8', '%104 = inttoptr i64 %103 to i64*', 'store i64 %101, i64* %104, align 8', 'store i64 %103, i64* %6, align 8', 'store i64 %100, i64* %3, align 8', '%call2_4004e6 = tail call %struct.Memory* @sub_400510.switches(%struct.State* nonnull %0, i64 %100, %struct.Memory* %2)', '%105 = load i64, i64* %RBP.i, align 8', '%106 = add i64 %105, -24', '%107 = load i32, i32* %EAX.i16, align 4', '%108 = load i64, i64* %3, align 8', '%109 = add i64 %108, 3', 'store i64 %109, i64* %3, align 8', '%110 = inttoptr i64 %106 to i32*', 'store i32 %107, i32* %110, align 4', '%111 = load i64, i64* %RBP.i, align 8', '%112 = add i64 %111, -20', '%113 = load i64, i64* %3, align 8', '%114 = add i64 %113, 3', 'store i64 %114, i64* %3, align 8', '%115 = inttoptr i64 %112 to i32*', '%116 = load i32, i32* %115, align 4', '%117 = add i32 %116, 1', '%118 = zext i32 %117 to i64', 'store i64 %118, i64* %RAX.i13, align 8', '%119 = icmp eq i32 %116, -1', '%120 = icmp eq i32 %117, 0', '%121 = or i1 %119, %120', '%122 = zext i1 %121 to i8', 'store i8 %122, i8* %14, align 1', '%123 = and i32 %117, 255', '%124 = tail call i32 @llvm.ctpop.i32(i32 %123)', '%125 = trunc i32 %124 to i8', '%126 = and i8 %125, 1', '%127 = xor i8 %126, 1', 'store i8 %127, i8* %21, align 1', '%128 = xor i32 %117, %116', '%129 = lshr i32 %128, 4', '%130 = trunc i32 %129 to i8', '%131 = and i8 %130, 1', 'store i8 %131, i8* %26, align 1', '%132 = zext i1 %120 to i8', 'store i8 %132, i8* %29, align 1', '%133 = lshr i32 %117, 31', '%134 = trunc i32 %133 to i8', 'store i8 %134, i8* %32, align 1', '%135 = lshr i32 %116, 31', '%136 = xor i32 %133, %135', '%137 = add nuw nsw i32 %136, %133', '%138 = icmp eq i32 %137, 2', '%139 = zext i1 %138 to i8', 'store i8 %139, i8* %38, align 1', '%140 = add i64 %113, 9', 'store i64 %140, i64* %3, align 8', 'store i32 %117, i32* %115, align 4', '%141 = load i64, i64* %3, align 8', '%142 = add i64 %141, -35', 'store i64 %142, i64* %3, align 8', '%143 = load i64, i64* %6, align 8', '%144 = add i64 %143, 32', 'store i64 %144, i64* %6, align 8', '%145 = icmp ugt i64 %143, -33', '%146 = zext i1 %145 to i8', 'store i8 %146, i8* %14, align 1', '%147 = trunc i64 %144 to i32', '%148 = and i32 %147, 255', '%149 = tail call i32 @llvm.ctpop.i32(i32 %148)', '%150 = trunc i32 %149 to i8', '%151 = and i8 %150, 1', '%152 = xor i8 %151, 1', 'store i8 %152, i8* %21, align 1', '%153 = xor i64 %144, %143', '%154 = lshr i64 %153, 4', '%155 = trunc i64 %154 to i8', '%156 = and i8 %155, 1', 'store i8 %156, i8* %26, align 1', '%157 = icmp eq i64 %144, 0', '%158 = zext i1 %157 to i8', 'store i8 %158, i8* %29, align 1', '%159 = lshr i64 %144, 63', '%160 = trunc i64 %159 to i8', 'store i8 %160, i8* %32, align 1', '%161 = lshr i64 %143, 63', '%162 = xor i64 %159, %161', '%163 = add nuw nsw i64 %162, %159', '%164 = icmp eq i64 %163, 2', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %38, align 1', '%166 = add i64 %96, 7', 'store i64 %166, i64* %3, align 8', '%167 = add i64 %143, 40', '%168 = inttoptr i64 %144 to i64*', '%169 = load i64, i64* %168, align 8', 'store i64 %169, i64* %RBP.i, align 8', 'store i64 %167, i64* %6, align 8', '%170 = add i64 %96, 8', 'store i64 %170, i64* %3, align 8', '%171 = inttoptr i64 %167 to i64*', '%172 = load i64, i64* %171, align 8', 'store i64 %172, i64* %3, align 8', '%173 = add i64 %143, 48', 'store i64 %173, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = add i64 %10, 14
Found line to remove! store i64 %40, i64* %3, align 8
Found line to remove! %41 = inttoptr i64 %39 to i32*
Found line to remove! store i32 0, i32* %41, align 4
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %42 to i32*
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI.i, align 4
Found line to remove! %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI.i, align 8
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %RBP.i, align 8
Keep: %56 = add i64 %55, -20
Found line to remove! %57 = load i64, i64* %3, align 8
Found line to remove! %58 = add i64 %57, 7
Found line to remove! store i64 %58, i64* %3, align 8
Keep: %59 = inttoptr i64 %56 to i32*
Keep: store i32 0, i32* %59, align 4
Keep: %60 = load i64, i64* %RBP.i, align 8
Keep: %61 = add i64 %60, -20
Found line to remove! %62 = load i64, i64* %3, align 8
Found line to remove! %63 = add i64 %62, 7
Found line to remove! store i64 %63, i64* %3, align 8
Keep: %64 = inttoptr i64 %61 to i32*
Keep: store i32 0, i32* %64, align 4
Found line to remove! %RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Keep: %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %65 to i8*
Found line to remove! %EAX.i16 = bitcast %union.anon* %65 to i32*
Keep: %RAX.i13 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_4004d4
Keep: 
Keep: block_.L_4004d4:                                  ; preds = %block_4004e1, %entry
Found line to remove! %66 = phi i64 [ %142, %block_4004e1 ], [ %.pre, %entry ]
Keep: %67 = load i64, i64* %RBP.i, align 8
Keep: %68 = add i64 %67, -20
Found line to remove! %69 = add i64 %66, 7
Found line to remove! store i64 %69, i64* %3, align 8
Keep: %70 = inttoptr i64 %68 to i32*
Keep: %71 = load i32, i32* %70, align 4
Keep: %72 = add i32 %71, -255
Found line to remove! %73 = icmp ult i32 %71, 255
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %14, align 1
Found line to remove! %75 = and i32 %72, 255
Found line to remove! %76 = tail call i32 @llvm.ctpop.i32(i32 %75)
Found line to remove! %77 = trunc i32 %76 to i8
Found line to remove! %78 = and i8 %77, 1
Found line to remove! %79 = xor i8 %78, 1
Found line to remove! store i8 %79, i8* %21, align 1
Found line to remove! %80 = xor i32 %71, 16
Found line to remove! %81 = xor i32 %80, %72
Found line to remove! %82 = lshr i32 %81, 4
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! store i8 %84, i8* %26, align 1
Keep: %85 = icmp eq i32 %72, 0
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %29, align 1
Keep: %87 = lshr i32 %72, 31
Keep: %88 = trunc i32 %87 to i8
Found line to remove! store i8 %88, i8* %32, align 1
Keep: %89 = lshr i32 %71, 31
Keep: %90 = xor i32 %87, %89
Keep: %91 = add nuw nsw i32 %90, %89
Keep: %92 = icmp eq i32 %91, 2
Found line to remove! %93 = zext i1 %92 to i8
Found line to remove! store i8 %93, i8* %38, align 1
Keep: %94 = icmp ne i8 %88, 0
Keep: %95 = xor i1 %94, %92
Keep: %.demorgan = or i1 %85, %95
Found line to remove! %.v = select i1 %.demorgan, i64 13, i64 40
Found line to remove! %96 = add i64 %66, %.v
Found line to remove! store i64 %96, i64* %3, align 8
Keep: br i1 %.demorgan, label %block_4004e1, label %block_.L_4004fc
Keep: 
Keep: block_4004e1:                                     ; preds = %block_.L_4004d4
Found line to remove! %97 = add i64 %96, 3
Found line to remove! store i64 %97, i64* %3, align 8
Found line to remove! %98 = load i32, i32* %70, align 4
Found line to remove! %99 = zext i32 %98 to i64
Found line to remove! store i64 %99, i64* %RDI.i, align 8
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %100 = add i64 %96, 47
Found line to remove! %101 = add i64 %96, 10
Found line to remove! %102 = load i64, i64* %6, align 8
Found line to remove! %103 = add i64 %102, -8
Found line to remove! %104 = inttoptr i64 %103 to i64*
Found line to remove! store i64 %101, i64* %104, align 8
Found line to remove! store i64 %103, i64* %6, align 8
Found line to remove! store i64 %100, i64* %3, align 8
Found line to remove! %call2_4004e6 = tail call %struct.Memory* @sub_400510.switches(%struct.State* nonnull %0, i64 %100, %struct.Memory* %2)
Found line to remove! %105 = load i64, i64* %RBP.i, align 8
Found line to remove! %106 = add i64 %105, -24
Found line to remove! %107 = load i32, i32* %EAX.i16, align 4
Found line to remove! %108 = load i64, i64* %3, align 8
Found line to remove! %109 = add i64 %108, 3
Found line to remove! store i64 %109, i64* %3, align 8
Found line to remove! %110 = inttoptr i64 %106 to i32*
Found line to remove! store i32 %107, i32* %110, align 4
Found line to remove! %111 = load i64, i64* %RBP.i, align 8
Found line to remove! %112 = add i64 %111, -20
Found line to remove! %113 = load i64, i64* %3, align 8
Found line to remove! %114 = add i64 %113, 3
Found line to remove! store i64 %114, i64* %3, align 8
Found line to remove! %115 = inttoptr i64 %112 to i32*
Found line to remove! %116 = load i32, i32* %115, align 4
Found line to remove! %117 = add i32 %116, 1
Found line to remove! %118 = zext i32 %117 to i64
Found line to remove! store i64 %118, i64* %RAX.i13, align 8
Found line to remove! %119 = icmp eq i32 %116, -1
Found line to remove! %120 = icmp eq i32 %117, 0
Found line to remove! %121 = or i1 %119, %120
Found line to remove! %122 = zext i1 %121 to i8
Found line to remove! store i8 %122, i8* %14, align 1
Found line to remove! %123 = and i32 %117, 255
Found line to remove! %124 = tail call i32 @llvm.ctpop.i32(i32 %123)
Found line to remove! %125 = trunc i32 %124 to i8
Found line to remove! %126 = and i8 %125, 1
Found line to remove! %127 = xor i8 %126, 1
Found line to remove! store i8 %127, i8* %21, align 1
Found line to remove! %128 = xor i32 %117, %116
Found line to remove! %129 = lshr i32 %128, 4
Found line to remove! %130 = trunc i32 %129 to i8
Found line to remove! %131 = and i8 %130, 1
Found line to remove! store i8 %131, i8* %26, align 1
Found line to remove! %132 = zext i1 %120 to i8
Found line to remove! store i8 %132, i8* %29, align 1
Found line to remove! %133 = lshr i32 %117, 31
Found line to remove! %134 = trunc i32 %133 to i8
Found line to remove! store i8 %134, i8* %32, align 1
Found line to remove! %135 = lshr i32 %116, 31
Found line to remove! %136 = xor i32 %133, %135
Found line to remove! %137 = add nuw nsw i32 %136, %133
Found line to remove! %138 = icmp eq i32 %137, 2
Found line to remove! %139 = zext i1 %138 to i8
Found line to remove! store i8 %139, i8* %38, align 1
Found line to remove! %140 = add i64 %113, 9
Found line to remove! store i64 %140, i64* %3, align 8
Found line to remove! store i32 %117, i32* %115, align 4
Found line to remove! %141 = load i64, i64* %3, align 8
Found line to remove! %142 = add i64 %141, -35
Found line to remove! store i64 %142, i64* %3, align 8
Keep: br label %block_.L_4004d4
Keep: 
Keep: block_.L_4004fc:                                  ; preds = %block_.L_4004d4
Keep: store i64 0, i64* %RAX.i13, align 8
Found line to remove! %143 = load i64, i64* %6, align 8
Found line to remove! %144 = add i64 %143, 32
Found line to remove! store i64 %144, i64* %6, align 8
Found line to remove! %145 = icmp ugt i64 %143, -33
Found line to remove! %146 = zext i1 %145 to i8
Found line to remove! store i8 %146, i8* %14, align 1
Found line to remove! %147 = trunc i64 %144 to i32
Found line to remove! %148 = and i32 %147, 255
Found line to remove! %149 = tail call i32 @llvm.ctpop.i32(i32 %148)
Found line to remove! %150 = trunc i32 %149 to i8
Found line to remove! %151 = and i8 %150, 1
Found line to remove! %152 = xor i8 %151, 1
Found line to remove! store i8 %152, i8* %21, align 1
Found line to remove! %153 = xor i64 %144, %143
Found line to remove! %154 = lshr i64 %153, 4
Found line to remove! %155 = trunc i64 %154 to i8
Found line to remove! %156 = and i8 %155, 1
Found line to remove! store i8 %156, i8* %26, align 1
Found line to remove! %157 = icmp eq i64 %144, 0
Found line to remove! %158 = zext i1 %157 to i8
Found line to remove! store i8 %158, i8* %29, align 1
Found line to remove! %159 = lshr i64 %144, 63
Found line to remove! %160 = trunc i64 %159 to i8
Found line to remove! store i8 %160, i8* %32, align 1
Found line to remove! %161 = lshr i64 %143, 63
Found line to remove! %162 = xor i64 %159, %161
Found line to remove! %163 = add nuw nsw i64 %162, %159
Found line to remove! %164 = icmp eq i64 %163, 2
Found line to remove! %165 = zext i1 %164 to i8
Found line to remove! store i8 %165, i8* %38, align 1
Found line to remove! %166 = add i64 %96, 7
Found line to remove! store i64 %166, i64* %3, align 8
Found line to remove! %167 = add i64 %143, 40
Found line to remove! %168 = inttoptr i64 %144 to i64*
Found line to remove! %169 = load i64, i64* %168, align 8
Found line to remove! store i64 %169, i64* %RBP.i, align 8
Found line to remove! store i64 %167, i64* %6, align 8
Found line to remove! %170 = add i64 %96, 8
Found line to remove! store i64 %170, i64* %3, align 8
Found line to remove! %171 = inttoptr i64 %167 to i64*
Found line to remove! %172 = load i64, i64* %171, align 8
Found line to remove! store i64 %172, i64* %3, align 8
Found line to remove! %173 = add i64 %143, 48
Found line to remove! store i64 %173, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI.i, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 7', 'store i64 %58, i64* %3, align 8', '%62 = load i64, i64* %3, align 8', '%63 = add i64 %62, 7', 'store i64 %63, i64* %3, align 8', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0', '%AL.i = bitcast %union.anon* %65 to i8*', '%EAX.i16 = bitcast %union.anon* %65 to i32*', '%.pre = load i64, i64* %3, align 8', '%66 = phi i64 [ %142, %block_4004e1 ], [ %.pre, %entry ]', '%69 = add i64 %66, 7', 'store i64 %69, i64* %3, align 8', '%73 = icmp ult i32 %71, 255', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %14, align 1', '%75 = and i32 %72, 255', '%76 = tail call i32 @llvm.ctpop.i32(i32 %75)', '%77 = trunc i32 %76 to i8', '%78 = and i8 %77, 1', '%79 = xor i8 %78, 1', 'store i8 %79, i8* %21, align 1', '%80 = xor i32 %71, 16', '%81 = xor i32 %80, %72', '%82 = lshr i32 %81, 4', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', 'store i8 %84, i8* %26, align 1', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %29, align 1', 'store i8 %88, i8* %32, align 1', '%93 = zext i1 %92 to i8', 'store i8 %93, i8* %38, align 1', '%.v = select i1 %.demorgan, i64 13, i64 40', '%96 = add i64 %66, %.v', 'store i64 %96, i64* %3, align 8', '%97 = add i64 %96, 3', 'store i64 %97, i64* %3, align 8', '%98 = load i32, i32* %70, align 4', '%99 = zext i32 %98 to i64', 'store i64 %99, i64* %RDI.i, align 8', 'store i8 0, i8* %AL.i, align 1', '%100 = add i64 %96, 47', '%101 = add i64 %96, 10', '%102 = load i64, i64* %6, align 8', '%103 = add i64 %102, -8', '%104 = inttoptr i64 %103 to i64*', 'store i64 %101, i64* %104, align 8', 'store i64 %103, i64* %6, align 8', 'store i64 %100, i64* %3, align 8', '%call2_4004e6 = tail call %struct.Memory* @sub_400510.switches(%struct.State* nonnull %0, i64 %100, %struct.Memory* %2)', '%105 = load i64, i64* %RBP.i, align 8', '%106 = add i64 %105, -24', '%107 = load i32, i32* %EAX.i16, align 4', '%108 = load i64, i64* %3, align 8', '%109 = add i64 %108, 3', 'store i64 %109, i64* %3, align 8', '%110 = inttoptr i64 %106 to i32*', 'store i32 %107, i32* %110, align 4', '%111 = load i64, i64* %RBP.i, align 8', '%112 = add i64 %111, -20', '%113 = load i64, i64* %3, align 8', '%114 = add i64 %113, 3', 'store i64 %114, i64* %3, align 8', '%115 = inttoptr i64 %112 to i32*', '%116 = load i32, i32* %115, align 4', '%117 = add i32 %116, 1', '%118 = zext i32 %117 to i64', 'store i64 %118, i64* %RAX.i13, align 8', '%119 = icmp eq i32 %116, -1', '%120 = icmp eq i32 %117, 0', '%121 = or i1 %119, %120', '%122 = zext i1 %121 to i8', 'store i8 %122, i8* %14, align 1', '%123 = and i32 %117, 255', '%124 = tail call i32 @llvm.ctpop.i32(i32 %123)', '%125 = trunc i32 %124 to i8', '%126 = and i8 %125, 1', '%127 = xor i8 %126, 1', 'store i8 %127, i8* %21, align 1', '%128 = xor i32 %117, %116', '%129 = lshr i32 %128, 4', '%130 = trunc i32 %129 to i8', '%131 = and i8 %130, 1', 'store i8 %131, i8* %26, align 1', '%132 = zext i1 %120 to i8', 'store i8 %132, i8* %29, align 1', '%133 = lshr i32 %117, 31', '%134 = trunc i32 %133 to i8', 'store i8 %134, i8* %32, align 1', '%135 = lshr i32 %116, 31', '%136 = xor i32 %133, %135', '%137 = add nuw nsw i32 %136, %133', '%138 = icmp eq i32 %137, 2', '%139 = zext i1 %138 to i8', 'store i8 %139, i8* %38, align 1', '%140 = add i64 %113, 9', 'store i64 %140, i64* %3, align 8', 'store i32 %117, i32* %115, align 4', '%141 = load i64, i64* %3, align 8', '%142 = add i64 %141, -35', 'store i64 %142, i64* %3, align 8', '%143 = load i64, i64* %6, align 8', '%144 = add i64 %143, 32', 'store i64 %144, i64* %6, align 8', '%145 = icmp ugt i64 %143, -33', '%146 = zext i1 %145 to i8', 'store i8 %146, i8* %14, align 1', '%147 = trunc i64 %144 to i32', '%148 = and i32 %147, 255', '%149 = tail call i32 @llvm.ctpop.i32(i32 %148)', '%150 = trunc i32 %149 to i8', '%151 = and i8 %150, 1', '%152 = xor i8 %151, 1', 'store i8 %152, i8* %21, align 1', '%153 = xor i64 %144, %143', '%154 = lshr i64 %153, 4', '%155 = trunc i64 %154 to i8', '%156 = and i8 %155, 1', 'store i8 %156, i8* %26, align 1', '%157 = icmp eq i64 %144, 0', '%158 = zext i1 %157 to i8', 'store i8 %158, i8* %29, align 1', '%159 = lshr i64 %144, 63', '%160 = trunc i64 %159 to i8', 'store i8 %160, i8* %32, align 1', '%161 = lshr i64 %143, 63', '%162 = xor i64 %159, %161', '%163 = add nuw nsw i64 %162, %159', '%164 = icmp eq i64 %163, 2', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %38, align 1', '%166 = add i64 %96, 7', 'store i64 %166, i64* %3, align 8', '%167 = add i64 %143, 40', '%168 = inttoptr i64 %144 to i64*', '%169 = load i64, i64* %168, align 8', 'store i64 %169, i64* %RBP.i, align 8', 'store i64 %167, i64* %6, align 8', '%170 = add i64 %96, 8', 'store i64 %170, i64* %3, align 8', '%171 = inttoptr i64 %167 to i64*', '%172 = load i64, i64* %171, align 8', 'store i64 %172, i64* %3, align 8', '%173 = add i64 %143, 48', 'store i64 %173, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%42 = load i64, i64* %RBP, align 8', '%43 = add i64 %42, -8', '%44 = load i32, i32* %EDI, align 4', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 3', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %43 to i32*', 'store i32 %44, i32* %47, align 4', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -16', '%50 = load i64, i64* %RSI, align 8', '%51 = load i64, i64* %PC, align 8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %PC, align 8', '%53 = inttoptr i64 %49 to i64*', 'store i64 %50, i64* %53, align 8', '%56 = load i64, i64* %PC, align 8', '%57 = add i64 %56, 7', 'store i64 %57, i64* %PC, align 8', '%61 = load i64, i64* %PC, align 8', '%62 = add i64 %61, 7', 'store i64 %62, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%64 = load i64, i64* %RSP, align 8', '%65 = add i64 %64, 32', 'store i64 %65, i64* %RSP, align 8', '%66 = icmp ugt i64 %64, -33', '%67 = zext i1 %66 to i8', 'store i8 %67, i8* %14, align 1', '%68 = trunc i64 %65 to i32', '%69 = and i32 %68, 255', '%70 = tail call i32 @llvm.ctpop.i32(i32 %69) #12', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', '%73 = xor i8 %72, 1', 'store i8 %73, i8* %21, align 1', '%74 = xor i64 %65, %64', '%75 = lshr i64 %74, 4', '%76 = trunc i64 %75 to i8', '%77 = and i8 %76, 1', 'store i8 %77, i8* %26, align 1', '%78 = icmp eq i64 %65, 0', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %29, align 1', '%80 = lshr i64 %65, 63', '%81 = trunc i64 %80 to i8', 'store i8 %81, i8* %32, align 1', '%82 = lshr i64 %64, 63', '%83 = xor i64 %80, %82', '%84 = add nuw nsw i64 %83, %80', '%85 = icmp eq i64 %84, 2', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %38, align 1', '%87 = add i64 %125, 7', 'store i64 %87, i64* %PC, align 8', '%88 = add i64 %64, 40', '%89 = inttoptr i64 %65 to i64*', '%90 = load i64, i64* %89, align 8', 'store i64 %90, i64* %RBP, align 8', 'store i64 %88, i64* %RSP, align 8', '%91 = add i64 %125, 8', 'store i64 %91, i64* %PC, align 8', '%92 = inttoptr i64 %88 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %PC, align 8', '%94 = add i64 %64, 48', 'store i64 %94, i64* %RSP, align 8', '%95 = phi i64 [ %172, %block_4004e1 ], [ %.pre, %block_4004b0 ]', '%98 = add i64 %95, 7', 'store i64 %98, i64* %PC, align 8', '%102 = icmp ult i32 %100, 255', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %14, align 1', '%104 = and i32 %101, 255', '%105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12', '%106 = trunc i32 %105 to i8', '%107 = and i8 %106, 1', '%108 = xor i8 %107, 1', 'store i8 %108, i8* %21, align 1', '%109 = xor i32 %100, 16', '%110 = xor i32 %109, %101', '%111 = lshr i32 %110, 4', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', 'store i8 %113, i8* %26, align 1', '%115 = zext i1 %114 to i8', 'store i8 %115, i8* %29, align 1', 'store i8 %117, i8* %32, align 1', '%122 = zext i1 %121 to i8', 'store i8 %122, i8* %38, align 1', '%.v = select i1 %.demorgan, i64 13, i64 40', '%125 = add i64 %95, %.v', 'store i64 %125, i64* %PC, align 8', '%126 = add i64 %125, 3', 'store i64 %126, i64* %PC, align 8', '%127 = load i32, i32* %99, align 4', '%128 = zext i32 %127 to i64', 'store i64 %128, i64* %RDI, align 8', 'store i8 0, i8* %AL, align 1', '%129 = add i64 %125, 47', '%130 = add i64 %125, 10', '%131 = load i64, i64* %RSP, align 8', '%132 = add i64 %131, -8', '%133 = inttoptr i64 %132 to i64*', 'store i64 %130, i64* %133, align 8', 'store i64 %132, i64* %RSP, align 8', 'store i64 %129, i64* %PC, align 8', '%134 = tail call %struct.Memory* @sub_400510_switches_renamed_(%struct.State* nonnull %0, i64 %129, %struct.Memory* %2)', '%135 = load i64, i64* %RBP, align 8', '%136 = add i64 %135, -24', '%137 = load i32, i32* %EAX, align 4', '%138 = load i64, i64* %PC, align 8', '%139 = add i64 %138, 3', 'store i64 %139, i64* %PC, align 8', '%140 = inttoptr i64 %136 to i32*', 'store i32 %137, i32* %140, align 4', '%141 = load i64, i64* %RBP, align 8', '%142 = add i64 %141, -20', '%143 = load i64, i64* %PC, align 8', '%144 = add i64 %143, 3', 'store i64 %144, i64* %PC, align 8', '%145 = inttoptr i64 %142 to i32*', '%146 = load i32, i32* %145, align 4', '%147 = add i32 %146, 1', '%148 = zext i32 %147 to i64', 'store i64 %148, i64* %RAX, align 8', '%149 = icmp eq i32 %146, -1', '%150 = icmp eq i32 %147, 0', '%151 = or i1 %149, %150', '%152 = zext i1 %151 to i8', 'store i8 %152, i8* %14, align 1', '%153 = and i32 %147, 255', '%154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12', '%155 = trunc i32 %154 to i8', '%156 = and i8 %155, 1', '%157 = xor i8 %156, 1', 'store i8 %157, i8* %21, align 1', '%158 = xor i32 %147, %146', '%159 = lshr i32 %158, 4', '%160 = trunc i32 %159 to i8', '%161 = and i8 %160, 1', 'store i8 %161, i8* %26, align 1', '%162 = zext i1 %150 to i8', 'store i8 %162, i8* %29, align 1', '%163 = lshr i32 %147, 31', '%164 = trunc i32 %163 to i8', 'store i8 %164, i8* %32, align 1', '%165 = lshr i32 %146, 31', '%166 = xor i32 %163, %165', '%167 = add nuw nsw i32 %166, %163', '%168 = icmp eq i32 %167, 2', '%169 = zext i1 %168 to i8', 'store i8 %169, i8* %38, align 1', '%170 = add i64 %143, 9', 'store i64 %170, i64* %PC, align 8', 'store i32 %147, i32* %145, align 4', '%171 = load i64, i64* %PC, align 8', '%172 = add i64 %171, -35', 'store i64 %172, i64* %PC, align 8'])
Keep: block_4004b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = add i64 %10, 14
Found line to remove! store i64 %40, i64* %PC, align 8
Found line to remove! %41 = inttoptr i64 %39 to i32*
Found line to remove! store i32 0, i32* %41, align 4
Found line to remove! %42 = load i64, i64* %RBP, align 8
Found line to remove! %43 = add i64 %42, -8
Found line to remove! %44 = load i32, i32* %EDI, align 4
Found line to remove! %45 = load i64, i64* %PC, align 8
Found line to remove! %46 = add i64 %45, 3
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = inttoptr i64 %43 to i32*
Found line to remove! store i32 %44, i32* %47, align 4
Found line to remove! %48 = load i64, i64* %RBP, align 8
Found line to remove! %49 = add i64 %48, -16
Found line to remove! %50 = load i64, i64* %RSI, align 8
Found line to remove! %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %PC, align 8
Found line to remove! %53 = inttoptr i64 %49 to i64*
Found line to remove! store i64 %50, i64* %53, align 8
Keep: %54 = load i64, i64* %RBP, align 8
Keep: %55 = add i64 %54, -20
Found line to remove! %56 = load i64, i64* %PC, align 8
Found line to remove! %57 = add i64 %56, 7
Found line to remove! store i64 %57, i64* %PC, align 8
Keep: %58 = inttoptr i64 %55 to i32*
Keep: store i32 0, i32* %58, align 4
Keep: %59 = load i64, i64* %RBP, align 8
Keep: %60 = add i64 %59, -20
Found line to remove! %61 = load i64, i64* %PC, align 8
Found line to remove! %62 = add i64 %61, 7
Found line to remove! store i64 %62, i64* %PC, align 8
Keep: %63 = inttoptr i64 %60 to i32*
Keep: store i32 0, i32* %63, align 4
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4004d4
Keep: 
Keep: block_4004fc:                                     ; preds = %block_4004d4
Keep: store i64 0, i64* %RAX, align 8
Found line to remove! %64 = load i64, i64* %RSP, align 8
Found line to remove! %65 = add i64 %64, 32
Found line to remove! store i64 %65, i64* %RSP, align 8
Found line to remove! %66 = icmp ugt i64 %64, -33
Found line to remove! %67 = zext i1 %66 to i8
Found line to remove! store i8 %67, i8* %14, align 1
Found line to remove! %68 = trunc i64 %65 to i32
Found line to remove! %69 = and i32 %68, 255
Found line to remove! %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #12
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! %73 = xor i8 %72, 1
Found line to remove! store i8 %73, i8* %21, align 1
Found line to remove! %74 = xor i64 %65, %64
Found line to remove! %75 = lshr i64 %74, 4
Found line to remove! %76 = trunc i64 %75 to i8
Found line to remove! %77 = and i8 %76, 1
Found line to remove! store i8 %77, i8* %26, align 1
Found line to remove! %78 = icmp eq i64 %65, 0
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %29, align 1
Found line to remove! %80 = lshr i64 %65, 63
Found line to remove! %81 = trunc i64 %80 to i8
Found line to remove! store i8 %81, i8* %32, align 1
Found line to remove! %82 = lshr i64 %64, 63
Found line to remove! %83 = xor i64 %80, %82
Found line to remove! %84 = add nuw nsw i64 %83, %80
Found line to remove! %85 = icmp eq i64 %84, 2
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %38, align 1
Found line to remove! %87 = add i64 %125, 7
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %88 = add i64 %64, 40
Found line to remove! %89 = inttoptr i64 %65 to i64*
Found line to remove! %90 = load i64, i64* %89, align 8
Found line to remove! store i64 %90, i64* %RBP, align 8
Found line to remove! store i64 %88, i64* %RSP, align 8
Found line to remove! %91 = add i64 %125, 8
Found line to remove! store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %88 to i64*
Found line to remove! %93 = load i64, i64* %92, align 8
Found line to remove! store i64 %93, i64* %PC, align 8
Found line to remove! %94 = add i64 %64, 48
Found line to remove! store i64 %94, i64* %RSP, align 8
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_4004d4:                                     ; preds = %block_4004e1, %block_4004b0
Found line to remove! %95 = phi i64 [ %172, %block_4004e1 ], [ %.pre, %block_4004b0 ]
Keep: %96 = load i64, i64* %RBP, align 8
Keep: %97 = add i64 %96, -20
Found line to remove! %98 = add i64 %95, 7
Found line to remove! store i64 %98, i64* %PC, align 8
Keep: %99 = inttoptr i64 %97 to i32*
Keep: %100 = load i32, i32* %99, align 4
Keep: %101 = add i32 %100, -255
Found line to remove! %102 = icmp ult i32 %100, 255
Found line to remove! %103 = zext i1 %102 to i8
Found line to remove! store i8 %103, i8* %14, align 1
Found line to remove! %104 = and i32 %101, 255
Found line to remove! %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12
Found line to remove! %106 = trunc i32 %105 to i8
Found line to remove! %107 = and i8 %106, 1
Found line to remove! %108 = xor i8 %107, 1
Found line to remove! store i8 %108, i8* %21, align 1
Found line to remove! %109 = xor i32 %100, 16
Found line to remove! %110 = xor i32 %109, %101
Found line to remove! %111 = lshr i32 %110, 4
Found line to remove! %112 = trunc i32 %111 to i8
Found line to remove! %113 = and i8 %112, 1
Found line to remove! store i8 %113, i8* %26, align 1
Keep: %114 = icmp eq i32 %101, 0
Found line to remove! %115 = zext i1 %114 to i8
Found line to remove! store i8 %115, i8* %29, align 1
Keep: %116 = lshr i32 %101, 31
Keep: %117 = trunc i32 %116 to i8
Found line to remove! store i8 %117, i8* %32, align 1
Keep: %118 = lshr i32 %100, 31
Keep: %119 = xor i32 %116, %118
Keep: %120 = add nuw nsw i32 %119, %118
Keep: %121 = icmp eq i32 %120, 2
Found line to remove! %122 = zext i1 %121 to i8
Found line to remove! store i8 %122, i8* %38, align 1
Keep: %123 = icmp ne i8 %117, 0
Keep: %124 = xor i1 %123, %121
Keep: %.demorgan = or i1 %114, %124
Found line to remove! %.v = select i1 %.demorgan, i64 13, i64 40
Found line to remove! %125 = add i64 %95, %.v
Found line to remove! store i64 %125, i64* %PC, align 8
Keep: br i1 %.demorgan, label %block_4004e1, label %block_4004fc
Keep: 
Keep: block_4004e1:                                     ; preds = %block_4004d4
Found line to remove! %126 = add i64 %125, 3
Found line to remove! store i64 %126, i64* %PC, align 8
Found line to remove! %127 = load i32, i32* %99, align 4
Found line to remove! %128 = zext i32 %127 to i64
Found line to remove! store i64 %128, i64* %RDI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %129 = add i64 %125, 47
Found line to remove! %130 = add i64 %125, 10
Found line to remove! %131 = load i64, i64* %RSP, align 8
Found line to remove! %132 = add i64 %131, -8
Found line to remove! %133 = inttoptr i64 %132 to i64*
Found line to remove! store i64 %130, i64* %133, align 8
Found line to remove! store i64 %132, i64* %RSP, align 8
Found line to remove! store i64 %129, i64* %PC, align 8
Found line to remove! %134 = tail call %struct.Memory* @sub_400510_switches_renamed_(%struct.State* nonnull %0, i64 %129, %struct.Memory* %2)
Found line to remove! %135 = load i64, i64* %RBP, align 8
Found line to remove! %136 = add i64 %135, -24
Found line to remove! %137 = load i32, i32* %EAX, align 4
Found line to remove! %138 = load i64, i64* %PC, align 8
Found line to remove! %139 = add i64 %138, 3
Found line to remove! store i64 %139, i64* %PC, align 8
Found line to remove! %140 = inttoptr i64 %136 to i32*
Found line to remove! store i32 %137, i32* %140, align 4
Found line to remove! %141 = load i64, i64* %RBP, align 8
Found line to remove! %142 = add i64 %141, -20
Found line to remove! %143 = load i64, i64* %PC, align 8
Found line to remove! %144 = add i64 %143, 3
Found line to remove! store i64 %144, i64* %PC, align 8
Found line to remove! %145 = inttoptr i64 %142 to i32*
Found line to remove! %146 = load i32, i32* %145, align 4
Found line to remove! %147 = add i32 %146, 1
Found line to remove! %148 = zext i32 %147 to i64
Found line to remove! store i64 %148, i64* %RAX, align 8
Found line to remove! %149 = icmp eq i32 %146, -1
Found line to remove! %150 = icmp eq i32 %147, 0
Found line to remove! %151 = or i1 %149, %150
Found line to remove! %152 = zext i1 %151 to i8
Found line to remove! store i8 %152, i8* %14, align 1
Found line to remove! %153 = and i32 %147, 255
Found line to remove! %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12
Found line to remove! %155 = trunc i32 %154 to i8
Found line to remove! %156 = and i8 %155, 1
Found line to remove! %157 = xor i8 %156, 1
Found line to remove! store i8 %157, i8* %21, align 1
Found line to remove! %158 = xor i32 %147, %146
Found line to remove! %159 = lshr i32 %158, 4
Found line to remove! %160 = trunc i32 %159 to i8
Found line to remove! %161 = and i8 %160, 1
Found line to remove! store i8 %161, i8* %26, align 1
Found line to remove! %162 = zext i1 %150 to i8
Found line to remove! store i8 %162, i8* %29, align 1
Found line to remove! %163 = lshr i32 %147, 31
Found line to remove! %164 = trunc i32 %163 to i8
Found line to remove! store i8 %164, i8* %32, align 1
Found line to remove! %165 = lshr i32 %146, 31
Found line to remove! %166 = xor i32 %163, %165
Found line to remove! %167 = add nuw nsw i32 %166, %163
Found line to remove! %168 = icmp eq i32 %167, 2
Found line to remove! %169 = zext i1 %168 to i8
Found line to remove! store i8 %169, i8* %38, align 1
Found line to remove! %170 = add i64 %143, 9
Found line to remove! store i64 %170, i64* %PC, align 8
Found line to remove! store i32 %147, i32* %145, align 4
Found line to remove! %171 = load i64, i64* %PC, align 8
Found line to remove! %172 = add i64 %171, -35
Found line to remove! store i64 %172, i64* %PC, align 8
Keep: br label %block_4004d4
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%42 = load i64, i64* %RBP, align 8', '%43 = add i64 %42, -8', '%44 = load i32, i32* %EDI, align 4', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 3', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %43 to i32*', 'store i32 %44, i32* %47, align 4', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -16', '%50 = load i64, i64* %RSI, align 8', '%51 = load i64, i64* %PC, align 8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %PC, align 8', '%53 = inttoptr i64 %49 to i64*', 'store i64 %50, i64* %53, align 8', '%56 = load i64, i64* %PC, align 8', '%57 = add i64 %56, 7', 'store i64 %57, i64* %PC, align 8', '%61 = load i64, i64* %PC, align 8', '%62 = add i64 %61, 7', 'store i64 %62, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%64 = load i64, i64* %RSP, align 8', '%65 = add i64 %64, 32', 'store i64 %65, i64* %RSP, align 8', '%66 = icmp ugt i64 %64, -33', '%67 = zext i1 %66 to i8', 'store i8 %67, i8* %14, align 1', '%68 = trunc i64 %65 to i32', '%69 = and i32 %68, 255', '%70 = tail call i32 @llvm.ctpop.i32(i32 %69) #12', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', '%73 = xor i8 %72, 1', 'store i8 %73, i8* %21, align 1', '%74 = xor i64 %65, %64', '%75 = lshr i64 %74, 4', '%76 = trunc i64 %75 to i8', '%77 = and i8 %76, 1', 'store i8 %77, i8* %26, align 1', '%78 = icmp eq i64 %65, 0', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %29, align 1', '%80 = lshr i64 %65, 63', '%81 = trunc i64 %80 to i8', 'store i8 %81, i8* %32, align 1', '%82 = lshr i64 %64, 63', '%83 = xor i64 %80, %82', '%84 = add nuw nsw i64 %83, %80', '%85 = icmp eq i64 %84, 2', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %38, align 1', '%87 = add i64 %125, 7', 'store i64 %87, i64* %PC, align 8', '%88 = add i64 %64, 40', '%89 = inttoptr i64 %65 to i64*', '%90 = load i64, i64* %89, align 8', 'store i64 %90, i64* %RBP, align 8', 'store i64 %88, i64* %RSP, align 8', '%91 = add i64 %125, 8', 'store i64 %91, i64* %PC, align 8', '%92 = inttoptr i64 %88 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %PC, align 8', '%94 = add i64 %64, 48', 'store i64 %94, i64* %RSP, align 8', '%95 = phi i64 [ %172, %block_4004e1 ], [ %.pre, %block_4004b0 ]', '%98 = add i64 %95, 7', 'store i64 %98, i64* %PC, align 8', '%102 = icmp ult i32 %100, 255', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %14, align 1', '%104 = and i32 %101, 255', '%105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12', '%106 = trunc i32 %105 to i8', '%107 = and i8 %106, 1', '%108 = xor i8 %107, 1', 'store i8 %108, i8* %21, align 1', '%109 = xor i32 %100, 16', '%110 = xor i32 %109, %101', '%111 = lshr i32 %110, 4', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', 'store i8 %113, i8* %26, align 1', '%115 = zext i1 %114 to i8', 'store i8 %115, i8* %29, align 1', 'store i8 %117, i8* %32, align 1', '%122 = zext i1 %121 to i8', 'store i8 %122, i8* %38, align 1', '%.v = select i1 %.demorgan, i64 13, i64 40', '%125 = add i64 %95, %.v', 'store i64 %125, i64* %PC, align 8', '%126 = add i64 %125, 3', 'store i64 %126, i64* %PC, align 8', '%127 = load i32, i32* %99, align 4', '%128 = zext i32 %127 to i64', 'store i64 %128, i64* %RDI, align 8', 'store i8 0, i8* %AL, align 1', '%129 = add i64 %125, 47', '%130 = add i64 %125, 10', '%131 = load i64, i64* %RSP, align 8', '%132 = add i64 %131, -8', '%133 = inttoptr i64 %132 to i64*', 'store i64 %130, i64* %133, align 8', 'store i64 %132, i64* %RSP, align 8', 'store i64 %129, i64* %PC, align 8', '%134 = tail call %struct.Memory* @sub_400510_switches_renamed_(%struct.State* nonnull %0, i64 %129, %struct.Memory* %2)', '%135 = load i64, i64* %RBP, align 8', '%136 = add i64 %135, -24', '%137 = load i32, i32* %EAX, align 4', '%138 = load i64, i64* %PC, align 8', '%139 = add i64 %138, 3', 'store i64 %139, i64* %PC, align 8', '%140 = inttoptr i64 %136 to i32*', 'store i32 %137, i32* %140, align 4', '%141 = load i64, i64* %RBP, align 8', '%142 = add i64 %141, -20', '%143 = load i64, i64* %PC, align 8', '%144 = add i64 %143, 3', 'store i64 %144, i64* %PC, align 8', '%145 = inttoptr i64 %142 to i32*', '%146 = load i32, i32* %145, align 4', '%147 = add i32 %146, 1', '%148 = zext i32 %147 to i64', 'store i64 %148, i64* %RAX, align 8', '%149 = icmp eq i32 %146, -1', '%150 = icmp eq i32 %147, 0', '%151 = or i1 %149, %150', '%152 = zext i1 %151 to i8', 'store i8 %152, i8* %14, align 1', '%153 = and i32 %147, 255', '%154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12', '%155 = trunc i32 %154 to i8', '%156 = and i8 %155, 1', '%157 = xor i8 %156, 1', 'store i8 %157, i8* %21, align 1', '%158 = xor i32 %147, %146', '%159 = lshr i32 %158, 4', '%160 = trunc i32 %159 to i8', '%161 = and i8 %160, 1', 'store i8 %161, i8* %26, align 1', '%162 = zext i1 %150 to i8', 'store i8 %162, i8* %29, align 1', '%163 = lshr i32 %147, 31', '%164 = trunc i32 %163 to i8', 'store i8 %164, i8* %32, align 1', '%165 = lshr i32 %146, 31', '%166 = xor i32 %163, %165', '%167 = add nuw nsw i32 %166, %163', '%168 = icmp eq i32 %167, 2', '%169 = zext i1 %168 to i8', 'store i8 %169, i8* %38, align 1', '%170 = add i64 %143, 9', 'store i64 %170, i64* %PC, align 8', 'store i32 %147, i32* %145, align 4', '%171 = load i64, i64* %PC, align 8', '%172 = add i64 %171, -35', 'store i64 %172, i64* %PC, align 8'])Writing '/tmp/tmprkl_2gs6.dot'...
Writing '/tmp/tmprkl_2gs6.dot':Done

Reading LLVM: /tmp/tmpp_8zgxj1-query.ll
Extracting function [main] from /tmp/tmpp_8zgxj1-query.ll
Dot file generated!
Writing '/tmp/tmpg8m5omqe.dot'...
Writing '/tmp/tmpg8m5omqe.dot':Done

Reading LLVM: /tmp/tmpk5k4hewm-target.ll
Extracting function [main] from /tmp/tmpk5k4hewm-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_55 = load i64, i64* %RBP.i, align 8
- 2 %var_2_56 = add i64 %var_2_55, -20
- 3 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 4 store i32 0, i32* %var_2_59, align 4
- 5 %var_2_60 = load i64, i64* %RBP.i, align 8
- 6 %var_2_61 = add i64 %var_2_60, -20
- 7 %var_2_64 = inttoptr i64 %var_2_61 to i32*
- 8 store i32 0, i32* %var_2_64, align 4
- 9 %var_2_67 = load i64, i64* %RBP.i, align 8
- 10 %var_2_68 = add i64 %var_2_67, -20
- 11 %var_2_70 = inttoptr i64 %var_2_68 to i32*
- 12 %var_2_71 = load i32, i32* %var_2_70, align 4
- 13 %var_2_72 = add i32 %var_2_71, -255
- 14 %var_2_85 = icmp eq i32 %var_2_72, 0
- 15 %var_2_87 = lshr i32 %var_2_72, 31
- 16 %var_2_89 = lshr i32 %var_2_71, 31
- 17 %var_2_90 = xor i32 %var_2_87, %var_2_89
- 18 %var_2_91 = add nuw nsw i32 %var_2_90, %var_2_89
- 19 %var_2_92 = icmp eq i32 %var_2_91, 2
- 20 %var_2_94 = icmp ne i32 %var_2_87, 0
- 21 %var_2_95 = xor i1 %var_2_94, %var_2_92
- 22 %.demorgan = or i1 %var_2_85, %var_2_95
- 23 \<badref\> = br i1 %.demorgan, label %block_.L_4004d4.preheader, label %block_.L_4004fc.split
- 24 \<badref\> = br label %block_.L_4004d4
- 25 \<badref\> = br label %block_.L_4004d4
- 26 %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 27 store i64 0, i64* %RAX.i13, align 8
- 28 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f1671ab70>, {0: {0}, 1: {1, 12, 5, 9}, 2: {2, 10, 6}, 3: {11, 3, 7}, 4: {8, 26, 4}, 5: {1, 12, 5, 9}, 6: {2, 10, 6}, 7: {11, 3, 7}, 8: {8, 26, 4}, 9: {1, 12, 5, 9}, 10: {2, 10, 6}, 11: {11, 3, 7}, 12: {1, 12, 5, 9}, 13: {13}, 14: {20, 14}, 15: {16, 15}, 16: {16, 15}, 17: {17, 21}, 18: {18}, 19: {19}, 20: {20, 14}, 21: {17, 21}, 22: {22}, 23: {23}, 24: {24, 28}, 25: {24, 28}, 26: {25}, 27: {8, 26, 4}, 28: {27}})
Equivalent! frozenset({1, 5}) {1, 5}
Equivalent! frozenset({2, 6}) {2, 6}
Equivalent! frozenset({3, 7}) {3, 7}
Equivalent! frozenset({8, 4}) {8, 4}
Equivalent! frozenset({24, 28}) {24, 25}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f1671ab70>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {28}, 26: {25}, 27: {26}, 28: {27}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 icmp icmp
EXACT 15 lshr lshr
EXACT 16 lshr lshr
EXACT 17 xor xor
EXACT 18 add add
EXACT 19 icmp icmp
EXACT 20 icmp icmp
EXACT 21 xor xor
EXACT 22 or or
EXACT 23 br br
EXACT 24 br br
EXACT 25 br br
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_54 = load i64, i64* %RBP, align 8
- 2 %var_2_55 = add i64 %var_2_54, -20
- 3 %var_2_58 = inttoptr i64 %var_2_55 to i32*
- 4 store i32 0, i32* %var_2_58, align 4
- 5 %var_2_59 = load i64, i64* %RBP, align 8
- 6 %var_2_60 = add i64 %var_2_59, -20
- 7 %var_2_63 = inttoptr i64 %var_2_60 to i32*
- 8 store i32 0, i32* %var_2_63, align 4
- 9 %var_2_96 = load i64, i64* %RBP, align 8
- 10 %var_2_97 = add i64 %var_2_96, -20
- 11 %var_2_99 = inttoptr i64 %var_2_97 to i32*
- 12 %var_2_100 = load i32, i32* %var_2_99, align 4
- 13 %var_2_101 = add i32 %var_2_100, -255
- 14 %var_2_114 = icmp eq i32 %var_2_101, 0
- 15 %var_2_116 = lshr i32 %var_2_101, 31
- 16 %var_2_118 = lshr i32 %var_2_100, 31
- 17 %var_2_119 = xor i32 %var_2_116, %var_2_118
- 18 %var_2_120 = add nuw nsw i32 %var_2_119, %var_2_118
- 19 %var_2_121 = icmp eq i32 %var_2_120, 2
- 20 %var_2_123 = icmp ne i32 %var_2_116, 0
- 21 %var_2_124 = xor i1 %var_2_123, %var_2_121
- 22 %.demorgan = or i1 %var_2_114, %var_2_124
- 23 \<badref\> = br i1 %.demorgan, label %block_4004d4.preheader, label %block_4004fc.split
- 24 \<badref\> = br label %block_4004d4
- 25 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 26 store i64 0, i64* %RAX, align 8
- 27 \<badref\> = ret %struct.Memory* %2
- 28 \<badref\> = br label %block_4004d4
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f1681e158>, {0: {0}, 1: {1, 12, 5, 9}, 2: {2, 10, 6}, 3: {11, 3, 7}, 4: {8, 27, 4}, 5: {1, 12, 5, 9}, 6: {2, 10, 6}, 7: {11, 3, 7}, 8: {8, 27, 4}, 9: {1, 12, 5, 9}, 10: {2, 10, 6}, 11: {11, 3, 7}, 12: {1, 12, 5, 9}, 13: {13}, 14: {20, 14}, 15: {16, 15}, 16: {16, 15}, 17: {17, 21}, 18: {18}, 19: {19}, 20: {20, 14}, 21: {17, 21}, 22: {22}, 23: {23}, 24: {24, 25}, 25: {26}, 26: {8, 27, 4}, 27: {28}, 28: {24, 25}})
Equivalent! frozenset({1, 5}) {1, 5}
Equivalent! frozenset({2, 6}) {2, 6}
Equivalent! frozenset({3, 7}) {3, 7}
Equivalent! frozenset({8, 4}) {8, 4}
Equivalent! frozenset({24, 25}) {24, 28}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1f1681e158>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {26}, 26: {27}, 27: {28}, 28: {25}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 icmp icmp
EXACT 15 lshr lshr
EXACT 16 lshr lshr
EXACT 17 xor xor
EXACT 18 add add
EXACT 19 icmp icmp
EXACT 20 icmp icmp
EXACT 21 xor xor
EXACT 22 or or
EXACT 23 br br
EXACT 24 br br
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 ret ret
EXACT 28 br br
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_55 = load i64, i64* %RBP.i, align 8', '%var_2_56 = add i64 %var_2_55, -20', '%var_2_59 = inttoptr i64 %var_2_56 to i32*', 'store i32 0, i32* %var_2_59, align 4', '%var_2_60 = load i64, i64* %RBP.i, align 8', '%var_2_61 = add i64 %var_2_60, -20', '%var_2_64 = inttoptr i64 %var_2_61 to i32*', 'store i32 0, i32* %var_2_64, align 4', '%RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX.i13, align 8'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_55 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_56 = add i64 %var_2_55, -20
Found line to remove! %var_2_59 = inttoptr i64 %var_2_56 to i32*
Found line to remove! store i32 0, i32* %var_2_59, align 4
Found line to remove! %var_2_60 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_61 = add i64 %var_2_60, -20
Found line to remove! %var_2_64 = inttoptr i64 %var_2_61 to i32*
Found line to remove! store i32 0, i32* %var_2_64, align 4
Keep: %var_2_67 = load i64, i64* %RBP.i, align 8
Keep: %var_2_68 = add i64 %var_2_67, -20
Keep: %var_2_70 = inttoptr i64 %var_2_68 to i32*
Keep: %var_2_71 = load i32, i32* %var_2_70, align 4
Keep: %var_2_72 = add i32 %var_2_71, -255
Keep: %var_2_85 = icmp eq i32 %var_2_72, 0
Keep: %var_2_87 = lshr i32 %var_2_72, 31
Keep: %var_2_89 = lshr i32 %var_2_71, 31
Keep: %var_2_90 = xor i32 %var_2_87, %var_2_89
Keep: %var_2_91 = add nuw nsw i32 %var_2_90, %var_2_89
Keep: %var_2_92 = icmp eq i32 %var_2_91, 2
Keep: %var_2_94 = icmp ne i32 %var_2_87, 0
Keep: %var_2_95 = xor i1 %var_2_94, %var_2_92
Keep: %.demorgan = or i1 %var_2_85, %var_2_95
Keep: br i1 %.demorgan, label %block_.L_4004d4.preheader, label %block_.L_4004fc.split
Keep: 
Keep: block_.L_4004d4.preheader:                        ; preds = %entry
Keep: br label %block_.L_4004d4
Keep: 
Keep: block_.L_4004d4:                                  ; preds = %block_.L_4004d4.preheader, %block_.L_4004d4
Keep: br label %block_.L_4004d4
Keep: 
Keep: block_.L_4004fc.split:                            ; preds = %entry
Found line to remove! %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 0, i64* %RAX.i13, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_55 = load i64, i64* %RBP.i, align 8', '%var_2_56 = add i64 %var_2_55, -20', '%var_2_59 = inttoptr i64 %var_2_56 to i32*', 'store i32 0, i32* %var_2_59, align 4', '%var_2_60 = load i64, i64* %RBP.i, align 8', '%var_2_61 = add i64 %var_2_60, -20', '%var_2_64 = inttoptr i64 %var_2_61 to i32*', 'store i32 0, i32* %var_2_64, align 4', '%RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX.i13, align 8'])
TO REMOVE: dict_keys(['%var_2_54 = load i64, i64* %RBP, align 8', '%var_2_55 = add i64 %var_2_54, -20', '%var_2_58 = inttoptr i64 %var_2_55 to i32*', 'store i32 0, i32* %var_2_58, align 4', '%var_2_59 = load i64, i64* %RBP, align 8', '%var_2_60 = add i64 %var_2_59, -20', '%var_2_63 = inttoptr i64 %var_2_60 to i32*', 'store i32 0, i32* %var_2_63, align 4', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX, align 8'])
Keep: block_4004b0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_54 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_55 = add i64 %var_2_54, -20
Found line to remove! %var_2_58 = inttoptr i64 %var_2_55 to i32*
Found line to remove! store i32 0, i32* %var_2_58, align 4
Found line to remove! %var_2_59 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_60 = add i64 %var_2_59, -20
Found line to remove! %var_2_63 = inttoptr i64 %var_2_60 to i32*
Found line to remove! store i32 0, i32* %var_2_63, align 4
Keep: %var_2_96 = load i64, i64* %RBP, align 8
Keep: %var_2_97 = add i64 %var_2_96, -20
Keep: %var_2_99 = inttoptr i64 %var_2_97 to i32*
Keep: %var_2_100 = load i32, i32* %var_2_99, align 4
Keep: %var_2_101 = add i32 %var_2_100, -255
Keep: %var_2_114 = icmp eq i32 %var_2_101, 0
Keep: %var_2_116 = lshr i32 %var_2_101, 31
Keep: %var_2_118 = lshr i32 %var_2_100, 31
Keep: %var_2_119 = xor i32 %var_2_116, %var_2_118
Keep: %var_2_120 = add nuw nsw i32 %var_2_119, %var_2_118
Keep: %var_2_121 = icmp eq i32 %var_2_120, 2
Keep: %var_2_123 = icmp ne i32 %var_2_116, 0
Keep: %var_2_124 = xor i1 %var_2_123, %var_2_121
Keep: %.demorgan = or i1 %var_2_114, %var_2_124
Keep: br i1 %.demorgan, label %block_4004d4.preheader, label %block_4004fc.split
Keep: 
Keep: block_4004d4.preheader:                           ; preds = %block_4004b0
Keep: br label %block_4004d4
Keep: 
Keep: block_4004fc.split:                               ; preds = %block_4004b0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 0, i64* %RAX, align 8
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_4004d4:                                     ; preds = %block_4004d4.preheader, %block_4004d4
Keep: br label %block_4004d4
Missed: dict_keys(['%var_2_54 = load i64, i64* %RBP, align 8', '%var_2_55 = add i64 %var_2_54, -20', '%var_2_58 = inttoptr i64 %var_2_55 to i32*', 'store i32 0, i32* %var_2_58, align 4', '%var_2_59 = load i64, i64* %RBP, align 8', '%var_2_60 = add i64 %var_2_59, -20', '%var_2_63 = inttoptr i64 %var_2_60 to i32*', 'store i32 0, i32* %var_2_63, align 4', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX, align 8'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_20/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_20/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
