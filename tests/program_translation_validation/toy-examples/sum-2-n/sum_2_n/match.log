Writing '/tmp/tmprcqpdcvl.dot'...
Writing '/tmp/tmprcqpdcvl.dot':Done

Reading LLVM: /tmp/tmpfe21vuby-query.ll
Extracting function [sum_2_n] from /tmp/tmpfe21vuby-query.ll
Dot file generated!
Writing '/tmp/tmp4kjw53kx.dot'...
Writing '/tmp/tmp4kjw53kx.dot':Done

Reading LLVM: /tmp/tmpw3aw_t8f-target.ll
Extracting function [sum_2_n] from /tmp/tmpw3aw_t8f-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 14 %EDI.i = bitcast %union.anon* %11 to i32*
- 15 %12 = add i64 %7, -12
- 16 %13 = load i32, i32* %EDI.i, align 4
- 17 %14 = add i64 %10, 6
- 18 store i64 %14, i64* %3, align 8
- 19 %15 = inttoptr i64 %12 to i32*
- 20 store i32 %13, i32* %15, align 4
- 21 %16 = load i64, i64* %RBP.i, align 8
- 22 %17 = add i64 %16, -8
- 23 %18 = load i64, i64* %3, align 8
- 24 %19 = add i64 %18, 7
- 25 store i64 %19, i64* %3, align 8
- 26 %20 = inttoptr i64 %17 to i32*
- 27 store i32 0, i32* %20, align 4
- 28 %21 = load i64, i64* %RBP.i, align 8
- 29 %22 = add i64 %21, -12
- 30 %23 = load i64, i64* %3, align 8
- 31 %24 = add i64 %23, 7
- 32 store i64 %24, i64* %3, align 8
- 33 %25 = inttoptr i64 %22 to i32*
- 34 store i32 0, i32* %25, align 4
- 35 %RAX.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 36 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 37 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 38 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 40 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 41 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 42 %.pre = load i64, i64* %3, align 8
- 43 \<badref\> = br label %block_.L_4004c5
- 44 %32 = phi i64 [ %136, %block_4004d1 ], [ %.pre, %entry ]
- 45 %33 = load i64, i64* %RBP.i, align 8
- 46 %34 = add i64 %33, -12
- 47 %35 = add i64 %32, 3
- 48 store i64 %35, i64* %3, align 8
- 49 %36 = inttoptr i64 %34 to i32*
- 50 %37 = load i32, i32* %36, align 4
- 51 %38 = zext i32 %37 to i64
- 52 store i64 %38, i64* %RAX.i28, align 8
- 53 %39 = add i64 %33, -4
- 54 %40 = add i64 %32, 6
- 55 store i64 %40, i64* %3, align 8
- 56 %41 = inttoptr i64 %39 to i32*
- 57 %42 = load i32, i32* %41, align 4
- 58 %43 = sub i32 %37, %42
- 59 %44 = icmp ult i32 %37, %42
- 60 %45 = zext i1 %44 to i8
- 61 store i8 %45, i8* %26, align 1
- 62 %46 = and i32 %43, 255
- 63 %47 = tail call i32 @llvm.ctpop.i32(i32 %46)
- 64 %48 = trunc i32 %47 to i8
- 65 %49 = and i8 %48, 1
- 66 %50 = xor i8 %49, 1
- 67 store i8 %50, i8* %27, align 1
- 68 %51 = xor i32 %42, %37
- 69 %52 = xor i32 %51, %43
- 70 %53 = lshr i32 %52, 4
- 71 %54 = trunc i32 %53 to i8
- 72 %55 = and i8 %54, 1
- 73 store i8 %55, i8* %28, align 1
- 74 %56 = icmp eq i32 %43, 0
- 75 %57 = zext i1 %56 to i8
- 76 store i8 %57, i8* %29, align 1
- 77 %58 = lshr i32 %43, 31
- 78 %59 = trunc i32 %58 to i8
- 79 store i8 %59, i8* %30, align 1
- 80 %60 = lshr i32 %37, 31
- 81 %61 = lshr i32 %42, 31
- 82 %62 = xor i32 %61, %60
- 83 %63 = xor i32 %58, %60
- 84 %64 = add nuw nsw i32 %63, %62
- 85 %65 = icmp eq i32 %64, 2
- 86 %66 = zext i1 %65 to i8
- 87 store i8 %66, i8* %31, align 1
- 88 %67 = icmp ne i8 %59, 0
- 89 %68 = xor i1 %67, %65
- 90 %.v = select i1 %68, i64 12, i64 35
- 91 %69 = add i64 %32, %.v
- 92 store i64 %69, i64* %3, align 8
- 93 \<badref\> = br i1 %68, label %block_4004d1, label %block_.L_4004e8
- 94 %70 = add i64 %69, 3
- 95 store i64 %70, i64* %3, align 8
- 96 %71 = load i32, i32* %36, align 4
- 97 %72 = zext i32 %71 to i64
- 98 store i64 %72, i64* %RAX.i28, align 8
- 99 %73 = add i64 %33, -8
- 100 %74 = add i64 %69, 6
- 101 store i64 %74, i64* %3, align 8
- 102 %75 = inttoptr i64 %73 to i32*
- 103 %76 = load i32, i32* %75, align 4
- 104 %77 = add i32 %76, %71
- 105 %78 = zext i32 %77 to i64
- 106 store i64 %78, i64* %RAX.i28, align 8
- 107 %79 = icmp ult i32 %77, %71
- 108 %80 = icmp ult i32 %77, %76
- 109 %81 = or i1 %79, %80
- 110 %82 = zext i1 %81 to i8
- 111 store i8 %82, i8* %26, align 1
- 112 %83 = and i32 %77, 255
- 113 %84 = tail call i32 @llvm.ctpop.i32(i32 %83)
- 114 %85 = trunc i32 %84 to i8
- 115 %86 = and i8 %85, 1
- 116 %87 = xor i8 %86, 1
- 117 store i8 %87, i8* %27, align 1
- 118 %88 = xor i32 %76, %71
- 119 %89 = xor i32 %88, %77
- 120 %90 = lshr i32 %89, 4
- 121 %91 = trunc i32 %90 to i8
- 122 %92 = and i8 %91, 1
- 123 store i8 %92, i8* %28, align 1
- 124 %93 = icmp eq i32 %77, 0
- 125 %94 = zext i1 %93 to i8
- 126 store i8 %94, i8* %29, align 1
- 127 %95 = lshr i32 %77, 31
- 128 %96 = trunc i32 %95 to i8
- 129 store i8 %96, i8* %30, align 1
- 130 %97 = lshr i32 %71, 31
- 131 %98 = lshr i32 %76, 31
- 132 %99 = xor i32 %95, %97
- 133 %100 = xor i32 %95, %98
- 134 %101 = add nuw nsw i32 %99, %100
- 135 %102 = icmp eq i32 %101, 2
- 136 %103 = zext i1 %102 to i8
- 137 store i8 %103, i8* %31, align 1
- 138 %104 = add i64 %69, 9
- 139 store i64 %104, i64* %3, align 8
- 140 store i32 %77, i32* %75, align 4
- 141 %105 = load i64, i64* %RBP.i, align 8
- 142 %106 = add i64 %105, -12
- 143 %107 = load i64, i64* %3, align 8
- 144 %108 = add i64 %107, 3
- 145 store i64 %108, i64* %3, align 8
- 146 %109 = inttoptr i64 %106 to i32*
- 147 %110 = load i32, i32* %109, align 4
- 148 %111 = add i32 %110, 1
- 149 %112 = zext i32 %111 to i64
- 150 store i64 %112, i64* %RAX.i28, align 8
- 151 %113 = icmp eq i32 %110, -1
- 152 %114 = icmp eq i32 %111, 0
- 153 %115 = or i1 %113, %114
- 154 %116 = zext i1 %115 to i8
- 155 store i8 %116, i8* %26, align 1
- 156 %117 = and i32 %111, 255
- 157 %118 = tail call i32 @llvm.ctpop.i32(i32 %117)
- 158 %119 = trunc i32 %118 to i8
- 159 %120 = and i8 %119, 1
- 160 %121 = xor i8 %120, 1
- 161 store i8 %121, i8* %27, align 1
- 162 %122 = xor i32 %111, %110
- 163 %123 = lshr i32 %122, 4
- 164 %124 = trunc i32 %123 to i8
- 165 %125 = and i8 %124, 1
- 166 store i8 %125, i8* %28, align 1
- 167 %126 = zext i1 %114 to i8
- 168 store i8 %126, i8* %29, align 1
- 169 %127 = lshr i32 %111, 31
- 170 %128 = trunc i32 %127 to i8
- 171 store i8 %128, i8* %30, align 1
- 172 %129 = lshr i32 %110, 31
- 173 %130 = xor i32 %127, %129
- 174 %131 = add nuw nsw i32 %130, %127
- 175 %132 = icmp eq i32 %131, 2
- 176 %133 = zext i1 %132 to i8
- 177 store i8 %133, i8* %31, align 1
- 178 %134 = add i64 %107, 9
- 179 store i64 %134, i64* %3, align 8
- 180 store i32 %111, i32* %109, align 4
- 181 %135 = load i64, i64* %3, align 8
- 182 %136 = add i64 %135, -30
- 183 store i64 %136, i64* %3, align 8
- 184 \<badref\> = br label %block_.L_4004c5
- 185 %137 = add i64 %33, -8
- 186 %138 = add i64 %69, 3
- 187 store i64 %138, i64* %3, align 8
- 188 %139 = inttoptr i64 %137 to i32*
- 189 %140 = load i32, i32* %139, align 4
- 190 %141 = zext i32 %140 to i64
- 191 store i64 %141, i64* %RAX.i28, align 8
- 192 %142 = add i64 %69, 4
- 193 store i64 %142, i64* %3, align 8
- 194 %143 = load i64, i64* %6, align 8
- 195 %144 = add i64 %143, 8
- 196 %145 = inttoptr i64 %143 to i64*
- 197 %146 = load i64, i64* %145, align 8
- 198 store i64 %146, i64* %RBP.i, align 8
- 199 store i64 %144, i64* %6, align 8
- 200 %147 = add i64 %69, 5
- 201 store i64 %147, i64* %3, align 8
- 202 %148 = inttoptr i64 %144 to i64*
- 203 %149 = load i64, i64* %148, align 8
- 204 store i64 %149, i64* %3, align 8
- 205 %150 = add i64 %143, 16
- 206 store i64 %150, i64* %6, align 8
- 207 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9162d3fea0>, {0: {0}, 1: {4}, 2: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 3: {171, 6}, 4: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 5: {8}, 6: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 7: {10, 122, 94, 23}, 8: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 9: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 10: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 11: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 12: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 13: {1}, 14: {2}, 15: {16, 46, 165, 30}, 16: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 17: {18, 123, 54}, 18: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 19: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 20: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 21: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 22: {10, 122, 94, 23}, 23: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 24: {32, 25}, 25: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 26: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 27: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 28: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 29: {16, 46, 165, 30}, 30: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 31: {32, 25}, 32: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 33: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 34: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 35: {3}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 43: {43, 207}, 44: {44}, 45: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 46: {16, 46, 165, 30}, 47: {167, 117, 95, 47}, 48: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 49: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 50: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 51: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 52: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 53: {53}, 54: {18, 123, 54}, 55: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 56: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 57: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 58: {58}, 59: {130, 131, 74, 175, 147, 88, 59}, 60: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 61: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 62: {179, 62, 135}, 63: {136, 180, 63}, 64: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 65: {65, 72, 138, 145, 182, 188}, 66: {66, 139, 183}, 67: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 68: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 69: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 70: {186, 70, 143}, 71: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 72: {65, 72, 138, 145, 182, 188}, 73: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 74: {130, 131, 74, 175, 147, 88, 59}, 75: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 76: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 77: {192, 195, 77, 80, 81, 150, 153, 154}, 78: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 79: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 80: {192, 195, 77, 80, 81, 150, 153, 154}, 81: {192, 195, 77, 80, 81, 150, 153, 154}, 82: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 83: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 84: {197, 84, 91, 157, 127}, 85: {198, 85, 158}, 86: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 87: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 88: {130, 131, 74, 175, 147, 88, 59}, 89: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 90: {90}, 91: {197, 84, 91, 157, 127}, 92: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 93: {93}, 94: {167, 117, 95, 47}, 95: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 96: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 97: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 98: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 99: {10, 122, 94, 23}, 100: {18, 123, 54}, 101: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 102: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 103: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 104: {197, 84, 91, 157, 127}, 105: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 106: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 107: {130, 131, 74, 175, 147, 88, 59}, 108: {130, 131, 74, 175, 147, 88, 59}, 109: {176, 132}, 110: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 111: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 112: {179, 62, 135}, 113: {136, 180, 63}, 114: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 115: {65, 72, 138, 145, 182, 188}, 116: {66, 139, 183}, 117: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 118: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 119: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 120: {186, 70, 143}, 121: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 122: {65, 72, 138, 145, 182, 188}, 123: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 124: {130, 131, 74, 175, 147, 88, 59}, 125: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 126: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 127: {192, 195, 77, 80, 81, 150, 153, 154}, 128: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 129: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 130: {192, 195, 77, 80, 81, 150, 153, 154}, 131: {192, 195, 77, 80, 81, 150, 153, 154}, 132: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 133: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 134: {197, 84, 91, 157, 127}, 135: {198, 85, 158}, 136: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 137: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 138: {161, 201}, 139: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 140: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 141: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 142: {16, 46, 165, 30}, 143: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 144: {167, 117, 95, 47}, 145: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 146: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 147: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 148: {171, 6}, 149: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 150: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 151: {174}, 152: {130, 131, 74, 175, 147, 88, 59}, 153: {176, 132}, 154: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 155: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 156: {179, 62, 135}, 157: {136, 180, 63}, 158: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 159: {65, 72, 138, 145, 182, 188}, 160: {66, 139, 183}, 161: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 162: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 163: {186, 70, 143}, 164: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 165: {65, 72, 138, 145, 182, 188}, 166: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 167: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 168: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 169: {192, 195, 77, 80, 81, 150, 153, 154}, 170: {64, 193, 71, 137, 78, 144, 181, 151, 187}, 171: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 172: {192, 195, 77, 80, 81, 150, 153, 154}, 173: {185, 68, 69, 196, 141, 142, 82, 83, 89, 155, 156}, 174: {197, 84, 91, 157, 127}, 175: {198, 85, 158}, 176: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 177: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 178: {161, 201}, 179: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 180: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 181: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 182: {205}, 183: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 184: {43, 207}, 185: {10, 122, 94, 23}, 186: {167, 117, 95, 47}, 187: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 188: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 189: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 190: {128, 99, 133, 199, 75, 172, 177, 51, 148, 86, 120, 60, 190, 159}, 191: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 192: {101}, 193: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 194: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 195: {104}, 196: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 197: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 198: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 199: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 200: {109}, 201: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 202: {97, 34, 105, 169, 11, 111, 49, 20, 56, 27, 125}, 203: {5, 9, 14, 17, 22, 24, 29, 31, 164, 166, 42, 170, 45, 50, 57, 204, 98, 103, 106, 112, 119, 126}, 204: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 205: {114}, 206: {129, 134, 7, 12, 13, 140, 15, 146, 19, 21, 149, 152, 26, 28, 160, 33, 162, 35, 163, 168, 173, 48, 178, 52, 55, 184, 61, 189, 191, 194, 67, 200, 73, 202, 203, 76, 206, 79, 87, 92, 96, 100, 102, 107, 108, 110, 113, 115, 118, 121, 124}, 207: {116}})
Equivalent! frozenset({24, 31}) {30, 23}
Equivalent! frozenset({32, 25}) {24, 31}
Equivalent! frozenset({33, 26}) {32, 25}
Equivalent! frozenset({43, 207}) {184, 43}
Equivalent! frozenset({50, 119}) {96, 50}
Equivalent! frozenset({120, 51}) {97, 51}
Equivalent! frozenset({121, 52}) {98, 52}
Equivalent! frozenset({117, 95}) {186, 94}
Equivalent! frozenset({96, 118}) {187, 95}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9162d3fea0>, {0: {0}, 1: {4}, 2: {5}, 3: {6}, 4: {7}, 5: {8}, 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {14}, 12: {15}, 13: {1}, 14: {2}, 15: {16}, 16: {17}, 17: {18}, 18: {19}, 19: {20}, 20: {21}, 21: {45, 22}, 22: {122, 23}, 23: {31}, 24: {32}, 25: {26}, 26: {27, 125}, 27: {163, 28}, 28: {164, 29}, 29: {165, 30}, 30: {24}, 31: {25}, 32: {33}, 33: {169, 34}, 34: {35, 203}, 35: {3}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {42}, 43: {207}, 44: {44}, 45: {45}, 46: {46}, 47: {47}, 48: {48}, 49: {49}, 50: {119}, 51: {51}, 52: {52}, 53: {53}, 54: {54}, 55: {55}, 56: {56}, 57: {57}, 58: {58}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {95}, 95: {118}, 96: {50}, 97: {120}, 98: {121}, 99: {122}, 100: {123}, 101: {124}, 102: {125}, 103: {126}, 104: {127}, 105: {128}, 106: {129}, 107: {130}, 108: {131}, 109: {132}, 110: {133}, 111: {134}, 112: {135}, 113: {136}, 114: {137}, 115: {138}, 116: {139}, 117: {140}, 118: {141}, 119: {142}, 120: {143}, 121: {144}, 122: {145}, 123: {146}, 124: {147}, 125: {148}, 126: {149}, 127: {150}, 128: {151}, 129: {152}, 130: {153}, 131: {154}, 132: {155}, 133: {156}, 134: {157}, 135: {158}, 136: {159}, 137: {160}, 138: {161}, 139: {162}, 140: {163}, 141: {164}, 142: {165}, 143: {166}, 144: {167}, 145: {168}, 146: {169}, 147: {170}, 148: {171}, 149: {172}, 150: {173}, 151: {174}, 152: {175}, 153: {176}, 154: {177}, 155: {178}, 156: {179}, 157: {180}, 158: {181}, 159: {182}, 160: {183}, 161: {184}, 162: {185}, 163: {186}, 164: {187}, 165: {188}, 166: {189}, 167: {190}, 168: {191}, 169: {192}, 170: {193}, 171: {194}, 172: {195}, 173: {196}, 174: {197}, 175: {198}, 176: {199}, 177: {200}, 178: {201}, 179: {202}, 180: {203}, 181: {204}, 182: {205}, 183: {206}, 184: {43}, 185: {94}, 186: {117}, 187: {96}, 188: {97}, 189: {98}, 190: {99}, 191: {100}, 192: {101}, 193: {102}, 194: {103}, 195: {104}, 196: {105}, 197: {106}, 198: {107}, 199: {108}, 200: {109}, 201: {110}, 202: {111}, 203: {112}, 204: {113}, 205: {114}, 206: {115}, 207: {116}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 bitcast bitcast
EXACT 15 add add
EXACT 16 load load
EXACT 17 add add
EXACT 18 store store
EXACT 19 inttoptr inttoptr
EXACT 20 store store
MORE 21 POT: 2
MORE 22 POT: 2
EXACT 23 load load
EXACT 24 add add
EXACT 25 store store
MORE 26 POT: 2
MORE 27 POT: 2
MORE 28 POT: 2
MORE 29 POT: 2
EXACT 30 load load
EXACT 31 add add
EXACT 32 store store
MORE 33 POT: 2
MORE 34 POT: 2
EXACT 35 getelementptr getelementptr
EXACT 36 getelementptr getelementptr
EXACT 37 getelementptr getelementptr
EXACT 38 getelementptr getelementptr
EXACT 39 getelementptr getelementptr
EXACT 40 getelementptr getelementptr
EXACT 41 getelementptr getelementptr
EXACT 42 load load
EXACT 43 br br
EXACT 44 phi phi
EXACT 45 load load
EXACT 46 add add
EXACT 47 add add
EXACT 48 store store
EXACT 49 inttoptr inttoptr
EXACT 50 load load
EXACT 51 zext zext
EXACT 52 store store
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 load load
EXACT 58 sub sub
EXACT 59 icmp icmp
EXACT 60 zext zext
EXACT 61 store store
EXACT 62 and and
EXACT 63 tail tail
EXACT 64 trunc trunc
EXACT 65 and and
EXACT 66 xor xor
EXACT 67 store store
EXACT 68 xor xor
EXACT 69 xor xor
EXACT 70 lshr lshr
EXACT 71 trunc trunc
EXACT 72 and and
EXACT 73 store store
EXACT 74 icmp icmp
EXACT 75 zext zext
EXACT 76 store store
EXACT 77 lshr lshr
EXACT 78 trunc trunc
EXACT 79 store store
EXACT 80 lshr lshr
EXACT 81 lshr lshr
EXACT 82 xor xor
EXACT 83 xor xor
EXACT 84 add add
EXACT 85 icmp icmp
EXACT 86 zext zext
EXACT 87 store store
EXACT 88 icmp icmp
EXACT 89 xor xor
EXACT 90 select select
EXACT 91 add add
EXACT 92 store store
EXACT 93 br br
EXACT 94 add add
EXACT 95 store store
EXACT 96 load load
EXACT 97 zext zext
EXACT 98 store store
EXACT 99 add add
EXACT 100 add add
EXACT 101 store store
EXACT 102 inttoptr inttoptr
EXACT 103 load load
EXACT 104 add add
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 icmp icmp
EXACT 108 icmp icmp
EXACT 109 or or
EXACT 110 zext zext
EXACT 111 store store
EXACT 112 and and
EXACT 113 tail tail
EXACT 114 trunc trunc
EXACT 115 and and
EXACT 116 xor xor
EXACT 117 store store
EXACT 118 xor xor
EXACT 119 xor xor
EXACT 120 lshr lshr
EXACT 121 trunc trunc
EXACT 122 and and
EXACT 123 store store
EXACT 124 icmp icmp
EXACT 125 zext zext
EXACT 126 store store
EXACT 127 lshr lshr
EXACT 128 trunc trunc
EXACT 129 store store
EXACT 130 lshr lshr
EXACT 131 lshr lshr
EXACT 132 xor xor
EXACT 133 xor xor
EXACT 134 add add
EXACT 135 icmp icmp
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 add add
EXACT 139 store store
EXACT 140 store store
EXACT 141 load load
EXACT 142 add add
EXACT 143 load load
EXACT 144 add add
EXACT 145 store store
EXACT 146 inttoptr inttoptr
EXACT 147 load load
EXACT 148 add add
EXACT 149 zext zext
EXACT 150 store store
EXACT 151 icmp icmp
EXACT 152 icmp icmp
EXACT 153 or or
EXACT 154 zext zext
EXACT 155 store store
EXACT 156 and and
EXACT 157 tail tail
EXACT 158 trunc trunc
EXACT 159 and and
EXACT 160 xor xor
EXACT 161 store store
EXACT 162 xor xor
EXACT 163 lshr lshr
EXACT 164 trunc trunc
EXACT 165 and and
EXACT 166 store store
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 lshr lshr
EXACT 170 trunc trunc
EXACT 171 store store
EXACT 172 lshr lshr
EXACT 173 xor xor
EXACT 174 add add
EXACT 175 icmp icmp
EXACT 176 zext zext
EXACT 177 store store
EXACT 178 add add
EXACT 179 store store
EXACT 180 store store
EXACT 181 load load
EXACT 182 add add
EXACT 183 store store
EXACT 184 br br
EXACT 185 add add
EXACT 186 add add
EXACT 187 store store
EXACT 188 inttoptr inttoptr
EXACT 189 load load
EXACT 190 zext zext
EXACT 191 store store
EXACT 192 add add
EXACT 193 store store
EXACT 194 load load
EXACT 195 add add
EXACT 196 inttoptr inttoptr
EXACT 197 load load
EXACT 198 store store
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 store store
EXACT 205 add add
EXACT 206 store store
EXACT 207 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 2 %EDI = bitcast %union.anon* %3 to i32*
- 3 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 4 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 5 %4 = load i64, i64* %RBP, align 8
- 6 %5 = add i64 %1, 1
- 7 store i64 %5, i64* %PC, align 8
- 8 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 9 %7 = load i64, i64* %6, align 8
- 10 %8 = add i64 %7, -8
- 11 %9 = inttoptr i64 %8 to i64*
- 12 store i64 %4, i64* %9, align 8
- 13 store i64 %8, i64* %6, align 8
- 14 %10 = load i64, i64* %PC, align 8
- 15 store i64 %8, i64* %RBP, align 8
- 16 %11 = add i64 %7, -12
- 17 %12 = load i32, i32* %EDI, align 4
- 18 %13 = add i64 %10, 6
- 19 store i64 %13, i64* %PC, align 8
- 20 %14 = inttoptr i64 %11 to i32*
- 21 store i32 %12, i32* %14, align 4
- 22 %15 = load i64, i64* %RBP, align 8
- 23 %16 = add i64 %15, -8
- 24 %17 = load i64, i64* %PC, align 8
- 25 %18 = add i64 %17, 7
- 26 store i64 %18, i64* %PC, align 8
- 27 %19 = inttoptr i64 %16 to i32*
- 28 store i32 0, i32* %19, align 4
- 29 %20 = load i64, i64* %RBP, align 8
- 30 %21 = add i64 %20, -12
- 31 %22 = load i64, i64* %PC, align 8
- 32 %23 = add i64 %22, 7
- 33 store i64 %23, i64* %PC, align 8
- 34 %24 = inttoptr i64 %21 to i32*
- 35 store i32 0, i32* %24, align 4
- 36 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 37 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 38 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 40 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 41 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 42 %.pre = load i64, i64* %PC, align 8
- 43 \<badref\> = br label %block_4004c5
- 44 %31 = phi i64 [ %149, %block_4004d1 ], [ %.pre, %block_4004b0 ]
- 45 %32 = load i64, i64* %RBP, align 8
- 46 %33 = add i64 %32, -12
- 47 %34 = add i64 %31, 3
- 48 store i64 %34, i64* %PC, align 8
- 49 %35 = inttoptr i64 %33 to i32*
- 50 %36 = load i32, i32* %35, align 4
- 51 %37 = zext i32 %36 to i64
- 52 store i64 %37, i64* %RAX, align 8
- 53 %38 = add i64 %32, -4
- 54 %39 = add i64 %31, 6
- 55 store i64 %39, i64* %PC, align 8
- 56 %40 = inttoptr i64 %38 to i32*
- 57 %41 = load i32, i32* %40, align 4
- 58 %42 = sub i32 %36, %41
- 59 %43 = icmp ult i32 %36, %41
- 60 %44 = zext i1 %43 to i8
- 61 store i8 %44, i8* %25, align 1
- 62 %45 = and i32 %42, 255
- 63 %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #12
- 64 %47 = trunc i32 %46 to i8
- 65 %48 = and i8 %47, 1
- 66 %49 = xor i8 %48, 1
- 67 store i8 %49, i8* %26, align 1
- 68 %50 = xor i32 %41, %36
- 69 %51 = xor i32 %50, %42
- 70 %52 = lshr i32 %51, 4
- 71 %53 = trunc i32 %52 to i8
- 72 %54 = and i8 %53, 1
- 73 store i8 %54, i8* %27, align 1
- 74 %55 = icmp eq i32 %42, 0
- 75 %56 = zext i1 %55 to i8
- 76 store i8 %56, i8* %28, align 1
- 77 %57 = lshr i32 %42, 31
- 78 %58 = trunc i32 %57 to i8
- 79 store i8 %58, i8* %29, align 1
- 80 %59 = lshr i32 %36, 31
- 81 %60 = lshr i32 %41, 31
- 82 %61 = xor i32 %60, %59
- 83 %62 = xor i32 %57, %59
- 84 %63 = add nuw nsw i32 %62, %61
- 85 %64 = icmp eq i32 %63, 2
- 86 %65 = zext i1 %64 to i8
- 87 store i8 %65, i8* %30, align 1
- 88 %66 = icmp ne i8 %58, 0
- 89 %67 = xor i1 %66, %64
- 90 %.v = select i1 %67, i64 12, i64 35
- 91 %68 = add i64 %31, %.v
- 92 store i64 %68, i64* %PC, align 8
- 93 \<badref\> = br i1 %67, label %block_4004d1, label %block_4004e8
- 94 %69 = add i64 %32, -8
- 95 %70 = add i64 %68, 3
- 96 store i64 %70, i64* %PC, align 8
- 97 %71 = inttoptr i64 %69 to i32*
- 98 %72 = load i32, i32* %71, align 4
- 99 %73 = zext i32 %72 to i64
- 100 store i64 %73, i64* %RAX, align 8
- 101 %74 = add i64 %68, 4
- 102 store i64 %74, i64* %PC, align 8
- 103 %75 = load i64, i64* %6, align 8
- 104 %76 = add i64 %75, 8
- 105 %77 = inttoptr i64 %75 to i64*
- 106 %78 = load i64, i64* %77, align 8
- 107 store i64 %78, i64* %RBP, align 8
- 108 store i64 %76, i64* %6, align 8
- 109 %79 = add i64 %68, 5
- 110 store i64 %79, i64* %PC, align 8
- 111 %80 = inttoptr i64 %76 to i64*
- 112 %81 = load i64, i64* %80, align 8
- 113 store i64 %81, i64* %PC, align 8
- 114 %82 = add i64 %75, 16
- 115 store i64 %82, i64* %6, align 8
- 116 \<badref\> = ret %struct.Memory* %2
- 117 %83 = add i64 %68, 3
- 118 store i64 %83, i64* %PC, align 8
- 119 %84 = load i32, i32* %35, align 4
- 120 %85 = zext i32 %84 to i64
- 121 store i64 %85, i64* %RAX, align 8
- 122 %86 = add i64 %32, -8
- 123 %87 = add i64 %68, 6
- 124 store i64 %87, i64* %PC, align 8
- 125 %88 = inttoptr i64 %86 to i32*
- 126 %89 = load i32, i32* %88, align 4
- 127 %90 = add i32 %89, %84
- 128 %91 = zext i32 %90 to i64
- 129 store i64 %91, i64* %RAX, align 8
- 130 %92 = icmp ult i32 %90, %84
- 131 %93 = icmp ult i32 %90, %89
- 132 %94 = or i1 %92, %93
- 133 %95 = zext i1 %94 to i8
- 134 store i8 %95, i8* %25, align 1
- 135 %96 = and i32 %90, 255
- 136 %97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12
- 137 %98 = trunc i32 %97 to i8
- 138 %99 = and i8 %98, 1
- 139 %100 = xor i8 %99, 1
- 140 store i8 %100, i8* %26, align 1
- 141 %101 = xor i32 %89, %84
- 142 %102 = xor i32 %101, %90
- 143 %103 = lshr i32 %102, 4
- 144 %104 = trunc i32 %103 to i8
- 145 %105 = and i8 %104, 1
- 146 store i8 %105, i8* %27, align 1
- 147 %106 = icmp eq i32 %90, 0
- 148 %107 = zext i1 %106 to i8
- 149 store i8 %107, i8* %28, align 1
- 150 %108 = lshr i32 %90, 31
- 151 %109 = trunc i32 %108 to i8
- 152 store i8 %109, i8* %29, align 1
- 153 %110 = lshr i32 %84, 31
- 154 %111 = lshr i32 %89, 31
- 155 %112 = xor i32 %108, %110
- 156 %113 = xor i32 %108, %111
- 157 %114 = add nuw nsw i32 %112, %113
- 158 %115 = icmp eq i32 %114, 2
- 159 %116 = zext i1 %115 to i8
- 160 store i8 %116, i8* %30, align 1
- 161 %117 = add i64 %68, 9
- 162 store i64 %117, i64* %PC, align 8
- 163 store i32 %90, i32* %88, align 4
- 164 %118 = load i64, i64* %RBP, align 8
- 165 %119 = add i64 %118, -12
- 166 %120 = load i64, i64* %PC, align 8
- 167 %121 = add i64 %120, 3
- 168 store i64 %121, i64* %PC, align 8
- 169 %122 = inttoptr i64 %119 to i32*
- 170 %123 = load i32, i32* %122, align 4
- 171 %124 = add i32 %123, 1
- 172 %125 = zext i32 %124 to i64
- 173 store i64 %125, i64* %RAX, align 8
- 174 %126 = icmp eq i32 %123, -1
- 175 %127 = icmp eq i32 %124, 0
- 176 %128 = or i1 %126, %127
- 177 %129 = zext i1 %128 to i8
- 178 store i8 %129, i8* %25, align 1
- 179 %130 = and i32 %124, 255
- 180 %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #12
- 181 %132 = trunc i32 %131 to i8
- 182 %133 = and i8 %132, 1
- 183 %134 = xor i8 %133, 1
- 184 store i8 %134, i8* %26, align 1
- 185 %135 = xor i32 %124, %123
- 186 %136 = lshr i32 %135, 4
- 187 %137 = trunc i32 %136 to i8
- 188 %138 = and i8 %137, 1
- 189 store i8 %138, i8* %27, align 1
- 190 %139 = zext i1 %127 to i8
- 191 store i8 %139, i8* %28, align 1
- 192 %140 = lshr i32 %124, 31
- 193 %141 = trunc i32 %140 to i8
- 194 store i8 %141, i8* %29, align 1
- 195 %142 = lshr i32 %123, 31
- 196 %143 = xor i32 %140, %142
- 197 %144 = add nuw nsw i32 %143, %140
- 198 %145 = icmp eq i32 %144, 2
- 199 %146 = zext i1 %145 to i8
- 200 store i8 %146, i8* %30, align 1
- 201 %147 = add i64 %120, 9
- 202 store i64 %147, i64* %PC, align 8
- 203 store i32 %124, i32* %122, align 4
- 204 %148 = load i64, i64* %PC, align 8
- 205 %149 = add i64 %148, -30
- 206 store i64 %149, i64* %PC, align 8
- 207 \<badref\> = br label %block_4004c5
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f91636c0c80>, {0: {0}, 1: {13}, 2: {14}, 3: {35}, 4: {1}, 5: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 6: {3, 148}, 7: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 8: {5}, 9: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 10: {185, 99, 22, 7}, 11: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 12: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 13: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 14: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 15: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 16: {142, 29, 46, 15}, 17: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 18: {17, 100, 54}, 19: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 20: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 21: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 22: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 23: {185, 99, 22, 7}, 24: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 25: {24, 31}, 26: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 27: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 28: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 29: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 30: {142, 29, 46, 15}, 31: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 32: {24, 31}, 33: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 34: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 35: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 43: {184, 43}, 44: {44}, 45: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 46: {142, 29, 46, 15}, 47: {144, 186, 94, 47}, 48: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 49: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 50: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 51: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 52: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 53: {53}, 54: {17, 100, 54}, 55: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 56: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 57: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 58: {58}, 59: {74, 107, 108, 88, 59, 124, 152}, 60: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 61: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 62: {112, 156, 62}, 63: {113, 157, 63}, 64: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 65: {65, 165, 72, 115, 122, 159}, 66: {160, 66, 116}, 67: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 68: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 69: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 70: {120, 163, 70}, 71: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 72: {65, 165, 72, 115, 122, 159}, 73: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 74: {74, 107, 108, 88, 59, 124, 152}, 75: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 76: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 77: {130, 131, 169, 172, 77, 80, 81, 127}, 78: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 79: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 80: {130, 131, 169, 172, 77, 80, 81, 127}, 81: {130, 131, 169, 172, 77, 80, 81, 127}, 82: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 83: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 84: {134, 104, 174, 84, 91}, 85: {175, 85, 135}, 86: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 87: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 88: {74, 107, 108, 88, 59, 124, 152}, 89: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 90: {90}, 91: {134, 104, 174, 84, 91}, 92: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 93: {93}, 94: {185, 99, 22, 7}, 95: {144, 186, 94, 47}, 96: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 97: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 98: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 99: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 100: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 101: {192}, 102: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 103: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 104: {195}, 105: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 106: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 107: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 108: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 109: {200}, 110: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 111: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 112: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 113: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 114: {205}, 115: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 116: {207}, 117: {144, 186, 94, 47}, 118: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 119: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 120: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 121: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 122: {185, 99, 22, 7}, 123: {17, 100, 54}, 124: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 125: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 126: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 127: {134, 104, 174, 84, 91}, 128: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 129: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 130: {74, 107, 108, 88, 59, 124, 152}, 131: {74, 107, 108, 88, 59, 124, 152}, 132: {153, 109}, 133: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 134: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 135: {112, 156, 62}, 136: {113, 157, 63}, 137: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 138: {65, 165, 72, 115, 122, 159}, 139: {160, 66, 116}, 140: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 141: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 142: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 143: {120, 163, 70}, 144: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 145: {65, 165, 72, 115, 122, 159}, 146: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 147: {74, 107, 108, 88, 59, 124, 152}, 148: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 149: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 150: {130, 131, 169, 172, 77, 80, 81, 127}, 151: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 152: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 153: {130, 131, 169, 172, 77, 80, 81, 127}, 154: {130, 131, 169, 172, 77, 80, 81, 127}, 155: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 156: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 157: {134, 104, 174, 84, 91}, 158: {175, 85, 135}, 159: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 160: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 161: {178, 138}, 162: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 163: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 164: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 165: {142, 29, 46, 15}, 166: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 167: {144, 186, 94, 47}, 168: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 169: {33, 196, 102, 8, 202, 49, 146, 19, 56, 26, 188}, 170: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 171: {3, 148}, 172: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 173: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 174: {151}, 175: {74, 107, 108, 88, 59, 124, 152}, 176: {153, 109}, 177: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 178: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 179: {112, 156, 62}, 180: {113, 157, 63}, 181: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 182: {65, 165, 72, 115, 122, 159}, 183: {160, 66, 116}, 184: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 185: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 186: {120, 163, 70}, 187: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 188: {65, 165, 72, 115, 122, 159}, 189: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 190: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 191: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 192: {130, 131, 169, 172, 77, 80, 81, 127}, 193: {64, 128, 164, 71, 170, 78, 114, 121, 158}, 194: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 195: {130, 131, 169, 172, 77, 80, 81, 127}, 196: {162, 68, 69, 132, 133, 173, 82, 83, 118, 119, 89}, 197: {134, 104, 174, 84, 91}, 198: {175, 85, 135}, 199: {97, 167, 136, 105, 75, 110, 176, 51, 149, 86, 154, 60, 125, 190}, 200: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 201: {178, 138}, 202: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 203: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 204: {2, 6, 11, 141, 143, 16, 147, 21, 23, 28, 30, 42, 45, 50, 181, 57, 189, 194, 197, 203, 96, 103}, 205: {182}, 206: {129, 4, 9, 10, 137, 12, 139, 140, 145, 18, 20, 150, 25, 27, 155, 32, 161, 34, 166, 168, 171, 48, 177, 179, 52, 180, 55, 183, 187, 61, 191, 193, 67, 198, 199, 73, 201, 76, 204, 206, 79, 87, 92, 95, 98, 101, 106, 111, 117, 123, 126}, 207: {184, 43}})
Equivalent! frozenset({30, 23}) {24, 31}
Equivalent! frozenset({24, 31}) {32, 25}
Equivalent! frozenset({32, 25}) {33, 26}
Equivalent! frozenset({184, 43}) {43, 207}
Equivalent! frozenset({96, 50}) {50, 119}
Equivalent! frozenset({97, 51}) {120, 51}
Equivalent! frozenset({98, 52}) {121, 52}
Equivalent! frozenset({186, 94}) {117, 95}
Equivalent! frozenset({187, 95}) {96, 118}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f91636c0c80>, {0: {0}, 1: {13}, 2: {14}, 3: {35}, 4: {1}, 5: {2}, 6: {3}, 7: {4}, 8: {5}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: {11}, 15: {12}, 16: {15}, 17: {16}, 18: {17}, 19: {18}, 20: {19}, 21: {20}, 22: {45, 21}, 23: {99, 22}, 24: {30}, 25: {31}, 26: {25}, 27: {26, 102}, 28: {27, 140}, 29: {28, 141}, 30: {29, 142}, 31: {23}, 32: {24}, 33: {32}, 34: {33, 146}, 35: {34, 180}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {42}, 43: {184}, 44: {44}, 45: {45}, 46: {46}, 47: {47}, 48: {48}, 49: {49}, 50: {96}, 51: {51}, 52: {52}, 53: {53}, 54: {54}, 55: {55}, 56: {56}, 57: {57}, 58: {58}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {185}, 95: {94}, 96: {187}, 97: {188}, 98: {189}, 99: {190}, 100: {191}, 101: {192}, 102: {193}, 103: {194}, 104: {195}, 105: {196}, 106: {197}, 107: {198}, 108: {199}, 109: {200}, 110: {201}, 111: {202}, 112: {203}, 113: {204}, 114: {205}, 115: {206}, 116: {207}, 117: {186}, 118: {95}, 119: {50}, 120: {97}, 121: {98}, 122: {99}, 123: {100}, 124: {101}, 125: {102}, 126: {103}, 127: {104}, 128: {105}, 129: {106}, 130: {107}, 131: {108}, 132: {109}, 133: {110}, 134: {111}, 135: {112}, 136: {113}, 137: {114}, 138: {115}, 139: {116}, 140: {117}, 141: {118}, 142: {119}, 143: {120}, 144: {121}, 145: {122}, 146: {123}, 147: {124}, 148: {125}, 149: {126}, 150: {127}, 151: {128}, 152: {129}, 153: {130}, 154: {131}, 155: {132}, 156: {133}, 157: {134}, 158: {135}, 159: {136}, 160: {137}, 161: {138}, 162: {139}, 163: {140}, 164: {141}, 165: {142}, 166: {143}, 167: {144}, 168: {145}, 169: {146}, 170: {147}, 171: {148}, 172: {149}, 173: {150}, 174: {151}, 175: {152}, 176: {153}, 177: {154}, 178: {155}, 179: {156}, 180: {157}, 181: {158}, 182: {159}, 183: {160}, 184: {161}, 185: {162}, 186: {163}, 187: {164}, 188: {165}, 189: {166}, 190: {167}, 191: {168}, 192: {169}, 193: {170}, 194: {171}, 195: {172}, 196: {173}, 197: {174}, 198: {175}, 199: {176}, 200: {177}, 201: {178}, 202: {179}, 203: {180}, 204: {181}, 205: {182}, 206: {183}, 207: {43}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 store store
EXACT 8 getelementptr getelementptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 store store
EXACT 13 store store
EXACT 14 load load
EXACT 15 store store
EXACT 16 add add
EXACT 17 load load
EXACT 18 add add
EXACT 19 store store
EXACT 20 inttoptr inttoptr
EXACT 21 store store
MORE 22 POT: 2
MORE 23 POT: 2
EXACT 24 load load
EXACT 25 add add
EXACT 26 store store
MORE 27 POT: 2
MORE 28 POT: 2
MORE 29 POT: 2
MORE 30 POT: 2
EXACT 31 load load
EXACT 32 add add
EXACT 33 store store
MORE 34 POT: 2
MORE 35 POT: 2
EXACT 36 getelementptr getelementptr
EXACT 37 getelementptr getelementptr
EXACT 38 getelementptr getelementptr
EXACT 39 getelementptr getelementptr
EXACT 40 getelementptr getelementptr
EXACT 41 getelementptr getelementptr
EXACT 42 load load
EXACT 43 br br
EXACT 44 phi phi
EXACT 45 load load
EXACT 46 add add
EXACT 47 add add
EXACT 48 store store
EXACT 49 inttoptr inttoptr
EXACT 50 load load
EXACT 51 zext zext
EXACT 52 store store
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 load load
EXACT 58 sub sub
EXACT 59 icmp icmp
EXACT 60 zext zext
EXACT 61 store store
EXACT 62 and and
EXACT 63 tail tail
EXACT 64 trunc trunc
EXACT 65 and and
EXACT 66 xor xor
EXACT 67 store store
EXACT 68 xor xor
EXACT 69 xor xor
EXACT 70 lshr lshr
EXACT 71 trunc trunc
EXACT 72 and and
EXACT 73 store store
EXACT 74 icmp icmp
EXACT 75 zext zext
EXACT 76 store store
EXACT 77 lshr lshr
EXACT 78 trunc trunc
EXACT 79 store store
EXACT 80 lshr lshr
EXACT 81 lshr lshr
EXACT 82 xor xor
EXACT 83 xor xor
EXACT 84 add add
EXACT 85 icmp icmp
EXACT 86 zext zext
EXACT 87 store store
EXACT 88 icmp icmp
EXACT 89 xor xor
EXACT 90 select select
EXACT 91 add add
EXACT 92 store store
EXACT 93 br br
EXACT 94 add add
EXACT 95 add add
EXACT 96 store store
EXACT 97 inttoptr inttoptr
EXACT 98 load load
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 add add
EXACT 102 store store
EXACT 103 load load
EXACT 104 add add
EXACT 105 inttoptr inttoptr
EXACT 106 load load
EXACT 107 store store
EXACT 108 store store
EXACT 109 add add
EXACT 110 store store
EXACT 111 inttoptr inttoptr
EXACT 112 load load
EXACT 113 store store
EXACT 114 add add
EXACT 115 store store
EXACT 116 ret ret
EXACT 117 add add
EXACT 118 store store
EXACT 119 load load
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 add add
EXACT 123 add add
EXACT 124 store store
EXACT 125 inttoptr inttoptr
EXACT 126 load load
EXACT 127 add add
EXACT 128 zext zext
EXACT 129 store store
EXACT 130 icmp icmp
EXACT 131 icmp icmp
EXACT 132 or or
EXACT 133 zext zext
EXACT 134 store store
EXACT 135 and and
EXACT 136 tail tail
EXACT 137 trunc trunc
EXACT 138 and and
EXACT 139 xor xor
EXACT 140 store store
EXACT 141 xor xor
EXACT 142 xor xor
EXACT 143 lshr lshr
EXACT 144 trunc trunc
EXACT 145 and and
EXACT 146 store store
EXACT 147 icmp icmp
EXACT 148 zext zext
EXACT 149 store store
EXACT 150 lshr lshr
EXACT 151 trunc trunc
EXACT 152 store store
EXACT 153 lshr lshr
EXACT 154 lshr lshr
EXACT 155 xor xor
EXACT 156 xor xor
EXACT 157 add add
EXACT 158 icmp icmp
EXACT 159 zext zext
EXACT 160 store store
EXACT 161 add add
EXACT 162 store store
EXACT 163 store store
EXACT 164 load load
EXACT 165 add add
EXACT 166 load load
EXACT 167 add add
EXACT 168 store store
EXACT 169 inttoptr inttoptr
EXACT 170 load load
EXACT 171 add add
EXACT 172 zext zext
EXACT 173 store store
EXACT 174 icmp icmp
EXACT 175 icmp icmp
EXACT 176 or or
EXACT 177 zext zext
EXACT 178 store store
EXACT 179 and and
EXACT 180 tail tail
EXACT 181 trunc trunc
EXACT 182 and and
EXACT 183 xor xor
EXACT 184 store store
EXACT 185 xor xor
EXACT 186 lshr lshr
EXACT 187 trunc trunc
EXACT 188 and and
EXACT 189 store store
EXACT 190 zext zext
EXACT 191 store store
EXACT 192 lshr lshr
EXACT 193 trunc trunc
EXACT 194 store store
EXACT 195 lshr lshr
EXACT 196 xor xor
EXACT 197 add add
EXACT 198 icmp icmp
EXACT 199 zext zext
EXACT 200 store store
EXACT 201 add add
EXACT 202 store store
EXACT 203 store store
EXACT 204 load load
EXACT 205 add add
EXACT 206 store store
EXACT 207 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%18 = load i64, i64* %3, align 8', '%19 = add i64 %18, 7', 'store i64 %19, i64* %3, align 8', '%23 = load i64, i64* %3, align 8', '%24 = add i64 %23, 7', 'store i64 %24, i64* %3, align 8', '%RAX.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %3, align 8', '%32 = phi i64 [ %136, %block_4004d1 ], [ %.pre, %entry ]', '%35 = add i64 %32, 3', 'store i64 %35, i64* %3, align 8', '%38 = zext i32 %37 to i64', 'store i64 %38, i64* %RAX.i28, align 8', '%40 = add i64 %32, 6', 'store i64 %40, i64* %3, align 8', '%44 = icmp ult i32 %37, %42', '%45 = zext i1 %44 to i8', 'store i8 %45, i8* %26, align 1', '%46 = and i32 %43, 255', '%47 = tail call i32 @llvm.ctpop.i32(i32 %46)', '%48 = trunc i32 %47 to i8', '%49 = and i8 %48, 1', '%50 = xor i8 %49, 1', 'store i8 %50, i8* %27, align 1', '%51 = xor i32 %42, %37', '%52 = xor i32 %51, %43', '%53 = lshr i32 %52, 4', '%54 = trunc i32 %53 to i8', '%55 = and i8 %54, 1', 'store i8 %55, i8* %28, align 1', '%56 = icmp eq i32 %43, 0', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %29, align 1', 'store i8 %59, i8* %30, align 1', '%66 = zext i1 %65 to i8', 'store i8 %66, i8* %31, align 1', '%.v = select i1 %68, i64 12, i64 35', '%69 = add i64 %32, %.v', 'store i64 %69, i64* %3, align 8', '%70 = add i64 %69, 3', 'store i64 %70, i64* %3, align 8', '%71 = load i32, i32* %36, align 4', '%72 = zext i32 %71 to i64', 'store i64 %72, i64* %RAX.i28, align 8', '%73 = add i64 %33, -8', '%74 = add i64 %69, 6', 'store i64 %74, i64* %3, align 8', '%75 = inttoptr i64 %73 to i32*', '%76 = load i32, i32* %75, align 4', '%77 = add i32 %76, %71', '%78 = zext i32 %77 to i64', 'store i64 %78, i64* %RAX.i28, align 8', '%79 = icmp ult i32 %77, %71', '%80 = icmp ult i32 %77, %76', '%81 = or i1 %79, %80', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %26, align 1', '%83 = and i32 %77, 255', '%84 = tail call i32 @llvm.ctpop.i32(i32 %83)', '%85 = trunc i32 %84 to i8', '%86 = and i8 %85, 1', '%87 = xor i8 %86, 1', 'store i8 %87, i8* %27, align 1', '%88 = xor i32 %76, %71', '%89 = xor i32 %88, %77', '%90 = lshr i32 %89, 4', '%91 = trunc i32 %90 to i8', '%92 = and i8 %91, 1', 'store i8 %92, i8* %28, align 1', '%93 = icmp eq i32 %77, 0', '%94 = zext i1 %93 to i8', 'store i8 %94, i8* %29, align 1', '%95 = lshr i32 %77, 31', '%96 = trunc i32 %95 to i8', 'store i8 %96, i8* %30, align 1', '%97 = lshr i32 %71, 31', '%98 = lshr i32 %76, 31', '%99 = xor i32 %95, %97', '%100 = xor i32 %95, %98', '%101 = add nuw nsw i32 %99, %100', '%102 = icmp eq i32 %101, 2', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %31, align 1', '%104 = add i64 %69, 9', 'store i64 %104, i64* %3, align 8', 'store i32 %77, i32* %75, align 4', '%105 = load i64, i64* %RBP.i, align 8', '%106 = add i64 %105, -12', '%107 = load i64, i64* %3, align 8', '%108 = add i64 %107, 3', 'store i64 %108, i64* %3, align 8', '%109 = inttoptr i64 %106 to i32*', '%110 = load i32, i32* %109, align 4', '%111 = add i32 %110, 1', '%112 = zext i32 %111 to i64', 'store i64 %112, i64* %RAX.i28, align 8', '%113 = icmp eq i32 %110, -1', '%114 = icmp eq i32 %111, 0', '%115 = or i1 %113, %114', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %26, align 1', '%117 = and i32 %111, 255', '%118 = tail call i32 @llvm.ctpop.i32(i32 %117)', '%119 = trunc i32 %118 to i8', '%120 = and i8 %119, 1', '%121 = xor i8 %120, 1', 'store i8 %121, i8* %27, align 1', '%122 = xor i32 %111, %110', '%123 = lshr i32 %122, 4', '%124 = trunc i32 %123 to i8', '%125 = and i8 %124, 1', 'store i8 %125, i8* %28, align 1', '%126 = zext i1 %114 to i8', 'store i8 %126, i8* %29, align 1', '%127 = lshr i32 %111, 31', '%128 = trunc i32 %127 to i8', 'store i8 %128, i8* %30, align 1', '%129 = lshr i32 %110, 31', '%130 = xor i32 %127, %129', '%131 = add nuw nsw i32 %130, %127', '%132 = icmp eq i32 %131, 2', '%133 = zext i1 %132 to i8', 'store i8 %133, i8* %31, align 1', '%134 = add i64 %107, 9', 'store i64 %134, i64* %3, align 8', 'store i32 %111, i32* %109, align 4', '%135 = load i64, i64* %3, align 8', '%136 = add i64 %135, -30', 'store i64 %136, i64* %3, align 8', '%137 = add i64 %33, -8', '%138 = add i64 %69, 3', 'store i64 %138, i64* %3, align 8', '%139 = inttoptr i64 %137 to i32*', '%140 = load i32, i32* %139, align 4', '%141 = zext i32 %140 to i64', 'store i64 %141, i64* %RAX.i28, align 8', '%142 = add i64 %69, 4', 'store i64 %142, i64* %3, align 8', '%143 = load i64, i64* %6, align 8', '%144 = add i64 %143, 8', '%145 = inttoptr i64 %143 to i64*', '%146 = load i64, i64* %145, align 8', 'store i64 %146, i64* %RBP.i, align 8', 'store i64 %144, i64* %6, align 8', '%147 = add i64 %69, 5', 'store i64 %147, i64* %3, align 8', '%148 = inttoptr i64 %144 to i64*', '%149 = load i64, i64* %148, align 8', 'store i64 %149, i64* %3, align 8', '%150 = add i64 %143, 16', 'store i64 %150, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %11 to i32*
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = load i32, i32* %EDI.i, align 4
Found line to remove! %14 = add i64 %10, 6
Found line to remove! store i64 %14, i64* %3, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Keep: %16 = load i64, i64* %RBP.i, align 8
Keep: %17 = add i64 %16, -8
Found line to remove! %18 = load i64, i64* %3, align 8
Found line to remove! %19 = add i64 %18, 7
Found line to remove! store i64 %19, i64* %3, align 8
Keep: %20 = inttoptr i64 %17 to i32*
Keep: store i32 0, i32* %20, align 4
Keep: %21 = load i64, i64* %RBP.i, align 8
Keep: %22 = add i64 %21, -12
Found line to remove! %23 = load i64, i64* %3, align 8
Found line to remove! %24 = add i64 %23, 7
Found line to remove! store i64 %24, i64* %3, align 8
Keep: %25 = inttoptr i64 %22 to i32*
Keep: store i32 0, i32* %25, align 4
Found line to remove! %RAX.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_4004c5
Keep: 
Keep: block_.L_4004c5:                                  ; preds = %block_4004d1, %entry
Found line to remove! %32 = phi i64 [ %136, %block_4004d1 ], [ %.pre, %entry ]
Keep: %33 = load i64, i64* %RBP.i, align 8
Keep: %34 = add i64 %33, -12
Found line to remove! %35 = add i64 %32, 3
Found line to remove! store i64 %35, i64* %3, align 8
Keep: %36 = inttoptr i64 %34 to i32*
Keep: %37 = load i32, i32* %36, align 4
Found line to remove! %38 = zext i32 %37 to i64
Found line to remove! store i64 %38, i64* %RAX.i28, align 8
Keep: %39 = add i64 %33, -4
Found line to remove! %40 = add i64 %32, 6
Found line to remove! store i64 %40, i64* %3, align 8
Keep: %41 = inttoptr i64 %39 to i32*
Keep: %42 = load i32, i32* %41, align 4
Keep: %43 = sub i32 %37, %42
Found line to remove! %44 = icmp ult i32 %37, %42
Found line to remove! %45 = zext i1 %44 to i8
Found line to remove! store i8 %45, i8* %26, align 1
Found line to remove! %46 = and i32 %43, 255
Found line to remove! %47 = tail call i32 @llvm.ctpop.i32(i32 %46)
Found line to remove! %48 = trunc i32 %47 to i8
Found line to remove! %49 = and i8 %48, 1
Found line to remove! %50 = xor i8 %49, 1
Found line to remove! store i8 %50, i8* %27, align 1
Found line to remove! %51 = xor i32 %42, %37
Found line to remove! %52 = xor i32 %51, %43
Found line to remove! %53 = lshr i32 %52, 4
Found line to remove! %54 = trunc i32 %53 to i8
Found line to remove! %55 = and i8 %54, 1
Found line to remove! store i8 %55, i8* %28, align 1
Found line to remove! %56 = icmp eq i32 %43, 0
Found line to remove! %57 = zext i1 %56 to i8
Found line to remove! store i8 %57, i8* %29, align 1
Keep: %58 = lshr i32 %43, 31
Keep: %59 = trunc i32 %58 to i8
Found line to remove! store i8 %59, i8* %30, align 1
Keep: %60 = lshr i32 %37, 31
Keep: %61 = lshr i32 %42, 31
Keep: %62 = xor i32 %61, %60
Keep: %63 = xor i32 %58, %60
Keep: %64 = add nuw nsw i32 %63, %62
Keep: %65 = icmp eq i32 %64, 2
Found line to remove! %66 = zext i1 %65 to i8
Found line to remove! store i8 %66, i8* %31, align 1
Keep: %67 = icmp ne i8 %59, 0
Keep: %68 = xor i1 %67, %65
Found line to remove! %.v = select i1 %68, i64 12, i64 35
Found line to remove! %69 = add i64 %32, %.v
Found line to remove! store i64 %69, i64* %3, align 8
Keep: br i1 %68, label %block_4004d1, label %block_.L_4004e8
Keep: 
Keep: block_4004d1:                                     ; preds = %block_.L_4004c5
Found line to remove! %70 = add i64 %69, 3
Found line to remove! store i64 %70, i64* %3, align 8
Found line to remove! %71 = load i32, i32* %36, align 4
Found line to remove! %72 = zext i32 %71 to i64
Found line to remove! store i64 %72, i64* %RAX.i28, align 8
Found line to remove! %73 = add i64 %33, -8
Found line to remove! %74 = add i64 %69, 6
Found line to remove! store i64 %74, i64* %3, align 8
Found line to remove! %75 = inttoptr i64 %73 to i32*
Found line to remove! %76 = load i32, i32* %75, align 4
Found line to remove! %77 = add i32 %76, %71
Found line to remove! %78 = zext i32 %77 to i64
Found line to remove! store i64 %78, i64* %RAX.i28, align 8
Found line to remove! %79 = icmp ult i32 %77, %71
Found line to remove! %80 = icmp ult i32 %77, %76
Found line to remove! %81 = or i1 %79, %80
Found line to remove! %82 = zext i1 %81 to i8
Found line to remove! store i8 %82, i8* %26, align 1
Found line to remove! %83 = and i32 %77, 255
Found line to remove! %84 = tail call i32 @llvm.ctpop.i32(i32 %83)
Found line to remove! %85 = trunc i32 %84 to i8
Found line to remove! %86 = and i8 %85, 1
Found line to remove! %87 = xor i8 %86, 1
Found line to remove! store i8 %87, i8* %27, align 1
Found line to remove! %88 = xor i32 %76, %71
Found line to remove! %89 = xor i32 %88, %77
Found line to remove! %90 = lshr i32 %89, 4
Found line to remove! %91 = trunc i32 %90 to i8
Found line to remove! %92 = and i8 %91, 1
Found line to remove! store i8 %92, i8* %28, align 1
Found line to remove! %93 = icmp eq i32 %77, 0
Found line to remove! %94 = zext i1 %93 to i8
Found line to remove! store i8 %94, i8* %29, align 1
Found line to remove! %95 = lshr i32 %77, 31
Found line to remove! %96 = trunc i32 %95 to i8
Found line to remove! store i8 %96, i8* %30, align 1
Found line to remove! %97 = lshr i32 %71, 31
Found line to remove! %98 = lshr i32 %76, 31
Found line to remove! %99 = xor i32 %95, %97
Found line to remove! %100 = xor i32 %95, %98
Found line to remove! %101 = add nuw nsw i32 %99, %100
Found line to remove! %102 = icmp eq i32 %101, 2
Found line to remove! %103 = zext i1 %102 to i8
Found line to remove! store i8 %103, i8* %31, align 1
Found line to remove! %104 = add i64 %69, 9
Found line to remove! store i64 %104, i64* %3, align 8
Found line to remove! store i32 %77, i32* %75, align 4
Found line to remove! %105 = load i64, i64* %RBP.i, align 8
Found line to remove! %106 = add i64 %105, -12
Found line to remove! %107 = load i64, i64* %3, align 8
Found line to remove! %108 = add i64 %107, 3
Found line to remove! store i64 %108, i64* %3, align 8
Found line to remove! %109 = inttoptr i64 %106 to i32*
Found line to remove! %110 = load i32, i32* %109, align 4
Found line to remove! %111 = add i32 %110, 1
Found line to remove! %112 = zext i32 %111 to i64
Found line to remove! store i64 %112, i64* %RAX.i28, align 8
Found line to remove! %113 = icmp eq i32 %110, -1
Found line to remove! %114 = icmp eq i32 %111, 0
Found line to remove! %115 = or i1 %113, %114
Found line to remove! %116 = zext i1 %115 to i8
Found line to remove! store i8 %116, i8* %26, align 1
Found line to remove! %117 = and i32 %111, 255
Found line to remove! %118 = tail call i32 @llvm.ctpop.i32(i32 %117)
Found line to remove! %119 = trunc i32 %118 to i8
Found line to remove! %120 = and i8 %119, 1
Found line to remove! %121 = xor i8 %120, 1
Found line to remove! store i8 %121, i8* %27, align 1
Found line to remove! %122 = xor i32 %111, %110
Found line to remove! %123 = lshr i32 %122, 4
Found line to remove! %124 = trunc i32 %123 to i8
Found line to remove! %125 = and i8 %124, 1
Found line to remove! store i8 %125, i8* %28, align 1
Found line to remove! %126 = zext i1 %114 to i8
Found line to remove! store i8 %126, i8* %29, align 1
Found line to remove! %127 = lshr i32 %111, 31
Found line to remove! %128 = trunc i32 %127 to i8
Found line to remove! store i8 %128, i8* %30, align 1
Found line to remove! %129 = lshr i32 %110, 31
Found line to remove! %130 = xor i32 %127, %129
Found line to remove! %131 = add nuw nsw i32 %130, %127
Found line to remove! %132 = icmp eq i32 %131, 2
Found line to remove! %133 = zext i1 %132 to i8
Found line to remove! store i8 %133, i8* %31, align 1
Found line to remove! %134 = add i64 %107, 9
Found line to remove! store i64 %134, i64* %3, align 8
Found line to remove! store i32 %111, i32* %109, align 4
Found line to remove! %135 = load i64, i64* %3, align 8
Found line to remove! %136 = add i64 %135, -30
Found line to remove! store i64 %136, i64* %3, align 8
Keep: br label %block_.L_4004c5
Keep: 
Keep: block_.L_4004e8:                                  ; preds = %block_.L_4004c5
Found line to remove! %137 = add i64 %33, -8
Found line to remove! %138 = add i64 %69, 3
Found line to remove! store i64 %138, i64* %3, align 8
Found line to remove! %139 = inttoptr i64 %137 to i32*
Found line to remove! %140 = load i32, i32* %139, align 4
Found line to remove! %141 = zext i32 %140 to i64
Found line to remove! store i64 %141, i64* %RAX.i28, align 8
Found line to remove! %142 = add i64 %69, 4
Found line to remove! store i64 %142, i64* %3, align 8
Found line to remove! %143 = load i64, i64* %6, align 8
Found line to remove! %144 = add i64 %143, 8
Found line to remove! %145 = inttoptr i64 %143 to i64*
Found line to remove! %146 = load i64, i64* %145, align 8
Found line to remove! store i64 %146, i64* %RBP.i, align 8
Found line to remove! store i64 %144, i64* %6, align 8
Found line to remove! %147 = add i64 %69, 5
Found line to remove! store i64 %147, i64* %3, align 8
Found line to remove! %148 = inttoptr i64 %144 to i64*
Found line to remove! %149 = load i64, i64* %148, align 8
Found line to remove! store i64 %149, i64* %3, align 8
Found line to remove! %150 = add i64 %143, 16
Found line to remove! store i64 %150, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%18 = load i64, i64* %3, align 8', '%19 = add i64 %18, 7', 'store i64 %19, i64* %3, align 8', '%23 = load i64, i64* %3, align 8', '%24 = add i64 %23, 7', 'store i64 %24, i64* %3, align 8', '%RAX.i28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %3, align 8', '%32 = phi i64 [ %136, %block_4004d1 ], [ %.pre, %entry ]', '%35 = add i64 %32, 3', 'store i64 %35, i64* %3, align 8', '%38 = zext i32 %37 to i64', 'store i64 %38, i64* %RAX.i28, align 8', '%40 = add i64 %32, 6', 'store i64 %40, i64* %3, align 8', '%44 = icmp ult i32 %37, %42', '%45 = zext i1 %44 to i8', 'store i8 %45, i8* %26, align 1', '%46 = and i32 %43, 255', '%47 = tail call i32 @llvm.ctpop.i32(i32 %46)', '%48 = trunc i32 %47 to i8', '%49 = and i8 %48, 1', '%50 = xor i8 %49, 1', 'store i8 %50, i8* %27, align 1', '%51 = xor i32 %42, %37', '%52 = xor i32 %51, %43', '%53 = lshr i32 %52, 4', '%54 = trunc i32 %53 to i8', '%55 = and i8 %54, 1', 'store i8 %55, i8* %28, align 1', '%56 = icmp eq i32 %43, 0', '%57 = zext i1 %56 to i8', 'store i8 %57, i8* %29, align 1', 'store i8 %59, i8* %30, align 1', '%66 = zext i1 %65 to i8', 'store i8 %66, i8* %31, align 1', '%.v = select i1 %68, i64 12, i64 35', '%69 = add i64 %32, %.v', 'store i64 %69, i64* %3, align 8', '%70 = add i64 %69, 3', 'store i64 %70, i64* %3, align 8', '%71 = load i32, i32* %36, align 4', '%72 = zext i32 %71 to i64', 'store i64 %72, i64* %RAX.i28, align 8', '%73 = add i64 %33, -8', '%74 = add i64 %69, 6', 'store i64 %74, i64* %3, align 8', '%75 = inttoptr i64 %73 to i32*', '%76 = load i32, i32* %75, align 4', '%77 = add i32 %76, %71', '%78 = zext i32 %77 to i64', 'store i64 %78, i64* %RAX.i28, align 8', '%79 = icmp ult i32 %77, %71', '%80 = icmp ult i32 %77, %76', '%81 = or i1 %79, %80', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %26, align 1', '%83 = and i32 %77, 255', '%84 = tail call i32 @llvm.ctpop.i32(i32 %83)', '%85 = trunc i32 %84 to i8', '%86 = and i8 %85, 1', '%87 = xor i8 %86, 1', 'store i8 %87, i8* %27, align 1', '%88 = xor i32 %76, %71', '%89 = xor i32 %88, %77', '%90 = lshr i32 %89, 4', '%91 = trunc i32 %90 to i8', '%92 = and i8 %91, 1', 'store i8 %92, i8* %28, align 1', '%93 = icmp eq i32 %77, 0', '%94 = zext i1 %93 to i8', 'store i8 %94, i8* %29, align 1', '%95 = lshr i32 %77, 31', '%96 = trunc i32 %95 to i8', 'store i8 %96, i8* %30, align 1', '%97 = lshr i32 %71, 31', '%98 = lshr i32 %76, 31', '%99 = xor i32 %95, %97', '%100 = xor i32 %95, %98', '%101 = add nuw nsw i32 %99, %100', '%102 = icmp eq i32 %101, 2', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %31, align 1', '%104 = add i64 %69, 9', 'store i64 %104, i64* %3, align 8', 'store i32 %77, i32* %75, align 4', '%105 = load i64, i64* %RBP.i, align 8', '%106 = add i64 %105, -12', '%107 = load i64, i64* %3, align 8', '%108 = add i64 %107, 3', 'store i64 %108, i64* %3, align 8', '%109 = inttoptr i64 %106 to i32*', '%110 = load i32, i32* %109, align 4', '%111 = add i32 %110, 1', '%112 = zext i32 %111 to i64', 'store i64 %112, i64* %RAX.i28, align 8', '%113 = icmp eq i32 %110, -1', '%114 = icmp eq i32 %111, 0', '%115 = or i1 %113, %114', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %26, align 1', '%117 = and i32 %111, 255', '%118 = tail call i32 @llvm.ctpop.i32(i32 %117)', '%119 = trunc i32 %118 to i8', '%120 = and i8 %119, 1', '%121 = xor i8 %120, 1', 'store i8 %121, i8* %27, align 1', '%122 = xor i32 %111, %110', '%123 = lshr i32 %122, 4', '%124 = trunc i32 %123 to i8', '%125 = and i8 %124, 1', 'store i8 %125, i8* %28, align 1', '%126 = zext i1 %114 to i8', 'store i8 %126, i8* %29, align 1', '%127 = lshr i32 %111, 31', '%128 = trunc i32 %127 to i8', 'store i8 %128, i8* %30, align 1', '%129 = lshr i32 %110, 31', '%130 = xor i32 %127, %129', '%131 = add nuw nsw i32 %130, %127', '%132 = icmp eq i32 %131, 2', '%133 = zext i1 %132 to i8', 'store i8 %133, i8* %31, align 1', '%134 = add i64 %107, 9', 'store i64 %134, i64* %3, align 8', 'store i32 %111, i32* %109, align 4', '%135 = load i64, i64* %3, align 8', '%136 = add i64 %135, -30', 'store i64 %136, i64* %3, align 8', '%137 = add i64 %33, -8', '%138 = add i64 %69, 3', 'store i64 %138, i64* %3, align 8', '%139 = inttoptr i64 %137 to i32*', '%140 = load i32, i32* %139, align 4', '%141 = zext i32 %140 to i64', 'store i64 %141, i64* %RAX.i28, align 8', '%142 = add i64 %69, 4', 'store i64 %142, i64* %3, align 8', '%143 = load i64, i64* %6, align 8', '%144 = add i64 %143, 8', '%145 = inttoptr i64 %143 to i64*', '%146 = load i64, i64* %145, align 8', 'store i64 %146, i64* %RBP.i, align 8', 'store i64 %144, i64* %6, align 8', '%147 = add i64 %69, 5', 'store i64 %147, i64* %3, align 8', '%148 = inttoptr i64 %144 to i64*', '%149 = load i64, i64* %148, align 8', 'store i64 %149, i64* %3, align 8', '%150 = add i64 %143, 16', 'store i64 %150, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -12', '%12 = load i32, i32* %EDI, align 4', '%13 = add i64 %10, 6', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i32*', 'store i32 %12, i32* %14, align 4', '%17 = load i64, i64* %PC, align 8', '%18 = add i64 %17, 7', 'store i64 %18, i64* %PC, align 8', '%22 = load i64, i64* %PC, align 8', '%23 = add i64 %22, 7', 'store i64 %23, i64* %PC, align 8', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %PC, align 8', '%31 = phi i64 [ %149, %block_4004d1 ], [ %.pre, %block_4004b0 ]', '%34 = add i64 %31, 3', 'store i64 %34, i64* %PC, align 8', '%37 = zext i32 %36 to i64', 'store i64 %37, i64* %RAX, align 8', '%39 = add i64 %31, 6', 'store i64 %39, i64* %PC, align 8', '%43 = icmp ult i32 %36, %41', '%44 = zext i1 %43 to i8', 'store i8 %44, i8* %25, align 1', '%45 = and i32 %42, 255', '%46 = tail call i32 @llvm.ctpop.i32(i32 %45) #12', '%47 = trunc i32 %46 to i8', '%48 = and i8 %47, 1', '%49 = xor i8 %48, 1', 'store i8 %49, i8* %26, align 1', '%50 = xor i32 %41, %36', '%51 = xor i32 %50, %42', '%52 = lshr i32 %51, 4', '%53 = trunc i32 %52 to i8', '%54 = and i8 %53, 1', 'store i8 %54, i8* %27, align 1', '%55 = icmp eq i32 %42, 0', '%56 = zext i1 %55 to i8', 'store i8 %56, i8* %28, align 1', 'store i8 %58, i8* %29, align 1', '%65 = zext i1 %64 to i8', 'store i8 %65, i8* %30, align 1', '%.v = select i1 %67, i64 12, i64 35', '%68 = add i64 %31, %.v', 'store i64 %68, i64* %PC, align 8', '%69 = add i64 %32, -8', '%70 = add i64 %68, 3', 'store i64 %70, i64* %PC, align 8', '%71 = inttoptr i64 %69 to i32*', '%72 = load i32, i32* %71, align 4', '%73 = zext i32 %72 to i64', 'store i64 %73, i64* %RAX, align 8', '%74 = add i64 %68, 4', 'store i64 %74, i64* %PC, align 8', '%75 = load i64, i64* %6, align 8', '%76 = add i64 %75, 8', '%77 = inttoptr i64 %75 to i64*', '%78 = load i64, i64* %77, align 8', 'store i64 %78, i64* %RBP, align 8', 'store i64 %76, i64* %6, align 8', '%79 = add i64 %68, 5', 'store i64 %79, i64* %PC, align 8', '%80 = inttoptr i64 %76 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %PC, align 8', '%82 = add i64 %75, 16', 'store i64 %82, i64* %6, align 8', '%83 = add i64 %68, 3', 'store i64 %83, i64* %PC, align 8', '%84 = load i32, i32* %35, align 4', '%85 = zext i32 %84 to i64', 'store i64 %85, i64* %RAX, align 8', '%86 = add i64 %32, -8', '%87 = add i64 %68, 6', 'store i64 %87, i64* %PC, align 8', '%88 = inttoptr i64 %86 to i32*', '%89 = load i32, i32* %88, align 4', '%90 = add i32 %89, %84', '%91 = zext i32 %90 to i64', 'store i64 %91, i64* %RAX, align 8', '%92 = icmp ult i32 %90, %84', '%93 = icmp ult i32 %90, %89', '%94 = or i1 %92, %93', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %25, align 1', '%96 = and i32 %90, 255', '%97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12', '%98 = trunc i32 %97 to i8', '%99 = and i8 %98, 1', '%100 = xor i8 %99, 1', 'store i8 %100, i8* %26, align 1', '%101 = xor i32 %89, %84', '%102 = xor i32 %101, %90', '%103 = lshr i32 %102, 4', '%104 = trunc i32 %103 to i8', '%105 = and i8 %104, 1', 'store i8 %105, i8* %27, align 1', '%106 = icmp eq i32 %90, 0', '%107 = zext i1 %106 to i8', 'store i8 %107, i8* %28, align 1', '%108 = lshr i32 %90, 31', '%109 = trunc i32 %108 to i8', 'store i8 %109, i8* %29, align 1', '%110 = lshr i32 %84, 31', '%111 = lshr i32 %89, 31', '%112 = xor i32 %108, %110', '%113 = xor i32 %108, %111', '%114 = add nuw nsw i32 %112, %113', '%115 = icmp eq i32 %114, 2', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %30, align 1', '%117 = add i64 %68, 9', 'store i64 %117, i64* %PC, align 8', 'store i32 %90, i32* %88, align 4', '%118 = load i64, i64* %RBP, align 8', '%119 = add i64 %118, -12', '%120 = load i64, i64* %PC, align 8', '%121 = add i64 %120, 3', 'store i64 %121, i64* %PC, align 8', '%122 = inttoptr i64 %119 to i32*', '%123 = load i32, i32* %122, align 4', '%124 = add i32 %123, 1', '%125 = zext i32 %124 to i64', 'store i64 %125, i64* %RAX, align 8', '%126 = icmp eq i32 %123, -1', '%127 = icmp eq i32 %124, 0', '%128 = or i1 %126, %127', '%129 = zext i1 %128 to i8', 'store i8 %129, i8* %25, align 1', '%130 = and i32 %124, 255', '%131 = tail call i32 @llvm.ctpop.i32(i32 %130) #12', '%132 = trunc i32 %131 to i8', '%133 = and i8 %132, 1', '%134 = xor i8 %133, 1', 'store i8 %134, i8* %26, align 1', '%135 = xor i32 %124, %123', '%136 = lshr i32 %135, 4', '%137 = trunc i32 %136 to i8', '%138 = and i8 %137, 1', 'store i8 %138, i8* %27, align 1', '%139 = zext i1 %127 to i8', 'store i8 %139, i8* %28, align 1', '%140 = lshr i32 %124, 31', '%141 = trunc i32 %140 to i8', 'store i8 %141, i8* %29, align 1', '%142 = lshr i32 %123, 31', '%143 = xor i32 %140, %142', '%144 = add nuw nsw i32 %143, %140', '%145 = icmp eq i32 %144, 2', '%146 = zext i1 %145 to i8', 'store i8 %146, i8* %30, align 1', '%147 = add i64 %120, 9', 'store i64 %147, i64* %PC, align 8', 'store i32 %124, i32* %122, align 4', '%148 = load i64, i64* %PC, align 8', '%149 = add i64 %148, -30', 'store i64 %149, i64* %PC, align 8'])
Keep: block_4004b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %PC, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -12
Found line to remove! %12 = load i32, i32* %EDI, align 4
Found line to remove! %13 = add i64 %10, 6
Found line to remove! store i64 %13, i64* %PC, align 8
Found line to remove! %14 = inttoptr i64 %11 to i32*
Found line to remove! store i32 %12, i32* %14, align 4
Keep: %15 = load i64, i64* %RBP, align 8
Keep: %16 = add i64 %15, -8
Found line to remove! %17 = load i64, i64* %PC, align 8
Found line to remove! %18 = add i64 %17, 7
Found line to remove! store i64 %18, i64* %PC, align 8
Keep: %19 = inttoptr i64 %16 to i32*
Keep: store i32 0, i32* %19, align 4
Keep: %20 = load i64, i64* %RBP, align 8
Keep: %21 = add i64 %20, -12
Found line to remove! %22 = load i64, i64* %PC, align 8
Found line to remove! %23 = add i64 %22, 7
Found line to remove! store i64 %23, i64* %PC, align 8
Keep: %24 = inttoptr i64 %21 to i32*
Keep: store i32 0, i32* %24, align 4
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4004c5
Keep: 
Keep: block_4004c5:                                     ; preds = %block_4004d1, %block_4004b0
Found line to remove! %31 = phi i64 [ %149, %block_4004d1 ], [ %.pre, %block_4004b0 ]
Keep: %32 = load i64, i64* %RBP, align 8
Keep: %33 = add i64 %32, -12
Found line to remove! %34 = add i64 %31, 3
Found line to remove! store i64 %34, i64* %PC, align 8
Keep: %35 = inttoptr i64 %33 to i32*
Keep: %36 = load i32, i32* %35, align 4
Found line to remove! %37 = zext i32 %36 to i64
Found line to remove! store i64 %37, i64* %RAX, align 8
Keep: %38 = add i64 %32, -4
Found line to remove! %39 = add i64 %31, 6
Found line to remove! store i64 %39, i64* %PC, align 8
Keep: %40 = inttoptr i64 %38 to i32*
Keep: %41 = load i32, i32* %40, align 4
Keep: %42 = sub i32 %36, %41
Found line to remove! %43 = icmp ult i32 %36, %41
Found line to remove! %44 = zext i1 %43 to i8
Found line to remove! store i8 %44, i8* %25, align 1
Found line to remove! %45 = and i32 %42, 255
Found line to remove! %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #12
Found line to remove! %47 = trunc i32 %46 to i8
Found line to remove! %48 = and i8 %47, 1
Found line to remove! %49 = xor i8 %48, 1
Found line to remove! store i8 %49, i8* %26, align 1
Found line to remove! %50 = xor i32 %41, %36
Found line to remove! %51 = xor i32 %50, %42
Found line to remove! %52 = lshr i32 %51, 4
Found line to remove! %53 = trunc i32 %52 to i8
Found line to remove! %54 = and i8 %53, 1
Found line to remove! store i8 %54, i8* %27, align 1
Found line to remove! %55 = icmp eq i32 %42, 0
Found line to remove! %56 = zext i1 %55 to i8
Found line to remove! store i8 %56, i8* %28, align 1
Keep: %57 = lshr i32 %42, 31
Keep: %58 = trunc i32 %57 to i8
Found line to remove! store i8 %58, i8* %29, align 1
Keep: %59 = lshr i32 %36, 31
Keep: %60 = lshr i32 %41, 31
Keep: %61 = xor i32 %60, %59
Keep: %62 = xor i32 %57, %59
Keep: %63 = add nuw nsw i32 %62, %61
Keep: %64 = icmp eq i32 %63, 2
Found line to remove! %65 = zext i1 %64 to i8
Found line to remove! store i8 %65, i8* %30, align 1
Keep: %66 = icmp ne i8 %58, 0
Keep: %67 = xor i1 %66, %64
Found line to remove! %.v = select i1 %67, i64 12, i64 35
Found line to remove! %68 = add i64 %31, %.v
Found line to remove! store i64 %68, i64* %PC, align 8
Keep: br i1 %67, label %block_4004d1, label %block_4004e8
Keep: 
Keep: block_4004e8:                                     ; preds = %block_4004c5
Found line to remove! %69 = add i64 %32, -8
Found line to remove! %70 = add i64 %68, 3
Found line to remove! store i64 %70, i64* %PC, align 8
Found line to remove! %71 = inttoptr i64 %69 to i32*
Found line to remove! %72 = load i32, i32* %71, align 4
Found line to remove! %73 = zext i32 %72 to i64
Found line to remove! store i64 %73, i64* %RAX, align 8
Found line to remove! %74 = add i64 %68, 4
Found line to remove! store i64 %74, i64* %PC, align 8
Found line to remove! %75 = load i64, i64* %6, align 8
Found line to remove! %76 = add i64 %75, 8
Found line to remove! %77 = inttoptr i64 %75 to i64*
Found line to remove! %78 = load i64, i64* %77, align 8
Found line to remove! store i64 %78, i64* %RBP, align 8
Found line to remove! store i64 %76, i64* %6, align 8
Found line to remove! %79 = add i64 %68, 5
Found line to remove! store i64 %79, i64* %PC, align 8
Found line to remove! %80 = inttoptr i64 %76 to i64*
Found line to remove! %81 = load i64, i64* %80, align 8
Found line to remove! store i64 %81, i64* %PC, align 8
Found line to remove! %82 = add i64 %75, 16
Found line to remove! store i64 %82, i64* %6, align 8
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_4004d1:                                     ; preds = %block_4004c5
Found line to remove! %83 = add i64 %68, 3
Found line to remove! store i64 %83, i64* %PC, align 8
Found line to remove! %84 = load i32, i32* %35, align 4
Found line to remove! %85 = zext i32 %84 to i64
Found line to remove! store i64 %85, i64* %RAX, align 8
Found line to remove! %86 = add i64 %32, -8
Found line to remove! %87 = add i64 %68, 6
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %88 = inttoptr i64 %86 to i32*
Found line to remove! %89 = load i32, i32* %88, align 4
Found line to remove! %90 = add i32 %89, %84
Found line to remove! %91 = zext i32 %90 to i64
Found line to remove! store i64 %91, i64* %RAX, align 8
Found line to remove! %92 = icmp ult i32 %90, %84
Found line to remove! %93 = icmp ult i32 %90, %89
Found line to remove! %94 = or i1 %92, %93
Found line to remove! %95 = zext i1 %94 to i8
Found line to remove! store i8 %95, i8* %25, align 1
Found line to remove! %96 = and i32 %90, 255
Found line to remove! %97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12
Found line to remove! %98 = trunc i32 %97 to i8
Found line to remove! %99 = and i8 %98, 1
Found line to remove! %100 = xor i8 %99, 1
Found line to remove! store i8 %100, i8* %26, align 1
Found line to remove! %101 = xor i32 %89, %84
Found line to remove! %102 = xor i32 %101, %90
Found line to remove! %103 = lshr i32 %102, 4
Found line to remove! %104 = trunc i32 %103 to i8
Found line to remove! %105 = and i8 %104, 1
Found line to remove! store i8 %105, i8* %27, align 1
Found line to remove! %106 = icmp eq i32 %90, 0
Found line to remove! %107 = zext i1 %106 to i8
Found line to remove! store i8 %107, i8* %28, align 1
Found line to remove! %108 = lshr i32 %90, 31
Found line to remove! %109 = trunc i32 %108 to i8
Found line to remove! store i8 %109, i8* %29, align 1
Found line to remove! %110 = lshr i32 %84, 31
Found line to remove! %111 = lshr i32 %89, 31
Found line to remove! %112 = xor i32 %108, %110
Found line to remove! %113 = xor i32 %108, %111
Found line to remove! %114 = add nuw nsw i32 %112, %113
Found line to remove! %115 = icmp eq i32 %114, 2
Found line to remove! %116 = zext i1 %115 to i8
Found line to remove! store i8 %116, i8* %30, align 1
Found line to remove! %117 = add i64 %68, 9
Found line to remove! store i64 %117, i64* %PC, align 8
Found line to remove! store i32 %90, i32* %88, align 4
Found line to remove! %118 = load i64, i64* %RBP, align 8
Found line to remove! %119 = add i64 %118, -12
Found line to remove! %120 = load i64, i64* %PC, align 8
Found line to remove! %121 = add i64 %120, 3
Found line to remove! store i64 %121, i64* %PC, align 8
Found line to remove! %122 = inttoptr i64 %119 to i32*
Found line to remove! %123 = load i32, i32* %122, align 4
Found line to remove! %124 = add i32 %123, 1
Found line to remove! %125 = zext i32 %124 to i64
Found line to remove! store i64 %125, i64* %RAX, align 8
Found line to remove! %126 = icmp eq i32 %123, -1
Found line to remove! %127 = icmp eq i32 %124, 0
Found line to remove! %128 = or i1 %126, %127
Found line to remove! %129 = zext i1 %128 to i8
Found line to remove! store i8 %129, i8* %25, align 1
Found line to remove! %130 = and i32 %124, 255
Found line to remove! %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #12
Found line to remove! %132 = trunc i32 %131 to i8
Found line to remove! %133 = and i8 %132, 1
Found line to remove! %134 = xor i8 %133, 1
Found line to remove! store i8 %134, i8* %26, align 1
Found line to remove! %135 = xor i32 %124, %123
Found line to remove! %136 = lshr i32 %135, 4
Found line to remove! %137 = trunc i32 %136 to i8
Found line to remove! %138 = and i8 %137, 1
Found line to remove! store i8 %138, i8* %27, align 1
Found line to remove! %139 = zext i1 %127 to i8Writing '/tmp/tmp9htg1b_7.dot'...
Writing '/tmp/tmp9htg1b_7.dot':Done

Reading LLVM: /tmp/tmpfe21vuby-query.ll
Extracting function [sum_2_n] from /tmp/tmpfe21vuby-query.ll
Dot file generated!
Writing '/tmp/tmpeoozwe1i.dot'...
Writing '/tmp/tmpeoozwe1i.dot':Done

Reading LLVM: /tmp/tmpw3aw_t8f-target.ll
Extracting function [sum_2_n] from /tmp/tmpw3aw_t8f-target.ll
Dot file generated!

Found line to remove! store i8 %139, i8* %28, align 1
Found line to remove! %140 = lshr i32 %124, 31
Found line to remove! %141 = trunc i32 %140 to i8
Found line to remove! store i8 %141, i8* %29, align 1
Found line to remove! %142 = lshr i32 %123, 31
Found line to remove! %143 = xor i32 %140, %142
Found line to remove! %144 = add nuw nsw i32 %143, %140
Found line to remove! %145 = icmp eq i32 %144, 2
Found line to remove! %146 = zext i1 %145 to i8
Found line to remove! store i8 %146, i8* %30, align 1
Found line to remove! %147 = add i64 %120, 9
Found line to remove! store i64 %147, i64* %PC, align 8
Found line to remove! store i32 %124, i32* %122, align 4
Found line to remove! %148 = load i64, i64* %PC, align 8
Found line to remove! %149 = add i64 %148, -30
Found line to remove! store i64 %149, i64* %PC, align 8
Keep: br label %block_4004c5
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -12', '%12 = load i32, i32* %EDI, align 4', '%13 = add i64 %10, 6', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i32*', 'store i32 %12, i32* %14, align 4', '%17 = load i64, i64* %PC, align 8', '%18 = add i64 %17, 7', 'store i64 %18, i64* %PC, align 8', '%22 = load i64, i64* %PC, align 8', '%23 = add i64 %22, 7', 'store i64 %23, i64* %PC, align 8', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %PC, align 8', '%31 = phi i64 [ %149, %block_4004d1 ], [ %.pre, %block_4004b0 ]', '%34 = add i64 %31, 3', 'store i64 %34, i64* %PC, align 8', '%37 = zext i32 %36 to i64', 'store i64 %37, i64* %RAX, align 8', '%39 = add i64 %31, 6', 'store i64 %39, i64* %PC, align 8', '%43 = icmp ult i32 %36, %41', '%44 = zext i1 %43 to i8', 'store i8 %44, i8* %25, align 1', '%45 = and i32 %42, 255', '%46 = tail call i32 @llvm.ctpop.i32(i32 %45) #12', '%47 = trunc i32 %46 to i8', '%48 = and i8 %47, 1', '%49 = xor i8 %48, 1', 'store i8 %49, i8* %26, align 1', '%50 = xor i32 %41, %36', '%51 = xor i32 %50, %42', '%52 = lshr i32 %51, 4', '%53 = trunc i32 %52 to i8', '%54 = and i8 %53, 1', 'store i8 %54, i8* %27, align 1', '%55 = icmp eq i32 %42, 0', '%56 = zext i1 %55 to i8', 'store i8 %56, i8* %28, align 1', 'store i8 %58, i8* %29, align 1', '%65 = zext i1 %64 to i8', 'store i8 %65, i8* %30, align 1', '%.v = select i1 %67, i64 12, i64 35', '%68 = add i64 %31, %.v', 'store i64 %68, i64* %PC, align 8', '%69 = add i64 %32, -8', '%70 = add i64 %68, 3', 'store i64 %70, i64* %PC, align 8', '%71 = inttoptr i64 %69 to i32*', '%72 = load i32, i32* %71, align 4', '%73 = zext i32 %72 to i64', 'store i64 %73, i64* %RAX, align 8', '%74 = add i64 %68, 4', 'store i64 %74, i64* %PC, align 8', '%75 = load i64, i64* %6, align 8', '%76 = add i64 %75, 8', '%77 = inttoptr i64 %75 to i64*', '%78 = load i64, i64* %77, align 8', 'store i64 %78, i64* %RBP, align 8', 'store i64 %76, i64* %6, align 8', '%79 = add i64 %68, 5', 'store i64 %79, i64* %PC, align 8', '%80 = inttoptr i64 %76 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %PC, align 8', '%82 = add i64 %75, 16', 'store i64 %82, i64* %6, align 8', '%83 = add i64 %68, 3', 'store i64 %83, i64* %PC, align 8', '%84 = load i32, i32* %35, align 4', '%85 = zext i32 %84 to i64', 'store i64 %85, i64* %RAX, align 8', '%86 = add i64 %32, -8', '%87 = add i64 %68, 6', 'store i64 %87, i64* %PC, align 8', '%88 = inttoptr i64 %86 to i32*', '%89 = load i32, i32* %88, align 4', '%90 = add i32 %89, %84', '%91 = zext i32 %90 to i64', 'store i64 %91, i64* %RAX, align 8', '%92 = icmp ult i32 %90, %84', '%93 = icmp ult i32 %90, %89', '%94 = or i1 %92, %93', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %25, align 1', '%96 = and i32 %90, 255', '%97 = tail call i32 @llvm.ctpop.i32(i32 %96) #12', '%98 = trunc i32 %97 to i8', '%99 = and i8 %98, 1', '%100 = xor i8 %99, 1', 'store i8 %100, i8* %26, align 1', '%101 = xor i32 %89, %84', '%102 = xor i32 %101, %90', '%103 = lshr i32 %102, 4', '%104 = trunc i32 %103 to i8', '%105 = and i8 %104, 1', 'store i8 %105, i8* %27, align 1', '%106 = icmp eq i32 %90, 0', '%107 = zext i1 %106 to i8', 'store i8 %107, i8* %28, align 1', '%108 = lshr i32 %90, 31', '%109 = trunc i32 %108 to i8', 'store i8 %109, i8* %29, align 1', '%110 = lshr i32 %84, 31', '%111 = lshr i32 %89, 31', '%112 = xor i32 %108, %110', '%113 = xor i32 %108, %111', '%114 = add nuw nsw i32 %112, %113', '%115 = icmp eq i32 %114, 2', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %30, align 1', '%117 = add i64 %68, 9', 'store i64 %117, i64* %PC, align 8', 'store i32 %90, i32* %88, align 4', '%118 = load i64, i64* %RBP, align 8', '%119 = add i64 %118, -12', '%120 = load i64, i64* %PC, align 8', '%121 = add i64 %120, 3', 'store i64 %121, i64* %PC, align 8', '%122 = inttoptr i64 %119 to i32*', '%123 = load i32, i32* %122, align 4', '%124 = add i32 %123, 1', '%125 = zext i32 %124 to i64', 'store i64 %125, i64* %RAX, align 8', '%126 = icmp eq i32 %123, -1', '%127 = icmp eq i32 %124, 0', '%128 = or i1 %126, %127', '%129 = zext i1 %128 to i8', 'store i8 %129, i8* %25, align 1', '%130 = and i32 %124, 255', '%131 = tail call i32 @llvm.ctpop.i32(i32 %130) #12', '%132 = trunc i32 %131 to i8', '%133 = and i8 %132, 1', '%134 = xor i8 %133, 1', 'store i8 %134, i8* %26, align 1', '%135 = xor i32 %124, %123', '%136 = lshr i32 %135, 4', '%137 = trunc i32 %136 to i8', '%138 = and i8 %137, 1', 'store i8 %138, i8* %27, align 1', '%139 = zext i1 %127 to i8', 'store i8 %139, i8* %28, align 1', '%140 = lshr i32 %124, 31', '%141 = trunc i32 %140 to i8', 'store i8 %141, i8* %29, align 1', '%142 = lshr i32 %123, 31', '%143 = xor i32 %140, %142', '%144 = add nuw nsw i32 %143, %140', '%145 = icmp eq i32 %144, 2', '%146 = zext i1 %145 to i8', 'store i8 %146, i8* %30, align 1', '%147 = add i64 %120, 9', 'store i64 %147, i64* %PC, align 8', 'store i32 %124, i32* %122, align 4', '%148 = load i64, i64* %PC, align 8', '%149 = add i64 %148, -30', 'store i64 %149, i64* %PC, align 8'])
================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_16 = load i64, i64* %RBP.i, align 8
- 2 %var_2_17 = add i64 %var_2_16, -8
- 3 %var_2_20 = inttoptr i64 %var_2_17 to i32*
- 4 store i32 0, i32* %var_2_20, align 4
- 5 %var_2_21 = load i64, i64* %RBP.i, align 8
- 6 %var_2_22 = add i64 %var_2_21, -12
- 7 %var_2_25 = inttoptr i64 %var_2_22 to i32*
- 8 store i32 0, i32* %var_2_25, align 4
- 9 %var_2_33 = load i64, i64* %RBP.i, align 8
- 10 %var_2_34 = add i64 %var_2_33, -12
- 11 %var_2_36 = inttoptr i64 %var_2_34 to i32*
- 12 %var_2_37 = load i32, i32* %var_2_36, align 4
- 13 %var_2_39 = add i64 %var_2_33, -4
- 14 %var_2_41 = inttoptr i64 %var_2_39 to i32*
- 15 %var_2_42 = load i32, i32* %var_2_41, align 4
- 16 %var_2_43 = sub i32 %var_2_37, %var_2_42
- 17 %var_2_58 = lshr i32 %var_2_43, 31
- 18 %var_2_60 = lshr i32 %var_2_37, 31
- 19 %var_2_61 = lshr i32 %var_2_42, 31
- 20 %var_2_62 = xor i32 %var_2_61, %var_2_60
- 21 %var_2_63 = xor i32 %var_2_58, %var_2_60
- 22 %var_2_64 = add nuw nsw i32 %var_2_63, %var_2_62
- 23 %var_2_65 = icmp eq i32 %var_2_64, 2
- 24 %var_2_67 = icmp ne i32 %var_2_58, 0
- 25 %var_2_68 = xor i1 %var_2_67, %var_2_65
- 26 \<badref\> = br i1 %var_2_68, label %block_.L_4004c5.preheader, label %block_.L_4004e8.split
- 27 \<badref\> = br label %block_.L_4004c5
- 28 \<badref\> = br label %block_.L_4004c5
- 29 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f916362d9d8>, {0: {0}, 1: {1, 5, 9, 12, 15}, 2: {2}, 3: {11, 3, 14, 7}, 4: {8, 4}, 5: {1, 5, 9, 12, 15}, 6: {10, 6}, 7: {11, 3, 14, 7}, 8: {8, 4}, 9: {1, 5, 9, 12, 15}, 10: {10, 6}, 11: {11, 3, 14, 7}, 12: {1, 5, 9, 12, 15}, 13: {13}, 14: {11, 3, 14, 7}, 15: {1, 5, 9, 12, 15}, 16: {16}, 17: {17, 18, 19}, 18: {17, 18, 19}, 19: {17, 18, 19}, 20: {25, 20, 21}, 21: {25, 20, 21}, 22: {22}, 23: {23}, 24: {24}, 25: {25, 20, 21}, 26: {26}, 27: {27, 28}, 28: {27, 28}, 29: {29}})
Equivalent! frozenset({27, 28}) {27, 28}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f916362d9d8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {28}, 29: {29}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 load load
EXACT 16 sub sub
EXACT 17 lshr lshr
EXACT 18 lshr lshr
EXACT 19 lshr lshr
EXACT 20 xor xor
EXACT 21 xor xor
EXACT 22 add add
EXACT 23 icmp icmp
EXACT 24 icmp icmp
EXACT 25 xor xor
EXACT 26 br br
EXACT 27 br br
EXACT 28 br br
EXACT 29 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_15 = load i64, i64* %RBP, align 8
- 2 %var_2_16 = add i64 %var_2_15, -8
- 3 %var_2_19 = inttoptr i64 %var_2_16 to i32*
- 4 store i32 0, i32* %var_2_19, align 4
- 5 %var_2_20 = load i64, i64* %RBP, align 8
- 6 %var_2_21 = add i64 %var_2_20, -12
- 7 %var_2_24 = inttoptr i64 %var_2_21 to i32*
- 8 store i32 0, i32* %var_2_24, align 4
- 9 %var_2_32 = load i64, i64* %RBP, align 8
- 10 %var_2_33 = add i64 %var_2_32, -12
- 11 %var_2_35 = inttoptr i64 %var_2_33 to i32*
- 12 %var_2_36 = load i32, i32* %var_2_35, align 4
- 13 %var_2_38 = add i64 %var_2_32, -4
- 14 %var_2_40 = inttoptr i64 %var_2_38 to i32*
- 15 %var_2_41 = load i32, i32* %var_2_40, align 4
- 16 %var_2_42 = sub i32 %var_2_36, %var_2_41
- 17 %var_2_57 = lshr i32 %var_2_42, 31
- 18 %var_2_59 = lshr i32 %var_2_36, 31
- 19 %var_2_60 = lshr i32 %var_2_41, 31
- 20 %var_2_61 = xor i32 %var_2_60, %var_2_59
- 21 %var_2_62 = xor i32 %var_2_57, %var_2_59
- 22 %var_2_63 = add nuw nsw i32 %var_2_62, %var_2_61
- 23 %var_2_64 = icmp eq i32 %var_2_63, 2
- 24 %var_2_66 = icmp ne i32 %var_2_57, 0
- 25 %var_2_67 = xor i1 %var_2_66, %var_2_64
- 26 \<badref\> = br i1 %var_2_67, label %block_4004c5.preheader, label %block_4004e8.split
- 27 \<badref\> = br label %block_4004c5
- 28 \<badref\> = br label %block_4004c5
- 29 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9162df3378>, {0: {0}, 1: {1, 5, 9, 12, 15}, 2: {2}, 3: {11, 3, 14, 7}, 4: {8, 4}, 5: {1, 5, 9, 12, 15}, 6: {10, 6}, 7: {11, 3, 14, 7}, 8: {8, 4}, 9: {1, 5, 9, 12, 15}, 10: {10, 6}, 11: {11, 3, 14, 7}, 12: {1, 5, 9, 12, 15}, 13: {13}, 14: {11, 3, 14, 7}, 15: {1, 5, 9, 12, 15}, 16: {16}, 17: {17, 18, 19}, 18: {17, 18, 19}, 19: {17, 18, 19}, 20: {25, 20, 21}, 21: {25, 20, 21}, 22: {22}, 23: {23}, 24: {24}, 25: {25, 20, 21}, 26: {26}, 27: {27, 28}, 28: {27, 28}, 29: {29}})
Equivalent! frozenset({27, 28}) {27, 28}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9162df3378>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {28}, 29: {29}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 load load
EXACT 16 sub sub
EXACT 17 lshr lshr
EXACT 18 lshr lshr
EXACT 19 lshr lshr
EXACT 20 xor xor
EXACT 21 xor xor
EXACT 22 add add
EXACT 23 icmp icmp
EXACT 24 icmp icmp
EXACT 25 xor xor
EXACT 26 br br
EXACT 27 br br
EXACT 28 br br
EXACT 29 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_16 = load i64, i64* %RBP.i, align 8', '%var_2_17 = add i64 %var_2_16, -8', '%var_2_20 = inttoptr i64 %var_2_17 to i32*', 'store i32 0, i32* %var_2_20, align 4', '%var_2_21 = load i64, i64* %RBP.i, align 8', '%var_2_22 = add i64 %var_2_21, -12', '%var_2_25 = inttoptr i64 %var_2_22 to i32*', 'store i32 0, i32* %var_2_25, align 4'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_16 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_17 = add i64 %var_2_16, -8
Found line to remove! %var_2_20 = inttoptr i64 %var_2_17 to i32*
Found line to remove! store i32 0, i32* %var_2_20, align 4
Found line to remove! %var_2_21 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_22 = add i64 %var_2_21, -12
Found line to remove! %var_2_25 = inttoptr i64 %var_2_22 to i32*
Found line to remove! store i32 0, i32* %var_2_25, align 4
Keep: %var_2_33 = load i64, i64* %RBP.i, align 8
Keep: %var_2_34 = add i64 %var_2_33, -12
Keep: %var_2_36 = inttoptr i64 %var_2_34 to i32*
Keep: %var_2_37 = load i32, i32* %var_2_36, align 4
Keep: %var_2_39 = add i64 %var_2_33, -4
Keep: %var_2_41 = inttoptr i64 %var_2_39 to i32*
Keep: %var_2_42 = load i32, i32* %var_2_41, align 4
Keep: %var_2_43 = sub i32 %var_2_37, %var_2_42
Keep: %var_2_58 = lshr i32 %var_2_43, 31
Keep: %var_2_60 = lshr i32 %var_2_37, 31
Keep: %var_2_61 = lshr i32 %var_2_42, 31
Keep: %var_2_62 = xor i32 %var_2_61, %var_2_60
Keep: %var_2_63 = xor i32 %var_2_58, %var_2_60
Keep: %var_2_64 = add nuw nsw i32 %var_2_63, %var_2_62
Keep: %var_2_65 = icmp eq i32 %var_2_64, 2
Keep: %var_2_67 = icmp ne i32 %var_2_58, 0
Keep: %var_2_68 = xor i1 %var_2_67, %var_2_65
Keep: br i1 %var_2_68, label %block_.L_4004c5.preheader, label %block_.L_4004e8.split
Keep: 
Keep: block_.L_4004c5.preheader:                        ; preds = %entry
Keep: br label %block_.L_4004c5
Keep: 
Keep: block_.L_4004c5:                                  ; preds = %block_.L_4004c5.preheader, %block_.L_4004c5
Keep: br label %block_.L_4004c5
Keep: 
Keep: block_.L_4004e8.split:                            ; preds = %entry
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_16 = load i64, i64* %RBP.i, align 8', '%var_2_17 = add i64 %var_2_16, -8', '%var_2_20 = inttoptr i64 %var_2_17 to i32*', 'store i32 0, i32* %var_2_20, align 4', '%var_2_21 = load i64, i64* %RBP.i, align 8', '%var_2_22 = add i64 %var_2_21, -12', '%var_2_25 = inttoptr i64 %var_2_22 to i32*', 'store i32 0, i32* %var_2_25, align 4'])
TO REMOVE: dict_keys(['%var_2_15 = load i64, i64* %RBP, align 8', '%var_2_16 = add i64 %var_2_15, -8', '%var_2_19 = inttoptr i64 %var_2_16 to i32*', 'store i32 0, i32* %var_2_19, align 4', '%var_2_20 = load i64, i64* %RBP, align 8', '%var_2_21 = add i64 %var_2_20, -12', '%var_2_24 = inttoptr i64 %var_2_21 to i32*', 'store i32 0, i32* %var_2_24, align 4'])
Keep: block_4004b0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_15 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_16 = add i64 %var_2_15, -8
Found line to remove! %var_2_19 = inttoptr i64 %var_2_16 to i32*
Found line to remove! store i32 0, i32* %var_2_19, align 4
Found line to remove! %var_2_20 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_21 = add i64 %var_2_20, -12
Found line to remove! %var_2_24 = inttoptr i64 %var_2_21 to i32*
Found line to remove! store i32 0, i32* %var_2_24, align 4
Keep: %var_2_32 = load i64, i64* %RBP, align 8
Keep: %var_2_33 = add i64 %var_2_32, -12
Keep: %var_2_35 = inttoptr i64 %var_2_33 to i32*
Keep: %var_2_36 = load i32, i32* %var_2_35, align 4
Keep: %var_2_38 = add i64 %var_2_32, -4
Keep: %var_2_40 = inttoptr i64 %var_2_38 to i32*
Keep: %var_2_41 = load i32, i32* %var_2_40, align 4
Keep: %var_2_42 = sub i32 %var_2_36, %var_2_41
Keep: %var_2_57 = lshr i32 %var_2_42, 31
Keep: %var_2_59 = lshr i32 %var_2_36, 31
Keep: %var_2_60 = lshr i32 %var_2_41, 31
Keep: %var_2_61 = xor i32 %var_2_60, %var_2_59
Keep: %var_2_62 = xor i32 %var_2_57, %var_2_59
Keep: %var_2_63 = add nuw nsw i32 %var_2_62, %var_2_61
Keep: %var_2_64 = icmp eq i32 %var_2_63, 2
Keep: %var_2_66 = icmp ne i32 %var_2_57, 0
Keep: %var_2_67 = xor i1 %var_2_66, %var_2_64
Keep: br i1 %var_2_67, label %block_4004c5.preheader, label %block_4004e8.split
Keep: 
Keep: block_4004c5.preheader:                           ; preds = %block_4004b0
Keep: br label %block_4004c5
Keep: 
Keep: block_4004c5:                                     ; preds = %block_4004c5.preheader, %block_4004c5
Keep: br label %block_4004c5
Keep: 
Keep: block_4004e8.split:                               ; preds = %block_4004b0
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_15 = load i64, i64* %RBP, align 8', '%var_2_16 = add i64 %var_2_15, -8', '%var_2_19 = inttoptr i64 %var_2_16 to i32*', 'store i32 0, i32* %var_2_19, align 4', '%var_2_20 = load i64, i64* %RBP, align 8', '%var_2_21 = add i64 %var_2_20, -12', '%var_2_24 = inttoptr i64 %var_2_21 to i32*', 'store i32 0, i32* %var_2_24, align 4'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/sum-2-n/sum_2_n/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/sum-2-n/binary/test.mcsema.calls_renamed.ll sum_2_n
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
