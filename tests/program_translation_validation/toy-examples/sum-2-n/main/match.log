Matching sub_4004b0_main Vs main


[Info] Retrieve Potential Matches...
[0x556a662e3610]: %struct.State* %0 {
	[0x556a6630f450]:%struct.State.0* %0
	}

[0x556a662e3650]: i64 %1 {
	[0x556a66337c60]:i64 %1
	}

[0x556a662e3690]: %struct.Memory* %2 {
	[0x556a66315670]:%struct.Memory.31* %2
	}

[0x556a662e3838]:   %3 = load i64, i64* %RBP, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662e3910]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x556a6628afe0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x556a662e3a00]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x556a662af4a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x556a662f92e0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x556a662aed20]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x556a662f93f0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x556a662ae070]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x556a662f94a0]:   %4 = add i64 %1, 1 {
	[0x556a662628e0]:  %5 = add i64 %1, 1
	}

[0x556a662f9570]:   store i64 %4, i64* %PC, align 8 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662f95d8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662f9650]:   %6 = add i64 %5, -8 {
	[0x556a663085b0]:  %8 = add i64 %7, -8
	[0x556a663c3f40]:  %47 = add i64 %46, -8
	}

[0x556a662f96b8]:   %7 = inttoptr i64 %6 to i64* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662f9730]:   store i64 %3, i64* %7, align 8 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662f9798]:   %8 = load i64, i64* %PC, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662f9810]:   %17 = and i8 %16, 1 {
	[0x556a6630a030]:  %26 = and i8 %25, 1
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	[0x556a6632ca70]:  %64 = and i8 %63, 1
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662f98a0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662f9920]:   %9 = add i64 %5, -24 {
	[0x556a6630a330]:  %11 = add i64 %7, -24
	}

[0x556a662f99a0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662f9a20]:   %10 = icmp ult i64 %6, 16 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662f9a88]:   %11 = zext i1 %10 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662f9b30]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x556a66308100]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x556a662f9bc0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662f9c28]:   %13 = trunc i64 %9 to i32 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662f9ca0]:   %14 = and i32 %13, 255 {
	[0x556a6630aa60]:  %16 = and i32 %15, 255
	[0x556a663d3310]:  %55 = and i32 %54, 255
	}

[0x556a662f9d60]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x556a663136b0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x556a6632bfd0]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	[0x556a6632c240]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x556a662f9dd8]:   %16 = trunc i32 %15 to i8 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662f9e50]:   %33 = xor i64 %29, %32 {
	[0x556a6626f020]:  %61 = xor i64 %60, %51
	[0x556a6630b320]:  %23 = xor i64 %22, %11
	[0x556a6632e5b0]:  %35 = xor i64 %31, %34
	[0x556a6632fef0]:  %70 = xor i64 %67, %69
	}

[0x556a662f9ed0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x556a6632efe0]:  %71 = add nuw nsw i64 %70, %67
	[0x556a66331c10]:  %36 = add nuw nsw i64 %35, %34
	}

[0x556a662f9f60]:   %18 = xor i8 %17, 1 {
	[0x556a6630acc0]:  %20 = xor i8 %19, 1
	[0x556a663dda50]:  %59 = xor i8 %58, 1
	}

[0x556a662fa010]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x556a6630adc0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x556a662fa0a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fa120]:   %20 = xor i64 %6, 16 {
	[0x556a662c7130]:  %60 = xor i64 %49, 16
	[0x556a6632a550]:  %22 = xor i64 %8, 16
	}

[0x556a662fa1a0]:   %21 = xor i64 %20, %9 {
	[0x556a6626f020]:  %61 = xor i64 %60, %51
	[0x556a6630b320]:  %23 = xor i64 %22, %11
	[0x556a6632e5b0]:  %35 = xor i64 %31, %34
	[0x556a6632fef0]:  %70 = xor i64 %67, %69
	}

[0x556a662fa220]:   %22 = lshr i64 %21, 4 {
	[0x556a6630b3f0]:  %24 = lshr i64 %23, 4
	[0x556a6632c890]:  %62 = lshr i64 %61, 4
	}

[0x556a662fa288]:   %23 = trunc i64 %22 to i8 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fa300]:   %24 = and i8 %23, 1 {
	[0x556a6630a030]:  %26 = and i8 %25, 1
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	[0x556a6632ca70]:  %64 = and i8 %63, 1
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662fa3b0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x556a6630b970]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x556a662fa440]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fa4c0]:   %26 = icmp eq i64 %9, 0 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fa528]:   %27 = zext i1 %26 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662fa5d0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x556a6630c650]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x556a662fa660]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fa6e0]:   %29 = lshr i64 %9, 63 {
	[0x556a66309940]:  %31 = lshr i64 %11, 63
	[0x556a6632d510]:  %34 = lshr i64 %8, 63
	[0x556a6632f630]:  %67 = lshr i64 %51, 63
	[0x556a6632f7f0]:  %69 = lshr i64 %49, 63
	}

[0x556a662fa748]:   %30 = trunc i64 %29 to i8 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fa7f0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x556a6632e490]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x556a662fa880]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fa900]:   %32 = lshr i64 %6, 63 {
	[0x556a66309940]:  %31 = lshr i64 %11, 63
	[0x556a6632d510]:  %34 = lshr i64 %8, 63
	[0x556a6632f630]:  %67 = lshr i64 %51, 63
	[0x556a6632f7f0]:  %69 = lshr i64 %49, 63
	}

[0x556a662fa968]:   %65 = zext i1 %64 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662fa9e0]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662faa60]:   %66 = lshr i64 %50, 63 {
	[0x556a66309940]:  %31 = lshr i64 %11, 63
	[0x556a6632d510]:  %34 = lshr i64 %8, 63
	[0x556a6632f630]:  %67 = lshr i64 %51, 63
	[0x556a6632f7f0]:  %69 = lshr i64 %49, 63
	}

[0x556a662faac8]:   %67 = trunc i64 %66 to i8 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fab90]:   %35 = icmp eq i64 %34, 2 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fabf8]:   %36 = zext i1 %35 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662faca0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x556a66313450]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x556a662fad30]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fadb0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fae30]:   %38 = add i64 %5, -12 {
	[0x556a66315b20]:  %40 = add i64 %7, -12
	}

[0x556a662faef0]:   %39 = add i64 %8, 19 {
	[0x556a66315c50]:  %41 = add i64 %10, 19
	}

[0x556a662faf70]:   store i64 %39, i64* %PC, align 8 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fafd8]:   %40 = inttoptr i64 %38 to i32* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662fb050]:   store i32 0, i32* %40, align 4 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb0b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fb170]:   %42 = add i64 %41, -84 {
	[0x556a66347b90]:  %44 = add i64 %43, -84
	}

[0x556a662fb1f0]:   %43 = add i64 %41, 5 {
	[0x556a66330a20]:  %74 = add i64 %50, 5
	[0x556a663c1720]:  %45 = add i64 %43, 5
	}

[0x556a662fb258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fb2d0]:   %45 = add i64 %44, -8 {
	[0x556a663085b0]:  %8 = add i64 %7, -8
	[0x556a663c3f40]:  %47 = add i64 %46, -8
	}

[0x556a662fb338]:   %46 = inttoptr i64 %45 to i64* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662fb3b0]:   store i64 %43, i64* %46, align 8 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb4b0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb5b0]:   %47 = tail call %struct.Memory* @sub_400470_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x556a663136b0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x556a6632bfd0]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	[0x556a6632c240]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x556a662fb678]:   %48 = load i64, i64* %RSP, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fb6d8]:   %49 = load i64, i64* %PC, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fb750]:   %50 = add i64 %48, 16 {
	[0x556a663cac20]:  %51 = add i64 %49, 16
	}

[0x556a662fb7d0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb890]:   %51 = icmp ugt i64 %48, -17 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fb8f8]:   %52 = zext i1 %51 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662fb970]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb9d8]:   %53 = trunc i64 %50 to i32 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fba50]:   %54 = and i32 %53, 255 {
	[0x556a6630aa60]:  %16 = and i32 %15, 255
	[0x556a663d3310]:  %55 = and i32 %54, 255
	}

[0x556a662fbad0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x556a663136b0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x556a6632bfd0]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	[0x556a6632c240]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x556a662fbb98]:   %56 = trunc i32 %55 to i8 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fbc10]:   %57 = and i8 %56, 1 {
	[0x556a6630a030]:  %26 = and i8 %25, 1
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	[0x556a6632ca70]:  %64 = and i8 %63, 1
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662fbc90]:   %58 = xor i8 %57, 1 {
	[0x556a6630acc0]:  %20 = xor i8 %19, 1
	[0x556a663dda50]:  %59 = xor i8 %58, 1
	}

[0x556a662fbd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fbd90]:   %59 = xor i64 %48, 16 {
	[0x556a662c7130]:  %60 = xor i64 %49, 16
	[0x556a6632a550]:  %22 = xor i64 %8, 16
	}

[0x556a662fbe10]:   %60 = xor i64 %59, %50 {
	[0x556a6626f020]:  %61 = xor i64 %60, %51
	[0x556a6630b320]:  %23 = xor i64 %22, %11
	[0x556a6632e5b0]:  %35 = xor i64 %31, %34
	[0x556a6632fef0]:  %70 = xor i64 %67, %69
	}

[0x556a662fbe90]:   %61 = lshr i64 %60, 4 {
	[0x556a6630b3f0]:  %24 = lshr i64 %23, 4
	[0x556a6632c890]:  %62 = lshr i64 %61, 4
	}

[0x556a662fbef8]:   %62 = trunc i64 %61 to i8 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fbf70]:   %63 = and i8 %62, 1 {
	[0x556a6630a030]:  %26 = and i8 %25, 1
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	[0x556a6632ca70]:  %64 = and i8 %63, 1
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662fbff0]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fc070]:   %64 = icmp eq i64 %50, 0 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fc500]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fc580]:   %68 = lshr i64 %48, 63 {
	[0x556a66309940]:  %31 = lshr i64 %11, 63
	[0x556a6632d510]:  %34 = lshr i64 %8, 63
	[0x556a6632f630]:  %67 = lshr i64 %51, 63
	[0x556a6632f7f0]:  %69 = lshr i64 %49, 63
	}

[0x556a662fc600]:   %69 = xor i64 %66, %68 {
	[0x556a6626f020]:  %61 = xor i64 %60, %51
	[0x556a6630b320]:  %23 = xor i64 %22, %11
	[0x556a6632e5b0]:  %35 = xor i64 %31, %34
	[0x556a6632fef0]:  %70 = xor i64 %67, %69
	}

[0x556a662fc680]:   %70 = add nuw nsw i64 %69, %66 {
	[0x556a6632efe0]:  %71 = add nuw nsw i64 %70, %67
	[0x556a66331c10]:  %36 = add nuw nsw i64 %35, %34
	}

[0x556a662fc700]:   %71 = icmp eq i64 %70, 2 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fc768]:   %72 = zext i1 %71 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662fc7e0]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fc860]:   %73 = add i64 %49, 5 {
	[0x556a66330a20]:  %74 = add i64 %50, 5
	[0x556a663c1720]:  %45 = add i64 %43, 5
	}

[0x556a662fc8e0]:   store i64 %73, i64* %PC, align 8 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fc960]:   %74 = add i64 %48, 24 {
	[0x556a66309a30]:  %75 = add i64 %49, 24
	}

[0x556a662fc9c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662fca28]:   %76 = load i64, i64* %75, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fcaa0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fcb20]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fcba0]:   %77 = add i64 %49, 6 {
	[0x556a663331b0]:  %78 = add i64 %50, 6
	}

[0x556a662fcc20]:   store i64 %77, i64* %PC, align 8 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fcc88]:   %78 = inttoptr i64 %74 to i64* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662fcce8]:   %79 = load i64, i64* %78, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fcd60]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fcde0]:   %80 = add i64 %48, 32 {
	[0x556a66333e00]:  %81 = add i64 %49, 32
	}

[0x556a662fce60]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fcec8]:   ret %struct.Memory* %47 {
	[0x556a663110c8]:  ret %struct.Memory.31* %call2_4004c4
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x556a6630d8e8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x556a662f95d8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x556a662fae30]:   %38 = add i64 %5, -12


Uprime Matches: [0x556a66315b20]:   %40 = add i64 %7, -12


Adj: [0x556a663c3f40]:   %47 = add i64 %46, -8


Removing: [0x556a66330f18]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x556a662f95d8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x556a662fae30]:   %38 = add i64 %5, -12


Uprime Matches: [0x556a66315b20]:   %40 = add i64 %7, -12


Adj: [0x556a662c7130]:   %60 = xor i64 %49, 16
[0x556a66309a30]:   %75 = add i64 %49, 24
[0x556a6632f7f0]:   %69 = lshr i64 %49, 63
[0x556a66333e00]:   %81 = add i64 %49, 32
[0x556a663cac20]:   %51 = add i64 %49, 16
[0x556a663cbf70]:   %52 = icmp ugt i64 %49, -17


Removing: [0x556a6630d7b8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x556a662f9798]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x556a662faef0]:   %39 = add i64 %8, 19


Uprime Matches: [0x556a66315c50]:   %41 = add i64 %10, 19


Adj: [0x556a66347b90]:   %44 = add i64 %43, -84
[0x556a663c1720]:   %45 = add i64 %43, 5


Removing: [0x556a6630e398]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x556a662f9798]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x556a662faef0]:   %39 = add i64 %8, 19


Uprime Matches: [0x556a66315c50]:   %41 = add i64 %10, 19


Adj: [0x556a66330a20]:   %74 = add i64 %50, 5
[0x556a663331b0]:   %78 = add i64 %50, 6


Removing: [0x556a66305778]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6630aa60]:   %16 = and i32 %15, 255


Removing: [0x556a6630ce38]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6632d620]:   store i8 %32, i8* %33, align 1


Removing: [0x556a6630e5f8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a663d3310]:   %55 = and i32 %54, 255


Removing: [0x556a6630fb68]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6632f720]:   store i8 %68, i8* %33, align 1


Removing: [0x556a6630a030]:   %26 = and i8 %25, 1
From the pot matches of: [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime : [0x556a662f9f60]:   %18 = xor i8 %17, 1


Uprime Matches: [0x556a6630acc0]:   %20 = xor i8 %19, 1
[0x556a663dda50]:   %59 = xor i8 %58, 1


Adj: [0x556a6630bed0]:   store i8 %26, i8* %27, align 1


Removing: [0x556a6632ca70]:   %64 = and i8 %63, 1
From the pot matches of: [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime : [0x556a662f9f60]:   %18 = xor i8 %17, 1


Uprime Matches: [0x556a6630acc0]:   %20 = xor i8 %19, 1
[0x556a663dda50]:   %59 = xor i8 %58, 1


Adj: [0x556a66309c10]:   store i8 %64, i8* %27, align 1


Removing: [0x556a662fc1d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x556a662fb0b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x556a662fb1f0]:   %43 = add i64 %41, 5


Uprime Matches: [0x556a66330a20]:   %74 = add i64 %50, 5
[0x556a663c1720]:   %45 = add i64 %43, 5


Adj: [0x556a66315c50]:   %41 = add i64 %10, 19


Removing: [0x556a6630e398]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x556a662fb0b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x556a662fb170]:   %42 = add i64 %41, -84


Uprime Matches: [0x556a66347b90]:   %44 = add i64 %43, -84


Adj: [0x556a66330a20]:   %74 = add i64 %50, 5
[0x556a663331b0]:   %78 = add i64 %50, 6


Removing: [0x556a66330f18]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x556a662fb258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x556a662fb2d0]:   %45 = add i64 %44, -8


Uprime Matches: [0x556a663085b0]:   %8 = add i64 %7, -8
[0x556a663c3f40]:   %47 = add i64 %46, -8


Adj: [0x556a662c7130]:   %60 = xor i64 %49, 16
[0x556a66309a30]:   %75 = add i64 %49, 24
[0x556a6632f7f0]:   %69 = lshr i64 %49, 63
[0x556a66333e00]:   %81 = add i64 %49, 32
[0x556a663cac20]:   %51 = add i64 %49, 16
[0x556a663cbf70]:   %52 = icmp ugt i64 %49, -17


Removing: [0x556a663085b0]:   %8 = add i64 %7, -8
From the pot matches of: [0x556a662fb2d0]:   %45 = add i64 %44, -8


Uprime : [0x556a662fb430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x556a66307e50]:   store i64 %75, i64* %6, align 8
[0x556a6630a730]:   store i64 %11, i64* %6, align 8
[0x556a6632a730]:   store i64 %81, i64* %6, align 8
[0x556a663c9480]:   store i64 %47, i64* %6, align 8
[0x556a663cd410]:   store i64 %51, i64* %6, align 8


Adj: [0x556a662775a8]:   %9 = inttoptr i64 %8 to i64*
[0x556a66307b00]:   store i64 %8, i64* %RBP.i, align 8
[0x556a6630a840]:   %12 = icmp ult i64 %8, 16
[0x556a6632a550]:   %22 = xor i64 %8, 16
[0x556a6632d510]:   %34 = lshr i64 %8, 63


Removing: [0x556a66274d58]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x556a662fb678]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x556a662fcde0]:   %80 = add i64 %48, 32


Uprime Matches: [0x556a66333e00]:   %81 = add i64 %49, 32


Adj: [0x556a663085b0]:   %8 = add i64 %7, -8
[0x556a6630a330]:   %11 = add i64 %7, -24
[0x556a66315b20]:   %40 = add i64 %7, -12


Removing: [0x556a6630d8e8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x556a662fb678]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x556a662fcde0]:   %80 = add i64 %48, 32


Uprime Matches: [0x556a66333e00]:   %81 = add i64 %49, 32


Adj: [0x556a663c3f40]:   %47 = add i64 %46, -8


Removing: [0x556a662fc1d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x556a662fb6d8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x556a662fcba0]:   %77 = add i64 %49, 6


Uprime Matches: [0x556a663331b0]:   %78 = add i64 %50, 6


Adj: [0x556a66315c50]:   %41 = add i64 %10, 19


Removing: [0x556a6630d7b8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x556a662fb6d8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x556a662fcba0]:   %77 = add i64 %49, 6


Uprime Matches: [0x556a663331b0]:   %78 = add i64 %50, 6


Adj: [0x556a66347b90]:   %44 = add i64 %43, -84
[0x556a663c1720]:   %45 = add i64 %43, 5


Removing: [0x556a66305778]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6630aa60]:   %16 = and i32 %15, 255


Removing: [0x556a6630ce38]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6632d620]:   store i8 %32, i8* %33, align 1


Removing: [0x556a6630e5f8]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a663d3310]:   %55 = and i32 %54, 255


Removing: [0x556a6630fb68]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a6630a030]:   %26 = and i8 %25, 1
[0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a6632ca70]:   %64 = and i8 %63, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6632f720]:   store i8 %68, i8* %33, align 1


Removing: [0x556a6630a030]:   %26 = and i8 %25, 1
From the pot matches of: [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime : [0x556a662fbc90]:   %58 = xor i8 %57, 1


Uprime Matches: [0x556a6630acc0]:   %20 = xor i8 %19, 1
[0x556a663dda50]:   %59 = xor i8 %58, 1


Adj: [0x556a6630bed0]:   store i8 %26, i8* %27, align 1


Removing: [0x556a6632ca70]:   %64 = and i8 %63, 1
From the pot matches of: [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime : [0x556a662fbc90]:   %58 = xor i8 %57, 1


Uprime Matches: [0x556a6630acc0]:   %20 = xor i8 %19, 1
[0x556a663dda50]:   %59 = xor i8 %58, 1


Adj: [0x556a66309c10]:   store i8 %64, i8* %27, align 1

Round: 1

Removing: [0x556a66307a48]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6630a030]:   %26 = and i8 %25, 1


Removing: [0x556a6630c538]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6632ca70]:   %64 = and i8 %63, 1


Removing: [0x556a66274d58]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x556a662fb258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x556a662fb2d0]:   %45 = add i64 %44, -8


Uprime Matches: [0x556a663c3f40]:   %47 = add i64 %46, -8


Adj: [0x556a663085b0]:   %8 = add i64 %7, -8
[0x556a6630a330]:   %11 = add i64 %7, -24
[0x556a66315b20]:   %40 = add i64 %7, -12


Removing: [0x556a66307a48]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6630a030]:   %26 = and i8 %25, 1


Removing: [0x556a6630c538]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a66329cd0]:   %19 = and i8 %18, 1
[0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a6632ca70]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x556a662e3610]: %struct.State* %0 {
	[0x556a6630f450]:%struct.State.0* %0
	}

[0x556a662e3650]: i64 %1 {
	[0x556a66337c60]:i64 %1
	}

[0x556a662e3690]: %struct.Memory* %2 {
	[0x556a66315670]:%struct.Memory.31* %2
	}

[0x556a662e3838]:   %3 = load i64, i64* %RBP, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x556a662e3910]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x556a6628afe0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x556a662e3a00]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x556a662af4a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x556a662f92e0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x556a662aed20]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x556a662f93f0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x556a662ae070]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x556a662f94a0]:   %4 = add i64 %1, 1 {
	[0x556a662628e0]:  %5 = add i64 %1, 1
	}

[0x556a662f9570]:   store i64 %4, i64* %PC, align 8 {
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	}

[0x556a662f95d8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	}

[0x556a662f9650]:   %6 = add i64 %5, -8 {
	[0x556a663085b0]:  %8 = add i64 %7, -8
	}

[0x556a662f96b8]:   %7 = inttoptr i64 %6 to i64* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x556a662f9730]:   store i64 %3, i64* %7, align 8 {
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	}

[0x556a662f9798]:   %8 = load i64, i64* %PC, align 8 {
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	}

[0x556a662f9810]:   %17 = and i8 %16, 1 {
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662f98a0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x556a662f9920]:   %9 = add i64 %5, -24 {
	[0x556a6630a330]:  %11 = add i64 %7, -24
	}

[0x556a662f99a0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	}

[0x556a662f9a20]:   %10 = icmp ult i64 %6, 16 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	}

[0x556a662f9a88]:   %11 = zext i1 %10 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	}

[0x556a662f9b30]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x556a66308100]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x556a662f9bc0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	}

[0x556a662f9c28]:   %13 = trunc i64 %9 to i32 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	}

[0x556a662f9ca0]:   %14 = and i32 %13, 255 {
	[0x556a6630aa60]:  %16 = and i32 %15, 255
	}

[0x556a662f9d60]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x556a6632c240]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x556a662f9dd8]:   %16 = trunc i32 %15 to i8 {
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	}

[0x556a662f9e50]:   %33 = xor i64 %29, %32 {
	[0x556a6632e5b0]:  %35 = xor i64 %31, %34
	}

[0x556a662f9ed0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x556a66331c10]:  %36 = add nuw nsw i64 %35, %34
	}

[0x556a662f9f60]:   %18 = xor i8 %17, 1 {
	[0x556a6630acc0]:  %20 = xor i8 %19, 1
	[0x556a663dda50]:  %59 = xor i8 %58, 1
	}

[0x556a662fa010]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x556a6630adc0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x556a662fa0a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	}

[0x556a662fa120]:   %20 = xor i64 %6, 16 {
	[0x556a6632a550]:  %22 = xor i64 %8, 16
	}

[0x556a662fa1a0]:   %21 = xor i64 %20, %9 {
	[0x556a6630b320]:  %23 = xor i64 %22, %11
	}

[0x556a662fa220]:   %22 = lshr i64 %21, 4 {
	[0x556a6630b3f0]:  %24 = lshr i64 %23, 4
	}

[0x556a662fa288]:   %23 = trunc i64 %22 to i8 {
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	}

[0x556a662fa300]:   %24 = and i8 %23, 1 {
	[0x556a6630a030]:  %26 = and i8 %25, 1
	}

[0x556a662fa3b0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x556a6630b970]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x556a662fa440]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	}

[0x556a662fa4c0]:   %26 = icmp eq i64 %9, 0 {
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	}

[0x556a662fa528]:   %27 = zext i1 %26 to i8 {
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	}

[0x556a662fa5d0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x556a6630c650]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x556a662fa660]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	}

[0x556a662fa6e0]:   %29 = lshr i64 %9, 63 {
	[0x556a66309940]:  %31 = lshr i64 %11, 63
	}

[0x556a662fa748]:   %30 = trunc i64 %29 to i8 {
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	}

[0x556a662fa7f0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x556a6632e490]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x556a662fa880]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	}

[0x556a662fa900]:   %32 = lshr i64 %6, 63 {
	[0x556a6632d510]:  %34 = lshr i64 %8, 63
	}

[0x556a662fa968]:   %65 = zext i1 %64 to i8 {
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	}

[0x556a662fa9e0]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	}

[0x556a662faa60]:   %66 = lshr i64 %50, 63 {
	[0x556a6632f630]:  %67 = lshr i64 %51, 63
	}

[0x556a662faac8]:   %67 = trunc i64 %66 to i8 {
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fab90]:   %35 = icmp eq i64 %34, 2 {
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	}

[0x556a662fabf8]:   %36 = zext i1 %35 to i8 {
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	}

[0x556a662faca0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x556a66313450]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x556a662fad30]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	}

[0x556a662fadb0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	}

[0x556a662fae30]:   %38 = add i64 %5, -12 {
	[0x556a66315b20]:  %40 = add i64 %7, -12
	}

[0x556a662faef0]:   %39 = add i64 %8, 19 {
	[0x556a66315c50]:  %41 = add i64 %10, 19
	}

[0x556a662faf70]:   store i64 %39, i64* %PC, align 8 {
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	}

[0x556a662fafd8]:   %40 = inttoptr i64 %38 to i32* {
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	}

[0x556a662fb050]:   store i32 0, i32* %40, align 4 {
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	}

[0x556a662fb0b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	}

[0x556a662fb170]:   %42 = add i64 %41, -84 {
	[0x556a66347b90]:  %44 = add i64 %43, -84
	}

[0x556a662fb1f0]:   %43 = add i64 %41, 5 {
	[0x556a663c1720]:  %45 = add i64 %43, 5
	}

[0x556a662fb258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	}

[0x556a662fb2d0]:   %45 = add i64 %44, -8 {
	[0x556a663c3f40]:  %47 = add i64 %46, -8
	}

[0x556a662fb338]:   %46 = inttoptr i64 %45 to i64* {
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	}

[0x556a662fb3b0]:   store i64 %43, i64* %46, align 8 {
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	}

[0x556a662fb430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	}

[0x556a662fb4b0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	}

[0x556a662fb5b0]:   %47 = tail call %struct.Memory* @sub_400470_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x556a663136b0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x556a662fb678]:   %48 = load i64, i64* %RSP, align 8 {
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fb6d8]:   %49 = load i64, i64* %PC, align 8 {
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	}

[0x556a662fb750]:   %50 = add i64 %48, 16 {
	[0x556a663cac20]:  %51 = add i64 %49, 16
	}

[0x556a662fb7d0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	}

[0x556a662fb890]:   %51 = icmp ugt i64 %48, -17 {
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fb8f8]:   %52 = zext i1 %51 to i8 {
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	}

[0x556a662fb970]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb9d8]:   %53 = trunc i64 %50 to i32 {
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	}

[0x556a662fba50]:   %54 = and i32 %53, 255 {
	[0x556a663d3310]:  %55 = and i32 %54, 255
	}

[0x556a662fbad0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x556a6632bfd0]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x556a662fbb98]:   %56 = trunc i32 %55 to i8 {
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	}

[0x556a662fbc10]:   %57 = and i8 %56, 1 {
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662fbc90]:   %58 = xor i8 %57, 1 {
	[0x556a6630acc0]:  %20 = xor i8 %19, 1
	[0x556a663dda50]:  %59 = xor i8 %58, 1
	}

[0x556a662fbd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	}

[0x556a662fbd90]:   %59 = xor i64 %48, 16 {
	[0x556a662c7130]:  %60 = xor i64 %49, 16
	}

[0x556a662fbe10]:   %60 = xor i64 %59, %50 {
	[0x556a6626f020]:  %61 = xor i64 %60, %51
	}

[0x556a662fbe90]:   %61 = lshr i64 %60, 4 {
	[0x556a6632c890]:  %62 = lshr i64 %61, 4
	}

[0x556a662fbef8]:   %62 = trunc i64 %61 to i8 {
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	}

[0x556a662fbf70]:   %63 = and i8 %62, 1 {
	[0x556a6632ca70]:  %64 = and i8 %63, 1
	}

[0x556a662fbff0]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	}

[0x556a662fc070]:   %64 = icmp eq i64 %50, 0 {
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	}

[0x556a662fc500]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	}

[0x556a662fc580]:   %68 = lshr i64 %48, 63 {
	[0x556a6632f7f0]:  %69 = lshr i64 %49, 63
	}

[0x556a662fc600]:   %69 = xor i64 %66, %68 {
	[0x556a6632fef0]:  %70 = xor i64 %67, %69
	}

[0x556a662fc680]:   %70 = add nuw nsw i64 %69, %66 {
	[0x556a6632efe0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x556a662fc700]:   %71 = icmp eq i64 %70, 2 {
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	}

[0x556a662fc768]:   %72 = zext i1 %71 to i8 {
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662fc7e0]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	}

[0x556a662fc860]:   %73 = add i64 %49, 5 {
	[0x556a66330a20]:  %74 = add i64 %50, 5
	}

[0x556a662fc8e0]:   store i64 %73, i64* %PC, align 8 {
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	}

[0x556a662fc960]:   %74 = add i64 %48, 24 {
	[0x556a66309a30]:  %75 = add i64 %49, 24
	}

[0x556a662fc9c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	}

[0x556a662fca28]:   %76 = load i64, i64* %75, align 8 {
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	}

[0x556a662fcaa0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x556a662fcb20]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	}

[0x556a662fcba0]:   %77 = add i64 %49, 6 {
	[0x556a663331b0]:  %78 = add i64 %50, 6
	}

[0x556a662fcc20]:   store i64 %77, i64* %PC, align 8 {
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	}

[0x556a662fcc88]:   %78 = inttoptr i64 %74 to i64* {
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662fcce8]:   %79 = load i64, i64* %78, align 8 {
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	}

[0x556a662fcd60]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	}

[0x556a662fcde0]:   %80 = add i64 %48, 32 {
	[0x556a66333e00]:  %81 = add i64 %49, 32
	}

[0x556a662fce60]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	}

[0x556a662fcec8]:   ret %struct.Memory* %47 {
	[0x556a663110c8]:  ret %struct.Memory.31* %call2_4004c4
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x556a662e36f0]: block_4004b0 {
	[0x556a66328320]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x556a663dda50]:   %59 = xor i8 %58, 1
From the pot matches of: [0x556a662f9f60]:   %18 = xor i8 %17, 1


Uprime : [0x556a662fa0a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x556a6630aea0]:   store i8 %20, i8* %21, align 1


Adj: [0x556a662c7590]:   store i8 %59, i8* %21, align 1


Removing: [0x556a6630acc0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x556a662fbc90]:   %58 = xor i8 %57, 1


Uprime : [0x556a662fbd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x556a662c7590]:   store i8 %59, i8* %21, align 1


Adj: [0x556a6630aea0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x556a66343eb0]:   %58 = and i8 %57, 1
From the pot matches of: [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime : [0x556a662f9f60]:   %18 = xor i8 %17, 1


Uprime Matches: [0x556a6630acc0]:   %20 = xor i8 %19, 1


Adj: [0x556a663dda50]:   %59 = xor i8 %58, 1


Removing: [0x556a66329cd0]:   %19 = and i8 %18, 1
From the pot matches of: [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime : [0x556a662fbc90]:   %58 = xor i8 %57, 1


Uprime Matches: [0x556a663dda50]:   %59 = xor i8 %58, 1


Adj: [0x556a6630acc0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x556a6630e728]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x556a662f9dd8]:   %16 = trunc i32 %15 to i8


Uprime : [0x556a662f9810]:   %17 = and i8 %16, 1


Uprime Matches: [0x556a66329cd0]:   %19 = and i8 %18, 1


Adj: [0x556a66343eb0]:   %58 = and i8 %57, 1


Removing: [0x556a66305808]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x556a662fbb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x556a662fbc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x556a66343eb0]:   %58 = and i8 %57, 1


Adj: [0x556a66329cd0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x556a662e3610]: %struct.State* %0 {
	[0x556a6630f450]:%struct.State.0* %0
	}

[0x556a662e3650]: i64 %1 {
	[0x556a66337c60]:i64 %1
	}

[0x556a662e3690]: %struct.Memory* %2 {
	[0x556a66315670]:%struct.Memory.31* %2
	}

[0x556a662e3838]:   %3 = load i64, i64* %RBP, align 8 {
	[0x556a66271508]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x556a662e3910]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x556a6628afe0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x556a662e3a00]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x556a662af4a0]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x556a662f92e0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x556a662aed20]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x556a662f93f0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x556a662ae070]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x556a662f94a0]:   %4 = add i64 %1, 1 {
	[0x556a662628e0]:  %5 = add i64 %1, 1
	}

[0x556a662f9570]:   store i64 %4, i64* %PC, align 8 {
	[0x556a663084a0]:  store i64 %5, i64* %3, align 8
	}

[0x556a662f95d8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a66274d58]:  %7 = load i64, i64* %6, align 8
	}

[0x556a662f9650]:   %6 = add i64 %5, -8 {
	[0x556a663085b0]:  %8 = add i64 %7, -8
	}

[0x556a662f96b8]:   %7 = inttoptr i64 %6 to i64* {
	[0x556a662775a8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x556a662f9730]:   store i64 %3, i64* %7, align 8 {
	[0x556a66309570]:  store i64 %4, i64* %9, align 8
	}

[0x556a662f9798]:   %8 = load i64, i64* %PC, align 8 {
	[0x556a662fc1d8]:  %10 = load i64, i64* %3, align 8
	}

[0x556a662f9810]:   %17 = and i8 %16, 1 {
	[0x556a66329cd0]:  %19 = and i8 %18, 1
	}

[0x556a662f98a0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x556a66307b00]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x556a662f9920]:   %9 = add i64 %5, -24 {
	[0x556a6630a330]:  %11 = add i64 %7, -24
	}

[0x556a662f99a0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a6630a730]:  store i64 %11, i64* %6, align 8
	}

[0x556a662f9a20]:   %10 = icmp ult i64 %6, 16 {
	[0x556a6630a840]:  %12 = icmp ult i64 %8, 16
	}

[0x556a662f9a88]:   %11 = zext i1 %10 to i8 {
	[0x556a662614e8]:  %13 = zext i1 %12 to i8
	}

[0x556a662f9b30]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x556a66308100]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x556a662f9bc0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x556a6630a950]:  store i8 %13, i8* %14, align 1
	}

[0x556a662f9c28]:   %13 = trunc i64 %9 to i32 {
	[0x556a66305778]:  %15 = trunc i64 %11 to i32
	}

[0x556a662f9ca0]:   %14 = and i32 %13, 255 {
	[0x556a6630aa60]:  %16 = and i32 %15, 255
	}

[0x556a662f9d60]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x556a6632c240]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x556a662f9dd8]:   %16 = trunc i32 %15 to i8 {
	[0x556a66305808]:  %18 = trunc i32 %17 to i8
	}

[0x556a662f9e50]:   %33 = xor i64 %29, %32 {
	[0x556a6632e5b0]:  %35 = xor i64 %31, %34
	}

[0x556a662f9ed0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x556a66331c10]:  %36 = add nuw nsw i64 %35, %34
	}

[0x556a662f9f60]:   %18 = xor i8 %17, 1 {
	[0x556a6630acc0]:  %20 = xor i8 %19, 1
	}

[0x556a662fa010]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x556a6630adc0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x556a662fa0a0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x556a6630aea0]:  store i8 %20, i8* %21, align 1
	}

[0x556a662fa120]:   %20 = xor i64 %6, 16 {
	[0x556a6632a550]:  %22 = xor i64 %8, 16
	}

[0x556a662fa1a0]:   %21 = xor i64 %20, %9 {
	[0x556a6630b320]:  %23 = xor i64 %22, %11
	}

[0x556a662fa220]:   %22 = lshr i64 %21, 4 {
	[0x556a6630b3f0]:  %24 = lshr i64 %23, 4
	}

[0x556a662fa288]:   %23 = trunc i64 %22 to i8 {
	[0x556a66307a48]:  %25 = trunc i64 %24 to i8
	}

[0x556a662fa300]:   %24 = and i8 %23, 1 {
	[0x556a6630a030]:  %26 = and i8 %25, 1
	}

[0x556a662fa3b0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x556a6630b970]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x556a662fa440]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x556a6630bed0]:  store i8 %26, i8* %27, align 1
	}

[0x556a662fa4c0]:   %26 = icmp eq i64 %9, 0 {
	[0x556a6630bfe0]:  %28 = icmp eq i64 %11, 0
	}

[0x556a662fa528]:   %27 = zext i1 %26 to i8 {
	[0x556a663071a8]:  %29 = zext i1 %28 to i8
	}

[0x556a662fa5d0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x556a6630c650]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x556a662fa660]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x556a6632c960]:  store i8 %29, i8* %30, align 1
	}

[0x556a662fa6e0]:   %29 = lshr i64 %9, 63 {
	[0x556a66309940]:  %31 = lshr i64 %11, 63
	}

[0x556a662fa748]:   %30 = trunc i64 %29 to i8 {
	[0x556a6630ce38]:  %32 = trunc i64 %31 to i8
	}

[0x556a662fa7f0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x556a6632e490]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x556a662fa880]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x556a6632d620]:  store i8 %32, i8* %33, align 1
	}

[0x556a662fa900]:   %32 = lshr i64 %6, 63 {
	[0x556a6632d510]:  %34 = lshr i64 %8, 63
	}

[0x556a662fa968]:   %65 = zext i1 %64 to i8 {
	[0x556a6630f7d8]:  %66 = zext i1 %65 to i8
	}

[0x556a662fa9e0]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x556a6632d8d0]:  store i8 %66, i8* %30, align 1
	}

[0x556a662faa60]:   %66 = lshr i64 %50, 63 {
	[0x556a6632f630]:  %67 = lshr i64 %51, 63
	}

[0x556a662faac8]:   %67 = trunc i64 %66 to i8 {
	[0x556a6630fb68]:  %68 = trunc i64 %67 to i8
	}

[0x556a662fab90]:   %35 = icmp eq i64 %34, 2 {
	[0x556a6630f0a0]:  %37 = icmp eq i64 %36, 2
	}

[0x556a662fabf8]:   %36 = zext i1 %35 to i8 {
	[0x556a6630cf68]:  %38 = zext i1 %37 to i8
	}

[0x556a662faca0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x556a66313450]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x556a662fad30]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x556a663158c0]:  store i8 %38, i8* %39, align 1
	}

[0x556a662fadb0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x556a663159f0]:  store i64 10, i64* %RDI.i, align 8
	}

[0x556a662fae30]:   %38 = add i64 %5, -12 {
	[0x556a66315b20]:  %40 = add i64 %7, -12
	}

[0x556a662faef0]:   %39 = add i64 %8, 19 {
	[0x556a66315c50]:  %41 = add i64 %10, 19
	}

[0x556a662faf70]:   store i64 %39, i64* %PC, align 8 {
	[0x556a66349b80]:  store i64 %41, i64* %3, align 8
	}

[0x556a662fafd8]:   %40 = inttoptr i64 %38 to i32* {
	[0x556a6630d688]:  %42 = inttoptr i64 %40 to i32*
	}

[0x556a662fb050]:   store i32 0, i32* %40, align 4 {
	[0x556a6634ba60]:  store i32 0, i32* %42, align 4
	}

[0x556a662fb0b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x556a6630d7b8]:  %43 = load i64, i64* %3, align 8
	}

[0x556a662fb170]:   %42 = add i64 %41, -84 {
	[0x556a66347b90]:  %44 = add i64 %43, -84
	}

[0x556a662fb1f0]:   %43 = add i64 %41, 5 {
	[0x556a663c1720]:  %45 = add i64 %43, 5
	}

[0x556a662fb258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a6630d8e8]:  %46 = load i64, i64* %6, align 8
	}

[0x556a662fb2d0]:   %45 = add i64 %44, -8 {
	[0x556a663c3f40]:  %47 = add i64 %46, -8
	}

[0x556a662fb338]:   %46 = inttoptr i64 %45 to i64* {
	[0x556a6630da18]:  %48 = inttoptr i64 %47 to i64*
	}

[0x556a662fb3b0]:   store i64 %43, i64* %46, align 8 {
	[0x556a663c2a30]:  store i64 %45, i64* %48, align 8
	}

[0x556a662fb430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a663c9480]:  store i64 %47, i64* %6, align 8
	}

[0x556a662fb4b0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x556a663c86b0]:  store i64 %44, i64* %3, align 8
	}

[0x556a662fb5b0]:   %47 = tail call %struct.Memory* @sub_400470_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x556a663136b0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x556a662fb678]:   %48 = load i64, i64* %RSP, align 8 {
	[0x556a66330f18]:  %49 = load i64, i64* %6, align 8
	}

[0x556a662fb6d8]:   %49 = load i64, i64* %PC, align 8 {
	[0x556a6630e398]:  %50 = load i64, i64* %3, align 8
	}

[0x556a662fb750]:   %50 = add i64 %48, 16 {
	[0x556a663cac20]:  %51 = add i64 %49, 16
	}

[0x556a662fb7d0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a663cd410]:  store i64 %51, i64* %6, align 8
	}

[0x556a662fb890]:   %51 = icmp ugt i64 %48, -17 {
	[0x556a663cbf70]:  %52 = icmp ugt i64 %49, -17
	}

[0x556a662fb8f8]:   %52 = zext i1 %51 to i8 {
	[0x556a6630e4c8]:  %53 = zext i1 %52 to i8
	}

[0x556a662fb970]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x556a663cef40]:  store i8 %53, i8* %14, align 1
	}

[0x556a662fb9d8]:   %53 = trunc i64 %50 to i32 {
	[0x556a6630e5f8]:  %54 = trunc i64 %51 to i32
	}

[0x556a662fba50]:   %54 = and i32 %53, 255 {
	[0x556a663d3310]:  %55 = and i32 %54, 255
	}

[0x556a662fbad0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x556a6632bfd0]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x556a662fbb98]:   %56 = trunc i32 %55 to i8 {
	[0x556a6630e728]:  %57 = trunc i32 %56 to i8
	}

[0x556a662fbc10]:   %57 = and i8 %56, 1 {
	[0x556a66343eb0]:  %58 = and i8 %57, 1
	}

[0x556a662fbc90]:   %58 = xor i8 %57, 1 {
	[0x556a663dda50]:  %59 = xor i8 %58, 1
	}

[0x556a662fbd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x556a662c7590]:  store i8 %59, i8* %21, align 1
	}

[0x556a662fbd90]:   %59 = xor i64 %48, 16 {
	[0x556a662c7130]:  %60 = xor i64 %49, 16
	}

[0x556a662fbe10]:   %60 = xor i64 %59, %50 {
	[0x556a6626f020]:  %61 = xor i64 %60, %51
	}

[0x556a662fbe90]:   %61 = lshr i64 %60, 4 {
	[0x556a6632c890]:  %62 = lshr i64 %61, 4
	}

[0x556a662fbef8]:   %62 = trunc i64 %61 to i8 {
	[0x556a6630c538]:  %63 = trunc i64 %62 to i8
	}

[0x556a662fbf70]:   %63 = and i8 %62, 1 {
	[0x556a6632ca70]:  %64 = and i8 %63, 1
	}

[0x556a662fbff0]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x556a66309c10]:  store i8 %64, i8* %27, align 1
	}

[0x556a662fc070]:   %64 = icmp eq i64 %50, 0 {
	[0x556a6632d7e0]:  %65 = icmp eq i64 %51, 0
	}

[0x556a662fc500]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x556a6632f720]:  store i8 %68, i8* %33, align 1
	}

[0x556a662fc580]:   %68 = lshr i64 %48, 63 {
	[0x556a6632f7f0]:  %69 = lshr i64 %49, 63
	}

[0x556a662fc600]:   %69 = xor i64 %66, %68 {
	[0x556a6632fef0]:  %70 = xor i64 %67, %69
	}

[0x556a662fc680]:   %70 = add nuw nsw i64 %69, %66 {
	[0x556a6632efe0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x556a662fc700]:   %71 = icmp eq i64 %70, 2 {
	[0x556a663305d0]:  %72 = icmp eq i64 %71, 2
	}

[0x556a662fc768]:   %72 = zext i1 %71 to i8 {
	[0x556a66310158]:  %73 = zext i1 %72 to i8
	}

[0x556a662fc7e0]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x556a66330780]:  store i8 %73, i8* %39, align 1
	}

[0x556a662fc860]:   %73 = add i64 %49, 5 {
	[0x556a66330a20]:  %74 = add i64 %50, 5
	}

[0x556a662fc8e0]:   store i64 %73, i64* %PC, align 8 {
	[0x556a66330b20]:  store i64 %74, i64* %3, align 8
	}

[0x556a662fc960]:   %74 = add i64 %48, 24 {
	[0x556a66309a30]:  %75 = add i64 %49, 24
	}

[0x556a662fc9c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x556a66310288]:  %76 = inttoptr i64 %51 to i64*
	}

[0x556a662fca28]:   %76 = load i64, i64* %75, align 8 {
	[0x556a66310748]:  %77 = load i64, i64* %76, align 8
	}

[0x556a662fcaa0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x556a66331220]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x556a662fcb20]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a66307e50]:  store i64 %75, i64* %6, align 8
	}

[0x556a662fcba0]:   %77 = add i64 %49, 6 {
	[0x556a663331b0]:  %78 = add i64 %50, 6
	}

[0x556a662fcc20]:   store i64 %77, i64* %PC, align 8 {
	[0x556a663336c0]:  store i64 %78, i64* %3, align 8
	}

[0x556a662fcc88]:   %78 = inttoptr i64 %74 to i64* {
	[0x556a663109a8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x556a662fcce8]:   %79 = load i64, i64* %78, align 8 {
	[0x556a66310ad8]:  %80 = load i64, i64* %79, align 8
	}

[0x556a662fcd60]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x556a66333d10]:  store i64 %80, i64* %3, align 8
	}

[0x556a662fcde0]:   %80 = add i64 %48, 32 {
	[0x556a66333e00]:  %81 = add i64 %49, 32
	}

[0x556a662fce60]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x556a6632a730]:  store i64 %81, i64* %6, align 8
	}

[0x556a662fcec8]:   ret %struct.Memory* %47 {
	[0x556a663110c8]:  ret %struct.Memory.31* %call2_4004c4
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x556a662e36f0]: block_4004b0 {
	[0x556a66328320]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
