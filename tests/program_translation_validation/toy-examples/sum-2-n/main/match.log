Matching sub_4004d0_main Vs main


[Info] Retrieve Potential Matches...
[0x5585af2b31a0]:   %29 = lshr i64 %9, 63 {
	[0x5585af2d0150]:  %69 = lshr i64 %49, 63
	[0x5585af2d0480]:  %67 = lshr i64 %51, 63
	[0x5585af33f010]:  %34 = lshr i64 %8, 63
	[0x5585af33f230]:  %31 = lshr i64 %11, 63
	}

[0x5585af2b3208]:   %30 = trunc i64 %29 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af2b32b0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5585af2cec40]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5585af2b3340]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b33c0]:   %32 = lshr i64 %6, 63 {
	[0x5585af2d0150]:  %69 = lshr i64 %49, 63
	[0x5585af2d0480]:  %67 = lshr i64 %51, 63
	[0x5585af33f010]:  %34 = lshr i64 %8, 63
	[0x5585af33f230]:  %31 = lshr i64 %11, 63
	}

[0x5585af2b3440]:   %33 = xor i64 %29, %32 {
	[0x5585af2cf3e0]:  %61 = xor i64 %60, %51
	[0x5585af2d2830]:  %70 = xor i64 %67, %69
	[0x5585af33dab0]:  %35 = xor i64 %31, %34
	[0x5585af33e9b0]:  %23 = xor i64 %22, %11
	}

[0x5585af2b34c0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5585af2cd940]:  %36 = add nuw nsw i64 %35, %34
	[0x5585af2d51f0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5585af2b3540]:   %35 = icmp eq i64 %34, 2 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af2b35a8]:   %36 = zext i1 %35 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af2b3650]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5585af2cd520]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5585af2b36e0]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b3760]:   store i64 10, i64* %RDI, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b37e0]:   %38 = add i64 %5, -12 {
	[0x5585af2cdc00]:  %40 = add i64 %7, -12
	}

[0x5585af2b38a0]:   %39 = add i64 %8, 19 {
	[0x5585af33f780]:  %41 = add i64 %10, 19
	}

[0x5585af2b3920]:   store i64 %39, i64* %PC, align 8 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b3988]:   %40 = inttoptr i64 %38 to i32* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af2b3a00]:   store i32 0, i32* %40, align 4 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b3a68]:   %41 = load i64, i64* %PC, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b3b20]:   %42 = add i64 %41, -84 {
	[0x5585af33fab0]:  %44 = add i64 %43, -84
	}

[0x5585af2b3ba0]:   %43 = add i64 %41, 5 {
	[0x5585af2cf130]:  %45 = add i64 %43, 5
	[0x5585af2d4d60]:  %74 = add i64 %50, 5
	}

[0x5585af2b3c08]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b3c80]:   %45 = add i64 %44, -8 {
	[0x5585af2ca4b0]:  %8 = add i64 %7, -8
	[0x5585af33f9e0]:  %47 = add i64 %46, -8
	}

[0x5585af2b3ce8]:   %46 = inttoptr i64 %45 to i64* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af2b3d60]:   store i64 %43, i64* %46, align 8 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b3de0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b3e60]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b3f40]:   %47 = tail call %struct.Memory* @sub_400490_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5585af2ca5c0]:  %call2_4004e4 = tail call %struct.Memory.32* @sub_400490.sum_2_n(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x5585af3134a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5585af356850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5585af2b4008]:   %48 = load i64, i64* %RSP, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b4068]:   %49 = load i64, i64* %PC, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b40e0]:   %50 = add i64 %48, 16 {
	[0x5585af33fbc0]:  %51 = add i64 %49, 16
	}

[0x5585af2b4160]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b4220]:   %51 = icmp ugt i64 %48, -17 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af2b4288]:   %52 = zext i1 %51 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af2b4300]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b4368]:   %53 = trunc i64 %50 to i32 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af2b43e0]:   %54 = and i32 %53, 255 {
	[0x5585af2d09a0]:  %55 = and i32 %54, 255
	[0x5585af33d8b0]:  %16 = and i32 %15, 255
	}

[0x5585af2b4498]:   %56 = trunc i32 %55 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af2b4510]:   %57 = and i8 %56, 1 {
	[0x5585af2cc400]:  %26 = and i8 %25, 1
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	[0x5585af2d03b0]:  %64 = and i8 %63, 1
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af2b4590]:   %58 = xor i8 %57, 1 {
	[0x5585af2cf8c0]:  %59 = xor i8 %58, 1
	[0x5585af33ece0]:  %20 = xor i8 %19, 1
	}

[0x5585af2b4610]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b4690]:   %59 = xor i64 %48, 16 {
	[0x5585af2cc020]:  %22 = xor i64 %8, 16
	[0x5585af2cf530]:  %60 = xor i64 %49, 16
	}

[0x5585af2b4710]:   %60 = xor i64 %59, %50 {
	[0x5585af2cf3e0]:  %61 = xor i64 %60, %51
	[0x5585af2d2830]:  %70 = xor i64 %67, %69
	[0x5585af33dab0]:  %35 = xor i64 %31, %34
	[0x5585af33e9b0]:  %23 = xor i64 %22, %11
	}

[0x5585af2b4790]:   %61 = lshr i64 %60, 4 {
	[0x5585af2cbad0]:  %24 = lshr i64 %23, 4
	[0x5585af2d0040]:  %62 = lshr i64 %61, 4
	}

[0x5585af2b47f8]:   %62 = trunc i64 %61 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af2b4870]:   %63 = and i8 %62, 1 {
	[0x5585af2cc400]:  %26 = and i8 %25, 1
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	[0x5585af2d03b0]:  %64 = and i8 %63, 1
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af2b48f0]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b4970]:   %64 = icmp eq i64 %50, 0 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af2b4de8]:   %65 = zext i1 %64 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af2b4e60]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b4ee0]:   %66 = lshr i64 %50, 63 {
	[0x5585af2d0150]:  %69 = lshr i64 %49, 63
	[0x5585af2d0480]:  %67 = lshr i64 %51, 63
	[0x5585af33f010]:  %34 = lshr i64 %8, 63
	[0x5585af33f230]:  %31 = lshr i64 %11, 63
	}

[0x5585af2b4f48]:   %67 = trunc i64 %66 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af2b4fc0]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b5040]:   %68 = lshr i64 %48, 63 {
	[0x5585af2d0150]:  %69 = lshr i64 %49, 63
	[0x5585af2d0480]:  %67 = lshr i64 %51, 63
	[0x5585af33f010]:  %34 = lshr i64 %8, 63
	[0x5585af33f230]:  %31 = lshr i64 %11, 63
	}

[0x5585af2b50c0]:   %69 = xor i64 %66, %68 {
	[0x5585af2cf3e0]:  %61 = xor i64 %60, %51
	[0x5585af2d2830]:  %70 = xor i64 %67, %69
	[0x5585af33dab0]:  %35 = xor i64 %31, %34
	[0x5585af33e9b0]:  %23 = xor i64 %22, %11
	}

[0x5585af2b5140]:   %70 = add nuw nsw i64 %69, %66 {
	[0x5585af2cd940]:  %36 = add nuw nsw i64 %35, %34
	[0x5585af2d51f0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5585af2b51c0]:   %71 = icmp eq i64 %70, 2 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af2b5228]:   %72 = zext i1 %71 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af2b52a0]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b5320]:   %73 = add i64 %49, 5 {
	[0x5585af2cf130]:  %45 = add i64 %43, 5
	[0x5585af2d4d60]:  %74 = add i64 %50, 5
	}

[0x5585af2b53a0]:   store i64 %73, i64* %PC, align 8 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b5460]:   %74 = add i64 %48, 24 {
	[0x5585af2d4aa0]:  %75 = add i64 %49, 24
	}

[0x5585af2b54c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af2b5528]:   %76 = load i64, i64* %75, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b55a0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b5620]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b56a0]:   %77 = add i64 %49, 6 {
	[0x5585af2d77e0]:  %78 = add i64 %50, 6
	}

[0x5585af2b5720]:   store i64 %77, i64* %PC, align 8 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b5788]:   %78 = inttoptr i64 %74 to i64* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af2b57e8]:   %79 = load i64, i64* %78, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b5860]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b58e0]:   %80 = add i64 %48, 32 {
	[0x5585af2cd010]:  %81 = add i64 %49, 32
	}

[0x5585af2b5960]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b59c8]:   ret %struct.Memory* %47 {
	[0x5585af2d6db8]:  ret %struct.Memory.32* %call2_4004e4
	}

[0x5585af3012f0]: %struct.State* %0 {
	[0x5585af33d960]:%struct.State.1* %0
	}

[0x5585af301330]: i64 %1 {
	[0x5585af2cd360]:i64 %1
	}

[0x5585af301370]: %struct.Memory* %2 {
	[0x5585af2ce340]:%struct.Memory.32* %2
	}

[0x5585af301528]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af301600]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5585af32b560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5585af3016f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5585af32efd0]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5585af3017e0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5585af32f330]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5585af3018f0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5585af32f520]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5585af3019a0]:   %4 = add i64 %1, 1 {
	[0x5585af338fd0]:  %5 = add i64 %1, 1
	}

[0x5585af301a70]:   store i64 %4, i64* %PC, align 8 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af301ad8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af301b50]:   %6 = add i64 %5, -8 {
	[0x5585af2ca4b0]:  %8 = add i64 %7, -8
	[0x5585af33f9e0]:  %47 = add i64 %46, -8
	}

[0x5585af301bb8]:   %7 = inttoptr i64 %6 to i64* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af301c30]:   store i64 %3, i64* %7, align 8 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af301c98]:   %8 = load i64, i64* %PC, align 8 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af301d10]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x5585af2ca5c0]:  %call2_4004e4 = tail call %struct.Memory.32* @sub_400490.sum_2_n(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x5585af3134a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5585af356850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5585af301da0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af301e60]:   %9 = add i64 %5, -24 {
	[0x5585af2c9c00]:  %11 = add i64 %7, -24
	}

[0x5585af301ee0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af301f60]:   %10 = icmp ult i64 %6, 16 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af301fc8]:   %11 = zext i1 %10 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af302070]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5585af414060]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x5585af302100]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af302168]:   %13 = trunc i64 %9 to i32 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af3021e0]:   %14 = and i32 %13, 255 {
	[0x5585af2d09a0]:  %55 = and i32 %54, 255
	[0x5585af33d8b0]:  %16 = and i32 %15, 255
	}

[0x5585af3022a0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5585af2ca5c0]:  %call2_4004e4 = tail call %struct.Memory.32* @sub_400490.sum_2_n(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x5585af3134a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5585af356850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5585af302318]:   %16 = trunc i32 %15 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af302390]:   %17 = and i8 %16, 1 {
	[0x5585af2cc400]:  %26 = and i8 %25, 1
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	[0x5585af2d03b0]:  %64 = and i8 %63, 1
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af302410]:   %18 = xor i8 %17, 1 {
	[0x5585af2cf8c0]:  %59 = xor i8 %58, 1
	[0x5585af33ece0]:  %20 = xor i8 %19, 1
	}

[0x5585af3024c0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5585af373f70]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5585af302550]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af3025d0]:   %20 = xor i64 %6, 16 {
	[0x5585af2cc020]:  %22 = xor i64 %8, 16
	[0x5585af2cf530]:  %60 = xor i64 %49, 16
	}

[0x5585af302650]:   %21 = xor i64 %20, %9 {
	[0x5585af2cf3e0]:  %61 = xor i64 %60, %51
	[0x5585af2d2830]:  %70 = xor i64 %67, %69
	[0x5585af33dab0]:  %35 = xor i64 %31, %34
	[0x5585af33e9b0]:  %23 = xor i64 %22, %11
	}

[0x5585af3026d0]:   %22 = lshr i64 %21, 4 {
	[0x5585af2cbad0]:  %24 = lshr i64 %23, 4
	[0x5585af2d0040]:  %62 = lshr i64 %61, 4
	}

[0x5585af302738]:   %23 = trunc i64 %22 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af3027b0]:   %24 = and i8 %23, 1 {
	[0x5585af2cc400]:  %26 = and i8 %25, 1
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	[0x5585af2d03b0]:  %64 = and i8 %63, 1
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af302860]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5585af2d24b0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5585af3028f0]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af302970]:   %26 = icmp eq i64 %9, 0 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af3029d8]:   %27 = zext i1 %26 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af302a80]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5585af2ceeb0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5585af302b10]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5585af2cc288]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x5585af301ad8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5585af2b37e0]:   %38 = add i64 %5, -12


Uprime Matches: [0x5585af2cdc00]:   %40 = add i64 %7, -12


Adj: [0x5585af33f9e0]:   %47 = add i64 %46, -8


Removing: [0x5585af33d078]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x5585af301ad8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5585af2b37e0]:   %38 = add i64 %5, -12


Uprime Matches: [0x5585af2cdc00]:   %40 = add i64 %7, -12


Adj: [0x5585af2cd010]:   %81 = add i64 %49, 32
[0x5585af2cf280]:   %52 = icmp ugt i64 %49, -17
[0x5585af2cf530]:   %60 = xor i64 %49, 16
[0x5585af2d0150]:   %69 = lshr i64 %49, 63
[0x5585af2d4aa0]:   %75 = add i64 %49, 24
[0x5585af33fbc0]:   %51 = add i64 %49, 16


Removing: [0x5585af33cc68]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x5585af301c98]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x5585af2b38a0]:   %39 = add i64 %8, 19


Uprime Matches: [0x5585af33f780]:   %41 = add i64 %10, 19


Adj: [0x5585af2d4d60]:   %74 = add i64 %50, 5
[0x5585af2d77e0]:   %78 = add i64 %50, 6


Removing: [0x5585af33dd48]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x5585af301c98]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x5585af2b38a0]:   %39 = add i64 %8, 19


Uprime Matches: [0x5585af33f780]:   %41 = add i64 %10, 19


Adj: [0x5585af2cf130]:   %45 = add i64 %43, 5
[0x5585af33fab0]:   %44 = add i64 %43, -84


Removing: [0x5585af2f1d88]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af33dc00]:   store i8 %32, i8* %33, align 1


Removing: [0x5585af33fe28]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2d09a0]:   %55 = and i32 %54, 255


Removing: [0x5585af340e88]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2d1aa0]:   store i8 %68, i8* %33, align 1


Removing: [0x5585af36f748]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af33d8b0]:   %16 = and i32 %15, 255


Removing: [0x5585af2cc400]:   %26 = and i8 %25, 1
From the pot matches of: [0x5585af302390]:   %17 = and i8 %16, 1


Uprime : [0x5585af302410]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1
[0x5585af33ece0]:   %20 = xor i8 %19, 1


Adj: [0x5585af33f450]:   store i8 %26, i8* %27, align 1


Removing: [0x5585af2d03b0]:   %64 = and i8 %63, 1
From the pot matches of: [0x5585af302390]:   %17 = and i8 %16, 1


Uprime : [0x5585af302410]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1
[0x5585af33ece0]:   %20 = xor i8 %19, 1


Adj: [0x5585af2d2070]:   store i8 %64, i8* %27, align 1


Removing: [0x5585af339af8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5585af2b3a68]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x5585af2b3ba0]:   %43 = add i64 %41, 5


Uprime Matches: [0x5585af2cf130]:   %45 = add i64 %43, 5
[0x5585af2d4d60]:   %74 = add i64 %50, 5


Adj: [0x5585af33f780]:   %41 = add i64 %10, 19


Removing: [0x5585af33cc68]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x5585af2b3a68]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x5585af2b3b20]:   %42 = add i64 %41, -84


Uprime Matches: [0x5585af33fab0]:   %44 = add i64 %43, -84


Adj: [0x5585af2d4d60]:   %74 = add i64 %50, 5
[0x5585af2d77e0]:   %78 = add i64 %50, 6


Removing: [0x5585af33d078]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x5585af2b3c08]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5585af2b3c80]:   %45 = add i64 %44, -8


Uprime Matches: [0x5585af2ca4b0]:   %8 = add i64 %7, -8
[0x5585af33f9e0]:   %47 = add i64 %46, -8


Adj: [0x5585af2cd010]:   %81 = add i64 %49, 32
[0x5585af2cf280]:   %52 = icmp ugt i64 %49, -17
[0x5585af2cf530]:   %60 = xor i64 %49, 16
[0x5585af2d0150]:   %69 = lshr i64 %49, 63
[0x5585af2d4aa0]:   %75 = add i64 %49, 24
[0x5585af33fbc0]:   %51 = add i64 %49, 16


Removing: [0x5585af2ca4b0]:   %8 = add i64 %7, -8
From the pot matches of: [0x5585af2b3c80]:   %45 = add i64 %44, -8


Uprime : [0x5585af2b3de0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x5585af2ccab0]:   store i64 %81, i64* %6, align 8
[0x5585af2ce210]:   store i64 %51, i64* %6, align 8
[0x5585af2ce630]:   store i64 %47, i64* %6, align 8
[0x5585af2d54b0]:   store i64 %75, i64* %6, align 8
[0x5585af33d6b0]:   store i64 %11, i64* %6, align 8


Adj: [0x5585af2b2ff8]:   %9 = inttoptr i64 %8 to i64*
[0x5585af2ca120]:   store i64 %8, i64* %RBP.i, align 8
[0x5585af2cc020]:   %22 = xor i64 %8, 16
[0x5585af33bc70]:   %12 = icmp ult i64 %8, 16
[0x5585af33f010]:   %34 = lshr i64 %8, 63


Removing: [0x5585af2cc288]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x5585af2b4008]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x5585af2b58e0]:   %80 = add i64 %48, 32


Uprime Matches: [0x5585af2cd010]:   %81 = add i64 %49, 32


Adj: [0x5585af33f9e0]:   %47 = add i64 %46, -8


Removing: [0x5585af32c7f8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5585af2b4008]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x5585af2b58e0]:   %80 = add i64 %48, 32


Uprime Matches: [0x5585af2cd010]:   %81 = add i64 %49, 32


Adj: [0x5585af2c9c00]:   %11 = add i64 %7, -24
[0x5585af2ca4b0]:   %8 = add i64 %7, -8
[0x5585af2cdc00]:   %40 = add i64 %7, -12


Removing: [0x5585af339af8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5585af2b4068]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x5585af2b56a0]:   %77 = add i64 %49, 6


Uprime Matches: [0x5585af2d77e0]:   %78 = add i64 %50, 6


Adj: [0x5585af33f780]:   %41 = add i64 %10, 19


Removing: [0x5585af33dd48]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x5585af2b4068]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x5585af2b56a0]:   %77 = add i64 %49, 6


Uprime Matches: [0x5585af2d77e0]:   %78 = add i64 %50, 6


Adj: [0x5585af2cf130]:   %45 = add i64 %43, 5
[0x5585af33fab0]:   %44 = add i64 %43, -84


Removing: [0x5585af2f1d88]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af33dc00]:   store i8 %32, i8* %33, align 1


Removing: [0x5585af33fe28]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2d09a0]:   %55 = and i32 %54, 255


Removing: [0x5585af340e88]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2d1aa0]:   store i8 %68, i8* %33, align 1


Removing: [0x5585af36f748]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cc400]:   %26 = and i8 %25, 1
[0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af2d03b0]:   %64 = and i8 %63, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af33d8b0]:   %16 = and i32 %15, 255


Removing: [0x5585af2cc400]:   %26 = and i8 %25, 1
From the pot matches of: [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime : [0x5585af2b4590]:   %58 = xor i8 %57, 1


Uprime Matches: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1
[0x5585af33ece0]:   %20 = xor i8 %19, 1


Adj: [0x5585af33f450]:   store i8 %26, i8* %27, align 1


Removing: [0x5585af2d03b0]:   %64 = and i8 %63, 1
From the pot matches of: [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime : [0x5585af2b4590]:   %58 = xor i8 %57, 1


Uprime Matches: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1
[0x5585af33ece0]:   %20 = xor i8 %19, 1


Adj: [0x5585af2d2070]:   store i8 %64, i8* %27, align 1

Round: 1

Removing: [0x5585af2e5d78]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2cc400]:   %26 = and i8 %25, 1


Removing: [0x5585af341478]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2d03b0]:   %64 = and i8 %63, 1


Removing: [0x5585af32c7f8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5585af2b3c08]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x5585af2b3c80]:   %45 = add i64 %44, -8


Uprime Matches: [0x5585af33f9e0]:   %47 = add i64 %46, -8


Adj: [0x5585af2c9c00]:   %11 = add i64 %7, -24
[0x5585af2ca4b0]:   %8 = add i64 %7, -8
[0x5585af2cdc00]:   %40 = add i64 %7, -12


Removing: [0x5585af2e5d78]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2cc400]:   %26 = and i8 %25, 1


Removing: [0x5585af341478]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cfac0]:   %58 = and i8 %57, 1
[0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2d03b0]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x5585af2b31a0]:   %29 = lshr i64 %9, 63 {
	[0x5585af33f230]:  %31 = lshr i64 %11, 63
	}

[0x5585af2b3208]:   %30 = trunc i64 %29 to i8 {
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	}

[0x5585af2b32b0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5585af2cec40]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5585af2b3340]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	}

[0x5585af2b33c0]:   %32 = lshr i64 %6, 63 {
	[0x5585af33f010]:  %34 = lshr i64 %8, 63
	}

[0x5585af2b3440]:   %33 = xor i64 %29, %32 {
	[0x5585af33dab0]:  %35 = xor i64 %31, %34
	}

[0x5585af2b34c0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5585af2cd940]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5585af2b3540]:   %35 = icmp eq i64 %34, 2 {
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	}

[0x5585af2b35a8]:   %36 = zext i1 %35 to i8 {
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	}

[0x5585af2b3650]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5585af2cd520]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5585af2b36e0]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	}

[0x5585af2b3760]:   store i64 10, i64* %RDI, align 8, !tbaa !1261 {
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b37e0]:   %38 = add i64 %5, -12 {
	[0x5585af2cdc00]:  %40 = add i64 %7, -12
	}

[0x5585af2b38a0]:   %39 = add i64 %8, 19 {
	[0x5585af33f780]:  %41 = add i64 %10, 19
	}

[0x5585af2b3920]:   store i64 %39, i64* %PC, align 8 {
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	}

[0x5585af2b3988]:   %40 = inttoptr i64 %38 to i32* {
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x5585af2b3a00]:   store i32 0, i32* %40, align 4 {
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	}

[0x5585af2b3a68]:   %41 = load i64, i64* %PC, align 8 {
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	}

[0x5585af2b3b20]:   %42 = add i64 %41, -84 {
	[0x5585af33fab0]:  %44 = add i64 %43, -84
	}

[0x5585af2b3ba0]:   %43 = add i64 %41, 5 {
	[0x5585af2cf130]:  %45 = add i64 %43, 5
	}

[0x5585af2b3c08]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	}

[0x5585af2b3c80]:   %45 = add i64 %44, -8 {
	[0x5585af33f9e0]:  %47 = add i64 %46, -8
	}

[0x5585af2b3ce8]:   %46 = inttoptr i64 %45 to i64* {
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af2b3d60]:   store i64 %43, i64* %46, align 8 {
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	}

[0x5585af2b3de0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	}

[0x5585af2b3e60]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	}

[0x5585af2b3f40]:   %47 = tail call %struct.Memory* @sub_400490_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5585af2ca5c0]:  %call2_4004e4 = tail call %struct.Memory.32* @sub_400490.sum_2_n(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x5585af2b4008]:   %48 = load i64, i64* %RSP, align 8 {
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	}

[0x5585af2b4068]:   %49 = load i64, i64* %PC, align 8 {
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	}

[0x5585af2b40e0]:   %50 = add i64 %48, 16 {
	[0x5585af33fbc0]:  %51 = add i64 %49, 16
	}

[0x5585af2b4160]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	}

[0x5585af2b4220]:   %51 = icmp ugt i64 %48, -17 {
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	}

[0x5585af2b4288]:   %52 = zext i1 %51 to i8 {
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	}

[0x5585af2b4300]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	}

[0x5585af2b4368]:   %53 = trunc i64 %50 to i32 {
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	}

[0x5585af2b43e0]:   %54 = and i32 %53, 255 {
	[0x5585af2d09a0]:  %55 = and i32 %54, 255
	}

[0x5585af2b4498]:   %56 = trunc i32 %55 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	}

[0x5585af2b4510]:   %57 = and i8 %56, 1 {
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af2b4590]:   %58 = xor i8 %57, 1 {
	[0x5585af2cf8c0]:  %59 = xor i8 %58, 1
	[0x5585af33ece0]:  %20 = xor i8 %19, 1
	}

[0x5585af2b4610]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	}

[0x5585af2b4690]:   %59 = xor i64 %48, 16 {
	[0x5585af2cf530]:  %60 = xor i64 %49, 16
	}

[0x5585af2b4710]:   %60 = xor i64 %59, %50 {
	[0x5585af2cf3e0]:  %61 = xor i64 %60, %51
	}

[0x5585af2b4790]:   %61 = lshr i64 %60, 4 {
	[0x5585af2d0040]:  %62 = lshr i64 %61, 4
	}

[0x5585af2b47f8]:   %62 = trunc i64 %61 to i8 {
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	}

[0x5585af2b4870]:   %63 = and i8 %62, 1 {
	[0x5585af2d03b0]:  %64 = and i8 %63, 1
	}

[0x5585af2b48f0]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	}

[0x5585af2b4970]:   %64 = icmp eq i64 %50, 0 {
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	}

[0x5585af2b4de8]:   %65 = zext i1 %64 to i8 {
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	}

[0x5585af2b4e60]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	}

[0x5585af2b4ee0]:   %66 = lshr i64 %50, 63 {
	[0x5585af2d0480]:  %67 = lshr i64 %51, 63
	}

[0x5585af2b4f48]:   %67 = trunc i64 %66 to i8 {
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	}

[0x5585af2b4fc0]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	}

[0x5585af2b5040]:   %68 = lshr i64 %48, 63 {
	[0x5585af2d0150]:  %69 = lshr i64 %49, 63
	}

[0x5585af2b50c0]:   %69 = xor i64 %66, %68 {
	[0x5585af2d2830]:  %70 = xor i64 %67, %69
	}

[0x5585af2b5140]:   %70 = add nuw nsw i64 %69, %66 {
	[0x5585af2d51f0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5585af2b51c0]:   %71 = icmp eq i64 %70, 2 {
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	}

[0x5585af2b5228]:   %72 = zext i1 %71 to i8 {
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	}

[0x5585af2b52a0]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	}

[0x5585af2b5320]:   %73 = add i64 %49, 5 {
	[0x5585af2d4d60]:  %74 = add i64 %50, 5
	}

[0x5585af2b53a0]:   store i64 %73, i64* %PC, align 8 {
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	}

[0x5585af2b5460]:   %74 = add i64 %48, 24 {
	[0x5585af2d4aa0]:  %75 = add i64 %49, 24
	}

[0x5585af2b54c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	}

[0x5585af2b5528]:   %76 = load i64, i64* %75, align 8 {
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	}

[0x5585af2b55a0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x5585af2b5620]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	}

[0x5585af2b56a0]:   %77 = add i64 %49, 6 {
	[0x5585af2d77e0]:  %78 = add i64 %50, 6
	}

[0x5585af2b5720]:   store i64 %77, i64* %PC, align 8 {
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	}

[0x5585af2b5788]:   %78 = inttoptr i64 %74 to i64* {
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5585af2b57e8]:   %79 = load i64, i64* %78, align 8 {
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b5860]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	}

[0x5585af2b58e0]:   %80 = add i64 %48, 32 {
	[0x5585af2cd010]:  %81 = add i64 %49, 32
	}

[0x5585af2b5960]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	}

[0x5585af2b59c8]:   ret %struct.Memory* %47 {
	[0x5585af2d6db8]:  ret %struct.Memory.32* %call2_4004e4
	}

[0x5585af3012f0]: %struct.State* %0 {
	[0x5585af33d960]:%struct.State.1* %0
	}

[0x5585af301330]: i64 %1 {
	[0x5585af2cd360]:i64 %1
	}

[0x5585af301370]: %struct.Memory* %2 {
	[0x5585af2ce340]:%struct.Memory.32* %2
	}

[0x5585af301528]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5585af301600]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5585af32b560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5585af3016f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5585af32efd0]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5585af3017e0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5585af32f330]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5585af3018f0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5585af32f520]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5585af3019a0]:   %4 = add i64 %1, 1 {
	[0x5585af338fd0]:  %5 = add i64 %1, 1
	}

[0x5585af301a70]:   store i64 %4, i64* %PC, align 8 {
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	}

[0x5585af301ad8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	}

[0x5585af301b50]:   %6 = add i64 %5, -8 {
	[0x5585af2ca4b0]:  %8 = add i64 %7, -8
	}

[0x5585af301bb8]:   %7 = inttoptr i64 %6 to i64* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5585af301c30]:   store i64 %3, i64* %7, align 8 {
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	}

[0x5585af301c98]:   %8 = load i64, i64* %PC, align 8 {
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	}

[0x5585af301d10]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x5585af356850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5585af301da0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5585af301e60]:   %9 = add i64 %5, -24 {
	[0x5585af2c9c00]:  %11 = add i64 %7, -24
	}

[0x5585af301ee0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	}

[0x5585af301f60]:   %10 = icmp ult i64 %6, 16 {
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af301fc8]:   %11 = zext i1 %10 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	}

[0x5585af302070]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5585af414060]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x5585af302100]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	}

[0x5585af302168]:   %13 = trunc i64 %9 to i32 {
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af3021e0]:   %14 = and i32 %13, 255 {
	[0x5585af33d8b0]:  %16 = and i32 %15, 255
	}

[0x5585af3022a0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5585af3134a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5585af302318]:   %16 = trunc i32 %15 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	}

[0x5585af302390]:   %17 = and i8 %16, 1 {
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af302410]:   %18 = xor i8 %17, 1 {
	[0x5585af2cf8c0]:  %59 = xor i8 %58, 1
	[0x5585af33ece0]:  %20 = xor i8 %19, 1
	}

[0x5585af3024c0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5585af373f70]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5585af302550]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	}

[0x5585af3025d0]:   %20 = xor i64 %6, 16 {
	[0x5585af2cc020]:  %22 = xor i64 %8, 16
	}

[0x5585af302650]:   %21 = xor i64 %20, %9 {
	[0x5585af33e9b0]:  %23 = xor i64 %22, %11
	}

[0x5585af3026d0]:   %22 = lshr i64 %21, 4 {
	[0x5585af2cbad0]:  %24 = lshr i64 %23, 4
	}

[0x5585af302738]:   %23 = trunc i64 %22 to i8 {
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	}

[0x5585af3027b0]:   %24 = and i8 %23, 1 {
	[0x5585af2cc400]:  %26 = and i8 %25, 1
	}

[0x5585af302860]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5585af2d24b0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5585af3028f0]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	}

[0x5585af302970]:   %26 = icmp eq i64 %9, 0 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	}

[0x5585af3029d8]:   %27 = zext i1 %26 to i8 {
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af302a80]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5585af2ceeb0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5585af302b10]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5585af3013b0]: block_4004d0 {
	[0x5585af2c8ac0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1
From the pot matches of: [0x5585af302410]:   %18 = xor i8 %17, 1


Uprime : [0x5585af302550]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x5585af2cc180]:   store i8 %20, i8* %21, align 1


Adj: [0x5585af2cf690]:   store i8 %59, i8* %21, align 1


Removing: [0x5585af33ece0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x5585af2b4590]:   %58 = xor i8 %57, 1


Uprime : [0x5585af2b4610]:   store i8 %58, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x5585af2cf690]:   store i8 %59, i8* %21, align 1


Adj: [0x5585af2cc180]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x5585af2cfac0]:   %58 = and i8 %57, 1
From the pot matches of: [0x5585af302390]:   %17 = and i8 %16, 1


Uprime : [0x5585af302410]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5585af33ece0]:   %20 = xor i8 %19, 1


Adj: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1


Removing: [0x5585af33edf0]:   %19 = and i8 %18, 1
From the pot matches of: [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime : [0x5585af2b4590]:   %58 = xor i8 %57, 1


Uprime Matches: [0x5585af2cf8c0]:   %59 = xor i8 %58, 1


Adj: [0x5585af33ece0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x5585af3415a8]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x5585af302318]:   %16 = trunc i32 %15 to i8


Uprime : [0x5585af302390]:   %17 = and i8 %16, 1


Uprime Matches: [0x5585af33edf0]:   %19 = and i8 %18, 1


Adj: [0x5585af2cfac0]:   %58 = and i8 %57, 1


Removing: [0x5585af2a5b98]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x5585af2b4498]:   %56 = trunc i32 %55 to i8


Uprime : [0x5585af2b4510]:   %57 = and i8 %56, 1


Uprime Matches: [0x5585af2cfac0]:   %58 = and i8 %57, 1


Adj: [0x5585af33edf0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x5585af2b31a0]:   %29 = lshr i64 %9, 63 {
	[0x5585af33f230]:  %31 = lshr i64 %11, 63
	}

[0x5585af2b3208]:   %30 = trunc i64 %29 to i8 {
	[0x5585af2f1d88]:  %32 = trunc i64 %31 to i8
	}

[0x5585af2b32b0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5585af2cec40]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5585af2b3340]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x5585af33dc00]:  store i8 %32, i8* %33, align 1
	}

[0x5585af2b33c0]:   %32 = lshr i64 %6, 63 {
	[0x5585af33f010]:  %34 = lshr i64 %8, 63
	}

[0x5585af2b3440]:   %33 = xor i64 %29, %32 {
	[0x5585af33dab0]:  %35 = xor i64 %31, %34
	}

[0x5585af2b34c0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5585af2cd940]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5585af2b3540]:   %35 = icmp eq i64 %34, 2 {
	[0x5585af2cdeb0]:  %37 = icmp eq i64 %36, 2
	}

[0x5585af2b35a8]:   %36 = zext i1 %35 to i8 {
	[0x5585af33bb78]:  %38 = zext i1 %37 to i8
	}

[0x5585af2b3650]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5585af2cd520]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5585af2b36e0]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x5585af2cdd50]:  store i8 %38, i8* %39, align 1
	}

[0x5585af2b3760]:   store i64 10, i64* %RDI, align 8, !tbaa !1261 {
	[0x5585af33f890]:  store i64 10, i64* %RDI.i, align 8
	}

[0x5585af2b37e0]:   %38 = add i64 %5, -12 {
	[0x5585af2cdc00]:  %40 = add i64 %7, -12
	}

[0x5585af2b38a0]:   %39 = add i64 %8, 19 {
	[0x5585af33f780]:  %41 = add i64 %10, 19
	}

[0x5585af2b3920]:   store i64 %39, i64* %PC, align 8 {
	[0x5585af33f670]:  store i64 %41, i64* %3, align 8
	}

[0x5585af2b3988]:   %40 = inttoptr i64 %38 to i32* {
	[0x5585af33fcf8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x5585af2b3a00]:   store i32 0, i32* %40, align 4 {
	[0x5585af2cdaa0]:  store i32 0, i32* %42, align 4
	}

[0x5585af2b3a68]:   %41 = load i64, i64* %PC, align 8 {
	[0x5585af33dd48]:  %43 = load i64, i64* %3, align 8
	}

[0x5585af2b3b20]:   %42 = add i64 %41, -84 {
	[0x5585af33fab0]:  %44 = add i64 %43, -84
	}

[0x5585af2b3ba0]:   %43 = add i64 %41, 5 {
	[0x5585af2cf130]:  %45 = add i64 %43, 5
	}

[0x5585af2b3c08]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2cc288]:  %46 = load i64, i64* %6, align 8
	}

[0x5585af2b3c80]:   %45 = add i64 %44, -8 {
	[0x5585af33f9e0]:  %47 = add i64 %46, -8
	}

[0x5585af2b3ce8]:   %46 = inttoptr i64 %45 to i64* {
	[0x5585af352a38]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5585af2b3d60]:   store i64 %43, i64* %46, align 8 {
	[0x5585af2ce7d0]:  store i64 %45, i64* %48, align 8
	}

[0x5585af2b3de0]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ce630]:  store i64 %47, i64* %6, align 8
	}

[0x5585af2b3e60]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x5585af2ce4d0]:  store i64 %44, i64* %3, align 8
	}

[0x5585af2b3f40]:   %47 = tail call %struct.Memory* @sub_400490_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5585af2ca5c0]:  %call2_4004e4 = tail call %struct.Memory.32* @sub_400490.sum_2_n(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x5585af2b4008]:   %48 = load i64, i64* %RSP, align 8 {
	[0x5585af33d078]:  %49 = load i64, i64* %6, align 8
	}

[0x5585af2b4068]:   %49 = load i64, i64* %PC, align 8 {
	[0x5585af33cc68]:  %50 = load i64, i64* %3, align 8
	}

[0x5585af2b40e0]:   %50 = add i64 %48, 16 {
	[0x5585af33fbc0]:  %51 = add i64 %49, 16
	}

[0x5585af2b4160]:   store i64 %50, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ce210]:  store i64 %51, i64* %6, align 8
	}

[0x5585af2b4220]:   %51 = icmp ugt i64 %48, -17 {
	[0x5585af2cf280]:  %52 = icmp ugt i64 %49, -17
	}

[0x5585af2b4288]:   %52 = zext i1 %51 to i8 {
	[0x5585af33b8a8]:  %53 = zext i1 %52 to i8
	}

[0x5585af2b4300]:   store i8 %52, i8* %12, align 1, !tbaa !1265 {
	[0x5585af2cff30]:  store i8 %53, i8* %14, align 1
	}

[0x5585af2b4368]:   %53 = trunc i64 %50 to i32 {
	[0x5585af33fe28]:  %54 = trunc i64 %51 to i32
	}

[0x5585af2b43e0]:   %54 = and i32 %53, 255 {
	[0x5585af2d09a0]:  %55 = and i32 %54, 255
	}

[0x5585af2b4498]:   %56 = trunc i32 %55 to i8 {
	[0x5585af3415a8]:  %57 = trunc i32 %56 to i8
	}

[0x5585af2b4510]:   %57 = and i8 %56, 1 {
	[0x5585af2cfac0]:  %58 = and i8 %57, 1
	}

[0x5585af2b4590]:   %58 = xor i8 %57, 1 {
	[0x5585af2cf8c0]:  %59 = xor i8 %58, 1
	}

[0x5585af2b4610]:   store i8 %58, i8* %19, align 1, !tbaa !1279 {
	[0x5585af2cf690]:  store i8 %59, i8* %21, align 1
	}

[0x5585af2b4690]:   %59 = xor i64 %48, 16 {
	[0x5585af2cf530]:  %60 = xor i64 %49, 16
	}

[0x5585af2b4710]:   %60 = xor i64 %59, %50 {
	[0x5585af2cf3e0]:  %61 = xor i64 %60, %51
	}

[0x5585af2b4790]:   %61 = lshr i64 %60, 4 {
	[0x5585af2d0040]:  %62 = lshr i64 %61, 4
	}

[0x5585af2b47f8]:   %62 = trunc i64 %61 to i8 {
	[0x5585af341478]:  %63 = trunc i64 %62 to i8
	}

[0x5585af2b4870]:   %63 = and i8 %62, 1 {
	[0x5585af2d03b0]:  %64 = and i8 %63, 1
	}

[0x5585af2b48f0]:   store i8 %63, i8* %25, align 1, !tbaa !1280 {
	[0x5585af2d2070]:  store i8 %64, i8* %27, align 1
	}

[0x5585af2b4970]:   %64 = icmp eq i64 %50, 0 {
	[0x5585af2d05d0]:  %65 = icmp eq i64 %51, 0
	}

[0x5585af2b4de8]:   %65 = zext i1 %64 to i8 {
	[0x5585af341348]:  %66 = zext i1 %65 to i8
	}

[0x5585af2b4e60]:   store i8 %65, i8* %28, align 1, !tbaa !1281 {
	[0x5585af2d1cf0]:  store i8 %66, i8* %30, align 1
	}

[0x5585af2b4ee0]:   %66 = lshr i64 %50, 63 {
	[0x5585af2d0480]:  %67 = lshr i64 %51, 63
	}

[0x5585af2b4f48]:   %67 = trunc i64 %66 to i8 {
	[0x5585af340e88]:  %68 = trunc i64 %67 to i8
	}

[0x5585af2b4fc0]:   store i8 %67, i8* %31, align 1, !tbaa !1282 {
	[0x5585af2d1aa0]:  store i8 %68, i8* %33, align 1
	}

[0x5585af2b5040]:   %68 = lshr i64 %48, 63 {
	[0x5585af2d0150]:  %69 = lshr i64 %49, 63
	}

[0x5585af2b50c0]:   %69 = xor i64 %66, %68 {
	[0x5585af2d2830]:  %70 = xor i64 %67, %69
	}

[0x5585af2b5140]:   %70 = add nuw nsw i64 %69, %66 {
	[0x5585af2d51f0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x5585af2b51c0]:   %71 = icmp eq i64 %70, 2 {
	[0x5585af2d50a0]:  %72 = icmp eq i64 %71, 2
	}

[0x5585af2b5228]:   %72 = zext i1 %71 to i8 {
	[0x5585af340af8]:  %73 = zext i1 %72 to i8
	}

[0x5585af2b52a0]:   store i8 %72, i8* %37, align 1, !tbaa !1283 {
	[0x5585af2d4ec0]:  store i8 %73, i8* %39, align 1
	}

[0x5585af2b5320]:   %73 = add i64 %49, 5 {
	[0x5585af2d4d60]:  %74 = add i64 %50, 5
	}

[0x5585af2b53a0]:   store i64 %73, i64* %PC, align 8 {
	[0x5585af2d4c00]:  store i64 %74, i64* %3, align 8
	}

[0x5585af2b5460]:   %74 = add i64 %48, 24 {
	[0x5585af2d4aa0]:  %75 = add i64 %49, 24
	}

[0x5585af2b54c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x5585af340898]:  %76 = inttoptr i64 %51 to i64*
	}

[0x5585af2b5528]:   %76 = load i64, i64* %75, align 8 {
	[0x5585af3401b8]:  %77 = load i64, i64* %76, align 8
	}

[0x5585af2b55a0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1261 {
	[0x5585af2d2ff0]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x5585af2b5620]:   store i64 %74, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2d54b0]:  store i64 %75, i64* %6, align 8
	}

[0x5585af2b56a0]:   %77 = add i64 %49, 6 {
	[0x5585af2d77e0]:  %78 = add i64 %50, 6
	}

[0x5585af2b5720]:   store i64 %77, i64* %PC, align 8 {
	[0x5585af2d7070]:  store i64 %78, i64* %3, align 8
	}

[0x5585af2b5788]:   %78 = inttoptr i64 %74 to i64* {
	[0x5585af342058]:  %79 = inttoptr i64 %75 to i64*
	}

[0x5585af2b57e8]:   %79 = load i64, i64* %78, align 8 {
	[0x5585af343eb8]:  %80 = load i64, i64* %79, align 8
	}

[0x5585af2b5860]:   store i64 %79, i64* %PC, align 8, !tbaa !1261 {
	[0x5585af2d6f10]:  store i64 %80, i64* %3, align 8
	}

[0x5585af2b58e0]:   %80 = add i64 %48, 32 {
	[0x5585af2cd010]:  %81 = add i64 %49, 32
	}

[0x5585af2b5960]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af2ccab0]:  store i64 %81, i64* %6, align 8
	}

[0x5585af2b59c8]:   ret %struct.Memory* %47 {
	[0x5585af2d6db8]:  ret %struct.Memory.32* %call2_4004e4
	}

[0x5585af3012f0]: %struct.State* %0 {
	[0x5585af33d960]:%struct.State.1* %0
	}

[0x5585af301330]: i64 %1 {
	[0x5585af2cd360]:i64 %1
	}

[0x5585af301370]: %struct.Memory* %2 {
	[0x5585af2ce340]:%struct.Memory.32* %2
	}

[0x5585af301528]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5585af32c668]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5585af301600]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5585af32b560]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5585af3016f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5585af32efd0]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5585af3017e0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5585af32f330]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5585af3018f0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5585af32f520]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5585af3019a0]:   %4 = add i64 %1, 1 {
	[0x5585af338fd0]:  %5 = add i64 %1, 1
	}

[0x5585af301a70]:   store i64 %4, i64* %PC, align 8 {
	[0x5585af2cb980]:  store i64 %5, i64* %3, align 8
	}

[0x5585af301ad8]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af32c7f8]:  %7 = load i64, i64* %6, align 8
	}

[0x5585af301b50]:   %6 = add i64 %5, -8 {
	[0x5585af2ca4b0]:  %8 = add i64 %7, -8
	}

[0x5585af301bb8]:   %7 = inttoptr i64 %6 to i64* {
	[0x5585af2b2ff8]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5585af301c30]:   store i64 %3, i64* %7, align 8 {
	[0x5585af2ca270]:  store i64 %4, i64* %9, align 8
	}

[0x5585af301c98]:   %8 = load i64, i64* %PC, align 8 {
	[0x5585af339af8]:  %10 = load i64, i64* %3, align 8
	}

[0x5585af301d10]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x5585af356850]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x5585af301da0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x5585af2ca120]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5585af301e60]:   %9 = add i64 %5, -24 {
	[0x5585af2c9c00]:  %11 = add i64 %7, -24
	}

[0x5585af301ee0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x5585af33d6b0]:  store i64 %11, i64* %6, align 8
	}

[0x5585af301f60]:   %10 = icmp ult i64 %6, 16 {
	[0x5585af33bc70]:  %12 = icmp ult i64 %8, 16
	}

[0x5585af301fc8]:   %11 = zext i1 %10 to i8 {
	[0x5585af3396c8]:  %13 = zext i1 %12 to i8
	}

[0x5585af302070]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5585af414060]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x5585af302100]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x5585af33e8a0]:  store i8 %13, i8* %14, align 1
	}

[0x5585af302168]:   %13 = trunc i64 %9 to i32 {
	[0x5585af36f748]:  %15 = trunc i64 %11 to i32
	}

[0x5585af3021e0]:   %14 = and i32 %13, 255 {
	[0x5585af33d8b0]:  %16 = and i32 %15, 255
	}

[0x5585af3022a0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5585af3134a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5585af302318]:   %16 = trunc i32 %15 to i8 {
	[0x5585af2a5b98]:  %18 = trunc i32 %17 to i8
	}

[0x5585af302390]:   %17 = and i8 %16, 1 {
	[0x5585af33edf0]:  %19 = and i8 %18, 1
	}

[0x5585af302410]:   %18 = xor i8 %17, 1 {
	[0x5585af33ece0]:  %20 = xor i8 %19, 1
	}

[0x5585af3024c0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5585af373f70]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5585af302550]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x5585af2cc180]:  store i8 %20, i8* %21, align 1
	}

[0x5585af3025d0]:   %20 = xor i64 %6, 16 {
	[0x5585af2cc020]:  %22 = xor i64 %8, 16
	}

[0x5585af302650]:   %21 = xor i64 %20, %9 {
	[0x5585af33e9b0]:  %23 = xor i64 %22, %11
	}

[0x5585af3026d0]:   %22 = lshr i64 %21, 4 {
	[0x5585af2cbad0]:  %24 = lshr i64 %23, 4
	}

[0x5585af302738]:   %23 = trunc i64 %22 to i8 {
	[0x5585af2e5d78]:  %25 = trunc i64 %24 to i8
	}

[0x5585af3027b0]:   %24 = and i8 %23, 1 {
	[0x5585af2cc400]:  %26 = and i8 %25, 1
	}

[0x5585af302860]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5585af2d24b0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5585af3028f0]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x5585af33f450]:  store i8 %26, i8* %27, align 1
	}

[0x5585af302970]:   %26 = icmp eq i64 %9, 0 {
	[0x5585af2cd410]:  %28 = icmp eq i64 %11, 0
	}

[0x5585af3029d8]:   %27 = zext i1 %26 to i8 {
	[0x5585af357468]:  %29 = zext i1 %28 to i8
	}

[0x5585af302a80]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5585af2ceeb0]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5585af302b10]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x5585af2cd2b0]:  store i8 %29, i8* %30, align 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5585af3013b0]: block_4004d0 {
	[0x5585af2c8ac0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
