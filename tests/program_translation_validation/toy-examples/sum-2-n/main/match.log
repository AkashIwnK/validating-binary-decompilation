Matching sub_4004b0_main Vs main


[Info] Retrieve Potential Matches...
[0x558ea4a072b0]: %struct.State* %0 {
	[0x558ea4a54a20]:%struct.State.0* %0
	}

[0x558ea4a072f0]: i64 %1 {
	[0x558ea4a58090]:i64 %1
	}

[0x558ea4a07330]: %struct.Memory* %2 {
	[0x558ea4a33c00]:%struct.Memory.31* %2
	}

[0x558ea4a07508]:   %3 = load i64, i64* %RBP, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a075e0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x558ea49d2b90]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x558ea4a076d0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x558ea49d3a30]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x558ea4a077c0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x558ea49d36b0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x558ea4a078d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x558ea49d3120]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x558ea4a07980]:   %4 = add i64 %1, 1 {
	[0x558ea49868e0]:  %5 = add i64 %1, 1
	}

[0x558ea4a1d5b0]:   store i64 %4, i64* %PC, align 8 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1d618]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1d690]:   %6 = add i64 %5, -8 {
	[0x558ea4a2c5b0]:  %8 = add i64 %7, -8
	[0x558ea4ae7e50]:  %47 = add i64 %46, -8
	}

[0x558ea4a1d6f8]:   %7 = inttoptr i64 %6 to i64* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a1d770]:   store i64 %3, i64* %7, align 8 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1d7d8]:   %8 = load i64, i64* %PC, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1d850]:   %17 = and i8 %16, 1 {
	[0x558ea4a2e030]:  %26 = and i8 %25, 1
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	[0x558ea4a4f560]:  %64 = and i8 %63, 1
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1d8e0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1d960]:   %9 = add i64 %5, -24 {
	[0x558ea4a2e330]:  %11 = add i64 %7, -24
	}

[0x558ea4a1d9e0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1da60]:   %10 = icmp ult i64 %6, 16 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a1dac8]:   %11 = zext i1 %10 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a1db70]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x558ea4a2c100]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x558ea4a1dc00]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1dc68]:   %13 = trunc i64 %9 to i32 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1dce0]:   %14 = and i32 %13, 255 {
	[0x558ea4a2ea60]:  %16 = and i32 %15, 255
	[0x558ea4af7220]:  %55 = and i32 %54, 255
	}

[0x558ea4a1dda0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x558ea4a2ae90]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	[0x558ea4a2db20]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x558ea4a377e0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x558ea4a1de18]:   %16 = trunc i32 %15 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1de90]:   %33 = xor i64 %29, %32 {
	[0x558ea4993020]:  %61 = xor i64 %60, %51
	[0x558ea4a2f320]:  %23 = xor i64 %22, %11
	[0x558ea4a517e0]:  %35 = xor i64 %31, %34
	[0x558ea4a518e0]:  %70 = xor i64 %67, %69
	}

[0x558ea4a1df10]:   %34 = add nuw nsw i64 %33, %32 {
	[0x558ea4a4bbb0]:  %71 = add nuw nsw i64 %70, %67
	[0x558ea4a548e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558ea4a1dfa0]:   %18 = xor i8 %17, 1 {
	[0x558ea4a2ecc0]:  %20 = xor i8 %19, 1
	[0x558ea4b01960]:  %59 = xor i8 %58, 1
	}

[0x558ea4a1e050]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x558ea4a2edc0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x558ea4a1e0e0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1e160]:   %20 = xor i64 %6, 16 {
	[0x558ea49eaf00]:  %60 = xor i64 %49, 16
	[0x558ea4a4e550]:  %22 = xor i64 %8, 16
	}

[0x558ea4a1e1e0]:   %21 = xor i64 %20, %9 {
	[0x558ea4993020]:  %61 = xor i64 %60, %51
	[0x558ea4a2f320]:  %23 = xor i64 %22, %11
	[0x558ea4a517e0]:  %35 = xor i64 %31, %34
	[0x558ea4a518e0]:  %70 = xor i64 %67, %69
	}

[0x558ea4a1e260]:   %22 = lshr i64 %21, 4 {
	[0x558ea4997eb0]:  %62 = lshr i64 %61, 4
	[0x558ea4a2f3f0]:  %24 = lshr i64 %23, 4
	}

[0x558ea4a1e2c8]:   %23 = trunc i64 %22 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1e340]:   %24 = and i8 %23, 1 {
	[0x558ea4a2e030]:  %26 = and i8 %25, 1
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	[0x558ea4a4f560]:  %64 = and i8 %63, 1
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1e3f0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x558ea4a31b30]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x558ea4a1e480]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1e500]:   %26 = icmp eq i64 %9, 0 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a1e568]:   %27 = zext i1 %26 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a1e610]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x558ea4a30650]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x558ea4a1e6a0]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1e720]:   %29 = lshr i64 %9, 63 {
	[0x558ea4a2d940]:  %34 = lshr i64 %8, 63
	[0x558ea4a2ffe0]:  %31 = lshr i64 %11, 63
	[0x558ea4a50a70]:  %67 = lshr i64 %51, 63
	[0x558ea4a50fa0]:  %69 = lshr i64 %49, 63
	}

[0x558ea4a1e788]:   %30 = trunc i64 %29 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1e830]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x558ea4a37450]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x558ea4a1e8c0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1e940]:   %32 = lshr i64 %6, 63 {
	[0x558ea4a2d940]:  %34 = lshr i64 %8, 63
	[0x558ea4a2ffe0]:  %31 = lshr i64 %11, 63
	[0x558ea4a50a70]:  %67 = lshr i64 %51, 63
	[0x558ea4a50fa0]:  %69 = lshr i64 %49, 63
	}

[0x558ea4a1e9a8]:   %65 = zext i1 %64 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a1ea20]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1eaa0]:   %66 = lshr i64 %50, 63 {
	[0x558ea4a2d940]:  %34 = lshr i64 %8, 63
	[0x558ea4a2ffe0]:  %31 = lshr i64 %11, 63
	[0x558ea4a50a70]:  %67 = lshr i64 %51, 63
	[0x558ea4a50fa0]:  %69 = lshr i64 %49, 63
	}

[0x558ea4a1eb08]:   %67 = trunc i64 %66 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1ebd0]:   %35 = icmp eq i64 %34, 2 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a1ec38]:   %36 = zext i1 %35 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a1ece0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x558ea4a376b0]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x558ea4a1ed70]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1edf0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1ee70]:   %38 = add i64 %5, -12 {
	[0x558ea4a399f0]:  %40 = add i64 %7, -12
	}

[0x558ea4a1eef0]:   %39 = add i64 %8, 19 {
	[0x558ea4a39b20]:  %41 = add i64 %10, 19
	}

[0x558ea4a1ef70]:   store i64 %39, i64* %PC, align 8 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1efd8]:   %40 = inttoptr i64 %38 to i32* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a1f050]:   store i32 0, i32* %40, align 4 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f0b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1f170]:   %42 = add i64 %41, -84 {
	[0x558ea4a6f9a0]:  %44 = add i64 %43, -84
	}

[0x558ea4a1f1f0]:   %43 = add i64 %41, 5 {
	[0x558ea4a53030]:  %74 = add i64 %50, 5
	[0x558ea4ae5630]:  %45 = add i64 %43, 5
	}

[0x558ea4a1f258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1f2d0]:   %45 = add i64 %44, -8 {
	[0x558ea4a2c5b0]:  %8 = add i64 %7, -8
	[0x558ea4ae7e50]:  %47 = add i64 %46, -8
	}

[0x558ea4a1f338]:   %46 = inttoptr i64 %45 to i64* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a1f3b0]:   store i64 %43, i64* %46, align 8 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f4b0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f5b0]:   %47 = tail call %struct.Memory* @sub_400470_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x558ea4a2ae90]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	[0x558ea4a2db20]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x558ea4a377e0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x558ea4a1f678]:   %48 = load i64, i64* %RSP, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1f6d8]:   %49 = load i64, i64* %PC, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1f750]:   %50 = add i64 %48, 16 {
	[0x558ea4aeeb30]:  %51 = add i64 %49, 16
	}

[0x558ea4a1f7d0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f890]:   %51 = icmp ugt i64 %48, -17 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a1f8f8]:   %52 = zext i1 %51 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a1f970]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f9d8]:   %53 = trunc i64 %50 to i32 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1fa50]:   %54 = and i32 %53, 255 {
	[0x558ea4a2ea60]:  %16 = and i32 %15, 255
	[0x558ea4af7220]:  %55 = and i32 %54, 255
	}

[0x558ea4a1fad0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x558ea4a2ae90]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	[0x558ea4a2db20]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x558ea4a377e0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1fc10]:   %57 = and i8 %56, 1 {
	[0x558ea4a2e030]:  %26 = and i8 %25, 1
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	[0x558ea4a4f560]:  %64 = and i8 %63, 1
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1fc90]:   %58 = xor i8 %57, 1 {
	[0x558ea4a2ecc0]:  %20 = xor i8 %19, 1
	[0x558ea4b01960]:  %59 = xor i8 %58, 1
	}

[0x558ea4a1fd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1fd90]:   %59 = xor i64 %48, 16 {
	[0x558ea49eaf00]:  %60 = xor i64 %49, 16
	[0x558ea4a4e550]:  %22 = xor i64 %8, 16
	}

[0x558ea4a1fe10]:   %60 = xor i64 %59, %50 {
	[0x558ea4993020]:  %61 = xor i64 %60, %51
	[0x558ea4a2f320]:  %23 = xor i64 %22, %11
	[0x558ea4a517e0]:  %35 = xor i64 %31, %34
	[0x558ea4a518e0]:  %70 = xor i64 %67, %69
	}

[0x558ea4a1fe90]:   %61 = lshr i64 %60, 4 {
	[0x558ea4997eb0]:  %62 = lshr i64 %61, 4
	[0x558ea4a2f3f0]:  %24 = lshr i64 %23, 4
	}

[0x558ea4a1fef8]:   %62 = trunc i64 %61 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1ff70]:   %63 = and i8 %62, 1 {
	[0x558ea4a2e030]:  %26 = and i8 %25, 1
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	[0x558ea4a4f560]:  %64 = and i8 %63, 1
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1fff0]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20070]:   %64 = icmp eq i64 %50, 0 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a20500]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20580]:   %68 = lshr i64 %48, 63 {
	[0x558ea4a2d940]:  %34 = lshr i64 %8, 63
	[0x558ea4a2ffe0]:  %31 = lshr i64 %11, 63
	[0x558ea4a50a70]:  %67 = lshr i64 %51, 63
	[0x558ea4a50fa0]:  %69 = lshr i64 %49, 63
	}

[0x558ea4a20600]:   %69 = xor i64 %66, %68 {
	[0x558ea4993020]:  %61 = xor i64 %60, %51
	[0x558ea4a2f320]:  %23 = xor i64 %22, %11
	[0x558ea4a517e0]:  %35 = xor i64 %31, %34
	[0x558ea4a518e0]:  %70 = xor i64 %67, %69
	}

[0x558ea4a20680]:   %70 = add nuw nsw i64 %69, %66 {
	[0x558ea4a4bbb0]:  %71 = add nuw nsw i64 %70, %67
	[0x558ea4a548e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558ea4a20700]:   %71 = icmp eq i64 %70, 2 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a20768]:   %72 = zext i1 %71 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a207e0]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20860]:   %73 = add i64 %49, 5 {
	[0x558ea4a53030]:  %74 = add i64 %50, 5
	[0x558ea4ae5630]:  %45 = add i64 %43, 5
	}

[0x558ea4a208e0]:   store i64 %73, i64* %PC, align 8 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20960]:   %74 = add i64 %48, 24 {
	[0x558ea4a2da30]:  %75 = add i64 %49, 24
	}

[0x558ea4a209c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a20a28]:   %76 = load i64, i64* %75, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a20aa0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20b20]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20ba0]:   %77 = add i64 %49, 6 {
	[0x558ea4a575d0]:  %78 = add i64 %50, 6
	}

[0x558ea4a20c20]:   store i64 %77, i64* %PC, align 8 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20c88]:   %78 = inttoptr i64 %74 to i64* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a20ce8]:   %79 = load i64, i64* %78, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a20d60]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20de0]:   %80 = add i64 %48, 32 {
	[0x558ea4a519b0]:  %81 = add i64 %49, 32
	}

[0x558ea4a20e60]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a20ec8]:   ret %struct.Memory* %47 {
	[0x558ea4a36888]:  ret %struct.Memory.31* %call2_4004c4
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x558ea4a30f68]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x558ea4a1d618]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x558ea4a1ee70]:   %38 = add i64 %5, -12


Uprime Matches: [0x558ea4a399f0]:   %40 = add i64 %7, -12


Adj: [0x558ea4ae7e50]:   %47 = add i64 %46, -8


Removing: [0x558ea4a318e8]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x558ea4a1d618]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x558ea4a1ee70]:   %38 = add i64 %5, -12


Uprime Matches: [0x558ea4a399f0]:   %40 = add i64 %7, -12


Adj: [0x558ea49eaf00]:   %60 = xor i64 %49, 16
[0x558ea4a2da30]:   %75 = add i64 %49, 24
[0x558ea4a50fa0]:   %69 = lshr i64 %49, 63
[0x558ea4a519b0]:   %81 = add i64 %49, 32
[0x558ea4aeeb30]:   %51 = add i64 %49, 16
[0x558ea4aefe80]:   %52 = icmp ugt i64 %49, -17


Removing: [0x558ea4a30e38]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x558ea4a1d7d8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x558ea4a1eef0]:   %39 = add i64 %8, 19


Uprime Matches: [0x558ea4a39b20]:   %41 = add i64 %10, 19


Adj: [0x558ea4a6f9a0]:   %44 = add i64 %43, -84
[0x558ea4ae5630]:   %45 = add i64 %43, 5


Removing: [0x558ea4a31a18]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x558ea4a1d7d8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x558ea4a1eef0]:   %39 = add i64 %8, 19


Uprime Matches: [0x558ea4a39b20]:   %41 = add i64 %10, 19


Adj: [0x558ea4a53030]:   %74 = add i64 %50, 5
[0x558ea4a575d0]:   %78 = add i64 %50, 6


Removing: [0x558ea4a201d8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a2ea60]:   %16 = and i32 %15, 255


Removing: [0x558ea4a2ba48]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a50960]:   store i8 %32, i8* %33, align 1


Removing: [0x558ea4a32728]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4af7220]:   %55 = and i32 %54, 255


Removing: [0x558ea4a34158]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a51430]:   store i8 %68, i8* %33, align 1


Removing: [0x558ea4a2e030]:   %26 = and i8 %25, 1
From the pot matches of: [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime : [0x558ea4a1dfa0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1
[0x558ea4b01960]:   %59 = xor i8 %58, 1


Adj: [0x558ea4a2f940]:   store i8 %26, i8* %27, align 1


Removing: [0x558ea4a4f560]:   %64 = and i8 %63, 1
From the pot matches of: [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime : [0x558ea4a1dfa0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1
[0x558ea4b01960]:   %59 = xor i8 %58, 1


Adj: [0x558ea4a50240]:   store i8 %64, i8* %27, align 1


Removing: [0x558ea4a6c6d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x558ea4a1f0b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x558ea4a1f1f0]:   %43 = add i64 %41, 5


Uprime Matches: [0x558ea4a53030]:   %74 = add i64 %50, 5
[0x558ea4ae5630]:   %45 = add i64 %43, 5


Adj: [0x558ea4a39b20]:   %41 = add i64 %10, 19


Removing: [0x558ea4a31a18]:   %50 = load i64, i64* %3, align 8
From the pot matches of: [0x558ea4a1f0b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x558ea4a1f170]:   %42 = add i64 %41, -84


Uprime Matches: [0x558ea4a6f9a0]:   %44 = add i64 %43, -84


Adj: [0x558ea4a53030]:   %74 = add i64 %50, 5
[0x558ea4a575d0]:   %78 = add i64 %50, 6


Removing: [0x558ea4a318e8]:   %49 = load i64, i64* %6, align 8
From the pot matches of: [0x558ea4a1f258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x558ea4a1f2d0]:   %45 = add i64 %44, -8


Uprime Matches: [0x558ea4a2c5b0]:   %8 = add i64 %7, -8
[0x558ea4ae7e50]:   %47 = add i64 %46, -8


Adj: [0x558ea49eaf00]:   %60 = xor i64 %49, 16
[0x558ea4a2da30]:   %75 = add i64 %49, 24
[0x558ea4a50fa0]:   %69 = lshr i64 %49, 63
[0x558ea4a519b0]:   %81 = add i64 %49, 32
[0x558ea4aeeb30]:   %51 = add i64 %49, 16
[0x558ea4aefe80]:   %52 = icmp ugt i64 %49, -17


Removing: [0x558ea4a2c5b0]:   %8 = add i64 %7, -8
From the pot matches of: [0x558ea4a1f2d0]:   %45 = add i64 %44, -8


Uprime : [0x558ea4a1f430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x558ea4a2e730]:   store i64 %11, i64* %6, align 8
[0x558ea4a4ed50]:   store i64 %81, i64* %6, align 8
[0x558ea4a570c0]:   store i64 %75, i64* %6, align 8
[0x558ea4aed390]:   store i64 %47, i64* %6, align 8
[0x558ea4af1320]:   store i64 %51, i64* %6, align 8


Adj: [0x558ea499b748]:   %9 = inttoptr i64 %8 to i64*
[0x558ea4a2bb00]:   store i64 %8, i64* %RBP.i, align 8
[0x558ea4a2d940]:   %34 = lshr i64 %8, 63
[0x558ea4a2e840]:   %12 = icmp ult i64 %8, 16
[0x558ea4a4e550]:   %22 = xor i64 %8, 16


Removing: [0x558ea4998d58]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x558ea4a1f678]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x558ea4a20de0]:   %80 = add i64 %48, 32


Uprime Matches: [0x558ea4a519b0]:   %81 = add i64 %49, 32


Adj: [0x558ea4a2c5b0]:   %8 = add i64 %7, -8
[0x558ea4a2e330]:   %11 = add i64 %7, -24
[0x558ea4a399f0]:   %40 = add i64 %7, -12


Removing: [0x558ea4a30f68]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x558ea4a1f678]:   %48 = load i64, i64* %RSP, align 8


Uprime : [0x558ea4a20de0]:   %80 = add i64 %48, 32


Uprime Matches: [0x558ea4a519b0]:   %81 = add i64 %49, 32


Adj: [0x558ea4ae7e50]:   %47 = add i64 %46, -8


Removing: [0x558ea4a30e38]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x558ea4a1f6d8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x558ea4a20ba0]:   %77 = add i64 %49, 6


Uprime Matches: [0x558ea4a575d0]:   %78 = add i64 %50, 6


Adj: [0x558ea4a6f9a0]:   %44 = add i64 %43, -84
[0x558ea4ae5630]:   %45 = add i64 %43, 5


Removing: [0x558ea4a6c6d8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x558ea4a1f6d8]:   %49 = load i64, i64* %PC, align 8


Uprime : [0x558ea4a20ba0]:   %77 = add i64 %49, 6


Uprime Matches: [0x558ea4a575d0]:   %78 = add i64 %50, 6


Adj: [0x558ea4a39b20]:   %41 = add i64 %10, 19


Removing: [0x558ea4a201d8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a2ea60]:   %16 = and i32 %15, 255


Removing: [0x558ea4a2ba48]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a50960]:   store i8 %32, i8* %33, align 1


Removing: [0x558ea4a32728]:   %54 = trunc i64 %51 to i32
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4af7220]:   %55 = and i32 %54, 255


Removing: [0x558ea4a34158]:   %68 = trunc i64 %67 to i8
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a2e030]:   %26 = and i8 %25, 1
[0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a4f560]:   %64 = and i8 %63, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a51430]:   store i8 %68, i8* %33, align 1


Removing: [0x558ea4a2e030]:   %26 = and i8 %25, 1
From the pot matches of: [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime : [0x558ea4a1fc90]:   %58 = xor i8 %57, 1


Uprime Matches: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1
[0x558ea4b01960]:   %59 = xor i8 %58, 1


Adj: [0x558ea4a2f940]:   store i8 %26, i8* %27, align 1


Removing: [0x558ea4a4f560]:   %64 = and i8 %63, 1
From the pot matches of: [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime : [0x558ea4a1fc90]:   %58 = xor i8 %57, 1


Uprime Matches: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1
[0x558ea4b01960]:   %59 = xor i8 %58, 1


Adj: [0x558ea4a50240]:   store i8 %64, i8* %27, align 1

Round: 1

Removing: [0x558ea4a29778]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a2e030]:   %26 = and i8 %25, 1


Removing: [0x558ea4a337d8]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a4f560]:   %64 = and i8 %63, 1


Removing: [0x558ea4998d58]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x558ea4a1f258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x558ea4a1f2d0]:   %45 = add i64 %44, -8


Uprime Matches: [0x558ea4ae7e50]:   %47 = add i64 %46, -8


Adj: [0x558ea4a2c5b0]:   %8 = add i64 %7, -8
[0x558ea4a2e330]:   %11 = add i64 %7, -24
[0x558ea4a399f0]:   %40 = add i64 %7, -12


Removing: [0x558ea4a29778]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a2e030]:   %26 = and i8 %25, 1


Removing: [0x558ea4a337d8]:   %63 = trunc i64 %62 to i8
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1
[0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a4f560]:   %64 = and i8 %63, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x558ea4a072b0]: %struct.State* %0 {
	[0x558ea4a54a20]:%struct.State.0* %0
	}

[0x558ea4a072f0]: i64 %1 {
	[0x558ea4a58090]:i64 %1
	}

[0x558ea4a07330]: %struct.Memory* %2 {
	[0x558ea4a33c00]:%struct.Memory.31* %2
	}

[0x558ea4a07508]:   %3 = load i64, i64* %RBP, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x558ea4a075e0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x558ea49d2b90]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x558ea4a076d0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x558ea49d3a30]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x558ea4a077c0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x558ea49d36b0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x558ea4a078d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x558ea49d3120]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x558ea4a07980]:   %4 = add i64 %1, 1 {
	[0x558ea49868e0]:  %5 = add i64 %1, 1
	}

[0x558ea4a1d5b0]:   store i64 %4, i64* %PC, align 8 {
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	}

[0x558ea4a1d618]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	}

[0x558ea4a1d690]:   %6 = add i64 %5, -8 {
	[0x558ea4a2c5b0]:  %8 = add i64 %7, -8
	}

[0x558ea4a1d6f8]:   %7 = inttoptr i64 %6 to i64* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	}

[0x558ea4a1d770]:   store i64 %3, i64* %7, align 8 {
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	}

[0x558ea4a1d7d8]:   %8 = load i64, i64* %PC, align 8 {
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1d850]:   %17 = and i8 %16, 1 {
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1d8e0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x558ea4a1d960]:   %9 = add i64 %5, -24 {
	[0x558ea4a2e330]:  %11 = add i64 %7, -24
	}

[0x558ea4a1d9e0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	}

[0x558ea4a1da60]:   %10 = icmp ult i64 %6, 16 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	}

[0x558ea4a1dac8]:   %11 = zext i1 %10 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	}

[0x558ea4a1db70]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x558ea4a2c100]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x558ea4a1dc00]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	}

[0x558ea4a1dc68]:   %13 = trunc i64 %9 to i32 {
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	}

[0x558ea4a1dce0]:   %14 = and i32 %13, 255 {
	[0x558ea4a2ea60]:  %16 = and i32 %15, 255
	}

[0x558ea4a1dda0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x558ea4a2db20]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x558ea4a1de18]:   %16 = trunc i32 %15 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	}

[0x558ea4a1de90]:   %33 = xor i64 %29, %32 {
	[0x558ea4a517e0]:  %35 = xor i64 %31, %34
	}

[0x558ea4a1df10]:   %34 = add nuw nsw i64 %33, %32 {
	[0x558ea4a548e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558ea4a1dfa0]:   %18 = xor i8 %17, 1 {
	[0x558ea4a2ecc0]:  %20 = xor i8 %19, 1
	[0x558ea4b01960]:  %59 = xor i8 %58, 1
	}

[0x558ea4a1e050]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x558ea4a2edc0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x558ea4a1e0e0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	}

[0x558ea4a1e160]:   %20 = xor i64 %6, 16 {
	[0x558ea4a4e550]:  %22 = xor i64 %8, 16
	}

[0x558ea4a1e1e0]:   %21 = xor i64 %20, %9 {
	[0x558ea4a2f320]:  %23 = xor i64 %22, %11
	}

[0x558ea4a1e260]:   %22 = lshr i64 %21, 4 {
	[0x558ea4a2f3f0]:  %24 = lshr i64 %23, 4
	}

[0x558ea4a1e2c8]:   %23 = trunc i64 %22 to i8 {
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	}

[0x558ea4a1e340]:   %24 = and i8 %23, 1 {
	[0x558ea4a2e030]:  %26 = and i8 %25, 1
	}

[0x558ea4a1e3f0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x558ea4a31b30]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x558ea4a1e480]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	}

[0x558ea4a1e500]:   %26 = icmp eq i64 %9, 0 {
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	}

[0x558ea4a1e568]:   %27 = zext i1 %26 to i8 {
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	}

[0x558ea4a1e610]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x558ea4a30650]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x558ea4a1e6a0]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	}

[0x558ea4a1e720]:   %29 = lshr i64 %9, 63 {
	[0x558ea4a2ffe0]:  %31 = lshr i64 %11, 63
	}

[0x558ea4a1e788]:   %30 = trunc i64 %29 to i8 {
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	}

[0x558ea4a1e830]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x558ea4a37450]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x558ea4a1e8c0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	}

[0x558ea4a1e940]:   %32 = lshr i64 %6, 63 {
	[0x558ea4a2d940]:  %34 = lshr i64 %8, 63
	}

[0x558ea4a1e9a8]:   %65 = zext i1 %64 to i8 {
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	}

[0x558ea4a1ea20]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	}

[0x558ea4a1eaa0]:   %66 = lshr i64 %50, 63 {
	[0x558ea4a50a70]:  %67 = lshr i64 %51, 63
	}

[0x558ea4a1eb08]:   %67 = trunc i64 %66 to i8 {
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1ebd0]:   %35 = icmp eq i64 %34, 2 {
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	}

[0x558ea4a1ec38]:   %36 = zext i1 %35 to i8 {
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	}

[0x558ea4a1ece0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x558ea4a376b0]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x558ea4a1ed70]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	}

[0x558ea4a1edf0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	}

[0x558ea4a1ee70]:   %38 = add i64 %5, -12 {
	[0x558ea4a399f0]:  %40 = add i64 %7, -12
	}

[0x558ea4a1eef0]:   %39 = add i64 %8, 19 {
	[0x558ea4a39b20]:  %41 = add i64 %10, 19
	}

[0x558ea4a1ef70]:   store i64 %39, i64* %PC, align 8 {
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	}

[0x558ea4a1efd8]:   %40 = inttoptr i64 %38 to i32* {
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558ea4a1f050]:   store i32 0, i32* %40, align 4 {
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	}

[0x558ea4a1f0b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	}

[0x558ea4a1f170]:   %42 = add i64 %41, -84 {
	[0x558ea4a6f9a0]:  %44 = add i64 %43, -84
	}

[0x558ea4a1f1f0]:   %43 = add i64 %41, 5 {
	[0x558ea4ae5630]:  %45 = add i64 %43, 5
	}

[0x558ea4a1f258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	}

[0x558ea4a1f2d0]:   %45 = add i64 %44, -8 {
	[0x558ea4ae7e50]:  %47 = add i64 %46, -8
	}

[0x558ea4a1f338]:   %46 = inttoptr i64 %45 to i64* {
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	}

[0x558ea4a1f3b0]:   store i64 %43, i64* %46, align 8 {
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	}

[0x558ea4a1f430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	}

[0x558ea4a1f4b0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	}

[0x558ea4a1f5b0]:   %47 = tail call %struct.Memory* @sub_400470_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x558ea4a377e0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x558ea4a1f678]:   %48 = load i64, i64* %RSP, align 8 {
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	}

[0x558ea4a1f6d8]:   %49 = load i64, i64* %PC, align 8 {
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	}

[0x558ea4a1f750]:   %50 = add i64 %48, 16 {
	[0x558ea4aeeb30]:  %51 = add i64 %49, 16
	}

[0x558ea4a1f7d0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	}

[0x558ea4a1f890]:   %51 = icmp ugt i64 %48, -17 {
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a1f8f8]:   %52 = zext i1 %51 to i8 {
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	}

[0x558ea4a1f970]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f9d8]:   %53 = trunc i64 %50 to i32 {
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	}

[0x558ea4a1fa50]:   %54 = and i32 %53, 255 {
	[0x558ea4af7220]:  %55 = and i32 %54, 255
	}

[0x558ea4a1fad0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x558ea4a2ae90]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	}

[0x558ea4a1fc10]:   %57 = and i8 %56, 1 {
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1fc90]:   %58 = xor i8 %57, 1 {
	[0x558ea4a2ecc0]:  %20 = xor i8 %19, 1
	[0x558ea4b01960]:  %59 = xor i8 %58, 1
	}

[0x558ea4a1fd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	}

[0x558ea4a1fd90]:   %59 = xor i64 %48, 16 {
	[0x558ea49eaf00]:  %60 = xor i64 %49, 16
	}

[0x558ea4a1fe10]:   %60 = xor i64 %59, %50 {
	[0x558ea4993020]:  %61 = xor i64 %60, %51
	}

[0x558ea4a1fe90]:   %61 = lshr i64 %60, 4 {
	[0x558ea4997eb0]:  %62 = lshr i64 %61, 4
	}

[0x558ea4a1fef8]:   %62 = trunc i64 %61 to i8 {
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	}

[0x558ea4a1ff70]:   %63 = and i8 %62, 1 {
	[0x558ea4a4f560]:  %64 = and i8 %63, 1
	}

[0x558ea4a1fff0]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	}

[0x558ea4a20070]:   %64 = icmp eq i64 %50, 0 {
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	}

[0x558ea4a20500]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	}

[0x558ea4a20580]:   %68 = lshr i64 %48, 63 {
	[0x558ea4a50fa0]:  %69 = lshr i64 %49, 63
	}

[0x558ea4a20600]:   %69 = xor i64 %66, %68 {
	[0x558ea4a518e0]:  %70 = xor i64 %67, %69
	}

[0x558ea4a20680]:   %70 = add nuw nsw i64 %69, %66 {
	[0x558ea4a4bbb0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x558ea4a20700]:   %71 = icmp eq i64 %70, 2 {
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	}

[0x558ea4a20768]:   %72 = zext i1 %71 to i8 {
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a207e0]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	}

[0x558ea4a20860]:   %73 = add i64 %49, 5 {
	[0x558ea4a53030]:  %74 = add i64 %50, 5
	}

[0x558ea4a208e0]:   store i64 %73, i64* %PC, align 8 {
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	}

[0x558ea4a20960]:   %74 = add i64 %48, 24 {
	[0x558ea4a2da30]:  %75 = add i64 %49, 24
	}

[0x558ea4a209c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	}

[0x558ea4a20a28]:   %76 = load i64, i64* %75, align 8 {
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	}

[0x558ea4a20aa0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x558ea4a20b20]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	}

[0x558ea4a20ba0]:   %77 = add i64 %49, 6 {
	[0x558ea4a575d0]:  %78 = add i64 %50, 6
	}

[0x558ea4a20c20]:   store i64 %77, i64* %PC, align 8 {
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	}

[0x558ea4a20c88]:   %78 = inttoptr i64 %74 to i64* {
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a20ce8]:   %79 = load i64, i64* %78, align 8 {
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	}

[0x558ea4a20d60]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	}

[0x558ea4a20de0]:   %80 = add i64 %48, 32 {
	[0x558ea4a519b0]:  %81 = add i64 %49, 32
	}

[0x558ea4a20e60]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	}

[0x558ea4a20ec8]:   ret %struct.Memory* %47 {
	[0x558ea4a36888]:  ret %struct.Memory.31* %call2_4004c4
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x558ea4a07390]: block_4004b0 {
	[0x558ea4a4c320]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x558ea4b01960]:   %59 = xor i8 %58, 1
From the pot matches of: [0x558ea4a1dfa0]:   %18 = xor i8 %17, 1


Uprime : [0x558ea4a1e0e0]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x558ea4a2eea0]:   store i8 %20, i8* %21, align 1


Adj: [0x558ea49eb360]:   store i8 %59, i8* %21, align 1


Removing: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x558ea4a1fc90]:   %58 = xor i8 %57, 1


Uprime : [0x558ea4a1fd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x558ea49eb360]:   store i8 %59, i8* %21, align 1


Adj: [0x558ea4a2eea0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x558ea4a67aa0]:   %58 = and i8 %57, 1
From the pot matches of: [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime : [0x558ea4a1dfa0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1


Adj: [0x558ea4b01960]:   %59 = xor i8 %58, 1


Removing: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1
From the pot matches of: [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime : [0x558ea4a1fc90]:   %58 = xor i8 %57, 1


Uprime Matches: [0x558ea4b01960]:   %59 = xor i8 %58, 1


Adj: [0x558ea4a2ecc0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x558ea4a30538]:   %57 = trunc i32 %56 to i8
From the pot matches of: [0x558ea4a1de18]:   %16 = trunc i32 %15 to i8


Uprime : [0x558ea4a1d850]:   %17 = and i8 %16, 1


Uprime Matches: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1


Adj: [0x558ea4a67aa0]:   %58 = and i8 %57, 1


Removing: [0x558ea49854e8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8


Uprime : [0x558ea4a1fc10]:   %57 = and i8 %56, 1


Uprime Matches: [0x558ea4a67aa0]:   %58 = and i8 %57, 1


Adj: [0x558ea4a4dcd0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x558ea4a072b0]: %struct.State* %0 {
	[0x558ea4a54a20]:%struct.State.0* %0
	}

[0x558ea4a072f0]: i64 %1 {
	[0x558ea4a58090]:i64 %1
	}

[0x558ea4a07330]: %struct.Memory* %2 {
	[0x558ea4a33c00]:%struct.Memory.31* %2
	}

[0x558ea4a07508]:   %3 = load i64, i64* %RBP, align 8 {
	[0x558ea4995508]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x558ea4a075e0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x558ea49d2b90]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x558ea4a076d0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x558ea49d3a30]:  %RDI.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x558ea4a077c0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x558ea49d36b0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x558ea4a078d0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x558ea49d3120]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x558ea4a07980]:   %4 = add i64 %1, 1 {
	[0x558ea49868e0]:  %5 = add i64 %1, 1
	}

[0x558ea4a1d5b0]:   store i64 %4, i64* %PC, align 8 {
	[0x558ea4a2c4a0]:  store i64 %5, i64* %3, align 8
	}

[0x558ea4a1d618]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4998d58]:  %7 = load i64, i64* %6, align 8
	}

[0x558ea4a1d690]:   %6 = add i64 %5, -8 {
	[0x558ea4a2c5b0]:  %8 = add i64 %7, -8
	}

[0x558ea4a1d6f8]:   %7 = inttoptr i64 %6 to i64* {
	[0x558ea499b748]:  %9 = inttoptr i64 %8 to i64*
	}

[0x558ea4a1d770]:   store i64 %3, i64* %7, align 8 {
	[0x558ea4a2d570]:  store i64 %4, i64* %9, align 8
	}

[0x558ea4a1d7d8]:   %8 = load i64, i64* %PC, align 8 {
	[0x558ea4a6c6d8]:  %10 = load i64, i64* %3, align 8
	}

[0x558ea4a1d850]:   %17 = and i8 %16, 1 {
	[0x558ea4a4dcd0]:  %19 = and i8 %18, 1
	}

[0x558ea4a1d8e0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x558ea4a2bb00]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x558ea4a1d960]:   %9 = add i64 %5, -24 {
	[0x558ea4a2e330]:  %11 = add i64 %7, -24
	}

[0x558ea4a1d9e0]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a2e730]:  store i64 %11, i64* %6, align 8
	}

[0x558ea4a1da60]:   %10 = icmp ult i64 %6, 16 {
	[0x558ea4a2e840]:  %12 = icmp ult i64 %8, 16
	}

[0x558ea4a1dac8]:   %11 = zext i1 %10 to i8 {
	[0x558ea499a808]:  %13 = zext i1 %12 to i8
	}

[0x558ea4a1db70]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x558ea4a2c100]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x558ea4a1dc00]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x558ea4a2e950]:  store i8 %13, i8* %14, align 1
	}

[0x558ea4a1dc68]:   %13 = trunc i64 %9 to i32 {
	[0x558ea4a201d8]:  %15 = trunc i64 %11 to i32
	}

[0x558ea4a1dce0]:   %14 = and i32 %13, 255 {
	[0x558ea4a2ea60]:  %16 = and i32 %15, 255
	}

[0x558ea4a1dda0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x558ea4a2db20]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x558ea4a1de18]:   %16 = trunc i32 %15 to i8 {
	[0x558ea49854e8]:  %18 = trunc i32 %17 to i8
	}

[0x558ea4a1de90]:   %33 = xor i64 %29, %32 {
	[0x558ea4a517e0]:  %35 = xor i64 %31, %34
	}

[0x558ea4a1df10]:   %34 = add nuw nsw i64 %33, %32 {
	[0x558ea4a548e0]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558ea4a1dfa0]:   %18 = xor i8 %17, 1 {
	[0x558ea4a2ecc0]:  %20 = xor i8 %19, 1
	}

[0x558ea4a1e050]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x558ea4a2edc0]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x558ea4a1e0e0]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x558ea4a2eea0]:  store i8 %20, i8* %21, align 1
	}

[0x558ea4a1e160]:   %20 = xor i64 %6, 16 {
	[0x558ea4a4e550]:  %22 = xor i64 %8, 16
	}

[0x558ea4a1e1e0]:   %21 = xor i64 %20, %9 {
	[0x558ea4a2f320]:  %23 = xor i64 %22, %11
	}

[0x558ea4a1e260]:   %22 = lshr i64 %21, 4 {
	[0x558ea4a2f3f0]:  %24 = lshr i64 %23, 4
	}

[0x558ea4a1e2c8]:   %23 = trunc i64 %22 to i8 {
	[0x558ea4a29778]:  %25 = trunc i64 %24 to i8
	}

[0x558ea4a1e340]:   %24 = and i8 %23, 1 {
	[0x558ea4a2e030]:  %26 = and i8 %25, 1
	}

[0x558ea4a1e3f0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x558ea4a31b30]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x558ea4a1e480]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x558ea4a2f940]:  store i8 %26, i8* %27, align 1
	}

[0x558ea4a1e500]:   %26 = icmp eq i64 %9, 0 {
	[0x558ea4a2fba0]:  %28 = icmp eq i64 %11, 0
	}

[0x558ea4a1e568]:   %27 = zext i1 %26 to i8 {
	[0x558ea4a29808]:  %29 = zext i1 %28 to i8
	}

[0x558ea4a1e610]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x558ea4a30650]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x558ea4a1e6a0]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x558ea4a2fed0]:  store i8 %29, i8* %30, align 1
	}

[0x558ea4a1e720]:   %29 = lshr i64 %9, 63 {
	[0x558ea4a2ffe0]:  %31 = lshr i64 %11, 63
	}

[0x558ea4a1e788]:   %30 = trunc i64 %29 to i8 {
	[0x558ea4a2ba48]:  %32 = trunc i64 %31 to i8
	}

[0x558ea4a1e830]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x558ea4a37450]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x558ea4a1e8c0]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x558ea4a50960]:  store i8 %32, i8* %33, align 1
	}

[0x558ea4a1e940]:   %32 = lshr i64 %6, 63 {
	[0x558ea4a2d940]:  %34 = lshr i64 %8, 63
	}

[0x558ea4a1e9a8]:   %65 = zext i1 %64 to i8 {
	[0x558ea4a33b68]:  %66 = zext i1 %65 to i8
	}

[0x558ea4a1ea20]:   store i8 %65, i8* %28, align 1, !tbaa !1277 {
	[0x558ea4a50890]:  store i8 %66, i8* %30, align 1
	}

[0x558ea4a1eaa0]:   %66 = lshr i64 %50, 63 {
	[0x558ea4a50a70]:  %67 = lshr i64 %51, 63
	}

[0x558ea4a1eb08]:   %67 = trunc i64 %66 to i8 {
	[0x558ea4a34158]:  %68 = trunc i64 %67 to i8
	}

[0x558ea4a1ebd0]:   %35 = icmp eq i64 %34, 2 {
	[0x558ea4a4f0f0]:  %37 = icmp eq i64 %36, 2
	}

[0x558ea4a1ec38]:   %36 = zext i1 %35 to i8 {
	[0x558ea4a2b1a8]:  %38 = zext i1 %37 to i8
	}

[0x558ea4a1ece0]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x558ea4a376b0]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x558ea4a1ed70]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x558ea4a330a0]:  store i8 %38, i8* %39, align 1
	}

[0x558ea4a1edf0]:   store i64 10, i64* %RDI, align 8, !tbaa !1257 {
	[0x558ea4a398c0]:  store i64 10, i64* %RDI.i, align 8
	}

[0x558ea4a1ee70]:   %38 = add i64 %5, -12 {
	[0x558ea4a399f0]:  %40 = add i64 %7, -12
	}

[0x558ea4a1eef0]:   %39 = add i64 %8, 19 {
	[0x558ea4a39b20]:  %41 = add i64 %10, 19
	}

[0x558ea4a1ef70]:   store i64 %39, i64* %PC, align 8 {
	[0x558ea4a39c50]:  store i64 %41, i64* %3, align 8
	}

[0x558ea4a1efd8]:   %40 = inttoptr i64 %38 to i32* {
	[0x558ea4a30aa8]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558ea4a1f050]:   store i32 0, i32* %40, align 4 {
	[0x558ea4a6dac0]:  store i32 0, i32* %42, align 4
	}

[0x558ea4a1f0b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x558ea4a30e38]:  %43 = load i64, i64* %3, align 8
	}

[0x558ea4a1f170]:   %42 = add i64 %41, -84 {
	[0x558ea4a6f9a0]:  %44 = add i64 %43, -84
	}

[0x558ea4a1f1f0]:   %43 = add i64 %41, 5 {
	[0x558ea4ae5630]:  %45 = add i64 %43, 5
	}

[0x558ea4a1f258]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a30f68]:  %46 = load i64, i64* %6, align 8
	}

[0x558ea4a1f2d0]:   %45 = add i64 %44, -8 {
	[0x558ea4ae7e50]:  %47 = add i64 %46, -8
	}

[0x558ea4a1f338]:   %46 = inttoptr i64 %45 to i64* {
	[0x558ea4a31558]:  %48 = inttoptr i64 %47 to i64*
	}

[0x558ea4a1f3b0]:   store i64 %43, i64* %46, align 8 {
	[0x558ea4ae6940]:  store i64 %45, i64* %48, align 8
	}

[0x558ea4a1f430]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4aed390]:  store i64 %47, i64* %6, align 8
	}

[0x558ea4a1f4b0]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x558ea4aec5c0]:  store i64 %44, i64* %3, align 8
	}

[0x558ea4a1f5b0]:   %47 = tail call %struct.Memory* @sub_400470_sum_2_n(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x558ea4a377e0]:  %call2_4004c4 = tail call %struct.Memory.31* @sub_400470.sum_2_n(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x558ea4a1f678]:   %48 = load i64, i64* %RSP, align 8 {
	[0x558ea4a318e8]:  %49 = load i64, i64* %6, align 8
	}

[0x558ea4a1f6d8]:   %49 = load i64, i64* %PC, align 8 {
	[0x558ea4a31a18]:  %50 = load i64, i64* %3, align 8
	}

[0x558ea4a1f750]:   %50 = add i64 %48, 16 {
	[0x558ea4aeeb30]:  %51 = add i64 %49, 16
	}

[0x558ea4a1f7d0]:   store i64 %50, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4af1320]:  store i64 %51, i64* %6, align 8
	}

[0x558ea4a1f890]:   %51 = icmp ugt i64 %48, -17 {
	[0x558ea4aefe80]:  %52 = icmp ugt i64 %49, -17
	}

[0x558ea4a1f8f8]:   %52 = zext i1 %51 to i8 {
	[0x558ea4a325f8]:  %53 = zext i1 %52 to i8
	}

[0x558ea4a1f970]:   store i8 %52, i8* %12, align 1, !tbaa !1261 {
	[0x558ea4af2e50]:  store i8 %53, i8* %14, align 1
	}

[0x558ea4a1f9d8]:   %53 = trunc i64 %50 to i32 {
	[0x558ea4a32728]:  %54 = trunc i64 %51 to i32
	}

[0x558ea4a1fa50]:   %54 = and i32 %53, 255 {
	[0x558ea4af7220]:  %55 = and i32 %54, 255
	}

[0x558ea4a1fad0]:   %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9 {
	[0x558ea4a2ae90]:  %56 = tail call i32 @llvm.ctpop.i32(i32 %55)
	}

[0x558ea4a1fb98]:   %56 = trunc i32 %55 to i8 {
	[0x558ea4a30538]:  %57 = trunc i32 %56 to i8
	}

[0x558ea4a1fc10]:   %57 = and i8 %56, 1 {
	[0x558ea4a67aa0]:  %58 = and i8 %57, 1
	}

[0x558ea4a1fc90]:   %58 = xor i8 %57, 1 {
	[0x558ea4b01960]:  %59 = xor i8 %58, 1
	}

[0x558ea4a1fd10]:   store i8 %58, i8* %19, align 1, !tbaa !1275 {
	[0x558ea49eb360]:  store i8 %59, i8* %21, align 1
	}

[0x558ea4a1fd90]:   %59 = xor i64 %48, 16 {
	[0x558ea49eaf00]:  %60 = xor i64 %49, 16
	}

[0x558ea4a1fe10]:   %60 = xor i64 %59, %50 {
	[0x558ea4993020]:  %61 = xor i64 %60, %51
	}

[0x558ea4a1fe90]:   %61 = lshr i64 %60, 4 {
	[0x558ea4997eb0]:  %62 = lshr i64 %61, 4
	}

[0x558ea4a1fef8]:   %62 = trunc i64 %61 to i8 {
	[0x558ea4a337d8]:  %63 = trunc i64 %62 to i8
	}

[0x558ea4a1ff70]:   %63 = and i8 %62, 1 {
	[0x558ea4a4f560]:  %64 = and i8 %63, 1
	}

[0x558ea4a1fff0]:   store i8 %63, i8* %25, align 1, !tbaa !1276 {
	[0x558ea4a50240]:  store i8 %64, i8* %27, align 1
	}

[0x558ea4a20070]:   %64 = icmp eq i64 %50, 0 {
	[0x558ea4a4ffd0]:  %65 = icmp eq i64 %51, 0
	}

[0x558ea4a20500]:   store i8 %67, i8* %31, align 1, !tbaa !1278 {
	[0x558ea4a51430]:  store i8 %68, i8* %33, align 1
	}

[0x558ea4a20580]:   %68 = lshr i64 %48, 63 {
	[0x558ea4a50fa0]:  %69 = lshr i64 %49, 63
	}

[0x558ea4a20600]:   %69 = xor i64 %66, %68 {
	[0x558ea4a518e0]:  %70 = xor i64 %67, %69
	}

[0x558ea4a20680]:   %70 = add nuw nsw i64 %69, %66 {
	[0x558ea4a4bbb0]:  %71 = add nuw nsw i64 %70, %67
	}

[0x558ea4a20700]:   %71 = icmp eq i64 %70, 2 {
	[0x558ea4a537a0]:  %72 = icmp eq i64 %71, 2
	}

[0x558ea4a20768]:   %72 = zext i1 %71 to i8 {
	[0x558ea4a34288]:  %73 = zext i1 %72 to i8
	}

[0x558ea4a207e0]:   store i8 %72, i8* %37, align 1, !tbaa !1279 {
	[0x558ea4a53ea0]:  store i8 %73, i8* %39, align 1
	}

[0x558ea4a20860]:   %73 = add i64 %49, 5 {
	[0x558ea4a53030]:  %74 = add i64 %50, 5
	}

[0x558ea4a208e0]:   store i64 %73, i64* %PC, align 8 {
	[0x558ea4a54420]:  store i64 %74, i64* %3, align 8
	}

[0x558ea4a20960]:   %74 = add i64 %48, 24 {
	[0x558ea4a2da30]:  %75 = add i64 %49, 24
	}

[0x558ea4a209c8]:   %75 = inttoptr i64 %50 to i64* {
	[0x558ea4a34748]:  %76 = inttoptr i64 %51 to i64*
	}

[0x558ea4a20a28]:   %76 = load i64, i64* %75, align 8 {
	[0x558ea4a349a8]:  %77 = load i64, i64* %76, align 8
	}

[0x558ea4a20aa0]:   store i64 %76, i64* %RBP, align 8, !tbaa !1257 {
	[0x558ea4a55280]:  store i64 %77, i64* %RBP.i, align 8
	}

[0x558ea4a20b20]:   store i64 %74, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a570c0]:  store i64 %75, i64* %6, align 8
	}

[0x558ea4a20ba0]:   %77 = add i64 %49, 6 {
	[0x558ea4a575d0]:  %78 = add i64 %50, 6
	}

[0x558ea4a20c20]:   store i64 %77, i64* %PC, align 8 {
	[0x558ea4a57c20]:  store i64 %78, i64* %3, align 8
	}

[0x558ea4a20c88]:   %78 = inttoptr i64 %74 to i64* {
	[0x558ea4a350c8]:  %79 = inttoptr i64 %75 to i64*
	}

[0x558ea4a20ce8]:   %79 = load i64, i64* %78, align 8 {
	[0x558ea4a35ca8]:  %80 = load i64, i64* %79, align 8
	}

[0x558ea4a20d60]:   store i64 %79, i64* %PC, align 8, !tbaa !1257 {
	[0x558ea4a57d10]:  store i64 %80, i64* %3, align 8
	}

[0x558ea4a20de0]:   %80 = add i64 %48, 32 {
	[0x558ea4a519b0]:  %81 = add i64 %49, 32
	}

[0x558ea4a20e60]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x558ea4a4ed50]:  store i64 %81, i64* %6, align 8
	}

[0x558ea4a20ec8]:   ret %struct.Memory* %47 {
	[0x558ea4a36888]:  ret %struct.Memory.31* %call2_4004c4
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x558ea4a07390]: block_4004b0 {
	[0x558ea4a4c320]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Exiting Simple Matcher ...
