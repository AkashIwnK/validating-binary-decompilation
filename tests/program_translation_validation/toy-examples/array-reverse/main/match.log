Matching sub_400510_main Vs main


[Info] Retrieve Potential Matches...
[0x561df4fd21d0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x561df500e720]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x561df4fd22c0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x561df5048810]:  %RAX.i17 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x561df4fd23b0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x561df5048b70]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x561df4fd24c0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x561df50489e0]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x561df4fd25d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x561df504bd30]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x561df4fd26e0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x561df504c090]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x561df4fd2790]:   %4 = add i64 %1, 1 {
	[0x561df4fec810]:  %5 = add i64 %1, 1
	}

[0x561df4fd2810]:   store i64 %4, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd2878]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd28f0]:   %6 = add i64 %5, -8 {
	[0x561df4fec480]:  %8 = add i64 %7, -8
	[0x561df4ff1880]:  %59 = add i64 %58, -8
	}

[0x561df4fd2958]:   %7 = inttoptr i64 %6 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd29d0]:   store i64 %3, i64* %7, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd2ab0]:   %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #9 {
	[0x561df4ff0f90]:  %call2_400540 = tail call %struct.Memory.32* @sub_400490.array_reverse(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	[0x561df50307b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x561df5073c50]:  %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
	}

[0x561df4fd2b40]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd2c00]:   %9 = add i64 %5, -40 {
	[0x561df505df70]:  %11 = add i64 %7, -40
	[0x561df5061b80]:  %39 = add i64 %7, -40
	}

[0x561df4fd2c80]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd2d00]:   %10 = icmp ult i64 %6, 32 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd2d68]:   %11 = zext i1 %10 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd2e10]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x561df51367b0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x561df4fd2ea0]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd2f08]:   %13 = trunc i64 %9 to i32 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd2f80]:   %14 = and i32 %13, 255 {
	[0x561df4ff7800]:  %73 = and i32 %72, 255
	[0x561df505fc80]:  %16 = and i32 %15, 255
	}

[0x561df4fd3040]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x561df4ff0f90]:  %call2_400540 = tail call %struct.Memory.32* @sub_400490.array_reverse(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	[0x561df50307b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x561df5073c50]:  %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
	}

[0x561df4fd30b8]:   %16 = trunc i32 %15 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd3130]:   %17 = and i8 %16, 1 {
	[0x561df4ff4f90]:  %81 = and i8 %80, 1
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	[0x561df505fdd0]:  %25 = and i8 %24, 1
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd31b0]:   %18 = xor i8 %17, 1 {
	[0x561df4fee4b0]:  %20 = xor i8 %19, 1
	[0x561df4ff74c0]:  %77 = xor i8 %76, 1
	}

[0x561df4fd3260]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x561df50579e0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x561df4fd32f0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd3370]:   %20 = xor i64 %6, %9 {
	[0x561df4fede30]:  %22 = xor i64 %8, %11
	[0x561df4fee760]:  %34 = xor i64 %30, %33
	[0x561df4feec30]:  %87 = xor i64 %84, %86
	[0x561df4ff7200]:  %78 = xor i64 %69, %68
	}

[0x561df4fd33f0]:   %21 = lshr i64 %20, 4 {
	[0x561df4ff5750]:  %79 = lshr i64 %78, 4
	[0x561df5060ca0]:  %23 = lshr i64 %22, 4
	}

[0x561df4fd3458]:   %22 = trunc i64 %21 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd34d0]:   %23 = and i8 %22, 1 {
	[0x561df4ff4f90]:  %81 = and i8 %80, 1
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	[0x561df505fdd0]:  %25 = and i8 %24, 1
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd3580]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x561df5069f30]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x561df4fd3610]:   store i8 %23, i8* %24, align 1, !tbaa !1280 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd3690]:   %25 = icmp eq i64 %9, 0 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd36f8]:   %26 = zext i1 %25 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd37a0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x561df4ff9760]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x561df4fd3830]:   store i8 %26, i8* %27, align 1, !tbaa !1281 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd38f0]:   %28 = lshr i64 %9, 63 {
	[0x561df4feed10]:  %86 = lshr i64 %68, 63
	[0x561df4fef040]:  %84 = lshr i64 %69, 63
	[0x561df4fef6c0]:  %30 = lshr i64 %11, 63
	[0x561df505ffd0]:  %33 = lshr i64 %8, 63
	}

[0x561df4fd3958]:   %29 = trunc i64 %28 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd3a00]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x561df4ff4c10]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x561df4fd3a90]:   store i8 %29, i8* %30, align 1, !tbaa !1282 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd3b10]:   %31 = lshr i64 %6, 63 {
	[0x561df4feed10]:  %86 = lshr i64 %68, 63
	[0x561df4fef040]:  %84 = lshr i64 %69, 63
	[0x561df4fef6c0]:  %30 = lshr i64 %11, 63
	[0x561df505ffd0]:  %33 = lshr i64 %8, 63
	}

[0x561df4fd3b90]:   %32 = xor i64 %28, %31 {
	[0x561df4fede30]:  %22 = xor i64 %8, %11
	[0x561df4fee760]:  %34 = xor i64 %30, %33
	[0x561df4feec30]:  %87 = xor i64 %84, %86
	[0x561df4ff7200]:  %78 = xor i64 %69, %68
	}

[0x561df4fd3c10]:   %33 = add nuw nsw i64 %32, %31 {
	[0x561df4ff7c10]:  %88 = add nuw nsw i64 %87, %84
	[0x561df5061850]:  %35 = add nuw nsw i64 %34, %33
	}

[0x561df4fd3c90]:   %34 = icmp eq i64 %33, 2 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd3cf8]:   %35 = zext i1 %34 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd3da0]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x561df4ff1200]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x561df4fd3e30]:   store i8 %35, i8* %36, align 1, !tbaa !1283 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd3eb0]:   store i64 4, i64* %RSI, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd3f30]:   %37 = add i64 %5, -40 {
	[0x561df505df70]:  %11 = add i64 %7, -40
	[0x561df5061b80]:  %39 = add i64 %7, -40
	}

[0x561df4fd3fb0]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4030]:   %38 = add i64 %5, -12 {
	[0x561df4ff0000]:  %40 = add i64 %7, -12
	}

[0x561df4fd40f0]:   %39 = add i64 %8, 23 {
	[0x561df4fefea0]:  %41 = add i64 %10, 23
	}

[0x561df4fd4170]:   store i64 %39, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd41d8]:   %40 = inttoptr i64 %38 to i32* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd4250]:   store i32 0, i32* %40, align 4 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd4458]:   %43 = load i64, i64* %RBP, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd4510]:   %44 = add i64 %43, -32 {
	[0x561df4ff0b20]:  %46 = add i64 %45, -32
	[0x561df4ff47d0]:  %62 = add i64 %61, -32
	}

[0x561df4fd4590]:   %45 = add i64 %41, 12 {
	[0x561df4ff0980]:  %47 = add i64 %43, 12
	[0x561df4ff1480]:  %53 = add i64 %49, 12
	}

[0x561df4fd4610]:   store i64 %45, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4678]:   %46 = inttoptr i64 %44 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd46f0]:   store i64 %42, i64* %46, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4978]:   %49 = load i64, i64* %RBP, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd49f0]:   %50 = add i64 %49, -24 {
	[0x561df5061eb0]:  %52 = add i64 %51, -24
	}

[0x561df4fd4a70]:   %51 = add i64 %47, 12 {
	[0x561df4ff0980]:  %47 = add i64 %43, 12
	[0x561df4ff1480]:  %53 = add i64 %49, 12
	}

[0x561df4fd4af0]:   store i64 %51, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4b58]:   %52 = inttoptr i64 %50 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd4cf0]:   %54 = add i64 %53, -176 {
	[0x561df4ff1c10]:  %56 = add i64 %55, -176
	}

[0x561df4fd4d70]:   %55 = add i64 %53, 5 {
	[0x561df4ff19e0]:  %57 = add i64 %55, 5
	}

[0x561df4fd4dd8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd4e50]:   %57 = add i64 %56, -8 {
	[0x561df4fec480]:  %8 = add i64 %7, -8
	[0x561df4ff1880]:  %59 = add i64 %58, -8
	}

[0x561df4fd4eb8]:   %58 = inttoptr i64 %57 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd4f30]:   store i64 %55, i64* %58, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4fb0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd5030]:   store i64 %54, i64* %PC, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd60d0]:   %68 = add i64 %67, 32 {
	[0x561df4ff4200]:  %69 = add i64 %68, 32
	}

[0x561df4fd6150]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6210]:   %69 = icmp ugt i64 %67, -33 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd6278]:   %70 = zext i1 %69 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd62f0]:   store i8 %70, i8* %12, align 1, !tbaa !1265 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6358]:   %71 = trunc i64 %68 to i32 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd63d0]:   %72 = and i32 %71, 255 {
	[0x561df4ff7800]:  %73 = and i32 %72, 255
	[0x561df505fc80]:  %16 = and i32 %15, 255
	}

[0x561df4fd6488]:   %74 = trunc i32 %73 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd6500]:   %75 = and i8 %74, 1 {
	[0x561df4ff4f90]:  %81 = and i8 %80, 1
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	[0x561df505fdd0]:  %25 = and i8 %24, 1
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd6580]:   %76 = xor i8 %75, 1 {
	[0x561df4fee4b0]:  %20 = xor i8 %19, 1
	[0x561df4ff74c0]:  %77 = xor i8 %76, 1
	}

[0x561df4fd6600]:   store i8 %76, i8* %19, align 1, !tbaa !1279 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6680]:   %77 = xor i64 %68, %67 {
	[0x561df4fede30]:  %22 = xor i64 %8, %11
	[0x561df4fee760]:  %34 = xor i64 %30, %33
	[0x561df4feec30]:  %87 = xor i64 %84, %86
	[0x561df4ff7200]:  %78 = xor i64 %69, %68
	}

[0x561df4fd6700]:   %78 = lshr i64 %77, 4 {
	[0x561df4ff5750]:  %79 = lshr i64 %78, 4
	[0x561df5060ca0]:  %23 = lshr i64 %22, 4
	}

[0x561df4fd6768]:   %79 = trunc i64 %78 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd67e0]:   %80 = and i8 %79, 1 {
	[0x561df4ff4f90]:  %81 = and i8 %80, 1
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	[0x561df505fdd0]:  %25 = and i8 %24, 1
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd6860]:   store i8 %80, i8* %24, align 1, !tbaa !1280 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd68e0]:   %81 = icmp eq i64 %68, 0 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd6948]:   %82 = zext i1 %81 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd69c0]:   store i8 %82, i8* %27, align 1, !tbaa !1281 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6a40]:   %83 = lshr i64 %68, 63 {
	[0x561df4feed10]:  %86 = lshr i64 %68, 63
	[0x561df4fef040]:  %84 = lshr i64 %69, 63
	[0x561df4fef6c0]:  %30 = lshr i64 %11, 63
	[0x561df505ffd0]:  %33 = lshr i64 %8, 63
	}

[0x561df4fd6aa8]:   %84 = trunc i64 %83 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd6b20]:   store i8 %84, i8* %30, align 1, !tbaa !1282 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6ba0]:   %85 = lshr i64 %67, 63 {
	[0x561df4feed10]:  %86 = lshr i64 %68, 63
	[0x561df4fef040]:  %84 = lshr i64 %69, 63
	[0x561df4fef6c0]:  %30 = lshr i64 %11, 63
	[0x561df505ffd0]:  %33 = lshr i64 %8, 63
	}

[0x561df4fd6c20]:   %86 = xor i64 %83, %85 {
	[0x561df4fede30]:  %22 = xor i64 %8, %11
	[0x561df4fee760]:  %34 = xor i64 %30, %33
	[0x561df4feec30]:  %87 = xor i64 %84, %86
	[0x561df4ff7200]:  %78 = xor i64 %69, %68
	}

[0x561df4fd6ca0]:   %87 = add nuw nsw i64 %86, %83 {
	[0x561df4ff7c10]:  %88 = add nuw nsw i64 %87, %84
	[0x561df5061850]:  %35 = add nuw nsw i64 %34, %33
	}

[0x561df4fd6d20]:   %88 = icmp eq i64 %87, 2 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd6d88]:   %89 = zext i1 %88 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd6e00]:   store i8 %89, i8* %36, align 1, !tbaa !1283 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6e80]:   %90 = add i64 %62, 8 {
	[0x561df4ffa2f0]:  %91 = add i64 %63, 8
	}

[0x561df4fd6f00]:   store i64 %90, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd6fc0]:   %91 = add i64 %67, 40 {
	[0x561df4ff9fb0]:  %92 = add i64 %68, 40
	}

[0x561df4fd7028]:   %92 = inttoptr i64 %68 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd7088]:   %93 = load i64, i64* %92, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd7100]:   store i64 %93, i64* %RBP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd7180]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd7200]:   %94 = add i64 %62, 9 {
	[0x561df4ff9b50]:  %95 = add i64 %63, 9
	}

[0x561df4fd7280]:   store i64 %94, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd72e8]:   %95 = inttoptr i64 %91 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd7348]:   %96 = load i64, i64* %95, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd73c0]:   store i64 %96, i64* %PC, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd7480]:   %97 = add i64 %67, 48 {
	[0x561df4ffd2b0]:  %98 = add i64 %68, 48
	}

[0x561df4fd7500]:   store i64 %97, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd7568]:   ret %struct.Memory* %59 {
	[0x561df5068068]:  ret %struct.Memory.32* %call2_400540
	}

[0x561df501f8b0]: %struct.State* %0 {
	[0x561df4ff0610]:%struct.State.1* %0
	}

[0x561df501f8f0]: i64 %1 {
	[0x561df4ff0360]:i64 %1
	}

[0x561df501f930]: %struct.Memory* %2 {
	[0x561df4feff50]:%struct.Memory.32* %2
	}

[0x561df501fae8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df507e070]:   %59 = tail call %struct.Memory* @sub_400490_array_reverse(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x561df4ff0f90]:  %call2_400540 = tail call %struct.Memory.32* @sub_400490.array_reverse(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	[0x561df50307b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x561df5073c50]:  %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
	}

[0x561df507e138]:   %60 = load i64, i64* %RBP, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df507e1b0]:   %61 = add i64 %60, -32 {
	[0x561df4ff0b20]:  %46 = add i64 %45, -32
	[0x561df4ff47d0]:  %62 = add i64 %61, -32
	}

[0x561df507e218]:   %62 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df507e290]:   %63 = add i64 %62, 3 {
	[0x561df4ff2d30]:  %64 = add i64 %63, 3
	}

[0x561df507e310]:   store i64 %63, i64* %PC, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df507e378]:   %64 = inttoptr i64 %61 to i32* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df507e3d8]:   %65 = load i32, i32* %64, align 4 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df507e438]:   %66 = zext i32 %65 to i64 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df507e4b0]:   store i64 %66, i64* %RAX, align 8, !tbaa !1261 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df507e518]:   %67 = load i64, i64* %RSP, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x561df5062228]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df501fae8]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd29d0]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff0b20]:   %46 = add i64 %45, -32


Removing: [0x561df5063878]:   %61 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df501fae8]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd29d0]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff47d0]:   %62 = add i64 %61, -32


Removing: [0x561df5064918]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df501fae8]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd29d0]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df5061eb0]:   %52 = add i64 %51, -24


Removing: [0x561df5064458]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd2878]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x561df4fd4030]:   %38 = add i64 %5, -12


Uprime Matches: [0x561df4ff0000]:   %40 = add i64 %7, -12


Adj: [0x561df4ff1880]:   %59 = add i64 %58, -8


Removing: [0x561df5066648]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd2878]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x561df4fd4030]:   %38 = add i64 %5, -12


Uprime Matches: [0x561df4ff0000]:   %40 = add i64 %7, -12


Adj: [0x561df4feed10]:   %86 = lshr i64 %68, 63
[0x561df4ff27a0]:   %70 = icmp ugt i64 %68, -33
[0x561df4ff4200]:   %69 = add i64 %68, 32
[0x561df4ff7200]:   %78 = xor i64 %69, %68
[0x561df4ff9fb0]:   %92 = add i64 %68, 40
[0x561df4ffd2b0]:   %98 = add i64 %68, 48


Removing: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd40f0]:   %39 = add i64 %8, 23


Uprime Matches: [0x561df4fefea0]:   %41 = add i64 %10, 23


Adj: [0x561df4ff1480]:   %53 = add i64 %49, 12


Removing: [0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd40f0]:   %39 = add i64 %8, 23


Uprime Matches: [0x561df4fefea0]:   %41 = add i64 %10, 23


Adj: [0x561df4ff0980]:   %47 = add i64 %43, 12


Removing: [0x561df50646b8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd40f0]:   %39 = add i64 %8, 23


Uprime Matches: [0x561df4fefea0]:   %41 = add i64 %10, 23


Adj: [0x561df4ff19e0]:   %57 = add i64 %55, 5
[0x561df4ff1c10]:   %56 = add i64 %55, -176


Removing: [0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd40f0]:   %39 = add i64 %8, 23


Uprime Matches: [0x561df4fefea0]:   %41 = add i64 %10, 23


Adj: [0x561df4ff2d30]:   %64 = add i64 %63, 3
[0x561df4ff9b50]:   %95 = add i64 %63, 9
[0x561df4ffa2f0]:   %91 = add i64 %63, 8


Removing: [0x561df5061b80]:   %39 = add i64 %7, -40
From the pot matches of: [0x561df4fd2c00]:   %9 = add i64 %5, -40


Uprime : [0x561df4fd38f0]:   %28 = lshr i64 %9, 63


Uprime Matches: [0x561df4feed10]:   %86 = lshr i64 %68, 63
[0x561df4fef040]:   %84 = lshr i64 %69, 63
[0x561df4fef6c0]:   %30 = lshr i64 %11, 63
[0x561df505ffd0]:   %33 = lshr i64 %8, 63


Adj: [0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8


Removing: [0x561df505dba8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df505fc80]:   %16 = and i32 %15, 255


Removing: [0x561df50662b8]:   %72 = trunc i64 %69 to i32
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4ff7800]:   %73 = and i32 %72, 255


Removing: [0x561df5067a78]:   %85 = trunc i64 %84 to i8
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4feeef0]:   store i8 %85, i8* %32, align 1


Removing: [0x561df5091da8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df5061410]:   store i8 %31, i8* %32, align 1


Removing: [0x561df4ff4f90]:   %81 = and i8 %80, 1
From the pot matches of: [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime : [0x561df4fd31b0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x561df4fee4b0]:   %20 = xor i8 %19, 1
[0x561df4ff74c0]:   %77 = xor i8 %76, 1


Adj: [0x561df4ff7950]:   store i8 %81, i8* %26, align 1


Removing: [0x561df505fdd0]:   %25 = and i8 %24, 1
From the pot matches of: [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime : [0x561df4fd31b0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x561df4fee4b0]:   %20 = xor i8 %19, 1
[0x561df4ff74c0]:   %77 = xor i8 %76, 1


Adj: [0x561df4fef970]:   store i8 %25, i8* %26, align 1


Removing: [0x561df505df70]:   %11 = add i64 %7, -40
From the pot matches of: [0x561df4fd3f30]:   %37 = add i64 %5, -40


Uprime : [0x561df4fd3fb0]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261


Uprime Matches: [0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8


Adj: [0x561df4fede30]:   %22 = xor i64 %8, %11
[0x561df4fef6c0]:   %30 = lshr i64 %11, 63
[0x561df4fef810]:   %27 = icmp eq i64 %11, 0
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505dba8]:   %15 = trunc i64 %11 to i32


Removing: [0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4590]:   %45 = add i64 %41, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12
[0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4fefea0]:   %41 = add i64 %10, 23


Removing: [0x561df50646b8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4590]:   %45 = add i64 %41, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12
[0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4ff19e0]:   %57 = add i64 %55, 5
[0x561df4ff1c10]:   %56 = add i64 %55, -176


Removing: [0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4590]:   %45 = add i64 %41, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12
[0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4ff2d30]:   %64 = add i64 %63, 3
[0x561df4ff9b50]:   %95 = add i64 %63, 9
[0x561df4ffa2f0]:   %91 = add i64 %63, 8


Removing: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff1480]:   %53 = add i64 %49, 12


Removing: [0x561df5049748]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4fec480]:   %8 = add i64 %7, -8
[0x561df4ff0000]:   %40 = add i64 %7, -12
[0x561df505df70]:   %11 = add i64 %7, -40
[0x561df5061b80]:   %39 = add i64 %7, -40


Removing: [0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4fefea0]:   %41 = add i64 %10, 23


Removing: [0x561df5062228]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff0b20]:   %46 = add i64 %45, -32


Removing: [0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff0980]:   %47 = add i64 %43, 12


Removing: [0x561df5063878]:   %61 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff47d0]:   %62 = add i64 %61, -32


Removing: [0x561df5064458]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff1880]:   %59 = add i64 %58, -8


Removing: [0x561df50646b8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff19e0]:   %57 = add i64 %55, 5
[0x561df4ff1c10]:   %56 = add i64 %55, -176


Removing: [0x561df5064918]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df5061eb0]:   %52 = add i64 %51, -24


Removing: [0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff2d30]:   %64 = add i64 %63, 3
[0x561df4ff9b50]:   %95 = add i64 %63, 9
[0x561df4ffa2f0]:   %91 = add i64 %63, 8


Removing: [0x561df5066648]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4feed10]:   %86 = lshr i64 %68, 63
[0x561df4ff27a0]:   %70 = icmp ugt i64 %68, -33
[0x561df4ff4200]:   %69 = add i64 %68, 32
[0x561df4ff7200]:   %78 = xor i64 %69, %68
[0x561df4ff9fb0]:   %92 = add i64 %68, 40
[0x561df4ffd2b0]:   %98 = add i64 %68, 48


Removing: [0x561df50668a8]:   %66 = load i32, i32* %65, align 4
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df5066778]:   %67 = zext i32 %66 to i64


Removing: [0x561df5049558]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4458]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd4510]:   %44 = add i64 %43, -32


Uprime Matches: [0x561df4ff0b20]:   %46 = add i64 %45, -32
[0x561df4ff47d0]:   %62 = add i64 %61, -32


Adj: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8


Removing: [0x561df5064918]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4458]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd4510]:   %44 = add i64 %43, -32


Uprime Matches: [0x561df4ff0b20]:   %46 = add i64 %45, -32
[0x561df4ff47d0]:   %62 = add i64 %61, -32


Adj: [0x561df5061eb0]:   %52 = add i64 %51, -24


Removing: [0x561df5066c38]:   %65 = inttoptr i64 %62 to i32*
From the pot matches of: [0x561df4fd4678]:   %46 = inttoptr i64 %44 to i64*


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df50668a8]:   %66 = load i32, i32* %65, align 4


Removing: [0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4a70]:   %51 = add i64 %47, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12
[0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4fefea0]:   %41 = add i64 %10, 23


Removing: [0x561df50646b8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4a70]:   %51 = add i64 %47, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12
[0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4ff19e0]:   %57 = add i64 %55, 5
[0x561df4ff1c10]:   %56 = add i64 %55, -176


Removing: [0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4a70]:   %51 = add i64 %47, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12
[0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4ff2d30]:   %64 = add i64 %63, 3
[0x561df4ff9b50]:   %95 = add i64 %63, 9
[0x561df4ffa2f0]:   %91 = add i64 %63, 8


Removing: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff1480]:   %53 = add i64 %49, 12


Removing: [0x561df5049748]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4fec480]:   %8 = add i64 %7, -8
[0x561df4ff0000]:   %40 = add i64 %7, -12
[0x561df505df70]:   %11 = add i64 %7, -40
[0x561df5061b80]:   %39 = add i64 %7, -40


Removing: [0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4fefea0]:   %41 = add i64 %10, 23


Removing: [0x561df5062228]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff0b20]:   %46 = add i64 %45, -32


Removing: [0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff0980]:   %47 = add i64 %43, 12


Removing: [0x561df5063878]:   %61 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff47d0]:   %62 = add i64 %61, -32


Removing: [0x561df5064458]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff1880]:   %59 = add i64 %58, -8


Removing: [0x561df50646b8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff19e0]:   %57 = add i64 %55, 5
[0x561df4ff1c10]:   %56 = add i64 %55, -176


Removing: [0x561df5064918]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df5061eb0]:   %52 = add i64 %51, -24


Removing: [0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff2d30]:   %64 = add i64 %63, 3
[0x561df4ff9b50]:   %95 = add i64 %63, 9
[0x561df4ffa2f0]:   %91 = add i64 %63, 8


Removing: [0x561df5066648]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4feed10]:   %86 = lshr i64 %68, 63
[0x561df4ff27a0]:   %70 = icmp ugt i64 %68, -33
[0x561df4ff4200]:   %69 = add i64 %68, 32
[0x561df4ff7200]:   %78 = xor i64 %69, %68
[0x561df4ff9fb0]:   %92 = add i64 %68, 40
[0x561df4ffd2b0]:   %98 = add i64 %68, 48


Removing: [0x561df50668a8]:   %66 = load i32, i32* %65, align 4
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8


Uprime Matches: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8
[0x561df4fec5d0]:   store i64 %5, i64* %3, align 8
[0x561df4feeef0]:   store i8 %85, i8* %32, align 1
[0x561df4fef160]:   store i8 %83, i8* %29, align 1
[0x561df4fef970]:   store i8 %25, i8* %26, align 1
[0x561df4ff0160]:   store i64 4, i64* %RSI.i, align 8
[0x561df4ff0410]:   store i64 %41, i64* %3, align 8
[0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff0820]:   store i64 %47, i64* %3, align 8
[0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff1730]:   store i64 %57, i64* %60, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8
[0x561df4ff2690]:   store i64 %56, i64* %3, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff2b10]:   store i8 %71, i8* %14, align 1
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8
[0x561df4ff3100]:   store i64 %53, i64* %3, align 8
[0x561df4ff4450]:   store i64 %64, i64* %3, align 8
[0x561df4ff7360]:   store i8 %77, i8* %21, align 1
[0x561df4ff7950]:   store i8 %81, i8* %26, align 1
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8
[0x561df4ffa110]:   store i64 %91, i64* %3, align 8
[0x561df4ffa450]:   store i8 %90, i8* %38, align 1
[0x561df4ffa530]:   store i64 %95, i64* %3, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df4ffd410]:   store i64 %97, i64* %3, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df5060db0]:   store i8 %20, i8* %21, align 1
[0x561df50611f0]:   store i8 %13, i8* %14, align 1
[0x561df5061410]:   store i8 %31, i8* %32, align 1
[0x561df5061630]:   store i8 %28, i8* %29, align 1
[0x561df5061a70]:   store i64 %39, i64* %RDI.i, align 8
[0x561df5061c90]:   store i8 %37, i8* %38, align 1
[0x561df5061de0]:   store i32 0, i32* %42, align 4
[0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df5066778]:   %67 = zext i32 %66 to i64


Removing: [0x561df5049558]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8


Adj: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8


Removing: [0x561df50625b8]:   %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8


Adj: [0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Removing: [0x561df5066fc8]:   %97 = load i64, i64* %96, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8


Adj: [0x561df4ffd410]:   store i64 %97, i64* %3, align 8


Removing: [0x561df50676e8]:   %94 = load i64, i64* %93, align 8
From the pot matches of: [0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8


Uprime : [0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261


Uprime Matches: [0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff2be0]:   store i64 %67, i64* %RAX.i17, align 8


Adj: [0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8


Removing: [0x561df5049558]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4978]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd49f0]:   %50 = add i64 %49, -24


Uprime Matches: [0x561df5061eb0]:   %52 = add i64 %51, -24


Adj: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8


Removing: [0x561df5062228]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4978]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd49f0]:   %50 = add i64 %49, -24


Uprime Matches: [0x561df5061eb0]:   %52 = add i64 %51, -24


Adj: [0x561df4ff0b20]:   %46 = add i64 %45, -32


Removing: [0x561df5063878]:   %61 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4978]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd49f0]:   %50 = add i64 %49, -24


Uprime Matches: [0x561df5061eb0]:   %52 = add i64 %51, -24


Adj: [0x561df4ff47d0]:   %62 = add i64 %61, -32


Removing: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4d70]:   %55 = add i64 %53, 5


Uprime Matches: [0x561df4ff19e0]:   %57 = add i64 %55, 5


Adj: [0x561df4ff1480]:   %53 = add i64 %49, 12


Removing: [0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4d70]:   %55 = add i64 %53, 5


Uprime Matches: [0x561df4ff19e0]:   %57 = add i64 %55, 5


Adj: [0x561df4fefea0]:   %41 = add i64 %10, 23


Removing: [0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4d70]:   %55 = add i64 %53, 5


Uprime Matches: [0x561df4ff19e0]:   %57 = add i64 %55, 5


Adj: [0x561df4ff0980]:   %47 = add i64 %43, 12


Removing: [0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4d70]:   %55 = add i64 %53, 5


Uprime Matches: [0x561df4ff19e0]:   %57 = add i64 %55, 5


Adj: [0x561df4ff2d30]:   %64 = add i64 %63, 3
[0x561df4ff9b50]:   %95 = add i64 %63, 9
[0x561df4ffa2f0]:   %91 = add i64 %63, 8


Removing: [0x561df5066648]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd4dd8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x561df4fd4e50]:   %57 = add i64 %56, -8


Uprime Matches: [0x561df4fec480]:   %8 = add i64 %7, -8
[0x561df4ff1880]:   %59 = add i64 %58, -8


Adj: [0x561df4feed10]:   %86 = lshr i64 %68, 63
[0x561df4ff27a0]:   %70 = icmp ugt i64 %68, -33
[0x561df4ff4200]:   %69 = add i64 %68, 32
[0x561df4ff7200]:   %78 = xor i64 %69, %68
[0x561df4ff9fb0]:   %92 = add i64 %68, 40
[0x561df4ffd2b0]:   %98 = add i64 %68, 48


Removing: [0x561df4fec480]:   %8 = add i64 %7, -8
From the pot matches of: [0x561df4fd4e50]:   %57 = add i64 %56, -8


Uprime : [0x561df4fd4fb0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x561df4ff15d0]:   store i64 %59, i64* %6, align 8
[0x561df4ff28b0]:   store i64 %69, i64* %6, align 8
[0x561df4ff9cb0]:   store i64 %92, i64* %6, align 8
[0x561df4ffc7e0]:   store i64 %98, i64* %6, align 8
[0x561df505b680]:   store i64 %11, i64* %6, align 8


Adj: [0x561df4fedce0]:   %12 = icmp ult i64 %8, 32
[0x561df4fede30]:   %22 = xor i64 %8, %11
[0x561df505fab0]:   store i64 %8, i64* %RBP.i, align 8
[0x561df505ffd0]:   %33 = lshr i64 %8, 63
[0x561df5073a98]:   %9 = inttoptr i64 %8 to i64*


Removing: [0x561df5049558]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df507e138]:   %60 = load i64, i64* %RBP, align 8


Uprime : [0x561df507e1b0]:   %61 = add i64 %60, -32


Uprime Matches: [0x561df4ff0b20]:   %46 = add i64 %45, -32
[0x561df4ff47d0]:   %62 = add i64 %61, -32


Adj: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8


Removing: [0x561df5064918]:   %51 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df507e138]:   %60 = load i64, i64* %RBP, align 8


Uprime : [0x561df507e1b0]:   %61 = add i64 %60, -32


Uprime Matches: [0x561df4ff0b20]:   %46 = add i64 %45, -32
[0x561df4ff47d0]:   %62 = add i64 %61, -32


Adj: [0x561df5061eb0]:   %52 = add i64 %51, -24


Removing: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x561df507e218]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd7200]:   %94 = add i64 %62, 9


Uprime Matches: [0x561df4ff9b50]:   %95 = add i64 %63, 9


Adj: [0x561df4ff1480]:   %53 = add i64 %49, 12


Removing: [0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x561df507e218]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd7200]:   %94 = add i64 %62, 9


Uprime Matches: [0x561df4ff9b50]:   %95 = add i64 %63, 9


Adj: [0x561df4fefea0]:   %41 = add i64 %10, 23


Removing: [0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x561df507e218]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd7200]:   %94 = add i64 %62, 9


Uprime Matches: [0x561df4ff9b50]:   %95 = add i64 %63, 9


Adj: [0x561df4ff0980]:   %47 = add i64 %43, 12


Removing: [0x561df50646b8]:   %55 = load i64, i64* %3, align 8
From the pot matches of: [0x561df507e218]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd7200]:   %94 = add i64 %62, 9


Uprime Matches: [0x561df4ff9b50]:   %95 = add i64 %63, 9


Adj: [0x561df4ff19e0]:   %57 = add i64 %55, 5
[0x561df4ff1c10]:   %56 = add i64 %55, -176


Removing: [0x561df50620f8]:   %48 = inttoptr i64 %46 to i64*
From the pot matches of: [0x561df507e378]:   %64 = inttoptr i64 %61 to i32*


Uprime : [0x561df507e3d8]:   %65 = load i32, i32* %64, align 4


Uprime Matches: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
[0x561df5049558]:   %4 = load i64, i64* %RBP.i, align 8
[0x561df5049748]:   %7 = load i64, i64* %6, align 8
[0x561df505d3b8]:   %10 = load i64, i64* %3, align 8
[0x561df5062228]:   %45 = load i64, i64* %RBP.i, align 8
[0x561df50625b8]:   %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
[0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
[0x561df5063878]:   %61 = load i64, i64* %RBP.i, align 8
[0x561df5064458]:   %58 = load i64, i64* %6, align 8
[0x561df50646b8]:   %55 = load i64, i64* %3, align 8
[0x561df5064918]:   %51 = load i64, i64* %RBP.i, align 8
[0x561df5064a48]:   %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
[0x561df5065cc8]:   %63 = load i64, i64* %3, align 8
[0x561df5066648]:   %68 = load i64, i64* %6, align 8
[0x561df50668a8]:   %66 = load i32, i32* %65, align 4
[0x561df5066fc8]:   %97 = load i64, i64* %96, align 8
[0x561df50676e8]:   %94 = load i64, i64* %93, align 8


Adj: [0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Removing: [0x561df5049748]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x561df507e518]:   %67 = load i64, i64* %RSP, align 8


Uprime : [0x561df4fd7480]:   %97 = add i64 %67, 48


Uprime Matches: [0x561df4ffd2b0]:   %98 = add i64 %68, 48


Adj: [0x561df4fec480]:   %8 = add i64 %7, -8
[0x561df4ff0000]:   %40 = add i64 %7, -12
[0x561df505df70]:   %11 = add i64 %7, -40
[0x561df5061b80]:   %39 = add i64 %7, -40


Removing: [0x561df5064458]:   %58 = load i64, i64* %6, align 8
From the pot matches of: [0x561df507e518]:   %67 = load i64, i64* %RSP, align 8


Uprime : [0x561df4fd7480]:   %97 = add i64 %67, 48


Uprime Matches: [0x561df4ffd2b0]:   %98 = add i64 %68, 48


Adj: [0x561df4ff1880]:   %59 = add i64 %58, -8


Removing: [0x561df505dba8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df505fc80]:   %16 = and i32 %15, 255


Removing: [0x561df50662b8]:   %72 = trunc i64 %69 to i32
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4ff7800]:   %73 = and i32 %72, 255


Removing: [0x561df5067a78]:   %85 = trunc i64 %84 to i8
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4feeef0]:   store i8 %85, i8* %32, align 1


Removing: [0x561df5091da8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff4f90]:   %81 = and i8 %80, 1
[0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df505fdd0]:   %25 = and i8 %24, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df5061410]:   store i8 %31, i8* %32, align 1


Removing: [0x561df4ff4f90]:   %81 = and i8 %80, 1
From the pot matches of: [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime : [0x561df4fd6580]:   %76 = xor i8 %75, 1


Uprime Matches: [0x561df4fee4b0]:   %20 = xor i8 %19, 1
[0x561df4ff74c0]:   %77 = xor i8 %76, 1


Adj: [0x561df4ff7950]:   store i8 %81, i8* %26, align 1


Removing: [0x561df505fdd0]:   %25 = and i8 %24, 1
From the pot matches of: [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime : [0x561df4fd6580]:   %76 = xor i8 %75, 1


Uprime Matches: [0x561df4fee4b0]:   %20 = xor i8 %19, 1
[0x561df4ff74c0]:   %77 = xor i8 %76, 1


Adj: [0x561df4fef970]:   store i8 %25, i8* %26, align 1

Round: 1

Removing: [0x561df4ffa728]:   %80 = trunc i64 %79 to i8
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4ff4f90]:   %81 = and i8 %80, 1


Removing: [0x561df505c1a8]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df505fdd0]:   %25 = and i8 %24, 1


Removing: [0x561df5049558]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4fe3990]:   store i64 %4, i64* %9, align 8


Removing: [0x561df5064a48]:   %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff0560]:   store i64 %50, i64* %RAX.i17, align 8
[0x561df4ff1e10]:   store i64 %50, i64* %54, align 8


Removing: [0x561df5066fc8]:   %97 = load i64, i64* %96, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ffd410]:   store i64 %97, i64* %3, align 8


Removing: [0x561df50676e8]:   %94 = load i64, i64* %93, align 8
From the pot matches of: [0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16


Uprime : [0x561df4fd46f0]:   store i64 %42, i64* %46, align 8


Uprime Matches: [0x561df5061fc0]:   store i64 %44, i64* %48, align 8


Adj: [0x561df4ff9e50]:   store i64 %94, i64* %RBP.i, align 8


Removing: [0x561df4ff47d0]:   %62 = add i64 %61, -32
From the pot matches of: [0x561df4fd4510]:   %44 = add i64 %43, -32


Uprime : [0x561df4fd4678]:   %46 = inttoptr i64 %44 to i64*


Uprime Matches: [0x561df50620f8]:   %48 = inttoptr i64 %46 to i64*


Adj: [0x561df5066c38]:   %65 = inttoptr i64 %62 to i32*


Removing: [0x561df5049748]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x561df4fd4dd8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x561df4fd4e50]:   %57 = add i64 %56, -8


Uprime Matches: [0x561df4ff1880]:   %59 = add i64 %58, -8


Adj: [0x561df4fec480]:   %8 = add i64 %7, -8
[0x561df4ff0000]:   %40 = add i64 %7, -12
[0x561df505df70]:   %11 = add i64 %7, -40
[0x561df5061b80]:   %39 = add i64 %7, -40


Removing: [0x561df4ff0b20]:   %46 = add i64 %45, -32
From the pot matches of: [0x561df507e1b0]:   %61 = add i64 %60, -32


Uprime : [0x561df507e378]:   %64 = inttoptr i64 %61 to i32*


Uprime Matches: [0x561df5066c38]:   %65 = inttoptr i64 %62 to i32*


Adj: [0x561df50620f8]:   %48 = inttoptr i64 %46 to i64*


Removing: [0x561df4ffa728]:   %80 = trunc i64 %79 to i8
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4ff4f90]:   %81 = and i8 %80, 1


Removing: [0x561df505c1a8]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff7620]:   %76 = and i8 %75, 1
[0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df505fdd0]:   %25 = and i8 %24, 1

Round: 2

Removing: [0x561df5063878]:   %61 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df4fd4458]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x561df4fd4510]:   %44 = add i64 %43, -32


Uprime Matches: [0x561df4ff0b20]:   %46 = add i64 %45, -32


Adj: [0x561df4ff47d0]:   %62 = add i64 %61, -32


Removing: [0x561df5062228]:   %45 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x561df507e138]:   %60 = load i64, i64* %RBP, align 8


Uprime : [0x561df507e1b0]:   %61 = add i64 %60, -32


Uprime Matches: [0x561df4ff47d0]:   %62 = add i64 %61, -32


Adj: [0x561df4ff0b20]:   %46 = add i64 %45, -32

Round: 3


[Info] After Dual Simulation: Round: 0
[0x561df4fd21d0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x561df500e720]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x561df4fd22c0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x561df5048810]:  %RAX.i17 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x561df4fd23b0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x561df5048b70]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x561df4fd24c0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x561df50489e0]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x561df4fd25d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x561df504bd30]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x561df4fd26e0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x561df504c090]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x561df4fd2790]:   %4 = add i64 %1, 1 {
	[0x561df4fec810]:  %5 = add i64 %1, 1
	}

[0x561df4fd2810]:   store i64 %4, i64* %PC, align 8 {
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	}

[0x561df4fd2878]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	}

[0x561df4fd28f0]:   %6 = add i64 %5, -8 {
	[0x561df4fec480]:  %8 = add i64 %7, -8
	}

[0x561df4fd2958]:   %7 = inttoptr i64 %6 to i64* {
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd29d0]:   store i64 %3, i64* %7, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	}

[0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8 {
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	}

[0x561df4fd2ab0]:   %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #9 {
	[0x561df5073c50]:  %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
	}

[0x561df4fd2b40]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x561df4fd2c00]:   %9 = add i64 %5, -40 {
	[0x561df505df70]:  %11 = add i64 %7, -40
	}

[0x561df4fd2c80]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	}

[0x561df4fd2d00]:   %10 = icmp ult i64 %6, 32 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	}

[0x561df4fd2d68]:   %11 = zext i1 %10 to i8 {
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	}

[0x561df4fd2e10]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x561df51367b0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x561df4fd2ea0]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	}

[0x561df4fd2f08]:   %13 = trunc i64 %9 to i32 {
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	}

[0x561df4fd2f80]:   %14 = and i32 %13, 255 {
	[0x561df505fc80]:  %16 = and i32 %15, 255
	}

[0x561df4fd3040]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x561df50307b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x561df4fd30b8]:   %16 = trunc i32 %15 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	}

[0x561df4fd3130]:   %17 = and i8 %16, 1 {
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd31b0]:   %18 = xor i8 %17, 1 {
	[0x561df4fee4b0]:  %20 = xor i8 %19, 1
	[0x561df4ff74c0]:  %77 = xor i8 %76, 1
	}

[0x561df4fd3260]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x561df50579e0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x561df4fd32f0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	}

[0x561df4fd3370]:   %20 = xor i64 %6, %9 {
	[0x561df4fede30]:  %22 = xor i64 %8, %11
	}

[0x561df4fd33f0]:   %21 = lshr i64 %20, 4 {
	[0x561df5060ca0]:  %23 = lshr i64 %22, 4
	}

[0x561df4fd3458]:   %22 = trunc i64 %21 to i8 {
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	}

[0x561df4fd34d0]:   %23 = and i8 %22, 1 {
	[0x561df505fdd0]:  %25 = and i8 %24, 1
	}

[0x561df4fd3580]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x561df5069f30]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x561df4fd3610]:   store i8 %23, i8* %24, align 1, !tbaa !1280 {
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	}

[0x561df4fd3690]:   %25 = icmp eq i64 %9, 0 {
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	}

[0x561df4fd36f8]:   %26 = zext i1 %25 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	}

[0x561df4fd37a0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x561df4ff9760]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x561df4fd3830]:   store i8 %26, i8* %27, align 1, !tbaa !1281 {
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	}

[0x561df4fd38f0]:   %28 = lshr i64 %9, 63 {
	[0x561df4fef6c0]:  %30 = lshr i64 %11, 63
	}

[0x561df4fd3958]:   %29 = trunc i64 %28 to i8 {
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd3a00]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x561df4ff4c10]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x561df4fd3a90]:   store i8 %29, i8* %30, align 1, !tbaa !1282 {
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	}

[0x561df4fd3b10]:   %31 = lshr i64 %6, 63 {
	[0x561df505ffd0]:  %33 = lshr i64 %8, 63
	}

[0x561df4fd3b90]:   %32 = xor i64 %28, %31 {
	[0x561df4fee760]:  %34 = xor i64 %30, %33
	}

[0x561df4fd3c10]:   %33 = add nuw nsw i64 %32, %31 {
	[0x561df5061850]:  %35 = add nuw nsw i64 %34, %33
	}

[0x561df4fd3c90]:   %34 = icmp eq i64 %33, 2 {
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	}

[0x561df4fd3cf8]:   %35 = zext i1 %34 to i8 {
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	}

[0x561df4fd3da0]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x561df4ff1200]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x561df4fd3e30]:   store i8 %35, i8* %36, align 1, !tbaa !1283 {
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	}

[0x561df4fd3eb0]:   store i64 4, i64* %RSI, align 8, !tbaa !1261 {
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	}

[0x561df4fd3f30]:   %37 = add i64 %5, -40 {
	[0x561df5061b80]:  %39 = add i64 %7, -40
	}

[0x561df4fd3fb0]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261 {
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	}

[0x561df4fd4030]:   %38 = add i64 %5, -12 {
	[0x561df4ff0000]:  %40 = add i64 %7, -12
	}

[0x561df4fd40f0]:   %39 = add i64 %8, 23 {
	[0x561df4fefea0]:  %41 = add i64 %10, 23
	}

[0x561df4fd4170]:   store i64 %39, i64* %PC, align 8 {
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	}

[0x561df4fd41d8]:   %40 = inttoptr i64 %38 to i32* {
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	}

[0x561df4fd4250]:   store i32 0, i32* %40, align 4 {
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	}

[0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	}

[0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16 {
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	}

[0x561df4fd4458]:   %43 = load i64, i64* %RBP, align 8 {
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	}

[0x561df4fd4510]:   %44 = add i64 %43, -32 {
	[0x561df4ff0b20]:  %46 = add i64 %45, -32
	}

[0x561df4fd4590]:   %45 = add i64 %41, 12 {
	[0x561df4ff0980]:  %47 = add i64 %43, 12
	[0x561df4ff1480]:  %53 = add i64 %49, 12
	}

[0x561df4fd4610]:   store i64 %45, i64* %PC, align 8 {
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	}

[0x561df4fd4678]:   %46 = inttoptr i64 %44 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	}

[0x561df4fd46f0]:   store i64 %42, i64* %46, align 8 {
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	}

[0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8 {
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	}

[0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261 {
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	}

[0x561df4fd4978]:   %49 = load i64, i64* %RBP, align 8 {
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	}

[0x561df4fd49f0]:   %50 = add i64 %49, -24 {
	[0x561df5061eb0]:  %52 = add i64 %51, -24
	}

[0x561df4fd4a70]:   %51 = add i64 %47, 12 {
	[0x561df4ff0980]:  %47 = add i64 %43, 12
	[0x561df4ff1480]:  %53 = add i64 %49, 12
	}

[0x561df4fd4af0]:   store i64 %51, i64* %PC, align 8 {
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	}

[0x561df4fd4b58]:   %52 = inttoptr i64 %50 to i64* {
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	}

[0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8 {
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	}

[0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8 {
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	}

[0x561df4fd4cf0]:   %54 = add i64 %53, -176 {
	[0x561df4ff1c10]:  %56 = add i64 %55, -176
	}

[0x561df4fd4d70]:   %55 = add i64 %53, 5 {
	[0x561df4ff19e0]:  %57 = add i64 %55, 5
	}

[0x561df4fd4dd8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	}

[0x561df4fd4e50]:   %57 = add i64 %56, -8 {
	[0x561df4ff1880]:  %59 = add i64 %58, -8
	}

[0x561df4fd4eb8]:   %58 = inttoptr i64 %57 to i64* {
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	}

[0x561df4fd4f30]:   store i64 %55, i64* %58, align 8 {
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	}

[0x561df4fd4fb0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	}

[0x561df4fd5030]:   store i64 %54, i64* %PC, align 8, !tbaa !1261 {
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	}

[0x561df4fd60d0]:   %68 = add i64 %67, 32 {
	[0x561df4ff4200]:  %69 = add i64 %68, 32
	}

[0x561df4fd6150]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	}

[0x561df4fd6210]:   %69 = icmp ugt i64 %67, -33 {
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd6278]:   %70 = zext i1 %69 to i8 {
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	}

[0x561df4fd62f0]:   store i8 %70, i8* %12, align 1, !tbaa !1265 {
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	}

[0x561df4fd6358]:   %71 = trunc i64 %68 to i32 {
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	}

[0x561df4fd63d0]:   %72 = and i32 %71, 255 {
	[0x561df4ff7800]:  %73 = and i32 %72, 255
	}

[0x561df4fd6488]:   %74 = trunc i32 %73 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	}

[0x561df4fd6500]:   %75 = and i8 %74, 1 {
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd6580]:   %76 = xor i8 %75, 1 {
	[0x561df4fee4b0]:  %20 = xor i8 %19, 1
	[0x561df4ff74c0]:  %77 = xor i8 %76, 1
	}

[0x561df4fd6600]:   store i8 %76, i8* %19, align 1, !tbaa !1279 {
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	}

[0x561df4fd6680]:   %77 = xor i64 %68, %67 {
	[0x561df4ff7200]:  %78 = xor i64 %69, %68
	}

[0x561df4fd6700]:   %78 = lshr i64 %77, 4 {
	[0x561df4ff5750]:  %79 = lshr i64 %78, 4
	}

[0x561df4fd6768]:   %79 = trunc i64 %78 to i8 {
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	}

[0x561df4fd67e0]:   %80 = and i8 %79, 1 {
	[0x561df4ff4f90]:  %81 = and i8 %80, 1
	}

[0x561df4fd6860]:   store i8 %80, i8* %24, align 1, !tbaa !1280 {
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	}

[0x561df4fd68e0]:   %81 = icmp eq i64 %68, 0 {
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	}

[0x561df4fd6948]:   %82 = zext i1 %81 to i8 {
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd69c0]:   store i8 %82, i8* %27, align 1, !tbaa !1281 {
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	}

[0x561df4fd6a40]:   %83 = lshr i64 %68, 63 {
	[0x561df4fef040]:  %84 = lshr i64 %69, 63
	}

[0x561df4fd6aa8]:   %84 = trunc i64 %83 to i8 {
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	}

[0x561df4fd6b20]:   store i8 %84, i8* %30, align 1, !tbaa !1282 {
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	}

[0x561df4fd6ba0]:   %85 = lshr i64 %67, 63 {
	[0x561df4feed10]:  %86 = lshr i64 %68, 63
	}

[0x561df4fd6c20]:   %86 = xor i64 %83, %85 {
	[0x561df4feec30]:  %87 = xor i64 %84, %86
	}

[0x561df4fd6ca0]:   %87 = add nuw nsw i64 %86, %83 {
	[0x561df4ff7c10]:  %88 = add nuw nsw i64 %87, %84
	}

[0x561df4fd6d20]:   %88 = icmp eq i64 %87, 2 {
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	}

[0x561df4fd6d88]:   %89 = zext i1 %88 to i8 {
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	}

[0x561df4fd6e00]:   store i8 %89, i8* %36, align 1, !tbaa !1283 {
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	}

[0x561df4fd6e80]:   %90 = add i64 %62, 8 {
	[0x561df4ffa2f0]:  %91 = add i64 %63, 8
	}

[0x561df4fd6f00]:   store i64 %90, i64* %PC, align 8 {
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	}

[0x561df4fd6fc0]:   %91 = add i64 %67, 40 {
	[0x561df4ff9fb0]:  %92 = add i64 %68, 40
	}

[0x561df4fd7028]:   %92 = inttoptr i64 %68 to i64* {
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	}

[0x561df4fd7088]:   %93 = load i64, i64* %92, align 8 {
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd7100]:   store i64 %93, i64* %RBP, align 8, !tbaa !1261 {
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	}

[0x561df4fd7180]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	}

[0x561df4fd7200]:   %94 = add i64 %62, 9 {
	[0x561df4ff9b50]:  %95 = add i64 %63, 9
	}

[0x561df4fd7280]:   store i64 %94, i64* %PC, align 8 {
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	}

[0x561df4fd72e8]:   %95 = inttoptr i64 %91 to i64* {
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	}

[0x561df4fd7348]:   %96 = load i64, i64* %95, align 8 {
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	}

[0x561df4fd73c0]:   store i64 %96, i64* %PC, align 8, !tbaa !1261 {
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	}

[0x561df4fd7480]:   %97 = add i64 %67, 48 {
	[0x561df4ffd2b0]:  %98 = add i64 %68, 48
	}

[0x561df4fd7500]:   store i64 %97, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	}

[0x561df4fd7568]:   ret %struct.Memory* %59 {
	[0x561df5068068]:  ret %struct.Memory.32* %call2_400540
	}

[0x561df501f8b0]: %struct.State* %0 {
	[0x561df4ff0610]:%struct.State.1* %0
	}

[0x561df501f8f0]: i64 %1 {
	[0x561df4ff0360]:i64 %1
	}

[0x561df501f930]: %struct.Memory* %2 {
	[0x561df4feff50]:%struct.Memory.32* %2
	}

[0x561df501fae8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x561df507e070]:   %59 = tail call %struct.Memory* @sub_400490_array_reverse(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x561df4ff0f90]:  %call2_400540 = tail call %struct.Memory.32* @sub_400490.array_reverse(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	}

[0x561df507e138]:   %60 = load i64, i64* %RBP, align 8 {
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	}

[0x561df507e1b0]:   %61 = add i64 %60, -32 {
	[0x561df4ff47d0]:  %62 = add i64 %61, -32
	}

[0x561df507e218]:   %62 = load i64, i64* %PC, align 8 {
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	}

[0x561df507e290]:   %63 = add i64 %62, 3 {
	[0x561df4ff2d30]:  %64 = add i64 %63, 3
	}

[0x561df507e310]:   store i64 %63, i64* %PC, align 8 {
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	}

[0x561df507e378]:   %64 = inttoptr i64 %61 to i32* {
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	}

[0x561df507e3d8]:   %65 = load i32, i32* %64, align 4 {
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	}

[0x561df507e438]:   %66 = zext i32 %65 to i64 {
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	}

[0x561df507e4b0]:   store i64 %66, i64* %RAX, align 8, !tbaa !1261 {
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	}

[0x561df507e518]:   %67 = load i64, i64* %RSP, align 8 {
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x561df501f970]: block_400510 {
	[0x561df4fea7c0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x561df4ff74c0]:   %77 = xor i8 %76, 1
From the pot matches of: [0x561df4fd31b0]:   %18 = xor i8 %17, 1


Uprime : [0x561df4fd32f0]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x561df5060db0]:   store i8 %20, i8* %21, align 1


Adj: [0x561df4ff7360]:   store i8 %77, i8* %21, align 1


Removing: [0x561df4ff1480]:   %53 = add i64 %49, 12
From the pot matches of: [0x561df4fd4590]:   %45 = add i64 %41, 12


Uprime : [0x561df4fd4610]:   store i64 %45, i64* %PC, align 8


Uprime Matches: [0x561df4ff0820]:   store i64 %47, i64* %3, align 8


Adj: [0x561df4ff3100]:   store i64 %53, i64* %3, align 8


Removing: [0x561df4ff0980]:   %47 = add i64 %43, 12
From the pot matches of: [0x561df4fd4a70]:   %51 = add i64 %47, 12


Uprime : [0x561df4fd4af0]:   store i64 %51, i64* %PC, align 8


Uprime Matches: [0x561df4ff3100]:   store i64 %53, i64* %3, align 8


Adj: [0x561df4ff0820]:   store i64 %47, i64* %3, align 8


Removing: [0x561df4fee4b0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x561df4fd6580]:   %76 = xor i8 %75, 1


Uprime : [0x561df4fd6600]:   store i8 %76, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x561df4ff7360]:   store i8 %77, i8* %21, align 1


Adj: [0x561df5060db0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x561df4ff7620]:   %76 = and i8 %75, 1
From the pot matches of: [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime : [0x561df4fd31b0]:   %18 = xor i8 %17, 1


Uprime Matches: [0x561df4fee4b0]:   %20 = xor i8 %19, 1


Adj: [0x561df4ff74c0]:   %77 = xor i8 %76, 1


Removing: [0x561df4fe2c28]:   %49 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4590]:   %45 = add i64 %41, 12


Uprime Matches: [0x561df4ff0980]:   %47 = add i64 %43, 12


Adj: [0x561df4ff1480]:   %53 = add i64 %49, 12


Removing: [0x561df5062ef8]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8


Uprime : [0x561df4fd4a70]:   %51 = add i64 %47, 12


Uprime Matches: [0x561df4ff1480]:   %53 = add i64 %49, 12


Adj: [0x561df4ff0980]:   %47 = add i64 %43, 12


Removing: [0x561df50610e0]:   %19 = and i8 %18, 1
From the pot matches of: [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime : [0x561df4fd6580]:   %76 = xor i8 %75, 1


Uprime Matches: [0x561df4ff74c0]:   %77 = xor i8 %76, 1


Adj: [0x561df4fee4b0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x561df4fef568]:   %75 = trunc i32 %74 to i8
From the pot matches of: [0x561df4fd30b8]:   %16 = trunc i32 %15 to i8


Uprime : [0x561df4fd3130]:   %17 = and i8 %16, 1


Uprime Matches: [0x561df50610e0]:   %19 = and i8 %18, 1


Adj: [0x561df4ff7620]:   %76 = and i8 %75, 1


Removing: [0x561df505de78]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x561df4fd6488]:   %74 = trunc i32 %73 to i8


Uprime : [0x561df4fd6500]:   %75 = and i8 %74, 1


Uprime Matches: [0x561df4ff7620]:   %76 = and i8 %75, 1


Adj: [0x561df50610e0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x561df4fd21d0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x561df500e720]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x561df4fd22c0]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x561df5048810]:  %RAX.i17 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x561df4fd23b0]:   %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0 {
	[0x561df5048b70]:  %RSI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0, i32 0
	}

[0x561df4fd24c0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x561df50489e0]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x561df4fd25d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x561df504bd30]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x561df4fd26e0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x561df504c090]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x561df4fd2790]:   %4 = add i64 %1, 1 {
	[0x561df4fec810]:  %5 = add i64 %1, 1
	}

[0x561df4fd2810]:   store i64 %4, i64* %PC, align 8 {
	[0x561df4fec5d0]:  store i64 %5, i64* %3, align 8
	}

[0x561df4fd2878]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df5049748]:  %7 = load i64, i64* %6, align 8
	}

[0x561df4fd28f0]:   %6 = add i64 %5, -8 {
	[0x561df4fec480]:  %8 = add i64 %7, -8
	}

[0x561df4fd2958]:   %7 = inttoptr i64 %6 to i64* {
	[0x561df5073a98]:  %9 = inttoptr i64 %8 to i64*
	}

[0x561df4fd29d0]:   store i64 %3, i64* %7, align 8 {
	[0x561df4fe3990]:  store i64 %4, i64* %9, align 8
	}

[0x561df4fd2a38]:   %8 = load i64, i64* %PC, align 8 {
	[0x561df505d3b8]:  %10 = load i64, i64* %3, align 8
	}

[0x561df4fd2ab0]:   %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #9 {
	[0x561df5073c50]:  %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
	}

[0x561df4fd2b40]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x561df505fab0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x561df4fd2c00]:   %9 = add i64 %5, -40 {
	[0x561df505df70]:  %11 = add i64 %7, -40
	}

[0x561df4fd2c80]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df505b680]:  store i64 %11, i64* %6, align 8
	}

[0x561df4fd2d00]:   %10 = icmp ult i64 %6, 32 {
	[0x561df4fedce0]:  %12 = icmp ult i64 %8, 32
	}

[0x561df4fd2d68]:   %11 = zext i1 %10 to i8 {
	[0x561df505eec8]:  %13 = zext i1 %12 to i8
	}

[0x561df4fd2e10]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x561df51367b0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x561df4fd2ea0]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x561df50611f0]:  store i8 %13, i8* %14, align 1
	}

[0x561df4fd2f08]:   %13 = trunc i64 %9 to i32 {
	[0x561df505dba8]:  %15 = trunc i64 %11 to i32
	}

[0x561df4fd2f80]:   %14 = and i32 %13, 255 {
	[0x561df505fc80]:  %16 = and i32 %15, 255
	}

[0x561df4fd3040]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x561df50307b0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x561df4fd30b8]:   %16 = trunc i32 %15 to i8 {
	[0x561df505de78]:  %18 = trunc i32 %17 to i8
	}

[0x561df4fd3130]:   %17 = and i8 %16, 1 {
	[0x561df50610e0]:  %19 = and i8 %18, 1
	}

[0x561df4fd31b0]:   %18 = xor i8 %17, 1 {
	[0x561df4fee4b0]:  %20 = xor i8 %19, 1
	}

[0x561df4fd3260]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x561df50579e0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x561df4fd32f0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x561df5060db0]:  store i8 %20, i8* %21, align 1
	}

[0x561df4fd3370]:   %20 = xor i64 %6, %9 {
	[0x561df4fede30]:  %22 = xor i64 %8, %11
	}

[0x561df4fd33f0]:   %21 = lshr i64 %20, 4 {
	[0x561df5060ca0]:  %23 = lshr i64 %22, 4
	}

[0x561df4fd3458]:   %22 = trunc i64 %21 to i8 {
	[0x561df505c1a8]:  %24 = trunc i64 %23 to i8
	}

[0x561df4fd34d0]:   %23 = and i8 %22, 1 {
	[0x561df505fdd0]:  %25 = and i8 %24, 1
	}

[0x561df4fd3580]:   %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x561df5069f30]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x561df4fd3610]:   store i8 %23, i8* %24, align 1, !tbaa !1280 {
	[0x561df4fef970]:  store i8 %25, i8* %26, align 1
	}

[0x561df4fd3690]:   %25 = icmp eq i64 %9, 0 {
	[0x561df4fef810]:  %27 = icmp eq i64 %11, 0
	}

[0x561df4fd36f8]:   %26 = zext i1 %25 to i8 {
	[0x561df505bd78]:  %28 = zext i1 %27 to i8
	}

[0x561df4fd37a0]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x561df4ff9760]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x561df4fd3830]:   store i8 %26, i8* %27, align 1, !tbaa !1281 {
	[0x561df5061630]:  store i8 %28, i8* %29, align 1
	}

[0x561df4fd38f0]:   %28 = lshr i64 %9, 63 {
	[0x561df4fef6c0]:  %30 = lshr i64 %11, 63
	}

[0x561df4fd3958]:   %29 = trunc i64 %28 to i8 {
	[0x561df5091da8]:  %31 = trunc i64 %30 to i8
	}

[0x561df4fd3a00]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x561df4ff4c10]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x561df4fd3a90]:   store i8 %29, i8* %30, align 1, !tbaa !1282 {
	[0x561df5061410]:  store i8 %31, i8* %32, align 1
	}

[0x561df4fd3b10]:   %31 = lshr i64 %6, 63 {
	[0x561df505ffd0]:  %33 = lshr i64 %8, 63
	}

[0x561df4fd3b90]:   %32 = xor i64 %28, %31 {
	[0x561df4fee760]:  %34 = xor i64 %30, %33
	}

[0x561df4fd3c10]:   %33 = add nuw nsw i64 %32, %31 {
	[0x561df5061850]:  %35 = add nuw nsw i64 %34, %33
	}

[0x561df4fd3c90]:   %34 = icmp eq i64 %33, 2 {
	[0x561df4ff02b0]:  %36 = icmp eq i64 %35, 2
	}

[0x561df4fd3cf8]:   %35 = zext i1 %34 to i8 {
	[0x561df505f2d8]:  %37 = zext i1 %36 to i8
	}

[0x561df4fd3da0]:   %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x561df4ff1200]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x561df4fd3e30]:   store i8 %35, i8* %36, align 1, !tbaa !1283 {
	[0x561df5061c90]:  store i8 %37, i8* %38, align 1
	}

[0x561df4fd3eb0]:   store i64 4, i64* %RSI, align 8, !tbaa !1261 {
	[0x561df4ff0160]:  store i64 4, i64* %RSI.i, align 8
	}

[0x561df4fd3f30]:   %37 = add i64 %5, -40 {
	[0x561df5061b80]:  %39 = add i64 %7, -40
	}

[0x561df4fd3fb0]:   store i64 %37, i64* %RDI, align 8, !tbaa !1261 {
	[0x561df5061a70]:  store i64 %39, i64* %RDI.i, align 8
	}

[0x561df4fd4030]:   %38 = add i64 %5, -12 {
	[0x561df4ff0000]:  %40 = add i64 %7, -12
	}

[0x561df4fd40f0]:   %39 = add i64 %8, 23 {
	[0x561df4fefea0]:  %41 = add i64 %10, 23
	}

[0x561df4fd4170]:   store i64 %39, i64* %PC, align 8 {
	[0x561df4ff0410]:  store i64 %41, i64* %3, align 8
	}

[0x561df4fd41d8]:   %40 = inttoptr i64 %38 to i32* {
	[0x561df5063288]:  %42 = inttoptr i64 %40 to i32*
	}

[0x561df4fd4250]:   store i32 0, i32* %40, align 4 {
	[0x561df5061de0]:  store i32 0, i32* %42, align 4
	}

[0x561df4fd42b8]:   %41 = load i64, i64* %PC, align 8 {
	[0x561df5062ef8]:  %43 = load i64, i64* %3, align 8
	}

[0x561df4fd43f8]:   %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 16) to i64*), align 16 {
	[0x561df50625b8]:  %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e0 to i64), i64 136) to i64*), align 8
	}

[0x561df4fd4458]:   %43 = load i64, i64* %RBP, align 8 {
	[0x561df5062228]:  %45 = load i64, i64* %RBP.i, align 8
	}

[0x561df4fd4510]:   %44 = add i64 %43, -32 {
	[0x561df4ff0b20]:  %46 = add i64 %45, -32
	}

[0x561df4fd4590]:   %45 = add i64 %41, 12 {
	[0x561df4ff0980]:  %47 = add i64 %43, 12
	}

[0x561df4fd4610]:   store i64 %45, i64* %PC, align 8 {
	[0x561df4ff0820]:  store i64 %47, i64* %3, align 8
	}

[0x561df4fd4678]:   %46 = inttoptr i64 %44 to i64* {
	[0x561df50620f8]:  %48 = inttoptr i64 %46 to i64*
	}

[0x561df4fd46f0]:   store i64 %42, i64* %46, align 8 {
	[0x561df5061fc0]:  store i64 %44, i64* %48, align 8
	}

[0x561df4fd4758]:   %47 = load i64, i64* %PC, align 8 {
	[0x561df4fe2c28]:  %49 = load i64, i64* %3, align 8
	}

[0x561df4fd4898]:   %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 24) to i64*), align 8 {
	[0x561df5064a48]:  %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (i8* @G_0x4005e8 to i64), i64 144) to i64*), align 8
	}

[0x561df4fd4910]:   store i64 %48, i64* %RAX, align 8, !tbaa !1261 {
	[0x561df4ff0560]:  store i64 %50, i64* %RAX.i17, align 8
	}

[0x561df4fd4978]:   %49 = load i64, i64* %RBP, align 8 {
	[0x561df5064918]:  %51 = load i64, i64* %RBP.i, align 8
	}

[0x561df4fd49f0]:   %50 = add i64 %49, -24 {
	[0x561df5061eb0]:  %52 = add i64 %51, -24
	}

[0x561df4fd4a70]:   %51 = add i64 %47, 12 {
	[0x561df4ff1480]:  %53 = add i64 %49, 12
	}

[0x561df4fd4af0]:   store i64 %51, i64* %PC, align 8 {
	[0x561df4ff3100]:  store i64 %53, i64* %3, align 8
	}

[0x561df4fd4b58]:   %52 = inttoptr i64 %50 to i64* {
	[0x561df50647e8]:  %54 = inttoptr i64 %52 to i64*
	}

[0x561df4fd4bd0]:   store i64 %48, i64* %52, align 8 {
	[0x561df4ff1e10]:  store i64 %50, i64* %54, align 8
	}

[0x561df4fd4c38]:   %53 = load i64, i64* %PC, align 8 {
	[0x561df50646b8]:  %55 = load i64, i64* %3, align 8
	}

[0x561df4fd4cf0]:   %54 = add i64 %53, -176 {
	[0x561df4ff1c10]:  %56 = add i64 %55, -176
	}

[0x561df4fd4d70]:   %55 = add i64 %53, 5 {
	[0x561df4ff19e0]:  %57 = add i64 %55, 5
	}

[0x561df4fd4dd8]:   %56 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df5064458]:  %58 = load i64, i64* %6, align 8
	}

[0x561df4fd4e50]:   %57 = add i64 %56, -8 {
	[0x561df4ff1880]:  %59 = add i64 %58, -8
	}

[0x561df4fd4eb8]:   %58 = inttoptr i64 %57 to i64* {
	[0x561df50639a8]:  %60 = inttoptr i64 %59 to i64*
	}

[0x561df4fd4f30]:   store i64 %55, i64* %58, align 8 {
	[0x561df4ff1730]:  store i64 %57, i64* %60, align 8
	}

[0x561df4fd4fb0]:   store i64 %57, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ff15d0]:  store i64 %59, i64* %6, align 8
	}

[0x561df4fd5030]:   store i64 %54, i64* %PC, align 8, !tbaa !1261 {
	[0x561df4ff2690]:  store i64 %56, i64* %3, align 8
	}

[0x561df4fd60d0]:   %68 = add i64 %67, 32 {
	[0x561df4ff4200]:  %69 = add i64 %68, 32
	}

[0x561df4fd6150]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ff28b0]:  store i64 %69, i64* %6, align 8
	}

[0x561df4fd6210]:   %69 = icmp ugt i64 %67, -33 {
	[0x561df4ff27a0]:  %70 = icmp ugt i64 %68, -33
	}

[0x561df4fd6278]:   %70 = zext i1 %69 to i8 {
	[0x561df50663e8]:  %71 = zext i1 %70 to i8
	}

[0x561df4fd62f0]:   store i8 %70, i8* %12, align 1, !tbaa !1265 {
	[0x561df4ff2b10]:  store i8 %71, i8* %14, align 1
	}

[0x561df4fd6358]:   %71 = trunc i64 %68 to i32 {
	[0x561df50662b8]:  %72 = trunc i64 %69 to i32
	}

[0x561df4fd63d0]:   %72 = and i32 %71, 255 {
	[0x561df4ff7800]:  %73 = and i32 %72, 255
	}

[0x561df4fd6488]:   %74 = trunc i32 %73 to i8 {
	[0x561df4fef568]:  %75 = trunc i32 %74 to i8
	}

[0x561df4fd6500]:   %75 = and i8 %74, 1 {
	[0x561df4ff7620]:  %76 = and i8 %75, 1
	}

[0x561df4fd6580]:   %76 = xor i8 %75, 1 {
	[0x561df4ff74c0]:  %77 = xor i8 %76, 1
	}

[0x561df4fd6600]:   store i8 %76, i8* %19, align 1, !tbaa !1279 {
	[0x561df4ff7360]:  store i8 %77, i8* %21, align 1
	}

[0x561df4fd6680]:   %77 = xor i64 %68, %67 {
	[0x561df4ff7200]:  %78 = xor i64 %69, %68
	}

[0x561df4fd6700]:   %78 = lshr i64 %77, 4 {
	[0x561df4ff5750]:  %79 = lshr i64 %78, 4
	}

[0x561df4fd6768]:   %79 = trunc i64 %78 to i8 {
	[0x561df4ffa728]:  %80 = trunc i64 %79 to i8
	}

[0x561df4fd67e0]:   %80 = and i8 %79, 1 {
	[0x561df4ff4f90]:  %81 = and i8 %80, 1
	}

[0x561df4fd6860]:   store i8 %80, i8* %24, align 1, !tbaa !1280 {
	[0x561df4ff7950]:  store i8 %81, i8* %26, align 1
	}

[0x561df4fd68e0]:   %81 = icmp eq i64 %68, 0 {
	[0x561df4fef2c0]:  %82 = icmp eq i64 %69, 0
	}

[0x561df4fd6948]:   %82 = zext i1 %81 to i8 {
	[0x561df5067ba8]:  %83 = zext i1 %82 to i8
	}

[0x561df4fd69c0]:   store i8 %82, i8* %27, align 1, !tbaa !1281 {
	[0x561df4fef160]:  store i8 %83, i8* %29, align 1
	}

[0x561df4fd6a40]:   %83 = lshr i64 %68, 63 {
	[0x561df4fef040]:  %84 = lshr i64 %69, 63
	}

[0x561df4fd6aa8]:   %84 = trunc i64 %83 to i8 {
	[0x561df5067a78]:  %85 = trunc i64 %84 to i8
	}

[0x561df4fd6b20]:   store i8 %84, i8* %30, align 1, !tbaa !1282 {
	[0x561df4feeef0]:  store i8 %85, i8* %32, align 1
	}

[0x561df4fd6ba0]:   %85 = lshr i64 %67, 63 {
	[0x561df4feed10]:  %86 = lshr i64 %68, 63
	}

[0x561df4fd6c20]:   %86 = xor i64 %83, %85 {
	[0x561df4feec30]:  %87 = xor i64 %84, %86
	}

[0x561df4fd6ca0]:   %87 = add nuw nsw i64 %86, %83 {
	[0x561df4ff7c10]:  %88 = add nuw nsw i64 %87, %84
	}

[0x561df4fd6d20]:   %88 = icmp eq i64 %87, 2 {
	[0x561df4fef420]:  %89 = icmp eq i64 %88, 2
	}

[0x561df4fd6d88]:   %89 = zext i1 %88 to i8 {
	[0x561df5067948]:  %90 = zext i1 %89 to i8
	}

[0x561df4fd6e00]:   store i8 %89, i8* %36, align 1, !tbaa !1283 {
	[0x561df4ffa450]:  store i8 %90, i8* %38, align 1
	}

[0x561df4fd6e80]:   %90 = add i64 %62, 8 {
	[0x561df4ffa2f0]:  %91 = add i64 %63, 8
	}

[0x561df4fd6f00]:   store i64 %90, i64* %PC, align 8 {
	[0x561df4ffa110]:  store i64 %91, i64* %3, align 8
	}

[0x561df4fd6fc0]:   %91 = add i64 %67, 40 {
	[0x561df4ff9fb0]:  %92 = add i64 %68, 40
	}

[0x561df4fd7028]:   %92 = inttoptr i64 %68 to i64* {
	[0x561df5067818]:  %93 = inttoptr i64 %69 to i64*
	}

[0x561df4fd7088]:   %93 = load i64, i64* %92, align 8 {
	[0x561df50676e8]:  %94 = load i64, i64* %93, align 8
	}

[0x561df4fd7100]:   store i64 %93, i64* %RBP, align 8, !tbaa !1261 {
	[0x561df4ff9e50]:  store i64 %94, i64* %RBP.i, align 8
	}

[0x561df4fd7180]:   store i64 %91, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ff9cb0]:  store i64 %92, i64* %6, align 8
	}

[0x561df4fd7200]:   %94 = add i64 %62, 9 {
	[0x561df4ff9b50]:  %95 = add i64 %63, 9
	}

[0x561df4fd7280]:   store i64 %94, i64* %PC, align 8 {
	[0x561df4ffa530]:  store i64 %95, i64* %3, align 8
	}

[0x561df4fd72e8]:   %95 = inttoptr i64 %91 to i64* {
	[0x561df50670f8]:  %96 = inttoptr i64 %92 to i64*
	}

[0x561df4fd7348]:   %96 = load i64, i64* %95, align 8 {
	[0x561df5066fc8]:  %97 = load i64, i64* %96, align 8
	}

[0x561df4fd73c0]:   store i64 %96, i64* %PC, align 8, !tbaa !1261 {
	[0x561df4ffd410]:  store i64 %97, i64* %3, align 8
	}

[0x561df4fd7480]:   %97 = add i64 %67, 48 {
	[0x561df4ffd2b0]:  %98 = add i64 %68, 48
	}

[0x561df4fd7500]:   store i64 %97, i64* %RSP, align 8, !tbaa !1261 {
	[0x561df4ffc7e0]:  store i64 %98, i64* %6, align 8
	}

[0x561df4fd7568]:   ret %struct.Memory* %59 {
	[0x561df5068068]:  ret %struct.Memory.32* %call2_400540
	}

[0x561df501f8b0]: %struct.State* %0 {
	[0x561df4ff0610]:%struct.State.1* %0
	}

[0x561df501f8f0]: i64 %1 {
	[0x561df4ff0360]:i64 %1
	}

[0x561df501f930]: %struct.Memory* %2 {
	[0x561df4feff50]:%struct.Memory.32* %2
	}

[0x561df501fae8]:   %3 = load i64, i64* %RBP, align 8 {
	[0x561df5049558]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x561df507e070]:   %59 = tail call %struct.Memory* @sub_400490_array_reverse(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2) {
	[0x561df4ff0f90]:  %call2_400540 = tail call %struct.Memory.32* @sub_400490.array_reverse(%struct.State.1* %0, i64 %56, %struct.Memory.32* %2)
	}

[0x561df507e138]:   %60 = load i64, i64* %RBP, align 8 {
	[0x561df5063878]:  %61 = load i64, i64* %RBP.i, align 8
	}

[0x561df507e1b0]:   %61 = add i64 %60, -32 {
	[0x561df4ff47d0]:  %62 = add i64 %61, -32
	}

[0x561df507e218]:   %62 = load i64, i64* %PC, align 8 {
	[0x561df5065cc8]:  %63 = load i64, i64* %3, align 8
	}

[0x561df507e290]:   %63 = add i64 %62, 3 {
	[0x561df4ff2d30]:  %64 = add i64 %63, 3
	}

[0x561df507e310]:   store i64 %63, i64* %PC, align 8 {
	[0x561df4ff4450]:  store i64 %64, i64* %3, align 8
	}

[0x561df507e378]:   %64 = inttoptr i64 %61 to i32* {
	[0x561df5066c38]:  %65 = inttoptr i64 %62 to i32*
	}

[0x561df507e3d8]:   %65 = load i32, i32* %64, align 4 {
	[0x561df50668a8]:  %66 = load i32, i32* %65, align 4
	}

[0x561df507e438]:   %66 = zext i32 %65 to i64 {
	[0x561df5066778]:  %67 = zext i32 %66 to i64
	}

[0x561df507e4b0]:   store i64 %66, i64* %RAX, align 8, !tbaa !1261 {
	[0x561df4ff2be0]:  store i64 %67, i64* %RAX.i17, align 8
	}

[0x561df507e518]:   %67 = load i64, i64* %RSP, align 8 {
	[0x561df5066648]:  %68 = load i64, i64* %6, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x561df501f970]: block_400510 {
	[0x561df4fea7c0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
