Writing '/tmp/tmpyv7nwfk_.dot'...
Writing '/tmp/tmpyv7nwfk_.dot':Done

Reading LLVM: /tmp/tmpjstycluo-query.ll
Extracting function [main] from /tmp/tmpjstycluo-query.ll
Dot file generated!
Writing '/tmp/tmpv0g9kosj.dot'...
Writing '/tmp/tmpv0g9kosj.dot':Done

Reading LLVM: /tmp/tmpc58yu56b-target.ll
Extracting function [main] from /tmp/tmpc58yu56b-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 48 store i64 4, i64* %RSI.i, align 8
- 49 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 50 %39 = add i64 %7, -40
- 51 store i64 %39, i64* %RDI.i, align 8
- 52 %40 = add i64 %7, -12
- 53 %41 = add i64 %10, 23
- 54 store i64 %41, i64* %3, align 8
- 55 %42 = inttoptr i64 %40 to i32*
- 56 store i32 0, i32* %42, align 4
- 57 %RAX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 58 %43 = load i64, i64* %3, align 8
- 59 %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%G_0x400600_type* @G_0x400600 to i64), i64 168) to i64*), align 8
- 60 %45 = load i64, i64* %RBP.i, align 8
- 61 %46 = add i64 %45, -32
- 62 %47 = add i64 %43, 12
- 63 store i64 %47, i64* %3, align 8
- 64 %48 = inttoptr i64 %46 to i64*
- 65 store i64 %44, i64* %48, align 8
- 66 %49 = load i64, i64* %3, align 8
- 67 %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%G_0x400608_type* @G_0x400608 to i64), i64 176) to i64*), align 8
- 68 store i64 %50, i64* %RAX.i17, align 8
- 69 %51 = load i64, i64* %RBP.i, align 8
- 70 %52 = add i64 %51, -24
- 71 %53 = add i64 %49, 12
- 72 store i64 %53, i64* %3, align 8
- 73 %54 = inttoptr i64 %52 to i64*
- 74 store i64 %50, i64* %54, align 8
- 75 %55 = load i64, i64* %3, align 8
- 76 %56 = add i64 %55, -176
- 77 %57 = add i64 %55, 5
- 78 %58 = load i64, i64* %6, align 8
- 79 %59 = add i64 %58, -8
- 80 %60 = inttoptr i64 %59 to i64*
- 81 store i64 %57, i64* %60, align 8
- 82 store i64 %59, i64* %6, align 8
- 83 store i64 %56, i64* %3, align 8
- 84 %call2_400560 = tail call %struct.Memory* @sub_4004b0.array_reverse(%struct.State* %0, i64 %56, %struct.Memory* %2)
- 85 %61 = load i64, i64* %RBP.i, align 8
- 86 %62 = add i64 %61, -32
- 87 %63 = load i64, i64* %3, align 8
- 88 %64 = add i64 %63, 3
- 89 store i64 %64, i64* %3, align 8
- 90 %65 = inttoptr i64 %62 to i32*
- 91 %66 = load i32, i32* %65, align 4
- 92 %67 = zext i32 %66 to i64
- 93 store i64 %67, i64* %RAX.i17, align 8
- 94 %68 = load i64, i64* %6, align 8
- 95 %69 = add i64 %68, 32
- 96 store i64 %69, i64* %6, align 8
- 97 %70 = icmp ugt i64 %68, -33
- 98 %71 = zext i1 %70 to i8
- 99 store i8 %71, i8* %14, align 1
- 100 %72 = trunc i64 %69 to i32
- 101 %73 = and i32 %72, 255
- 102 %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
- 103 %75 = trunc i32 %74 to i8
- 104 %76 = and i8 %75, 1
- 105 %77 = xor i8 %76, 1
- 106 store i8 %77, i8* %21, align 1
- 107 %78 = xor i64 %69, %68
- 108 %79 = lshr i64 %78, 4
- 109 %80 = trunc i64 %79 to i8
- 110 %81 = and i8 %80, 1
- 111 store i8 %81, i8* %26, align 1
- 112 %82 = icmp eq i64 %69, 0
- 113 %83 = zext i1 %82 to i8
- 114 store i8 %83, i8* %29, align 1
- 115 %84 = lshr i64 %69, 63
- 116 %85 = trunc i64 %84 to i8
- 117 store i8 %85, i8* %32, align 1
- 118 %86 = lshr i64 %68, 63
- 119 %87 = xor i64 %84, %86
- 120 %88 = add nuw nsw i64 %87, %84
- 121 %89 = icmp eq i64 %88, 2
- 122 %90 = zext i1 %89 to i8
- 123 store i8 %90, i8* %38, align 1
- 124 %91 = add i64 %63, 8
- 125 store i64 %91, i64* %3, align 8
- 126 %92 = add i64 %68, 40
- 127 %93 = inttoptr i64 %69 to i64*
- 128 %94 = load i64, i64* %93, align 8
- 129 store i64 %94, i64* %RBP.i, align 8
- 130 store i64 %92, i64* %6, align 8
- 131 %95 = add i64 %63, 9
- 132 store i64 %95, i64* %3, align 8
- 133 %96 = inttoptr i64 %92 to i64*
- 134 %97 = load i64, i64* %96, align 8
- 135 store i64 %97, i64* %3, align 8
- 136 %98 = add i64 %68, 48
- 137 store i64 %98, i64* %6, align 8
- 138 ret %struct.Memory* %call2_400560
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1358a5b6a8>, {0: {0}, 1: {5}, 2: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 3: {7}, 4: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 5: {4}, 6: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 7: {10, 79}, 8: {64, 133, 73, 11, 80, 56, 90, 127}, 9: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 10: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 11: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 12: {51, 15}, 13: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 14: {17}, 15: {98, 36, 47, 113, 18, 122, 92}, 16: {19}, 17: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 18: {100, 103, 40, 109, 116, 21, 24, 31}, 19: {101, 22}, 20: {84, 102, 23}, 21: {100, 103, 40, 109, 116, 21, 24, 31}, 22: {32, 25, 104, 110}, 23: {105, 26}, 24: {27}, 25: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 26: {107, 44, 29, 119}, 27: {108, 30}, 28: {100, 103, 40, 109, 116, 21, 24, 31}, 29: {32, 25, 104, 110}, 30: {33}, 31: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 32: {112, 35}, 33: {98, 36, 47, 113, 18, 122, 92}, 34: {37}, 35: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 36: {115, 43, 118, 39}, 37: {100, 103, 40, 109, 116, 21, 24, 31}, 38: {41}, 39: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 40: {115, 43, 118, 39}, 41: {107, 44, 29, 119}, 42: {120, 45}, 43: {121, 46}, 44: {98, 36, 47, 113, 18, 122, 92}, 45: {48}, 46: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 47: {2}, 48: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 49: {3}, 50: {51, 15}, 51: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 52: {53}, 53: {54}, 54: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 55: {64, 133, 73, 11, 80, 56, 90, 127}, 56: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 57: {1}, 58: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 59: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 60: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 61: {61, 86}, 62: {62, 71}, 63: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 64: {64, 133, 73, 11, 80, 56, 90, 127}, 65: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 66: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 67: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 68: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 69: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 70: {70}, 71: {62, 71}, 72: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 73: {64, 133, 73, 11, 80, 56, 90, 127}, 74: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 75: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 76: {76}, 77: {77}, 78: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 79: {10, 79}, 80: {64, 133, 73, 11, 80, 56, 90, 127}, 81: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 82: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 83: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 84: {84, 102, 23}, 85: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 86: {61, 86}, 87: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 88: {88}, 89: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 90: {64, 133, 73, 11, 80, 56, 90, 127}, 91: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 92: {98, 36, 47, 113, 18, 122, 92}, 93: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 94: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 95: {95}, 96: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 97: {97}, 98: {98, 36, 47, 113, 18, 122, 92}, 99: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 100: {100, 103, 40, 109, 116, 21, 24, 31}, 101: {101, 22}, 102: {84, 102, 23}, 103: {100, 103, 40, 109, 116, 21, 24, 31}, 104: {32, 25, 104, 110}, 105: {105, 26}, 106: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 107: {107, 44, 29, 119}, 108: {108, 30}, 109: {100, 103, 40, 109, 116, 21, 24, 31}, 110: {32, 25, 104, 110}, 111: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 112: {112, 35}, 113: {98, 36, 47, 113, 18, 122, 92}, 114: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 115: {115, 43, 118, 39}, 116: {100, 103, 40, 109, 116, 21, 24, 31}, 117: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 118: {115, 43, 118, 39}, 119: {107, 44, 29, 119}, 120: {120, 45}, 121: {121, 46}, 122: {98, 36, 47, 113, 18, 122, 92}, 123: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 124: {124}, 125: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 126: {126}, 127: {64, 133, 73, 11, 80, 56, 90, 127}, 128: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 129: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 130: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 131: {131}, 132: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 133: {64, 133, 73, 11, 80, 56, 90, 127}, 134: {128, 66, 67, 69, 6, 134, 9, 91, 75, 13, 78, 85, 87, 58, 59, 60, 94}, 135: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 136: {136}, 137: {129, 130, 132, 135, 8, 137, 12, 14, 16, 20, 28, 34, 38, 42, 49, 50, 52, 55, 57, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 138: {138}})
Equivalent! frozenset({66, 58}) {58, 66}
Equivalent! frozenset({62, 71}) {62, 71}
Equivalent! frozenset({72, 63}) {72, 63}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1358a5b6a8>, {0: {0}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {4}, 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {14}, 12: {15}, 13: {16}, 14: {17}, 15: {18}, 16: {19}, 17: {20}, 18: {21}, 19: {22}, 20: {23}, 21: {24}, 22: {25}, 23: {26}, 24: {27}, 25: {28}, 26: {29}, 27: {30}, 28: {31}, 29: {32}, 30: {33}, 31: {34}, 32: {35}, 33: {36}, 34: {37}, 35: {38}, 36: {39}, 37: {40}, 38: {41}, 39: {42}, 40: {43}, 41: {44}, 42: {45}, 43: {46}, 44: {47}, 45: {48}, 46: {49}, 47: {2}, 48: {50}, 49: {3}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {56}, 56: {57}, 57: {1}, 58: {66}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {58}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 getelementptr getelementptr
EXACT 50 add add
EXACT 51 store store
EXACT 52 add add
EXACT 53 add add
EXACT 54 store store
EXACT 55 inttoptr inttoptr
EXACT 56 store store
EXACT 57 getelementptr getelementptr
EXACT 58 load load
EXACT 59 load load
EXACT 60 load load
EXACT 61 add add
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 load load
EXACT 68 store store
EXACT 69 load load
EXACT 70 add add
EXACT 71 add add
EXACT 72 store store
EXACT 73 inttoptr inttoptr
EXACT 74 store store
EXACT 75 load load
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
EXACT 85 load load
EXACT 86 add add
EXACT 87 load load
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 load load
EXACT 92 zext zext
EXACT 93 store store
EXACT 94 load load
EXACT 95 add add
EXACT 96 store store
EXACT 97 icmp icmp
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 trunc trunc
EXACT 101 and and
EXACT 102 tail tail
EXACT 103 trunc trunc
EXACT 104 and and
EXACT 105 xor xor
EXACT 106 store store
EXACT 107 xor xor
EXACT 108 lshr lshr
EXACT 109 trunc trunc
EXACT 110 and and
EXACT 111 store store
EXACT 112 icmp icmp
EXACT 113 zext zext
EXACT 114 store store
EXACT 115 lshr lshr
EXACT 116 trunc trunc
EXACT 117 store store
EXACT 118 lshr lshr
EXACT 119 xor xor
EXACT 120 add add
EXACT 121 icmp icmp
EXACT 122 zext zext
EXACT 123 store store
EXACT 124 add add
EXACT 125 store store
EXACT 126 add add
EXACT 127 inttoptr inttoptr
EXACT 128 load load
EXACT 129 store store
EXACT 130 store store
EXACT 131 add add
EXACT 132 store store
EXACT 133 inttoptr inttoptr
EXACT 134 load load
EXACT 135 store store
EXACT 136 add add
EXACT 137 store store
EXACT 138 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 3 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %3 = load i64, i64* %RBP, align 8
- 7 %4 = add i64 %1, 1
- 8 store i64 %4, i64* %PC, align 8
- 9 %5 = load i64, i64* %RSP, align 8
- 10 %6 = add i64 %5, -8
- 11 %7 = inttoptr i64 %6 to i64*
- 12 store i64 %3, i64* %7, align 8
- 13 %8 = load i64, i64* %PC, align 8
- 14 store i64 %6, i64* %RBP, align 8
- 15 %9 = add i64 %5, -40
- 16 store i64 %9, i64* %RSP, align 8
- 17 %10 = icmp ult i64 %6, 32
- 18 %11 = zext i1 %10 to i8
- 19 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 20 store i8 %11, i8* %12, align 1
- 21 %13 = trunc i64 %9 to i32
- 22 %14 = and i32 %13, 255
- 23 %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
- 24 %16 = trunc i32 %15 to i8
- 25 %17 = and i8 %16, 1
- 26 %18 = xor i8 %17, 1
- 27 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 28 store i8 %18, i8* %19, align 1
- 29 %20 = xor i64 %6, %9
- 30 %21 = lshr i64 %20, 4
- 31 %22 = trunc i64 %21 to i8
- 32 %23 = and i8 %22, 1
- 33 %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 34 store i8 %23, i8* %24, align 1
- 35 %25 = icmp eq i64 %9, 0
- 36 %26 = zext i1 %25 to i8
- 37 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 38 store i8 %26, i8* %27, align 1
- 39 %28 = lshr i64 %9, 63
- 40 %29 = trunc i64 %28 to i8
- 41 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 42 store i8 %29, i8* %30, align 1
- 43 %31 = lshr i64 %6, 63
- 44 %32 = xor i64 %28, %31
- 45 %33 = add nuw nsw i64 %32, %31
- 46 %34 = icmp eq i64 %33, 2
- 47 %35 = zext i1 %34 to i8
- 48 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 49 store i8 %35, i8* %36, align 1
- 50 store i64 4, i64* %RSI, align 8
- 51 %37 = add i64 %5, -40
- 52 store i64 %37, i64* %RDI, align 8
- 53 %38 = add i64 %5, -12
- 54 %39 = add i64 %8, 23
- 55 store i64 %39, i64* %PC, align 8
- 56 %40 = inttoptr i64 %38 to i32*
- 57 store i32 0, i32* %40, align 4
- 58 %41 = load i64, i64* %PC, align 8
- 59 %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 16) to i64*), align 16
- 60 %43 = load i64, i64* %RBP, align 8
- 61 %44 = add i64 %43, -32
- 62 %45 = add i64 %41, 12
- 63 store i64 %45, i64* %PC, align 8
- 64 %46 = inttoptr i64 %44 to i64*
- 65 store i64 %42, i64* %46, align 8
- 66 %47 = load i64, i64* %PC, align 8
- 67 %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 24) to i64*), align 8
- 68 store i64 %48, i64* %RAX, align 8
- 69 %49 = load i64, i64* %RBP, align 8
- 70 %50 = add i64 %49, -24
- 71 %51 = add i64 %47, 12
- 72 store i64 %51, i64* %PC, align 8
- 73 %52 = inttoptr i64 %50 to i64*
- 74 store i64 %48, i64* %52, align 8
- 75 %53 = load i64, i64* %PC, align 8
- 76 %54 = add i64 %53, -176
- 77 %55 = add i64 %53, 5
- 78 %56 = load i64, i64* %RSP, align 8
- 79 %57 = add i64 %56, -8
- 80 %58 = inttoptr i64 %57 to i64*
- 81 store i64 %55, i64* %58, align 8
- 82 store i64 %57, i64* %RSP, align 8
- 83 store i64 %54, i64* %PC, align 8
- 84 %59 = tail call %struct.Memory* @sub_4004b0_array_reverse_renamed_(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2)
- 85 %60 = load i64, i64* %RBP, align 8
- 86 %61 = add i64 %60, -32
- 87 %62 = load i64, i64* %PC, align 8
- 88 %63 = add i64 %62, 3
- 89 store i64 %63, i64* %PC, align 8
- 90 %64 = inttoptr i64 %61 to i32*
- 91 %65 = load i32, i32* %64, align 4
- 92 %66 = zext i32 %65 to i64
- 93 store i64 %66, i64* %RAX, align 8
- 94 %67 = load i64, i64* %RSP, align 8
- 95 %68 = add i64 %67, 32
- 96 store i64 %68, i64* %RSP, align 8
- 97 %69 = icmp ugt i64 %67, -33
- 98 %70 = zext i1 %69 to i8
- 99 store i8 %70, i8* %12, align 1
- 100 %71 = trunc i64 %68 to i32
- 101 %72 = and i32 %71, 255
- 102 %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #12
- 103 %74 = trunc i32 %73 to i8
- 104 %75 = and i8 %74, 1
- 105 %76 = xor i8 %75, 1
- 106 store i8 %76, i8* %19, align 1
- 107 %77 = xor i64 %68, %67
- 108 %78 = lshr i64 %77, 4
- 109 %79 = trunc i64 %78 to i8
- 110 %80 = and i8 %79, 1
- 111 store i8 %80, i8* %24, align 1
- 112 %81 = icmp eq i64 %68, 0
- 113 %82 = zext i1 %81 to i8
- 114 store i8 %82, i8* %27, align 1
- 115 %83 = lshr i64 %68, 63
- 116 %84 = trunc i64 %83 to i8
- 117 store i8 %84, i8* %30, align 1
- 118 %85 = lshr i64 %67, 63
- 119 %86 = xor i64 %83, %85
- 120 %87 = add nuw nsw i64 %86, %83
- 121 %88 = icmp eq i64 %87, 2
- 122 %89 = zext i1 %88 to i8
- 123 store i8 %89, i8* %36, align 1
- 124 %90 = add i64 %62, 8
- 125 store i64 %90, i64* %PC, align 8
- 126 %91 = add i64 %67, 40
- 127 %92 = inttoptr i64 %68 to i64*
- 128 %93 = load i64, i64* %92, align 8
- 129 store i64 %93, i64* %RBP, align 8
- 130 store i64 %91, i64* %RSP, align 8
- 131 %94 = add i64 %62, 9
- 132 store i64 %94, i64* %PC, align 8
- 133 %95 = inttoptr i64 %91 to i64*
- 134 %96 = load i64, i64* %95, align 8
- 135 store i64 %96, i64* %PC, align 8
- 136 %97 = add i64 %67, 48
- 137 store i64 %97, i64* %RSP, align 8
- 138 ret %struct.Memory* %59
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1358dcd0d0>, {0: {0}, 1: {57}, 2: {47}, 3: {49}, 4: {5}, 5: {1}, 6: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 7: {3}, 8: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 9: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 10: {79, 7}, 11: {64, 133, 8, 73, 80, 55, 90, 127}, 12: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 13: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 14: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 15: {50, 12}, 16: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 17: {14}, 18: {33, 98, 44, 15, 113, 122, 92}, 19: {16}, 20: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 21: {100, 37, 103, 109, 18, 116, 21, 28}, 22: {19, 101}, 23: {20, 102, 84}, 24: {100, 37, 103, 109, 18, 116, 21, 28}, 25: {104, 110, 29, 22}, 26: {105, 23}, 27: {24}, 28: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 29: {41, 26, 107, 119}, 30: {27, 108}, 31: {100, 37, 103, 109, 18, 116, 21, 28}, 32: {104, 110, 29, 22}, 33: {30}, 34: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 35: {32, 112}, 36: {33, 98, 44, 15, 113, 122, 92}, 37: {34}, 38: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 39: {40, 115, 36, 118}, 40: {100, 37, 103, 109, 18, 116, 21, 28}, 41: {38}, 42: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 43: {40, 115, 36, 118}, 44: {41, 26, 107, 119}, 45: {120, 42}, 46: {121, 43}, 47: {33, 98, 44, 15, 113, 122, 92}, 48: {45}, 49: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 50: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 51: {50, 12}, 52: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 53: {52}, 54: {53}, 55: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 56: {64, 133, 8, 73, 80, 55, 90, 127}, 57: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 58: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 59: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 60: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 61: {61, 86}, 62: {62, 71}, 63: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 64: {64, 133, 8, 73, 80, 55, 90, 127}, 65: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 66: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 67: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 68: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 69: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 70: {70}, 71: {62, 71}, 72: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 73: {64, 133, 8, 73, 80, 55, 90, 127}, 74: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 75: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 76: {76}, 77: {77}, 78: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 79: {79, 7}, 80: {64, 133, 8, 73, 80, 55, 90, 127}, 81: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 82: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 83: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 84: {20, 102, 84}, 85: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 86: {61, 86}, 87: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 88: {88}, 89: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 90: {64, 133, 8, 73, 80, 55, 90, 127}, 91: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 92: {33, 98, 44, 15, 113, 122, 92}, 93: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 94: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 95: {95}, 96: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 97: {97}, 98: {33, 98, 44, 15, 113, 122, 92}, 99: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 100: {100, 37, 103, 109, 18, 116, 21, 28}, 101: {19, 101}, 102: {20, 102, 84}, 103: {100, 37, 103, 109, 18, 116, 21, 28}, 104: {104, 110, 29, 22}, 105: {105, 23}, 106: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 107: {41, 26, 107, 119}, 108: {27, 108}, 109: {100, 37, 103, 109, 18, 116, 21, 28}, 110: {104, 110, 29, 22}, 111: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 112: {32, 112}, 113: {33, 98, 44, 15, 113, 122, 92}, 114: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 115: {40, 115, 36, 118}, 116: {100, 37, 103, 109, 18, 116, 21, 28}, 117: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 118: {40, 115, 36, 118}, 119: {41, 26, 107, 119}, 120: {120, 42}, 121: {121, 43}, 122: {33, 98, 44, 15, 113, 122, 92}, 123: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 124: {124}, 125: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 126: {126}, 127: {64, 133, 8, 73, 80, 55, 90, 127}, 128: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 129: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 130: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 131: {131}, 132: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 133: {64, 133, 8, 73, 80, 55, 90, 127}, 134: {128, 2, 66, 67, 69, 6, 134, 10, 75, 91, 78, 85, 87, 58, 59, 60, 94}, 135: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 136: {136}, 137: {129, 130, 4, 132, 135, 9, 137, 11, 13, 17, 25, 31, 35, 39, 46, 48, 51, 54, 56, 63, 65, 68, 72, 74, 81, 82, 83, 89, 93, 96, 99, 106, 111, 114, 117, 123, 125}, 138: {138}})
Equivalent! frozenset({66, 58}) {58, 66}
Equivalent! frozenset({62, 71}) {62, 71}
Equivalent! frozenset({72, 63}) {72, 63}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1358dcd0d0>, {0: {0}, 1: {57}, 2: {47}, 3: {49}, 4: {5}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: {11}, 15: {12}, 16: {13}, 17: {14}, 18: {15}, 19: {16}, 20: {17}, 21: {18}, 22: {19}, 23: {20}, 24: {21}, 25: {22}, 26: {23}, 27: {24}, 28: {25}, 29: {26}, 30: {27}, 31: {28}, 32: {29}, 33: {30}, 34: {31}, 35: {32}, 36: {33}, 37: {34}, 38: {35}, 39: {36}, 40: {37}, 41: {38}, 42: {39}, 43: {40}, 44: {41}, 45: {42}, 46: {43}, 47: {44}, 48: {45}, 49: {46}, 50: {48}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {66}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {58}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 store store
EXACT 17 icmp icmp
EXACT 18 zext zext
EXACT 19 getelementptr getelementptr
EXACT 20 store store
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 tail tail
EXACT 24 trunc trunc
EXACT 25 and and
EXACT 26 xor xor
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 xor xor
EXACT 30 lshr lshr
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 getelementptr getelementptr
EXACT 34 store store
EXACT 35 icmp icmp
EXACT 36 zext zext
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 lshr lshr
EXACT 40 trunc trunc
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 lshr lshr
EXACT 44 xor xor
EXACT 45 add add
EXACT 46 icmp icmp
EXACT 47 zext zext
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 store store
EXACT 51 add add
EXACT 52 store store
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 load load
EXACT 59 load load
EXACT 60 load load
EXACT 61 add add
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 load load
EXACT 68 store store
EXACT 69 load load
EXACT 70 add add
EXACT 71 add add
EXACT 72 store store
EXACT 73 inttoptr inttoptr
EXACT 74 store store
EXACT 75 load load
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
EXACT 85 load load
EXACT 86 add add
EXACT 87 load load
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 load load
EXACT 92 zext zext
EXACT 93 store store
EXACT 94 load load
EXACT 95 add add
EXACT 96 store store
EXACT 97 icmp icmp
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 trunc trunc
EXACT 101 and and
EXACT 102 tail tail
EXACT 103 trunc trunc
EXACT 104 and and
EXACT 105 xor xor
EXACT 106 store store
EXACT 107 xor xor
EXACT 108 lshr lshr
EXACT 109 trunc trunc
EXACT 110 and and
EXACT 111 store store
EXACT 112 icmp icmp
EXACT 113 zext zext
EXACT 114 store store
EXACT 115 lshr lshr
EXACT 116 trunc trunc
EXACT 117 store store
EXACT 118 lshr lshr
EXACT 119 xor xor
EXACT 120 add add
EXACT 121 icmp icmp
EXACT 122 zext zext
EXACT 123 store store
EXACT 124 add add
EXACT 125 store store
EXACT 126 add add
EXACT 127 inttoptr inttoptr
EXACT 128 load load
EXACT 129 store store
EXACT 130 store store
EXACT 131 add add
EXACT 132 store store
EXACT 133 inttoptr inttoptr
EXACT 134 load load
EXACT 135 store store
EXACT 136 add add
EXACT 137 store store
EXACT 138 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 4, i64* %RSI.i, align 8', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -40', 'store i64 %39, i64* %RDI.i, align 8', '%40 = add i64 %7, -12', '%41 = add i64 %10, 23', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%RAX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%43 = load i64, i64* %3, align 8', '%44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%G_0x400600_type* @G_0x400600 to i64), i64 168) to i64*), align 8', '%45 = load i64, i64* %RBP.i, align 8', '%46 = add i64 %45, -32', '%47 = add i64 %43, 12', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %46 to i64*', 'store i64 %44, i64* %48, align 8', '%49 = load i64, i64* %3, align 8', '%50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%G_0x400608_type* @G_0x400608 to i64), i64 176) to i64*), align 8', 'store i64 %50, i64* %RAX.i17, align 8', '%51 = load i64, i64* %RBP.i, align 8', '%52 = add i64 %51, -24', '%53 = add i64 %49, 12', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %52 to i64*', 'store i64 %50, i64* %54, align 8', '%55 = load i64, i64* %3, align 8', '%56 = add i64 %55, -176', '%57 = add i64 %55, 5', '%58 = load i64, i64* %6, align 8', '%59 = add i64 %58, -8', '%60 = inttoptr i64 %59 to i64*', 'store i64 %57, i64* %60, align 8', 'store i64 %59, i64* %6, align 8', 'store i64 %56, i64* %3, align 8', '%call2_400560 = tail call %struct.Memory* @sub_4004b0.array_reverse(%struct.State* %0, i64 %56, %struct.Memory* %2)', '%61 = load i64, i64* %RBP.i, align 8', '%62 = add i64 %61, -32', '%63 = load i64, i64* %3, align 8', '%64 = add i64 %63, 3', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %62 to i32*', '%66 = load i32, i32* %65, align 4', '%67 = zext i32 %66 to i64', 'store i64 %67, i64* %RAX.i17, align 8', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, 32', 'store i64 %69, i64* %6, align 8', '%70 = icmp ugt i64 %68, -33', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %14, align 1', '%72 = trunc i64 %69 to i32', '%73 = and i32 %72, 255', '%74 = tail call i32 @llvm.ctpop.i32(i32 %73)', '%75 = trunc i32 %74 to i8', '%76 = and i8 %75, 1', '%77 = xor i8 %76, 1', 'store i8 %77, i8* %21, align 1', '%78 = xor i64 %69, %68', '%79 = lshr i64 %78, 4', '%80 = trunc i64 %79 to i8', '%81 = and i8 %80, 1', 'store i8 %81, i8* %26, align 1', '%82 = icmp eq i64 %69, 0', '%83 = zext i1 %82 to i8', 'store i8 %83, i8* %29, align 1', '%84 = lshr i64 %69, 63', '%85 = trunc i64 %84 to i8', 'store i8 %85, i8* %32, align 1', '%86 = lshr i64 %68, 63', '%87 = xor i64 %84, %86', '%88 = add nuw nsw i64 %87, %84', '%89 = icmp eq i64 %88, 2', '%90 = zext i1 %89 to i8', 'store i8 %90, i8* %38, align 1', '%91 = add i64 %63, 8', 'store i64 %91, i64* %3, align 8', '%92 = add i64 %68, 40', '%93 = inttoptr i64 %69 to i64*', '%94 = load i64, i64* %93, align 8', 'store i64 %94, i64* %RBP.i, align 8', 'store i64 %92, i64* %6, align 8', '%95 = add i64 %63, 9', 'store i64 %95, i64* %3, align 8', '%96 = inttoptr i64 %92 to i64*', '%97 = load i64, i64* %96, align 8', 'store i64 %97, i64* %3, align 8', '%98 = add i64 %68, 48', 'store i64 %98, i64* %6, align 8', 'ret %struct.Memory* %call2_400560'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 4, i64* %RSI.i, align 8
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -40
Found line to remove! store i64 %39, i64* %RDI.i, align 8
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 23
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %RAX.i17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %43 = load i64, i64* %3, align 8
Found line to remove! %44 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%G_0x400600_type* @G_0x400600 to i64), i64 168) to i64*), align 8
Found line to remove! %45 = load i64, i64* %RBP.i, align 8
Found line to remove! %46 = add i64 %45, -32
Found line to remove! %47 = add i64 %43, 12
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %46 to i64*
Found line to remove! store i64 %44, i64* %48, align 8
Found line to remove! %49 = load i64, i64* %3, align 8
Found line to remove! %50 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%G_0x400608_type* @G_0x400608 to i64), i64 176) to i64*), align 8
Found line to remove! store i64 %50, i64* %RAX.i17, align 8
Found line to remove! %51 = load i64, i64* %RBP.i, align 8
Found line to remove! %52 = add i64 %51, -24
Found line to remove! %53 = add i64 %49, 12
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = inttoptr i64 %52 to i64*
Found line to remove! store i64 %50, i64* %54, align 8
Found line to remove! %55 = load i64, i64* %3, align 8
Found line to remove! %56 = add i64 %55, -176
Found line to remove! %57 = add i64 %55, 5
Found line to remove! %58 = load i64, i64* %6, align 8
Found line to remove! %59 = add i64 %58, -8
Found line to remove! %60 = inttoptr i64 %59 to i64*
Found line to remove! store i64 %57, i64* %60, align 8
Found line to remove! store i64 %59, i64* %6, align 8
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %call2_400560 = tail call %struct.Memory* @sub_4004b0.array_reverse(%struct.State* %0, i64 %56, %struct.Memory* %2)
Found line to remove! %61 = load i64, i64* %RBP.i, align 8
Found line to remove! %62 = add i64 %61, -32
Found line to remove! %63 = load i64, i64* %3, align 8
Found line to remove! %64 = add i64 %63, 3
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %65 = inttoptr i64 %62 to i32*
Found line to remove! %66 = load i32, i32* %65, align 4
Found line to remove! %67 = zext i32 %66 to i64
Found line to remove! store i64 %67, i64* %RAX.i17, align 8
Found line to remove! %68 = load i64, i64* %6, align 8
Found line to remove! %69 = add i64 %68, 32
Found line to remove! store i64 %69, i64* %6, align 8
Found line to remove! %70 = icmp ugt i64 %68, -33
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %14, align 1
Found line to remove! %72 = trunc i64 %69 to i32
Found line to remove! %73 = and i32 %72, 255
Found line to remove! %74 = tail call i32 @llvm.ctpop.i32(i32 %73)
Found line to remove! %75 = trunc i32 %74 to i8
Found line to remove! %76 = and i8 %75, 1
Found line to remove! %77 = xor i8 %76, 1
Found line to remove! store i8 %77, i8* %21, align 1
Found line to remove! %78 = xor i64 %69, %68
Found line to remove! %79 = lshr i64 %78, 4
Found line to remove! %80 = trunc i64 %79 to i8
Found line to remove! %81 = and i8 %80, 1
Found line to remove! store i8 %81, i8* %26, align 1
Found line to remove! %82 = icmp eq i64 %69, 0
Found line to remove! %83 = zext i1 %82 to i8
Found line to remove! store i8 %83, i8* %29, align 1
Found line to remove! %84 = lshr i64 %69, 63
Found line to remove! %85 = trunc i64 %84 to i8
Found line to remove! store i8 %85, i8* %32, align 1
Found line to remove! %86 = lshr i64 %68, 63
Found line to remove! %87 = xor i64 %84, %86
Found line to remove! %88 = add nuw nsw i64 %87, %84
Found line to remove! %89 = icmp eq i64 %88, 2
Found line to remove! %90 = zext i1 %89 to i8
Found line to remove! store i8 %90, i8* %38, align 1
Found line to remove! %91 = add i64 %63, 8
Found line to remove! store i64 %91, i64* %3, align 8
Found line to remove! %92 = add i64 %68, 40
Found line to remove! %93 = inttoptr i64 %69 to i64*
Found line to remove! %94 = load i64, i64* %93, align 8
Found line to remove! store i64 %94, i64* %RBP.i, align 8
Found line to remove! store i64 %92, i64* %6, align 8
Found line to remove! %95 = add i64 %63, 9
Found line to remove! store i64 %95, i64* %3, align 8
Found line to remove! %96 = inttoptr i64 %92 to i64*
Found line to remove! %97 = load i64, i64* %96, align 8
Found line to remove! store i64 %97, i64* %3, align 8
Found line to remove! %98 = add i64 %68, 48
Found line to remove! store i64 %98, i64* %6, align 8
Found line to remove! ret %struct.Memory* %call2_400560
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = load i64, i64* %RSP, align 8', '%6 = add i64 %5, -8', '%7 = inttoptr i64 %6 to i64*', 'store i64 %3, i64* %7, align 8', '%8 = load i64, i64* %PC, align 8', 'store i64 %6, i64* %RBP, align 8', '%9 = add i64 %5, -40', 'store i64 %9, i64* %RSP, align 8', '%10 = icmp ult i64 %6, 32', '%11 = zext i1 %10 to i8', '%12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %11, i8* %12, align 1', '%13 = trunc i64 %9 to i32', '%14 = and i32 %13, 255', '%15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12', '%16 = trunc i32 %15 to i8', '%17 = and i8 %16, 1', '%18 = xor i8 %17, 1', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %18, i8* %19, align 1', '%20 = xor i64 %6, %9', '%21 = lshr i64 %20, 4', '%22 = trunc i64 %21 to i8', '%23 = and i8 %22, 1', '%24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %23, i8* %24, align 1', '%25 = icmp eq i64 %9, 0', '%26 = zext i1 %25 to i8', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %26, i8* %27, align 1', '%28 = lshr i64 %9, 63', '%29 = trunc i64 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %6, 63', '%32 = xor i64 %28, %31', '%33 = add nuw nsw i64 %32, %31', '%34 = icmp eq i64 %33, 2', '%35 = zext i1 %34 to i8', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %35, i8* %36, align 1', 'store i64 4, i64* %RSI, align 8', '%37 = add i64 %5, -40', 'store i64 %37, i64* %RDI, align 8', '%38 = add i64 %5, -12', '%39 = add i64 %8, 23', 'store i64 %39, i64* %PC, align 8', '%40 = inttoptr i64 %38 to i32*', 'store i32 0, i32* %40, align 4', '%41 = load i64, i64* %PC, align 8', '%42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 16) to i64*), align 16', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -32', '%45 = add i64 %41, 12', 'store i64 %45, i64* %PC, align 8', '%46 = inttoptr i64 %44 to i64*', 'store i64 %42, i64* %46, align 8', '%47 = load i64, i64* %PC, align 8', '%48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 24) to i64*), align 8', 'store i64 %48, i64* %RAX, align 8', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -24', '%51 = add i64 %47, 12', 'store i64 %51, i64* %PC, align 8', '%52 = inttoptr i64 %50 to i64*', 'store i64 %48, i64* %52, align 8', '%53 = load i64, i64* %PC, align 8', '%54 = add i64 %53, -176', '%55 = add i64 %53, 5', '%56 = load i64, i64* %RSP, align 8', '%57 = add i64 %56, -8', '%58 = inttoptr i64 %57 to i64*', 'store i64 %55, i64* %58, align 8', 'store i64 %57, i64* %RSP, align 8', 'store i64 %54, i64* %PC, align 8', '%59 = tail call %struct.Memory* @sub_4004b0_array_reverse_renamed_(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2)', '%60 = load i64, i64* %RBP, align 8', '%61 = add i64 %60, -32', '%62 = load i64, i64* %PC, align 8', '%63 = add i64 %62, 3', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %61 to i32*', '%65 = load i32, i32* %64, align 4', '%66 = zext i32 %65 to i64', 'store i64 %66, i64* %RAX, align 8', '%67 = load i64, i64* %RSP, align 8', '%68 = add i64 %67, 32', 'store i64 %68, i64* %RSP, align 8', '%69 = icmp ugt i64 %67, -33', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %12, align 1', '%71 = trunc i64 %68 to i32', '%72 = and i32 %71, 255', '%73 = tail call i32 @llvm.ctpop.i32(i32 %72) #12', '%74 = trunc i32 %73 to i8', '%75 = and i8 %74, 1', '%76 = xor i8 %75, 1', 'store i8 %76, i8* %19, align 1', '%77 = xor i64 %68, %67', '%78 = lshr i64 %77, 4', '%79 = trunc i64 %78 to i8', '%80 = and i8 %79, 1', 'store i8 %80, i8* %24, align 1', '%81 = icmp eq i64 %68, 0', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %27, align 1', '%83 = lshr i64 %68, 63', '%84 = trunc i64 %83 to i8', 'store i8 %84, i8* %30, align 1', '%85 = lshr i64 %67, 63', '%86 = xor i64 %83, %85', '%87 = add nuw nsw i64 %86, %83', '%88 = icmp eq i64 %87, 2', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %36, align 1', '%90 = add i64 %62, 8', 'store i64 %90, i64* %PC, align 8', '%91 = add i64 %67, 40', '%92 = inttoptr i64 %68 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %RBP, align 8', 'store i64 %91, i64* %RSP, align 8', '%94 = add i64 %62, 9', 'store i64 %94, i64* %PC, align 8', '%95 = inttoptr i64 %91 to i64*', '%96 = load i64, i64* %95, align 8', 'store i64 %96, i64* %PC, align 8', '%97 = add i64 %67, 48', 'store i64 %97, i64* %RSP, align 8', 'ret %struct.Memory* %59'])
Keep: block_400530:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = load i64, i64* %RSP, align 8
Found line to remove! %6 = add i64 %5, -8
Found line to remove! %7 = inttoptr i64 %6 to i64*
Found line to remove! store i64 %3, i64* %7, align 8
Found line to remove! %8 = load i64, i64* %PC, align 8
Found line to remove! store i64 %6, i64* %RBP, align 8
Found line to remove! %9 = add i64 %5, -40
Found line to remove! store i64 %9, i64* %RSP, align 8
Found line to remove! %10 = icmp ult i64 %6, 32
Found line to remove! %11 = zext i1 %10 to i8
Found line to remove! %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %11, i8* %12, align 1
Found line to remove! %13 = trunc i64 %9 to i32
Found line to remove! %14 = and i32 %13, 255
Found line to remove! %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
Found line to remove! %16 = trunc i32 %15 to i8
Found line to remove! %17 = and i8 %16, 1
Found line to remove! %18 = xor i8 %17, 1
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %18, i8* %19, align 1
Found line to remove! %20 = xor i64 %6, %9
Found line to remove! %21 = lshr i64 %20, 4
Found line to remove! %22 = trunc i64 %21 to i8
Found line to remove! %23 = and i8 %22, 1
Found line to remove! %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %23, i8* %24, align 1
Found line to remove! %25 = icmp eq i64 %9, 0
Found line to remove! %26 = zext i1 %25 to i8
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = lshr i64 %9, 63
Found line to remove! %29 = trunc i64 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %6, 63
Found line to remove! %32 = xor i64 %28, %31
Found line to remove! %33 = add nuw nsw i64 %32, %31
Found line to remove! %34 = icmp eq i64 %33, 2
Found line to remove! %35 = zext i1 %34 to i8
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %35, i8* %36, align 1
Found line to remove! store i64 4, i64* %RSI, align 8
Found line to remove! %37 = add i64 %5, -40
Found line to remove! store i64 %37, i64* %RDI, align 8
Found line to remove! %38 = add i64 %5, -12
Found line to remove! %39 = add i64 %8, 23
Found line to remove! store i64 %39, i64* %PC, align 8
Found line to remove! %40 = inttoptr i64 %38 to i32*
Found line to remove! store i32 0, i32* %40, align 4
Found line to remove! %41 = load i64, i64* %PC, align 8
Found line to remove! %42 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 16) to i64*), align 16
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -32
Found line to remove! %45 = add i64 %41, 12
Found line to remove! store i64 %45, i64* %PC, align 8
Found line to remove! %46 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %42, i64* %46, align 8
Found line to remove! %47 = load i64, i64* %PC, align 8
Found line to remove! %48 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 24) to i64*), align 8
Found line to remove! store i64 %48, i64* %RAX, align 8
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -24
Found line to remove! %51 = add i64 %47, 12
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %48, i64* %52, align 8
Found line to remove! %53 = load i64, i64* %PC, align 8
Found line to remove! %54 = add i64 %53, -176
Found line to remove! %55 = add i64 %53, 5
Found line to remove! %56 = load i64, i64* %RSP, align 8
Found line to remove! %57 = add i64 %56, -8
Found line to remove! %58 = inttoptr i64 %57 to i64*
Found line to remove! store i64 %55, i64* %58, align 8
Found line to remove! store i64 %57, i64* %RSP, align 8
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %59 = tail call %struct.Memory* @sub_4004b0_array_reverse_renamed_(%struct.State* nonnull %0, i64 %54, %struct.Memory* %2)
Found line to remove! %60 = load i64, i64* %RBP, align 8
Found line to remove! %61 = add i64 %60, -32
Found line to remove! %62 = load i64, i64* %PC, align 8
Found line to remove! %63 = add i64 %62, 3
Found line to remove! store i64 %63, i64* %PC, align 8
Found line to remove! %64 = inttoptr i64 %61 to i32*
Found line to remove! %65 = load i32, i32* %64, align 4
Found line to remove! %66 = zext i32 %65 to i64
Found line to remove! store i64 %66, i64* %RAX, align 8
Found line to remove! %67 = load i64, i64* %RSP, align 8
Found line to remove! %68 = add i64 %67, 32
Found line to remove! store i64 %68, i64* %RSP, align 8
Found line to remove! %69 = icmp ugt i64 %67, -33
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %12, align 1
Found line to remove! %71 = trunc i64 %68 to i32
Found line to remove! %72 = and i32 %71, 255
Found line to remove! %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #12
Found line to remove! %74 = trunc i32 %73 to i8
Found line to remove! %75 = and i8 %74, 1
Found line to remove! %76 = xor i8 %75, 1
Found line to remove! store i8 %76, i8* %19, align 1
Found line to remove! %77 = xor i64 %68, %67
Found line to remove! %78 = lshr i64 %77, 4
Found line to remove! %79 = trunc i64 %78 to i8
Found line to remove! %80 = and i8 %79, 1
Found line to remove! store i8 %80, i8* %24, align 1
Found line to remove! %81 = icmp eq i64 %68, 0
Found line to remove! %82 = zext i1 %81 to i8
Found line to remove! store i8 %82, i8* %27, align 1
Found line to remove! %83 = lshr i64 %68, 63
Found line to remove! %84 = trunc i64 %83 to i8
Found line to remove! store i8 %84, i8* %30, align 1
Found line to remove! %85 = lshr i64 %67, 63
Found line to remove! %86 = xor i64 %83, %85
Found line to remove! %87 = add nuw nsw i64 %86, %83
Found line to remove! %88 = icmp eq i64 %87, 2
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %36, align 1
Found line to remove! %90 = add i64 %62, 8
Found line to remove! store i64 %90, i64* %PC, align 8
Found line to remove! %91 = add i64 %67, 40
Found line to remove! %92 = inttoptr i64 %68 to i64*
Found line to remove! %93 = load i64, i64* %92, align 8
Found line to remove! store i64 %93, i64* %RBP, align 8
Found line to remove! store i64 %91, i64* %RSP, align 8
Found line to remove! %94 = add i64 %62, 9
Found line to remove! store i64 %94, i64* %PC, align 8
Found line to remove! %95 = inttoptr i64 %91 to i64*
Found line to remove! %96 = load i64, i64* %95, align 8
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = add i64 %67, 48
Found line to remove! store i64 %97, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %59
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/array-reverse/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/array-reverse/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
