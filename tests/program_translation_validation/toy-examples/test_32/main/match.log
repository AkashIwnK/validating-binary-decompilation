Writing '/tmp/tmp2m_5sk4x.dot'...
Writing '/tmp/tmp2m_5sk4x.dot':Done

Reading LLVM: /tmp/tmpjtgi5awb-query.ll
Extracting function [main] from /tmp/tmpjtgi5awb-query.ll
Dot file generated!
Writing '/tmp/tmpruyv0l8_.dot'...
Writing '/tmp/tmpruyv0l8_.dot':Done

Reading LLVM: /tmp/tmp_e_v58wk-target.ll
Extracting function [main] from /tmp/tmp_e_v58wk-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = add i64 %7, -12
- 48 %40 = add i64 %10, 14
- 49 store i64 %40, i64* %3, align 8
- 50 %41 = inttoptr i64 %39 to i32*
- 51 store i32 0, i32* %41, align 4
- 52 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 53 %EDI.i = bitcast %union.anon* %42 to i32*
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -8
- 56 %45 = load i32, i32* %EDI.i, align 4
- 57 %46 = load i64, i64* %3, align 8
- 58 %47 = add i64 %46, 3
- 59 store i64 %47, i64* %3, align 8
- 60 %48 = inttoptr i64 %44 to i32*
- 61 store i32 %45, i32* %48, align 4
- 62 %RSI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -16
- 65 %51 = load i64, i64* %RSI.i51, align 8
- 66 %52 = load i64, i64* %3, align 8
- 67 %53 = add i64 %52, 4
- 68 store i64 %53, i64* %3, align 8
- 69 %54 = inttoptr i64 %50 to i64*
- 70 store i64 %51, i64* %54, align 8
- 71 %55 = load i64, i64* %RBP.i, align 8
- 72 %56 = add i64 %55, -8
- 73 %57 = load i64, i64* %3, align 8
- 74 %58 = add i64 %57, 4
- 75 store i64 %58, i64* %3, align 8
- 76 %59 = inttoptr i64 %56 to i32*
- 77 %60 = load i32, i32* %59, align 4
- 78 %61 = add i32 %60, -2
- 79 %62 = icmp ult i32 %60, 2
- 80 %63 = zext i1 %62 to i8
- 81 store i8 %63, i8* %14, align 1
- 82 %64 = and i32 %61, 255
- 83 %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
- 84 %66 = trunc i32 %65 to i8
- 85 %67 = and i8 %66, 1
- 86 %68 = xor i8 %67, 1
- 87 store i8 %68, i8* %21, align 1
- 88 %69 = xor i32 %61, %60
- 89 %70 = lshr i32 %69, 4
- 90 %71 = trunc i32 %70 to i8
- 91 %72 = and i8 %71, 1
- 92 store i8 %72, i8* %26, align 1
- 93 %73 = icmp eq i32 %61, 0
- 94 %74 = zext i1 %73 to i8
- 95 store i8 %74, i8* %29, align 1
- 96 %75 = lshr i32 %61, 31
- 97 %76 = trunc i32 %75 to i8
- 98 store i8 %76, i8* %32, align 1
- 99 %77 = lshr i32 %60, 31
- 100 %78 = xor i32 %75, %77
- 101 %79 = add nuw nsw i32 %78, %77
- 102 %80 = icmp eq i32 %79, 2
- 103 %81 = zext i1 %80 to i8
- 104 store i8 %81, i8* %38, align 1
- 105 %.v = select i1 %73, i64 10, i64 31
- 106 %82 = add i64 %57, %.v
- 107 store i64 %82, i64* %3, align 8
- 108 %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 109 %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
- 110 \<badref\> = br i1 %73, label %block_4005e0, label %block_.L_4005f5
- 111 %84 = add i64 %55, -16
- 112 %85 = add i64 %82, 4
- 113 store i64 %85, i64* %3, align 8
- 114 %86 = inttoptr i64 %84 to i64*
- 115 %87 = load i64, i64* %86, align 8
- 116 store i64 %87, i64* %RAX.i33, align 8
- 117 %RDI.i43 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 118 %88 = add i64 %87, 8
- 119 %89 = add i64 %82, 8
- 120 store i64 %89, i64* %3, align 8
- 121 %90 = inttoptr i64 %88 to i64*
- 122 %91 = load i64, i64* %90, align 8
- 123 store i64 %91, i64* %RDI.i43, align 8
- 124 %92 = add i64 %82, -384
- 125 %93 = add i64 %82, 13
- 126 %94 = load i64, i64* %6, align 8
- 127 %95 = add i64 %94, -8
- 128 %96 = inttoptr i64 %95 to i64*
- 129 store i64 %93, i64* %96, align 8
- 130 store i64 %95, i64* %6, align 8
- 131 store i64 %92, i64* %3, align 8
- 132 %97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 133 %EAX.i36 = bitcast %union.anon* %83 to i32*
- 134 %98 = load i64, i64* %RBP.i, align 8
- 135 %99 = add i64 %98, -24
- 136 %100 = load i32, i32* %EAX.i36, align 4
- 137 %101 = load i64, i64* %3, align 8
- 138 %102 = add i64 %101, 3
- 139 store i64 %102, i64* %3, align 8
- 140 %103 = inttoptr i64 %99 to i32*
- 141 store i32 %100, i32* %103, align 4
- 142 %104 = load i64, i64* %3, align 8
- 143 %105 = add i64 %104, 18
- 144 \<badref\> = br label %block_.L_400602
- 145 store i64 20, i64* %RAX.i33, align 8
- 146 %EAX.i30 = bitcast %union.anon* %83 to i32*
- 147 %106 = add i64 %55, -24
- 148 %107 = add i64 %82, 8
- 149 store i64 %107, i64* %3, align 8
- 150 %108 = inttoptr i64 %106 to i32*
- 151 store i32 20, i32* %108, align 4
- 152 %109 = load i64, i64* %3, align 8
- 153 %110 = add i64 %109, 5
- 154 store i64 %110, i64* %3, align 8
- 155 %.pre = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 156 \<badref\> = br label %block_.L_400602
- 157 %RDI.i20.pre-phi = phi i64* [ %.pre, %block_.L_4005f5 ], [ %RDI.i43, %block_4005e0 ]
- 158 %EAX.i23.pre-phi = phi i32* [ %EAX.i30, %block_.L_4005f5 ], [ %EAX.i36, %block_4005e0 ]
- 159 %storemerge = phi i64 [ %110, %block_.L_4005f5 ], [ %105, %block_4005e0 ]
- 160 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005f5 ], [ %97, %block_4005e0 ]
- 161 %111 = load i64, i64* %RBP.i, align 8
- 162 %112 = add i64 %111, -24
- 163 %113 = add i64 %storemerge, 3
- 164 store i64 %113, i64* %3, align 8
- 165 %114 = inttoptr i64 %112 to i32*
- 166 %115 = load i32, i32* %114, align 4
- 167 %116 = zext i32 %115 to i64
- 168 store i64 %116, i64* %RAX.i33, align 8
- 169 %117 = add i64 %111, -20
- 170 %118 = add i64 %storemerge, 6
- 171 store i64 %118, i64* %3, align 8
- 172 %119 = inttoptr i64 %117 to i32*
- 173 store i32 %115, i32* %119, align 4
- 174 %120 = load i64, i64* %RBP.i, align 8
- 175 %121 = add i64 %120, -20
- 176 %122 = load i64, i64* %3, align 8
- 177 %123 = add i64 %122, 4
- 178 store i64 %123, i64* %3, align 8
- 179 %124 = inttoptr i64 %121 to i32*
- 180 %125 = load i32, i32* %124, align 4
- 181 %126 = sext i32 %125 to i64
- 182 store i64 %126, i64* %RDI.i20.pre-phi, align 8
- 183 %127 = add i64 %122, -168
- 184 %128 = add i64 %122, 9
- 185 %129 = load i64, i64* %6, align 8
- 186 %130 = add i64 %129, -8
- 187 %131 = inttoptr i64 %130 to i64*
- 188 store i64 %128, i64* %131, align 8
- 189 store i64 %130, i64* %6, align 8
- 190 store i64 %127, i64* %3, align 8
- 191 %call2_40060c = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %127, %struct.Memory* %MEMORY.0)
- 192 %132 = load i64, i64* %3, align 8
- 193 store i64 ptrtoint (%G__0x4006c4_type* @G__0x4006c4 to i64), i64* %RDI.i20.pre-phi, align 8
- 194 %133 = load i64, i64* %RAX.i33, align 8
- 195 store i64 %133, i64* %RSI.i51, align 8
- 196 %AL.i = bitcast %union.anon* %83 to i8*
- 197 store i8 0, i8* %AL.i, align 1
- 198 %134 = add i64 %132, -449
- 199 %135 = add i64 %132, 20
- 200 %136 = load i64, i64* %6, align 8
- 201 %137 = add i64 %136, -8
- 202 %138 = inttoptr i64 %137 to i64*
- 203 store i64 %135, i64* %138, align 8
- 204 store i64 %137, i64* %6, align 8
- 205 store i64 %134, i64* %3, align 8
- 206 %139 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_40060c)
- 207 %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 208 %ECX.i9 = bitcast %union.anon* %140 to i32*
- 209 %RCX.i = getelementptr inbounds %union.anon, %union.anon* %140, i64 0, i32 0
- 210 %141 = load i64, i64* %3, align 8
- 211 store i64 0, i64* %RCX.i, align 8
- 212 %142 = load i64, i64* %RBP.i, align 8
- 213 %143 = add i64 %142, -28
- 214 %144 = load i32, i32* %EAX.i23.pre-phi, align 4
- 215 %145 = add i64 %141, 5
- 216 store i64 %145, i64* %3, align 8
- 217 %146 = inttoptr i64 %143 to i32*
- 218 store i32 %144, i32* %146, align 4
- 219 %147 = load i32, i32* %ECX.i9, align 4
- 220 %148 = zext i32 %147 to i64
- 221 %149 = load i64, i64* %3, align 8
- 222 store i64 %148, i64* %RAX.i33, align 8
- 223 %150 = load i64, i64* %6, align 8
- 224 %151 = add i64 %150, 32
- 225 store i64 %151, i64* %6, align 8
- 226 %152 = icmp ugt i64 %150, -33
- 227 %153 = zext i1 %152 to i8
- 228 store i8 %153, i8* %14, align 1
- 229 %154 = trunc i64 %151 to i32
- 230 %155 = and i32 %154, 255
- 231 %156 = tail call i32 @llvm.ctpop.i32(i32 %155)
- 232 %157 = trunc i32 %156 to i8
- 233 %158 = and i8 %157, 1
- 234 %159 = xor i8 %158, 1
- 235 store i8 %159, i8* %21, align 1
- 236 %160 = xor i64 %151, %150
- 237 %161 = lshr i64 %160, 4
- 238 %162 = trunc i64 %161 to i8
- 239 %163 = and i8 %162, 1
- 240 store i8 %163, i8* %26, align 1
- 241 %164 = icmp eq i64 %151, 0
- 242 %165 = zext i1 %164 to i8
- 243 store i8 %165, i8* %29, align 1
- 244 %166 = lshr i64 %151, 63
- 245 %167 = trunc i64 %166 to i8
- 246 store i8 %167, i8* %32, align 1
- 247 %168 = lshr i64 %150, 63
- 248 %169 = xor i64 %166, %168
- 249 %170 = add nuw nsw i64 %169, %166
- 250 %171 = icmp eq i64 %170, 2
- 251 %172 = zext i1 %171 to i8
- 252 store i8 %172, i8* %38, align 1
- 253 %173 = add i64 %149, 7
- 254 store i64 %173, i64* %3, align 8
- 255 %174 = add i64 %150, 40
- 256 %175 = inttoptr i64 %151 to i64*
- 257 %176 = load i64, i64* %175, align 8
- 258 store i64 %176, i64* %RBP.i, align 8
- 259 store i64 %174, i64* %6, align 8
- 260 %177 = add i64 %149, 8
- 261 store i64 %177, i64* %3, align 8
- 262 %178 = inttoptr i64 %174 to i64*
- 263 %179 = load i64, i64* %178, align 8
- 264 store i64 %179, i64* %3, align 8
- 265 %180 = add i64 %150, 48
- 266 store i64 %180, i64* %6, align 8
- 267 \<badref\> = ret %struct.Memory* %139
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f0033598>, {0: {0}, 1: {13}, 2: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 3: {15}, 4: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 5: {12}, 6: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 7: {64, 172, 80, 18, 251, 158}, 8: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 9: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 10: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 11: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 12: {23}, 13: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 14: {25}, 15: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 16: {27}, 17: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 18: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 19: {90, 198, 30}, 20: {256, 163, 199, 177, 91, 31}, 21: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 22: {33, 99, 40, 201, 207, 93}, 23: {202, 34, 94}, 24: {35}, 25: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 26: {96, 37, 108, 204, 52, 216}, 27: {97, 205, 38}, 28: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 29: {33, 99, 40, 201, 207, 93}, 30: {41}, 31: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 32: {209, 43, 101}, 33: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 34: {45}, 35: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 36: {215, 51, 212, 47}, 37: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 38: {49}, 39: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 40: {215, 51, 212, 47}, 41: {96, 37, 108, 204, 52, 216}, 42: {132, 109, 114, 53, 217}, 43: {218, 110, 54, 87}, 44: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 45: {56}, 46: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 47: {58}, 48: {59}, 49: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 50: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 51: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 52: {6}, 53: {2, 3, 5, 7}, 54: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 55: {64, 172, 80, 18, 251, 158}, 56: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 57: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 58: {135, 67, 127}, 59: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 60: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 61: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 62: {10}, 63: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 64: {72, 236}, 65: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 66: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 67: {237, 82, 75, 149}, 68: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 69: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 70: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 71: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 72: {64, 172, 80, 18, 251, 158}, 73: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 74: {237, 82, 75, 149}, 75: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 76: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 77: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 78: {86}, 79: {218, 110, 54, 87}, 80: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 81: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 82: {90, 198, 30}, 83: {256, 163, 199, 177, 91, 31}, 84: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 85: {33, 99, 40, 201, 207, 93}, 86: {202, 34, 94}, 87: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 88: {96, 37, 108, 204, 52, 216}, 89: {97, 205, 38}, 90: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 91: {33, 99, 40, 201, 207, 93}, 92: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 93: {209, 43, 101}, 94: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 95: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 96: {104, 107}, 97: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 98: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 99: {104, 107}, 100: {96, 37, 108, 204, 52, 216}, 101: {132, 109, 114, 53, 217}, 102: {218, 110, 54, 87}, 103: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 104: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 105: {113}, 106: {132, 109, 114, 53, 217}, 107: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 108: {1}, 109: {8, 9, 11}, 110: {116}, 111: {72, 236}, 112: {237, 82, 75, 149}, 113: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 114: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 115: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 116: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 117: {8, 9, 11}, 118: {242, 243, 228}, 119: {242, 243, 228}, 120: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 121: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 122: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 123: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 124: {248}, 125: {249}, 126: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 127: {64, 172, 80, 18, 251, 158}, 128: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 129: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 130: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 131: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 132: {256, 163, 199, 177, 91, 31}, 133: {2, 3, 5, 7}, 134: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 135: {134, 126}, 136: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 137: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 138: {135, 67, 127}, 139: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 140: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 141: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 142: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 143: set(), 144: {120, 260}, 145: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 146: {2, 3, 5, 7}, 147: {134, 126}, 148: {242, 243, 228}, 149: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 150: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 151: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 152: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 153: {117, 183}, 154: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 155: {8, 9, 11}, 156: {120, 260}, 157: {121, 122, 125}, 158: {121, 122, 125}, 159: {121, 122, 125}, 160: {121, 122, 125}, 161: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 162: {134, 126}, 163: {135, 67, 127}, 164: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 165: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 166: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 167: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 168: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 169: {147, 141}, 170: {142}, 171: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 172: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 173: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 174: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 175: {147, 141}, 176: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 177: {237, 82, 75, 149}, 178: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 179: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 180: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 181: {153}, 182: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 183: {155}, 184: {156}, 185: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 186: {64, 172, 80, 18, 251, 158}, 187: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 188: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 189: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 190: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 191: {256, 163, 199, 177, 91, 31}, 192: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 193: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 194: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 195: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 196: {2, 3, 5, 7}, 197: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 198: {169}, 199: {170}, 200: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 201: {64, 172, 80, 18, 251, 158}, 202: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 203: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 204: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 205: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 206: {256, 163, 199, 177, 91, 31}, 207: {4}, 208: {2, 3, 5, 7}, 209: {8, 9, 11}, 210: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 211: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 212: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 213: {181}, 214: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 215: {117, 183}, 216: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 217: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 218: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 219: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 220: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 221: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 222: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 223: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 224: {192}, 225: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 226: {194}, 227: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 228: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 229: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 230: {90, 198, 30}, 231: {256, 163, 199, 177, 91, 31}, 232: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 233: {33, 99, 40, 201, 207, 93}, 234: {202, 34, 94}, 235: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 236: {96, 37, 108, 204, 52, 216}, 237: {97, 205, 38}, 238: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 239: {33, 99, 40, 201, 207, 93}, 240: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 241: {209, 43, 101}, 242: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 243: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 244: {215, 51, 212, 47}, 245: {32, 98, 197, 39, 200, 105, 206, 48, 213, 92, 29}, 246: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 247: {215, 51, 212, 47}, 248: {96, 37, 108, 204, 52, 216}, 249: {132, 109, 114, 53, 217}, 250: {218, 110, 54, 87}, 251: {195, 102, 139, 44, 111, 210, 55, 88, 26, 219, 188}, 252: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 253: {221}, 254: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 255: {223}, 256: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 257: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 258: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 259: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 260: {242, 243, 228}, 261: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 262: {224, 129, 69, 230, 137, 77, 173, 239, 144, 19, 84, 245, 151, 185, 252, 61, 159}, 263: {257, 258, 131, 259, 133, 138, 14, 17, 146, 148, 21, 152, 157, 164, 166, 171, 178, 180, 182, 187, 189, 63, 191, 65, 66, 71, 73, 74, 79, 81, 85, 225, 231, 240, 246, 250}, 264: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 265: {233}, 266: {128, 130, 136, 140, 143, 16, 145, 20, 22, 150, 24, 154, 28, 160, 161, 162, 36, 165, 167, 168, 42, 46, 174, 175, 176, 50, 179, 184, 57, 186, 60, 62, 190, 193, 68, 196, 70, 203, 76, 78, 208, 83, 211, 214, 89, 247, 220, 222, 95, 226, 227, 100, 229, 103, 232, 106, 234, 238, 112, 241, 115, 244, 118, 119, 253, 254, 255}, 267: {235}})
Equivalent! frozenset({81, 74, 148}) {176, 73, 66}
Equivalent! frozenset({82, 75, 149}) {177, 74, 67}
Equivalent! frozenset({83, 76, 150}) {178, 75, 68}
Equivalent! frozenset({250, 171, 157}) {200, 185, 126}
Equivalent! frozenset({251, 172, 158}) {201, 186, 127}
Equivalent! frozenset({161, 254, 175}) {130, 204, 189}
Equivalent! frozenset({120, 260}) {144, 156}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f0033598>, {0: {0}, 1: {13}, 2: {14}, 3: {15}, 4: {16}, 5: {12}, 6: {17}, 7: {18}, 8: {19}, 9: {20}, 10: {21}, 11: {22}, 12: {23}, 13: {24}, 14: {25}, 15: {26}, 16: {27}, 17: {28}, 18: {29}, 19: {30}, 20: {31}, 21: {32}, 22: {33}, 23: {34}, 24: {35}, 25: {36}, 26: {37}, 27: {38}, 28: {39}, 29: {40}, 30: {41}, 31: {42}, 32: {43}, 33: {44}, 34: {45}, 35: {46}, 36: {47}, 37: {48}, 38: {49}, 39: {50}, 40: {51}, 41: {52}, 42: {53}, 43: {54}, 44: {55}, 45: {56}, 46: {57}, 47: {58}, 48: {59}, 49: {60}, 50: {61}, 51: {62}, 52: {6}, 53: {7}, 54: {63}, 55: {64}, 56: {65}, 57: {66}, 58: {67}, 59: {68}, 60: {69}, 61: {70}, 62: {10}, 63: {71}, 64: {72}, 65: {73}, 66: {148}, 67: {149}, 68: {150}, 69: {77}, 70: {78}, 71: {79}, 72: {80}, 73: {74}, 74: {75}, 75: {76}, 76: {84}, 77: {85}, 78: {86}, 79: {87}, 80: {88}, 81: {89}, 82: {90}, 83: {91}, 84: {92}, 85: {93}, 86: {94}, 87: {95}, 88: {96}, 89: {97}, 90: {98}, 91: {99}, 92: {100}, 93: {101}, 94: {102}, 95: {103}, 96: {104}, 97: {105}, 98: {106}, 99: {107}, 100: {108}, 101: {109}, 102: {110}, 103: {111}, 104: {112}, 105: {113}, 106: {114}, 107: {115}, 108: {1}, 109: {8}, 110: {116}, 111: {236}, 112: {237}, 113: {238}, 114: {239}, 115: {240}, 116: {241}, 117: {11}, 118: {242}, 119: {243}, 120: {244}, 121: {245}, 122: {246}, 123: {247}, 124: {248}, 125: {249}, 126: {157}, 127: {158}, 128: {252}, 129: {253}, 130: {161}, 131: {255}, 132: {256}, 133: set(), 134: set(), 135: set(), 136: set(), 137: {66}, 138: {67}, 139: {68}, 140: set(), 141: set(), 142: set(), 143: set(), 144: {120}, 145: {241, 140, 190, 119}, 146: set(), 147: set(), 148: {243}, 149: {244}, 150: set(), 151: set(), 152: {178}, 153: {183}, 154: {184}, 155: set(), 156: {260}, 157: set(), 158: set(), 159: set(), 160: {125}, 161: {133}, 162: {134}, 163: set(), 164: set(), 165: {137}, 166: {138}, 167: {139}, 168: {140}, 169: {141}, 170: set(), 171: set(), 172: {144}, 173: {145}, 174: set(), 175: set(), 176: {81}, 177: {82}, 178: {83}, 179: set(), 180: set(), 181: set(), 182: set(), 183: {155}, 184: {156}, 185: {171}, 186: {172}, 187: {159}, 188: {160}, 189: {175}, 190: {162}, 191: {163}, 192: {164}, 193: set(), 194: {166}, 195: {167}, 196: {2}, 197: {168}, 198: {169}, 199: {170}, 200: {250}, 201: {251}, 202: {173}, 203: {174}, 204: {254}, 205: {176}, 206: {177}, 207: {4}, 208: {5}, 209: {9}, 210: {178}, 211: {179}, 212: set(), 213: set(), 214: set(), 215: {183}, 216: {184}, 217: set(), 218: set(), 219: {187}, 220: {188}, 221: {189}, 222: {190}, 223: {191}, 224: {192}, 225: {193}, 226: {194}, 227: {195}, 228: {196}, 229: {197}, 230: {198}, 231: {199}, 232: {200}, 233: {201}, 234: {202}, 235: {203}, 236: {204}, 237: {205}, 238: {206}, 239: {207}, 240: {208}, 241: {209}, 242: {210}, 243: {211}, 244: {212}, 245: {213}, 246: {214}, 247: {215}, 248: {216}, 249: {217}, 250: {218}, 251: {219}, 252: {220}, 253: {221}, 254: {222}, 255: {223}, 256: {224}, 257: {225}, 258: {226}, 259: {227}, 260: {228}, 261: {229}, 262: {230}, 263: {231}, 264: {232}, 265: {233}, 266: {234}, 267: {235}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 add add
EXACT 48 add add
EXACT 49 store store
EXACT 50 inttoptr inttoptr
EXACT 51 store store
EXACT 52 getelementptr getelementptr
EXACT 53 bitcast bitcast
EXACT 54 load load
EXACT 55 add add
EXACT 56 load load
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
EXACT 76 inttoptr inttoptr
EXACT 77 load load
EXACT 78 add add
EXACT 79 icmp icmp
EXACT 80 zext zext
EXACT 81 store store
EXACT 82 and and
EXACT 83 tail tail
EXACT 84 trunc trunc
EXACT 85 and and
EXACT 86 xor xor
EXACT 87 store store
EXACT 88 xor xor
EXACT 89 lshr lshr
EXACT 90 trunc trunc
EXACT 91 and and
EXACT 92 store store
EXACT 93 icmp icmp
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 lshr lshr
EXACT 97 trunc trunc
EXACT 98 store store
EXACT 99 lshr lshr
EXACT 100 xor xor
EXACT 101 add add
EXACT 102 icmp icmp
EXACT 103 zext zext
EXACT 104 store store
EXACT 105 select select
EXACT 106 add add
EXACT 107 store store
EXACT 108 getelementptr getelementptr
EXACT 109 getelementptr getelementptr
EXACT 110 br br
EXACT 111 add add
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 load load
EXACT 116 store store
EXACT 117 getelementptr getelementptr
EXACT 118 add add
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 load load
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 load load
EXACT 127 add add
EXACT 128 inttoptr inttoptr
EXACT 129 store store
EXACT 130 store store
EXACT 131 store store
EXACT 132 tail tail
NO MATCH 133
NO MATCH 134
NO MATCH 135
NO MATCH 136
EXACT 137 load load
EXACT 138 add add
EXACT 139 store store
NO MATCH 140
NO MATCH 141
NO MATCH 142
NO MATCH 143
EXACT 144 br br
MORE 145 POT: 4
NO MATCH 146
NO MATCH 147
EXACT 148 add add
EXACT 149 store store
NO MATCH 150
NO MATCH 151
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
NO MATCH 155
EXACT 156 br br
NO MATCH 157
NO MATCH 158
NO MATCH 159
EXACT 160 phi phi
EXACT 161 load load
EXACT 162 add add
NO MATCH 163
NO MATCH 164
EXACT 165 inttoptr inttoptr
EXACT 166 load load
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 add add
NO MATCH 170
NO MATCH 171
EXACT 172 inttoptr inttoptr
EXACT 173 store store
NO MATCH 174
NO MATCH 175
EXACT 176 load load
EXACT 177 add add
EXACT 178 store store
NO MATCH 179
NO MATCH 180
NO MATCH 181
NO MATCH 182
EXACT 183 add add
EXACT 184 add add
EXACT 185 load load
EXACT 186 add add
EXACT 187 inttoptr inttoptr
EXACT 188 store store
EXACT 189 store store
EXACT 190 store store
EXACT 191 tail tail
EXACT 192 load load
NO MATCH 193
EXACT 194 load load
EXACT 195 store store
EXACT 196 bitcast bitcast
EXACT 197 store store
EXACT 198 add add
EXACT 199 add add
EXACT 200 load load
EXACT 201 add add
EXACT 202 inttoptr inttoptr
EXACT 203 store store
EXACT 204 store store
EXACT 205 store store
EXACT 206 tail tail
EXACT 207 getelementptr getelementptr
EXACT 208 bitcast bitcast
EXACT 209 getelementptr getelementptr
EXACT 210 load load
EXACT 211 store store
NO MATCH 212
NO MATCH 213
NO MATCH 214
EXACT 215 add add
EXACT 216 store store
NO MATCH 217
NO MATCH 218
EXACT 219 load load
EXACT 220 zext zext
EXACT 221 load load
EXACT 222 store store
EXACT 223 load load
EXACT 224 add add
EXACT 225 store store
EXACT 226 icmp icmp
EXACT 227 zext zext
EXACT 228 store store
EXACT 229 trunc trunc
EXACT 230 and and
EXACT 231 tail tail
EXACT 232 trunc trunc
EXACT 233 and and
EXACT 234 xor xor
EXACT 235 store store
EXACT 236 xor xor
EXACT 237 lshr lshr
EXACT 238 trunc trunc
EXACT 239 and and
EXACT 240 store store
EXACT 241 icmp icmp
EXACT 242 zext zext
EXACT 243 store store
EXACT 244 lshr lshr
EXACT 245 trunc trunc
EXACT 246 store store
EXACT 247 lshr lshr
EXACT 248 xor xor
EXACT 249 add add
EXACT 250 icmp icmp
EXACT 251 zext zext
EXACT 252 store store
EXACT 253 add add
EXACT 254 store store
EXACT 255 add add
EXACT 256 inttoptr inttoptr
EXACT 257 load load
EXACT 258 store store
EXACT 259 store store
EXACT 260 add add
EXACT 261 store store
EXACT 262 inttoptr inttoptr
EXACT 263 load load
EXACT 264 store store
EXACT 265 add add
EXACT 266 store store
EXACT 267 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 7 %EDI = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 11 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 12 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 13 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 14 %6 = load i64, i64* %RBP, align 8
- 15 %7 = add i64 %1, 1
- 16 store i64 %7, i64* %PC, align 8
- 17 %8 = load i64, i64* %RSP, align 8
- 18 %9 = add i64 %8, -8
- 19 %10 = inttoptr i64 %9 to i64*
- 20 store i64 %6, i64* %10, align 8
- 21 %11 = load i64, i64* %PC, align 8
- 22 store i64 %9, i64* %RBP, align 8
- 23 %12 = add i64 %8, -40
- 24 store i64 %12, i64* %RSP, align 8
- 25 %13 = icmp ult i64 %9, 32
- 26 %14 = zext i1 %13 to i8
- 27 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 28 store i8 %14, i8* %15, align 1
- 29 %16 = trunc i64 %12 to i32
- 30 %17 = and i32 %16, 255
- 31 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 32 %19 = trunc i32 %18 to i8
- 33 %20 = and i8 %19, 1
- 34 %21 = xor i8 %20, 1
- 35 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 36 store i8 %21, i8* %22, align 1
- 37 %23 = xor i64 %9, %12
- 38 %24 = lshr i64 %23, 4
- 39 %25 = trunc i64 %24 to i8
- 40 %26 = and i8 %25, 1
- 41 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 42 store i8 %26, i8* %27, align 1
- 43 %28 = icmp eq i64 %12, 0
- 44 %29 = zext i1 %28 to i8
- 45 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 46 store i8 %29, i8* %30, align 1
- 47 %31 = lshr i64 %12, 63
- 48 %32 = trunc i64 %31 to i8
- 49 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 store i8 %32, i8* %33, align 1
- 51 %34 = lshr i64 %9, 63
- 52 %35 = xor i64 %31, %34
- 53 %36 = add nuw nsw i64 %35, %34
- 54 %37 = icmp eq i64 %36, 2
- 55 %38 = zext i1 %37 to i8
- 56 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 57 store i8 %38, i8* %39, align 1
- 58 %40 = add i64 %8, -12
- 59 %41 = add i64 %11, 14
- 60 store i64 %41, i64* %PC, align 8
- 61 %42 = inttoptr i64 %40 to i32*
- 62 store i32 0, i32* %42, align 4
- 63 %43 = load i64, i64* %RBP, align 8
- 64 %44 = add i64 %43, -8
- 65 %45 = load i32, i32* %EDI, align 4
- 66 %46 = load i64, i64* %PC, align 8
- 67 %47 = add i64 %46, 3
- 68 store i64 %47, i64* %PC, align 8
- 69 %48 = inttoptr i64 %44 to i32*
- 70 store i32 %45, i32* %48, align 4
- 71 %49 = load i64, i64* %RBP, align 8
- 72 %50 = add i64 %49, -16
- 73 %51 = load i64, i64* %RSI, align 8
- 74 %52 = load i64, i64* %PC, align 8
- 75 %53 = add i64 %52, 4
- 76 store i64 %53, i64* %PC, align 8
- 77 %54 = inttoptr i64 %50 to i64*
- 78 store i64 %51, i64* %54, align 8
- 79 %55 = load i64, i64* %RBP, align 8
- 80 %56 = add i64 %55, -8
- 81 %57 = load i64, i64* %PC, align 8
- 82 %58 = add i64 %57, 4
- 83 store i64 %58, i64* %PC, align 8
- 84 %59 = inttoptr i64 %56 to i32*
- 85 %60 = load i32, i32* %59, align 4
- 86 %61 = add i32 %60, -2
- 87 %62 = icmp ult i32 %60, 2
- 88 %63 = zext i1 %62 to i8
- 89 store i8 %63, i8* %15, align 1
- 90 %64 = and i32 %61, 255
- 91 %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12
- 92 %66 = trunc i32 %65 to i8
- 93 %67 = and i8 %66, 1
- 94 %68 = xor i8 %67, 1
- 95 store i8 %68, i8* %22, align 1
- 96 %69 = xor i32 %61, %60
- 97 %70 = lshr i32 %69, 4
- 98 %71 = trunc i32 %70 to i8
- 99 %72 = and i8 %71, 1
- 100 store i8 %72, i8* %27, align 1
- 101 %73 = icmp eq i32 %61, 0
- 102 %74 = zext i1 %73 to i8
- 103 store i8 %74, i8* %30, align 1
- 104 %75 = lshr i32 %61, 31
- 105 %76 = trunc i32 %75 to i8
- 106 store i8 %76, i8* %33, align 1
- 107 %77 = lshr i32 %60, 31
- 108 %78 = xor i32 %75, %77
- 109 %79 = add nuw nsw i32 %78, %77
- 110 %80 = icmp eq i32 %79, 2
- 111 %81 = zext i1 %80 to i8
- 112 store i8 %81, i8* %39, align 1
- 113 %.v = select i1 %73, i64 10, i64 31
- 114 %82 = add i64 %57, %.v
- 115 store i64 %82, i64* %PC, align 8
- 116 \<badref\> = br i1 %73, label %block_4005e0, label %block_4005f5
- 117 %83 = add i64 %82, 5
- 118 store i64 %83, i64* %PC, align 8
- 119 store i64 20, i64* %RAX, align 8
- 120 \<badref\> = br label %block_400602
- 121 %84 = phi i64 [ %.pre, %block_4005e0 ], [ %83, %block_4005f5 ]
- 122 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005e0 ], [ %55, %block_4005f5 ]
- 123 %.sink = phi i32 [ %.sink.pre, %block_4005e0 ], [ 20, %block_4005f5 ]
- 124 %.sink5 = phi i64 [ 18, %block_4005e0 ], [ 5, %block_4005f5 ]
- 125 %MEMORY.0 = phi %struct.Memory* [ %172, %block_4005e0 ], [ %2, %block_4005f5 ]
- 126 %.sink7 = add i64 %.sink7.in, -24
- 127 %85 = add i64 %84, 3
- 128 store i64 %85, i64* %PC, align 8
- 129 %86 = inttoptr i64 %.sink7 to i32*
- 130 store i32 %.sink, i32* %86, align 4
- 131 %87 = load i64, i64* %PC, align 8
- 132 %88 = add i64 %87, %.sink5
- 133 %89 = load i64, i64* %RBP, align 8
- 134 %90 = add i64 %89, -24
- 135 %91 = add i64 %88, 3
- 136 store i64 %91, i64* %PC, align 8
- 137 %92 = inttoptr i64 %90 to i32*
- 138 %93 = load i32, i32* %92, align 4
- 139 %94 = zext i32 %93 to i64
- 140 store i64 %94, i64* %RAX, align 8
- 141 %95 = add i64 %89, -20
- 142 %96 = add i64 %88, 6
- 143 store i64 %96, i64* %PC, align 8
- 144 %97 = inttoptr i64 %95 to i32*
- 145 store i32 %93, i32* %97, align 4
- 146 %98 = load i64, i64* %RBP, align 8
- 147 %99 = add i64 %98, -20
- 148 %100 = load i64, i64* %PC, align 8
- 149 %101 = add i64 %100, 4
- 150 store i64 %101, i64* %PC, align 8
- 151 %102 = inttoptr i64 %99 to i32*
- 152 %103 = load i32, i32* %102, align 4
- 153 %104 = sext i32 %103 to i64
- 154 store i64 %104, i64* %RDI, align 8
- 155 %105 = add i64 %100, -168
- 156 %106 = add i64 %100, 9
- 157 %107 = load i64, i64* %RSP, align 8
- 158 %108 = add i64 %107, -8
- 159 %109 = inttoptr i64 %108 to i64*
- 160 store i64 %106, i64* %109, align 8
- 161 store i64 %108, i64* %RSP, align 8
- 162 store i64 %105, i64* %PC, align 8
- 163 %110 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
- 164 %111 = load i64, i64* %PC, align 8
- 165 store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 4), i64* %RDI, align 8
- 166 %112 = load i64, i64* %RAX, align 8
- 167 store i64 %112, i64* %RSI, align 8
- 168 store i8 0, i8* %AL, align 1
- 169 %113 = add i64 %111, -449
- 170 %114 = add i64 %111, 20
- 171 %115 = load i64, i64* %RSP, align 8
- 172 %116 = add i64 %115, -8
- 173 %117 = inttoptr i64 %116 to i64*
- 174 store i64 %114, i64* %117, align 8
- 175 store i64 %116, i64* %RSP, align 8
- 176 store i64 %113, i64* %PC, align 8
- 177 %118 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %110)
- 178 %119 = load i64, i64* %PC, align 8
- 179 store i64 0, i64* %RCX, align 8
- 180 %120 = load i64, i64* %RBP, align 8
- 181 %121 = add i64 %120, -28
- 182 %122 = load i32, i32* %EAX, align 4
- 183 %123 = add i64 %119, 5
- 184 store i64 %123, i64* %PC, align 8
- 185 %124 = inttoptr i64 %121 to i32*
- 186 store i32 %122, i32* %124, align 4
- 187 %125 = load i32, i32* %ECX, align 4
- 188 %126 = zext i32 %125 to i64
- 189 %127 = load i64, i64* %PC, align 8
- 190 store i64 %126, i64* %RAX, align 8
- 191 %128 = load i64, i64* %RSP, align 8
- 192 %129 = add i64 %128, 32
- 193 store i64 %129, i64* %RSP, align 8
- 194 %130 = icmp ugt i64 %128, -33
- 195 %131 = zext i1 %130 to i8
- 196 store i8 %131, i8* %15, align 1
- 197 %132 = trunc i64 %129 to i32
- 198 %133 = and i32 %132, 255
- 199 %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12
- 200 %135 = trunc i32 %134 to i8
- 201 %136 = and i8 %135, 1
- 202 %137 = xor i8 %136, 1
- 203 store i8 %137, i8* %22, align 1
- 204 %138 = xor i64 %129, %128
- 205 %139 = lshr i64 %138, 4
- 206 %140 = trunc i64 %139 to i8
- 207 %141 = and i8 %140, 1
- 208 store i8 %141, i8* %27, align 1
- 209 %142 = icmp eq i64 %129, 0
- 210 %143 = zext i1 %142 to i8
- 211 store i8 %143, i8* %30, align 1
- 212 %144 = lshr i64 %129, 63
- 213 %145 = trunc i64 %144 to i8
- 214 store i8 %145, i8* %33, align 1
- 215 %146 = lshr i64 %128, 63
- 216 %147 = xor i64 %144, %146
- 217 %148 = add nuw nsw i64 %147, %144
- 218 %149 = icmp eq i64 %148, 2
- 219 %150 = zext i1 %149 to i8
- 220 store i8 %150, i8* %39, align 1
- 221 %151 = add i64 %127, 7
- 222 store i64 %151, i64* %PC, align 8
- 223 %152 = add i64 %128, 40
- 224 %153 = inttoptr i64 %129 to i64*
- 225 %154 = load i64, i64* %153, align 8
- 226 store i64 %154, i64* %RBP, align 8
- 227 store i64 %152, i64* %RSP, align 8
- 228 %155 = add i64 %127, 8
- 229 store i64 %155, i64* %PC, align 8
- 230 %156 = inttoptr i64 %152 to i64*
- 231 %157 = load i64, i64* %156, align 8
- 232 store i64 %157, i64* %PC, align 8
- 233 %158 = add i64 %128, 48
- 234 store i64 %158, i64* %RSP, align 8
- 235 \<badref\> = ret %struct.Memory* %118
- 236 %159 = add i64 %55, -16
- 237 %160 = add i64 %82, 4
- 238 store i64 %160, i64* %PC, align 8
- 239 %161 = inttoptr i64 %159 to i64*
- 240 %162 = load i64, i64* %161, align 8
- 241 store i64 %162, i64* %RAX, align 8
- 242 %163 = add i64 %162, 8
- 243 %164 = add i64 %82, 8
- 244 store i64 %164, i64* %PC, align 8
- 245 %165 = inttoptr i64 %163 to i64*
- 246 %166 = load i64, i64* %165, align 8
- 247 store i64 %166, i64* %RDI, align 8
- 248 %167 = add i64 %82, -384
- 249 %168 = add i64 %82, 13
- 250 %169 = load i64, i64* %RSP, align 8
- 251 %170 = add i64 %169, -8
- 252 %171 = inttoptr i64 %170 to i64*
- 253 store i64 %168, i64* %171, align 8
- 254 store i64 %170, i64* %RSP, align 8
- 255 store i64 %167, i64* %PC, align 8
- 256 %172 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 257 %.sink.pre = load i32, i32* %EAX, align 4
- 258 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 259 %.pre = load i64, i64* %PC, align 8
- 260 \<badref\> = br label %block_400602
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f00332f0>, {0: {0}, 1: {108}, 2: {196, 133, 208, 146, 53}, 3: {196, 133, 208, 146, 53}, 4: {207}, 5: {196, 133, 208, 146, 53}, 6: {52}, 7: {196, 133, 208, 146, 53}, 8: {209, 117, 155, 109}, 9: {209, 117, 155, 109}, 10: {62}, 11: {209, 117, 155, 109}, 12: {5}, 13: {1}, 14: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 15: {3}, 16: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 17: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 18: {7, 72, 201, 55, 186, 127}, 19: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 20: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 21: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 22: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 23: {12}, 24: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 25: {14}, 26: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 27: {16}, 28: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 29: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 30: {82, 19, 230}, 31: {132, 231, 206, 83, 20, 191}, 32: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 33: {233, 239, 85, 22, 91, 29}, 34: {234, 86, 23}, 35: {24}, 36: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 37: {248, 100, 41, 236, 88, 26}, 38: {89, 27, 237}, 39: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 40: {233, 239, 85, 22, 91, 29}, 41: {30}, 42: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 43: {32, 241, 93}, 44: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 45: {34}, 46: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 47: {40, 36, 244, 247}, 48: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 49: {38}, 50: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 51: {40, 36, 244, 247}, 52: {248, 100, 41, 236, 88, 26}, 53: {249, 42, 101, 106}, 54: {250, 43, 102, 79}, 55: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 56: {45}, 57: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 58: {47}, 59: {48}, 60: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 61: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 62: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 63: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 64: {7, 72, 201, 55, 186, 127}, 65: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 66: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 67: {58, 163, 138}, 68: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 69: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 70: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 71: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 72: {64, 111}, 73: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 74: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 75: {112, 177, 74, 67}, 76: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 77: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 78: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 79: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 80: {7, 72, 201, 55, 186, 127}, 81: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 82: {112, 177, 74, 67}, 83: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 84: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 85: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 86: {78}, 87: {250, 43, 102, 79}, 88: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 89: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 90: {82, 19, 230}, 91: {132, 231, 206, 83, 20, 191}, 92: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 93: {233, 239, 85, 22, 91, 29}, 94: {234, 86, 23}, 95: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 96: {248, 100, 41, 236, 88, 26}, 97: {89, 27, 237}, 98: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 99: {233, 239, 85, 22, 91, 29}, 100: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 101: {32, 241, 93}, 102: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 103: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 104: {96, 99}, 105: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 106: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 107: {96, 99}, 108: {248, 100, 41, 236, 88, 26}, 109: {249, 42, 101, 106}, 110: {250, 43, 102, 79}, 111: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 112: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 113: {105}, 114: {249, 42, 101, 106}, 115: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 116: {110}, 117: {153, 215}, 118: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 119: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 120: {144, 156}, 121: {160, 157, 158, 159}, 122: {160, 157, 158, 159}, 123: set(), 124: set(), 125: {160, 157, 158, 159}, 126: {162, 147, 135}, 127: {58, 163, 138}, 128: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 129: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 130: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 131: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 132: {249, 42, 101, 106}, 133: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 134: {162, 147, 135}, 135: {58, 163, 138}, 136: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 137: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 138: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 139: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 140: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 141: {169, 175}, 142: {170}, 143: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 144: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 145: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 146: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 147: {169, 175}, 148: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 149: {112, 177, 74, 67}, 150: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 151: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 152: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 153: {181}, 154: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 155: {183}, 156: {184}, 157: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 158: {7, 72, 201, 55, 186, 127}, 159: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 160: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 161: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 162: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 163: {132, 231, 206, 83, 20, 191}, 164: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 165: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 166: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 167: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 168: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 169: {198}, 170: {199}, 171: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 172: {7, 72, 201, 55, 186, 127}, 173: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 174: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 175: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 176: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 177: {132, 231, 206, 83, 20, 191}, 178: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 179: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 180: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 181: {213}, 182: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 183: {153, 215}, 184: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 185: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 186: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 187: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 188: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 189: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 190: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 191: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 192: {224}, 193: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 194: {226}, 195: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 196: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 197: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 198: {82, 19, 230}, 199: {132, 231, 206, 83, 20, 191}, 200: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 201: {233, 239, 85, 22, 91, 29}, 202: {234, 86, 23}, 203: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 204: {248, 100, 41, 236, 88, 26}, 205: {89, 27, 237}, 206: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 207: {233, 239, 85, 22, 91, 29}, 208: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 209: {32, 241, 93}, 210: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 211: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 212: {40, 36, 244, 247}, 213: {97, 37, 229, 232, 238, 18, 84, 21, 245, 90, 28}, 214: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 215: {40, 36, 244, 247}, 216: {248, 100, 41, 236, 88, 26}, 217: {249, 42, 101, 106}, 218: {250, 43, 102, 79}, 219: {33, 227, 103, 167, 44, 15, 80, 242, 251, 220, 94}, 220: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 221: {253}, 222: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 223: {255}, 224: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 225: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 226: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 227: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 228: {148, 260, 118, 119}, 229: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 230: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 231: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 232: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 233: {265}, 234: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 235: {267}, 236: {64, 111}, 237: {112, 177, 74, 67}, 238: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 239: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 240: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 241: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 242: {148, 260, 118, 119}, 243: {148, 260, 118, 119}, 244: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 245: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 246: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 247: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 248: {124}, 249: {125}, 250: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 251: {7, 72, 201, 55, 186, 127}, 252: {128, 256, 217, 69, 165, 262, 8, 202, 76, 140, 172, 50, 114, 179, 150, 121, 187, 60}, 253: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 254: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 255: {129, 130, 131, 4, 258, 259, 261, 264, 9, 266, 11, 139, 13, 141, 17, 145, 149, 151, 25, 154, 31, 35, 164, 39, 168, 171, 173, 46, 49, 178, 51, 182, 59, 188, 61, 189, 190, 193, 195, 68, 197, 70, 75, 203, 204, 205, 81, 211, 87, 216, 218, 92, 222, 95, 225, 98, 228, 104, 107, 235, 240, 113, 243, 116, 246, 120, 123, 252, 254}, 256: {132, 231, 206, 83, 20, 191}, 257: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 258: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 259: {257, 2, 6, 134, 136, 137, 10, 263, 142, 152, 161, 166, 174, 176, 180, 54, 56, 57, 185, 63, 192, 65, 66, 194, 71, 200, 73, 77, 210, 212, 214, 219, 221, 223, 115, 122, 126}, 260: {144, 156}})
Equivalent! frozenset({176, 73, 66}) {81, 74, 148}
Equivalent! frozenset({177, 74, 67}) {82, 75, 149}
Equivalent! frozenset({178, 75, 68}) {83, 76, 150}
Equivalent! frozenset({144, 156}) {120, 260}
Equivalent! frozenset({200, 185, 126}) {250, 171, 157}
Equivalent! frozenset({201, 186, 127}) {251, 172, 158}
Equivalent! frozenset({130, 204, 189}) {161, 254, 175}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f00332f0>, {0: {0}, 1: {108}, 2: {196}, 3: set(), 4: {207}, 5: {208}, 6: {52}, 7: {53}, 8: {109}, 9: {209}, 10: {62}, 11: {117}, 12: {5}, 13: {1}, 14: {2}, 15: {3}, 16: {4}, 17: {6}, 18: {7}, 19: {8}, 20: {9}, 21: {10}, 22: {11}, 23: {12}, 24: {13}, 25: {14}, 26: {15}, 27: {16}, 28: {17}, 29: {18}, 30: {19}, 31: {20}, 32: {21}, 33: {22}, 34: {23}, 35: {24}, 36: {25}, 37: {26}, 38: {27}, 39: {28}, 40: {29}, 41: {30}, 42: {31}, 43: {32}, 44: {33}, 45: {34}, 46: {35}, 47: {36}, 48: {37}, 49: {38}, 50: {39}, 51: {40}, 52: {41}, 53: {42}, 54: {43}, 55: {44}, 56: {45}, 57: {46}, 58: {47}, 59: {48}, 60: {49}, 61: {50}, 62: {51}, 63: {54}, 64: {55}, 65: {56}, 66: {137, 57}, 67: {138, 58}, 68: {59, 139}, 69: {60}, 70: {61}, 71: {63}, 72: {64}, 73: {65}, 74: {73}, 75: {74}, 76: {75}, 77: {69}, 78: {70}, 79: {71}, 80: {72}, 81: {176}, 82: {177}, 83: {178}, 84: {76}, 85: {77}, 86: {78}, 87: {79}, 88: {80}, 89: {81}, 90: {82}, 91: {83}, 92: {84}, 93: {85}, 94: {86}, 95: {87}, 96: {88}, 97: {89}, 98: {90}, 99: {91}, 100: {92}, 101: {93}, 102: {94}, 103: {95}, 104: {96}, 105: {97}, 106: {98}, 107: {99}, 108: {100}, 109: {101}, 110: {102}, 111: {103}, 112: {104}, 113: {105}, 114: {106}, 115: {107}, 116: {110}, 117: set(), 118: set(), 119: {168, 145, 116, 222}, 120: {144}, 121: set(), 122: set(), 123: set(), 124: set(), 125: {160}, 126: set(), 127: set(), 128: set(), 129: set(), 130: set(), 131: set(), 132: set(), 133: {161}, 134: {162}, 135: set(), 136: set(), 137: {165}, 138: {166}, 139: {167}, 140: {168}, 141: {169}, 142: set(), 143: set(), 144: {172}, 145: {173}, 146: set(), 147: set(), 148: {66}, 149: {67}, 150: {68}, 151: set(), 152: set(), 153: set(), 154: set(), 155: {183}, 156: {184}, 157: {126}, 158: {127}, 159: {187}, 160: {188}, 161: {130}, 162: {190}, 163: {191}, 164: {192}, 165: {123}, 166: {194}, 167: {195}, 168: {197}, 169: {198}, 170: {199}, 171: {185}, 172: {186}, 173: {202}, 174: {203}, 175: {189}, 176: {205}, 177: {206}, 178: {152, 210}, 179: {211}, 180: set(), 181: set(), 182: set(), 183: {153, 215}, 184: {216, 154}, 185: set(), 186: set(), 187: {219}, 188: {220}, 189: {221}, 190: {222}, 191: {223}, 192: {224}, 193: {225}, 194: {226}, 195: {227}, 196: {228}, 197: {229}, 198: {230}, 199: {231}, 200: {232}, 201: {233}, 202: {234}, 203: {235}, 204: {236}, 205: {237}, 206: {238}, 207: {239}, 208: {240}, 209: {241}, 210: {242}, 211: {243}, 212: {244}, 213: {245}, 214: {246}, 215: {247}, 216: {248}, 217: {249}, 218: {250}, 219: {251}, 220: {252}, 221: {253}, 222: {254}, 223: {255}, 224: {256}, 225: {257}, 226: {258}, 227: {259}, 228: {260}, 229: {261}, 230: {262}, 231: {263}, 232: {264}, 233: {265}, 234: {266}, 235: {267}, 236: {111}, 237: {112}, 238: {113}, 239: {114}, 240: {115}, 241: {116}, 242: {118}, 243: {148, 119}, 244: {120, 149}, 245: {121}, 246: {122}, 247: {123}, 248: {124}, 249: {125}, 250: {200}, 251: {201}, 252: {128}, 253: {129}, 254: {204}, 255: {131}, 256: {132}, 257: set(), 258: set(), 259: set(), 260: {156}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
NO MATCH 3
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 load load
EXACT 15 add add
EXACT 16 store store
EXACT 17 load load
EXACT 18 add add
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 load load
EXACT 22 store store
EXACT 23 add add
EXACT 24 store store
EXACT 25 icmp icmp
EXACT 26 zext zext
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 tail tail
EXACT 32 trunc trunc
EXACT 33 and and
EXACT 34 xor xor
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 xor xor
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 getelementptr getelementptr
EXACT 42 store store
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 lshr lshr
EXACT 48 trunc trunc
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 lshr lshr
EXACT 52 xor xor
EXACT 53 add add
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 add add
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
MORE 66 POT: 2
MORE 67 POT: 2
MORE 68 POT: 2
EXACT 69 inttoptr inttoptr
EXACT 70 store store
EXACT 71 load load
EXACT 72 add add
EXACT 73 load load
EXACT 74 load load
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
EXACT 81 load load
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 load load
EXACT 86 add add
EXACT 87 icmp icmp
EXACT 88 zext zext
EXACT 89 store store
EXACT 90 and and
EXACT 91 tail tail
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 xor xor
EXACT 95 store store
EXACT 96 xor xor
EXACT 97 lshr lshr
EXACT 98 trunc trunc
EXACT 99 and and
EXACT 100 store store
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 lshr lshr
EXACT 105 trunc trunc
EXACT 106 store store
EXACT 107 lshr lshr
EXACT 108 xor xor
EXACT 109 add add
EXACT 110 icmp icmp
EXACT 111 zext zext
EXACT 112 store store
EXACT 113 select select
EXACT 114 add add
EXACT 115 store store
EXACT 116 br br
NO MATCH 117
NO MATCH 118
MORE 119 POT: 4
EXACT 120 br br
NO MATCH 121
NO MATCH 122
NO MATCH 123
NO MATCH 124
EXACT 125 phi phi
NO MATCH 126
NO MATCH 127
NO MATCH 128
NO MATCH 129
NO MATCH 130
NO MATCH 131
NO MATCH 132
EXACT 133 load load
EXACT 134 add add
NO MATCH 135
NO MATCH 136
EXACT 137 inttoptr inttoptr
EXACT 138 load load
EXACT 139 zext zext
EXACT 140 store store
EXACT 141 add add
NO MATCH 142
NO MATCH 143
EXACT 144 inttoptr inttoptr
EXACT 145 store store
NO MATCH 146
NO MATCH 147
EXACT 148 load load
EXACT 149 add add
EXACT 150 store store
NO MATCH 151
NO MATCH 152
NO MATCH 153
NO MATCH 154
EXACT 155 add add
EXACT 156 add add
EXACT 157 load load
EXACT 158 add add
EXACT 159 inttoptr inttoptr
EXACT 160 store store
EXACT 161 store store
EXACT 162 store store
EXACT 163 tail tail
EXACT 164 load load
EXACT 165 store store
EXACT 166 load load
EXACT 167 store store
EXACT 168 store store
EXACT 169 add add
EXACT 170 add add
EXACT 171 load load
EXACT 172 add add
EXACT 173 inttoptr inttoptr
EXACT 174 store store
EXACT 175 store store
EXACT 176 store store
EXACT 177 tail tail
MORE 178 POT: 2
EXACT 179 store store
NO MATCH 180
NO MATCH 181
NO MATCH 182
MORE 183 POT: 2
MORE 184 POT: 2
NO MATCH 185
NO MATCH 186
EXACT 187 load load
EXACT 188 zext zext
EXACT 189 load load
EXACT 190 store store
EXACT 191 load load
EXACT 192 add add
EXACT 193 store store
EXACT 194 icmp icmp
EXACT 195 zext zext
EXACT 196 store store
EXACT 197 trunc trunc
EXACT 198 and and
EXACT 199 tail tail
EXACT 200 trunc trunc
EXACT 201 and and
EXACT 202 xor xor
EXACT 203 store store
EXACT 204 xor xor
EXACT 205 lshr lshr
EXACT 206 trunc trunc
EXACT 207 and and
EXACT 208 store store
EXACT 209 icmp icmp
EXACT 210 zext zext
EXACT 211 store store
EXACT 212 lshr lshr
EXACT 213 trunc trunc
EXACT 214 store store
EXACT 215 lshr lshr
EXACT 216 xor xor
EXACT 217 add add
EXACT 218 icmp icmp
EXACT 219 zext zext
EXACT 220 store store
EXACT 221 add add
EXACT 222 store store
EXACT 223 add add
EXACT 224 inttoptr inttoptr
EXACT 225 load load
EXACT 226 store store
EXACT 227 store store
EXACT 228 add add
EXACT 229 store store
EXACT 230 inttoptr inttoptr
EXACT 231 load load
EXACT 232 store store
EXACT 233 add add
EXACT 234 store store
EXACT 235 ret ret
EXACT 236 add add
EXACT 237 add add
EXACT 238 store store
EXACT 239 inttoptr inttoptr
EXACT 240 load load
EXACT 241 store store
EXACT 242 add add
MORE 243 POT: 2
MORE 244 POT: 2
EXACT 245 inttoptr inttoptr
EXACT 246 load load
EXACT 247 store store
EXACT 248 add add
EXACT 249 add add
EXACT 250 load load
EXACT 251 add add
EXACT 252 inttoptr inttoptr
EXACT 253 store store
EXACT 254 store store
EXACT 255 store store
EXACT 256 tail tail
NO MATCH 257
NO MATCH 258
NO MATCH 259
EXACT 260 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%RSI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI.i51, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %3, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %14, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64)', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %21, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %26, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %29, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %32, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %38, align 1', '%.v = select i1 %73, i64 10, i64 31', '%82 = add i64 %57, %.v', 'store i64 %82, i64* %3, align 8', '%84 = add i64 %55, -16', '%85 = add i64 %82, 4', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %84 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %RAX.i33, align 8', '%88 = add i64 %87, 8', '%89 = add i64 %82, 8', 'store i64 %89, i64* %3, align 8', '%90 = inttoptr i64 %88 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %RDI.i43, align 8', '%92 = add i64 %82, -384', '%93 = add i64 %82, 13', '%94 = load i64, i64* %6, align 8', '%95 = add i64 %94, -8', '%96 = inttoptr i64 %95 to i64*', 'store i64 %93, i64* %96, align 8', 'store i64 %95, i64* %6, align 8', 'store i64 %92, i64* %3, align 8', '%101 = load i64, i64* %3, align 8', '%102 = add i64 %101, 3', 'store i64 %102, i64* %3, align 8', '%107 = add i64 %82, 8', 'store i64 %107, i64* %3, align 8', 'store i64 %110, i64* %3, align 8', '%111 = load i64, i64* %RBP.i, align 8', '%112 = add i64 %111, -24', '%114 = inttoptr i64 %112 to i32*', '%115 = load i32, i32* %114, align 4', '%116 = zext i32 %115 to i64', 'store i64 %116, i64* %RAX.i33, align 8', '%117 = add i64 %111, -20', '%119 = inttoptr i64 %117 to i32*', 'store i32 %115, i32* %119, align 4', '%123 = add i64 %122, 4', 'store i64 %123, i64* %3, align 8', '%128 = add i64 %122, 9', '%129 = load i64, i64* %6, align 8', '%130 = add i64 %129, -8', '%131 = inttoptr i64 %130 to i64*', 'store i64 %128, i64* %131, align 8', 'store i64 %130, i64* %6, align 8', 'store i64 %127, i64* %3, align 8', '%132 = load i64, i64* %3, align 8', '%133 = load i64, i64* %RAX.i33, align 8', 'store i64 %133, i64* %RSI.i51, align 8', '%AL.i = bitcast %union.anon* %83 to i8*', 'store i8 0, i8* %AL.i, align 1', '%134 = add i64 %132, -449', '%135 = add i64 %132, 20', '%136 = load i64, i64* %6, align 8', '%137 = add i64 %136, -8', '%138 = inttoptr i64 %137 to i64*', 'store i64 %135, i64* %138, align 8', 'store i64 %137, i64* %6, align 8', 'store i64 %134, i64* %3, align 8', '%140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i9 = bitcast %union.anon* %140 to i32*', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %140, i64 0, i32 0', '%141 = load i64, i64* %3, align 8', 'store i64 0, i64* %RCX.i, align 8', '%145 = add i64 %141, 5', 'store i64 %145, i64* %3, align 8', '%147 = load i32, i32* %ECX.i9, align 4', '%148 = zext i32 %147 to i64', '%149 = load i64, i64* %3, align 8', 'store i64 %148, i64* %RAX.i33, align 8', '%150 = load i64, i64* %6, align 8', '%151 = add i64 %150, 32', 'store i64 %151, i64* %6, align 8', '%152 = icmp ugt i64 %150, -33', '%153 = zext i1 %152 to i8', 'store i8 %153, i8* %14, align 1', '%154 = trunc i64 %151 to i32', '%155 = and i32 %154, 255', '%156 = tail call i32 @llvm.ctpop.i32(i32 %155)', '%157 = trunc i32 %156 to i8', '%158 = and i8 %157, 1', '%159 = xor i8 %158, 1', 'store i8 %159, i8* %21, align 1', '%160 = xor i64 %151, %150', '%161 = lshr i64 %160, 4', '%162 = trunc i64 %161 to i8', '%163 = and i8 %162, 1', 'store i8 %163, i8* %26, align 1', '%164 = icmp eq i64 %151, 0', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %29, align 1', '%166 = lshr i64 %151, 63', '%167 = trunc i64 %166 to i8', 'store i8 %167, i8* %32, align 1', '%168 = lshr i64 %150, 63', '%169 = xor i64 %166, %168', '%170 = add nuw nsw i64 %169, %166', '%171 = icmp eq i64 %170, 2', '%172 = zext i1 %171 to i8', 'store i8 %172, i8* %38, align 1', '%173 = add i64 %149, 7', 'store i64 %173, i64* %3, align 8', '%174 = add i64 %150, 40', '%175 = inttoptr i64 %151 to i64*', '%176 = load i64, i64* %175, align 8', 'store i64 %176, i64* %RBP.i, align 8', 'store i64 %174, i64* %6, align 8', '%177 = add i64 %149, 8', 'store i64 %177, i64* %3, align 8', '%178 = inttoptr i64 %174 to i64*', '%179 = load i64, i64* %178, align 8', 'store i64 %179, i64* %3, align 8', '%180 = add i64 %150, 48', 'store i64 %180, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = add i64 %10, 14
Found line to remove! store i64 %40, i64* %3, align 8
Found line to remove! %41 = inttoptr i64 %39 to i32*
Found line to remove! store i32 0, i32* %41, align 4
Keep: %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %42 to i32*
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI.i, align 4
Found line to remove! %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %RSI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI.i51, align 8
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %RBP.i, align 8
Keep: %56 = add i64 %55, -8
Found line to remove! %57 = load i64, i64* %3, align 8
Found line to remove! %58 = add i64 %57, 4
Found line to remove! store i64 %58, i64* %3, align 8
Keep: %59 = inttoptr i64 %56 to i32*
Keep: %60 = load i32, i32* %59, align 4
Keep: %61 = add i32 %60, -2
Found line to remove! %62 = icmp ult i32 %60, 2
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %14, align 1
Found line to remove! %64 = and i32 %61, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %21, align 1
Found line to remove! %69 = xor i32 %61, %60
Found line to remove! %70 = lshr i32 %69, 4
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! store i8 %72, i8* %26, align 1
Keep: %73 = icmp eq i32 %61, 0
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %29, align 1
Found line to remove! %75 = lshr i32 %61, 31
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! store i8 %76, i8* %32, align 1
Found line to remove! %77 = lshr i32 %60, 31
Found line to remove! %78 = xor i32 %75, %77
Found line to remove! %79 = add nuw nsw i32 %78, %77
Found line to remove! %80 = icmp eq i32 %79, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %38, align 1
Found line to remove! %.v = select i1 %73, i64 10, i64 31
Found line to remove! %82 = add i64 %57, %.v
Found line to remove! store i64 %82, i64* %3, align 8
Keep: %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0
Keep: br i1 %73, label %block_4005e0, label %block_.L_4005f5
Keep: 
Keep: block_4005e0:                                     ; preds = %entry
Found line to remove! %84 = add i64 %55, -16
Found line to remove! %85 = add i64 %82, 4
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! %86 = inttoptr i64 %84 to i64*
Found line to remove! %87 = load i64, i64* %86, align 8
Found line to remove! store i64 %87, i64* %RAX.i33, align 8
Keep: %RDI.i43 = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Found line to remove! %88 = add i64 %87, 8
Found line to remove! %89 = add i64 %82, 8
Found line to remove! store i64 %89, i64* %3, align 8
Found line to remove! %90 = inttoptr i64 %88 to i64*
Found line to remove! %91 = load i64, i64* %90, align 8
Found line to remove! store i64 %91, i64* %RDI.i43, align 8
Found line to remove! %92 = add i64 %82, -384
Found line to remove! %93 = add i64 %82, 13
Found line to remove! %94 = load i64, i64* %6, align 8
Found line to remove! %95 = add i64 %94, -8
Found line to remove! %96 = inttoptr i64 %95 to i64*
Found line to remove! store i64 %93, i64* %96, align 8
Found line to remove! store i64 %95, i64* %6, align 8
Found line to remove! store i64 %92, i64* %3, align 8
Keep: %97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i36 = bitcast %union.anon* %83 to i32*
Keep: %98 = load i64, i64* %RBP.i, align 8
Keep: %99 = add i64 %98, -24
Keep: %100 = load i32, i32* %EAX.i36, align 4
Found line to remove! %101 = load i64, i64* %3, align 8
Found line to remove! %102 = add i64 %101, 3
Found line to remove! store i64 %102, i64* %3, align 8
Keep: %103 = inttoptr i64 %99 to i32*
Keep: store i32 %100, i32* %103, align 4
Keep: %104 = load i64, i64* %3, align 8
Keep: %105 = add i64 %104, 18
Keep: br label %block_.L_400602
Keep: 
Keep: block_.L_4005f5:                                  ; preds = %entry
Keep: store i64 20, i64* %RAX.i33, align 8
Keep: %EAX.i30 = bitcast %union.anon* %83 to i32*
Keep: %106 = add i64 %55, -24
Found line to remove! %107 = add i64 %82, 8
Found line to remove! store i64 %107, i64* %3, align 8
Keep: %108 = inttoptr i64 %106 to i32*
Keep: store i32 20, i32* %108, align 4
Keep: %109 = load i64, i64* %3, align 8
Keep: %110 = add i64 %109, 5
Found line to remove! store i64 %110, i64* %3, align 8
Keep: %.pre = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Keep: br label %block_.L_400602
Keep: 
Keep: block_.L_400602:                                  ; preds = %block_.L_4005f5, %block_4005e0
Keep: %RDI.i20.pre-phi = phi i64* [ %.pre, %block_.L_4005f5 ], [ %RDI.i43, %block_4005e0 ]
Keep: %EAX.i23.pre-phi = phi i32* [ %EAX.i30, %block_.L_4005f5 ], [ %EAX.i36, %block_4005e0 ]
Keep: %storemerge = phi i64 [ %110, %block_.L_4005f5 ], [ %105, %block_4005e0 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005f5 ], [ %97, %block_4005e0 ]
Found line to remove! %111 = load i64, i64* %RBP.i, align 8
Found line to remove! %112 = add i64 %111, -24
Keep: %113 = add i64 %storemerge, 3
Keep: store i64 %113, i64* %3, align 8
Found line to remove! %114 = inttoptr i64 %112 to i32*
Found line to remove! %115 = load i32, i32* %114, align 4
Found line to remove! %116 = zext i32 %115 to i64
Found line to remove! store i64 %116, i64* %RAX.i33, align 8
Found line to remove! %117 = add i64 %111, -20
Keep: %118 = add i64 %storemerge, 6
Keep: store i64 %118, i64* %3, align 8
Found line to remove! %119 = inttoptr i64 %117 to i32*
Found line to remove! store i32 %115, i32* %119, align 4
Keep: %120 = load i64, i64* %RBP.i, align 8
Keep: %121 = add i64 %120, -20
Keep: %122 = load i64, i64* %3, align 8
Found line to remove! %123 = add i64 %122, 4
Found line to remove! store i64 %123, i64* %3, align 8
Keep: %124 = inttoptr i64 %121 to i32*
Keep: %125 = load i32, i32* %124, align 4
Keep: %126 = sext i32 %125 to i64
Keep: store i64 %126, i64* %RDI.i20.pre-phi, align 8
Keep: %127 = add i64 %122, -168
Found line to remove! %128 = add i64 %122, 9
Found line to remove! %129 = load i64, i64* %6, align 8
Found line to remove! %130 = add i64 %129, -8
Found line to remove! %131 = inttoptr i64 %130 to i64*
Found line to remove! store i64 %128, i64* %131, align 8
Found line to remove! store i64 %130, i64* %6, align 8
Found line to remove! store i64 %127, i64* %3, align 8
Keep: %call2_40060c = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %127, %struct.Memory* %MEMORY.0)
Found line to remove! %132 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x4006c4_type* @G__0x4006c4 to i64), i64* %RDI.i20.pre-phi, align 8
Found line to remove! %133 = load i64, i64* %RAX.i33, align 8
Found line to remove! store i64 %133, i64* %RSI.i51, align 8
Found line to remove! %AL.i = bitcast %union.anon* %83 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %134 = add i64 %132, -449
Found line to remove! %135 = add i64 %132, 20
Found line to remove! %136 = load i64, i64* %6, align 8
Found line to remove! %137 = add i64 %136, -8
Found line to remove! %138 = inttoptr i64 %137 to i64*
Found line to remove! store i64 %135, i64* %138, align 8
Found line to remove! store i64 %137, i64* %6, align 8
Found line to remove! store i64 %134, i64* %3, align 8
Keep: %139 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_40060c)
Found line to remove! %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX.i9 = bitcast %union.anon* %140 to i32*
Found line to remove! %RCX.i = getelementptr inbounds %union.anon, %union.anon* %140, i64 0, i32 0
Found line to remove! %141 = load i64, i64* %3, align 8
Found line to remove! store i64 0, i64* %RCX.i, align 8
Keep: %142 = load i64, i64* %RBP.i, align 8
Keep: %143 = add i64 %142, -28
Keep: %144 = load i32, i32* %EAX.i23.pre-phi, align 4
Found line to remove! %145 = add i64 %141, 5
Found line to remove! store i64 %145, i64* %3, align 8
Keep: %146 = inttoptr i64 %143 to i32*
Keep: store i32 %144, i32* %146, align 4
Found line to remove! %147 = load i32, i32* %ECX.i9, align 4
Found line to remove! %148 = zext i32 %147 to i64
Found line to remove! %149 = load i64, i64* %3, align 8
Found line to remove! store i64 %148, i64* %RAX.i33, align 8
Found line to remove! %150 = load i64, i64* %6, align 8
Found line to remove! %151 = add i64 %150, 32
Found line to remove! store i64 %151, i64* %6, align 8
Found line to remove! %152 = icmp ugt i64 %150, -33
Found line to remove! %153 = zext i1 %152 to i8
Found line to remove! store i8 %153, i8* %14, align 1
Found line to remove! %154 = trunc i64 %151 to i32
Found line to remove! %155 = and i32 %154, 255
Found line to remove! %156 = tail call i32 @llvm.ctpop.i32(i32 %155)
Found line to remove! %157 = trunc i32 %156 to i8
Found line to remove! %158 = and i8 %157, 1
Found line to remove! %159 = xor i8 %158, 1
Found line to remove! store i8 %159, i8* %21, align 1
Found line to remove! %160 = xor i64 %151, %150
Found line to remove! %161 = lshr i64 %160, 4
Found line to remove! %162 = trunc i64 %161 to i8
Found line to remove! %163 = and i8 %162, 1
Found line to remove! store i8 %163, i8* %26, align 1
Found line to remove! %164 = icmp eq i64 %151, 0
Found line to remove! %165 = zext i1 %164 to i8
Found line to remove! store i8 %165, i8* %29, align 1
Found line to remove! %166 = lshr i64 %151, 63
Found line to remove! %167 = trunc i64 %166 to i8
Found line to remove! store i8 %167, i8* %32, align 1
Found line to remove! %168 = lshr i64 %150, 63
Found line to remove! %169 = xor i64 %166, %168
Found line to remove! %170 = add nuw nsw i64 %169, %166
Found line to remove! %171 = icmp eq i64 %170, 2
Found line to remove! %172 = zext i1 %171 to i8
Found line to remove! store i8 %172, i8* %38, align 1
Found line to remove! %173 = add i64 %149, 7
Found line to remove! store i64 %173, i64* %3, align 8
Found line to remove! %174 = add i64 %150, 40
Found line to remove! %175 = inttoptr i64 %151 to i64*
Found line to remove! %176 = load i64, i64* %175, align 8
Found line to remove! store i64 %176, i64* %RBP.i, align 8
Found line to remove! store i64 %174, i64* %6, align 8
Found line to remove! %177 = add i64 %149, 8
Found line to remove! store i64 %177, i64* %3, align 8
Found line to remove! %178 = inttoptr i64 %174 to i64*
Found line to remove! %179 = load i64, i64* %178, align 8
Found line to remove! store i64 %179, i64* %3, align 8
Found line to remove! %180 = add i64 %150, 48
Found line to remove! store i64 %180, i64* %6, align 8
Keep: ret %struct.Memory* %139
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%RSI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI.i51, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %3, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %14, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64)', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %21, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %26, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %29, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %32, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %38, align 1', '%.v = select i1 %73, i64 10, i64 31', '%82 = add i64 %57, %.v', 'store i64 %82, i64* %3, align 8', '%84 = add i64 %55, -16', '%85 = add i64 %82, 4', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %84 to i64*', '%87 = load i64, i64* %86, align 8', 'store i64 %87, i64* %RAX.i33, align 8', '%88 = add i64 %87, 8', '%89 = add i64 %82, 8', 'store i64 %89, i64* %3, align 8', '%90 = inttoptr i64 %88 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %RDI.i43, align 8', '%92 = add i64 %82, -384', '%93 = add i64 %82, 13', '%94 = load i64, i64* %6, align 8', '%95 = add i64 %94, -8', '%96 = inttoptr i64 %95 to i64*', 'store i64 %93, i64* %96, align 8', 'store i64 %95, i64* %6, align 8', 'store i64 %92, i64* %3, align 8', '%101 = load i64, i64* %3, align 8', '%102 = add i64 %101, 3', 'store i64 %102, i64* %3, align 8', '%107 = add i64 %82, 8', 'store i64 %107, i64* %3, align 8', 'store i64 %110, i64* %3, align 8', '%111 = load i64, i64* %RBP.i, align 8', '%112 = add i64 %111, -24', '%114 = inttoptr i64 %112 to i32*', '%115 = load i32, i32* %114, align 4', '%116 = zext i32 %115 to i64', 'store i64 %116, i64* %RAX.i33, align 8', '%117 = add i64 %111, -20', '%119 = inttoptr i64 %117 to i32*', 'store i32 %115, i32* %119, align 4', '%123 = add i64 %122, 4', 'store i64 %123, i64* %3, align 8', '%128 = add i64 %122, 9', '%129 = load i64, i64* %6, align 8', '%130 = add i64 %129, -8', '%131 = inttoptr i64 %130 to i64*', 'store i64 %128, i64* %131, align 8', 'store i64 %130, i64* %6, align 8', 'store i64 %127, i64* %3, align 8', '%132 = load i64, i64* %3, align 8', '%133 = load i64, i64* %RAX.i33, align 8', 'store i64 %133, i64* %RSI.i51, align 8', '%AL.i = bitcast %union.anon* %83 to i8*', 'store i8 0, i8* %AL.i, align 1', '%134 = add i64 %132, -449', '%135 = add i64 %132, 20', '%136 = load i64, i64* %6, align 8', '%137 = add i64 %136, -8', '%138 = inttoptr i64 %137 to i64*', 'store i64 %135, i64* %138, align 8', 'store i64 %137, i64* %6, align 8', 'store i64 %134, i64* %3, align 8', '%140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i9 = bitcast %union.anon* %140 to i32*', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %140, i64 0, i32 0', '%141 = load i64, i64* %3, align 8', 'store i64 0, i64* %RCX.i, align 8', '%145 = add i64 %141, 5', 'store i64 %145, i64* %3, align 8', '%147 = load i32, i32* %ECX.i9, align 4', '%148 = zext i32 %147 to i64', '%149 = load i64, i64* %3, align 8', 'store i64 %148, i64* %RAX.i33, align 8', '%150 = load i64, i64* %6, align 8', '%151 = add i64 %150, 32', 'store i64 %151, i64* %6, align 8', '%152 = icmp ugt i64 %150, -33', '%153 = zext i1 %152 to i8', 'store i8 %153, i8* %14, align 1', '%154 = trunc i64 %151 to i32', '%155 = and i32 %154, 255', '%156 = tail call i32 @llvm.ctpop.i32(i32 %155)', '%157 = trunc i32 %156 to i8', '%158 = and i8 %157, 1', '%159 = xor i8 %158, 1', 'store i8 %159, i8* %21, align 1', '%160 = xor i64 %151, %150', '%161 = lshr i64 %160, 4', '%162 = trunc i64 %161 to i8', '%163 = and i8 %162, 1', 'store i8 %163, i8* %26, align 1', '%164 = icmp eq i64 %151, 0', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %29, align 1', '%166 = lshr i64 %151, 63', '%167 = trunc i64 %166 to i8', 'store i8 %167, i8* %32, align 1', '%168 = lshr i64 %150, 63', '%169 = xor i64 %166, %168', '%170 = add nuw nsw i64 %169, %166', '%171 = icmp eq i64 %170, 2', '%172 = zext i1 %171 to i8', 'store i8 %172, i8* %38, align 1', '%173 = add i64 %149, 7', 'store i64 %173, i64* %3, align 8', '%174 = add i64 %150, 40', '%175 = inttoptr i64 %151 to i64*', '%176 = load i64, i64* %175, align 8', 'store i64 %176, i64* %RBP.i, align 8', 'store i64 %174, i64* %6, align 8', '%177 = add i64 %149, 8', 'store i64 %177, i64* %3, align 8', '%178 = inttoptr i64 %174 to i64*', '%179 = load i64, i64* %178, align 8', 'store i64 %179, i64* %3, align 8', '%180 = add i64 %150, 48', 'store i64 %180, i64* %6, align 8'])
TO REMOVE: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %4 to i32*', '%EDI = bitcast %union.anon* %5 to i32*', '%RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %15, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %22, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %27, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %30, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %33, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %39, align 1', 'store i64 %82, i64* %PC, align 8', '%89 = load i64, i64* %RBP, align 8', '%90 = add i64 %89, -24', '%92 = inttoptr i64 %90 to i32*', '%93 = load i32, i32* %92, align 4', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RAX, align 8', '%95 = add i64 %89, -20', '%97 = inttoptr i64 %95 to i32*', 'store i32 %93, i32* %97, align 4', '%101 = add i64 %100, 4', 'store i64 %101, i64* %PC, align 8', '%106 = add i64 %100, 9', '%107 = load i64, i64* %RSP, align 8', '%108 = add i64 %107, -8', '%109 = inttoptr i64 %108 to i64*', 'store i64 %106, i64* %109, align 8', 'store i64 %108, i64* %RSP, align 8', 'store i64 %105, i64* %PC, align 8', '%111 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 4), i64* %RDI, align 8', '%112 = load i64, i64* %RAX, align 8', 'store i64 %112, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%113 = add i64 %111, -449', '%114 = add i64 %111, 20', '%115 = load i64, i64* %RSP, align 8', '%116 = add i64 %115, -8', '%117 = inttoptr i64 %116 to i64*', 'store i64 %114, i64* %117, align 8', 'store i64 %116, i64* %RSP, align 8', 'store i64 %113, i64* %PC, align 8', 'store i64 0, i64* %RCX, align 8', '%125 = load i32, i32* %ECX, align 4', '%126 = zext i32 %125 to i64', '%127 = load i64, i64* %PC, align 8', 'store i64 %126, i64* %RAX, align 8', '%128 = load i64, i64* %RSP, align 8', '%129 = add i64 %128, 32', 'store i64 %129, i64* %RSP, align 8', '%130 = icmp ugt i64 %128, -33', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %15, align 1', '%132 = trunc i64 %129 to i32', '%133 = and i32 %132, 255', '%134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12', '%135 = trunc i32 %134 to i8', '%136 = and i8 %135, 1', '%137 = xor i8 %136, 1', 'store i8 %137, i8* %22, align 1', '%138 = xor i64 %129, %128', '%139 = lshr i64 %138, 4', '%140 = trunc i64 %139 to i8', '%141 = and i8 %140, 1', 'store i8 %141, i8* %27, align 1', '%142 = icmp eq i64 %129, 0', '%143 = zext i1 %142 to i8', 'store i8 %143, i8* %30, align 1', '%144 = lshr i64 %129, 63', '%145 = trunc i64 %144 to i8', 'store i8 %145, i8* %33, align 1', '%146 = lshr i64 %128, 63', '%147 = xor i64 %144, %146', '%148 = add nuw nsw i64 %147, %144', '%149 = icmp eq i64 %148, 2', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %39, align 1', '%151 = add i64 %127, 7', 'store i64 %151, i64* %PC, align 8', '%152 = add i64 %128, 40', '%153 = inttoptr i64 %129 to i64*', '%154 = load i64, i64* %153, align 8', 'store i64 %154, i64* %RBP, align 8', 'store i64 %152, i64* %RSP, align 8', '%155 = add i64 %127, 8', 'store i64 %155, i64* %PC, align 8', '%156 = inttoptr i64 %152 to i64*', '%157 = load i64, i64* %156, align 8', 'store i64 %157, i64* %PC, align 8', '%158 = add i64 %128, 48', 'store i64 %158, i64* %RSP, align 8', '%159 = add i64 %55, -16', '%160 = add i64 %82, 4', 'store i64 %160, i64* %PC, align 8', '%161 = inttoptr i64 %159 to i64*', '%162 = load i64, i64* %161, align 8', 'store i64 %162, i64* %RAX, align 8', '%163 = add i64 %162, 8', '%165 = inttoptr i64 %163 to i64*', '%166 = load i64, i64* %165, align 8', 'store i64 %166, i64* %RDI, align 8', '%167 = add i64 %82, -384', '%168 = add i64 %82, 13', '%169 = load i64, i64* %RSP, align 8', '%170 = add i64 %169, -8', '%171 = inttoptr i64 %170 to i64*', 'store i64 %168, i64* %171, align 8', 'store i64 %170, i64* %RSP, align 8', 'store i64 %167, i64* %PC, align 8'])
Keep: block_4005c0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Keep: %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Keep: %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -12
Found line to remove! %41 = add i64 %11, 14
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Keep: %46 = load i64, i64* %PC, align 8
Keep: %47 = add i64 %46, 3
Keep: store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %RBP, align 8
Keep: %56 = add i64 %55, -8
Keep: %57 = load i64, i64* %PC, align 8
Found line to remove! %58 = add i64 %57, 4
Found line to remove! store i64 %58, i64* %PC, align 8
Keep: %59 = inttoptr i64 %56 to i32*
Keep: %60 = load i32, i32* %59, align 4
Keep: %61 = add i32 %60, -2
Found line to remove! %62 = icmp ult i32 %60, 2
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %15, align 1
Found line to remove! %64 = and i32 %61, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %22, align 1
Found line to remove! %69 = xor i32 %61, %60
Found line to remove! %70 = lshr i32 %69, 4
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! store i8 %72, i8* %27, align 1
Keep: %73 = icmp eq i32 %61, 0
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %30, align 1
Found line to remove! %75 = lshr i32 %61, 31
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! store i8 %76, i8* %33, align 1
Found line to remove! %77 = lshr i32 %60, 31
Found line to remove! %78 = xor i32 %75, %77
Found line to remove! %79 = add nuw nsw i32 %78, %77
Found line to remove! %80 = icmp eq i32 %79, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %39, align 1
Keep: %.v = select i1 %73, i64 10, i64 31
Keep: %82 = add i64 %57, %.v
Found line to remove! store i64 %82, i64* %PC, align 8
Keep: br i1 %73, label %block_4005e0, label %block_4005f5
Keep: 
Keep: block_4005f5:                                     ; preds = %block_4005c0
Keep: %83 = add i64 %82, 5
Keep: store i64 %83, i64* %PC, align 8
Keep: store i64 20, i64* %RAX, align 8
Keep: br label %block_400602
Keep: 
Keep: block_400602:                                     ; preds = %block_4005e0, %block_4005f5
Keep: %84 = phi i64 [ %.pre, %block_4005e0 ], [ %83, %block_4005f5 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005e0 ], [ %55, %block_4005f5 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_4005e0 ], [ 20, %block_4005f5 ]
Keep: %.sink5 = phi i64 [ 18, %block_4005e0 ], [ 5, %block_4005f5 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %172, %block_4005e0 ], [ %2, %block_4005f5 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %85 = add i64 %84, 3
Keep: store i64 %85, i64* %PC, align 8
Keep: %86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %86, align 4
Keep: %87 = load i64, i64* %PC, align 8
Keep: %88 = add i64 %87, %.sink5
Found line to remove! %89 = load i64, i64* %RBP, align 8
Found line to remove! %90 = add i64 %89, -24
Keep: %91 = add i64 %88, 3
Keep: store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %90 to i32*
Found line to remove! %93 = load i32, i32* %92, align 4
Found line to remove! %94 = zext i32 %93 to i64
Found line to remove! store i64 %94, i64* %RAX, align 8
Found line to remove! %95 = add i64 %89, -20
Keep: %96 = add i64 %88, 6
Keep: store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %95 to i32*
Found line to remove! store i32 %93, i32* %97, align 4
Keep: %98 = load i64, i64* %RBP, align 8
Keep: %99 = add i64 %98, -20
Keep: %100 = load i64, i64* %PC, align 8
Found line to remove! %101 = add i64 %100, 4
Found line to remove! store i64 %101, i64* %PC, align 8
Keep: %102 = inttoptr i64 %99 to i32*
Keep: %103 = load i32, i32* %102, align 4
Keep: %104 = sext i32 %103 to i64
Keep: store i64 %104, i64* %RDI, align 8
Keep: %105 = add i64 %100, -168
Found line to remove! %106 = add i64 %100, 9
Found line to remove! %107 = load i64, i64* %RSP, align 8
Found line to remove! %108 = add i64 %107, -8
Found line to remove! %109 = inttoptr i64 %108 to i64*
Found line to remove! store i64 %106, i64* %109, align 8
Found line to remove! store i64 %108, i64* %RSP, align 8
Found line to remove! store i64 %105, i64* %PC, align 8
Keep: %110 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %105, %struct.Memory* %MEMORY.0)
Found line to remove! %111 = load i64, i64* %PC, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %112 = load i64, i64* %RAX, align 8
Found line to remove! store i64 %112, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %113 = add i64 %111, -449
Found line to remove! %114 = add i64 %111, 20
Found line to remove! %115 = load i64, i64* %RSP, align 8
Found line to remove! %116 = add i64 %115, -8
Found line to remove! %117 = inttoptr i64 %116 to i64*
Found line to remove! store i64 %114, i64* %117, align 8
Found line to remove! store i64 %116, i64* %RSP, align 8
Found line to remove! store i64 %113, i64* %PC, align 8
Keep: %118 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %110)
Keep: %119 = load i64, i64* %PC, align 8
Found line to remove! store i64 0, i64* %RCX, align 8
Keep: %120 = load i64, i64* %RBP, align 8
Keep: %121 = add i64 %120, -28
Keep: %122 = load i32, i32* %EAX, align 4
Keep: %123 = add i64 %119, 5
Keep: store i64 %123, i64* %PC, align 8
Keep: %124 = inttoptr i64 %121 to i32*
Keep: store i32 %122, i32* %124, align 4
Found line to remove! %125 = load i32, i32* %ECX, align 4
Found line to remove! %126 = zext i32 %125 to i64
Found line to remove! %127 = load i64, i64* %PC, align 8
Found line to remove! store i64 %126, i64* %RAX, align 8
Found line to remove! %128 = load i64, i64* %RSP, align 8
Found line to remove! %129 = add i64 %128, 32
Found line to remove! store i64 %129, i64* %RSP, align 8
Found line to remove! %130 = icmp ugt i64 %128, -33
Found line to remove! %131 = zext i1 %130 to i8
Found line to remove! store i8 %131, i8* %15, align 1
Found line to remove! %132 = trunc i64 %129 to i32
Found line to remove! %133 = and i32 %132, 255
Found line to remove! %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12
Found line to remove! %135 = trunc i32 %134 to i8
Found line to remove! %136 = and i8 %135, 1
Found line to remove! %137 = xor i8 %136, 1
Found line to remove! store i8 %137, i8* %22, align 1
Found line to remove! %138 = xor i64 %129, %128
Found line to remove! %139 = lshr i64 %138, 4
Found line to remove! %140 = trunc i64 %139 to i8
Found line to remove! %141 = and i8 %140, 1
Found line to remove! store i8 %141, i8* %27, align 1
Found line to remove! %142 = icmp eq i64 %129, 0
Found line to remove! %143 = zext i1 %142 to i8
Found line to remove! store i8 %143, i8* %30, align 1
Found line to remove! %144 = lshr i64 %129, 63
Found line to remove! %145 = trunc i64 %144 to i8
Found line to remove! store i8 %145, i8* %33, align 1
Found line to remove! %146 = lshr i64 %128, 63
Found line to remove! %147 = xor i64 %144, %146
Found line to remove! %148 = add nuw nsw i64 %147, %144
Found line to remove! %149 = icmp eq i64 %148, 2
Found line to remove! %150 = zext i1 %149 to i8
Found line to remove! store i8 %150, i8* %39, align 1
Found line to remove! %151 = add i64 %127, 7
Found line to remove! store i64 %151, i64* %PC, align 8
Found line to remove! %152 = add i64 %128, 40
Found line to remove! %153 = inttoptr i64 %129 to i64*
Found line to remove! %154 = load i64, i64* %153, align 8
Found line to remove! store i64 %154, i64* %RBP, align 8
Found line to remove! store i64 %152, i64* %RSP, align 8
Found line to remove! %155 = add i64 %127, 8
Found line to remove! store i64 %155, i64* %PC, align 8
Found line to remove! %156 = inttoptr i64 %152 to i64*
Found line to remove! %157 = load i64, i64* %156, align 8
Found line to remove! store i64 %157, i64* %PC, align 8
Found line to remove! %158 = add i64 %128, 48
Found line to remove! store i64 %158, i64* %RSP, align 8
Keep: ret %struct.Memory* %118
Keep: 
Keep: block_4005e0:                                     ; preds = %block_4005c0
Found line to remove! %159 = add i64 %55, -16
Found line to remove! %160 = add i64 %82, 4
Found line to remove! store i64 %160, i64* %PC, align 8
Found line to remove! %161 = inttoptr i64 %159 to i64*
Found line to remove! %162 = load i64, i64* %161, align 8
Found line to remove! store i64 %162, i64* %RAX, align 8
Found line to remove! %163 = add i64 %162, 8
Keep: %164 = add i64 %82, 8
Keep: store i64 %164, i64* %PC, align 8
Found line to remove! %165 = inttoptr i64 %163 to i64*
Found line to remove! %166 = load i64, i64* %165, align 8
Found line to remove! store i64 %166, i64* %RDI, align 8
Found line to remove! %167 = add i64 %82, -384
Found line to remove! %168 = add i64 %82, 13
Found line to remove! %169 = load i64, i64* %RSP, align 8
Found line to remove! %170 = add i64 %169, -8
Found line to remove! %171 = inttoptr i64 %170 to i64*
Found line to remove! store i64 %168, i64* %171, align 8
Found line to remove! store i64 %170, i64* %RSP, align 8
Found line to remove! store i64 %167, i64* %PC, align 8
Keep: %172 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400602
Missed: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %4 to i32*', '%EDI = bitcast %union.anon* %5 to i32*', '%RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%58 = add i64 %57, 4', 'store i64 %58, i64* %PC, align 8', '%62 = icmp ult i32 %60, 2', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %15, align 1', '%64 = and i32 %61, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64) #12', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %22, align 1', '%69 = xor i32 %61, %60', '%70 = lshr i32 %69, 4', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', 'store i8 %72, i8* %27, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %30, align 1', '%75 = lshr i32 %61, 31', '%76 = trunc i32 %75 to i8', 'store i8 %76, i8* %33, align 1', '%77 = lshr i32 %60, 31', '%78 = xor i32 %75, %77', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %39, align 1', 'store i64 %82, i64* %PC, align 8', '%89 = load i64, i64* %RBP, align 8', '%90 = add i64 %89, -24', '%92 = inttoptr i64 %90 to i32*', '%93 = load i32, i32* %92, align 4', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RAX, align 8', '%95 = add i64 %89, -20', '%97 = inttoptr i64 %95 to i32*', 'store i32 %93, i32* %97, align 4', '%101 = add i64 %100, 4', 'store i64 %101, i64* %PC, align 8', '%106 = add i64 %100, 9', '%107 = load i64, i64* %RSP, align 8', '%108 = add i64 %107, -8', '%109 = inttoptr i64 %108 to i64*', 'store i64 %106, i64* %109, align 8', 'store i64 %108, i64* %RSP, align 8', 'store i64 %105, i64* %PC, align 8', '%111 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_4006c0__rodata_type* @seg_4006c0__rodata to i64), i64 4), i64* %RDI, align 8', '%112 = load i64, i64* %RAX, align 8', 'store i64 %112, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%113 = add i64 %111, -449', '%114 = add i64 %111, 20', '%115 = load i64, i64* %RSP, align 8', '%116 = add i64 %115, -8', '%117 = inttoptr i64 %116 to i64*', 'store i64 %114, i64* %117, align 8', 'store i64 %116, i64* %RSP, align 8', 'store i64 %113, i64* %PC, align 8', 'store i64 0, i64* %RCX, align 8', '%125 = load i32, i32* %ECX, align 4', '%126 = zext i32 %125 to i64', '%127 = load i64, i64* %PC, align 8', 'store i64 %126, i64* %RAX, align 8', '%128 = load i64, i64* %RSP, align 8', '%129 = add i64 %128, 32', 'store i64 %129, i64* %RSP, align 8', '%130 = icmp ugt i64 %128, -33', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %15, align 1', '%132 = trunc i64 %129 to i32', '%133 = and i32 %132, 255', '%134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12', '%135 = trunc i32 %134 to i8', '%136 = and i8 %135, 1', '%137 = xor i8 %136, 1', 'store i8 %137, i8* %22, align 1', '%138 = xor i64 %129, %128', '%139 = lshr i64 %138, 4', '%140 = trunc i64 %139 to i8', '%141 = and i8 %140, 1', 'store i8 %141, i8* %27, align 1', '%142 = icmp eq i64 %129, 0', '%143 = zext i1 %142 to i8', 'store i8 %143, i8* %30, align 1', '%144 = lshr i64 %129, 63', '%145 = trunc i64 %144 to i8', 'store i8 %145, i8* %33, align 1', '%146 = lshr i64 %128, 63', '%147 = xor i64 %144, %146', '%148 = add nuw nsw i64 %147, %144', '%149 = icmp eq i64 %148, 2', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %39, align 1', '%151 = add i64 %127, 7', 'store i64 %151, i64* %PC, align 8', '%152 = add i64 %128, 40', '%153 = inttoptr i64 %129 to i64*', '%154 = load i64, i64* %153, align 8', 'store i64 %154, i64* %RBP, align 8', 'store i64 %152, i64* %RSP, align 8', '%155 = add i64 %127, 8', 'store i64 %155, i64* %PC, align 8', '%156 = inttoptr i64 %152 to i64*', '%157 = load i64, i64* %156, align 8', 'store i64 %157, i64* %PC, align 8', '%158 = add i64 %128, 48', 'store i64 %158, i64* %RSP, align 8', '%159 = add i64 %55, -16', '%160 = add i64 %82, 4', 'store i64 %160, i64* %PC, align 8', '%161 = inttoptr i64 %159 to i64*', '%162 = load i64, i64* %161, align 8', 'store i64 %162, i64* %RAX, align 8', '%163 = add i64 %162, 8', '%165 = inttoptr i64 %163 to i64*', '%166 = load i64, i64* %165, align 8', 'store i64 %166, i64* %RDI, align 8', '%167 = add i64 %82, -384', '%168 = add i64 %82, 13', '%169 = load i64, i64* %RSP, align 8', '%170 = add i64 %169, -8', '%171 = inttoptr i64 %170 to i64*', 'store i64 %168, i64* %171, align 8', 'store i64 %170, i64* %RSP, align 8', 'store i64 %167, i64* %PC, align 8'])Writing '/tmp/tmpln8amu9g.dot'...
Writing '/tmp/tmpln8amu9g.dot':Done

Reading LLVM: /tmp/tmpjtgi5awb-query.ll
Extracting function [main] from /tmp/tmpjtgi5awb-query.ll
Dot file generated!
Writing '/tmp/tmp7wxrwmns.dot'...
Writing '/tmp/tmp7wxrwmns.dot':Done

Reading LLVM: /tmp/tmp_e_v58wk-target.ll
Extracting function [main] from /tmp/tmp_e_v58wk-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_55 = load i64, i64* %RBP.i, align 8
- 3 %var_2_56 = add i64 %var_2_55, -8
- 4 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 5 %var_2_60 = load i32, i32* %var_2_59, align 4
- 6 %var_2_73 = icmp eq i32 %var_2_60, 2
- 7 %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 8 \<badref\> = br i1 %var_2_73, label %block_4005e0, label %block_.L_4005f5
- 9 %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 10 %EAX.i36 = bitcast %union.anon* %var_2_83 to i32*
- 11 %var_2_98 = load i64, i64* %RBP.i, align 8
- 12 %var_2_100 = load i32, i32* %EAX.i36, align 4
- 13 \<badref\> = br label %block_.L_400602
- 14 %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0
- 15 store i64 20, i64* %RAX.i33, align 8
- 16 %EAX.i30 = bitcast %union.anon* %var_2_83 to i32*
- 17 \<badref\> = br label %block_.L_400602
- 18 %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_4005f5 ], [ %var_2_98, %block_4005e0 ]
- 19 %.sink1 = phi i32 [ 20, %block_.L_4005f5 ], [ %var_2_100, %block_4005e0 ]
- 20 %.sink = phi i64 [ 5, %block_.L_4005f5 ], [ 18, %block_4005e0 ]
- 21 %EAX.i23.pre-phi = phi i32* [ %EAX.i30, %block_.L_4005f5 ], [ %EAX.i36, %block_4005e0 ]
- 22 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005f5 ], [ %var_2_97, %block_4005e0 ]
- 23 %var_2_106.sink = add i64 %var_2_106.sink.in, -24
- 24 %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
- 25 store i32 %.sink1, i32* %var_2_108, align 4
- 26 %var_2_109 = load i64, i64* %var_2_3, align 8
- 27 %var_2_110 = add i64 %var_2_109, %.sink
- 28 %RDI.i20.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 29 %var_2_118 = add i64 %var_2_110, 6
- 30 store i64 %var_2_118, i64* %var_2_3, align 8
- 31 %var_2_120 = load i64, i64* %RBP.i, align 8
- 32 %var_2_121 = add i64 %var_2_120, -20
- 33 %var_2_124 = inttoptr i64 %var_2_121 to i32*
- 34 %var_2_125 = load i32, i32* %var_2_124, align 4
- 35 %var_2_126 = sext i32 %var_2_125 to i64
- 36 store i64 %var_2_126, i64* %RDI.i20.pre-phi, align 8
- 37 %var_2_127 = add i64 %var_2_110, -162
- 38 %call2_40060c = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %var_2_127, %struct.Memory* %MEMORY.0)
- 39 store i64 ptrtoint (%G__0x4006c4_type* @G__0x4006c4 to i64), i64* %RDI.i20.pre-phi, align 8
- 40 %var_2_139 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_40060c)
- 41 %var_2_142 = load i64, i64* %RBP.i, align 8
- 42 %var_2_143 = add i64 %var_2_142, -28
- 43 %var_2_144 = load i32, i32* %EAX.i23.pre-phi, align 4
- 44 %var_2_146 = inttoptr i64 %var_2_143 to i32*
- 45 store i32 %var_2_144, i32* %var_2_146, align 4
- 46 \<badref\> = ret %struct.Memory* %var_2_139
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f046c950>, {0: {0}, 1: {4}, 2: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 3: {9}, 4: {10, 37, 50, 29}, 5: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 6: {12}, 7: {1}, 8: {15}, 9: {42, 43, 55}, 10: {2}, 11: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 12: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 13: {59, 20}, 14: {16}, 15: {34, 7, 40, 49, 18, 19, 51, 54, 28, 30}, 16: {2}, 17: {59, 20}, 18: {25, 21, 22}, 19: set(), 20: set(), 21: {25, 21, 22}, 22: {25, 21, 22}, 23: {26}, 24: {10, 37, 50, 29}, 25: {34, 7, 40, 49, 18, 19, 51, 54, 28, 30}, 26: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 27: {32, 14}, 28: {3}, 29: {33}, 30: {34, 7, 40, 49, 18, 19, 51, 54, 28, 30}, 31: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 32: {36}, 33: {10, 37, 50, 29}, 34: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 35: {39}, 36: {34, 7, 40, 49, 18, 19, 51, 54, 28, 30}, 37: {41}, 38: {42, 43, 55}, 39: {34, 7, 40, 49, 18, 19, 51, 54, 28, 30}, 40: {42, 43, 55}, 41: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 42: {46}, 43: {35, 5, 38, 8, 11, 44, 45, 47, 56, 57, 58, 31}, 44: {10, 37, 50, 29}, 45: {34, 7, 40, 49, 18, 19, 51, 54, 28, 30}, 46: {52}})
Equivalent! frozenset({59, 20}) {17, 13}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f046c950>, {0: set(), 1: {4}, 2: {8}, 3: {9}, 4: {10}, 5: {11}, 6: {12}, 7: {1}, 8: {15}, 9: set(), 10: set(), 11: set(), 12: set(), 13: {20}, 14: {16}, 15: {19}, 16: set(), 17: {59}, 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: {3}, 29: set(), 30: set(), 31: {35}, 32: {36}, 33: {37}, 34: {38}, 35: {39}, 36: {40}, 37: set(), 38: set(), 39: {40}, 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: set(), 46: set()})
NO MATCH 0
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
EXACT 6 icmp icmp
EXACT 7 getelementptr getelementptr
EXACT 8 br br
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
EXACT 13 br br
EXACT 14 getelementptr getelementptr
EXACT 15 store store
NO MATCH 16
EXACT 17 br br
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
EXACT 28 getelementptr getelementptr
NO MATCH 29
NO MATCH 30
EXACT 31 load load
EXACT 32 add add
EXACT 33 inttoptr inttoptr
EXACT 34 load load
EXACT 35 sext sext
EXACT 36 store store
NO MATCH 37
NO MATCH 38
EXACT 39 store store
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
NO MATCH 45
NO MATCH 46
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 5 %var_2_46 = load i64, i64* %PC, align 8
- 6 %var_2_47 = add i64 %var_2_46, 3
- 7 store i64 %var_2_47, i64* %PC, align 8
- 8 %var_2_55 = load i64, i64* %RBP, align 8
- 9 %var_2_56 = add i64 %var_2_55, -8
- 10 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 11 %var_2_60 = load i32, i32* %var_2_59, align 4
- 12 %var_2_73 = icmp eq i32 %var_2_60, 2
- 13 %.v = select i1 %var_2_73, i64 10, i64 31
- 14 %var_2_82 = add i64 %.v, %var_2_47
- 15 \<badref\> = br i1 %var_2_73, label %block_4005e0, label %block_4005f5
- 16 %RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0
- 17 %var_2_83 = add i64 %var_2_82, 5
- 18 store i64 %var_2_83, i64* %PC, align 8
- 19 store i64 20, i64* %RAX, align 8
- 20 \<badref\> = br label %block_400602
- 21 %var_2_84 = phi i64 [ %.pre, %block_4005e0 ], [ %var_2_83, %block_4005f5 ]
- 22 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005e0 ], [ %var_2_55, %block_4005f5 ]
- 23 %.sink = phi i32 [ %.sink.pre, %block_4005e0 ], [ 20, %block_4005f5 ]
- 24 %.sink5 = phi i64 [ 18, %block_4005e0 ], [ 5, %block_4005f5 ]
- 25 %MEMORY.0 = phi %struct.Memory* [ %var_2_172, %block_4005e0 ], [ %2, %block_4005f5 ]
- 26 %.sink7 = add i64 %.sink7.in, -24
- 27 %var_2_85 = add i64 %var_2_84, 3
- 28 store i64 %var_2_85, i64* %PC, align 8
- 29 %var_2_86 = inttoptr i64 %.sink7 to i32*
- 30 store i32 %.sink, i32* %var_2_86, align 4
- 31 %var_2_87 = load i64, i64* %PC, align 8
- 32 %var_2_88 = add i64 %var_2_87, %.sink5
- 33 %var_2_96 = add i64 %var_2_88, 6
- 34 store i64 %var_2_96, i64* %PC, align 8
- 35 %var_2_98 = load i64, i64* %RBP, align 8
- 36 %var_2_99 = add i64 %var_2_98, -20
- 37 %var_2_102 = inttoptr i64 %var_2_99 to i32*
- 38 %var_2_103 = load i32, i32* %var_2_102, align 4
- 39 %var_2_104 = sext i32 %var_2_103 to i64
- 40 store i64 %var_2_104, i64* %RDI, align 8
- 41 %var_2_105 = add i64 %var_2_88, -162
- 42 %var_2_110 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %var_2_105, %struct.Memory* %MEMORY.0)
- 43 %var_2_118 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_110)
- 44 %var_2_119 = load i64, i64* %PC, align 8
- 45 %var_2_120 = load i64, i64* %RBP, align 8
- 46 %var_2_121 = add i64 %var_2_120, -28
- 47 %var_2_122 = load i32, i32* %EAX, align 4
- 48 %var_2_123 = add i64 %var_2_119, 5
- 49 store i64 %var_2_123, i64* %PC, align 8
- 50 %var_2_124 = inttoptr i64 %var_2_121 to i32*
- 51 store i32 %var_2_122, i32* %var_2_124, align 4
- 52 \<badref\> = ret %struct.Memory* %var_2_118
- 53 %var_2_164 = add i64 %var_2_82, 8
- 54 store i64 %var_2_164, i64* %PC, align 8
- 55 %var_2_172 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 56 %.sink.pre = load i32, i32* %EAX, align 4
- 57 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 58 %.pre = load i64, i64* %PC, align 8
- 59 \<badref\> = br label %block_400602
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1efc74158>, {0: {0}, 1: {7}, 2: {16, 10}, 3: {28}, 4: {1}, 5: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 6: set(), 7: {36, 39, 45, 15, 25, 30}, 8: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 9: {3}, 10: {24, 33, 4, 44}, 11: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 12: {6}, 13: set(), 14: {27}, 15: {8}, 16: {14}, 17: set(), 18: {36, 39, 45, 15, 25, 30}, 19: {36, 39, 45, 15, 25, 30}, 20: {17, 13}, 21: {18, 21, 22}, 22: {18, 21, 22}, 23: set(), 24: set(), 25: {18, 21, 22}, 26: {23}, 27: set(), 28: {36, 39, 45, 15, 25, 30}, 29: {24, 33, 4, 44}, 30: {36, 39, 45, 15, 25, 30}, 31: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 32: {27}, 33: {29}, 34: {36, 39, 45, 15, 25, 30}, 35: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 36: {32}, 37: {24, 33, 4, 44}, 38: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 39: {35}, 40: {36, 39, 45, 15, 25, 30}, 41: {37}, 42: {40, 9, 38}, 43: {40, 9, 38}, 44: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 45: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 46: {42}, 47: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 48: set(), 49: {36, 39, 45, 15, 25, 30}, 50: {24, 33, 4, 44}, 51: {36, 39, 45, 15, 25, 30}, 52: {46}, 53: set(), 54: {36, 39, 45, 15, 25, 30}, 55: {40, 9, 38}, 56: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 57: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 58: {2, 34, 5, 41, 11, 12, 43, 26, 31}, 59: {17, 13}})
Equivalent! frozenset({17, 13}) {59, 20}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1efc74158>, {0: set(), 1: {7}, 2: set(), 3: {28}, 4: {1}, 5: set(), 6: set(), 7: set(), 8: {2}, 9: {3}, 10: {4}, 11: {5}, 12: {6}, 13: set(), 14: set(), 15: {8}, 16: {14}, 17: set(), 18: set(), 19: {15}, 20: {13}, 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: {31}, 36: {32}, 37: {33}, 38: {34}, 39: {35}, 40: {36}, 41: set(), 42: set(), 43: set(), 44: set(), 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: set(), 54: set(), 55: set(), 56: set(), 57: set(), 58: set(), 59: {17}})
NO MATCH 0
EXACT 1 getelementptr getelementptr
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
NO MATCH 5
NO MATCH 6
NO MATCH 7
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 load load
EXACT 12 icmp icmp
NO MATCH 13
NO MATCH 14
EXACT 15 br br
EXACT 16 getelementptr getelementptr
NO MATCH 17
NO MATCH 18
EXACT 19 store store
EXACT 20 br br
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
EXACT 35 load load
EXACT 36 add add
EXACT 37 inttoptr inttoptr
EXACT 38 load load
EXACT 39 sext sext
EXACT 40 store store
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
NO MATCH 50
NO MATCH 51
NO MATCH 52
NO MATCH 53
NO MATCH 54
NO MATCH 55
NO MATCH 56
NO MATCH 57
NO MATCH 58
EXACT 59 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_121 = add i64 %var_2_120, -20', '%var_2_124 = inttoptr i64 %var_2_121 to i32*', '%var_2_125 = load i32, i32* %var_2_124, align 4', '%var_2_126 = sext i32 %var_2_125 to i64', 'store i64 %var_2_126, i64* %RDI.i20.pre-phi, align 8', 'store i64 ptrtoint (%G__0x4006c4_type* @G__0x4006c4 to i64), i64* %RDI.i20.pre-phi, align 8', '%RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0', 'store i64 20, i64* %RAX.i33, align 8', '%RDI.i20.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%var_2_120 = load i64, i64* %RBP.i, align 8'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_55 = load i64, i64* %RBP.i, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: br i1 %var_2_73, label %block_4005e0, label %block_.L_4005f5
Keep: 
Keep: block_4005e0:                                     ; preds = %entry
Keep: %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i36 = bitcast %union.anon* %var_2_83 to i32*
Keep: %var_2_98 = load i64, i64* %RBP.i, align 8
Keep: %var_2_100 = load i32, i32* %EAX.i36, align 4
Keep: br label %block_.L_400602
Keep: 
Keep: block_.L_4005f5:                                  ; preds = %entry
Found line to remove! %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0
Found line to remove! store i64 20, i64* %RAX.i33, align 8
Keep: %EAX.i30 = bitcast %union.anon* %var_2_83 to i32*
Keep: br label %block_.L_400602
Keep: 
Keep: block_.L_400602:                                  ; preds = %block_.L_4005f5, %block_4005e0
Keep: %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_4005f5 ], [ %var_2_98, %block_4005e0 ]
Keep: %.sink1 = phi i32 [ 20, %block_.L_4005f5 ], [ %var_2_100, %block_4005e0 ]
Keep: %.sink = phi i64 [ 5, %block_.L_4005f5 ], [ 18, %block_4005e0 ]
Keep: %EAX.i23.pre-phi = phi i32* [ %EAX.i30, %block_.L_4005f5 ], [ %EAX.i36, %block_4005e0 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005f5 ], [ %var_2_97, %block_4005e0 ]
Keep: %var_2_106.sink = add i64 %var_2_106.sink.in, -24
Keep: %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
Keep: store i32 %.sink1, i32* %var_2_108, align 4
Keep: %var_2_109 = load i64, i64* %var_2_3, align 8
Keep: %var_2_110 = add i64 %var_2_109, %.sink
Found line to remove! %RDI.i20.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %var_2_118 = add i64 %var_2_110, 6
Keep: store i64 %var_2_118, i64* %var_2_3, align 8
Found line to remove! %var_2_120 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_121 = add i64 %var_2_120, -20
Found line to remove! %var_2_124 = inttoptr i64 %var_2_121 to i32*
Found line to remove! %var_2_125 = load i32, i32* %var_2_124, align 4
Found line to remove! %var_2_126 = sext i32 %var_2_125 to i64
Found line to remove! store i64 %var_2_126, i64* %RDI.i20.pre-phi, align 8
Keep: %var_2_127 = add i64 %var_2_110, -162
Keep: %call2_40060c = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %var_2_127, %struct.Memory* %MEMORY.0)
Found line to remove! store i64 ptrtoint (%G__0x4006c4_type* @G__0x4006c4 to i64), i64* %RDI.i20.pre-phi, align 8
Keep: %var_2_139 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_40060c)
Keep: %var_2_142 = load i64, i64* %RBP.i, align 8
Keep: %var_2_143 = add i64 %var_2_142, -28Writing '/tmp/tmp4tfnimmq.dot'...
Writing '/tmp/tmp4tfnimmq.dot':Done

Reading LLVM: /tmp/tmpjtgi5awb-query.ll
Extracting function [main] from /tmp/tmpjtgi5awb-query.ll
Dot file generated!
Writing '/tmp/tmpl_2ih28i.dot'...
Writing '/tmp/tmpl_2ih28i.dot':Done

Reading LLVM: /tmp/tmp_e_v58wk-target.ll
Extracting function [main] from /tmp/tmp_e_v58wk-target.ll
Dot file generated!

Keep: %var_2_144 = load i32, i32* %EAX.i23.pre-phi, align 4
Keep: %var_2_146 = inttoptr i64 %var_2_143 to i32*
Keep: store i32 %var_2_144, i32* %var_2_146, align 4
Keep: ret %struct.Memory* %var_2_139
Missed: dict_keys(['%var_2_121 = add i64 %var_2_120, -20', '%var_2_124 = inttoptr i64 %var_2_121 to i32*', '%var_2_125 = load i32, i32* %var_2_124, align 4', '%var_2_126 = sext i32 %var_2_125 to i64', 'store i64 %var_2_126, i64* %RDI.i20.pre-phi, align 8', 'store i64 ptrtoint (%G__0x4006c4_type* @G__0x4006c4 to i64), i64* %RDI.i20.pre-phi, align 8', '%RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %var_2_83, i64 0, i32 0', 'store i64 20, i64* %RAX.i33, align 8', '%RDI.i20.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%var_2_120 = load i64, i64* %RBP.i, align 8'])
TO REMOVE: dict_keys(['%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%var_2_99 = add i64 %var_2_98, -20', '%var_2_102 = inttoptr i64 %var_2_99 to i32*', '%var_2_103 = load i32, i32* %var_2_102, align 4', '%var_2_104 = sext i32 %var_2_103 to i64', 'store i64 %var_2_104, i64* %RDI, align 8', '%var_2_98 = load i64, i64* %RBP, align 8', '%RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0', 'store i64 20, i64* %RAX, align 8'])
Keep: block_4005c0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_47 = add i64 %var_2_46, 3
Keep: store i64 %var_2_47, i64* %PC, align 8
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_82 = add i64 %.v, %var_2_47
Keep: br i1 %var_2_73, label %block_4005e0, label %block_4005f5
Keep: 
Keep: block_4005f5:                                     ; preds = %block_4005c0
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0
Keep: %var_2_83 = add i64 %var_2_82, 5
Keep: store i64 %var_2_83, i64* %PC, align 8
Found line to remove! store i64 20, i64* %RAX, align 8
Keep: br label %block_400602
Keep: 
Keep: block_400602:                                     ; preds = %block_4005e0, %block_4005f5
Keep: %var_2_84 = phi i64 [ %.pre, %block_4005e0 ], [ %var_2_83, %block_4005f5 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005e0 ], [ %var_2_55, %block_4005f5 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_4005e0 ], [ 20, %block_4005f5 ]
Keep: %.sink5 = phi i64 [ 18, %block_4005e0 ], [ 5, %block_4005f5 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %var_2_172, %block_4005e0 ], [ %2, %block_4005f5 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %var_2_85 = add i64 %var_2_84, 3
Keep: store i64 %var_2_85, i64* %PC, align 8
Keep: %var_2_86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %var_2_86, align 4
Keep: %var_2_87 = load i64, i64* %PC, align 8
Keep: %var_2_88 = add i64 %var_2_87, %.sink5
Keep: %var_2_96 = add i64 %var_2_88, 6
Keep: store i64 %var_2_96, i64* %PC, align 8
Found line to remove! %var_2_98 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_99 = add i64 %var_2_98, -20
Found line to remove! %var_2_102 = inttoptr i64 %var_2_99 to i32*
Found line to remove! %var_2_103 = load i32, i32* %var_2_102, align 4
Found line to remove! %var_2_104 = sext i32 %var_2_103 to i64
Found line to remove! store i64 %var_2_104, i64* %RDI, align 8
Keep: %var_2_105 = add i64 %var_2_88, -162
Keep: %var_2_110 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %var_2_105, %struct.Memory* %MEMORY.0)
Keep: %var_2_118 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_110)
Keep: %var_2_119 = load i64, i64* %PC, align 8
Keep: %var_2_120 = load i64, i64* %RBP, align 8
Keep: %var_2_121 = add i64 %var_2_120, -28
Keep: %var_2_122 = load i32, i32* %EAX, align 4
Keep: %var_2_123 = add i64 %var_2_119, 5
Keep: store i64 %var_2_123, i64* %PC, align 8
Keep: %var_2_124 = inttoptr i64 %var_2_121 to i32*
Keep: store i32 %var_2_122, i32* %var_2_124, align 4
Keep: ret %struct.Memory* %var_2_118
Keep: 
Keep: block_4005e0:                                     ; preds = %block_4005c0
Keep: %var_2_164 = add i64 %var_2_82, 8
Keep: store i64 %var_2_164, i64* %PC, align 8
Keep: %var_2_172 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400602
Missed: dict_keys(['%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%var_2_99 = add i64 %var_2_98, -20', '%var_2_102 = inttoptr i64 %var_2_99 to i32*', '%var_2_103 = load i32, i32* %var_2_102, align 4', '%var_2_104 = sext i32 %var_2_103 to i64', 'store i64 %var_2_104, i64* %RDI, align 8', '%var_2_98 = load i64, i64* %RBP, align 8', '%RAX = getelementptr inbounds %union.anon, %union.anon* %var_2_3, i64 0, i32 0', 'store i64 20, i64* %RAX, align 8'])
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_55 = load i64, i64* %RBP.i, align 8
- 3 %var_2_56 = add i64 %var_2_55, -8
- 4 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 5 %var_2_60 = load i32, i32* %var_2_59, align 4
- 6 %var_2_73 = icmp eq i32 %var_2_60, 2
- 7 %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 8 \<badref\> = br i1 %var_2_73, label %block_4005e0, label %block_.L_4005f5
- 9 %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
- 10 %EAX.i36 = bitcast %union.anon* %var_2_83 to i32*
- 11 %var_2_98 = load i64, i64* %RBP.i, align 8
- 12 %var_2_100 = load i32, i32* %EAX.i36, align 4
- 13 \<badref\> = br label %block_.L_400602
- 14 %EAX.i30 = bitcast %union.anon* %var_2_83 to i32*
- 15 \<badref\> = br label %block_.L_400602
- 16 %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_4005f5 ], [ %var_2_98, %block_4005e0 ]
- 17 %.sink1 = phi i32 [ 20, %block_.L_4005f5 ], [ %var_2_100, %block_4005e0 ]
- 18 %.sink = phi i64 [ 5, %block_.L_4005f5 ], [ 18, %block_4005e0 ]
- 19 %EAX.i23.pre-phi = phi i32* [ %EAX.i30, %block_.L_4005f5 ], [ %EAX.i36, %block_4005e0 ]
- 20 %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005f5 ], [ %var_2_97, %block_4005e0 ]
- 21 %var_2_106.sink = add i64 %var_2_106.sink.in, -24
- 22 %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
- 23 store i32 %.sink1, i32* %var_2_108, align 4
- 24 %var_2_109 = load i64, i64* %var_2_3, align 8
- 25 %var_2_110 = add i64 %var_2_109, %.sink
- 26 %var_2_118 = add i64 %var_2_110, 6
- 27 store i64 %var_2_118, i64* %var_2_3, align 8
- 28 %var_2_127 = add i64 %var_2_110, -162
- 29 %call2_40060c = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %var_2_127, %struct.Memory* %MEMORY.0)
- 30 %var_2_139 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_40060c)
- 31 %var_2_142 = load i64, i64* %RBP.i, align 8
- 32 %var_2_143 = add i64 %var_2_142, -28
- 33 %var_2_144 = load i32, i32* %EAX.i23.pre-phi, align 4
- 34 %var_2_146 = inttoptr i64 %var_2_143 to i32*
- 35 store i32 %var_2_144, i32* %var_2_146, align 4
- 36 \<badref\> = ret %struct.Memory* %var_2_139
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1efb7bd90>, {0: {0}, 1: {3}, 2: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 3: {8}, 4: {9, 26, 41}, 5: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 6: {11}, 7: {1}, 8: {14}, 9: {33, 34, 46}, 10: {2}, 11: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 12: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 13: {17, 50}, 14: {2}, 15: {17, 50}, 16: {18, 19, 22}, 17: set(), 18: set(), 19: {18, 19, 22}, 20: {18, 19, 22}, 21: {23}, 22: {9, 26, 41}, 23: {6, 40, 42, 45, 16, 25, 27, 31}, 24: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 25: {29, 13}, 26: {30}, 27: {6, 40, 42, 45, 16, 25, 27, 31}, 28: {32}, 29: {33, 34, 46}, 30: {33, 34, 46}, 31: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 32: {37}, 33: {35, 4, 36, 38, 7, 10, 47, 48, 49, 28}, 34: {9, 26, 41}, 35: {6, 40, 42, 45, 16, 25, 27, 31}, 36: {43}})
Equivalent! frozenset({17, 50}) {13, 15}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1efb7bd90>, {0: set(), 1: {3}, 2: {7}, 3: {8}, 4: {9}, 5: {10}, 6: {11}, 7: set(), 8: {14}, 9: set(), 10: set(), 11: set(), 12: set(), 13: {17}, 14: set(), 15: {50}, 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set()})
NO MATCH 0
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
EXACT 6 icmp icmp
NO MATCH 7
EXACT 8 br br
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
EXACT 13 br br
NO MATCH 14
EXACT 15 br br
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 4 %var_2_46 = load i64, i64* %PC, align 8
- 5 %var_2_47 = add i64 %var_2_46, 3
- 6 store i64 %var_2_47, i64* %PC, align 8
- 7 %var_2_55 = load i64, i64* %RBP, align 8
- 8 %var_2_56 = add i64 %var_2_55, -8
- 9 %var_2_59 = inttoptr i64 %var_2_56 to i32*
- 10 %var_2_60 = load i32, i32* %var_2_59, align 4
- 11 %var_2_73 = icmp eq i32 %var_2_60, 2
- 12 %.v = select i1 %var_2_73, i64 10, i64 31
- 13 %var_2_82 = add i64 %.v, %var_2_47
- 14 \<badref\> = br i1 %var_2_73, label %block_4005e0, label %block_4005f5
- 15 %var_2_83 = add i64 %var_2_82, 5
- 16 store i64 %var_2_83, i64* %PC, align 8
- 17 \<badref\> = br label %block_400602
- 18 %var_2_84 = phi i64 [ %.pre, %block_4005e0 ], [ %var_2_83, %block_4005f5 ]
- 19 %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005e0 ], [ %var_2_55, %block_4005f5 ]
- 20 %.sink = phi i32 [ %.sink.pre, %block_4005e0 ], [ 20, %block_4005f5 ]
- 21 %.sink5 = phi i64 [ 18, %block_4005e0 ], [ 5, %block_4005f5 ]
- 22 %MEMORY.0 = phi %struct.Memory* [ %var_2_172, %block_4005e0 ], [ %2, %block_4005f5 ]
- 23 %.sink7 = add i64 %.sink7.in, -24
- 24 %var_2_85 = add i64 %var_2_84, 3
- 25 store i64 %var_2_85, i64* %PC, align 8
- 26 %var_2_86 = inttoptr i64 %.sink7 to i32*
- 27 store i32 %.sink, i32* %var_2_86, align 4
- 28 %var_2_87 = load i64, i64* %PC, align 8
- 29 %var_2_88 = add i64 %var_2_87, %.sink5
- 30 %var_2_96 = add i64 %var_2_88, 6
- 31 store i64 %var_2_96, i64* %PC, align 8
- 32 %var_2_105 = add i64 %var_2_88, -162
- 33 %var_2_110 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %var_2_105, %struct.Memory* %MEMORY.0)
- 34 %var_2_118 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_110)
- 35 %var_2_119 = load i64, i64* %PC, align 8
- 36 %var_2_120 = load i64, i64* %RBP, align 8
- 37 %var_2_121 = add i64 %var_2_120, -28
- 38 %var_2_122 = load i32, i32* %EAX, align 4
- 39 %var_2_123 = add i64 %var_2_119, 5
- 40 store i64 %var_2_123, i64* %PC, align 8
- 41 %var_2_124 = inttoptr i64 %var_2_121 to i32*
- 42 store i32 %var_2_122, i32* %var_2_124, align 4
- 43 \<badref\> = ret %struct.Memory* %var_2_118
- 44 %var_2_164 = add i64 %var_2_82, 8
- 45 store i64 %var_2_164, i64* %PC, align 8
- 46 %var_2_172 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
- 47 %.sink.pre = load i32, i32* %EAX, align 4
- 48 %.sink7.in.pre = load i64, i64* %RBP, align 8
- 49 %.pre = load i64, i64* %PC, align 8
- 50 \<badref\> = br label %block_400602
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f08ce598>, {0: {0}, 1: {7}, 2: {10, 14}, 3: {1}, 4: {33, 2, 5, 11, 12, 24, 31}, 5: set(), 6: {35, 27, 23}, 7: {33, 2, 5, 11, 12, 24, 31}, 8: {3}, 9: {34, 4, 22}, 10: {33, 2, 5, 11, 12, 24, 31}, 11: {6}, 12: set(), 13: {25}, 14: {8}, 15: set(), 16: {35, 27, 23}, 17: {13, 15}, 18: {16, 19, 20}, 19: {16, 19, 20}, 20: set(), 21: set(), 22: {16, 19, 20}, 23: {21}, 24: set(), 25: {35, 27, 23}, 26: {34, 4, 22}, 27: {35, 27, 23}, 28: {33, 2, 5, 11, 12, 24, 31}, 29: {25}, 30: {26}, 31: {35, 27, 23}, 32: {28}, 33: {9, 29, 30}, 34: {9, 29, 30}, 35: {33, 2, 5, 11, 12, 24, 31}, 36: {33, 2, 5, 11, 12, 24, 31}, 37: {32}, 38: {33, 2, 5, 11, 12, 24, 31}, 39: set(), 40: {35, 27, 23}, 41: {34, 4, 22}, 42: {35, 27, 23}, 43: {36}, 44: set(), 45: {35, 27, 23}, 46: {9, 29, 30}, 47: {33, 2, 5, 11, 12, 24, 31}, 48: {33, 2, 5, 11, 12, 24, 31}, 49: {33, 2, 5, 11, 12, 24, 31}, 50: {13, 15}})
Equivalent! frozenset({13, 15}) {17, 50}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fc1f08ce598>, {0: set(), 1: set(), 2: set(), 3: {1}, 4: set(), 5: set(), 6: set(), 7: {2}, 8: {3}, 9: {4}, 10: {5}, 11: {6}, 12: set(), 13: set(), 14: {8}, 15: set(), 16: set(), 17: {13}, 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: set(), 30: set(), 31: set(), 32: set(), 33: set(), 34: set(), 35: set(), 36: set(), 37: set(), 38: set(), 39: set(), 40: set(), 41: set(), 42: set(), 43: set(), 44: set(), 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: {15}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
EXACT 3 getelementptr getelementptr
NO MATCH 4
NO MATCH 5
NO MATCH 6
EXACT 7 load load
EXACT 8 add add
EXACT 9 inttoptr inttoptr
EXACT 10 load load
EXACT 11 icmp icmp
NO MATCH 12
NO MATCH 13
EXACT 14 br br
NO MATCH 15
NO MATCH 16
EXACT 17 br br
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
NO MATCH 29
NO MATCH 30
NO MATCH 31
NO MATCH 32
NO MATCH 33
NO MATCH 34
NO MATCH 35
NO MATCH 36
NO MATCH 37
NO MATCH 38
NO MATCH 39
NO MATCH 40
NO MATCH 41
NO MATCH 42
NO MATCH 43
NO MATCH 44
NO MATCH 45
NO MATCH 46
NO MATCH 47
NO MATCH 48
NO MATCH 49
EXACT 50 br br
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_55 = load i64, i64* %RBP.i, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %var_2_83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: br i1 %var_2_73, label %block_4005e0, label %block_.L_4005f5
Keep: 
Keep: block_4005e0:                                     ; preds = %entry
Keep: %var_2_97 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %2)
Keep: %EAX.i36 = bitcast %union.anon* %var_2_83 to i32*
Keep: %var_2_98 = load i64, i64* %RBP.i, align 8
Keep: %var_2_100 = load i32, i32* %EAX.i36, align 4
Keep: br label %block_.L_400602
Keep: 
Keep: block_.L_4005f5:                                  ; preds = %entry
Keep: %EAX.i30 = bitcast %union.anon* %var_2_83 to i32*
Keep: br label %block_.L_400602
Keep: 
Keep: block_.L_400602:                                  ; preds = %block_.L_4005f5, %block_4005e0
Keep: %var_2_106.sink.in = phi i64 [ %var_2_55, %block_.L_4005f5 ], [ %var_2_98, %block_4005e0 ]
Keep: %.sink1 = phi i32 [ 20, %block_.L_4005f5 ], [ %var_2_100, %block_4005e0 ]
Keep: %.sink = phi i64 [ 5, %block_.L_4005f5 ], [ 18, %block_4005e0 ]
Keep: %EAX.i23.pre-phi = phi i32* [ %EAX.i30, %block_.L_4005f5 ], [ %EAX.i36, %block_4005e0 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_.L_4005f5 ], [ %var_2_97, %block_4005e0 ]
Keep: %var_2_106.sink = add i64 %var_2_106.sink.in, -24
Keep: %var_2_108 = inttoptr i64 %var_2_106.sink to i32*
Keep: store i32 %.sink1, i32* %var_2_108, align 4
Keep: %var_2_109 = load i64, i64* %var_2_3, align 8
Keep: %var_2_110 = add i64 %var_2_109, %.sink
Keep: %var_2_118 = add i64 %var_2_110, 6
Keep: store i64 %var_2_118, i64* %var_2_3, align 8
Keep: %var_2_127 = add i64 %var_2_110, -162
Keep: %call2_40060c = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %var_2_127, %struct.Memory* %MEMORY.0)
Keep: %var_2_139 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_40060c)
Keep: %var_2_142 = load i64, i64* %RBP.i, align 8
Keep: %var_2_143 = add i64 %var_2_142, -28
Keep: %var_2_144 = load i32, i32* %EAX.i23.pre-phi, align 4
Keep: %var_2_146 = inttoptr i64 %var_2_143 to i32*
Keep: store i32 %var_2_144, i32* %var_2_146, align 4
Keep: ret %struct.Memory* %var_2_139
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_4005c0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_46 = load i64, i64* %PC, align 8
Keep: %var_2_47 = add i64 %var_2_46, 3
Keep: store i64 %var_2_47, i64* %PC, align 8
Keep: %var_2_55 = load i64, i64* %RBP, align 8
Keep: %var_2_56 = add i64 %var_2_55, -8
Keep: %var_2_59 = inttoptr i64 %var_2_56 to i32*
Keep: %var_2_60 = load i32, i32* %var_2_59, align 4
Keep: %var_2_73 = icmp eq i32 %var_2_60, 2
Keep: %.v = select i1 %var_2_73, i64 10, i64 31
Keep: %var_2_82 = add i64 %.v, %var_2_47
Keep: br i1 %var_2_73, label %block_4005e0, label %block_4005f5
Keep: 
Keep: block_4005f5:                                     ; preds = %block_4005c0
Keep: %var_2_83 = add i64 %var_2_82, 5
Keep: store i64 %var_2_83, i64* %PC, align 8
Keep: br label %block_400602
Keep: 
Keep: block_400602:                                     ; preds = %block_4005e0, %block_4005f5
Keep: %var_2_84 = phi i64 [ %.pre, %block_4005e0 ], [ %var_2_83, %block_4005f5 ]
Keep: %.sink7.in = phi i64 [ %.sink7.in.pre, %block_4005e0 ], [ %var_2_55, %block_4005f5 ]
Keep: %.sink = phi i32 [ %.sink.pre, %block_4005e0 ], [ 20, %block_4005f5 ]
Keep: %.sink5 = phi i64 [ 18, %block_4005e0 ], [ 5, %block_4005f5 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %var_2_172, %block_4005e0 ], [ %2, %block_4005f5 ]
Keep: %.sink7 = add i64 %.sink7.in, -24
Keep: %var_2_85 = add i64 %var_2_84, 3
Keep: store i64 %var_2_85, i64* %PC, align 8
Keep: %var_2_86 = inttoptr i64 %.sink7 to i32*
Keep: store i32 %.sink, i32* %var_2_86, align 4
Keep: %var_2_87 = load i64, i64* %PC, align 8
Keep: %var_2_88 = add i64 %var_2_87, %.sink5
Keep: %var_2_96 = add i64 %var_2_88, 6
Keep: store i64 %var_2_96, i64* %PC, align 8
Keep: %var_2_105 = add i64 %var_2_88, -162
Keep: %var_2_110 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %var_2_105, %struct.Memory* %MEMORY.0)
Keep: %var_2_118 = tail call fastcc %struct.Memory* @ext_601058_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_110)
Keep: %var_2_119 = load i64, i64* %PC, align 8
Keep: %var_2_120 = load i64, i64* %RBP, align 8
Keep: %var_2_121 = add i64 %var_2_120, -28
Keep: %var_2_122 = load i32, i32* %EAX, align 4
Keep: %var_2_123 = add i64 %var_2_119, 5
Keep: store i64 %var_2_123, i64* %PC, align 8
Keep: %var_2_124 = inttoptr i64 %var_2_121 to i32*
Keep: store i32 %var_2_122, i32* %var_2_124, align 4
Keep: ret %struct.Memory* %var_2_118
Keep: 
Keep: block_4005e0:                                     ; preds = %block_4005c0
Keep: %var_2_164 = add i64 %var_2_82, 8
Keep: store i64 %var_2_164, i64* %PC, align 8
Keep: %var_2_172 = tail call fastcc %struct.Memory* @ext_601068_atoi(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %.sink.pre = load i32, i32* %EAX, align 4
Keep: %.sink7.in.pre = load i64, i64* %RBP, align 8
Keep: %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400602
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_32/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_32/binary/test.mcsema.calls_renamed.ll main
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_32/main/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_32/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
