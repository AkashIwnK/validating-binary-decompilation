Writing '/tmp/tmplf3neqpf.dot'...
Writing '/tmp/tmplf3neqpf.dot':Done

Reading LLVM: /tmp/tmp1j3v4b08-query.ll
Extracting function [fib] from /tmp/tmp1j3v4b08-query.ll
Dot file generated!
Writing '/tmp/tmpnmj4xc07.dot'...
Writing '/tmp/tmpnmj4xc07.dot':Done

Reading LLVM: /tmp/tmphvojt6fj-target.ll
Extracting function [fib] from /tmp/tmphvojt6fj-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 %39 = add i64 %7, -24
- 49 %40 = load i64, i64* %RDI.i40, align 8
- 50 %41 = add i64 %10, 11
- 51 store i64 %41, i64* %3, align 8
- 52 %42 = inttoptr i64 %39 to i64*
- 53 store i64 %40, i64* %42, align 8
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -16
- 56 %45 = load i64, i64* %3, align 8
- 57 %46 = add i64 %45, 5
- 58 store i64 %46, i64* %3, align 8
- 59 %47 = inttoptr i64 %44 to i64*
- 60 %48 = load i64, i64* %47, align 8
- 61 %49 = add i64 %48, -2
- 62 %50 = icmp ult i64 %48, 2
- 63 %51 = zext i1 %50 to i8
- 64 store i8 %51, i8* %14, align 1
- 65 %52 = trunc i64 %49 to i32
- 66 %53 = and i32 %52, 255
- 67 %54 = tail call i32 @llvm.ctpop.i32(i32 %53)
- 68 %55 = trunc i32 %54 to i8
- 69 %56 = and i8 %55, 1
- 70 %57 = xor i8 %56, 1
- 71 store i8 %57, i8* %21, align 1
- 72 %58 = xor i64 %49, %48
- 73 %59 = lshr i64 %58, 4
- 74 %60 = trunc i64 %59 to i8
- 75 %61 = and i8 %60, 1
- 76 store i8 %61, i8* %26, align 1
- 77 %62 = icmp eq i64 %49, 0
- 78 %63 = zext i1 %62 to i8
- 79 store i8 %63, i8* %29, align 1
- 80 %64 = lshr i64 %49, 63
- 81 %65 = trunc i64 %64 to i8
- 82 store i8 %65, i8* %32, align 1
- 83 %66 = lshr i64 %48, 63
- 84 %67 = xor i64 %64, %66
- 85 %68 = add nuw nsw i64 %67, %66
- 86 %69 = icmp eq i64 %68, 2
- 87 %70 = zext i1 %69 to i8
- 88 store i8 %70, i8* %38, align 1
- 89 %.v = select i1 %50, i64 11, i64 24
- 90 %71 = add i64 %45, %.v
- 91 store i64 %71, i64* %3, align 8
- 92 \<badref\> = br i1 %50, label %block_400577, label %block_.L_400584
- 93 %72 = add i64 %43, -8
- 94 %73 = add i64 %71, 8
- 95 store i64 %73, i64* %3, align 8
- 96 %74 = inttoptr i64 %72 to i64*
- 97 store i64 1, i64* %74, align 8
- 98 %75 = load i64, i64* %3, align 8
- 99 %76 = add i64 %75, 49
- 100 store i64 %76, i64* %3, align 8
- 101 %.pre1 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 102 \<badref\> = br label %block_.L_4005b0
- 103 %RAX.i31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 104 %77 = add i64 %71, 4
- 105 store i64 %77, i64* %3, align 8
- 106 %78 = load i64, i64* %47, align 8
- 107 %79 = add i64 %78, -2
- 108 store i64 %79, i64* %RAX.i31, align 8
- 109 %80 = icmp ult i64 %78, 2
- 110 %81 = zext i1 %80 to i8
- 111 store i8 %81, i8* %14, align 1
- 112 %82 = trunc i64 %79 to i32
- 113 %83 = and i32 %82, 255
- 114 %84 = tail call i32 @llvm.ctpop.i32(i32 %83)
- 115 %85 = trunc i32 %84 to i8
- 116 %86 = and i8 %85, 1
- 117 %87 = xor i8 %86, 1
- 118 store i8 %87, i8* %21, align 1
- 119 %88 = xor i64 %79, %78
- 120 %89 = lshr i64 %88, 4
- 121 %90 = trunc i64 %89 to i8
- 122 %91 = and i8 %90, 1
- 123 store i8 %91, i8* %26, align 1
- 124 %92 = icmp eq i64 %79, 0
- 125 %93 = zext i1 %92 to i8
- 126 store i8 %93, i8* %29, align 1
- 127 %94 = lshr i64 %79, 63
- 128 %95 = trunc i64 %94 to i8
- 129 store i8 %95, i8* %32, align 1
- 130 %96 = lshr i64 %78, 63
- 131 %97 = xor i64 %94, %96
- 132 %98 = add nuw nsw i64 %97, %96
- 133 %99 = icmp eq i64 %98, 2
- 134 %100 = zext i1 %99 to i8
- 135 store i8 %100, i8* %38, align 1
- 136 store i64 %79, i64* %RDI.i40, align 8
- 137 %101 = add i64 %71, -36
- 138 %102 = add i64 %71, 16
- 139 %103 = load i64, i64* %6, align 8
- 140 %104 = add i64 %103, -8
- 141 %105 = inttoptr i64 %104 to i64*
- 142 store i64 %102, i64* %105, align 8
- 143 store i64 %104, i64* %6, align 8
- 144 store i64 %101, i64* %3, align 8
- 145 %call2_40058f = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)
- 146 %106 = load i64, i64* %RBP.i, align 8
- 147 %107 = add i64 %106, -16
- 148 %108 = load i64, i64* %3, align 8
- 149 %109 = add i64 %108, 4
- 150 store i64 %109, i64* %3, align 8
- 151 %110 = inttoptr i64 %107 to i64*
- 152 %111 = load i64, i64* %110, align 8
- 153 %112 = add i64 %111, -1
- 154 store i64 %112, i64* %RDI.i40, align 8
- 155 %113 = icmp eq i64 %111, 0
- 156 %114 = zext i1 %113 to i8
- 157 store i8 %114, i8* %14, align 1
- 158 %115 = trunc i64 %112 to i32
- 159 %116 = and i32 %115, 255
- 160 %117 = tail call i32 @llvm.ctpop.i32(i32 %116)
- 161 %118 = trunc i32 %117 to i8
- 162 %119 = and i8 %118, 1
- 163 %120 = xor i8 %119, 1
- 164 store i8 %120, i8* %21, align 1
- 165 %121 = xor i64 %112, %111
- 166 %122 = lshr i64 %121, 4
- 167 %123 = trunc i64 %122 to i8
- 168 %124 = and i8 %123, 1
- 169 store i8 %124, i8* %26, align 1
- 170 %125 = icmp eq i64 %112, 0
- 171 %126 = zext i1 %125 to i8
- 172 store i8 %126, i8* %29, align 1
- 173 %127 = lshr i64 %112, 63
- 174 %128 = trunc i64 %127 to i8
- 175 store i8 %128, i8* %32, align 1
- 176 %129 = lshr i64 %111, 63
- 177 %130 = xor i64 %127, %129
- 178 %131 = add nuw nsw i64 %130, %129
- 179 %132 = icmp eq i64 %131, 2
- 180 %133 = zext i1 %132 to i8
- 181 store i8 %133, i8* %38, align 1
- 182 %134 = add i64 %106, -24
- 183 %135 = load i64, i64* %RAX.i31, align 8
- 184 %136 = add i64 %108, 12
- 185 store i64 %136, i64* %3, align 8
- 186 %137 = inttoptr i64 %134 to i64*
- 187 store i64 %135, i64* %137, align 8
- 188 %138 = load i64, i64* %3, align 8
- 189 %139 = add i64 %138, -64
- 190 %140 = add i64 %138, 5
- 191 %141 = load i64, i64* %6, align 8
- 192 %142 = add i64 %141, -8
- 193 %143 = inttoptr i64 %142 to i64*
- 194 store i64 %140, i64* %143, align 8
- 195 store i64 %142, i64* %6, align 8
- 196 store i64 %139, i64* %3, align 8
- 197 %call2_4005a0 = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %139, %struct.Memory* %call2_40058f)
- 198 %144 = load i64, i64* %RBP.i, align 8
- 199 %145 = add i64 %144, -24
- 200 %146 = load i64, i64* %3, align 8
- 201 %147 = add i64 %146, 4
- 202 store i64 %147, i64* %3, align 8
- 203 %148 = inttoptr i64 %145 to i64*
- 204 %149 = load i64, i64* %148, align 8
- 205 %150 = load i64, i64* %RAX.i31, align 8
- 206 %151 = add i64 %150, %149
- 207 store i64 %151, i64* %RDI.i40, align 8
- 208 %152 = icmp ult i64 %151, %149
- 209 %153 = icmp ult i64 %151, %150
- 210 %154 = or i1 %152, %153
- 211 %155 = zext i1 %154 to i8
- 212 store i8 %155, i8* %14, align 1
- 213 %156 = trunc i64 %151 to i32
- 214 %157 = and i32 %156, 255
- 215 %158 = tail call i32 @llvm.ctpop.i32(i32 %157)
- 216 %159 = trunc i32 %158 to i8
- 217 %160 = and i8 %159, 1
- 218 %161 = xor i8 %160, 1
- 219 store i8 %161, i8* %21, align 1
- 220 %162 = xor i64 %150, %149
- 221 %163 = xor i64 %162, %151
- 222 %164 = lshr i64 %163, 4
- 223 %165 = trunc i64 %164 to i8
- 224 %166 = and i8 %165, 1
- 225 store i8 %166, i8* %26, align 1
- 226 %167 = icmp eq i64 %151, 0
- 227 %168 = zext i1 %167 to i8
- 228 store i8 %168, i8* %29, align 1
- 229 %169 = lshr i64 %151, 63
- 230 %170 = trunc i64 %169 to i8
- 231 store i8 %170, i8* %32, align 1
- 232 %171 = lshr i64 %149, 63
- 233 %172 = lshr i64 %150, 63
- 234 %173 = xor i64 %169, %171
- 235 %174 = xor i64 %169, %172
- 236 %175 = add nuw nsw i64 %173, %174
- 237 %176 = icmp eq i64 %175, 2
- 238 %177 = zext i1 %176 to i8
- 239 store i8 %177, i8* %38, align 1
- 240 %178 = add i64 %144, -8
- 241 %179 = add i64 %146, 11
- 242 store i64 %179, i64* %3, align 8
- 243 %180 = inttoptr i64 %178 to i64*
- 244 store i64 %151, i64* %180, align 8
- 245 %.pre = load i64, i64* %3, align 8
- 246 \<badref\> = br label %block_.L_4005b0
- 247 %RAX.i.pre-phi = phi i64* [ %RAX.i31, %block_.L_400584 ], [ %.pre1, %block_400577 ]
- 248 %181 = phi i64 [ %.pre, %block_.L_400584 ], [ %76, %block_400577 ]
- 249 %MEMORY.0 = phi %struct.Memory* [ %call2_4005a0, %block_.L_400584 ], [ %2, %block_400577 ]
- 250 %182 = load i64, i64* %RBP.i, align 8
- 251 %183 = add i64 %182, -8
- 252 %184 = add i64 %181, 4
- 253 store i64 %184, i64* %3, align 8
- 254 %185 = inttoptr i64 %183 to i64*
- 255 %186 = load i64, i64* %185, align 8
- 256 store i64 %186, i64* %RAX.i.pre-phi, align 8
- 257 %187 = load i64, i64* %6, align 8
- 258 %188 = add i64 %187, 32
- 259 store i64 %188, i64* %6, align 8
- 260 %189 = icmp ugt i64 %187, -33
- 261 %190 = zext i1 %189 to i8
- 262 store i8 %190, i8* %14, align 1
- 263 %191 = trunc i64 %188 to i32
- 264 %192 = and i32 %191, 255
- 265 %193 = tail call i32 @llvm.ctpop.i32(i32 %192)
- 266 %194 = trunc i32 %193 to i8
- 267 %195 = and i8 %194, 1
- 268 %196 = xor i8 %195, 1
- 269 store i8 %196, i8* %21, align 1
- 270 %197 = xor i64 %188, %187
- 271 %198 = lshr i64 %197, 4
- 272 %199 = trunc i64 %198 to i8
- 273 %200 = and i8 %199, 1
- 274 store i8 %200, i8* %26, align 1
- 275 %201 = icmp eq i64 %188, 0
- 276 %202 = zext i1 %201 to i8
- 277 store i8 %202, i8* %29, align 1
- 278 %203 = lshr i64 %188, 63
- 279 %204 = trunc i64 %203 to i8
- 280 store i8 %204, i8* %32, align 1
- 281 %205 = lshr i64 %187, 63
- 282 %206 = xor i64 %203, %205
- 283 %207 = add nuw nsw i64 %206, %203
- 284 %208 = icmp eq i64 %207, 2
- 285 %209 = zext i1 %208 to i8
- 286 store i8 %209, i8* %38, align 1
- 287 %210 = add i64 %181, 9
- 288 store i64 %210, i64* %3, align 8
- 289 %211 = add i64 %187, 40
- 290 %212 = inttoptr i64 %188 to i64*
- 291 %213 = load i64, i64* %212, align 8
- 292 store i64 %213, i64* %RBP.i, align 8
- 293 store i64 %211, i64* %6, align 8
- 294 %214 = add i64 %181, 10
- 295 store i64 %214, i64* %3, align 8
- 296 %215 = inttoptr i64 %211 to i64*
- 297 %216 = load i64, i64* %215, align 8
- 298 store i64 %216, i64* %3, align 8
- 299 %217 = add i64 %187, 48
- 300 store i64 %217, i64* %6, align 8
- 301 ret %struct.Memory* %MEMORY.0
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6885d5378>, {0: {0}, 1: {4}, 2: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 3: {6}, 4: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 5: {3}, 6: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 7: {9, 139, 239, 249, 94, 191}, 8: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 9: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 10: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 11: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 12: {14}, 13: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 14: {16}, 15: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 16: {18}, 17: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 18: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 19: {67, 262, 112, 213, 21, 158}, 20: {68, 196, 263, 144, 113, 22, 214, 159}, 21: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 22: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 23: {162, 217, 71, 266, 116, 25}, 24: {26}, 25: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 26: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 27: {165, 74, 269, 29, 119, 221}, 28: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 29: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 30: {32}, 31: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 32: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 33: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 34: {36}, 35: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 36: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 37: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 38: {40}, 39: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 40: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 41: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 42: {131, 235, 44, 205, 177, 86, 281, 91}, 43: {132, 108, 45, 236, 178, 87, 282, 63}, 44: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 45: {47}, 46: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 47: {2}, 48: {49, 181, 198}, 49: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 50: {240, 51}, 51: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 52: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 53: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 54: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 55: {56, 146}, 56: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 57: {58, 189}, 58: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 59: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 60: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 61: {106, 62}, 62: {132, 108, 45, 236, 178, 87, 282, 63}, 63: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 64: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 65: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 66: {67, 262, 112, 213, 21, 158}, 67: {68, 196, 263, 144, 113, 22, 214, 159}, 68: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 69: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 70: {162, 217, 71, 266, 116, 25}, 71: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 72: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 73: {165, 74, 269, 29, 119, 221}, 74: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 75: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 76: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 77: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 78: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 79: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 80: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 81: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 82: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 83: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 84: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 85: {131, 235, 44, 205, 177, 86, 281, 91}, 86: {132, 108, 45, 236, 178, 87, 282, 63}, 87: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 88: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 89: {90}, 90: {131, 235, 44, 205, 177, 86, 281, 91}, 91: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 92: {93}, 93: {9, 139, 239, 249, 94, 191}, 94: {95}, 95: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 96: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 97: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 98: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 99: {100}, 100: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 101: {1}, 102: {245, 102}, 103: {1}, 104: {200, 250, 148, 103}, 105: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 106: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 107: {106, 62}, 108: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 109: {132, 108, 45, 236, 178, 87, 282, 63}, 110: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 111: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 112: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 113: {67, 262, 112, 213, 21, 158}, 114: {68, 196, 263, 144, 113, 22, 214, 159}, 115: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 116: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 117: {162, 217, 71, 266, 116, 25}, 118: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 119: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 120: {165, 74, 269, 29, 119, 221}, 121: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 122: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 123: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 124: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 125: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 126: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 127: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 128: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 129: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 130: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 131: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 132: {131, 235, 44, 205, 177, 86, 281, 91}, 133: {132, 108, 45, 236, 178, 87, 282, 63}, 134: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 135: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 136: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 137: {136}, 138: {137}, 139: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 140: {9, 139, 239, 249, 94, 191}, 141: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 142: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 143: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 144: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 145: {68, 196, 263, 144, 113, 22, 214, 159}, 146: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 147: {56, 146}, 148: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 149: {200, 250, 148, 103}, 150: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 151: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 152: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 153: {152}, 154: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 155: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 156: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 157: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 158: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 159: {67, 262, 112, 213, 21, 158}, 160: {68, 196, 263, 144, 113, 22, 214, 159}, 161: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 162: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 163: {162, 217, 71, 266, 116, 25}, 164: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 165: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 166: {165, 74, 269, 29, 119, 221}, 167: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 168: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 169: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 170: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 171: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 172: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 173: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 174: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 175: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 176: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 177: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 178: {131, 235, 44, 205, 177, 86, 281, 91}, 179: {132, 108, 45, 236, 178, 87, 282, 63}, 180: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 181: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 182: {49, 181, 198}, 183: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 184: {183}, 185: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 186: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 187: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 188: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 189: {188}, 190: {58, 189}, 191: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 192: {9, 139, 239, 249, 94, 191}, 193: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 194: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 195: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 196: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 197: {68, 196, 263, 144, 113, 22, 214, 159}, 198: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 199: {49, 181, 198}, 200: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 201: {200, 250, 148, 103}, 202: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 203: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 204: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 205: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 206: {131, 235, 44, 205, 177, 86, 281, 91}, 207: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 208: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 209: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 210: {209}, 211: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 212: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 213: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 214: {67, 262, 112, 213, 21, 158}, 215: {68, 196, 263, 144, 113, 22, 214, 159}, 216: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 217: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 218: {162, 217, 71, 266, 116, 25}, 219: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 220: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 221: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 222: {165, 74, 269, 29, 119, 221}, 223: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 224: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 225: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 226: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 227: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 228: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 229: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 230: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 231: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 232: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 233: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 234: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 235: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 236: {131, 235, 44, 205, 177, 86, 281, 91}, 237: {132, 108, 45, 236, 178, 87, 282, 63}, 238: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 239: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 240: {9, 139, 239, 249, 94, 191}, 241: {240, 51}, 242: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 243: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 244: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 245: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 246: {245, 102}, 247: {246, 247}, 248: {246, 247}, 249: {246, 247}, 250: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 251: {9, 139, 239, 249, 94, 191}, 252: {200, 250, 148, 103}, 253: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 254: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 255: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 256: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 257: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 258: {256}, 259: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 260: {258}, 261: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 262: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 263: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 264: {67, 262, 112, 213, 21, 158}, 265: {68, 196, 263, 144, 113, 22, 214, 159}, 266: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 267: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 268: {162, 217, 71, 266, 116, 25}, 269: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 270: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 271: {165, 74, 269, 29, 119, 221}, 272: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 273: {161, 223, 70, 167, 265, 76, 271, 115, 24, 121, 216, 31}, 274: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 275: {225, 34, 169, 78, 207, 208, 273, 154, 123}, 276: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 277: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 278: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 279: {261, 264, 270, 20, 277, 23, 157, 30, 160, 166, 39, 173, 66, 69, 75, 82, 212, 215, 222, 229, 111, 114, 120, 127}, 280: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 281: {129, 228, 38, 231, 232, 42, 172, 175, 81, 84, 276, 279, 126}, 282: {130, 164, 73, 233, 43, 234, 268, 176, 220, 85, 118, 280, 219, 28}, 283: {131, 235, 44, 205, 177, 86, 281, 91}, 284: {132, 108, 45, 236, 178, 87, 282, 63}, 285: {64, 226, 35, 259, 133, 170, 109, 46, 79, 237, 17, 210, 179, 274, 283, 88, 155, 124}, 286: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 287: {285}, 288: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 289: {287}, 290: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 291: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 292: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 293: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 294: {292}, 295: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 296: {192, 97, 288, 294, 10, 202, 140, 242, 252, 53, 150, 185, 60}, 297: {5, 8, 138, 12, 145, 147, 151, 289, 295, 50, 182, 55, 57, 187, 61, 190, 197, 199, 203, 204, 99, 105, 244, 248, 253, 255}, 298: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 299: {297}, 300: {128, 257, 260, 134, 7, 135, 11, 267, 13, 141, 15, 142, 143, 272, 19, 275, 149, 278, 153, 27, 156, 284, 286, 33, 290, 163, 291, 37, 293, 168, 41, 296, 171, 298, 174, 48, 52, 180, 54, 184, 186, 59, 65, 193, 194, 195, 72, 201, 77, 206, 80, 83, 211, 89, 218, 92, 96, 224, 98, 227, 101, 230, 104, 107, 110, 238, 241, 243, 117, 122, 251, 125, 254}, 301: {299}})
Equivalent! frozenset({240, 51}) {241, 50}
Equivalent! frozenset({241, 52}) {242, 51}
Equivalent! frozenset({105, 61}) {106, 60}
Equivalent! frozenset({106, 62}) {107, 61}
Equivalent! frozenset({108, 63}) {109, 62}
Equivalent! frozenset({64, 109}) {110, 63}
Equivalent! frozenset({65, 110}) {64, 111}
Equivalent! frozenset({66, 111}) {112, 65}
Equivalent! frozenset({112, 67}) {113, 66}
Equivalent! frozenset({113, 68}) {114, 67}
Equivalent! frozenset({114, 69}) {115, 68}
Equivalent! frozenset({115, 70}) {116, 69}
Equivalent! frozenset({116, 71}) {117, 70}
Equivalent! frozenset({72, 117}) {118, 71}
Equivalent! frozenset({73, 118}) {72, 119}
Equivalent! frozenset({74, 119}) {120, 73}
Equivalent! frozenset({120, 75}) {121, 74}
Equivalent! frozenset({121, 76}) {122, 75}
Equivalent! frozenset({122, 77}) {123, 76}
Equivalent! frozenset({123, 78}) {124, 77}
Equivalent! frozenset({124, 79}) {125, 78}
Equivalent! frozenset({80, 125}) {126, 79}
Equivalent! frozenset({81, 126}) {80, 127}
Equivalent! frozenset({82, 127}) {128, 81}
Equivalent! frozenset({128, 83}) {129, 82}
Equivalent! frozenset({129, 84}) {130, 83}
Equivalent! frozenset({130, 85}) {131, 84}
Equivalent! frozenset({131, 86}) {132, 85}
Equivalent! frozenset({132, 87}) {133, 86}
Equivalent! frozenset({88, 133}) {134, 87}
Equivalent! frozenset({89, 134}) {88, 135}
Equivalent! frozenset({245, 102}) {102, 246}
Equivalent! frozenset({138, 190}) {139, 191}
Equivalent! frozenset({139, 191}) {192, 140}
Equivalent! frozenset({194, 142}) {195, 143}
Equivalent! frozenset({200, 148}) {201, 149}
Equivalent! frozenset({201, 149}) {202, 150}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6885d5378>, {0: {0}, 1: {4}, 2: {5}, 3: {6}, 4: {7}, 5: {3}, 6: {8}, 7: {9}, 8: {10}, 9: {11}, 10: {12, 199}, 11: {13}, 12: {14}, 13: {15}, 14: {16}, 15: {17}, 16: {18}, 17: {19}, 18: {20}, 19: {21}, 20: {22}, 21: {23}, 22: {24}, 23: {25}, 24: {26}, 25: {27}, 26: {28}, 27: {29}, 28: {30}, 29: {31}, 30: {32}, 31: {33}, 32: {34}, 33: {35}, 34: {36}, 35: {37}, 36: {38}, 37: {39}, 38: {40}, 39: {41}, 40: {42}, 41: {43}, 42: {44}, 43: {45}, 44: {46}, 45: {47}, 46: {48}, 47: {2}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {197, 55}, 55: {56}, 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {109}, 64: {65}, 65: {111}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {117}, 72: {73}, 73: {119}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {125}, 80: {81}, 81: {127}, 82: {83}, 83: {84}, 84: {85}, 85: {86}, 86: {87}, 87: {133}, 88: {89}, 89: {90}, 90: {91}, 91: {92}, 92: {93}, 93: {94, 239}, 94: {95}, 95: {96}, 96: {97, 242}, 97: {98, 243}, 98: {99}, 99: {100}, 100: {101}, 101: set(), 102: {245}, 103: {1}, 104: {103}, 105: {104}, 106: {105}, 107: {106}, 108: {107}, 109: {108}, 110: {64}, 111: {110}, 112: {66}, 113: {112}, 114: {113}, 115: {114}, 116: {115}, 117: {116}, 118: {72}, 119: {118}, 120: {74}, 121: {120}, 122: {121}, 123: {122}, 124: {123}, 125: {124}, 126: {80}, 127: {126}, 128: {82}, 129: {128}, 130: {129}, 131: {130}, 132: {131}, 133: {132}, 134: {88}, 135: {134}, 136: {135}, 137: {136}, 138: {137}, 139: {138}, 140: {191}, 141: {140}, 142: {141}, 143: {142}, 144: {143}, 145: {144}, 146: {145}, 147: {146}, 148: {147, 199}, 149: {148}, 150: {149}, 151: {150}, 152: {151}, 153: {152}, 154: {153}, 155: {154}, 156: {155}, 157: {156}, 158: {157}, 159: {158}, 160: {159}, 161: {160}, 162: {161}, 163: {162}, 164: {163}, 165: {164}, 166: {165}, 167: {166}, 168: {167}, 169: {168}, 170: {169}, 171: {170}, 172: {171}, 173: {172}, 174: {173}, 175: {174}, 176: {175}, 177: {176}, 178: {177}, 179: {178}, 180: {179}, 181: {180}, 182: {181}, 183: {182}, 184: {183}, 185: {184}, 186: {185}, 187: {186}, 188: {187}, 189: {188}, 190: {189}, 191: {190}, 192: {139}, 193: {192}, 194: {193}, 195: {194}, 196: {195}, 197: {196}, 198: {197}, 199: {198}, 200: {147, 12, 199}, 201: {200}, 202: {201}, 203: {202}, 204: {203}, 205: {204}, 206: {205}, 207: {206}, 208: {207}, 209: {208}, 210: {209}, 211: {210}, 212: {211}, 213: {212}, 214: {213}, 215: {214}, 216: {215}, 217: {216}, 218: {217}, 219: {218}, 220: {219}, 221: {220}, 222: {221}, 223: {222}, 224: {223}, 225: {224}, 226: {225}, 227: {226}, 228: {227}, 229: {228}, 230: {229}, 231: {230}, 232: {231}, 233: {232}, 234: {233}, 235: {234}, 236: {235}, 237: {236}, 238: {237}, 239: {238}, 240: {239}, 241: {240}, 242: {241}, 243: {242}, 244: {243}, 245: {244}, 246: {102}, 247: set(), 248: {246}, 249: {247}, 250: set(), 251: set(), 252: {250}, 253: {251}, 254: set(), 255: set(), 256: set(), 257: {255}, 258: {256}, 259: {257}, 260: {258}, 261: {259}, 262: {260}, 263: {261}, 264: {262}, 265: {263}, 266: {264}, 267: {265}, 268: {266}, 269: {267}, 270: {268}, 271: {269}, 272: {270}, 273: {271}, 274: {272}, 275: {273}, 276: {274}, 277: {275}, 278: {276}, 279: {277}, 280: {278}, 281: {279}, 282: {280}, 283: {281}, 284: {282}, 285: {283}, 286: {284}, 287: {285}, 288: {286}, 289: {287}, 290: {288}, 291: {289}, 292: {290}, 293: {291}, 294: {292}, 295: {293}, 296: {294}, 297: {295}, 298: {296}, 299: {297}, 300: {298}, 301: {299}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
MORE 10 POT: 2
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
MORE 54 POT: 2
EXACT 55 add add
EXACT 56 load load
EXACT 57 add add
EXACT 58 store store
EXACT 59 inttoptr inttoptr
EXACT 60 load load
EXACT 61 add add
EXACT 62 icmp icmp
EXACT 63 zext zext
EXACT 64 store store
EXACT 65 trunc trunc
EXACT 66 and and
EXACT 67 tail tail
EXACT 68 trunc trunc
EXACT 69 and and
EXACT 70 xor xor
EXACT 71 store store
EXACT 72 xor xor
EXACT 73 lshr lshr
EXACT 74 trunc trunc
EXACT 75 and and
EXACT 76 store store
EXACT 77 icmp icmp
EXACT 78 zext zext
EXACT 79 store store
EXACT 80 lshr lshr
EXACT 81 trunc trunc
EXACT 82 store store
EXACT 83 lshr lshr
EXACT 84 xor xor
EXACT 85 add add
EXACT 86 icmp icmp
EXACT 87 zext zext
EXACT 88 store store
EXACT 89 select select
EXACT 90 add add
EXACT 91 store store
EXACT 92 br br
MORE 93 POT: 2
EXACT 94 add add
EXACT 95 store store
MORE 96 POT: 2
MORE 97 POT: 2
EXACT 98 load load
EXACT 99 add add
EXACT 100 store store
NO MATCH 101
EXACT 102 br br
EXACT 103 getelementptr getelementptr
EXACT 104 add add
EXACT 105 store store
EXACT 106 load load
EXACT 107 add add
EXACT 108 store store
EXACT 109 icmp icmp
EXACT 110 zext zext
EXACT 111 store store
EXACT 112 trunc trunc
EXACT 113 and and
EXACT 114 tail tail
EXACT 115 trunc trunc
EXACT 116 and and
EXACT 117 xor xor
EXACT 118 store store
EXACT 119 xor xor
EXACT 120 lshr lshr
EXACT 121 trunc trunc
EXACT 122 and and
EXACT 123 store store
EXACT 124 icmp icmp
EXACT 125 zext zext
EXACT 126 store store
EXACT 127 lshr lshr
EXACT 128 trunc trunc
EXACT 129 store store
EXACT 130 lshr lshr
EXACT 131 xor xor
EXACT 132 add add
EXACT 133 icmp icmp
EXACT 134 zext zext
EXACT 135 store store
EXACT 136 store store
EXACT 137 add add
EXACT 138 add add
EXACT 139 load load
EXACT 140 add add
EXACT 141 inttoptr inttoptr
EXACT 142 store store
EXACT 143 store store
EXACT 144 store store
EXACT 145 tail tail
EXACT 146 load load
EXACT 147 add add
MORE 148 POT: 2
EXACT 149 add add
EXACT 150 store store
EXACT 151 inttoptr inttoptr
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
EXACT 155 icmp icmp
EXACT 156 zext zext
EXACT 157 store store
EXACT 158 trunc trunc
EXACT 159 and and
EXACT 160 tail tail
EXACT 161 trunc trunc
EXACT 162 and and
EXACT 163 xor xor
EXACT 164 store store
EXACT 165 xor xor
EXACT 166 lshr lshr
EXACT 167 trunc trunc
EXACT 168 and and
EXACT 169 store store
EXACT 170 icmp icmp
EXACT 171 zext zext
EXACT 172 store store
EXACT 173 lshr lshr
EXACT 174 trunc trunc
EXACT 175 store store
EXACT 176 lshr lshr
EXACT 177 xor xor
EXACT 178 add add
EXACT 179 icmp icmp
EXACT 180 zext zext
EXACT 181 store store
EXACT 182 add add
EXACT 183 load load
EXACT 184 add add
EXACT 185 store store
EXACT 186 inttoptr inttoptr
EXACT 187 store store
EXACT 188 load load
EXACT 189 add add
EXACT 190 add add
EXACT 191 load load
EXACT 192 add add
EXACT 193 inttoptr inttoptr
EXACT 194 store store
EXACT 195 store store
EXACT 196 store store
EXACT 197 tail tail
EXACT 198 load load
EXACT 199 add add
MORE 200 POT: 3
EXACT 201 add add
EXACT 202 store store
EXACT 203 inttoptr inttoptr
EXACT 204 load load
EXACT 205 load load
EXACT 206 add add
EXACT 207 store store
EXACT 208 icmp icmp
EXACT 209 icmp icmp
EXACT 210 or or
EXACT 211 zext zext
EXACT 212 store store
EXACT 213 trunc trunc
EXACT 214 and and
EXACT 215 tail tail
EXACT 216 trunc trunc
EXACT 217 and and
EXACT 218 xor xor
EXACT 219 store store
EXACT 220 xor xor
EXACT 221 xor xor
EXACT 222 lshr lshr
EXACT 223 trunc trunc
EXACT 224 and and
EXACT 225 store store
EXACT 226 icmp icmp
EXACT 227 zext zext
EXACT 228 store store
EXACT 229 lshr lshr
EXACT 230 trunc trunc
EXACT 231 store store
EXACT 232 lshr lshr
EXACT 233 lshr lshr
EXACT 234 xor xor
EXACT 235 xor xor
EXACT 236 add add
EXACT 237 icmp icmp
EXACT 238 zext zext
EXACT 239 store store
EXACT 240 add add
EXACT 241 add add
EXACT 242 store store
EXACT 243 inttoptr inttoptr
EXACT 244 store store
EXACT 245 load load
EXACT 246 br br
NO MATCH 247
EXACT 248 phi phi
EXACT 249 phi phi
NO MATCH 250
NO MATCH 251
EXACT 252 add add
EXACT 253 store store
NO MATCH 254
NO MATCH 255
NO MATCH 256
EXACT 257 load load
EXACT 258 add add
EXACT 259 store store
EXACT 260 icmp icmp
EXACT 261 zext zext
EXACT 262 store store
EXACT 263 trunc trunc
EXACT 264 and and
EXACT 265 tail tail
EXACT 266 trunc trunc
EXACT 267 and and
EXACT 268 xor xor
EXACT 269 store store
EXACT 270 xor xor
EXACT 271 lshr lshr
EXACT 272 trunc trunc
EXACT 273 and and
EXACT 274 store store
EXACT 275 icmp icmp
EXACT 276 zext zext
EXACT 277 store store
EXACT 278 lshr lshr
EXACT 279 trunc trunc
EXACT 280 store store
EXACT 281 lshr lshr
EXACT 282 xor xor
EXACT 283 add add
EXACT 284 icmp icmp
EXACT 285 zext zext
EXACT 286 store store
EXACT 287 add add
EXACT 288 store store
EXACT 289 add add
EXACT 290 inttoptr inttoptr
EXACT 291 load load
EXACT 292 store store
EXACT 293 store store
EXACT 294 add add
EXACT 295 store store
EXACT 296 inttoptr inttoptr
EXACT 297 load load
EXACT 298 store store
EXACT 299 add add
EXACT 300 store store
EXACT 301 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 3 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 4 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 5 %3 = load i64, i64* %RBP, align 8
- 6 %4 = add i64 %1, 1
- 7 store i64 %4, i64* %PC, align 8
- 8 %5 = load i64, i64* %RSP, align 8
- 9 %6 = add i64 %5, -8
- 10 %7 = inttoptr i64 %6 to i64*
- 11 store i64 %3, i64* %7, align 8
- 12 %8 = load i64, i64* %PC, align 8
- 13 store i64 %6, i64* %RBP, align 8
- 14 %9 = add i64 %5, -40
- 15 store i64 %9, i64* %RSP, align 8
- 16 %10 = icmp ult i64 %6, 32
- 17 %11 = zext i1 %10 to i8
- 18 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 19 store i8 %11, i8* %12, align 1
- 20 %13 = trunc i64 %9 to i32
- 21 %14 = and i32 %13, 255
- 22 %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
- 23 %16 = trunc i32 %15 to i8
- 24 %17 = and i8 %16, 1
- 25 %18 = xor i8 %17, 1
- 26 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 27 store i8 %18, i8* %19, align 1
- 28 %20 = xor i64 %6, %9
- 29 %21 = lshr i64 %20, 4
- 30 %22 = trunc i64 %21 to i8
- 31 %23 = and i8 %22, 1
- 32 %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 33 store i8 %23, i8* %24, align 1
- 34 %25 = icmp eq i64 %9, 0
- 35 %26 = zext i1 %25 to i8
- 36 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 37 store i8 %26, i8* %27, align 1
- 38 %28 = lshr i64 %9, 63
- 39 %29 = trunc i64 %28 to i8
- 40 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 41 store i8 %29, i8* %30, align 1
- 42 %31 = lshr i64 %6, 63
- 43 %32 = xor i64 %28, %31
- 44 %33 = add nuw nsw i64 %32, %31
- 45 %34 = icmp eq i64 %33, 2
- 46 %35 = zext i1 %34 to i8
- 47 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 48 store i8 %35, i8* %36, align 1
- 49 %37 = add i64 %5, -24
- 50 %38 = load i64, i64* %RDI, align 8
- 51 %39 = add i64 %8, 11
- 52 store i64 %39, i64* %PC, align 8
- 53 %40 = inttoptr i64 %37 to i64*
- 54 store i64 %38, i64* %40, align 8
- 55 %41 = load i64, i64* %RBP, align 8
- 56 %42 = add i64 %41, -16
- 57 %43 = load i64, i64* %PC, align 8
- 58 %44 = add i64 %43, 5
- 59 store i64 %44, i64* %PC, align 8
- 60 %45 = inttoptr i64 %42 to i64*
- 61 %46 = load i64, i64* %45, align 8
- 62 %47 = add i64 %46, -2
- 63 %48 = icmp ult i64 %46, 2
- 64 %49 = zext i1 %48 to i8
- 65 store i8 %49, i8* %12, align 1
- 66 %50 = trunc i64 %47 to i32
- 67 %51 = and i32 %50, 255
- 68 %52 = tail call i32 @llvm.ctpop.i32(i32 %51) #12
- 69 %53 = trunc i32 %52 to i8
- 70 %54 = and i8 %53, 1
- 71 %55 = xor i8 %54, 1
- 72 store i8 %55, i8* %19, align 1
- 73 %56 = xor i64 %47, %46
- 74 %57 = lshr i64 %56, 4
- 75 %58 = trunc i64 %57 to i8
- 76 %59 = and i8 %58, 1
- 77 store i8 %59, i8* %24, align 1
- 78 %60 = icmp eq i64 %47, 0
- 79 %61 = zext i1 %60 to i8
- 80 store i8 %61, i8* %27, align 1
- 81 %62 = lshr i64 %47, 63
- 82 %63 = trunc i64 %62 to i8
- 83 store i8 %63, i8* %30, align 1
- 84 %64 = lshr i64 %46, 63
- 85 %65 = xor i64 %62, %64
- 86 %66 = add nuw nsw i64 %65, %64
- 87 %67 = icmp eq i64 %66, 2
- 88 %68 = zext i1 %67 to i8
- 89 store i8 %68, i8* %36, align 1
- 90 %.v = select i1 %48, i64 11, i64 24
- 91 %69 = add i64 %43, %.v
- 92 store i64 %69, i64* %PC, align 8
- 93 \<badref\> = br i1 %48, label %block_400577, label %block_400584
- 94 %70 = add i64 %41, -8
- 95 %71 = add i64 %69, 8
- 96 store i64 %71, i64* %PC, align 8
- 97 %72 = inttoptr i64 %70 to i64*
- 98 store i64 1, i64* %72, align 8
- 99 %73 = load i64, i64* %PC, align 8
- 100 %74 = add i64 %73, 49
- 101 store i64 %74, i64* %PC, align 8
- 102 \<badref\> = br label %block_4005b0
- 103 %75 = add i64 %69, 4
- 104 store i64 %75, i64* %PC, align 8
- 105 %76 = load i64, i64* %45, align 8
- 106 %77 = add i64 %76, -2
- 107 store i64 %77, i64* %RAX, align 8
- 108 %78 = icmp ult i64 %76, 2
- 109 %79 = zext i1 %78 to i8
- 110 store i8 %79, i8* %12, align 1
- 111 %80 = trunc i64 %77 to i32
- 112 %81 = and i32 %80, 255
- 113 %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #12
- 114 %83 = trunc i32 %82 to i8
- 115 %84 = and i8 %83, 1
- 116 %85 = xor i8 %84, 1
- 117 store i8 %85, i8* %19, align 1
- 118 %86 = xor i64 %77, %76
- 119 %87 = lshr i64 %86, 4
- 120 %88 = trunc i64 %87 to i8
- 121 %89 = and i8 %88, 1
- 122 store i8 %89, i8* %24, align 1
- 123 %90 = icmp eq i64 %77, 0
- 124 %91 = zext i1 %90 to i8
- 125 store i8 %91, i8* %27, align 1
- 126 %92 = lshr i64 %77, 63
- 127 %93 = trunc i64 %92 to i8
- 128 store i8 %93, i8* %30, align 1
- 129 %94 = lshr i64 %76, 63
- 130 %95 = xor i64 %92, %94
- 131 %96 = add nuw nsw i64 %95, %94
- 132 %97 = icmp eq i64 %96, 2
- 133 %98 = zext i1 %97 to i8
- 134 store i8 %98, i8* %36, align 1
- 135 store i64 %77, i64* %RDI, align 8
- 136 %99 = add i64 %69, -36
- 137 %100 = add i64 %69, 16
- 138 %101 = load i64, i64* %RSP, align 8
- 139 %102 = add i64 %101, -8
- 140 %103 = inttoptr i64 %102 to i64*
- 141 store i64 %100, i64* %103, align 8
- 142 store i64 %102, i64* %RSP, align 8
- 143 store i64 %99, i64* %PC, align 8
- 144 %104 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %99, %struct.Memory* %2)
- 145 %105 = load i64, i64* %RBP, align 8
- 146 %106 = add i64 %105, -16
- 147 %107 = load i64, i64* %PC, align 8
- 148 %108 = add i64 %107, 4
- 149 store i64 %108, i64* %PC, align 8
- 150 %109 = inttoptr i64 %106 to i64*
- 151 %110 = load i64, i64* %109, align 8
- 152 %111 = add i64 %110, -1
- 153 store i64 %111, i64* %RDI, align 8
- 154 %112 = icmp eq i64 %110, 0
- 155 %113 = zext i1 %112 to i8
- 156 store i8 %113, i8* %12, align 1
- 157 %114 = trunc i64 %111 to i32
- 158 %115 = and i32 %114, 255
- 159 %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #12
- 160 %117 = trunc i32 %116 to i8
- 161 %118 = and i8 %117, 1
- 162 %119 = xor i8 %118, 1
- 163 store i8 %119, i8* %19, align 1
- 164 %120 = xor i64 %111, %110
- 165 %121 = lshr i64 %120, 4
- 166 %122 = trunc i64 %121 to i8
- 167 %123 = and i8 %122, 1
- 168 store i8 %123, i8* %24, align 1
- 169 %124 = icmp eq i64 %111, 0
- 170 %125 = zext i1 %124 to i8
- 171 store i8 %125, i8* %27, align 1
- 172 %126 = lshr i64 %111, 63
- 173 %127 = trunc i64 %126 to i8
- 174 store i8 %127, i8* %30, align 1
- 175 %128 = lshr i64 %110, 63
- 176 %129 = xor i64 %126, %128
- 177 %130 = add nuw nsw i64 %129, %128
- 178 %131 = icmp eq i64 %130, 2
- 179 %132 = zext i1 %131 to i8
- 180 store i8 %132, i8* %36, align 1
- 181 %133 = add i64 %105, -24
- 182 %134 = load i64, i64* %RAX, align 8
- 183 %135 = add i64 %107, 12
- 184 store i64 %135, i64* %PC, align 8
- 185 %136 = inttoptr i64 %133 to i64*
- 186 store i64 %134, i64* %136, align 8
- 187 %137 = load i64, i64* %PC, align 8
- 188 %138 = add i64 %137, -64
- 189 %139 = add i64 %137, 5
- 190 %140 = load i64, i64* %RSP, align 8
- 191 %141 = add i64 %140, -8
- 192 %142 = inttoptr i64 %141 to i64*
- 193 store i64 %139, i64* %142, align 8
- 194 store i64 %141, i64* %RSP, align 8
- 195 store i64 %138, i64* %PC, align 8
- 196 %143 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %138, %struct.Memory* %104)
- 197 %144 = load i64, i64* %RBP, align 8
- 198 %145 = add i64 %144, -24
- 199 %146 = load i64, i64* %PC, align 8
- 200 %147 = add i64 %146, 4
- 201 store i64 %147, i64* %PC, align 8
- 202 %148 = inttoptr i64 %145 to i64*
- 203 %149 = load i64, i64* %148, align 8
- 204 %150 = load i64, i64* %RAX, align 8
- 205 %151 = add i64 %150, %149
- 206 store i64 %151, i64* %RDI, align 8
- 207 %152 = icmp ult i64 %151, %149
- 208 %153 = icmp ult i64 %151, %150
- 209 %154 = or i1 %152, %153
- 210 %155 = zext i1 %154 to i8
- 211 store i8 %155, i8* %12, align 1
- 212 %156 = trunc i64 %151 to i32
- 213 %157 = and i32 %156, 255
- 214 %158 = tail call i32 @llvm.ctpop.i32(i32 %157) #12
- 215 %159 = trunc i32 %158 to i8
- 216 %160 = and i8 %159, 1
- 217 %161 = xor i8 %160, 1
- 218 store i8 %161, i8* %19, align 1
- 219 %162 = xor i64 %150, %149
- 220 %163 = xor i64 %162, %151
- 221 %164 = lshr i64 %163, 4
- 222 %165 = trunc i64 %164 to i8
- 223 %166 = and i8 %165, 1
- 224 store i8 %166, i8* %24, align 1
- 225 %167 = icmp eq i64 %151, 0
- 226 %168 = zext i1 %167 to i8
- 227 store i8 %168, i8* %27, align 1
- 228 %169 = lshr i64 %151, 63
- 229 %170 = trunc i64 %169 to i8
- 230 store i8 %170, i8* %30, align 1
- 231 %171 = lshr i64 %149, 63
- 232 %172 = lshr i64 %150, 63
- 233 %173 = xor i64 %169, %171
- 234 %174 = xor i64 %169, %172
- 235 %175 = add nuw nsw i64 %173, %174
- 236 %176 = icmp eq i64 %175, 2
- 237 %177 = zext i1 %176 to i8
- 238 store i8 %177, i8* %36, align 1
- 239 %178 = add i64 %144, -8
- 240 %179 = add i64 %146, 11
- 241 store i64 %179, i64* %PC, align 8
- 242 %180 = inttoptr i64 %178 to i64*
- 243 store i64 %151, i64* %180, align 8
- 244 %.pre = load i64, i64* %PC, align 8
- 245 \<badref\> = br label %block_4005b0
- 246 %181 = phi i64 [ %.pre, %block_400584 ], [ %74, %block_400577 ]
- 247 %MEMORY.0 = phi %struct.Memory* [ %143, %block_400584 ], [ %2, %block_400577 ]
- 248 %182 = load i64, i64* %RBP, align 8
- 249 %183 = add i64 %182, -8
- 250 %184 = add i64 %181, 4
- 251 store i64 %184, i64* %PC, align 8
- 252 %185 = inttoptr i64 %183 to i64*
- 253 %186 = load i64, i64* %185, align 8
- 254 store i64 %186, i64* %RAX, align 8
- 255 %187 = load i64, i64* %RSP, align 8
- 256 %188 = add i64 %187, 32
- 257 store i64 %188, i64* %RSP, align 8
- 258 %189 = icmp ugt i64 %187, -33
- 259 %190 = zext i1 %189 to i8
- 260 store i8 %190, i8* %12, align 1
- 261 %191 = trunc i64 %188 to i32
- 262 %192 = and i32 %191, 255
- 263 %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #12
- 264 %194 = trunc i32 %193 to i8
- 265 %195 = and i8 %194, 1
- 266 %196 = xor i8 %195, 1
- 267 store i8 %196, i8* %19, align 1
- 268 %197 = xor i64 %188, %187
- 269 %198 = lshr i64 %197, 4
- 270 %199 = trunc i64 %198 to i8
- 271 %200 = and i8 %199, 1
- 272 store i8 %200, i8* %24, align 1
- 273 %201 = icmp eq i64 %188, 0
- 274 %202 = zext i1 %201 to i8
- 275 store i8 %202, i8* %27, align 1
- 276 %203 = lshr i64 %188, 63
- 277 %204 = trunc i64 %203 to i8
- 278 store i8 %204, i8* %30, align 1
- 279 %205 = lshr i64 %187, 63
- 280 %206 = xor i64 %203, %205
- 281 %207 = add nuw nsw i64 %206, %203
- 282 %208 = icmp eq i64 %207, 2
- 283 %209 = zext i1 %208 to i8
- 284 store i8 %209, i8* %36, align 1
- 285 %210 = add i64 %181, 9
- 286 store i64 %210, i64* %PC, align 8
- 287 %211 = add i64 %187, 40
- 288 %212 = inttoptr i64 %188 to i64*
- 289 %213 = load i64, i64* %212, align 8
- 290 store i64 %213, i64* %RBP, align 8
- 291 store i64 %211, i64* %RSP, align 8
- 292 %214 = add i64 %181, 10
- 293 store i64 %214, i64* %PC, align 8
- 294 %215 = inttoptr i64 %211 to i64*
- 295 %216 = load i64, i64* %215, align 8
- 296 store i64 %216, i64* %PC, align 8
- 297 %217 = add i64 %187, 48
- 298 store i64 %217, i64* %RSP, align 8
- 299 ret %struct.Memory* %MEMORY.0
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6885d5598>, {0: {0}, 1: {101, 103}, 2: {47}, 3: {5}, 4: {1}, 5: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 6: {3}, 7: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 8: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 9: {192, 7, 140, 240, 251, 93}, 10: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 11: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 12: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 13: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 14: {12}, 15: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 16: {14}, 17: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 18: {16}, 19: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 20: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 21: {66, 264, 113, 19, 214, 159}, 22: {160, 67, 197, 265, 145, 114, 20, 215}, 23: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 24: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 25: {163, 70, 268, 117, 23, 218}, 26: {24}, 27: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 28: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 29: {166, 73, 271, 120, 27, 222}, 30: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 31: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 32: {30}, 33: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 34: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 35: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 36: {34}, 37: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 38: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 39: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 40: {38}, 41: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 42: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 43: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 44: {132, 42, 236, 206, 178, 85, 90, 283}, 45: {133, 43, 109, 237, 179, 86, 284, 62}, 46: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 47: {45}, 48: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 49: {48, 182, 199}, 50: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 51: {241, 50}, 52: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 53: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 54: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 55: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 56: {147, 55}, 57: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 58: {57, 190}, 59: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 60: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 61: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 62: {107, 61}, 63: {133, 43, 109, 237, 179, 86, 284, 62}, 64: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 65: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 66: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 67: {66, 264, 113, 19, 214, 159}, 68: {160, 67, 197, 265, 145, 114, 20, 215}, 69: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 70: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 71: {163, 70, 268, 117, 23, 218}, 72: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 73: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 74: {166, 73, 271, 120, 27, 222}, 75: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 76: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 77: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 78: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 79: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 80: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 81: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 82: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 83: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 84: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 85: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 86: {132, 42, 236, 206, 178, 85, 90, 283}, 87: {133, 43, 109, 237, 179, 86, 284, 62}, 88: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 89: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 90: {89}, 91: {132, 42, 236, 206, 178, 85, 90, 283}, 92: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 93: {92}, 94: {192, 7, 140, 240, 251, 93}, 95: {94}, 96: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 97: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 98: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 99: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 100: {99}, 101: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 102: {102, 246}, 103: {104, 201, 252, 149}, 104: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 105: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 106: {107, 61}, 107: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 108: {133, 43, 109, 237, 179, 86, 284, 62}, 109: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 110: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 111: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 112: {66, 264, 113, 19, 214, 159}, 113: {160, 67, 197, 265, 145, 114, 20, 215}, 114: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 115: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 116: {163, 70, 268, 117, 23, 218}, 117: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 118: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 119: {166, 73, 271, 120, 27, 222}, 120: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 121: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 122: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 123: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 124: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 125: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 126: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 127: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 128: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 129: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 130: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 131: {132, 42, 236, 206, 178, 85, 90, 283}, 132: {133, 43, 109, 237, 179, 86, 284, 62}, 133: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 134: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 135: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 136: {137}, 137: {138}, 138: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 139: {192, 7, 140, 240, 251, 93}, 140: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 141: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 142: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 143: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 144: {160, 67, 197, 265, 145, 114, 20, 215}, 145: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 146: {147, 55}, 147: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 148: {104, 201, 252, 149}, 149: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 150: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 151: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 152: {153}, 153: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 154: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 155: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 156: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 157: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 158: {66, 264, 113, 19, 214, 159}, 159: {160, 67, 197, 265, 145, 114, 20, 215}, 160: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 161: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 162: {163, 70, 268, 117, 23, 218}, 163: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 164: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 165: {166, 73, 271, 120, 27, 222}, 166: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 167: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 168: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 169: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 170: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 171: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 172: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 173: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 174: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 175: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 176: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 177: {132, 42, 236, 206, 178, 85, 90, 283}, 178: {133, 43, 109, 237, 179, 86, 284, 62}, 179: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 180: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 181: {48, 182, 199}, 182: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 183: {184}, 184: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 185: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 186: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 187: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 188: {189}, 189: {57, 190}, 190: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 191: {192, 7, 140, 240, 251, 93}, 192: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 193: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 194: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 195: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 196: {160, 67, 197, 265, 145, 114, 20, 215}, 197: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 198: {48, 182, 199}, 199: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 200: {104, 201, 252, 149}, 201: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 202: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 203: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 204: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 205: {132, 42, 236, 206, 178, 85, 90, 283}, 206: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 207: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 208: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 209: {210}, 210: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 211: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 212: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 213: {66, 264, 113, 19, 214, 159}, 214: {160, 67, 197, 265, 145, 114, 20, 215}, 215: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 216: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 217: {163, 70, 268, 117, 23, 218}, 218: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 219: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 220: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 221: {166, 73, 271, 120, 27, 222}, 222: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 223: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 224: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 225: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 226: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 227: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 228: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 229: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 230: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 231: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 232: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 233: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 234: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 235: {132, 42, 236, 206, 178, 85, 90, 283}, 236: {133, 43, 109, 237, 179, 86, 284, 62}, 237: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 238: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 239: {192, 7, 140, 240, 251, 93}, 240: {241, 50}, 241: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 242: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 243: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 244: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 245: {102, 246}, 246: {248, 249, 247}, 247: {248, 249, 247}, 248: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 249: {192, 7, 140, 240, 251, 93}, 250: {104, 201, 252, 149}, 251: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 252: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 253: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 254: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 255: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 256: {258}, 257: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 258: {260}, 259: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 260: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 261: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 262: {66, 264, 113, 19, 214, 159}, 263: {160, 67, 197, 265, 145, 114, 20, 215}, 264: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 265: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 266: {163, 70, 268, 117, 23, 218}, 267: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 268: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 269: {166, 73, 271, 120, 27, 222}, 270: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 271: {224, 162, 69, 168, 75, 267, 273, 116, 22, 217, 122, 29}, 272: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 273: {32, 226, 170, 77, 208, 209, 275, 155, 124}, 274: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 275: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 276: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 277: {128, 263, 266, 272, 18, 21, 279, 28, 158, 161, 37, 167, 174, 65, 68, 74, 81, 213, 216, 223, 230, 112, 115, 121}, 278: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 279: {130, 36, 229, 40, 232, 233, 173, 80, 176, 83, 278, 281, 127}, 280: {131, 165, 72, 41, 234, 235, 282, 270, 177, 84, 119, 26, 220, 221}, 281: {132, 42, 236, 206, 178, 85, 90, 283}, 282: {133, 43, 109, 237, 179, 86, 284, 62}, 283: {33, 227, 261, 134, 171, 44, 78, 15, 110, 238, 211, 180, 276, 87, 285, 156, 125, 63}, 284: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 285: {287}, 286: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 287: {289}, 288: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 289: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 290: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 291: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 292: {294}, 293: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 294: {96, 193, 290, 8, 296, 203, 141, 243, 52, 151, 186, 59, 254}, 295: {257, 2, 6, 10, 139, 146, 148, 152, 291, 297, 49, 54, 183, 56, 188, 60, 191, 198, 200, 204, 205, 98, 106, 245, 250, 255}, 296: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 297: {299}, 298: {256, 129, 259, 4, 262, 135, 136, 9, 11, 13, 142, 143, 144, 17, 269, 274, 277, 150, 280, 25, 154, 157, 286, 31, 288, 35, 164, 292, 293, 39, 295, 169, 298, 172, 300, 46, 175, 51, 53, 181, 185, 58, 187, 64, 194, 195, 196, 71, 202, 76, 79, 207, 82, 212, 88, 91, 219, 95, 97, 225, 100, 228, 231, 105, 108, 111, 239, 242, 244, 118, 123, 253, 126}, 299: {301}})
Equivalent! frozenset({241, 50}) {240, 51}
Equivalent! frozenset({242, 51}) {241, 52}
Equivalent! frozenset({106, 60}) {105, 61}
Equivalent! frozenset({107, 61}) {106, 62}
Equivalent! frozenset({109, 62}) {108, 63}
Equivalent! frozenset({110, 63}) {64, 109}
Equivalent! frozenset({64, 111}) {65, 110}
Equivalent! frozenset({112, 65}) {66, 111}
Equivalent! frozenset({113, 66}) {112, 67}
Equivalent! frozenset({114, 67}) {113, 68}
Equivalent! frozenset({115, 68}) {114, 69}
Equivalent! frozenset({116, 69}) {115, 70}
Equivalent! frozenset({117, 70}) {116, 71}
Equivalent! frozenset({118, 71}) {72, 117}
Equivalent! frozenset({72, 119}) {73, 118}
Equivalent! frozenset({120, 73}) {74, 119}
Equivalent! frozenset({121, 74}) {120, 75}
Equivalent! frozenset({122, 75}) {121, 76}
Equivalent! frozenset({123, 76}) {122, 77}
Equivalent! frozenset({124, 77}) {123, 78}
Equivalent! frozenset({125, 78}) {124, 79}
Equivalent! frozenset({126, 79}) {80, 125}
Equivalent! frozenset({80, 127}) {81, 126}
Equivalent! frozenset({128, 81}) {82, 127}
Equivalent! frozenset({129, 82}) {128, 83}
Equivalent! frozenset({130, 83}) {129, 84}
Equivalent! frozenset({131, 84}) {130, 85}
Equivalent! frozenset({132, 85}) {131, 86}
Equivalent! frozenset({133, 86}) {132, 87}
Equivalent! frozenset({134, 87}) {88, 133}
Equivalent! frozenset({88, 135}) {89, 134}
Equivalent! frozenset({102, 246}) {245, 102}
Equivalent! frozenset({139, 191}) {138, 190}
Equivalent! frozenset({192, 140}) {139, 191}
Equivalent! frozenset({195, 143}) {194, 142}
Equivalent! frozenset({201, 149}) {200, 148}
Equivalent! frozenset({202, 150}) {201, 149}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6885d5598>, {0: {0}, 1: {103}, 2: {47}, 3: {5}, 4: {1}, 5: {2}, 6: {3}, 7: {4}, 8: {6}, 9: {7}, 10: {8}, 11: {9}, 12: {200, 10}, 13: {11}, 14: {12}, 15: {13}, 16: {14}, 17: {15}, 18: {16}, 19: {17}, 20: {18}, 21: {19}, 22: {20}, 23: {21}, 24: {22}, 25: {23}, 26: {24}, 27: {25}, 28: {26}, 29: {27}, 30: {28}, 31: {29}, 32: {30}, 33: {31}, 34: {32}, 35: {33}, 36: {34}, 37: {35}, 38: {36}, 39: {37}, 40: {38}, 41: {39}, 42: {40}, 43: {41}, 44: {42}, 45: {43}, 46: {44}, 47: {45}, 48: {46}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {198, 54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {110}, 65: {64}, 66: {112}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {118}, 73: {72}, 74: {120}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {126}, 81: {80}, 82: {128}, 83: {82}, 84: {83}, 85: {84}, 86: {85}, 87: {86}, 88: {134}, 89: {88}, 90: {89}, 91: {90}, 92: {91}, 93: {92}, 94: {240, 93}, 95: {94}, 96: {95}, 97: {96, 243}, 98: {97, 244}, 99: {98}, 100: {99}, 101: {100}, 102: {246}, 103: {104}, 104: {105}, 105: {106}, 106: {107}, 107: {108}, 108: {109}, 109: {63}, 110: {111}, 111: {65}, 112: {113}, 113: {114}, 114: {115}, 115: {116}, 116: {117}, 117: {71}, 118: {119}, 119: {73}, 120: {121}, 121: {122}, 122: {123}, 123: {124}, 124: {125}, 125: {79}, 126: {127}, 127: {81}, 128: {129}, 129: {130}, 130: {131}, 131: {132}, 132: {133}, 133: {87}, 134: {135}, 135: {136}, 136: {137}, 137: {138}, 138: {139}, 139: {192}, 140: {141}, 141: {142}, 142: {143}, 143: {144}, 144: {145}, 145: {146}, 146: {147}, 147: {200, 148}, 148: {149}, 149: {150}, 150: {151}, 151: {152}, 152: {153}, 153: {154}, 154: {155}, 155: {156}, 156: {157}, 157: {158}, 158: {159}, 159: {160}, 160: {161}, 161: {162}, 162: {163}, 163: {164}, 164: {165}, 165: {166}, 166: {167}, 167: {168}, 168: {169}, 169: {170}, 170: {171}, 171: {172}, 172: {173}, 173: {174}, 174: {175}, 175: {176}, 176: {177}, 177: {178}, 178: {179}, 179: {180}, 180: {181}, 181: {182}, 182: {183}, 183: {184}, 184: {185}, 185: {186}, 186: {187}, 187: {188}, 188: {189}, 189: {190}, 190: {191}, 191: {140}, 192: {193}, 193: {194}, 194: {195}, 195: {196}, 196: {197}, 197: {198}, 198: {199}, 199: {200, 10, 148}, 200: {201}, 201: {202}, 202: {203}, 203: {204}, 204: {205}, 205: {206}, 206: {207}, 207: {208}, 208: {209}, 209: {210}, 210: {211}, 211: {212}, 212: {213}, 213: {214}, 214: {215}, 215: {216}, 216: {217}, 217: {218}, 218: {219}, 219: {220}, 220: {221}, 221: {222}, 222: {223}, 223: {224}, 224: {225}, 225: {226}, 226: {227}, 227: {228}, 228: {229}, 229: {230}, 230: {231}, 231: {232}, 232: {233}, 233: {234}, 234: {235}, 235: {236}, 236: {237}, 237: {238}, 238: {239}, 239: {240}, 240: {241}, 241: {242}, 242: {243}, 243: {244}, 244: {245}, 245: {102}, 246: {248}, 247: {249}, 248: set(), 249: set(), 250: {252}, 251: {253}, 252: set(), 253: set(), 254: set(), 255: {257}, 256: {258}, 257: {259}, 258: {260}, 259: {261}, 260: {262}, 261: {263}, 262: {264}, 263: {265}, 264: {266}, 265: {267}, 266: {268}, 267: {269}, 268: {270}, 269: {271}, 270: {272}, 271: {273}, 272: {274}, 273: {275}, 274: {276}, 275: {277}, 276: {278}, 277: {279}, 278: {280}, 279: {281}, 280: {282}, 281: {283}, 282: {284}, 283: {285}, 284: {286}, 285: {287}, 286: {288}, 287: {289}, 288: {290}, 289: {291}, 290: {292}, 291: {293}, 292: {294}, 293: {295}, 294: {296}, 295: {297}, 296: {298}, 297: {299}, 298: {300}, 299: {301}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 store store
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 store store
MORE 12 POT: 2
EXACT 13 store store
EXACT 14 add add
EXACT 15 store store
EXACT 16 icmp icmp
EXACT 17 zext zext
EXACT 18 getelementptr getelementptr
EXACT 19 store store
EXACT 20 trunc trunc
EXACT 21 and and
EXACT 22 tail tail
EXACT 23 trunc trunc
EXACT 24 and and
EXACT 25 xor xor
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 xor xor
EXACT 29 lshr lshr
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 icmp icmp
EXACT 35 zext zext
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 getelementptr getelementptr
EXACT 41 store store
EXACT 42 lshr lshr
EXACT 43 xor xor
EXACT 44 add add
EXACT 45 icmp icmp
EXACT 46 zext zext
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 add add
EXACT 50 load load
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
MORE 55 POT: 2
EXACT 56 add add
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 load load
EXACT 62 add add
EXACT 63 icmp icmp
EXACT 64 zext zext
EXACT 65 store store
EXACT 66 trunc trunc
EXACT 67 and and
EXACT 68 tail tail
EXACT 69 trunc trunc
EXACT 70 and and
EXACT 71 xor xor
EXACT 72 store store
EXACT 73 xor xor
EXACT 74 lshr lshr
EXACT 75 trunc trunc
EXACT 76 and and
EXACT 77 store store
EXACT 78 icmp icmp
EXACT 79 zext zext
EXACT 80 store store
EXACT 81 lshr lshr
EXACT 82 trunc trunc
EXACT 83 store store
EXACT 84 lshr lshr
EXACT 85 xor xor
EXACT 86 add add
EXACT 87 icmp icmp
EXACT 88 zext zext
EXACT 89 store store
EXACT 90 select select
EXACT 91 add add
EXACT 92 store store
EXACT 93 br br
MORE 94 POT: 2
EXACT 95 add add
EXACT 96 store store
MORE 97 POT: 2
MORE 98 POT: 2
EXACT 99 load load
EXACT 100 add add
EXACT 101 store store
EXACT 102 br br
EXACT 103 add add
EXACT 104 store store
EXACT 105 load load
EXACT 106 add add
EXACT 107 store store
EXACT 108 icmp icmp
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 trunc trunc
EXACT 112 and and
EXACT 113 tail tail
EXACT 114 trunc trunc
EXACT 115 and and
EXACT 116 xor xor
EXACT 117 store store
EXACT 118 xor xor
EXACT 119 lshr lshr
EXACT 120 trunc trunc
EXACT 121 and and
EXACT 122 store store
EXACT 123 icmp icmp
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 lshr lshr
EXACT 127 trunc trunc
EXACT 128 store store
EXACT 129 lshr lshr
EXACT 130 xor xor
EXACT 131 add add
EXACT 132 icmp icmp
EXACT 133 zext zext
EXACT 134 store store
EXACT 135 store store
EXACT 136 add add
EXACT 137 add add
EXACT 138 load load
EXACT 139 add add
EXACT 140 inttoptr inttoptr
EXACT 141 store store
EXACT 142 store store
EXACT 143 store store
EXACT 144 tail tail
EXACT 145 load load
EXACT 146 add add
MORE 147 POT: 2
EXACT 148 add add
EXACT 149 store store
EXACT 150 inttoptr inttoptr
EXACT 151 load load
EXACT 152 add add
EXACT 153 store store
EXACT 154 icmp icmp
EXACT 155 zext zext
EXACT 156 store store
EXACT 157 trunc trunc
EXACT 158 and and
EXACT 159 tail tail
EXACT 160 trunc trunc
EXACT 161 and and
EXACT 162 xor xor
EXACT 163 store store
EXACT 164 xor xor
EXACT 165 lshr lshr
EXACT 166 trunc trunc
EXACT 167 and and
EXACT 168 store store
EXACT 169 icmp icmp
EXACT 170 zext zext
EXACT 171 store store
EXACT 172 lshr lshr
EXACT 173 trunc trunc
EXACT 174 store store
EXACT 175 lshr lshr
EXACT 176 xor xor
EXACT 177 add add
EXACT 178 icmp icmp
EXACT 179 zext zext
EXACT 180 store store
EXACT 181 add add
EXACT 182 load load
EXACT 183 add add
EXACT 184 store store
EXACT 185 inttoptr inttoptr
EXACT 186 store store
EXACT 187 load load
EXACT 188 add add
EXACT 189 add add
EXACT 190 load load
EXACT 191 add add
EXACT 192 inttoptr inttoptr
EXACT 193 store store
EXACT 194 store store
EXACT 195 store store
EXACT 196 tail tail
EXACT 197 load load
EXACT 198 add add
MORE 199 POT: 3
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 load load
EXACT 205 add add
EXACT 206 store store
EXACT 207 icmp icmp
EXACT 208 icmp icmp
EXACT 209 or or
EXACT 210 zext zext
EXACT 211 store store
EXACT 212 trunc trunc
EXACT 213 and and
EXACT 214 tail tail
EXACT 215 trunc trunc
EXACT 216 and and
EXACT 217 xor xor
EXACT 218 store store
EXACT 219 xor xor
EXACT 220 xor xor
EXACT 221 lshr lshr
EXACT 222 trunc trunc
EXACT 223 and and
EXACT 224 store store
EXACT 225 icmp icmp
EXACT 226 zext zext
EXACT 227 store store
EXACT 228 lshr lshr
EXACT 229 trunc trunc
EXACT 230 store store
EXACT 231 lshr lshr
EXACT 232 lshr lshr
EXACT 233 xor xor
EXACT 234 xor xor
EXACT 235 add add
EXACT 236 icmp icmp
EXACT 237 zext zext
EXACT 238 store store
EXACT 239 add add
EXACT 240 add add
EXACT 241 store store
EXACT 242 inttoptr inttoptr
EXACT 243 store store
EXACT 244 load load
EXACT 245 br br
EXACT 246 phi phi
EXACT 247 phi phi
NO MATCH 248
NO MATCH 249
EXACT 250 add add
EXACT 251 store store
NO MATCH 252
NO MATCH 253
NO MATCH 254
EXACT 255 load load
EXACT 256 add add
EXACT 257 store store
EXACT 258 icmp icmp
EXACT 259 zext zext
EXACT 260 store store
EXACT 261 trunc trunc
EXACT 262 and and
EXACT 263 tail tail
EXACT 264 trunc trunc
EXACT 265 and and
EXACT 266 xor xor
EXACT 267 store store
EXACT 268 xor xor
EXACT 269 lshr lshr
EXACT 270 trunc trunc
EXACT 271 and and
EXACT 272 store store
EXACT 273 icmp icmp
EXACT 274 zext zext
EXACT 275 store store
EXACT 276 lshr lshr
EXACT 277 trunc trunc
EXACT 278 store store
EXACT 279 lshr lshr
EXACT 280 xor xor
EXACT 281 add add
EXACT 282 icmp icmp
EXACT 283 zext zext
EXACT 284 store store
EXACT 285 add add
EXACT 286 store store
EXACT 287 add add
EXACT 288 inttoptr inttoptr
EXACT 289 load load
EXACT 290 store store
EXACT 291 store store
EXACT 292 add add
EXACT 293 store store
EXACT 294 inttoptr inttoptr
EXACT 295 load load
EXACT 296 store store
EXACT 297 add add
EXACT 298 store store
EXACT 299 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%RDI.i40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -24', '%40 = load i64, i64* %RDI.i40, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%45 = load i64, i64* %3, align 8', '%46 = add i64 %45, 5', 'store i64 %46, i64* %3, align 8', '%49 = add i64 %48, -2', '%51 = zext i1 %50 to i8', 'store i8 %51, i8* %14, align 1', '%52 = trunc i64 %49 to i32', '%53 = and i32 %52, 255', '%54 = tail call i32 @llvm.ctpop.i32(i32 %53)', '%55 = trunc i32 %54 to i8', '%56 = and i8 %55, 1', '%57 = xor i8 %56, 1', 'store i8 %57, i8* %21, align 1', '%58 = xor i64 %49, %48', '%59 = lshr i64 %58, 4', '%60 = trunc i64 %59 to i8', '%61 = and i8 %60, 1', 'store i8 %61, i8* %26, align 1', '%62 = icmp eq i64 %49, 0', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %29, align 1', '%64 = lshr i64 %49, 63', '%65 = trunc i64 %64 to i8', 'store i8 %65, i8* %32, align 1', '%66 = lshr i64 %48, 63', '%67 = xor i64 %64, %66', '%68 = add nuw nsw i64 %67, %66', '%69 = icmp eq i64 %68, 2', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %38, align 1', '%.v = select i1 %50, i64 11, i64 24', '%71 = add i64 %45, %.v', 'store i64 %71, i64* %3, align 8', '%73 = add i64 %71, 8', 'store i64 %73, i64* %3, align 8', '%75 = load i64, i64* %3, align 8', '%76 = add i64 %75, 49', 'store i64 %76, i64* %3, align 8', '%77 = add i64 %71, 4', 'store i64 %77, i64* %3, align 8', '%78 = load i64, i64* %47, align 8', '%79 = add i64 %78, -2', 'store i64 %79, i64* %RAX.i31, align 8', '%80 = icmp ult i64 %78, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %14, align 1', '%82 = trunc i64 %79 to i32', '%83 = and i32 %82, 255', '%84 = tail call i32 @llvm.ctpop.i32(i32 %83)', '%85 = trunc i32 %84 to i8', '%86 = and i8 %85, 1', '%87 = xor i8 %86, 1', 'store i8 %87, i8* %21, align 1', '%88 = xor i64 %79, %78', '%89 = lshr i64 %88, 4', '%90 = trunc i64 %89 to i8', '%91 = and i8 %90, 1', 'store i8 %91, i8* %26, align 1', '%92 = icmp eq i64 %79, 0', '%93 = zext i1 %92 to i8', 'store i8 %93, i8* %29, align 1', '%94 = lshr i64 %79, 63', '%95 = trunc i64 %94 to i8', 'store i8 %95, i8* %32, align 1', '%96 = lshr i64 %78, 63', '%97 = xor i64 %94, %96', '%98 = add nuw nsw i64 %97, %96', '%99 = icmp eq i64 %98, 2', '%100 = zext i1 %99 to i8', 'store i8 %100, i8* %38, align 1', 'store i64 %79, i64* %RDI.i40, align 8', '%101 = add i64 %71, -36', '%102 = add i64 %71, 16', '%103 = load i64, i64* %6, align 8', '%104 = add i64 %103, -8', '%105 = inttoptr i64 %104 to i64*', 'store i64 %102, i64* %105, align 8', 'store i64 %104, i64* %6, align 8', 'store i64 %101, i64* %3, align 8', '%call2_40058f = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)', '%106 = load i64, i64* %RBP.i, align 8', '%107 = add i64 %106, -16', '%109 = add i64 %108, 4', 'store i64 %109, i64* %3, align 8', '%110 = inttoptr i64 %107 to i64*', '%111 = load i64, i64* %110, align 8', '%112 = add i64 %111, -1', 'store i64 %112, i64* %RDI.i40, align 8', '%113 = icmp eq i64 %111, 0', '%114 = zext i1 %113 to i8', 'store i8 %114, i8* %14, align 1', '%115 = trunc i64 %112 to i32', '%116 = and i32 %115, 255', '%117 = tail call i32 @llvm.ctpop.i32(i32 %116)', '%118 = trunc i32 %117 to i8', '%119 = and i8 %118, 1', '%120 = xor i8 %119, 1', 'store i8 %120, i8* %21, align 1', '%121 = xor i64 %112, %111', '%122 = lshr i64 %121, 4', '%123 = trunc i64 %122 to i8', '%124 = and i8 %123, 1', 'store i8 %124, i8* %26, align 1', '%125 = icmp eq i64 %112, 0', '%126 = zext i1 %125 to i8', 'store i8 %126, i8* %29, align 1', '%127 = lshr i64 %112, 63', '%128 = trunc i64 %127 to i8', 'store i8 %128, i8* %32, align 1', '%129 = lshr i64 %111, 63', '%130 = xor i64 %127, %129', '%131 = add nuw nsw i64 %130, %129', '%132 = icmp eq i64 %131, 2', '%133 = zext i1 %132 to i8', 'store i8 %133, i8* %38, align 1', '%134 = add i64 %106, -24', '%135 = load i64, i64* %RAX.i31, align 8', '%136 = add i64 %108, 12', 'store i64 %136, i64* %3, align 8', '%137 = inttoptr i64 %134 to i64*', 'store i64 %135, i64* %137, align 8', '%138 = load i64, i64* %3, align 8', '%139 = add i64 %138, -64', '%140 = add i64 %138, 5', '%141 = load i64, i64* %6, align 8', '%142 = add i64 %141, -8', '%143 = inttoptr i64 %142 to i64*', 'store i64 %140, i64* %143, align 8', 'store i64 %142, i64* %6, align 8', 'store i64 %139, i64* %3, align 8', '%call2_4005a0 = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %139, %struct.Memory* %call2_40058f)', '%144 = load i64, i64* %RBP.i, align 8', '%145 = add i64 %144, -24', '%147 = add i64 %146, 4', 'store i64 %147, i64* %3, align 8', '%148 = inttoptr i64 %145 to i64*', '%149 = load i64, i64* %148, align 8', '%150 = load i64, i64* %RAX.i31, align 8', '%151 = add i64 %150, %149', 'store i64 %151, i64* %RDI.i40, align 8', '%152 = icmp ult i64 %151, %149', '%153 = icmp ult i64 %151, %150', '%154 = or i1 %152, %153', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %14, align 1', '%156 = trunc i64 %151 to i32', '%157 = and i32 %156, 255', '%158 = tail call i32 @llvm.ctpop.i32(i32 %157)', '%159 = trunc i32 %158 to i8', '%160 = and i8 %159, 1', '%161 = xor i8 %160, 1', 'store i8 %161, i8* %21, align 1', '%162 = xor i64 %150, %149', '%163 = xor i64 %162, %151', '%164 = lshr i64 %163, 4', '%165 = trunc i64 %164 to i8', '%166 = and i8 %165, 1', 'store i8 %166, i8* %26, align 1', '%167 = icmp eq i64 %151, 0', '%168 = zext i1 %167 to i8', 'store i8 %168, i8* %29, align 1', '%169 = lshr i64 %151, 63', '%170 = trunc i64 %169 to i8', 'store i8 %170, i8* %32, align 1', '%171 = lshr i64 %149, 63', '%172 = lshr i64 %150, 63', '%173 = xor i64 %169, %171', '%174 = xor i64 %169, %172', '%175 = add nuw nsw i64 %173, %174', '%176 = icmp eq i64 %175, 2', '%177 = zext i1 %176 to i8', 'store i8 %177, i8* %38, align 1', '%178 = add i64 %144, -8', '%179 = add i64 %146, 11', 'store i64 %179, i64* %3, align 8', '%180 = inttoptr i64 %178 to i64*', 'store i64 %151, i64* %180, align 8', '%.pre = load i64, i64* %3, align 8', '%181 = phi i64 [ %.pre, %block_.L_400584 ], [ %76, %block_400577 ]', '%MEMORY.0 = phi %struct.Memory* [ %call2_4005a0, %block_.L_400584 ], [ %2, %block_400577 ]', '%184 = add i64 %181, 4', 'store i64 %184, i64* %3, align 8', '%187 = load i64, i64* %6, align 8', '%188 = add i64 %187, 32', 'store i64 %188, i64* %6, align 8', '%189 = icmp ugt i64 %187, -33', '%190 = zext i1 %189 to i8', 'store i8 %190, i8* %14, align 1', '%191 = trunc i64 %188 to i32', '%192 = and i32 %191, 255', '%193 = tail call i32 @llvm.ctpop.i32(i32 %192)', '%194 = trunc i32 %193 to i8', '%195 = and i8 %194, 1', '%196 = xor i8 %195, 1', 'store i8 %196, i8* %21, align 1', '%197 = xor i64 %188, %187', '%198 = lshr i64 %197, 4', '%199 = trunc i64 %198 to i8', '%200 = and i8 %199, 1', 'store i8 %200, i8* %26, align 1', '%201 = icmp eq i64 %188, 0', '%202 = zext i1 %201 to i8', 'store i8 %202, i8* %29, align 1', '%203 = lshr i64 %188, 63', '%204 = trunc i64 %203 to i8', 'store i8 %204, i8* %32, align 1', '%205 = lshr i64 %187, 63', '%206 = xor i64 %203, %205', '%207 = add nuw nsw i64 %206, %203', '%208 = icmp eq i64 %207, 2', '%209 = zext i1 %208 to i8', 'store i8 %209, i8* %38, align 1', '%210 = add i64 %181, 9', 'store i64 %210, i64* %3, align 8', '%211 = add i64 %187, 40', '%212 = inttoptr i64 %188 to i64*', '%213 = load i64, i64* %212, align 8', 'store i64 %213, i64* %RBP.i, align 8', 'store i64 %211, i64* %6, align 8', '%214 = add i64 %181, 10', 'store i64 %214, i64* %3, align 8', '%215 = inttoptr i64 %211 to i64*', '%216 = load i64, i64* %215, align 8', 'store i64 %216, i64* %3, align 8', '%217 = add i64 %187, 48', 'store i64 %217, i64* %6, align 8', 'ret %struct.Memory* %MEMORY.0'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RDI.i40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -24
Found line to remove! %40 = load i64, i64* %RDI.i40, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Keep: %43 = load i64, i64* %RBP.i, align 8
Keep: %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %3, align 8
Found line to remove! %46 = add i64 %45, 5
Found line to remove! store i64 %46, i64* %3, align 8
Keep: %47 = inttoptr i64 %44 to i64*
Keep: %48 = load i64, i64* %47, align 8
Found line to remove! %49 = add i64 %48, -2
Keep: %50 = icmp ult i64 %48, 2
Found line to remove! %51 = zext i1 %50 to i8
Found line to remove! store i8 %51, i8* %14, align 1
Found line to remove! %52 = trunc i64 %49 to i32
Found line to remove! %53 = and i32 %52, 255
Found line to remove! %54 = tail call i32 @llvm.ctpop.i32(i32 %53)
Found line to remove! %55 = trunc i32 %54 to i8
Found line to remove! %56 = and i8 %55, 1
Found line to remove! %57 = xor i8 %56, 1
Found line to remove! store i8 %57, i8* %21, align 1
Found line to remove! %58 = xor i64 %49, %48
Found line to remove! %59 = lshr i64 %58, 4
Found line to remove! %60 = trunc i64 %59 to i8
Found line to remove! %61 = and i8 %60, 1
Found line to remove! store i8 %61, i8* %26, align 1
Found line to remove! %62 = icmp eq i64 %49, 0
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %29, align 1
Found line to remove! %64 = lshr i64 %49, 63
Found line to remove! %65 = trunc i64 %64 to i8
Found line to remove! store i8 %65, i8* %32, align 1
Found line to remove! %66 = lshr i64 %48, 63
Found line to remove! %67 = xor i64 %64, %66
Found line to remove! %68 = add nuw nsw i64 %67, %66
Found line to remove! %69 = icmp eq i64 %68, 2
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %38, align 1
Found line to remove! %.v = select i1 %50, i64 11, i64 24
Found line to remove! %71 = add i64 %45, %.v
Found line to remove! store i64 %71, i64* %3, align 8
Keep: br i1 %50, label %block_400577, label %block_.L_400584
Keep: 
Keep: block_400577:                                     ; preds = %entry
Keep: %72 = add i64 %43, -8
Found line to remove! %73 = add i64 %71, 8
Found line to remove! store i64 %73, i64* %3, align 8
Keep: %74 = inttoptr i64 %72 to i64*
Keep: store i64 1, i64* %74, align 8
Found line to remove! %75 = load i64, i64* %3, align 8
Found line to remove! %76 = add i64 %75, 49
Found line to remove! store i64 %76, i64* %3, align 8
Keep: %.pre1 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Keep: br label %block_.L_4005b0
Keep: 
Keep: block_.L_400584:                                  ; preds = %entry
Keep: %RAX.i31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %77 = add i64 %71, 4
Found line to remove! store i64 %77, i64* %3, align 8
Found line to remove! %78 = load i64, i64* %47, align 8
Found line to remove! %79 = add i64 %78, -2
Found line to remove! store i64 %79, i64* %RAX.i31, align 8
Found line to remove! %80 = icmp ult i64 %78, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %14, align 1
Found line to remove! %82 = trunc i64 %79 to i32
Found line to remove! %83 = and i32 %82, 255
Found line to remove! %84 = tail call i32 @llvm.ctpop.i32(i32 %83)
Found line to remove! %85 = trunc i32 %84 to i8
Found line to remove! %86 = and i8 %85, 1
Found line to remove! %87 = xor i8 %86, 1
Found line to remove! store i8 %87, i8* %21, align 1
Found line to remove! %88 = xor i64 %79, %78
Found line to remove! %89 = lshr i64 %88, 4
Found line to remove! %90 = trunc i64 %89 to i8
Found line to remove! %91 = and i8 %90, 1
Found line to remove! store i8 %91, i8* %26, align 1
Found line to remove! %92 = icmp eq i64 %79, 0
Found line to remove! %93 = zext i1 %92 to i8
Found line to remove! store i8 %93, i8* %29, align 1
Found line to remove! %94 = lshr i64 %79, 63
Found line to remove! %95 = trunc i64 %94 to i8
Found line to remove! store i8 %95, i8* %32, align 1
Found line to remove! %96 = lshr i64 %78, 63
Found line to remove! %97 = xor i64 %94, %96
Found line to remove! %98 = add nuw nsw i64 %97, %96
Found line to remove! %99 = icmp eq i64 %98, 2
Found line to remove! %100 = zext i1 %99 to i8
Found line to remove! store i8 %100, i8* %38, align 1
Found line to remove! store i64 %79, i64* %RDI.i40, align 8
Found line to remove! %101 = add i64 %71, -36
Found line to remove! %102 = add i64 %71, 16
Found line to remove! %103 = load i64, i64* %6, align 8
Found line to remove! %104 = add i64 %103, -8
Found line to remove! %105 = inttoptr i64 %104 to i64*
Found line to remove! store i64 %102, i64* %105, align 8
Found line to remove! store i64 %104, i64* %6, align 8
Found line to remove! store i64 %101, i64* %3, align 8
Found line to remove! %call2_40058f = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %101, %struct.Memory* %2)
Found line to remove! %106 = load i64, i64* %RBP.i, align 8
Found line to remove! %107 = add i64 %106, -16
Keep: %108 = load i64, i64* %3, align 8
Found line to remove! %109 = add i64 %108, 4
Found line to remove! store i64 %109, i64* %3, align 8
Found line to remove! %110 = inttoptr i64 %107 to i64*
Found line to remove! %111 = load i64, i64* %110, align 8
Found line to remove! %112 = add i64 %111, -1
Found line to remove! store i64 %112, i64* %RDI.i40, align 8
Found line to remove! %113 = icmp eq i64 %111, 0
Found line to remove! %114 = zext i1 %113 to i8
Found line to remove! store i8 %114, i8* %14, align 1
Found line to remove! %115 = trunc i64 %112 to i32
Found line to remove! %116 = and i32 %115, 255
Found line to remove! %117 = tail call i32 @llvm.ctpop.i32(i32 %116)
Found line to remove! %118 = trunc i32 %117 to i8
Found line to remove! %119 = and i8 %118, 1
Found line to remove! %120 = xor i8 %119, 1
Found line to remove! store i8 %120, i8* %21, align 1
Found line to remove! %121 = xor i64 %112, %111
Found line to remove! %122 = lshr i64 %121, 4
Found line to remove! %123 = trunc i64 %122 to i8
Found line to remove! %124 = and i8 %123, 1
Found line to remove! store i8 %124, i8* %26, align 1
Found line to remove! %125 = icmp eq i64 %112, 0
Found line to remove! %126 = zext i1 %125 to i8
Found line to remove! store i8 %126, i8* %29, align 1
Found line to remove! %127 = lshr i64 %112, 63
Found line to remove! %128 = trunc i64 %127 to i8
Found line to remove! store i8 %128, i8* %32, align 1
Found line to remove! %129 = lshr i64 %111, 63
Found line to remove! %130 = xor i64 %127, %129
Found line to remove! %131 = add nuw nsw i64 %130, %129
Found line to remove! %132 = icmp eq i64 %131, 2
Found line to remove! %133 = zext i1 %132 to i8
Found line to remove! store i8 %133, i8* %38, align 1
Found line to remove! %134 = add i64 %106, -24
Found line to remove! %135 = load i64, i64* %RAX.i31, align 8
Found line to remove! %136 = add i64 %108, 12
Found line to remove! store i64 %136, i64* %3, align 8
Found line to remove! %137 = inttoptr i64 %134 to i64*
Found line to remove! store i64 %135, i64* %137, align 8
Found line to remove! %138 = load i64, i64* %3, align 8
Found line to remove! %139 = add i64 %138, -64
Found line to remove! %140 = add i64 %138, 5
Found line to remove! %141 = load i64, i64* %6, align 8
Found line to remove! %142 = add i64 %141, -8
Found line to remove! %143 = inttoptr i64 %142 to i64*
Found line to remove! store i64 %140, i64* %143, align 8
Found line to remove! store i64 %142, i64* %6, align 8
Found line to remove! store i64 %139, i64* %3, align 8
Found line to remove! %call2_4005a0 = tail call %struct.Memory* @sub_400560.fib(%struct.State* nonnull %0, i64 %139, %struct.Memory* %call2_40058f)
Found line to remove! %144 = load i64, i64* %RBP.i, align 8
Found line to remove! %145 = add i64 %144, -24
Keep: %146 = load i64, i64* %3, align 8
Found line to remove! %147 = add i64 %146, 4
Found line to remove! store i64 %147, i64* %3, align 8
Found line to remove! %148 = inttoptr i64 %145 to i64*
Found line to remove! %149 = load i64, i64* %148, align 8
Found line to remove! %150 = load i64, i64* %RAX.i31, align 8
Found line to remove! %151 = add i64 %150, %149
Found line to remove! store i64 %151, i64* %RDI.i40, align 8
Found line to remove! %152 = icmp ult i64 %151, %149
Found line to remove! %153 = icmp ult i64 %151, %150
Found line to remove! %154 = or i1 %152, %153
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %14, align 1
Found line to remove! %156 = trunc i64 %151 to i32
Found line to remove! %157 = and i32 %156, 255
Found line to remove! %158 = tail call i32 @llvm.ctpop.i32(i32 %157)
Found line to remove! %159 = trunc i32 %158 to i8
Found line to remove! %160 = and i8 %159, 1
Found line to remove! %161 = xor i8 %160, 1
Found line to remove! store i8 %161, i8* %21, align 1
Found line to remove! %162 = xor i64 %150, %149
Found line to remove! %163 = xor i64 %162, %151
Found line to remove! %164 = lshr i64 %163, 4
Found line to remove! %165 = trunc i64 %164 to i8
Found line to remove! %166 = and i8 %165, 1
Found line to remove! store i8 %166, i8* %26, align 1
Found line to remove! %167 = icmp eq i64 %151, 0
Found line to remove! %168 = zext i1 %167 to i8
Found line to remove! store i8 %168, i8* %29, align 1
Found line to remove! %169 = lshr i64 %151, 63
Found line to remove! %170 = trunc i64 %169 to i8
Found line to remove! store i8 %170, i8* %32, align 1
Found line to remove! %171 = lshr i64 %149, 63
Found line to remove! %172 = lshr i64 %150, 63
Found line to remove! %173 = xor i64 %169, %171
Found line to remove! %174 = xor i64 %169, %172
Found line to remove! %175 = add nuw nsw i64 %173, %174
Found line to remove! %176 = icmp eq i64 %175, 2
Found line to remove! %177 = zext i1 %176 to i8
Found line to remove! store i8 %177, i8* %38, align 1
Found line to remove! %178 = add i64 %144, -8
Found line to remove! %179 = add i64 %146, 11
Found line to remove! store i64 %179, i64* %3, align 8
Found line to remove! %180 = inttoptr i64 %178 to i64*
Found line to remove! store i64 %151, i64* %180, align 8
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_4005b0
Keep: 
Keep: block_.L_4005b0:                                  ; preds = %block_.L_400584, %block_400577
Keep: %RAX.i.pre-phi = phi i64* [ %RAX.i31, %block_.L_400584 ], [ %.pre1, %block_400577 ]
Found line to remove! %181 = phi i64 [ %.pre, %block_.L_400584 ], [ %76, %block_400577 ]
Found line to remove! %MEMORY.0 = phi %struct.Memory* [ %call2_4005a0, %block_.L_400584 ], [ %2, %block_400577 ]
Keep: %182 = load i64, i64* %RBP.i, align 8
Keep: %183 = add i64 %182, -8
Found line to remove! %184 = add i64 %181, 4
Found line to remove! store i64 %184, i64* %3, align 8
Keep: %185 = inttoptr i64 %183 to i64*
Keep: %186 = load i64, i64* %185, align 8
Keep: store i64 %186, i64* %RAX.i.pre-phi, align 8
Found line to remove! %187 = load i64, i64* %6, align 8
Found line to remove! %188 = add i64 %187, 32
Found line to remove! store i64 %188, i64* %6, align 8
Found line to remove! %189 = icmp ugt i64 %187, -33
Found line to remove! %190 = zext i1 %189 to i8
Found line to remove! store i8 %190, i8* %14, align 1
Found line to remove! %191 = trunc i64 %188 to i32
Found line to remove! %192 = and i32 %191, 255
Found line to remove! %193 = tail call i32 @llvm.ctpop.i32(i32 %192)
Found line to remove! %194 = trunc i32 %193 to i8
Found line to remove! %195 = and i8 %194, 1
Found line to remove! %196 = xor i8 %195, 1
Found line to remove! store i8 %196, i8* %21, align 1
Found line to remove! %197 = xor i64 %188, %187
Found line to remove! %198 = lshr i64 %197, 4
Found line to remove! %199 = trunc i64 %198 to i8
Found line to remove! %200 = and i8 %199, 1
Found line to remove! store i8 %200, i8* %26, align 1
Found line to remove! %201 = icmp eq i64 %188, 0
Found line to remove! %202 = zext i1 %201 to i8
Found line to remove! store i8 %202, i8* %29, align 1
Found line to remove! %203 = lshr i64 %188, 63
Found line to remove! %204 = trunc i64 %203 to i8
Found line to remove! store i8 %204, i8* %32, align 1
Found line to remove! %205 = lshr i64 %187, 63
Found line to remove! %206 = xor i64 %203, %205
Found line to remove! %207 = add nuw nsw i64 %206, %203
Found line to remove! %208 = icmp eq i64 %207, 2
Found line to remove! %209 = zext i1 %208 to i8
Found line to remove! store i8 %209, i8* %38, align 1
Found line to remove! %210 = add i64 %181, 9
Found line to remove! store i64 %210, i64* %3, align 8
Found line to remove! %211 = add i64 %187, 40
Found line to remove! %212 = inttoptr i64 %188 to i64*
Found line to remove! %213 = load i64, i64* %212, align 8
Found line to remove! store i64 %213, i64* %RBP.i, align 8
Found line to remove! store i64 %211, i64* %6, align 8
Found line to remove! %214 = add i64 %181, 10
Found line to remove! store i64 %214, i64* %3, align 8
Found line to remove! %215 = inttoptr i64 %211 to i64*
Found line to remove! %216 = load i64, i64* %215, align 8
Found line to remove! store i64 %216, i64* %3, align 8
Found line to remove! %217 = add i64 %187, 48
Found line to remove! store i64 %217, i64* %6, align 8
Found line to remove! ret %struct.Memory* %MEMORY.0
TO REMOVE: dict_keys(['%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = load i64, i64* %RSP, align 8', '%6 = add i64 %5, -8', '%7 = inttoptr i64 %6 to i64*', 'store i64 %3, i64* %7, align 8', 'store i64 %6, i64* %RBP, align 8', '%9 = add i64 %5, -40', 'store i64 %9, i64* %RSP, align 8', '%10 = icmp ult i64 %6, 32', '%11 = zext i1 %10 to i8', '%12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %11, i8* %12, align 1', '%13 = trunc i64 %9 to i32', '%14 = and i32 %13, 255', '%15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12', '%16 = trunc i32 %15 to i8', '%17 = and i8 %16, 1', '%18 = xor i8 %17, 1', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %18, i8* %19, align 1', '%20 = xor i64 %6, %9', '%21 = lshr i64 %20, 4', '%22 = trunc i64 %21 to i8', '%23 = and i8 %22, 1', '%24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %23, i8* %24, align 1', '%25 = icmp eq i64 %9, 0', '%26 = zext i1 %25 to i8', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %26, i8* %27, align 1', '%28 = lshr i64 %9, 63', '%29 = trunc i64 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %6, 63', '%32 = xor i64 %28, %31', '%33 = add nuw nsw i64 %32, %31', '%34 = icmp eq i64 %33, 2', '%35 = zext i1 %34 to i8', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %35, i8* %36, align 1', '%37 = add i64 %5, -24', '%38 = load i64, i64* %RDI, align 8', '%39 = add i64 %8, 11', 'store i64 %39, i64* %PC, align 8', '%40 = inttoptr i64 %37 to i64*', 'store i64 %38, i64* %40, align 8', '%43 = load i64, i64* %PC, align 8', '%44 = add i64 %43, 5', 'store i64 %44, i64* %PC, align 8', '%47 = add i64 %46, -2', '%49 = zext i1 %48 to i8', 'store i8 %49, i8* %12, align 1', '%50 = trunc i64 %47 to i32', '%51 = and i32 %50, 255', '%52 = tail call i32 @llvm.ctpop.i32(i32 %51) #12', '%53 = trunc i32 %52 to i8', '%54 = and i8 %53, 1', '%55 = xor i8 %54, 1', 'store i8 %55, i8* %19, align 1', '%56 = xor i64 %47, %46', '%57 = lshr i64 %56, 4', '%58 = trunc i64 %57 to i8', '%59 = and i8 %58, 1', 'store i8 %59, i8* %24, align 1', '%60 = icmp eq i64 %47, 0', '%61 = zext i1 %60 to i8', 'store i8 %61, i8* %27, align 1', '%62 = lshr i64 %47, 63', '%63 = trunc i64 %62 to i8', 'store i8 %63, i8* %30, align 1', '%64 = lshr i64 %46, 63', '%65 = xor i64 %62, %64', '%66 = add nuw nsw i64 %65, %64', '%67 = icmp eq i64 %66, 2', '%68 = zext i1 %67 to i8', 'store i8 %68, i8* %36, align 1', '%.v = select i1 %48, i64 11, i64 24', '%69 = add i64 %43, %.v', 'store i64 %69, i64* %PC, align 8', '%71 = add i64 %69, 8', 'store i64 %71, i64* %PC, align 8', '%73 = load i64, i64* %PC, align 8', '%74 = add i64 %73, 49', 'store i64 %74, i64* %PC, align 8', '%75 = add i64 %69, 4', 'store i64 %75, i64* %PC, align 8', '%76 = load i64, i64* %45, align 8', '%77 = add i64 %76, -2', 'store i64 %77, i64* %RAX, align 8', '%78 = icmp ult i64 %76, 2', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %12, align 1', '%80 = trunc i64 %77 to i32', '%81 = and i32 %80, 255', '%82 = tail call i32 @llvm.ctpop.i32(i32 %81) #12', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', '%85 = xor i8 %84, 1', 'store i8 %85, i8* %19, align 1', '%86 = xor i64 %77, %76', '%87 = lshr i64 %86, 4', '%88 = trunc i64 %87 to i8', '%89 = and i8 %88, 1', 'store i8 %89, i8* %24, align 1', '%90 = icmp eq i64 %77, 0', '%91 = zext i1 %90 to i8', 'store i8 %91, i8* %27, align 1', '%92 = lshr i64 %77, 63', '%93 = trunc i64 %92 to i8', 'store i8 %93, i8* %30, align 1', '%94 = lshr i64 %76, 63', '%95 = xor i64 %92, %94', '%96 = add nuw nsw i64 %95, %94', '%97 = icmp eq i64 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %36, align 1', 'store i64 %77, i64* %RDI, align 8', '%99 = add i64 %69, -36', '%100 = add i64 %69, 16', '%101 = load i64, i64* %RSP, align 8', '%102 = add i64 %101, -8', '%103 = inttoptr i64 %102 to i64*', 'store i64 %100, i64* %103, align 8', 'store i64 %102, i64* %RSP, align 8', 'store i64 %99, i64* %PC, align 8', '%104 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %99, %struct.Memory* %2)', '%105 = load i64, i64* %RBP, align 8', '%106 = add i64 %105, -16', '%108 = add i64 %107, 4', 'store i64 %108, i64* %PC, align 8', '%109 = inttoptr i64 %106 to i64*', '%110 = load i64, i64* %109, align 8', '%111 = add i64 %110, -1', 'store i64 %111, i64* %RDI, align 8', '%112 = icmp eq i64 %110, 0', '%113 = zext i1 %112 to i8', 'store i8 %113, i8* %12, align 1', '%114 = trunc i64 %111 to i32', '%115 = and i32 %114, 255', '%116 = tail call i32 @llvm.ctpop.i32(i32 %115) #12', '%117 = trunc i32 %116 to i8', '%118 = and i8 %117, 1', '%119 = xor i8 %118, 1', 'store i8 %119, i8* %19, align 1', '%120 = xor i64 %111, %110', '%121 = lshr i64 %120, 4', '%122 = trunc i64 %121 to i8', '%123 = and i8 %122, 1', 'store i8 %123, i8* %24, align 1', '%124 = icmp eq i64 %111, 0', '%125 = zext i1 %124 to i8', 'store i8 %125, i8* %27, align 1', '%126 = lshr i64 %111, 63', '%127 = trunc i64 %126 to i8', 'store i8 %127, i8* %30, align 1', '%128 = lshr i64 %110, 63', '%129 = xor i64 %126, %128', '%130 = add nuw nsw i64 %129, %128', '%131 = icmp eq i64 %130, 2', '%132 = zext i1 %131 to i8', 'store i8 %132, i8* %36, align 1', '%133 = add i64 %105, -24', '%134 = load i64, i64* %RAX, align 8', '%135 = add i64 %107, 12', 'store i64 %135, i64* %PC, align 8', '%136 = inttoptr i64 %133 to i64*', 'store i64 %134, i64* %136, align 8', '%137 = load i64, i64* %PC, align 8', '%138 = add i64 %137, -64', '%139 = add i64 %137, 5', '%140 = load i64, i64* %RSP, align 8', '%141 = add i64 %140, -8', '%142 = inttoptr i64 %141 to i64*', 'store i64 %139, i64* %142, align 8', 'store i64 %141, i64* %RSP, align 8', 'store i64 %138, i64* %PC, align 8', '%143 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %138, %struct.Memory* %104)', '%144 = load i64, i64* %RBP, align 8', '%145 = add i64 %144, -24', '%147 = add i64 %146, 4', 'store i64 %147, i64* %PC, align 8', '%148 = inttoptr i64 %145 to i64*', '%149 = load i64, i64* %148, align 8', '%150 = load i64, i64* %RAX, align 8', '%151 = add i64 %150, %149', 'store i64 %151, i64* %RDI, align 8', '%152 = icmp ult i64 %151, %149', '%153 = icmp ult i64 %151, %150', '%154 = or i1 %152, %153', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %12, align 1', '%156 = trunc i64 %151 to i32', '%157 = and i32 %156, 255', '%158 = tail call i32 @llvm.ctpop.i32(i32 %157) #12', '%159 = trunc i32 %158 to i8', '%160 = and i8 %159, 1', '%161 = xor i8 %160, 1', 'store i8 %161, i8* %19, align 1', '%162 = xor i64 %150, %149', '%163 = xor i64 %162, %151', '%164 = lshr i64 %163, 4', '%165 = trunc i64 %164 to i8', '%166 = and i8 %165, 1', 'store i8 %166, i8* %24, align 1', '%167 = icmp eq i64 %151, 0', '%168 = zext i1 %167 to i8', 'store i8 %168, i8* %27, align 1', '%169 = lshr i64 %151, 63', '%170 = trunc i64 %169 to i8', 'store i8 %170, i8* %30, align 1', '%171 = lshr i64 %149, 63', '%172 = lshr i64 %150, 63', '%173 = xor i64 %169, %171', '%174 = xor i64 %169, %172', '%175 = add nuw nsw i64 %173, %174', '%176 = icmp eq i64 %175, 2', '%177 = zext i1 %176 to i8', 'store i8 %177, i8* %36, align 1', '%178 = add i64 %144, -8', '%179 = add i64 %146, 11', 'store i64 %179, i64* %PC, align 8', '%180 = inttoptr i64 %178 to i64*', 'store i64 %151, i64* %180, align 8', '%.pre = load i64, i64* %PC, align 8', '%181 = phi i64 [ %.pre, %block_400584 ], [ %74, %block_400577 ]', '%MEMORY.0 = phi %struct.Memory* [ %143, %block_400584 ], [ %2, %block_400577 ]', '%184 = add i64 %181, 4', 'store i64 %184, i64* %PC, align 8', '%187 = load i64, i64* %RSP, align 8', '%188 = add i64 %187, 32', 'store i64 %188, i64* %RSP, align 8', '%189 = icmp ugt i64 %187, -33', '%190 = zext i1 %189 to i8', 'store i8 %190, i8* %12, align 1', '%191 = trunc i64 %188 to i32', '%192 = and i32 %191, 255', '%193 = tail call i32 @llvm.ctpop.i32(i32 %192) #12', '%194 = trunc i32 %193 to i8', '%195 = and i8 %194, 1', '%196 = xor i8 %195, 1', 'store i8 %196, i8* %19, align 1', '%197 = xor i64 %188, %187', '%198 = lshr i64 %197, 4', '%199 = trunc i64 %198 to i8', '%200 = and i8 %199, 1', 'store i8 %200, i8* %24, align 1', '%201 = icmp eq i64 %188, 0', '%202 = zext i1 %201 to i8', 'store i8 %202, i8* %27, align 1', '%203 = lshr i64 %188, 63', '%204 = trunc i64 %203 to i8', 'store i8 %204, i8* %30, align 1', '%205 = lshr i64 %187, 63', '%206 = xor i64 %203, %205', '%207 = add nuw nsw i64 %206, %203', '%208 = icmp eq i64 %207, 2', '%209 = zext i1 %208 to i8', 'store i8 %209, i8* %36, align 1', '%210 = add i64 %181, 9', 'store i64 %210, i64* %PC, align 8', '%211 = add i64 %187, 40', '%212 = inttoptr i64 %188 to i64*', '%213 = load i64, i64* %212, align 8', 'store i64 %213, i64* %RBP, align 8', 'store i64 %211, i64* %RSP, align 8', '%214 = add i64 %181, 10', 'store i64 %214, i64* %PC, align 8', '%215 = inttoptr i64 %211 to i64*', '%216 = load i64, i64* %215, align 8', 'store i64 %216, i64* %PC, align 8', '%217 = add i64 %187, 48', 'store i64 %217, i64* %RSP, align 8', 'ret %struct.Memory* %MEMORY.0'])
Keep: block_400560:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = load i64, i64* %RSP, align 8
Found line to remove! %6 = add i64 %5, -8
Found line to remove! %7 = inttoptr i64 %6 to i64*
Found line to remove! store i64 %3, i64* %7, align 8
Keep: %8 = load i64, i64* %PC, align 8
Found line to remove! store i64 %6, i64* %RBP, align 8
Found line to remove! %9 = add i64 %5, -40
Found line to remove! store i64 %9, i64* %RSP, align 8
Found line to remove! %10 = icmp ult i64 %6, 32
Found line to remove! %11 = zext i1 %10 to i8
Found line to remove! %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %11, i8* %12, align 1
Found line to remove! %13 = trunc i64 %9 to i32
Found line to remove! %14 = and i32 %13, 255
Found line to remove! %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
Found line to remove! %16 = trunc i32 %15 to i8
Found line to remove! %17 = and i8 %16, 1
Found line to remove! %18 = xor i8 %17, 1
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %18, i8* %19, align 1
Found line to remove! %20 = xor i64 %6, %9
Found line to remove! %21 = lshr i64 %20, 4
Found line to remove! %22 = trunc i64 %21 to i8
Found line to remove! %23 = and i8 %22, 1
Found line to remove! %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %23, i8* %24, align 1
Found line to remove! %25 = icmp eq i64 %9, 0
Found line to remove! %26 = zext i1 %25 to i8
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = lshr i64 %9, 63
Found line to remove! %29 = trunc i64 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %6, 63
Found line to remove! %32 = xor i64 %28, %31
Found line to remove! %33 = add nuw nsw i64 %32, %31
Found line to remove! %34 = icmp eq i64 %33, 2
Found line to remove! %35 = zext i1 %34 to i8
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %35, i8* %36, align 1
Found line to remove! %37 = add i64 %5, -24
Found line to remove! %38 = load i64, i64* %RDI, align 8
Found line to remove! %39 = add i64 %8, 11
Found line to remove! store i64 %39, i64* %PC, align 8
Found line to remove! %40 = inttoptr i64 %37 to i64*
Found line to remove! store i64 %38, i64* %40, align 8
Keep: %41 = load i64, i64* %RBP, align 8
Keep: %42 = add i64 %41, -16
Found line to remove! %43 = load i64, i64* %PC, align 8
Found line to remove! %44 = add i64 %43, 5
Found line to remove! store i64 %44, i64* %PC, align 8
Keep: %45 = inttoptr i64 %42 to i64*
Keep: %46 = load i64, i64* %45, align 8
Found line to remove! %47 = add i64 %46, -2
Keep: %48 = icmp ult i64 %46, 2
Found line to remove! %49 = zext i1 %48 to i8
Found line to remove! store i8 %49, i8* %12, align 1
Found line to remove! %50 = trunc i64 %47 to i32
Found line to remove! %51 = and i32 %50, 255
Found line to remove! %52 = tail call i32 @llvm.ctpop.i32(i32 %51) #12
Found line to remove! %53 = trunc i32 %52 to i8
Found line to remove! %54 = and i8 %53, 1
Found line to remove! %55 = xor i8 %54, 1
Found line to remove! store i8 %55, i8* %19, align 1
Found line to remove! %56 = xor i64 %47, %46
Found line to remove! %57 = lshr i64 %56, 4
Found line to remove! %58 = trunc i64 %57 to i8
Found line to remove! %59 = and i8 %58, 1
Found line to remove! store i8 %59, i8* %24, align 1
Found line to remove! %60 = icmp eq i64 %47, 0
Found line to remove! %61 = zext i1 %60 to i8
Found line to remove! store i8 %61, i8* %27, align 1
Found line to remove! %62 = lshr i64 %47, 63
Found line to remove! %63 = trunc i64 %62 to i8
Found line to remove! store i8 %63, i8* %30, align 1
Found line to remove! %64 = lshr i64 %46, 63
Found line to remove! %65 = xor i64 %62, %64
Found line to remove! %66 = add nuw nsw i64 %65, %64
Found line to remove! %67 = icmp eq i64 %66, 2
Found line to remove! %68 = zext i1 %67 to i8
Found line to remove! store i8 %68, i8* %36, align 1
Found line to remove! %.v = select i1 %48, i64 11, i64 24
Found line to remove! %69 = add i64 %43, %.v
Found line to remove! store i64 %69, i64* %PC, align 8
Keep: br i1 %48, label %block_400577, label %block_400584
Keep: 
Keep: block_400577:                                     ; preds = %block_400560
Keep: %70 = add i64 %41, -8
Found line to remove! %71 = add i64 %69, 8
Found line to remove! store i64 %71, i64* %PC, align 8
Keep: %72 = inttoptr i64 %70 to i64*
Keep: store i64 1, i64* %72, align 8
Found line to remove! %73 = load i64, i64* %PC, align 8
Found line to remove! %74 = add i64 %73, 49
Found line to remove! store i64 %74, i64* %PC, align 8
Keep: br label %block_4005b0
Keep: 
Keep: block_400584:                                     ; preds = %block_400560
Found line to remove! %75 = add i64 %69, 4
Found line to remove! store i64 %75, i64* %PC, align 8
Found line to remove! %76 = load i64, i64* %45, align 8
Found line to remove! %77 = add i64 %76, -2
Found line to remove! store i64 %77, i64* %RAX, align 8
Found line to remove! %78 = icmp ult i64 %76, 2
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %12, align 1
Found line to remove! %80 = trunc i64 %77 to i32
Found line to remove! %81 = and i32 %80, 255
Found line to remove! %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #12
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! %85 = xor i8 %84, 1
Found line to remove! store i8 %85, i8* %19, align 1
Found line to remove! %86 = xor i64 %77, %76
Found line to remove! %87 = lshr i64 %86, 4
Found line to remove! %88 = trunc i64 %87 to i8
Found line to remove! %89 = and i8 %88, 1
Found line to remove! store i8 %89, i8* %24, align 1
Found line to remove! %90 = icmp eq i64 %77, 0
Found line to remove! %91 = zext i1 %90 to i8
Found line to remove! store i8 %91, i8* %27, align 1
Found line to remove! %92 = lshr i64 %77, 63
Found line to remove! %93 = trunc i64 %92 to i8
Found line to remove! store i8 %93, i8* %30, align 1
Found line to remove! %94 = lshr i64 %76, 63
Found line to remove! %95 = xor i64 %92, %94
Found line to remove! %96 = add nuw nsw i64 %95, %94
Found line to remove! %97 = icmp eq i64 %96, 2
Found line to remove! %98 = zext i1 %97 to i8
Found line to remove! store i8 %98, i8* %36, align 1
Found line to remove! store i64 %77, i64* %RDI, align 8
Found line to remove! %99 = add i64 %69, -36
Found line to remove! %100 = add i64 %69, 16
Found line to remove! %101 = load i64, i64* %RSP, align 8
Found line to remove! %102 = add i64 %101, -8
Found line to remove! %103 = inttoptr i64 %102 to i64*
Found line to remove! store i64 %100, i64* %103, align 8
Found line to remove! store i64 %102, i64* %RSP, align 8
Found line to remove! store i64 %99, i64* %PC, align 8
Found line to remove! %104 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %99, %struct.Memory* %2)
Found line to remove! %105 = load i64, i64* %RBP, align 8
Found line to remove! %106 = add i64 %105, -16
Keep: %107 = load i64, i64* %PC, align 8
Found line to remove! %108 = add i64 %107, 4
Found line to remove! store i64 %108, i64* %PC, align 8Writing '/tmp/tmp30_oghh1.dot'...
Writing '/tmp/tmp30_oghh1.dot':Done

Reading LLVM: /tmp/tmp1j3v4b08-query.ll
Extracting function [fib] from /tmp/tmp1j3v4b08-query.ll
Dot file generated!
Writing '/tmp/tmpv9c4xwqi.dot'...
Writing '/tmp/tmpv9c4xwqi.dot':Done

Reading LLVM: /tmp/tmphvojt6fj-target.ll
Extracting function [fib] from /tmp/tmphvojt6fj-target.ll
Dot file generated!

Found line to remove! %109 = inttoptr i64 %106 to i64*
Found line to remove! %110 = load i64, i64* %109, align 8
Found line to remove! %111 = add i64 %110, -1
Found line to remove! store i64 %111, i64* %RDI, align 8
Found line to remove! %112 = icmp eq i64 %110, 0
Found line to remove! %113 = zext i1 %112 to i8
Found line to remove! store i8 %113, i8* %12, align 1
Found line to remove! %114 = trunc i64 %111 to i32
Found line to remove! %115 = and i32 %114, 255
Found line to remove! %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #12
Found line to remove! %117 = trunc i32 %116 to i8
Found line to remove! %118 = and i8 %117, 1
Found line to remove! %119 = xor i8 %118, 1
Found line to remove! store i8 %119, i8* %19, align 1
Found line to remove! %120 = xor i64 %111, %110
Found line to remove! %121 = lshr i64 %120, 4
Found line to remove! %122 = trunc i64 %121 to i8
Found line to remove! %123 = and i8 %122, 1
Found line to remove! store i8 %123, i8* %24, align 1
Found line to remove! %124 = icmp eq i64 %111, 0
Found line to remove! %125 = zext i1 %124 to i8
Found line to remove! store i8 %125, i8* %27, align 1
Found line to remove! %126 = lshr i64 %111, 63
Found line to remove! %127 = trunc i64 %126 to i8
Found line to remove! store i8 %127, i8* %30, align 1
Found line to remove! %128 = lshr i64 %110, 63
Found line to remove! %129 = xor i64 %126, %128
Found line to remove! %130 = add nuw nsw i64 %129, %128
Found line to remove! %131 = icmp eq i64 %130, 2
Found line to remove! %132 = zext i1 %131 to i8
Found line to remove! store i8 %132, i8* %36, align 1
Found line to remove! %133 = add i64 %105, -24
Found line to remove! %134 = load i64, i64* %RAX, align 8
Found line to remove! %135 = add i64 %107, 12
Found line to remove! store i64 %135, i64* %PC, align 8
Found line to remove! %136 = inttoptr i64 %133 to i64*
Found line to remove! store i64 %134, i64* %136, align 8
Found line to remove! %137 = load i64, i64* %PC, align 8
Found line to remove! %138 = add i64 %137, -64
Found line to remove! %139 = add i64 %137, 5
Found line to remove! %140 = load i64, i64* %RSP, align 8
Found line to remove! %141 = add i64 %140, -8
Found line to remove! %142 = inttoptr i64 %141 to i64*
Found line to remove! store i64 %139, i64* %142, align 8
Found line to remove! store i64 %141, i64* %RSP, align 8
Found line to remove! store i64 %138, i64* %PC, align 8
Found line to remove! %143 = tail call %struct.Memory* @sub_400560_fib_renamed_(%struct.State* nonnull %0, i64 %138, %struct.Memory* %104)
Found line to remove! %144 = load i64, i64* %RBP, align 8
Found line to remove! %145 = add i64 %144, -24
Keep: %146 = load i64, i64* %PC, align 8
Found line to remove! %147 = add i64 %146, 4
Found line to remove! store i64 %147, i64* %PC, align 8
Found line to remove! %148 = inttoptr i64 %145 to i64*
Found line to remove! %149 = load i64, i64* %148, align 8
Found line to remove! %150 = load i64, i64* %RAX, align 8
Found line to remove! %151 = add i64 %150, %149
Found line to remove! store i64 %151, i64* %RDI, align 8
Found line to remove! %152 = icmp ult i64 %151, %149
Found line to remove! %153 = icmp ult i64 %151, %150
Found line to remove! %154 = or i1 %152, %153
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %12, align 1
Found line to remove! %156 = trunc i64 %151 to i32
Found line to remove! %157 = and i32 %156, 255
Found line to remove! %158 = tail call i32 @llvm.ctpop.i32(i32 %157) #12
Found line to remove! %159 = trunc i32 %158 to i8
Found line to remove! %160 = and i8 %159, 1
Found line to remove! %161 = xor i8 %160, 1
Found line to remove! store i8 %161, i8* %19, align 1
Found line to remove! %162 = xor i64 %150, %149
Found line to remove! %163 = xor i64 %162, %151
Found line to remove! %164 = lshr i64 %163, 4
Found line to remove! %165 = trunc i64 %164 to i8
Found line to remove! %166 = and i8 %165, 1
Found line to remove! store i8 %166, i8* %24, align 1
Found line to remove! %167 = icmp eq i64 %151, 0
Found line to remove! %168 = zext i1 %167 to i8
Found line to remove! store i8 %168, i8* %27, align 1
Found line to remove! %169 = lshr i64 %151, 63
Found line to remove! %170 = trunc i64 %169 to i8
Found line to remove! store i8 %170, i8* %30, align 1
Found line to remove! %171 = lshr i64 %149, 63
Found line to remove! %172 = lshr i64 %150, 63
Found line to remove! %173 = xor i64 %169, %171
Found line to remove! %174 = xor i64 %169, %172
Found line to remove! %175 = add nuw nsw i64 %173, %174
Found line to remove! %176 = icmp eq i64 %175, 2
Found line to remove! %177 = zext i1 %176 to i8
Found line to remove! store i8 %177, i8* %36, align 1
Found line to remove! %178 = add i64 %144, -8
Found line to remove! %179 = add i64 %146, 11
Found line to remove! store i64 %179, i64* %PC, align 8
Found line to remove! %180 = inttoptr i64 %178 to i64*
Found line to remove! store i64 %151, i64* %180, align 8
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4005b0
Keep: 
Keep: block_4005b0:                                     ; preds = %block_400584, %block_400577
Found line to remove! %181 = phi i64 [ %.pre, %block_400584 ], [ %74, %block_400577 ]
Found line to remove! %MEMORY.0 = phi %struct.Memory* [ %143, %block_400584 ], [ %2, %block_400577 ]
Keep: %182 = load i64, i64* %RBP, align 8
Keep: %183 = add i64 %182, -8
Found line to remove! %184 = add i64 %181, 4
Found line to remove! store i64 %184, i64* %PC, align 8
Keep: %185 = inttoptr i64 %183 to i64*
Keep: %186 = load i64, i64* %185, align 8
Keep: store i64 %186, i64* %RAX, align 8
Found line to remove! %187 = load i64, i64* %RSP, align 8
Found line to remove! %188 = add i64 %187, 32
Found line to remove! store i64 %188, i64* %RSP, align 8
Found line to remove! %189 = icmp ugt i64 %187, -33
Found line to remove! %190 = zext i1 %189 to i8
Found line to remove! store i8 %190, i8* %12, align 1
Found line to remove! %191 = trunc i64 %188 to i32
Found line to remove! %192 = and i32 %191, 255
Found line to remove! %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #12
Found line to remove! %194 = trunc i32 %193 to i8
Found line to remove! %195 = and i8 %194, 1
Found line to remove! %196 = xor i8 %195, 1
Found line to remove! store i8 %196, i8* %19, align 1
Found line to remove! %197 = xor i64 %188, %187
Found line to remove! %198 = lshr i64 %197, 4
Found line to remove! %199 = trunc i64 %198 to i8
Found line to remove! %200 = and i8 %199, 1
Found line to remove! store i8 %200, i8* %24, align 1
Found line to remove! %201 = icmp eq i64 %188, 0
Found line to remove! %202 = zext i1 %201 to i8
Found line to remove! store i8 %202, i8* %27, align 1
Found line to remove! %203 = lshr i64 %188, 63
Found line to remove! %204 = trunc i64 %203 to i8
Found line to remove! store i8 %204, i8* %30, align 1
Found line to remove! %205 = lshr i64 %187, 63
Found line to remove! %206 = xor i64 %203, %205
Found line to remove! %207 = add nuw nsw i64 %206, %203
Found line to remove! %208 = icmp eq i64 %207, 2
Found line to remove! %209 = zext i1 %208 to i8
Found line to remove! store i8 %209, i8* %36, align 1
Found line to remove! %210 = add i64 %181, 9
Found line to remove! store i64 %210, i64* %PC, align 8
Found line to remove! %211 = add i64 %187, 40
Found line to remove! %212 = inttoptr i64 %188 to i64*
Found line to remove! %213 = load i64, i64* %212, align 8
Found line to remove! store i64 %213, i64* %RBP, align 8
Found line to remove! store i64 %211, i64* %RSP, align 8
Found line to remove! %214 = add i64 %181, 10
Found line to remove! store i64 %214, i64* %PC, align 8
Found line to remove! %215 = inttoptr i64 %211 to i64*
Found line to remove! %216 = load i64, i64* %215, align 8
Found line to remove! store i64 %216, i64* %PC, align 8
Found line to remove! %217 = add i64 %187, 48
Found line to remove! store i64 %217, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %MEMORY.0
================ Starting round 2
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_43 = load i64, i64* %RBP.i, align 8
- 2 %var_2_44 = add i64 %var_2_43, -16
- 3 %var_2_47 = inttoptr i64 %var_2_44 to i64*
- 4 %var_2_48 = load i64, i64* %var_2_47, align 8
- 5 %var_2_50 = icmp ult i64 %var_2_48, 2
- 6 \<badref\> = br i1 %var_2_50, label %block_400577, label %block_.L_4005b0
- 7 %var_2_72 = add i64 %var_2_43, -8
- 8 %var_2_74 = inttoptr i64 %var_2_72 to i64*
- 9 store i64 1, i64* %var_2_74, align 8
- 10 %var_2_182.pre = load i64, i64* %RBP.i, align 8
- 11 \<badref\> = br label %block_.L_4005b0
- 12 %var_2_182 = phi i64 [ %var_2_43, %entry ], [ %var_2_182.pre, %block_400577 ]
- 13 %RAX.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 14 %var_2_183 = add i64 %var_2_182, -8
- 15 %var_2_185 = inttoptr i64 %var_2_183 to i64*
- 16 %var_2_186 = load i64, i64* %var_2_185, align 8
- 17 store i64 %var_2_186, i64* %RAX.i.pre-phi, align 8
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6885c3158>, {0: {1}, 1: {16, 2, 11, 5}, 2: {3}, 3: {9, 4, 15}, 4: {16, 2, 11, 5}, 5: {6}, 6: {7}, 7: {8, 14}, 8: {9, 4, 15}, 9: {17, 10}, 10: {16, 2, 11, 5}, 11: {12}, 12: {13}, 13: {0}, 14: {8, 14}, 15: {9, 4, 15}, 16: {16, 2, 11, 5}, 17: {17, 10}, 18: {18}})
Equivalent! frozenset({2, 11}) {1, 10}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6885c3158>, {0: {1}, 1: {2}, 2: {3}, 3: {4}, 4: {5}, 5: {6}, 6: {7}, 7: {8}, 8: {9}, 9: {10}, 10: {11}, 11: {12}, 12: {13}, 13: {0}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 load load
EXACT 5 icmp icmp
EXACT 6 br br
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 br br
EXACT 12 phi phi
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 inttoptr inttoptr
EXACT 16 load load
EXACT 17 store store
EXACT 18 ret ret
================ Starting round 3
- 0 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %var_2_41 = load i64, i64* %RBP, align 8
- 3 %var_2_42 = add i64 %var_2_41, -16
- 4 %var_2_45 = inttoptr i64 %var_2_42 to i64*
- 5 %var_2_46 = load i64, i64* %var_2_45, align 8
- 6 %var_2_48 = icmp ult i64 %var_2_46, 2
- 7 \<badref\> = br i1 %var_2_48, label %block_400577, label %block_4005b0
- 8 %var_2_70 = add i64 %var_2_41, -8
- 9 %var_2_72 = inttoptr i64 %var_2_70 to i64*
- 10 store i64 1, i64* %var_2_72, align 8
- 11 %var_2_182.pre = load i64, i64* %RBP, align 8
- 12 \<badref\> = br label %block_4005b0
- 13 %var_2_182 = phi i64 [ %var_2_41, %block_400560 ], [ %var_2_182.pre, %block_400577 ]
- 14 %var_2_183 = add i64 %var_2_182, -8
- 15 %var_2_185 = inttoptr i64 %var_2_183 to i64*
- 16 %var_2_186 = load i64, i64* %var_2_185, align 8
- 17 store i64 %var_2_186, i64* %RAX, align 8
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6882ff7b8>, {0: {13}, 1: {0}, 2: {16, 1, 10, 4}, 3: {2}, 4: {8, 3, 15}, 5: {16, 1, 10, 4}, 6: {5}, 7: {6}, 8: {14, 7}, 9: {8, 3, 15}, 10: {9, 17}, 11: {16, 1, 10, 4}, 12: {11}, 13: {12}, 14: {14, 7}, 15: {8, 3, 15}, 16: {16, 1, 10, 4}, 17: {9, 17}, 18: {18}})
Equivalent! frozenset({1, 10}) {2, 11}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6882ff7b8>, {0: {13}, 1: {0}, 2: {1}, 3: {2}, 4: {3}, 5: {4}, 6: {5}, 7: {6}, 8: {7}, 9: {8}, 10: {9}, 11: {10}, 12: {11}, 13: {12}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
EXACT 6 icmp icmp
EXACT 7 br br
EXACT 8 add add
EXACT 9 inttoptr inttoptr
EXACT 10 store store
EXACT 11 load load
EXACT 12 br br
EXACT 13 phi phi
EXACT 14 add add
EXACT 15 inttoptr inttoptr
EXACT 16 load load
EXACT 17 store store
EXACT 18 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_72 = add i64 %var_2_43, -8', '%var_2_74 = inttoptr i64 %var_2_72 to i64*', 'store i64 1, i64* %var_2_74, align 8', '%var_2_182.pre = load i64, i64* %RBP.i, align 8', '%var_2_182 = phi i64 [ %var_2_43, %entry ], [ %var_2_182.pre, %block_400577 ]', '%RAX.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%var_2_183 = add i64 %var_2_182, -8', '%var_2_185 = inttoptr i64 %var_2_183 to i64*', '%var_2_186 = load i64, i64* %var_2_185, align 8', 'store i64 %var_2_186, i64* %RAX.i.pre-phi, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_43 = load i64, i64* %RBP.i, align 8
Keep: %var_2_44 = add i64 %var_2_43, -16
Keep: %var_2_47 = inttoptr i64 %var_2_44 to i64*
Keep: %var_2_48 = load i64, i64* %var_2_47, align 8
Keep: %var_2_50 = icmp ult i64 %var_2_48, 2
Keep: br i1 %var_2_50, label %block_400577, label %block_.L_4005b0
Keep: 
Keep: block_400577:                                     ; preds = %entry
Found line to remove! %var_2_72 = add i64 %var_2_43, -8
Found line to remove! %var_2_74 = inttoptr i64 %var_2_72 to i64*
Found line to remove! store i64 1, i64* %var_2_74, align 8
Found line to remove! %var_2_182.pre = load i64, i64* %RBP.i, align 8
Keep: br label %block_.L_4005b0
Keep: 
Keep: block_.L_4005b0:                                  ; preds = %entry, %block_400577
Found line to remove! %var_2_182 = phi i64 [ %var_2_43, %entry ], [ %var_2_182.pre, %block_400577 ]
Found line to remove! %RAX.i.pre-phi = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %var_2_183 = add i64 %var_2_182, -8
Found line to remove! %var_2_185 = inttoptr i64 %var_2_183 to i64*
Found line to remove! %var_2_186 = load i64, i64* %var_2_185, align 8
Found line to remove! store i64 %var_2_186, i64* %RAX.i.pre-phi, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%var_2_70 = add i64 %var_2_41, -8', '%var_2_72 = inttoptr i64 %var_2_70 to i64*', 'store i64 1, i64* %var_2_72, align 8', '%var_2_182.pre = load i64, i64* %RBP, align 8', '%var_2_182 = phi i64 [ %var_2_41, %block_400560 ], [ %var_2_182.pre, %block_400577 ]', '%var_2_183 = add i64 %var_2_182, -8', '%var_2_185 = inttoptr i64 %var_2_183 to i64*', '%var_2_186 = load i64, i64* %var_2_185, align 8', 'store i64 %var_2_186, i64* %RAX, align 8', 'ret %struct.Memory* %2'])
Keep: block_400560:
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_41 = load i64, i64* %RBP, align 8
Keep: %var_2_42 = add i64 %var_2_41, -16
Keep: %var_2_45 = inttoptr i64 %var_2_42 to i64*
Keep: %var_2_46 = load i64, i64* %var_2_45, align 8
Keep: %var_2_48 = icmp ult i64 %var_2_46, 2
Keep: br i1 %var_2_48, label %block_400577, label %block_4005b0
Keep: 
Keep: block_400577:                                     ; preds = %block_400560
Found line to remove! %var_2_70 = add i64 %var_2_41, -8
Found line to remove! %var_2_72 = inttoptr i64 %var_2_70 to i64*
Found line to remove! store i64 1, i64* %var_2_72, align 8
Found line to remove! %var_2_182.pre = load i64, i64* %RBP, align 8
Keep: br label %block_4005b0
Keep: 
Keep: block_4005b0:                                     ; preds = %block_400560, %block_400577
Found line to remove! %var_2_182 = phi i64 [ %var_2_41, %block_400560 ], [ %var_2_182.pre, %block_400577 ]
Found line to remove! %var_2_183 = add i64 %var_2_182, -8
Found line to remove! %var_2_185 = inttoptr i64 %var_2_183 to i64*
Found line to remove! %var_2_186 = load i64, i64* %var_2_185, align 8
Found line to remove! store i64 %var_2_186, i64* %RAX, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_32/fib/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_32/binary/test.mcsema.calls_renamed.ll fib
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
