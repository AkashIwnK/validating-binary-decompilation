Writing '/tmp/tmpenz7amew.dot'...
Writing '/tmp/tmpenz7amew.dot':Done

Reading LLVM: /tmp/tmpth13iug7-query.ll
Extracting function [foo] from /tmp/tmpth13iug7-query.ll
Dot file generated!
Writing '/tmp/tmp1pb0q5ib.dot'...
Writing '/tmp/tmp1pb0q5ib.dot':Done

Reading LLVM: /tmp/tmpr6hsr82z-target.ll
Extracting function [foo] from /tmp/tmpr6hsr82z-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 14 %11 = add i64 %7, -16
- 15 %12 = load i64, i64* %RDI.i, align 8
- 16 %13 = add i64 %10, 7
- 17 store i64 %13, i64* %3, align 8
- 18 %14 = inttoptr i64 %11 to i64*
- 19 store i64 %12, i64* %14, align 8
- 20 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 21 %ESI.i = bitcast %union.anon* %15 to i32*
- 22 %16 = load i64, i64* %RBP.i, align 8
- 23 %17 = add i64 %16, -12
- 24 %18 = load i32, i32* %ESI.i, align 4
- 25 %19 = load i64, i64* %3, align 8
- 26 %20 = add i64 %19, 3
- 27 store i64 %20, i64* %3, align 8
- 28 %21 = inttoptr i64 %17 to i32*
- 29 store i32 %18, i32* %21, align 4
- 30 %22 = load i64, i64* %RBP.i, align 8
- 31 %23 = add i64 %22, -16
- 32 %24 = load i64, i64* %3, align 8
- 33 %25 = add i64 %24, 7
- 34 store i64 %25, i64* %3, align 8
- 35 %26 = inttoptr i64 %23 to i32*
- 36 store i32 0, i32* %26, align 4
- 37 %27 = load i64, i64* %RBP.i, align 8
- 38 %28 = add i64 %27, -20
- 39 %29 = load i64, i64* %3, align 8
- 40 %30 = add i64 %29, 7
- 41 store i64 %30, i64* %3, align 8
- 42 %31 = inttoptr i64 %28 to i32*
- 43 store i32 0, i32* %31, align 4
- 44 %RAX.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 45 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 46 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 47 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 48 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 49 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 50 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 51 %RCX.i22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 52 %RDX.i20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 53 %.pre = load i64, i64* %3, align 8
- 54 \<badref\> = br label %block_.L_400609
- 55 %38 = phi i64 [ %152, %block_400615 ], [ %.pre, %entry ]
- 56 %39 = load i64, i64* %RBP.i, align 8
- 57 %40 = add i64 %39, -20
- 58 %41 = add i64 %38, 3
- 59 store i64 %41, i64* %3, align 8
- 60 %42 = inttoptr i64 %40 to i32*
- 61 %43 = load i32, i32* %42, align 4
- 62 %44 = zext i32 %43 to i64
- 63 store i64 %44, i64* %RAX.i32, align 8
- 64 %45 = add i64 %39, -12
- 65 %46 = add i64 %38, 6
- 66 store i64 %46, i64* %3, align 8
- 67 %47 = inttoptr i64 %45 to i32*
- 68 %48 = load i32, i32* %47, align 4
- 69 %49 = sub i32 %43, %48
- 70 %50 = icmp ult i32 %43, %48
- 71 %51 = zext i1 %50 to i8
- 72 store i8 %51, i8* %32, align 1
- 73 %52 = and i32 %49, 255
- 74 %53 = tail call i32 @llvm.ctpop.i32(i32 %52)
- 75 %54 = trunc i32 %53 to i8
- 76 %55 = and i8 %54, 1
- 77 %56 = xor i8 %55, 1
- 78 store i8 %56, i8* %33, align 1
- 79 %57 = xor i32 %48, %43
- 80 %58 = xor i32 %57, %49
- 81 %59 = lshr i32 %58, 4
- 82 %60 = trunc i32 %59 to i8
- 83 %61 = and i8 %60, 1
- 84 store i8 %61, i8* %34, align 1
- 85 %62 = icmp eq i32 %49, 0
- 86 %63 = zext i1 %62 to i8
- 87 store i8 %63, i8* %35, align 1
- 88 %64 = lshr i32 %49, 31
- 89 %65 = trunc i32 %64 to i8
- 90 store i8 %65, i8* %36, align 1
- 91 %66 = lshr i32 %43, 31
- 92 %67 = lshr i32 %48, 31
- 93 %68 = xor i32 %67, %66
- 94 %69 = xor i32 %64, %66
- 95 %70 = add nuw nsw i32 %69, %68
- 96 %71 = icmp eq i32 %70, 2
- 97 %72 = zext i1 %71 to i8
- 98 store i8 %72, i8* %37, align 1
- 99 %73 = icmp ne i8 %65, 0
- 100 %74 = xor i1 %73, %71
- 101 %.v = select i1 %74, i64 12, i64 43
- 102 %75 = add i64 %38, %.v
- 103 store i64 %75, i64* %3, align 8
- 104 \<badref\> = br i1 %74, label %block_400615, label %block_.L_400634
- 105 %76 = add i64 %39, -8
- 106 %77 = add i64 %75, 4
- 107 store i64 %77, i64* %3, align 8
- 108 %78 = inttoptr i64 %76 to i64*
- 109 %79 = load i64, i64* %78, align 8
- 110 store i64 %79, i64* %RAX.i32, align 8
- 111 %80 = add i64 %75, 8
- 112 store i64 %80, i64* %3, align 8
- 113 %81 = load i32, i32* %42, align 4
- 114 %82 = sext i32 %81 to i64
- 115 store i64 %82, i64* %RCX.i22, align 8
- 116 %83 = shl nsw i64 %82, 2
- 117 %84 = add i64 %83, %79
- 118 %85 = add i64 %75, 11
- 119 store i64 %85, i64* %3, align 8
- 120 %86 = inttoptr i64 %84 to i32*
- 121 %87 = load i32, i32* %86, align 4
- 122 %88 = zext i32 %87 to i64
- 123 store i64 %88, i64* %RDX.i20, align 8
- 124 %89 = add i64 %39, -16
- 125 %90 = add i64 %75, 14
- 126 store i64 %90, i64* %3, align 8
- 127 %91 = inttoptr i64 %89 to i32*
- 128 %92 = load i32, i32* %91, align 4
- 129 %93 = add i32 %92, %87
- 130 %94 = zext i32 %93 to i64
- 131 store i64 %94, i64* %RDX.i20, align 8
- 132 %95 = icmp ult i32 %93, %87
- 133 %96 = icmp ult i32 %93, %92
- 134 %97 = or i1 %95, %96
- 135 %98 = zext i1 %97 to i8
- 136 store i8 %98, i8* %32, align 1
- 137 %99 = and i32 %93, 255
- 138 %100 = tail call i32 @llvm.ctpop.i32(i32 %99)
- 139 %101 = trunc i32 %100 to i8
- 140 %102 = and i8 %101, 1
- 141 %103 = xor i8 %102, 1
- 142 store i8 %103, i8* %33, align 1
- 143 %104 = xor i32 %92, %87
- 144 %105 = xor i32 %104, %93
- 145 %106 = lshr i32 %105, 4
- 146 %107 = trunc i32 %106 to i8
- 147 %108 = and i8 %107, 1
- 148 store i8 %108, i8* %34, align 1
- 149 %109 = icmp eq i32 %93, 0
- 150 %110 = zext i1 %109 to i8
- 151 store i8 %110, i8* %35, align 1
- 152 %111 = lshr i32 %93, 31
- 153 %112 = trunc i32 %111 to i8
- 154 store i8 %112, i8* %36, align 1
- 155 %113 = lshr i32 %87, 31
- 156 %114 = lshr i32 %92, 31
- 157 %115 = xor i32 %111, %113
- 158 %116 = xor i32 %111, %114
- 159 %117 = add nuw nsw i32 %115, %116
- 160 %118 = icmp eq i32 %117, 2
- 161 %119 = zext i1 %118 to i8
- 162 store i8 %119, i8* %37, align 1
- 163 %120 = add i64 %75, 17
- 164 store i64 %120, i64* %3, align 8
- 165 store i32 %93, i32* %91, align 4
- 166 %121 = load i64, i64* %RBP.i, align 8
- 167 %122 = add i64 %121, -20
- 168 %123 = load i64, i64* %3, align 8
- 169 %124 = add i64 %123, 3
- 170 store i64 %124, i64* %3, align 8
- 171 %125 = inttoptr i64 %122 to i32*
- 172 %126 = load i32, i32* %125, align 4
- 173 %127 = add i32 %126, 1
- 174 %128 = zext i32 %127 to i64
- 175 store i64 %128, i64* %RAX.i32, align 8
- 176 %129 = icmp eq i32 %126, -1
- 177 %130 = icmp eq i32 %127, 0
- 178 %131 = or i1 %129, %130
- 179 %132 = zext i1 %131 to i8
- 180 store i8 %132, i8* %32, align 1
- 181 %133 = and i32 %127, 255
- 182 %134 = tail call i32 @llvm.ctpop.i32(i32 %133)
- 183 %135 = trunc i32 %134 to i8
- 184 %136 = and i8 %135, 1
- 185 %137 = xor i8 %136, 1
- 186 store i8 %137, i8* %33, align 1
- 187 %138 = xor i32 %127, %126
- 188 %139 = lshr i32 %138, 4
- 189 %140 = trunc i32 %139 to i8
- 190 %141 = and i8 %140, 1
- 191 store i8 %141, i8* %34, align 1
- 192 %142 = zext i1 %130 to i8
- 193 store i8 %142, i8* %35, align 1
- 194 %143 = lshr i32 %127, 31
- 195 %144 = trunc i32 %143 to i8
- 196 store i8 %144, i8* %36, align 1
- 197 %145 = lshr i32 %126, 31
- 198 %146 = xor i32 %143, %145
- 199 %147 = add nuw nsw i32 %146, %143
- 200 %148 = icmp eq i32 %147, 2
- 201 %149 = zext i1 %148 to i8
- 202 store i8 %149, i8* %37, align 1
- 203 %150 = add i64 %123, 9
- 204 store i64 %150, i64* %3, align 8
- 205 store i32 %127, i32* %125, align 4
- 206 %151 = load i64, i64* %3, align 8
- 207 %152 = add i64 %151, -38
- 208 store i64 %152, i64* %3, align 8
- 209 \<badref\> = br label %block_.L_400609
- 210 %153 = add i64 %39, -16
- 211 %154 = add i64 %75, 3
- 212 store i64 %154, i64* %3, align 8
- 213 %155 = inttoptr i64 %153 to i32*
- 214 %156 = load i32, i32* %155, align 4
- 215 %157 = zext i32 %156 to i64
- 216 store i64 %157, i64* %RAX.i32, align 8
- 217 %158 = add i64 %75, 4
- 218 store i64 %158, i64* %3, align 8
- 219 %159 = load i64, i64* %6, align 8
- 220 %160 = add i64 %159, 8
- 221 %161 = inttoptr i64 %159 to i64*
- 222 %162 = load i64, i64* %161, align 8
- 223 store i64 %162, i64* %RBP.i, align 8
- 224 store i64 %160, i64* %6, align 8
- 225 %163 = add i64 %75, 5
- 226 store i64 %163, i64* %3, align 8
- 227 %164 = inttoptr i64 %160 to i64*
- 228 %165 = load i64, i64* %164, align 8
- 229 store i64 %165, i64* %3, align 8
- 230 %166 = add i64 %159, 16
- 231 store i64 %166, i64* %6, align 8
- 232 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f779bf8>, {0: {0}, 1: {7}, 2: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 3: {9, 123}, 4: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 5: {11}, 6: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 7: {13, 55}, 8: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 9: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 10: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 11: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 12: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 13: {6}, 14: {160, 34, 19, 74}, 15: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 16: {43, 36, 21}, 17: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 18: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 19: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 20: {1}, 21: {2}, 22: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 23: {192, 26}, 24: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 25: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 26: {161, 186, 29, 119}, 27: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 28: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 29: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 30: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 31: {160, 34, 19, 74}, 32: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 33: {43, 36, 21}, 34: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 35: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 36: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 37: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 38: {41, 185, 117}, 39: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 40: {43, 36, 21}, 41: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 42: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 43: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 44: {3}, 45: {47}, 46: {48}, 47: {49}, 48: {50}, 49: {51}, 50: {52}, 51: {4}, 52: {5}, 53: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 54: {54, 159}, 55: {183}, 56: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 57: {41, 185, 117}, 58: {161, 186, 29, 119}, 59: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 60: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 61: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 62: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 63: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 64: {192, 26}, 65: {193}, 66: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 67: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 68: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 69: {197}, 70: {99, 227, 198, 82, 83, 213, 127}, 71: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 72: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 73: {201, 131, 87}, 74: {88, 202, 132}, 75: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 76: {97, 134, 204, 140, 211, 90}, 77: {91, 205, 135}, 78: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 79: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 80: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 81: {209, 138, 95}, 82: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 83: {97, 134, 204, 140, 211, 90}, 84: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 85: {99, 227, 198, 82, 83, 213, 127}, 86: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 87: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 88: {102, 105, 106, 144, 147, 216, 219, 220}, 89: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 90: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 91: {102, 105, 106, 144, 147, 216, 219, 220}, 92: {102, 105, 106, 144, 147, 216, 219, 220}, 93: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 94: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 95: {67, 230, 109, 79, 149, 223}, 96: {224, 150, 110}, 97: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 98: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 99: {99, 227, 198, 82, 83, 213, 127}, 100: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 101: {229}, 102: {67, 230, 109, 79, 149, 223}, 103: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 104: {232}, 105: {13, 55}, 106: {56, 167}, 107: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 108: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 109: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 110: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 111: {170, 61}, 112: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 113: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 114: {64}, 115: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 116: {66}, 117: {67, 230, 109, 79, 149, 223}, 118: {68}, 119: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 120: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 121: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 122: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 123: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 124: {160, 34, 19, 74}, 125: {75}, 126: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 127: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 128: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 129: {67, 230, 109, 79, 149, 223}, 130: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 131: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 132: {99, 227, 198, 82, 83, 213, 127}, 133: {99, 227, 198, 82, 83, 213, 127}, 134: {128, 84}, 135: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 136: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 137: {201, 131, 87}, 138: {88, 202, 132}, 139: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 140: {97, 134, 204, 140, 211, 90}, 141: {91, 205, 135}, 142: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 143: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 144: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 145: {209, 138, 95}, 146: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 147: {97, 134, 204, 140, 211, 90}, 148: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 149: {99, 227, 198, 82, 83, 213, 127}, 150: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 151: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 152: {102, 105, 106, 144, 147, 216, 219, 220}, 153: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 154: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 155: {102, 105, 106, 144, 147, 216, 219, 220}, 156: {102, 105, 106, 144, 147, 216, 219, 220}, 157: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 158: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 159: {67, 230, 109, 79, 149, 223}, 160: {224, 150, 110}, 161: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 162: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 163: {113}, 164: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 165: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 166: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 167: {41, 185, 117}, 168: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 169: {161, 186, 29, 119}, 170: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 171: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 172: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 173: {9, 123}, 174: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 175: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 176: {126}, 177: {99, 227, 198, 82, 83, 213, 127}, 178: {128, 84}, 179: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 180: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 181: {201, 131, 87}, 182: {88, 202, 132}, 183: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 184: {97, 134, 204, 140, 211, 90}, 185: {91, 205, 135}, 186: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 187: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 188: {209, 138, 95}, 189: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 190: {97, 134, 204, 140, 211, 90}, 191: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 192: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 193: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 194: {102, 105, 106, 144, 147, 216, 219, 220}, 195: {96, 217, 133, 103, 139, 203, 145, 210, 89}, 196: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 197: {102, 105, 106, 144, 147, 216, 219, 220}, 198: {228, 137, 107, 108, 207, 208, 222, 148, 221, 93, 94}, 199: {67, 230, 109, 79, 149, 223}, 200: {224, 150, 110}, 201: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 202: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 203: {153}, 204: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 205: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 206: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 207: {157}, 208: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 209: {54, 159}, 210: {160, 34, 19, 74}, 211: {161, 186, 29, 119}, 212: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 213: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 214: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 215: {129, 225, 100, 165, 199, 72, 142, 111, 80, 85, 214, 151, 124, 190}, 216: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 217: {56, 167}, 218: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 219: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 220: {170, 61}, 221: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 222: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 223: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 224: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 225: {175}, 226: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 227: {163, 195, 38, 70, 171, 45, 14, 77, 177, 23, 121, 58, 188, 31}, 228: {8, 12, 17, 20, 25, 27, 156, 28, 33, 35, 164, 40, 169, 42, 172, 178, 53, 184, 59, 189, 63, 196, 71, 78, 116, 118, 122}, 229: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 230: {180}, 231: {130, 136, 10, 141, 15, 16, 143, 18, 146, 22, 24, 152, 154, 155, 30, 158, 32, 162, 37, 166, 39, 168, 44, 173, 46, 174, 176, 179, 181, 57, 187, 60, 62, 191, 65, 194, 69, 200, 73, 76, 206, 81, 212, 86, 215, 218, 92, 98, 226, 101, 231, 104, 112, 114, 115, 120, 125}, 232: {182}})
Equivalent! frozenset({17, 42, 35}) {32, 11, 39}
Equivalent! frozenset({43, 36, 21}) {16, 33, 40}
Equivalent! frozenset({44, 37, 22}) {17, 34, 41}
Equivalent! frozenset({28, 118}) {168, 25}
Equivalent! frozenset({29, 119}) {169, 26}
Equivalent! frozenset({120, 30}) {170, 27}
Equivalent! frozenset({54, 159}) {209, 54}
Equivalent! frozenset({56, 167}) {217, 106}
Equivalent! frozenset({168, 57}) {218, 107}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f779bf8>, {0: {0}, 1: {7}, 2: {8}, 3: {9}, 4: {10}, 5: {11}, 6: {12}, 7: {13}, 8: {14}, 9: {15}, 10: {16}, 11: {42}, 12: {18}, 13: {6}, 14: {19}, 15: {20}, 16: {43}, 17: {44}, 18: {23}, 19: {24}, 20: {1}, 21: {2}, 22: {25}, 23: {26}, 24: {27}, 25: {118}, 26: {119}, 27: {30}, 28: {31}, 29: {32}, 30: {184, 33}, 31: {74, 34}, 32: {17}, 33: {36}, 34: {37}, 35: {77, 38}, 36: {115, 39}, 37: {40, 116}, 38: {41, 117}, 39: {35}, 40: {21}, 41: {22}, 42: {121, 45}, 43: {155, 46}, 44: {3}, 45: {47}, 46: {48}, 47: {49}, 48: {50}, 49: {51}, 50: {52}, 51: {4}, 52: {5}, 53: {53}, 54: {159}, 55: {183}, 56: {184}, 57: {185}, 58: {186}, 59: {187}, 60: {188}, 61: {189}, 62: {190}, 63: {191}, 64: {192}, 65: {193}, 66: {194}, 67: {195}, 68: {196}, 69: {197}, 70: {198}, 71: {199}, 72: {200}, 73: {201}, 74: {202}, 75: {203}, 76: {204}, 77: {205}, 78: {206}, 79: {207}, 80: {208}, 81: {209}, 82: {210}, 83: {211}, 84: {212}, 85: {213}, 86: {214}, 87: {215}, 88: {216}, 89: {217}, 90: {218}, 91: {219}, 92: {220}, 93: {221}, 94: {222}, 95: {223}, 96: {224}, 97: {225}, 98: {226}, 99: {227}, 100: {228}, 101: {229}, 102: {230}, 103: {231}, 104: {232}, 105: {55}, 106: {167}, 107: {57}, 108: {58}, 109: {59}, 110: {60}, 111: {61}, 112: {62}, 113: {63}, 114: {64}, 115: {65}, 116: {66}, 117: {67}, 118: {68}, 119: {69}, 120: {70}, 121: {71}, 122: {72}, 123: {73}, 124: {74}, 125: {75}, 126: {76}, 127: {77}, 128: {78}, 129: {79}, 130: {80}, 131: {81}, 132: {82}, 133: {83}, 134: {84}, 135: {85}, 136: {86}, 137: {87}, 138: {88}, 139: {89}, 140: {90}, 141: {91}, 142: {92}, 143: {93}, 144: {94}, 145: {95}, 146: {96}, 147: {97}, 148: {98}, 149: {99}, 150: {100}, 151: {101}, 152: {102}, 153: {103}, 154: {104}, 155: {105}, 156: {106}, 157: {107}, 158: {108}, 159: {109}, 160: {110}, 161: {111}, 162: {112}, 163: {113}, 164: {114}, 165: {115}, 166: {116}, 167: {117}, 168: {28}, 169: {29}, 170: {120}, 171: {121}, 172: {122}, 173: {123}, 174: {124}, 175: {125}, 176: {126}, 177: {127}, 178: {128}, 179: {129}, 180: {130}, 181: {131}, 182: {132}, 183: {133}, 184: {134}, 185: {135}, 186: {136}, 187: {137}, 188: {138}, 189: {139}, 190: {140}, 191: {141}, 192: {142}, 193: {143}, 194: {144}, 195: {145}, 196: {146}, 197: {147}, 198: {148}, 199: {149}, 200: {150}, 201: {151}, 202: {152}, 203: {153}, 204: {154}, 205: {155}, 206: {156}, 207: {157}, 208: {158}, 209: {54}, 210: {160}, 211: {161}, 212: {162}, 213: {163}, 214: {164}, 215: {165}, 216: {166}, 217: {56}, 218: {168}, 219: {169}, 220: {170}, 221: {171}, 222: {172}, 223: {173}, 224: {174}, 225: {175}, 226: {176}, 227: {177}, 228: {178}, 229: {179}, 230: {180}, 231: {181}, 232: {182}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 getelementptr getelementptr
EXACT 21 bitcast bitcast
EXACT 22 load load
EXACT 23 add add
EXACT 24 load load
EXACT 25 load load
EXACT 26 add add
EXACT 27 store store
EXACT 28 inttoptr inttoptr
EXACT 29 store store
MORE 30 POT: 2
MORE 31 POT: 2
EXACT 32 load load
EXACT 33 add add
EXACT 34 store store
MORE 35 POT: 2
MORE 36 POT: 2
MORE 37 POT: 2
MORE 38 POT: 2
EXACT 39 load load
EXACT 40 add add
EXACT 41 store store
MORE 42 POT: 2
MORE 43 POT: 2
EXACT 44 getelementptr getelementptr
EXACT 45 getelementptr getelementptr
EXACT 46 getelementptr getelementptr
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
EXACT 49 getelementptr getelementptr
EXACT 50 getelementptr getelementptr
EXACT 51 getelementptr getelementptr
EXACT 52 getelementptr getelementptr
EXACT 53 load load
EXACT 54 br br
EXACT 55 phi phi
EXACT 56 load load
EXACT 57 add add
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 load load
EXACT 62 zext zext
EXACT 63 store store
EXACT 64 add add
EXACT 65 add add
EXACT 66 store store
EXACT 67 inttoptr inttoptr
EXACT 68 load load
EXACT 69 sub sub
EXACT 70 icmp icmp
EXACT 71 zext zext
EXACT 72 store store
EXACT 73 and and
EXACT 74 tail tail
EXACT 75 trunc trunc
EXACT 76 and and
EXACT 77 xor xor
EXACT 78 store store
EXACT 79 xor xor
EXACT 80 xor xor
EXACT 81 lshr lshr
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 store store
EXACT 85 icmp icmp
EXACT 86 zext zext
EXACT 87 store store
EXACT 88 lshr lshr
EXACT 89 trunc trunc
EXACT 90 store store
EXACT 91 lshr lshr
EXACT 92 lshr lshr
EXACT 93 xor xor
EXACT 94 xor xor
EXACT 95 add add
EXACT 96 icmp icmp
EXACT 97 zext zext
EXACT 98 store store
EXACT 99 icmp icmp
EXACT 100 xor xor
EXACT 101 select select
EXACT 102 add add
EXACT 103 store store
EXACT 104 br br
EXACT 105 add add
EXACT 106 add add
EXACT 107 store store
EXACT 108 inttoptr inttoptr
EXACT 109 load load
EXACT 110 store store
EXACT 111 add add
EXACT 112 store store
EXACT 113 load load
EXACT 114 sext sext
EXACT 115 store store
EXACT 116 shl shl
EXACT 117 add add
EXACT 118 add add
EXACT 119 store store
EXACT 120 inttoptr inttoptr
EXACT 121 load load
EXACT 122 zext zext
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 store store
EXACT 127 inttoptr inttoptr
EXACT 128 load load
EXACT 129 add add
EXACT 130 zext zext
EXACT 131 store store
EXACT 132 icmp icmp
EXACT 133 icmp icmp
EXACT 134 or or
EXACT 135 zext zext
EXACT 136 store store
EXACT 137 and and
EXACT 138 tail tail
EXACT 139 trunc trunc
EXACT 140 and and
EXACT 141 xor xor
EXACT 142 store store
EXACT 143 xor xor
EXACT 144 xor xor
EXACT 145 lshr lshr
EXACT 146 trunc trunc
EXACT 147 and and
EXACT 148 store store
EXACT 149 icmp icmp
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 lshr lshr
EXACT 153 trunc trunc
EXACT 154 store store
EXACT 155 lshr lshr
EXACT 156 lshr lshr
EXACT 157 xor xor
EXACT 158 xor xor
EXACT 159 add add
EXACT 160 icmp icmp
EXACT 161 zext zext
EXACT 162 store store
EXACT 163 add add
EXACT 164 store store
EXACT 165 store store
EXACT 166 load load
EXACT 167 add add
EXACT 168 load load
EXACT 169 add add
EXACT 170 store store
EXACT 171 inttoptr inttoptr
EXACT 172 load load
EXACT 173 add add
EXACT 174 zext zext
EXACT 175 store store
EXACT 176 icmp icmp
EXACT 177 icmp icmp
EXACT 178 or or
EXACT 179 zext zext
EXACT 180 store store
EXACT 181 and and
EXACT 182 tail tail
EXACT 183 trunc trunc
EXACT 184 and and
EXACT 185 xor xor
EXACT 186 store store
EXACT 187 xor xor
EXACT 188 lshr lshr
EXACT 189 trunc trunc
EXACT 190 and and
EXACT 191 store store
EXACT 192 zext zext
EXACT 193 store store
EXACT 194 lshr lshr
EXACT 195 trunc trunc
EXACT 196 store store
EXACT 197 lshr lshr
EXACT 198 xor xor
EXACT 199 add add
EXACT 200 icmp icmp
EXACT 201 zext zext
EXACT 202 store store
EXACT 203 add add
EXACT 204 store store
EXACT 205 store store
EXACT 206 load load
EXACT 207 add add
EXACT 208 store store
EXACT 209 br br
EXACT 210 add add
EXACT 211 add add
EXACT 212 store store
EXACT 213 inttoptr inttoptr
EXACT 214 load load
EXACT 215 zext zext
EXACT 216 store store
EXACT 217 add add
EXACT 218 store store
EXACT 219 load load
EXACT 220 add add
EXACT 221 inttoptr inttoptr
EXACT 222 load load
EXACT 223 store store
EXACT 224 store store
EXACT 225 add add
EXACT 226 store store
EXACT 227 inttoptr inttoptr
EXACT 228 load load
EXACT 229 store store
EXACT 230 add add
EXACT 231 store store
EXACT 232 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 2 %ESI = bitcast %union.anon* %3 to i32*
- 3 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 4 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 5 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 6 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %4 = load i64, i64* %RBP, align 8
- 9 %5 = add i64 %1, 1
- 10 store i64 %5, i64* %PC, align 8
- 11 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %7 = load i64, i64* %6, align 8
- 13 %8 = add i64 %7, -8
- 14 %9 = inttoptr i64 %8 to i64*
- 15 store i64 %4, i64* %9, align 8
- 16 store i64 %8, i64* %6, align 8
- 17 %10 = load i64, i64* %PC, align 8
- 18 store i64 %8, i64* %RBP, align 8
- 19 %11 = add i64 %7, -16
- 20 %12 = load i64, i64* %RDI, align 8
- 21 %13 = add i64 %10, 7
- 22 store i64 %13, i64* %PC, align 8
- 23 %14 = inttoptr i64 %11 to i64*
- 24 store i64 %12, i64* %14, align 8
- 25 %15 = load i64, i64* %RBP, align 8
- 26 %16 = add i64 %15, -12
- 27 %17 = load i32, i32* %ESI, align 4
- 28 %18 = load i64, i64* %PC, align 8
- 29 %19 = add i64 %18, 3
- 30 store i64 %19, i64* %PC, align 8
- 31 %20 = inttoptr i64 %16 to i32*
- 32 store i32 %17, i32* %20, align 4
- 33 %21 = load i64, i64* %RBP, align 8
- 34 %22 = add i64 %21, -16
- 35 %23 = load i64, i64* %PC, align 8
- 36 %24 = add i64 %23, 7
- 37 store i64 %24, i64* %PC, align 8
- 38 %25 = inttoptr i64 %22 to i32*
- 39 store i32 0, i32* %25, align 4
- 40 %26 = load i64, i64* %RBP, align 8
- 41 %27 = add i64 %26, -20
- 42 %28 = load i64, i64* %PC, align 8
- 43 %29 = add i64 %28, 7
- 44 store i64 %29, i64* %PC, align 8
- 45 %30 = inttoptr i64 %27 to i32*
- 46 store i32 0, i32* %30, align 4
- 47 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 48 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 49 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 50 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 51 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 52 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 53 %.pre = load i64, i64* %PC, align 8
- 54 \<badref\> = br label %block_400609
- 55 %37 = add i64 %129, -8
- 56 %38 = add i64 %165, 4
- 57 store i64 %38, i64* %PC, align 8
- 58 %39 = inttoptr i64 %37 to i64*
- 59 %40 = load i64, i64* %39, align 8
- 60 store i64 %40, i64* %RAX, align 8
- 61 %41 = add i64 %165, 8
- 62 store i64 %41, i64* %PC, align 8
- 63 %42 = load i32, i32* %132, align 4
- 64 %43 = sext i32 %42 to i64
- 65 store i64 %43, i64* %RCX, align 8
- 66 %44 = shl nsw i64 %43, 2
- 67 %45 = add i64 %44, %40
- 68 %46 = add i64 %165, 11
- 69 store i64 %46, i64* %PC, align 8
- 70 %47 = inttoptr i64 %45 to i32*
- 71 %48 = load i32, i32* %47, align 4
- 72 %49 = zext i32 %48 to i64
- 73 store i64 %49, i64* %RDX, align 8
- 74 %50 = add i64 %129, -16
- 75 %51 = add i64 %165, 14
- 76 store i64 %51, i64* %PC, align 8
- 77 %52 = inttoptr i64 %50 to i32*
- 78 %53 = load i32, i32* %52, align 4
- 79 %54 = add i32 %53, %48
- 80 %55 = zext i32 %54 to i64
- 81 store i64 %55, i64* %RDX, align 8
- 82 %56 = icmp ult i32 %54, %48
- 83 %57 = icmp ult i32 %54, %53
- 84 %58 = or i1 %56, %57
- 85 %59 = zext i1 %58 to i8
- 86 store i8 %59, i8* %31, align 1
- 87 %60 = and i32 %54, 255
- 88 %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
- 89 %62 = trunc i32 %61 to i8
- 90 %63 = and i8 %62, 1
- 91 %64 = xor i8 %63, 1
- 92 store i8 %64, i8* %32, align 1
- 93 %65 = xor i32 %53, %48
- 94 %66 = xor i32 %65, %54
- 95 %67 = lshr i32 %66, 4
- 96 %68 = trunc i32 %67 to i8
- 97 %69 = and i8 %68, 1
- 98 store i8 %69, i8* %33, align 1
- 99 %70 = icmp eq i32 %54, 0
- 100 %71 = zext i1 %70 to i8
- 101 store i8 %71, i8* %34, align 1
- 102 %72 = lshr i32 %54, 31
- 103 %73 = trunc i32 %72 to i8
- 104 store i8 %73, i8* %35, align 1
- 105 %74 = lshr i32 %48, 31
- 106 %75 = lshr i32 %53, 31
- 107 %76 = xor i32 %72, %74
- 108 %77 = xor i32 %72, %75
- 109 %78 = add nuw nsw i32 %76, %77
- 110 %79 = icmp eq i32 %78, 2
- 111 %80 = zext i1 %79 to i8
- 112 store i8 %80, i8* %36, align 1
- 113 %81 = add i64 %165, 17
- 114 store i64 %81, i64* %PC, align 8
- 115 store i32 %54, i32* %52, align 4
- 116 %82 = load i64, i64* %RBP, align 8
- 117 %83 = add i64 %82, -20
- 118 %84 = load i64, i64* %PC, align 8
- 119 %85 = add i64 %84, 3
- 120 store i64 %85, i64* %PC, align 8
- 121 %86 = inttoptr i64 %83 to i32*
- 122 %87 = load i32, i32* %86, align 4
- 123 %88 = add i32 %87, 1
- 124 %89 = zext i32 %88 to i64
- 125 store i64 %89, i64* %RAX, align 8
- 126 %90 = icmp eq i32 %87, -1
- 127 %91 = icmp eq i32 %88, 0
- 128 %92 = or i1 %90, %91
- 129 %93 = zext i1 %92 to i8
- 130 store i8 %93, i8* %31, align 1
- 131 %94 = and i32 %88, 255
- 132 %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12
- 133 %96 = trunc i32 %95 to i8
- 134 %97 = and i8 %96, 1
- 135 %98 = xor i8 %97, 1
- 136 store i8 %98, i8* %32, align 1
- 137 %99 = xor i32 %88, %87
- 138 %100 = lshr i32 %99, 4
- 139 %101 = trunc i32 %100 to i8
- 140 %102 = and i8 %101, 1
- 141 store i8 %102, i8* %33, align 1
- 142 %103 = zext i1 %91 to i8
- 143 store i8 %103, i8* %34, align 1
- 144 %104 = lshr i32 %88, 31
- 145 %105 = trunc i32 %104 to i8
- 146 store i8 %105, i8* %35, align 1
- 147 %106 = lshr i32 %87, 31
- 148 %107 = xor i32 %104, %106
- 149 %108 = add nuw nsw i32 %107, %104
- 150 %109 = icmp eq i32 %108, 2
- 151 %110 = zext i1 %109 to i8
- 152 store i8 %110, i8* %36, align 1
- 153 %111 = add i64 %84, 9
- 154 store i64 %111, i64* %PC, align 8
- 155 store i32 %88, i32* %86, align 4
- 156 %112 = load i64, i64* %PC, align 8
- 157 %113 = add i64 %112, -38
- 158 store i64 %113, i64* %PC, align 8
- 159 \<badref\> = br label %block_400609
- 160 %114 = add i64 %129, -16
- 161 %115 = add i64 %165, 3
- 162 store i64 %115, i64* %PC, align 8
- 163 %116 = inttoptr i64 %114 to i32*
- 164 %117 = load i32, i32* %116, align 4
- 165 %118 = zext i32 %117 to i64
- 166 store i64 %118, i64* %RAX, align 8
- 167 %119 = add i64 %165, 4
- 168 store i64 %119, i64* %PC, align 8
- 169 %120 = load i64, i64* %6, align 8
- 170 %121 = add i64 %120, 8
- 171 %122 = inttoptr i64 %120 to i64*
- 172 %123 = load i64, i64* %122, align 8
- 173 store i64 %123, i64* %RBP, align 8
- 174 store i64 %121, i64* %6, align 8
- 175 %124 = add i64 %165, 5
- 176 store i64 %124, i64* %PC, align 8
- 177 %125 = inttoptr i64 %121 to i64*
- 178 %126 = load i64, i64* %125, align 8
- 179 store i64 %126, i64* %PC, align 8
- 180 %127 = add i64 %120, 16
- 181 store i64 %127, i64* %6, align 8
- 182 \<badref\> = ret %struct.Memory* %2
- 183 %128 = phi i64 [ %113, %block_400615 ], [ %.pre, %block_4005f0 ]
- 184 %129 = load i64, i64* %RBP, align 8
- 185 %130 = add i64 %129, -20
- 186 %131 = add i64 %128, 3
- 187 store i64 %131, i64* %PC, align 8
- 188 %132 = inttoptr i64 %130 to i32*
- 189 %133 = load i32, i32* %132, align 4
- 190 %134 = zext i32 %133 to i64
- 191 store i64 %134, i64* %RAX, align 8
- 192 %135 = add i64 %129, -12
- 193 %136 = add i64 %128, 6
- 194 store i64 %136, i64* %PC, align 8
- 195 %137 = inttoptr i64 %135 to i32*
- 196 %138 = load i32, i32* %137, align 4
- 197 %139 = sub i32 %133, %138
- 198 %140 = icmp ult i32 %133, %138
- 199 %141 = zext i1 %140 to i8
- 200 store i8 %141, i8* %31, align 1
- 201 %142 = and i32 %139, 255
- 202 %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #12
- 203 %144 = trunc i32 %143 to i8
- 204 %145 = and i8 %144, 1
- 205 %146 = xor i8 %145, 1
- 206 store i8 %146, i8* %32, align 1
- 207 %147 = xor i32 %138, %133
- 208 %148 = xor i32 %147, %139
- 209 %149 = lshr i32 %148, 4
- 210 %150 = trunc i32 %149 to i8
- 211 %151 = and i8 %150, 1
- 212 store i8 %151, i8* %33, align 1
- 213 %152 = icmp eq i32 %139, 0
- 214 %153 = zext i1 %152 to i8
- 215 store i8 %153, i8* %34, align 1
- 216 %154 = lshr i32 %139, 31
- 217 %155 = trunc i32 %154 to i8
- 218 store i8 %155, i8* %35, align 1
- 219 %156 = lshr i32 %133, 31
- 220 %157 = lshr i32 %138, 31
- 221 %158 = xor i32 %157, %156
- 222 %159 = xor i32 %154, %156
- 223 %160 = add nuw nsw i32 %159, %158
- 224 %161 = icmp eq i32 %160, 2
- 225 %162 = zext i1 %161 to i8
- 226 store i8 %162, i8* %36, align 1
- 227 %163 = icmp ne i8 %155, 0
- 228 %164 = xor i1 %163, %161
- 229 %.v = select i1 %164, i64 12, i64 43
- 230 %165 = add i64 %128, %.v
- 231 store i64 %165, i64* %PC, align 8
- 232 \<badref\> = br i1 %164, label %block_400615, label %block_400634
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f779ae8>, {0: {0}, 1: {20}, 2: {21}, 3: {44}, 4: {51}, 5: {52}, 6: {13}, 7: {1}, 8: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 9: {3, 173}, 10: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 11: {5}, 12: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 13: {105, 7}, 14: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 15: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 16: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 17: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 18: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 19: {210, 124, 14, 31}, 20: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 21: {16, 33, 40}, 22: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 23: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 24: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 25: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 26: {64, 23}, 27: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 28: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 29: {169, 26, 211, 58}, 30: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 31: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 32: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 33: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 34: {210, 124, 14, 31}, 35: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 36: {16, 33, 40}, 37: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 38: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 39: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 40: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 41: {57, 38, 167}, 42: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 43: {16, 33, 40}, 44: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 45: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 46: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 47: {45}, 48: {46}, 49: {47}, 50: {48}, 51: {49}, 52: {50}, 53: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 54: {209, 54}, 55: {105, 7}, 56: {217, 106}, 57: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 58: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 59: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 60: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 61: {220, 111}, 62: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 63: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 64: {114}, 65: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 66: {116}, 67: {129, 102, 199, 117, 95, 159}, 68: {118}, 69: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 70: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 71: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 72: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 73: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 74: {210, 124, 14, 31}, 75: {125}, 76: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 77: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 78: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 79: {129, 102, 199, 117, 95, 159}, 80: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 81: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 82: {99, 132, 133, 70, 177, 85, 149}, 83: {99, 132, 133, 70, 177, 85, 149}, 84: {178, 134}, 85: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 86: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 87: {73, 137, 181}, 88: {74, 182, 138}, 89: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 90: {140, 76, 83, 147, 184, 190}, 91: {185, 77, 141}, 92: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 93: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 94: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 95: {81, 145, 188}, 96: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 97: {140, 76, 83, 147, 184, 190}, 98: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 99: {99, 132, 133, 70, 177, 85, 149}, 100: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 101: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 102: {194, 197, 91, 156, 88, 155, 92, 152}, 103: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 104: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 105: {194, 197, 91, 156, 88, 155, 92, 152}, 106: {194, 197, 91, 156, 88, 155, 92, 152}, 107: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 108: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 109: {129, 102, 199, 117, 95, 159}, 110: {96, 160, 200}, 111: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 112: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 113: {163}, 114: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 115: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 116: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 117: {57, 38, 167}, 118: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 119: {169, 26, 211, 58}, 120: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 121: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 122: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 123: {3, 173}, 124: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 125: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 126: {176}, 127: {99, 132, 133, 70, 177, 85, 149}, 128: {178, 134}, 129: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 130: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 131: {73, 137, 181}, 132: {74, 182, 138}, 133: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 134: {140, 76, 83, 147, 184, 190}, 135: {185, 77, 141}, 136: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 137: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 138: {81, 145, 188}, 139: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 140: {140, 76, 83, 147, 184, 190}, 141: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 142: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 143: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 144: {194, 197, 91, 156, 88, 155, 92, 152}, 145: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 146: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 147: {194, 197, 91, 156, 88, 155, 92, 152}, 148: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 149: {129, 102, 199, 117, 95, 159}, 150: {96, 160, 200}, 151: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 152: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 153: {203}, 154: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 155: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 156: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 157: {207}, 158: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 159: {209, 54}, 160: {210, 124, 14, 31}, 161: {169, 26, 211, 58}, 162: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 163: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 164: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 165: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 166: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 167: {217, 106}, 168: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 169: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 170: {220, 111}, 171: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 172: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 173: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 174: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 175: {225}, 176: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 177: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 178: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 179: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 180: {230}, 181: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 182: {232}, 183: {55}, 184: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 185: {57, 38, 167}, 186: {169, 26, 211, 58}, 187: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 188: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 189: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 190: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 191: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 192: {64, 23}, 193: {65}, 194: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 195: {35, 67, 227, 8, 42, 171, 108, 60, 18, 213, 120, 28, 221, 127}, 196: {128, 2, 6, 11, 15, 22, 24, 25, 30, 32, 37, 166, 39, 168, 172, 53, 56, 61, 68, 206, 214, 219, 222, 228, 109, 113, 121}, 197: {69}, 198: {99, 132, 133, 70, 177, 85, 149}, 199: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 200: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 201: {73, 137, 181}, 202: {74, 182, 138}, 203: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 204: {140, 76, 83, 147, 184, 190}, 205: {185, 77, 141}, 206: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 207: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 208: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 209: {81, 145, 188}, 210: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 211: {140, 76, 83, 147, 184, 190}, 212: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 213: {99, 132, 133, 70, 177, 85, 149}, 214: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 215: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 216: {194, 197, 91, 156, 88, 155, 92, 152}, 217: {153, 195, 75, 139, 82, 146, 183, 89, 189}, 218: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 219: {194, 197, 91, 156, 88, 155, 92, 152}, 220: {194, 197, 91, 156, 88, 155, 92, 152}, 221: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 222: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 223: {129, 102, 199, 117, 95, 159}, 224: {96, 160, 200}, 225: {192, 97, 130, 161, 215, 71, 135, 201, 174, 179, 86, 150, 122, 62}, 226: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 227: {99, 132, 133, 70, 177, 85, 149}, 228: {100, 198, 187, 79, 80, 143, 144, 157, 158, 93, 94}, 229: {101}, 230: {129, 102, 199, 117, 95, 159}, 231: {131, 4, 136, 9, 10, 12, 142, 17, 19, 148, 151, 154, 27, 29, 34, 162, 36, 164, 165, 41, 170, 43, 175, 180, 186, 59, 63, 191, 193, 66, 196, 72, 202, 204, 205, 78, 208, 84, 212, 87, 216, 90, 218, 223, 224, 98, 226, 229, 103, 231, 107, 110, 112, 115, 119, 123, 126}, 232: {104}})
Equivalent! frozenset({32, 11, 39}) {17, 42, 35}
Equivalent! frozenset({16, 33, 40}) {43, 36, 21}
Equivalent! frozenset({17, 34, 41}) {44, 37, 22}
Equivalent! frozenset({168, 25}) {28, 118}
Equivalent! frozenset({169, 26}) {29, 119}
Equivalent! frozenset({170, 27}) {120, 30}
Equivalent! frozenset({209, 54}) {54, 159}
Equivalent! frozenset({217, 106}) {56, 167}
Equivalent! frozenset({218, 107}) {168, 57}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f779ae8>, {0: {0}, 1: {20}, 2: {21}, 3: {44}, 4: {51}, 5: {52}, 6: {13}, 7: {1}, 8: {2}, 9: {3}, 10: {4}, 11: {5}, 12: {6}, 13: {7}, 14: {8}, 15: {9}, 16: {10}, 17: {32}, 18: {12}, 19: {14}, 20: {15}, 21: {40}, 22: {41}, 23: {18}, 24: {19}, 25: {22}, 26: {23}, 27: {24}, 28: {168}, 29: {169}, 30: {27}, 31: {28}, 32: {29}, 33: {56, 30}, 34: {124, 31}, 35: {39}, 36: {33}, 37: {34}, 38: {35, 127}, 39: {36, 165}, 40: {37, 166}, 41: {38, 167}, 42: {11}, 43: {16}, 44: {17}, 45: {42, 171}, 46: {43, 205}, 47: {45}, 48: {46}, 49: {47}, 50: {48}, 51: {49}, 52: {50}, 53: {53}, 54: {209}, 55: {105}, 56: {217}, 57: {107}, 58: {108}, 59: {109}, 60: {110}, 61: {111}, 62: {112}, 63: {113}, 64: {114}, 65: {115}, 66: {116}, 67: {117}, 68: {118}, 69: {119}, 70: {120}, 71: {121}, 72: {122}, 73: {123}, 74: {124}, 75: {125}, 76: {126}, 77: {127}, 78: {128}, 79: {129}, 80: {130}, 81: {131}, 82: {132}, 83: {133}, 84: {134}, 85: {135}, 86: {136}, 87: {137}, 88: {138}, 89: {139}, 90: {140}, 91: {141}, 92: {142}, 93: {143}, 94: {144}, 95: {145}, 96: {146}, 97: {147}, 98: {148}, 99: {149}, 100: {150}, 101: {151}, 102: {152}, 103: {153}, 104: {154}, 105: {155}, 106: {156}, 107: {157}, 108: {158}, 109: {159}, 110: {160}, 111: {161}, 112: {162}, 113: {163}, 114: {164}, 115: {165}, 116: {166}, 117: {167}, 118: {25}, 119: {26}, 120: {170}, 121: {171}, 122: {172}, 123: {173}, 124: {174}, 125: {175}, 126: {176}, 127: {177}, 128: {178}, 129: {179}, 130: {180}, 131: {181}, 132: {182}, 133: {183}, 134: {184}, 135: {185}, 136: {186}, 137: {187}, 138: {188}, 139: {189}, 140: {190}, 141: {191}, 142: {192}, 143: {193}, 144: {194}, 145: {195}, 146: {196}, 147: {197}, 148: {198}, 149: {199}, 150: {200}, 151: {201}, 152: {202}, 153: {203}, 154: {204}, 155: {205}, 156: {206}, 157: {207}, 158: {208}, 159: {54}, 160: {210}, 161: {211}, 162: {212}, 163: {213}, 164: {214}, 165: {215}, 166: {216}, 167: {106}, 168: {218}, 169: {219}, 170: {220}, 171: {221}, 172: {222}, 173: {223}, 174: {224}, 175: {225}, 176: {226}, 177: {227}, 178: {228}, 179: {229}, 180: {230}, 181: {231}, 182: {232}, 183: {55}, 184: {56}, 185: {57}, 186: {58}, 187: {59}, 188: {60}, 189: {61}, 190: {62}, 191: {63}, 192: {64}, 193: {65}, 194: {66}, 195: {67}, 196: {68}, 197: {69}, 198: {70}, 199: {71}, 200: {72}, 201: {73}, 202: {74}, 203: {75}, 204: {76}, 205: {77}, 206: {78}, 207: {79}, 208: {80}, 209: {81}, 210: {82}, 211: {83}, 212: {84}, 213: {85}, 214: {86}, 215: {87}, 216: {88}, 217: {89}, 218: {90}, 219: {91}, 220: {92}, 221: {93}, 222: {94}, 223: {95}, 224: {96}, 225: {97}, 226: {98}, 227: {99}, 228: {100}, 229: {101}, 230: {102}, 231: {103}, 232: {104}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 store store
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 store store
EXACT 16 store store
EXACT 17 load load
EXACT 18 store store
EXACT 19 add add
EXACT 20 load load
EXACT 21 add add
EXACT 22 store store
EXACT 23 inttoptr inttoptr
EXACT 24 store store
EXACT 25 load load
EXACT 26 add add
EXACT 27 load load
EXACT 28 load load
EXACT 29 add add
EXACT 30 store store
EXACT 31 inttoptr inttoptr
EXACT 32 store store
MORE 33 POT: 2
MORE 34 POT: 2
EXACT 35 load load
EXACT 36 add add
EXACT 37 store store
MORE 38 POT: 2
MORE 39 POT: 2
MORE 40 POT: 2
MORE 41 POT: 2
EXACT 42 load load
EXACT 43 add add
EXACT 44 store store
MORE 45 POT: 2
MORE 46 POT: 2
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
EXACT 49 getelementptr getelementptr
EXACT 50 getelementptr getelementptr
EXACT 51 getelementptr getelementptr
EXACT 52 getelementptr getelementptr
EXACT 53 load load
EXACT 54 br br
EXACT 55 add add
EXACT 56 add add
EXACT 57 store store
EXACT 58 inttoptr inttoptr
EXACT 59 load load
EXACT 60 store store
EXACT 61 add add
EXACT 62 store store
EXACT 63 load load
EXACT 64 sext sext
EXACT 65 store store
EXACT 66 shl shl
EXACT 67 add add
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 load load
EXACT 72 zext zext
EXACT 73 store store
EXACT 74 add add
EXACT 75 add add
EXACT 76 store store
EXACT 77 inttoptr inttoptr
EXACT 78 load load
EXACT 79 add add
EXACT 80 zext zext
EXACT 81 store store
EXACT 82 icmp icmp
EXACT 83 icmp icmp
EXACT 84 or or
EXACT 85 zext zext
EXACT 86 store store
EXACT 87 and and
EXACT 88 tail tail
EXACT 89 trunc trunc
EXACT 90 and and
EXACT 91 xor xor
EXACT 92 store store
EXACT 93 xor xor
EXACT 94 xor xor
EXACT 95 lshr lshr
EXACT 96 trunc trunc
EXACT 97 and and
EXACT 98 store store
EXACT 99 icmp icmp
EXACT 100 zext zext
EXACT 101 store store
EXACT 102 lshr lshr
EXACT 103 trunc trunc
EXACT 104 store store
EXACT 105 lshr lshr
EXACT 106 lshr lshr
EXACT 107 xor xor
EXACT 108 xor xor
EXACT 109 add add
EXACT 110 icmp icmp
EXACT 111 zext zext
EXACT 112 store store
EXACT 113 add add
EXACT 114 store store
EXACT 115 store store
EXACT 116 load load
EXACT 117 add add
EXACT 118 load load
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 load load
EXACT 123 add add
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 icmp icmp
EXACT 127 icmp icmp
EXACT 128 or or
EXACT 129 zext zext
EXACT 130 store store
EXACT 131 and and
EXACT 132 tail tail
EXACT 133 trunc trunc
EXACT 134 and and
EXACT 135 xor xor
EXACT 136 store store
EXACT 137 xor xor
EXACT 138 lshr lshr
EXACT 139 trunc trunc
EXACT 140 and and
EXACT 141 store store
EXACT 142 zext zext
EXACT 143 store store
EXACT 144 lshr lshr
EXACT 145 trunc trunc
EXACT 146 store store
EXACT 147 lshr lshr
EXACT 148 xor xor
EXACT 149 add add
EXACT 150 icmp icmp
EXACT 151 zext zext
EXACT 152 store store
EXACT 153 add add
EXACT 154 store store
EXACT 155 store store
EXACT 156 load load
EXACT 157 add add
EXACT 158 store store
EXACT 159 br br
EXACT 160 add add
EXACT 161 add add
EXACT 162 store store
EXACT 163 inttoptr inttoptr
EXACT 164 load load
EXACT 165 zext zext
EXACT 166 store store
EXACT 167 add add
EXACT 168 store store
EXACT 169 load load
EXACT 170 add add
EXACT 171 inttoptr inttoptr
EXACT 172 load load
EXACT 173 store store
EXACT 174 store store
EXACT 175 add add
EXACT 176 store store
EXACT 177 inttoptr inttoptr
EXACT 178 load load
EXACT 179 store store
EXACT 180 add add
EXACT 181 store store
EXACT 182 ret ret
EXACT 183 phi phi
EXACT 184 load load
EXACT 185 add add
EXACT 186 add add
EXACT 187 store store
EXACT 188 inttoptr inttoptr
EXACT 189 load load
EXACT 190 zext zext
EXACT 191 store store
EXACT 192 add add
EXACT 193 add add
EXACT 194 store store
EXACT 195 inttoptr inttoptr
EXACT 196 load load
EXACT 197 sub sub
EXACT 198 icmp icmp
EXACT 199 zext zext
EXACT 200 store store
EXACT 201 and and
EXACT 202 tail tail
EXACT 203 trunc trunc
EXACT 204 and and
EXACT 205 xor xor
EXACT 206 store store
EXACT 207 xor xor
EXACT 208 xor xor
EXACT 209 lshr lshr
EXACT 210 trunc trunc
EXACT 211 and and
EXACT 212 store store
EXACT 213 icmp icmp
EXACT 214 zext zext
EXACT 215 store store
EXACT 216 lshr lshr
EXACT 217 trunc trunc
EXACT 218 store store
EXACT 219 lshr lshr
EXACT 220 lshr lshr
EXACT 221 xor xor
EXACT 222 xor xor
EXACT 223 add add
EXACT 224 icmp icmp
EXACT 225 zext zext
EXACT 226 store store
EXACT 227 icmp icmp
EXACT 228 xor xor
EXACT 229 select select
EXACT 230 add add
EXACT 231 store store
EXACT 232 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %3, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI.i = bitcast %union.anon* %15 to i32*', '%16 = load i64, i64* %RBP.i, align 8', '%17 = add i64 %16, -12', '%18 = load i32, i32* %ESI.i, align 4', '%19 = load i64, i64* %3, align 8', '%20 = add i64 %19, 3', 'store i64 %20, i64* %3, align 8', '%21 = inttoptr i64 %17 to i32*', 'store i32 %18, i32* %21, align 4', '%24 = load i64, i64* %3, align 8', '%25 = add i64 %24, 7', 'store i64 %25, i64* %3, align 8', '%29 = load i64, i64* %3, align 8', '%30 = add i64 %29, 7', 'store i64 %30, i64* %3, align 8', '%RAX.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RCX.i22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX.i20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%38 = phi i64 [ %152, %block_400615 ], [ %.pre, %entry ]', '%41 = add i64 %38, 3', 'store i64 %41, i64* %3, align 8', '%44 = zext i32 %43 to i64', 'store i64 %44, i64* %RAX.i32, align 8', '%46 = add i64 %38, 6', 'store i64 %46, i64* %3, align 8', '%50 = icmp ult i32 %43, %48', '%51 = zext i1 %50 to i8', 'store i8 %51, i8* %32, align 1', '%52 = and i32 %49, 255', '%53 = tail call i32 @llvm.ctpop.i32(i32 %52)', '%54 = trunc i32 %53 to i8', '%55 = and i8 %54, 1', '%56 = xor i8 %55, 1', 'store i8 %56, i8* %33, align 1', '%57 = xor i32 %48, %43', '%58 = xor i32 %57, %49', '%59 = lshr i32 %58, 4', '%60 = trunc i32 %59 to i8', '%61 = and i8 %60, 1', 'store i8 %61, i8* %34, align 1', '%62 = icmp eq i32 %49, 0', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %35, align 1', 'store i8 %65, i8* %36, align 1', '%72 = zext i1 %71 to i8', 'store i8 %72, i8* %37, align 1', '%.v = select i1 %74, i64 12, i64 43', '%75 = add i64 %38, %.v', 'store i64 %75, i64* %3, align 8', '%76 = add i64 %39, -8', '%77 = add i64 %75, 4', 'store i64 %77, i64* %3, align 8', '%78 = inttoptr i64 %76 to i64*', '%79 = load i64, i64* %78, align 8', 'store i64 %79, i64* %RAX.i32, align 8', '%80 = add i64 %75, 8', 'store i64 %80, i64* %3, align 8', '%81 = load i32, i32* %42, align 4', '%82 = sext i32 %81 to i64', 'store i64 %82, i64* %RCX.i22, align 8', '%83 = shl nsw i64 %82, 2', '%84 = add i64 %83, %79', '%85 = add i64 %75, 11', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %84 to i32*', '%87 = load i32, i32* %86, align 4', '%88 = zext i32 %87 to i64', 'store i64 %88, i64* %RDX.i20, align 8', '%89 = add i64 %39, -16', '%90 = add i64 %75, 14', 'store i64 %90, i64* %3, align 8', '%91 = inttoptr i64 %89 to i32*', '%92 = load i32, i32* %91, align 4', '%93 = add i32 %92, %87', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RDX.i20, align 8', '%95 = icmp ult i32 %93, %87', '%96 = icmp ult i32 %93, %92', '%97 = or i1 %95, %96', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %32, align 1', '%99 = and i32 %93, 255', '%100 = tail call i32 @llvm.ctpop.i32(i32 %99)', '%101 = trunc i32 %100 to i8', '%102 = and i8 %101, 1', '%103 = xor i8 %102, 1', 'store i8 %103, i8* %33, align 1', '%104 = xor i32 %92, %87', '%105 = xor i32 %104, %93', '%106 = lshr i32 %105, 4', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', 'store i8 %108, i8* %34, align 1', '%109 = icmp eq i32 %93, 0', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %35, align 1', '%111 = lshr i32 %93, 31', '%112 = trunc i32 %111 to i8', 'store i8 %112, i8* %36, align 1', '%113 = lshr i32 %87, 31', '%114 = lshr i32 %92, 31', '%115 = xor i32 %111, %113', '%116 = xor i32 %111, %114', '%117 = add nuw nsw i32 %115, %116', '%118 = icmp eq i32 %117, 2', '%119 = zext i1 %118 to i8', 'store i8 %119, i8* %37, align 1', '%120 = add i64 %75, 17', 'store i64 %120, i64* %3, align 8', 'store i32 %93, i32* %91, align 4', '%121 = load i64, i64* %RBP.i, align 8', '%122 = add i64 %121, -20', '%123 = load i64, i64* %3, align 8', '%124 = add i64 %123, 3', 'store i64 %124, i64* %3, align 8', '%125 = inttoptr i64 %122 to i32*', '%126 = load i32, i32* %125, align 4', '%127 = add i32 %126, 1', '%128 = zext i32 %127 to i64', 'store i64 %128, i64* %RAX.i32, align 8', '%129 = icmp eq i32 %126, -1', '%130 = icmp eq i32 %127, 0', '%131 = or i1 %129, %130', '%132 = zext i1 %131 to i8', 'store i8 %132, i8* %32, align 1', '%133 = and i32 %127, 255', '%134 = tail call i32 @llvm.ctpop.i32(i32 %133)', '%135 = trunc i32 %134 to i8', '%136 = and i8 %135, 1', '%137 = xor i8 %136, 1', 'store i8 %137, i8* %33, align 1', '%138 = xor i32 %127, %126', '%139 = lshr i32 %138, 4', '%140 = trunc i32 %139 to i8', '%141 = and i8 %140, 1', 'store i8 %141, i8* %34, align 1', '%142 = zext i1 %130 to i8', 'store i8 %142, i8* %35, align 1', '%143 = lshr i32 %127, 31', '%144 = trunc i32 %143 to i8', 'store i8 %144, i8* %36, align 1', '%145 = lshr i32 %126, 31', '%146 = xor i32 %143, %145', '%147 = add nuw nsw i32 %146, %143', '%148 = icmp eq i32 %147, 2', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %37, align 1', '%150 = add i64 %123, 9', 'store i64 %150, i64* %3, align 8', 'store i32 %127, i32* %125, align 4', '%151 = load i64, i64* %3, align 8', '%152 = add i64 %151, -38', 'store i64 %152, i64* %3, align 8', '%153 = add i64 %39, -16', '%154 = add i64 %75, 3', 'store i64 %154, i64* %3, align 8', '%155 = inttoptr i64 %153 to i32*', '%156 = load i32, i32* %155, align 4', '%157 = zext i32 %156 to i64', 'store i64 %157, i64* %RAX.i32, align 8', '%158 = add i64 %75, 4', 'store i64 %158, i64* %3, align 8', '%159 = load i64, i64* %6, align 8', '%160 = add i64 %159, 8', '%161 = inttoptr i64 %159 to i64*', '%162 = load i64, i64* %161, align 8', 'store i64 %162, i64* %RBP.i, align 8', 'store i64 %160, i64* %6, align 8', '%163 = add i64 %75, 5', 'store i64 %163, i64* %3, align 8', '%164 = inttoptr i64 %160 to i64*', '%165 = load i64, i64* %164, align 8', 'store i64 %165, i64* %3, align 8', '%166 = add i64 %159, 16', 'store i64 %166, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI.i, align 8
Found line to remove! %13 = add i64 %10, 7
Found line to remove! store i64 %13, i64* %3, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI.i = bitcast %union.anon* %15 to i32*
Found line to remove! %16 = load i64, i64* %RBP.i, align 8
Found line to remove! %17 = add i64 %16, -12
Found line to remove! %18 = load i32, i32* %ESI.i, align 4
Found line to remove! %19 = load i64, i64* %3, align 8
Found line to remove! %20 = add i64 %19, 3
Found line to remove! store i64 %20, i64* %3, align 8
Found line to remove! %21 = inttoptr i64 %17 to i32*
Found line to remove! store i32 %18, i32* %21, align 4
Keep: %22 = load i64, i64* %RBP.i, align 8
Keep: %23 = add i64 %22, -16
Found line to remove! %24 = load i64, i64* %3, align 8
Found line to remove! %25 = add i64 %24, 7
Found line to remove! store i64 %25, i64* %3, align 8
Keep: %26 = inttoptr i64 %23 to i32*
Keep: store i32 0, i32* %26, align 4
Keep: %27 = load i64, i64* %RBP.i, align 8
Keep: %28 = add i64 %27, -20
Found line to remove! %29 = load i64, i64* %3, align 8
Found line to remove! %30 = add i64 %29, 7
Found line to remove! store i64 %30, i64* %3, align 8
Keep: %31 = inttoptr i64 %28 to i32*
Keep: store i32 0, i32* %31, align 4
Found line to remove! %RAX.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %RCX.i22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX.i20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_400609
Keep: 
Keep: block_.L_400609:                                  ; preds = %block_400615, %entry
Found line to remove! %38 = phi i64 [ %152, %block_400615 ], [ %.pre, %entry ]
Keep: %39 = load i64, i64* %RBP.i, align 8
Keep: %40 = add i64 %39, -20
Found line to remove! %41 = add i64 %38, 3
Found line to remove! store i64 %41, i64* %3, align 8
Keep: %42 = inttoptr i64 %40 to i32*
Keep: %43 = load i32, i32* %42, align 4
Found line to remove! %44 = zext i32 %43 to i64
Found line to remove! store i64 %44, i64* %RAX.i32, align 8
Keep: %45 = add i64 %39, -12
Found line to remove! %46 = add i64 %38, 6
Found line to remove! store i64 %46, i64* %3, align 8
Keep: %47 = inttoptr i64 %45 to i32*
Keep: %48 = load i32, i32* %47, align 4
Keep: %49 = sub i32 %43, %48
Found line to remove! %50 = icmp ult i32 %43, %48
Found line to remove! %51 = zext i1 %50 to i8
Found line to remove! store i8 %51, i8* %32, align 1
Found line to remove! %52 = and i32 %49, 255
Found line to remove! %53 = tail call i32 @llvm.ctpop.i32(i32 %52)
Found line to remove! %54 = trunc i32 %53 to i8
Found line to remove! %55 = and i8 %54, 1
Found line to remove! %56 = xor i8 %55, 1
Found line to remove! store i8 %56, i8* %33, align 1
Found line to remove! %57 = xor i32 %48, %43
Found line to remove! %58 = xor i32 %57, %49
Found line to remove! %59 = lshr i32 %58, 4
Found line to remove! %60 = trunc i32 %59 to i8
Found line to remove! %61 = and i8 %60, 1
Found line to remove! store i8 %61, i8* %34, align 1
Found line to remove! %62 = icmp eq i32 %49, 0
Found line to remove! %63 = zext i1 %62 to i8
Found line to remove! store i8 %63, i8* %35, align 1
Keep: %64 = lshr i32 %49, 31
Keep: %65 = trunc i32 %64 to i8
Found line to remove! store i8 %65, i8* %36, align 1
Keep: %66 = lshr i32 %43, 31
Keep: %67 = lshr i32 %48, 31
Keep: %68 = xor i32 %67, %66
Keep: %69 = xor i32 %64, %66
Keep: %70 = add nuw nsw i32 %69, %68
Keep: %71 = icmp eq i32 %70, 2
Found line to remove! %72 = zext i1 %71 to i8
Found line to remove! store i8 %72, i8* %37, align 1
Keep: %73 = icmp ne i8 %65, 0
Keep: %74 = xor i1 %73, %71
Found line to remove! %.v = select i1 %74, i64 12, i64 43
Found line to remove! %75 = add i64 %38, %.v
Found line to remove! store i64 %75, i64* %3, align 8
Keep: br i1 %74, label %block_400615, label %block_.L_400634
Keep: 
Keep: block_400615:                                     ; preds = %block_.L_400609
Found line to remove! %76 = add i64 %39, -8
Found line to remove! %77 = add i64 %75, 4
Found line to remove! store i64 %77, i64* %3, align 8
Found line to remove! %78 = inttoptr i64 %76 to i64*
Found line to remove! %79 = load i64, i64* %78, align 8
Found line to remove! store i64 %79, i64* %RAX.i32, align 8
Found line to remove! %80 = add i64 %75, 8
Found line to remove! store i64 %80, i64* %3, align 8
Found line to remove! %81 = load i32, i32* %42, align 4
Found line to remove! %82 = sext i32 %81 to i64
Found line to remove! store i64 %82, i64* %RCX.i22, align 8
Found line to remove! %83 = shl nsw i64 %82, 2
Found line to remove! %84 = add i64 %83, %79
Found line to remove! %85 = add i64 %75, 11
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! %86 = inttoptr i64 %84 to i32*
Found line to remove! %87 = load i32, i32* %86, align 4
Found line to remove! %88 = zext i32 %87 to i64
Found line to remove! store i64 %88, i64* %RDX.i20, align 8
Found line to remove! %89 = add i64 %39, -16
Found line to remove! %90 = add i64 %75, 14
Found line to remove! store i64 %90, i64* %3, align 8
Found line to remove! %91 = inttoptr i64 %89 to i32*
Found line to remove! %92 = load i32, i32* %91, align 4
Found line to remove! %93 = add i32 %92, %87
Found line to remove! %94 = zext i32 %93 to i64
Found line to remove! store i64 %94, i64* %RDX.i20, align 8
Found line to remove! %95 = icmp ult i32 %93, %87
Found line to remove! %96 = icmp ult i32 %93, %92
Found line to remove! %97 = or i1 %95, %96
Found line to remove! %98 = zext i1 %97 to i8
Found line to remove! store i8 %98, i8* %32, align 1
Found line to remove! %99 = and i32 %93, 255
Found line to remove! %100 = tail call i32 @llvm.ctpop.i32(i32 %99)
Found line to remove! %101 = trunc i32 %100 to i8
Found line to remove! %102 = and i8 %101, 1
Found line to remove! %103 = xor i8 %102, 1
Found line to remove! store i8 %103, i8* %33, align 1
Found line to remove! %104 = xor i32 %92, %87
Found line to remove! %105 = xor i32 %104, %93
Found line to remove! %106 = lshr i32 %105, 4
Found line to remove! %107 = trunc i32 %106 to i8
Found line to remove! %108 = and i8 %107, 1
Found line to remove! store i8 %108, i8* %34, align 1
Found line to remove! %109 = icmp eq i32 %93, 0
Found line to remove! %110 = zext i1 %109 to i8
Found line to remove! store i8 %110, i8* %35, align 1
Found line to remove! %111 = lshr i32 %93, 31
Found line to remove! %112 = trunc i32 %111 to i8
Found line to remove! store i8 %112, i8* %36, align 1
Found line to remove! %113 = lshr i32 %87, 31
Found line to remove! %114 = lshr i32 %92, 31
Found line to remove! %115 = xor i32 %111, %113
Found line to remove! %116 = xor i32 %111, %114
Found line to remove! %117 = add nuw nsw i32 %115, %116
Found line to remove! %118 = icmp eq i32 %117, 2
Found line to remove! %119 = zext i1 %118 to i8
Found line to remove! store i8 %119, i8* %37, align 1
Found line to remove! %120 = add i64 %75, 17
Found line to remove! store i64 %120, i64* %3, align 8
Found line to remove! store i32 %93, i32* %91, align 4
Found line to remove! %121 = load i64, i64* %RBP.i, align 8
Found line to remove! %122 = add i64 %121, -20
Found line to remove! %123 = load i64, i64* %3, align 8
Found line to remove! %124 = add i64 %123, 3
Found line to remove! store i64 %124, i64* %3, align 8
Found line to remove! %125 = inttoptr i64 %122 to i32*
Found line to remove! %126 = load i32, i32* %125, align 4
Found line to remove! %127 = add i32 %126, 1
Found line to remove! %128 = zext i32 %127 to i64
Found line to remove! store i64 %128, i64* %RAX.i32, align 8
Found line to remove! %129 = icmp eq i32 %126, -1
Found line to remove! %130 = icmp eq i32 %127, 0
Found line to remove! %131 = or i1 %129, %130
Found line to remove! %132 = zext i1 %131 to i8
Found line to remove! store i8 %132, i8* %32, align 1
Found line to remove! %133 = and i32 %127, 255
Found line to remove! %134 = tail call i32 @llvm.ctpop.i32(i32 %133)
Found line to remove! %135 = trunc i32 %134 to i8
Found line to remove! %136 = and i8 %135, 1
Found line to remove! %137 = xor i8 %136, 1
Found line to remove! store i8 %137, i8* %33, align 1
Found line to remove! %138 = xor i32 %127, %126
Found line to remove! %139 = lshr i32 %138, 4
Found line to remove! %140 = trunc i32 %139 to i8
Found line to remove! %141 = and i8 %140, 1
Found line to remove! store i8 %141, i8* %34, align 1
Found line to remove! %142 = zext i1 %130 to i8
Found line to remove! store i8 %142, i8* %35, align 1
Found line to remove! %143 = lshr i32 %127, 31
Found line to remove! %144 = trunc i32 %143 to i8
Found line to remove! store i8 %144, i8* %36, align 1
Found line to remove! %145 = lshr i32 %126, 31
Found line to remove! %146 = xor i32 %143, %145
Found line to remove! %147 = add nuw nsw i32 %146, %143
Found line to remove! %148 = icmp eq i32 %147, 2
Found line to remove! %149 = zext i1 %148 to i8
Found line to remove! store i8 %149, i8* %37, align 1
Found line to remove! %150 = add i64 %123, 9
Found line to remove! store i64 %150, i64* %3, align 8
Found line to remove! store i32 %127, i32* %125, align 4
Found line to remove! %151 = load i64, i64* %3, align 8
Found line to remove! %152 = add i64 %151, -38
Found line to remove! store i64 %152, i64* %3, align 8
Keep: br label %block_.L_400609
Keep: 
Keep: block_.L_400634:                                  ; preds = %block_.L_400609
Found line to remove! %153 = add i64 %39, -16
Found line to remove! %154 = add i64 %75, 3
Found line to remove! store i64 %154, i64* %3, align 8
Found line to remove! %155 = inttoptr i64 %153 to i32*
Found line to remove! %156 = load i32, i32* %155, align 4
Found line to remove! %157 = zext i32 %156 to i64
Found line to remove! store i64 %157, i64* %RAX.i32, align 8
Found line to remove! %158 = add i64 %75, 4
Found line to remove! store i64 %158, i64* %3, align 8
Found line to remove! %159 = load i64, i64* %6, align 8
Found line to remove! %160 = add i64 %159, 8
Found line to remove! %161 = inttoptr i64 %159 to i64*
Found line to remove! %162 = load i64, i64* %161, align 8
Found line to remove! store i64 %162, i64* %RBP.i, align 8
Found line to remove! store i64 %160, i64* %6, align 8
Found line to remove! %163 = add i64 %75, 5
Found line to remove! store i64 %163, i64* %3, align 8
Found line to remove! %164 = inttoptr i64 %160 to i64*
Found line to remove! %165 = load i64, i64* %164, align 8
Found line to remove! store i64 %165, i64* %3, align 8
Found line to remove! %166 = add i64 %159, 16
Found line to remove! store i64 %166, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI.i, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %3, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI.i = bitcast %union.anon* %15 to i32*', '%16 = load i64, i64* %RBP.i, align 8', '%17 = add i64 %16, -12', '%18 = load i32, i32* %ESI.i, align 4', '%19 = load i64, i64* %3, align 8', '%20 = add i64 %19, 3', 'store i64 %20, i64* %3, align 8', '%21 = inttoptr i64 %17 to i32*', 'store i32 %18, i32* %21, align 4', '%24 = load i64, i64* %3, align 8', '%25 = add i64 %24, 7', 'store i64 %25, i64* %3, align 8', '%29 = load i64, i64* %3, align 8', '%30 = add i64 %29, 7', 'store i64 %30, i64* %3, align 8', '%RAX.i32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RCX.i22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX.i20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%38 = phi i64 [ %152, %block_400615 ], [ %.pre, %entry ]', '%41 = add i64 %38, 3', 'store i64 %41, i64* %3, align 8', '%44 = zext i32 %43 to i64', 'store i64 %44, i64* %RAX.i32, align 8', '%46 = add i64 %38, 6', 'store i64 %46, i64* %3, align 8', '%50 = icmp ult i32 %43, %48', '%51 = zext i1 %50 to i8', 'store i8 %51, i8* %32, align 1', '%52 = and i32 %49, 255', '%53 = tail call i32 @llvm.ctpop.i32(i32 %52)', '%54 = trunc i32 %53 to i8', '%55 = and i8 %54, 1', '%56 = xor i8 %55, 1', 'store i8 %56, i8* %33, align 1', '%57 = xor i32 %48, %43', '%58 = xor i32 %57, %49', '%59 = lshr i32 %58, 4', '%60 = trunc i32 %59 to i8', '%61 = and i8 %60, 1', 'store i8 %61, i8* %34, align 1', '%62 = icmp eq i32 %49, 0', '%63 = zext i1 %62 to i8', 'store i8 %63, i8* %35, align 1', 'store i8 %65, i8* %36, align 1', '%72 = zext i1 %71 to i8', 'store i8 %72, i8* %37, align 1', '%.v = select i1 %74, i64 12, i64 43', '%75 = add i64 %38, %.v', 'store i64 %75, i64* %3, align 8', '%76 = add i64 %39, -8', '%77 = add i64 %75, 4', 'store i64 %77, i64* %3, align 8', '%78 = inttoptr i64 %76 to i64*', '%79 = load i64, i64* %78, align 8', 'store i64 %79, i64* %RAX.i32, align 8', '%80 = add i64 %75, 8', 'store i64 %80, i64* %3, align 8', '%81 = load i32, i32* %42, align 4', '%82 = sext i32 %81 to i64', 'store i64 %82, i64* %RCX.i22, align 8', '%83 = shl nsw i64 %82, 2', '%84 = add i64 %83, %79', '%85 = add i64 %75, 11', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %84 to i32*', '%87 = load i32, i32* %86, align 4', '%88 = zext i32 %87 to i64', 'store i64 %88, i64* %RDX.i20, align 8', '%89 = add i64 %39, -16', '%90 = add i64 %75, 14', 'store i64 %90, i64* %3, align 8', '%91 = inttoptr i64 %89 to i32*', '%92 = load i32, i32* %91, align 4', '%93 = add i32 %92, %87', '%94 = zext i32 %93 to i64', 'store i64 %94, i64* %RDX.i20, align 8', '%95 = icmp ult i32 %93, %87', '%96 = icmp ult i32 %93, %92', '%97 = or i1 %95, %96', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %32, align 1', '%99 = and i32 %93, 255', '%100 = tail call i32 @llvm.ctpop.i32(i32 %99)', '%101 = trunc i32 %100 to i8', '%102 = and i8 %101, 1', '%103 = xor i8 %102, 1', 'store i8 %103, i8* %33, align 1', '%104 = xor i32 %92, %87', '%105 = xor i32 %104, %93', '%106 = lshr i32 %105, 4', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', 'store i8 %108, i8* %34, align 1', '%109 = icmp eq i32 %93, 0', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %35, align 1', '%111 = lshr i32 %93, 31', '%112 = trunc i32 %111 to i8', 'store i8 %112, i8* %36, align 1', '%113 = lshr i32 %87, 31', '%114 = lshr i32 %92, 31', '%115 = xor i32 %111, %113', '%116 = xor i32 %111, %114', '%117 = add nuw nsw i32 %115, %116', '%118 = icmp eq i32 %117, 2', '%119 = zext i1 %118 to i8', 'store i8 %119, i8* %37, align 1', '%120 = add i64 %75, 17', 'store i64 %120, i64* %3, align 8', 'store i32 %93, i32* %91, align 4', '%121 = load i64, i64* %RBP.i, align 8', '%122 = add i64 %121, -20', '%123 = load i64, i64* %3, align 8', '%124 = add i64 %123, 3', 'store i64 %124, i64* %3, align 8', '%125 = inttoptr i64 %122 to i32*', '%126 = load i32, i32* %125, align 4', '%127 = add i32 %126, 1', '%128 = zext i32 %127 to i64', 'store i64 %128, i64* %RAX.i32, align 8', '%129 = icmp eq i32 %126, -1', '%130 = icmp eq i32 %127, 0', '%131 = or i1 %129, %130', '%132 = zext i1 %131 to i8', 'store i8 %132, i8* %32, align 1', '%133 = and i32 %127, 255', '%134 = tail call i32 @llvm.ctpop.i32(i32 %133)', '%135 = trunc i32 %134 to i8', '%136 = and i8 %135, 1', '%137 = xor i8 %136, 1', 'store i8 %137, i8* %33, align 1', '%138 = xor i32 %127, %126', '%139 = lshr i32 %138, 4', '%140 = trunc i32 %139 to i8', '%141 = and i8 %140, 1', 'store i8 %141, i8* %34, align 1', '%142 = zext i1 %130 to i8', 'store i8 %142, i8* %35, align 1', '%143 = lshr i32 %127, 31', '%144 = trunc i32 %143 to i8', 'store i8 %144, i8* %36, align 1', '%145 = lshr i32 %126, 31', '%146 = xor i32 %143, %145', '%147 = add nuw nsw i32 %146, %143', '%148 = icmp eq i32 %147, 2', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %37, align 1', '%150 = add i64 %123, 9', 'store i64 %150, i64* %3, align 8', 'store i32 %127, i32* %125, align 4', '%151 = load i64, i64* %3, align 8', '%152 = add i64 %151, -38', 'store i64 %152, i64* %3, align 8', '%153 = add i64 %39, -16', '%154 = add i64 %75, 3', 'store i64 %154, i64* %3, align 8', '%155 = inttoptr i64 %153 to i32*', '%156 = load i32, i32* %155, align 4', '%157 = zext i32 %156 to i64', 'store i64 %157, i64* %RAX.i32, align 8', '%158 = add i64 %75, 4', 'store i64 %158, i64* %3, align 8', '%159 = load i64, i64* %6, align 8', '%160 = add i64 %159, 8', '%161 = inttoptr i64 %159 to i64*', '%162 = load i64, i64* %161, align 8', 'store i64 %162, i64* %RBP.i, align 8', 'store i64 %160, i64* %6, align 8', '%163 = add i64 %75, 5', 'store i64 %163, i64* %3, align 8', '%164 = inttoptr i64 %160 to i64*', '%165 = load i64, i64* %164, align 8', 'store i64 %165, i64* %3, align 8', '%166 = add i64 %159, 16', 'store i64 %166, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%15 = load i64, i64* %RBP, align 8', '%16 = add i64 %15, -12', '%17 = load i32, i32* %ESI, align 4', '%18 = load i64, i64* %PC, align 8', '%19 = add i64 %18, 3', 'store i64 %19, i64* %PC, align 8', '%20 = inttoptr i64 %16 to i32*', 'store i32 %17, i32* %20, align 4', '%23 = load i64, i64* %PC, align 8', '%24 = add i64 %23, 7', 'store i64 %24, i64* %PC, align 8', '%28 = load i64, i64* %PC, align 8', '%29 = add i64 %28, 7', 'store i64 %29, i64* %PC, align 8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %PC, align 8', '%37 = add i64 %129, -8', '%38 = add i64 %165, 4', 'store i64 %38, i64* %PC, align 8', '%39 = inttoptr i64 %37 to i64*', '%40 = load i64, i64* %39, align 8', 'store i64 %40, i64* %RAX, align 8', '%41 = add i64 %165, 8', 'store i64 %41, i64* %PC, align 8', '%42 = load i32, i32* %132, align 4', '%43 = sext i32 %42 to i64', 'store i64 %43, i64* %RCX, align 8', '%44 = shl nsw i64 %43, 2', '%45 = add i64 %44, %40', '%46 = add i64 %165, 11', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %45 to i32*', '%48 = load i32, i32* %47, align 4', '%49 = zext i32 %48 to i64', 'store i64 %49, i64* %RDX, align 8', '%50 = add i64 %129, -16', '%51 = add i64 %165, 14', 'store i64 %51, i64* %PC, align 8', '%52 = inttoptr i64 %50 to i32*', '%53 = load i32, i32* %52, align 4', '%54 = add i32 %53, %48', '%55 = zext i32 %54 to i64', 'store i64 %55, i64* %RDX, align 8', '%56 = icmp ult i32 %54, %48', '%57 = icmp ult i32 %54, %53', '%58 = or i1 %56, %57', '%59 = zext i1 %58 to i8', 'store i8 %59, i8* %31, align 1', '%60 = and i32 %54, 255', '%61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12', '%62 = trunc i32 %61 to i8', '%63 = and i8 %62, 1', '%64 = xor i8 %63, 1', 'store i8 %64, i8* %32, align 1', '%65 = xor i32 %53, %48', '%66 = xor i32 %65, %54', '%67 = lshr i32 %66, 4', '%68 = trunc i32 %67 to i8', '%69 = and i8 %68, 1', 'store i8 %69, i8* %33, align 1', '%70 = icmp eq i32 %54, 0', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %34, align 1', '%72 = lshr i32 %54, 31', '%73 = trunc i32 %72 to i8', 'store i8 %73, i8* %35, align 1', '%74 = lshr i32 %48, 31', '%75 = lshr i32 %53, 31', '%76 = xor i32 %72, %74', '%77 = xor i32 %72, %75', '%78 = add nuw nsw i32 %76, %77', '%79 = icmp eq i32 %78, 2', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %36, align 1', '%81 = add i64 %165, 17', 'store i64 %81, i64* %PC, align 8', 'store i32 %54, i32* %52, align 4', '%82 = load i64, i64* %RBP, align 8', '%83 = add i64 %82, -20', '%84 = load i64, i64* %PC, align 8', '%85 = add i64 %84, 3', 'store i64 %85, i64* %PC, align 8', '%86 = inttoptr i64 %83 to i32*', '%87 = load i32, i32* %86, align 4', '%88 = add i32 %87, 1', '%89 = zext i32 %88 to i64', 'store i64 %89, i64* %RAX, align 8', '%90 = icmp eq i32 %87, -1', '%91 = icmp eq i32 %88, 0', '%92 = or i1 %90, %91', '%93 = zext i1 %92 to i8', 'store i8 %93, i8* %31, align 1', '%94 = and i32 %88, 255', '%95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12', '%96 = trunc i32 %95 to i8', '%97 = and i8 %96, 1', '%98 = xor i8 %97, 1', 'store i8 %98, i8* %32, align 1', '%99 = xor i32 %88, %87', '%100 = lshr i32 %99, 4', '%101 = trunc i32 %100 to i8', '%102 = and i8 %101, 1', 'store i8 %102, i8* %33, align 1', '%103 = zext i1 %91 to i8', 'store i8 %103, i8* %34, align 1', '%104 = lshr i32 %88, 31', '%105 = trunc i32 %104 to i8', 'store i8 %105, i8* %35, align 1', '%106 = lshr i32 %87, 31', '%107 = xor i32 %104, %106', '%108 = add nuw nsw i32 %107, %104', '%109 = icmp eq i32 %108, 2', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %36, align 1', '%111 = add i64 %84, 9', 'store i64 %111, i64* %PC, align 8', 'store i32 %88, i32* %86, align 4', '%112 = load i64, i64* %PC, align 8', '%113 = add i64 %112, -38', 'store i64 %113, i64* %PC, align 8', '%114 = add i64 %129, -16', '%115 = add i64 %165, 3', 'store i64 %115, i64* %PC, align 8', '%116 = inttoptr i64 %114 to i32*', '%117 = load i32, i32* %116, align 4', '%118 = zext i32 %117 to i64', 'store i64 %118, i64* %RAX, align 8', '%119 = add i64 %165, 4', 'store i64 %119, i64* %PC, align 8', '%120 = load i64, i64* %6, align 8', '%121 = add i64 %120, 8', '%122 = inttoptr i64 %120 to i64*', '%123 = load i64, i64* %122, align 8', 'store i64 %123, i64* %RBP, align 8', 'store i64 %121, i64* %6, align 8', '%124 = add i64 %165, 5', 'store i64 %124, i64* %PC, align 8', '%125 = inttoptr i64 %121 to i64*', '%126 = load i64, i64* %125, align 8', 'store i64 %126, i64* %PC, align 8', '%127 = add i64 %120, 16', 'store i64 %127, i64* %6, align 8', '%128 = phi i64 [ %113, %block_400615 ], [ %.pre, %block_4005f0 ]', '%131 = add i64 %128, 3', 'store i64 %131, i64* %PC, align 8', '%134 = zext i32 %133 to i64', 'store i64 %134, i64* %RAX, align 8', '%136 = add i64 %128, 6', 'store i64 %136, i64* %PC, align 8', '%140 = icmp ult i32 %133, %138', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %31, align 1', '%142 = and i32 %139, 255', '%143 = tail call i32 @llvm.ctpop.i32(i32 %142) #12', '%144 = trunc i32 %143 to i8', '%145 = and i8 %144, 1', '%146 = xor i8 %145, 1', 'store i8 %146, i8* %32, align 1', '%147 = xor i32 %138, %133', '%148 = xor i32 %147, %139', '%149 = lshr i32 %148, 4', '%150 = trunc i32 %149 to i8', '%151 = and i8 %150, 1', 'store i8 %151, i8* %33, align 1', '%152 = icmp eq i32 %139, 0', '%153 = zext i1 %152 to i8', 'store i8 %153, i8* %34, align 1', 'store i8 %155, i8* %35, align 1', '%162 = zext i1 %161 to i8', 'store i8 %162, i8* %36, align 1', '%.v = select i1 %164, i64 12, i64 43', '%165 = add i64 %128, %.v', 'store i64 %165, i64* %PC, align 8'])
Keep: block_4005f0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %PC, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = load i64, i64* %RDI, align 8
Found line to remove! %13 = add i64 %10, 7
Found line to remove! store i64 %13, i64* %PC, align 8
Found line to remove! %14 = inttoptr i64 %11 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Found line to remove! %15 = load i64, i64* %RBP, align 8
Found line to remove! %16 = add i64 %15, -12
Found line to remove! %17 = load i32, i32* %ESI, align 4
Found line to remove! %18 = load i64, i64* %PC, align 8
Found line to remove! %19 = add i64 %18, 3
Found line to remove! store i64 %19, i64* %PC, align 8
Found line to remove! %20 = inttoptr i64 %16 to i32*
Found line to remove! store i32 %17, i32* %20, align 4
Keep: %21 = load i64, i64* %RBP, align 8
Keep: %22 = add i64 %21, -16
Found line to remove! %23 = load i64, i64* %PC, align 8
Found line to remove! %24 = add i64 %23, 7
Found line to remove! store i64 %24, i64* %PC, align 8
Keep: %25 = inttoptr i64 %22 to i32*
Keep: store i32 0, i32* %25, align 4
Keep: %26 = load i64, i64* %RBP, align 8
Keep: %27 = add i64 %26, -20
Found line to remove! %28 = load i64, i64* %PC, align 8
Found line to remove! %29 = add i64 %28, 7
Found line to remove! store i64 %29, i64* %PC, align 8
Keep: %30 = inttoptr i64 %27 to i32*
Keep: store i32 0, i32* %30, align 4
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400609
Keep: 
Keep: block_400615:                                     ; preds = %block_400609
Found line to remove! %37 = add i64 %129, -8
Found line to remove! %38 = add i64 %165, 4
Found line to remove! store i64 %38, i64* %PC, align 8
Found line to remove! %39 = inttoptr i64 %37 to i64*
Found line to remove! %40 = load i64, i64* %39, align 8
Found line to remove! store i64 %40, i64* %RAX, align 8
Found line to remove! %41 = add i64 %165, 8
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = load i32, i32* %132, align 4
Found line to remove! %43 = sext i32 %42 to i64
Found line to remove! store i64 %43, i64* %RCX, align 8
Found line to remove! %44 = shl nsw i64 %43, 2
Found line to remove! %45 = add i64 %44, %40
Found line to remove! %46 = add i64 %165, 11
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = inttoptr i64 %45 to i32*
Found line to remove! %48 = load i32, i32* %47, align 4
Found line to remove! %49 = zext i32 %48 to i64
Found line to remove! store i64 %49, i64* %RDX, align 8
Found line to remove! %50 = add i64 %129, -16
Found line to remove! %51 = add i64 %165, 14
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = inttoptr i64 %50 to i32*
Found line to remove! %53 = load i32, i32* %52, align 4
Found line to remove! %54 = add i32 %53, %48
Found line to remove! %55 = zext i32 %54 to i64
Found line to remove! store i64 %55, i64* %RDX, align 8
Found line to remove! %56 = icmp ult i32 %54, %48
Found line to remove! %57 = icmp ult i32 %54, %53
Found line to remove! %58 = or i1 %56, %57
Found line to remove! %59 = zext i1 %58 to i8
Found line to remove! store i8 %59, i8* %31, align 1
Found line to remove! %60 = and i32 %54, 255
Found line to remove! %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
Found line to remove! %62 = trunc i32 %61 to i8
Found line to remove! %63 = and i8 %62, 1
Found line to remove! %64 = xor i8 %63, 1
Found line to remove! store i8 %64, i8* %32, align 1
Found line to remove! %65 = xor i32 %53, %48
Found line to remove! %66 = xor i32 %65, %54
Found line to remove! %67 = lshr i32 %66, 4
Found line to remove! %68 = trunc i32 %67 to i8
Found line to remove! %69 = and i8 %68, 1
Found line to remove! store i8 %69, i8* %33, align 1
Found line to remove! %70 = icmp eq i32 %54, 0
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %34, align 1
Found line to remove! %72 = lshr i32 %54, 31
Found line to remove! %73 = trunc i32 %72 to i8
Found line to remove! store i8 %73, i8* %35, align 1
Found line to remove! %74 = lshr i32 %48, 31
Found line to remove! %75 = lshr i32 %53, 31
Found line to remove! %76 = xor i32 %72, %74
Found line to remove! %77 = xor i32 %72, %75
Found line to remove! %78 = add nuw nsw i32 %76, %77
Found line to remove! %79 = icmp eq i32 %78, 2
Found line to remove! %80 = zext i1 %79 to i8
Found line to remove! store i8 %80, i8* %36, align 1
Found line to remove! %81 = add i64 %165, 17
Found line to remove! store i64 %81, i64* %PC, align 8
Found line to remove! store i32 %54, i32* %52, align 4
Found line to remove! %82 = load i64, i64* %RBP, align 8
Found line to remove! %83 = add i64 %82, -20
Found line to remove! %84 = load i64, i64* %PC, align 8
Found line to remove! %85 = add i64 %84, 3
Found line to remove! store i64 %85, i64* %PC, align 8
Found line to remove! %86 = inttoptr i64 %83 to i32*
Found line to remove! %87 = load i32, i32* %86, align 4
Found line to remove! %88 = add i32 %87, 1
Found line to remove! %89 = zext i32 %88 to i64
Found line to remove! store i64 %89, i64* %RAX, align 8
Found line to remove! %90 = icmp eq i32 %87, -1
Found line to remove! %91 = icmp eq i32 %88, 0
Found line to remove! %92 = or i1 %90, %91
Found line to remove! %93 = zext i1 %92 to i8
Found line to remove! store i8 %93, i8* %31, align 1
Found line to remove! %94 = and i32 %88, 255
Found line to remove! %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12
Found line to remove! %96 = trunc i32 %95 to i8
Found line to remove! %97 = and i8 %96, 1
Found line to remove! %98 = xor i8 %97, 1
Found line to remove! store i8 %98, i8* %32, align 1
Found line to remove! %99 = xor i32 %88, %87
Found line to remove! %100 = lshr i32 %99, 4
Found line to remove! %101 = trunc i32 %100 to i8
Found line to remove! %102 = and i8 %101, 1
Found line to remove! store i8 %102, i8* %33, align 1
Found line to remove! %103 = zext i1 %91 to i8
Found line to remove! store i8 %103, i8* %34, align 1
Found line to remove! %104 = lshr i32 %88, 31
Found line to remove! %105 = trunc i32 %104 to i8
Found line to remove! store i8 %105, i8* %35, align 1
Found line to remove! %106 = lshr i32 %87, 31
Found line to remove! %107 = xor i32 %104, %106
Found line to remove! %108 = add nuw nsw i32 %107, %104
Found line to remove! %109 = icmp eq i32 %108, 2
Found line to remove! %110 = zext i1 %109 to i8
Found line to remove! store i8 %110, i8* %36, align 1
Found line to remove! %111 = add i64 %84, 9
Found line to remove! store i64 %111, i64* %PC, align 8
Found line to remove! store i32 %88, i32* %86, align 4
Found line to remove! %112 = load i64, i64* %PC, align 8
Found line to remove! %113 = add i64 %112, -38
Found line to remove! store i64 %113, i64* %PC, align 8
Keep: br label %block_400609
Keep: 
Keep: block_400634:                                     ; preds = %block_400609
Found line to remove! %114 = add i64 %129, -16
Found line to remove! %115 = add i64 %165, 3
Found line to remove! store i64 %115, i64* %PC, align 8
Found line to remove! %116 = inttoptr i64 %114 to i32*
Found line to remove! %117 = load i32, i32* %116, align 4
Found line to remove! %118 = zext i32 %117 to i64
Found line to remove! store i64 %118, i64* %RAX, align 8
Found line to remove! %119 = add i64 %165, 4
Found line to remove! store i64 %119, i64* %PC, align 8
Found line to remove! %120 = load i64, i64* %6, align 8
Found line to remove! %121 = add i64 %120, 8
Found line to remove! %122 = inttoptr i64 %120 to i64*
Found line to remove! %123 = load i64, i64* %122, align 8
Found line to remove! store i64 %123, i64* %RBP, align 8
Found line to remove! store i64 %121, i64* %6, align 8
Found line to remove! %124 = add i64 %165, 5
Found line to remove! store i64 %124, i64* %PC, align 8
Found line to remove! %125 = inttoptr i64 %121 to i64*
Found line to remove! %126 = load i64, i64* %125, align 8
Found line to remove! store i64 %126, i64* %PC, align 8
Found line to remove! %127 = add i64 %120, 16
Found line to remove! store i64 %127, i64* %6, align 8
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_400609:                                     ; preds = %block_400615, %block_4005f0
Found line to remove! %128 = phi i64 [ %113, %block_400615 ], [ %.pre, %block_4005f0 ]
Keep: %129 = load i64, i64* %RBP, align 8
Keep: %130 = add i64 %129, -20
Found line to remove! %131 = add i64 %128, 3
Found line to remove! store i64 %131, i64* %PC, align 8
Keep: %132 = inttoptr i64 %130 to i32*
Keep: %133 = load i32, i32* %132, align 4
Found line to remove! %134 = zext i32 %133 to i64
Found line to remove! store i64 %134, i64* %RAX, align 8
Keep: %135 = add i64 %129, -12
Found line to remove! %136 = add i64 %128, 6
Found line to remove! store i64 %136, i64* %PC, align 8
Keep: %137 = inttoptr i64 %135 to i32*
Keep: %138 = load i32, i32* %137, align 4
Keep: %139 = sub i32 %133, %138
Found line to remove! %140 = icmp ult i32 %133, %138
Found line to remove! %141 = zext i1 %140 to i8
Found line to remove! store i8 %141, i8* %31, align 1
Found line to remove! %142 = and i32 %139, 255
Found line to remove! %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #12
Found line to remove! %144 = trunc i32 %143 to i8
Found line to remove! %145 = and i8 %144, 1
Found line to remove! %146 = xor i8 %145, 1
Found line to remove! store i8 %146, i8* %32, align 1
Found line to remove! %147 = xor i32 %138, %133
Found line to remove! %148 = xor i32 %147, %139
Found line to remove! %149 = lshr i32 %148, 4
Found line to remove! %150 = trunc i32 %149 to i8
Found line to remove! %151 = and i8 %150, 1
Found line to remove! store i8 %151, i8* %33, align 1
Found line to remove! %152 = icmp eq i32 %139, 0
Found line to remove! %153 = zext i1 %152 to i8
Found line to remove! store i8 %153, i8* %34, align 1
Keep: %154 = lshr i32 %139, 31
Keep: %155 = trunc i32 %154 to i8
Found line to remove! store i8 %155, i8* %35, align 1
Keep: %156 = lshr i32 %133, 31
Keep: %157 = lshr i32 %138, 31
Keep: %158 = xor i32 %157, %156
Keep: %159 = xor i32 %154, %156
Keep: %160 = add nuw nsw i32 %159, %158
Keep: %161 = icmp eq i32 %160, 2
Found line to remove! %162 = zext i1 %161 to i8
Found line to remove! store i8 %162, i8* %36, align 1
Keep: %163 = icmp ne i8 %155, 0
Keep: %164 = xor i1 %163, %161
Found line to remove! %.v = select i1 %164, i64 12, i64 43
Found line to remove! %165 = add i64 %128, %.v
Found line to remove! store i64 %165, i64* %PC, align 8
Keep: br i1 %164, label %block_400615, label %block_400634
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -16', '%12 = load i64, i64* %RDI, align 8', '%13 = add i64 %10, 7', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i64*', 'store i64 %12, i64* %14, align 8', '%15 = load i64, i64* %RBP, align 8', '%16 = add i64 %15, -12', '%17 = load i32, i32* %ESI, align 4', '%18 = load i64, i64* %PC, align 8', '%19 = add i64 %18, 3', 'store i64 %19, i64* %PC, align 8', '%20 = inttoptr i64 %16 to i32*', 'store i32 %17, i32* %20, align 4', '%23 = load i64, i64* %PC, align 8', '%24 = add i64 %23, 7', 'store i64 %24, i64* %PC, align 8', '%28 = load i64, i64* %PC, align 8', '%29 = add i64 %28, 7', 'store i64 %29, i64* %PC, align 8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%.pre = load i64, i64* %PC, align 8', '%37 = add i64 %129, -8', '%38 = add i64 %165, 4', 'store i64 %38, i64* %PC, align 8', '%39 = inttoptr i64 %37 to i64*', '%40 = load i64, i64* %39, align 8', 'store i64 %40, i64* %RAX, align 8', '%41 = add i64 %165, 8', 'store i64 %41, i64* %PC, align 8', '%42 = load i32, i32* %132, align 4', '%43 = sext i32 %42 to i64', 'store i64 %43, i64* %RCX, align 8', '%44 = shl nsw i64 %43, 2', '%45 = add i64 %44, %40', '%46 = add i64 %165, 11', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %45 to i32*', '%48 = load i32, i32* %47, align 4', '%49 = zext i32 %48 to i64', 'store i64 %49, i64* %RDX, align 8', '%50 = add i64 %129, -16', '%51 = add i64 %165, 14', 'store i64 %51, i64* %PC, align 8', '%52 = inttoptr i64 %50 to i32*', '%53 = load i32, i32* %52, align 4', '%54 = add i32 %53, %48', '%55 = zext i32 %54 to i64', 'store i64 %55, i64* %RDX, align 8', '%56 = icmp ult i32 %54, %48', '%57 = icmp ult i32 %54, %53', '%58 = or i1 %56, %57', '%59 = zext i1 %58 to i8', 'store i8 %59, i8* %31, align 1', '%60 = and i32 %54, 255', '%61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12', '%62 = trunc i32 %61 to i8', '%63 = and i8 %62, 1', '%64 = xor i8 %63, 1', 'store i8 %64, i8* %32, align 1', '%65 = xor i32 %53, %48', '%66 = xor i32 %65, %54', '%67 = lshr i32 %66, 4', '%68 = trunc i32 %67 to i8', '%69 = and i8 %68, 1', 'store i8 %69, i8* %33, align 1', '%70 = icmp eq i32 %54, 0', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %34, align 1', '%72 = lshr i32 %54, 31', '%73 = trunc i32 %72 to i8', 'store i8 %73, i8* %35, align 1', '%74 = lshr i32 %48, 31', '%75 = lshr i32 %53, 31', '%76 = xor i32 %72, %74', '%77 = xor i32 %72, %75', '%78 = add nuw nsw i32 %76, %77', '%79 = icmp eq i32 %78, 2', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %36, align 1', '%81 = add i64 %165, 17', 'store i64 %81, i64* %PC, align 8', 'store i32 %54, i32* %52, align 4', '%82 = load i64, i64* %RBP, align 8', '%83 = add i64 %82, -20', '%84 = load i64, i64* %PC, align 8', '%85 = add i64 %84, 3', 'store i64 %85, i64* %PC, align 8', '%86 = inttoptr i64 %83 to i32*', '%87 = load i32, i32* %86, align 4', '%88 = add i32 %87, 1', '%89 = zext i32 %88 to i64', 'store i64 %89, i64* %RAX, align 8', '%90 = icmp eq i32 %87, -1', '%91 = icmp eq i32 %88, 0', '%92 = or i1 %90, %91', '%93 = zext i1 %92 to i8', 'store i8 %93, i8* %31, align 1', '%94 = and i32 %88, 255', '%95 = tail call i32 @llvm.ctpop.i32(i32 %94) #12', '%96 = trunc i32 %95 to i8', '%97 = and i8 %96, 1', '%98 = xor i8 %97, 1', 'store i8 %98, i8* %32, align 1', '%99 = xor i32 %88, %87', '%100 = lshr i32 %99, 4', '%101 = trunc i32 %100 to i8', '%102 = and i8 %101, 1', 'store i8 %102, i8* %33, align 1', '%103 = zext i1 %91 to i8', 'store i8 %103, i8* %34, align 1', '%104 = lshr i32 %88, 31', '%105 = trunc i32 %104 to i8', 'store i8 %105, i8* %35, align 1', '%106 = lshr i32 %87, 31', '%107 = xor i32 %104, %106', '%108 = add nuw nsw i32 %107, %104', '%109 = icmp eq i32 %108, 2', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %36, align 1', '%111 = add i64 %84, 9', 'store i64 %111, i64* %PC, align 8', 'store i32 %88, i32* %86, align 4', '%112 = load i64, i64* %PC, align 8', '%113 = add i64 %112, -38', 'store i64 %113, i64* %PC, align 8', '%114 = add i64 %129, -16', '%115 = add i64 %165, 3', 'store i64 %115, i64* %PC, align 8', '%116 = inttoptr i64 %114 to i32*', '%117 = load i32, i32* %116, align 4', '%118 = zext i32 %117 to i64', 'store i64 %118, i64* %RAX, align 8', '%119 = add i64 %165, 4', 'store i64 %119, i64* %PC, align 8', '%120 = load i64, i64* %6, align 8', '%121 = add i64 %120, 8', '%122 = inttoptr i64 %120 to i64*', '%123 = load i64, i64* %122, align 8', 'store i64 %123, i64* %RBP, align 8', 'store i64 %121, i64* %6, align 8', '%124 = add i64 %165, 5', 'store i64 %124, i64* %PC, align 8', '%125 = inttoptr i64 %121 to i64*', '%126 = load i64, i64* %125, align 8', 'store i64 %126, i64* %PC, align 8', '%127 = add i64 %120, 16', 'store i64 %127, i64* %6, align 8', '%128 = phi i64 [ %113, %block_400615 ], [ %.pre, %block_4005f0 ]', '%131 = add i64 %128, 3', 'store i64 %131, i64* %PC, align 8', '%134 = zext i32 %133 to i64', 'store i64 %134, i64* %RAX, align 8', '%136 = add i64 %128, 6', 'store i64 %136, i64* %PC, align 8', '%140 = icmp ult i32 %133, %138', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %31, align 1', '%142 = and i32 %139, 255', '%143 = tail call i32 @llvm.ctpop.i32(i32 %142) #12', '%144 = trunc i32 %143 to i8', '%145 = and i8 %144, 1', '%146 = xor i8 %145, 1', 'store i8 %146, i8* %32, align 1', '%147 = xor i32 %138, %133', '%148 = xor i32 %147, %139', '%149 = lshr i32 %148, 4', '%150 = trunc i32 %149 to i8', '%151 = and i8 %150, 1', 'store i8 %151, i8* %33, align 1', '%152 = icmp eq i32 %139, 0', '%153 = zext i1 %152 to i8', 'store i8 %153, i8* %34, align 1', 'store i8 %155, i8* %35, align 1', '%162 = zext i1 %161 to i8', 'store i8 %162, i8* %36, align 1', '%.v = select i1 %164, i64 12, i64 43', '%165 = add i64 %128, %.v', 'store i64 %165, i64* %PC, align 8'])Writing '/tmp/tmpqzsz4bhk.dot'...
Writing '/tmp/tmpqzsz4bhk.dot':Done

Reading LLVM: /tmp/tmpth13iug7-query.ll
Extracting function [foo] from /tmp/tmpth13iug7-query.ll
Dot file generated!
Writing '/tmp/tmppleu8519.dot'...
Writing '/tmp/tmppleu8519.dot':Done

Reading LLVM: /tmp/tmpr6hsr82z-target.ll
Extracting function [foo] from /tmp/tmpr6hsr82z-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_22 = load i64, i64* %RBP.i, align 8
- 2 %var_2_23 = add i64 %var_2_22, -16
- 3 %var_2_26 = inttoptr i64 %var_2_23 to i32*
- 4 store i32 0, i32* %var_2_26, align 4
- 5 %var_2_27 = load i64, i64* %RBP.i, align 8
- 6 %var_2_28 = add i64 %var_2_27, -20
- 7 %var_2_31 = inttoptr i64 %var_2_28 to i32*
- 8 store i32 0, i32* %var_2_31, align 4
- 9 %var_2_39 = load i64, i64* %RBP.i, align 8
- 10 %var_2_40 = add i64 %var_2_39, -20
- 11 %var_2_42 = inttoptr i64 %var_2_40 to i32*
- 12 %var_2_43 = load i32, i32* %var_2_42, align 4
- 13 %var_2_45 = add i64 %var_2_39, -12
- 14 %var_2_47 = inttoptr i64 %var_2_45 to i32*
- 15 %var_2_48 = load i32, i32* %var_2_47, align 4
- 16 %var_2_49 = sub i32 %var_2_43, %var_2_48
- 17 %var_2_64 = lshr i32 %var_2_49, 31
- 18 %var_2_66 = lshr i32 %var_2_43, 31
- 19 %var_2_67 = lshr i32 %var_2_48, 31
- 20 %var_2_68 = xor i32 %var_2_67, %var_2_66
- 21 %var_2_69 = xor i32 %var_2_64, %var_2_66
- 22 %var_2_70 = add nuw nsw i32 %var_2_69, %var_2_68
- 23 %var_2_71 = icmp eq i32 %var_2_70, 2
- 24 %var_2_73 = icmp ne i32 %var_2_64, 0
- 25 %var_2_74 = xor i1 %var_2_73, %var_2_71
- 26 \<badref\> = br i1 %var_2_74, label %block_.L_400609.preheader, label %block_.L_400634.split
- 27 \<badref\> = br label %block_.L_400609
- 28 \<badref\> = br label %block_.L_400609
- 29 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f23f048>, {0: {0}, 1: {1, 5, 9, 12, 15}, 2: {2}, 3: {11, 3, 14, 7}, 4: {8, 4}, 5: {1, 5, 9, 12, 15}, 6: {10, 6}, 7: {11, 3, 14, 7}, 8: {8, 4}, 9: {1, 5, 9, 12, 15}, 10: {10, 6}, 11: {11, 3, 14, 7}, 12: {1, 5, 9, 12, 15}, 13: {13}, 14: {11, 3, 14, 7}, 15: {1, 5, 9, 12, 15}, 16: {16}, 17: {17, 18, 19}, 18: {17, 18, 19}, 19: {17, 18, 19}, 20: {25, 20, 21}, 21: {25, 20, 21}, 22: {22}, 23: {23}, 24: {24}, 25: {25, 20, 21}, 26: {26}, 27: {27, 29}, 28: {27, 29}, 29: {28}})
Equivalent! frozenset({27, 29}) {27, 28}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f23f048>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {29}, 29: {28}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 load load
EXACT 16 sub sub
EXACT 17 lshr lshr
EXACT 18 lshr lshr
EXACT 19 lshr lshr
EXACT 20 xor xor
EXACT 21 xor xor
EXACT 22 add add
EXACT 23 icmp icmp
EXACT 24 icmp icmp
EXACT 25 xor xor
EXACT 26 br br
EXACT 27 br br
EXACT 28 br br
EXACT 29 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_21 = load i64, i64* %RBP, align 8
- 2 %var_2_22 = add i64 %var_2_21, -16
- 3 %var_2_25 = inttoptr i64 %var_2_22 to i32*
- 4 store i32 0, i32* %var_2_25, align 4
- 5 %var_2_26 = load i64, i64* %RBP, align 8
- 6 %var_2_27 = add i64 %var_2_26, -20
- 7 %var_2_30 = inttoptr i64 %var_2_27 to i32*
- 8 store i32 0, i32* %var_2_30, align 4
- 9 %var_2_129 = load i64, i64* %RBP, align 8
- 10 %var_2_130 = add i64 %var_2_129, -20
- 11 %var_2_132 = inttoptr i64 %var_2_130 to i32*
- 12 %var_2_133 = load i32, i32* %var_2_132, align 4
- 13 %var_2_135 = add i64 %var_2_129, -12
- 14 %var_2_137 = inttoptr i64 %var_2_135 to i32*
- 15 %var_2_138 = load i32, i32* %var_2_137, align 4
- 16 %var_2_139 = sub i32 %var_2_133, %var_2_138
- 17 %var_2_154 = lshr i32 %var_2_139, 31
- 18 %var_2_156 = lshr i32 %var_2_133, 31
- 19 %var_2_157 = lshr i32 %var_2_138, 31
- 20 %var_2_158 = xor i32 %var_2_157, %var_2_156
- 21 %var_2_159 = xor i32 %var_2_154, %var_2_156
- 22 %var_2_160 = add nuw nsw i32 %var_2_159, %var_2_158
- 23 %var_2_161 = icmp eq i32 %var_2_160, 2
- 24 %var_2_163 = icmp ne i32 %var_2_154, 0
- 25 %var_2_164 = xor i1 %var_2_163, %var_2_161
- 26 \<badref\> = br i1 %var_2_164, label %block_400609.preheader, label %block_400634.split
- 27 \<badref\> = br label %block_400609
- 28 \<badref\> = ret %struct.Memory* %2
- 29 \<badref\> = br label %block_400609
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f6bfb70>, {0: {0}, 1: {1, 5, 9, 12, 15}, 2: {2}, 3: {11, 3, 14, 7}, 4: {8, 4}, 5: {1, 5, 9, 12, 15}, 6: {10, 6}, 7: {11, 3, 14, 7}, 8: {8, 4}, 9: {1, 5, 9, 12, 15}, 10: {10, 6}, 11: {11, 3, 14, 7}, 12: {1, 5, 9, 12, 15}, 13: {13}, 14: {11, 3, 14, 7}, 15: {1, 5, 9, 12, 15}, 16: {16}, 17: {17, 18, 19}, 18: {17, 18, 19}, 19: {17, 18, 19}, 20: {25, 20, 21}, 21: {25, 20, 21}, 22: {22}, 23: {23}, 24: {24}, 25: {25, 20, 21}, 26: {26}, 27: {27, 28}, 28: {29}, 29: {27, 28}})
Equivalent! frozenset({27, 28}) {27, 29}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe59f6bfb70>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {29}, 29: {28}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 inttoptr inttoptr
EXACT 15 load load
EXACT 16 sub sub
EXACT 17 lshr lshr
EXACT 18 lshr lshr
EXACT 19 lshr lshr
EXACT 20 xor xor
EXACT 21 xor xor
EXACT 22 add add
EXACT 23 icmp icmp
EXACT 24 icmp icmp
EXACT 25 xor xor
EXACT 26 br br
EXACT 27 br br
EXACT 28 ret ret
EXACT 29 br br
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_22 = load i64, i64* %RBP.i, align 8', '%var_2_23 = add i64 %var_2_22, -16', '%var_2_26 = inttoptr i64 %var_2_23 to i32*', 'store i32 0, i32* %var_2_26, align 4', '%var_2_27 = load i64, i64* %RBP.i, align 8', '%var_2_28 = add i64 %var_2_27, -20', '%var_2_31 = inttoptr i64 %var_2_28 to i32*', 'store i32 0, i32* %var_2_31, align 4'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_22 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_23 = add i64 %var_2_22, -16
Found line to remove! %var_2_26 = inttoptr i64 %var_2_23 to i32*
Found line to remove! store i32 0, i32* %var_2_26, align 4
Found line to remove! %var_2_27 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_28 = add i64 %var_2_27, -20
Found line to remove! %var_2_31 = inttoptr i64 %var_2_28 to i32*
Found line to remove! store i32 0, i32* %var_2_31, align 4
Keep: %var_2_39 = load i64, i64* %RBP.i, align 8
Keep: %var_2_40 = add i64 %var_2_39, -20
Keep: %var_2_42 = inttoptr i64 %var_2_40 to i32*
Keep: %var_2_43 = load i32, i32* %var_2_42, align 4
Keep: %var_2_45 = add i64 %var_2_39, -12
Keep: %var_2_47 = inttoptr i64 %var_2_45 to i32*
Keep: %var_2_48 = load i32, i32* %var_2_47, align 4
Keep: %var_2_49 = sub i32 %var_2_43, %var_2_48
Keep: %var_2_64 = lshr i32 %var_2_49, 31
Keep: %var_2_66 = lshr i32 %var_2_43, 31
Keep: %var_2_67 = lshr i32 %var_2_48, 31
Keep: %var_2_68 = xor i32 %var_2_67, %var_2_66
Keep: %var_2_69 = xor i32 %var_2_64, %var_2_66
Keep: %var_2_70 = add nuw nsw i32 %var_2_69, %var_2_68
Keep: %var_2_71 = icmp eq i32 %var_2_70, 2
Keep: %var_2_73 = icmp ne i32 %var_2_64, 0
Keep: %var_2_74 = xor i1 %var_2_73, %var_2_71
Keep: br i1 %var_2_74, label %block_.L_400609.preheader, label %block_.L_400634.split
Keep: 
Keep: block_.L_400609.preheader:                        ; preds = %entry
Keep: br label %block_.L_400609
Keep: 
Keep: block_.L_400609:                                  ; preds = %block_.L_400609.preheader, %block_.L_400609
Keep: br label %block_.L_400609
Keep: 
Keep: block_.L_400634.split:                            ; preds = %entry
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_22 = load i64, i64* %RBP.i, align 8', '%var_2_23 = add i64 %var_2_22, -16', '%var_2_26 = inttoptr i64 %var_2_23 to i32*', 'store i32 0, i32* %var_2_26, align 4', '%var_2_27 = load i64, i64* %RBP.i, align 8', '%var_2_28 = add i64 %var_2_27, -20', '%var_2_31 = inttoptr i64 %var_2_28 to i32*', 'store i32 0, i32* %var_2_31, align 4'])
TO REMOVE: dict_keys(['%var_2_21 = load i64, i64* %RBP, align 8', '%var_2_22 = add i64 %var_2_21, -16', '%var_2_25 = inttoptr i64 %var_2_22 to i32*', 'store i32 0, i32* %var_2_25, align 4', '%var_2_26 = load i64, i64* %RBP, align 8', '%var_2_27 = add i64 %var_2_26, -20', '%var_2_30 = inttoptr i64 %var_2_27 to i32*', 'store i32 0, i32* %var_2_30, align 4'])
Keep: block_4005f0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_21 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_22 = add i64 %var_2_21, -16
Found line to remove! %var_2_25 = inttoptr i64 %var_2_22 to i32*
Found line to remove! store i32 0, i32* %var_2_25, align 4
Found line to remove! %var_2_26 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_27 = add i64 %var_2_26, -20
Found line to remove! %var_2_30 = inttoptr i64 %var_2_27 to i32*
Found line to remove! store i32 0, i32* %var_2_30, align 4
Keep: %var_2_129 = load i64, i64* %RBP, align 8
Keep: %var_2_130 = add i64 %var_2_129, -20
Keep: %var_2_132 = inttoptr i64 %var_2_130 to i32*
Keep: %var_2_133 = load i32, i32* %var_2_132, align 4
Keep: %var_2_135 = add i64 %var_2_129, -12
Keep: %var_2_137 = inttoptr i64 %var_2_135 to i32*
Keep: %var_2_138 = load i32, i32* %var_2_137, align 4
Keep: %var_2_139 = sub i32 %var_2_133, %var_2_138
Keep: %var_2_154 = lshr i32 %var_2_139, 31
Keep: %var_2_156 = lshr i32 %var_2_133, 31
Keep: %var_2_157 = lshr i32 %var_2_138, 31
Keep: %var_2_158 = xor i32 %var_2_157, %var_2_156
Keep: %var_2_159 = xor i32 %var_2_154, %var_2_156
Keep: %var_2_160 = add nuw nsw i32 %var_2_159, %var_2_158
Keep: %var_2_161 = icmp eq i32 %var_2_160, 2
Keep: %var_2_163 = icmp ne i32 %var_2_154, 0
Keep: %var_2_164 = xor i1 %var_2_163, %var_2_161
Keep: br i1 %var_2_164, label %block_400609.preheader, label %block_400634.split
Keep: 
Keep: block_400609.preheader:                           ; preds = %block_4005f0
Keep: br label %block_400609
Keep: 
Keep: block_400634.split:                               ; preds = %block_4005f0
Keep: ret %struct.Memory* %2
Keep: 
Keep: block_400609:                                     ; preds = %block_400609.preheader, %block_400609
Keep: br label %block_400609
Missed: dict_keys(['%var_2_21 = load i64, i64* %RBP, align 8', '%var_2_22 = add i64 %var_2_21, -16', '%var_2_25 = inttoptr i64 %var_2_22 to i32*', 'store i32 0, i32* %var_2_25, align 4', '%var_2_26 = load i64, i64* %RBP, align 8', '%var_2_27 = add i64 %var_2_26, -20', '%var_2_30 = inttoptr i64 %var_2_27 to i32*', 'store i32 0, i32* %var_2_30, align 4'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_5/foo/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_5/binary/test.mcsema.calls_renamed.ll foo
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
