Writing '/tmp/tmp7dcbt57s.dot'...
Writing '/tmp/tmp7dcbt57s.dot':Done

Reading LLVM: /tmp/tmpurjpu4j8-query.ll
Extracting function [main] from /tmp/tmpurjpu4j8-query.ll
Dot file generated!
Writing '/tmp/tmpdvh20u8m.dot'...
Writing '/tmp/tmpdvh20u8m.dot':Done

Reading LLVM: /tmp/tmppe08hgbx-target.ll
Extracting function [main] from /tmp/tmppe08hgbx-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 store i64 add (i64 ptrtoint (%G__0x400604_type* @G__0x400604 to i64), i64 172), i64* %RDI.i42, align 8
- 49 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 50 %RAX.i39 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 51 %40 = add i64 %7, -24
- 52 store i64 %40, i64* %RAX.i39, align 8
- 53 %41 = add i64 %7, -12
- 54 %42 = add i64 %10, 28
- 55 store i64 %42, i64* %3, align 8
- 56 %43 = inttoptr i64 %41 to i32*
- 57 store i32 0, i32* %43, align 4
- 58 %44 = load i64, i64* %RBP.i, align 8
- 59 %45 = add i64 %44, -24
- 60 %46 = load i64, i64* %RAX.i39, align 8
- 61 %47 = load i64, i64* %3, align 8
- 62 %48 = add i64 %47, 4
- 63 store i64 %48, i64* %3, align 8
- 64 %49 = inttoptr i64 %45 to i64*
- 65 store i64 %46, i64* %49, align 8
- 66 %50 = load i64, i64* %RBP.i, align 8
- 67 %51 = add i64 %50, -24
- 68 %52 = load i64, i64* %3, align 8
- 69 %53 = add i64 %52, 4
- 70 store i64 %53, i64* %3, align 8
- 71 %54 = inttoptr i64 %51 to i64*
- 72 %55 = load i64, i64* %54, align 8
- 73 store i64 %55, i64* %RAX.i39, align 8
- 74 %56 = add i64 %52, 10
- 75 store i64 %56, i64* %3, align 8
- 76 %57 = inttoptr i64 %55 to i32*
- 77 store i32 1, i32* %57, align 4
- 78 %58 = load i64, i64* %RBP.i, align 8
- 79 %59 = add i64 %58, -24
- 80 %60 = load i64, i64* %3, align 8
- 81 %61 = add i64 %60, 4
- 82 store i64 %61, i64* %3, align 8
- 83 %62 = inttoptr i64 %59 to i64*
- 84 %63 = load i64, i64* %62, align 8
- 85 store i64 %63, i64* %RAX.i39, align 8
- 86 %64 = add i64 %63, 4
- 87 %65 = add i64 %60, 11
- 88 store i64 %65, i64* %3, align 8
- 89 %66 = inttoptr i64 %64 to i32*
- 90 store i32 2, i32* %66, align 4
- 91 %67 = load i64, i64* %RBP.i, align 8
- 92 %68 = add i64 %67, -24
- 93 %69 = load i64, i64* %3, align 8
- 94 %70 = add i64 %69, 4
- 95 store i64 %70, i64* %3, align 8
- 96 %71 = inttoptr i64 %68 to i64*
- 97 %72 = load i64, i64* %71, align 8
- 98 store i64 %72, i64* %RAX.i39, align 8
- 99 %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 100 %RSI.i19 = getelementptr inbounds %union.anon, %union.anon* %73, i64 0, i32 0
- 101 %74 = add i64 %72, 4
- 102 %75 = add i64 %69, 7
- 103 store i64 %75, i64* %3, align 8
- 104 %76 = inttoptr i64 %74 to i32*
- 105 %77 = load i32, i32* %76, align 4
- 106 %78 = zext i32 %77 to i64
- 107 store i64 %78, i64* %RSI.i19, align 8
- 108 %AL.i = bitcast %union.anon* %39 to i8*
- 109 store i8 0, i8* %AL.i, align 1
- 110 %79 = add i64 %69, -310
- 111 %80 = add i64 %69, 14
- 112 %81 = load i64, i64* %6, align 8
- 113 %82 = add i64 %81, -8
- 114 %83 = inttoptr i64 %82 to i64*
- 115 store i64 %80, i64* %83, align 8
- 116 store i64 %82, i64* %6, align 8
- 117 store i64 %79, i64* %3, align 8
- 118 %84 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
- 119 %85 = load i64, i64* %RBP.i, align 8
- 120 %86 = add i64 %85, -24
- 121 %87 = load i64, i64* %3, align 8
- 122 %88 = add i64 %87, 4
- 123 store i64 %88, i64* %3, align 8
- 124 %89 = inttoptr i64 %86 to i64*
- 125 %90 = load i64, i64* %89, align 8
- 126 store i64 %90, i64* %RDI.i42, align 8
- 127 %91 = add i64 %90, 4
- 128 %92 = add i64 %87, 7
- 129 store i64 %92, i64* %3, align 8
- 130 %93 = inttoptr i64 %91 to i32*
- 131 %94 = load i32, i32* %93, align 4
- 132 %95 = zext i32 %94 to i64
- 133 store i64 %95, i64* %RSI.i19, align 8
- 134 %EAX.i = bitcast %union.anon* %39 to i32*
- 135 %96 = add i64 %85, -28
- 136 %97 = load i32, i32* %EAX.i, align 4
- 137 %98 = add i64 %87, 10
- 138 store i64 %98, i64* %3, align 8
- 139 %99 = inttoptr i64 %96 to i32*
- 140 store i32 %97, i32* %99, align 4
- 141 %ESI.i = bitcast %union.anon* %73 to i32*
- 142 %100 = load i32, i32* %ESI.i, align 4
- 143 %101 = zext i32 %100 to i64
- 144 %102 = load i64, i64* %3, align 8
- 145 store i64 %101, i64* %RAX.i39, align 8
- 146 %103 = load i64, i64* %6, align 8
- 147 %104 = add i64 %103, 32
- 148 store i64 %104, i64* %6, align 8
- 149 %105 = icmp ugt i64 %103, -33
- 150 %106 = zext i1 %105 to i8
- 151 store i8 %106, i8* %14, align 1
- 152 %107 = trunc i64 %104 to i32
- 153 %108 = and i32 %107, 255
- 154 %109 = tail call i32 @llvm.ctpop.i32(i32 %108)
- 155 %110 = trunc i32 %109 to i8
- 156 %111 = and i8 %110, 1
- 157 %112 = xor i8 %111, 1
- 158 store i8 %112, i8* %21, align 1
- 159 %113 = xor i64 %104, %103
- 160 %114 = lshr i64 %113, 4
- 161 %115 = trunc i64 %114 to i8
- 162 %116 = and i8 %115, 1
- 163 store i8 %116, i8* %26, align 1
- 164 %117 = icmp eq i64 %104, 0
- 165 %118 = zext i1 %117 to i8
- 166 store i8 %118, i8* %29, align 1
- 167 %119 = lshr i64 %104, 63
- 168 %120 = trunc i64 %119 to i8
- 169 store i8 %120, i8* %32, align 1
- 170 %121 = lshr i64 %103, 63
- 171 %122 = xor i64 %119, %121
- 172 %123 = add nuw nsw i64 %122, %119
- 173 %124 = icmp eq i64 %123, 2
- 174 %125 = zext i1 %124 to i8
- 175 store i8 %125, i8* %38, align 1
- 176 %126 = add i64 %102, 7
- 177 store i64 %126, i64* %3, align 8
- 178 %127 = add i64 %103, 40
- 179 %128 = inttoptr i64 %104 to i64*
- 180 %129 = load i64, i64* %128, align 8
- 181 store i64 %129, i64* %RBP.i, align 8
- 182 store i64 %127, i64* %6, align 8
- 183 %130 = add i64 %102, 8
- 184 store i64 %130, i64* %3, align 8
- 185 %131 = inttoptr i64 %127 to i64*
- 186 %132 = load i64, i64* %131, align 8
- 187 store i64 %132, i64* %3, align 8
- 188 %133 = add i64 %103, 48
- 189 store i64 %133, i64* %6, align 8
- 190 \<badref\> = ret %struct.Memory* %84
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cf98b1e0>, {0: {0}, 1: {10}, 2: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 3: {12}, 4: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 5: {9}, 6: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 7: {115, 15}, 8: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 9: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 10: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 11: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 12: {20}, 13: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 14: {22}, 15: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 16: {24}, 17: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 18: {161, 36, 168, 45, 152, 26, 155, 29}, 19: {153, 27}, 20: {120, 154, 28}, 21: {161, 36, 168, 45, 152, 26, 155, 29}, 22: {162, 156, 37, 30}, 23: {157, 31}, 24: {32}, 25: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 26: {49, 34, 171, 159}, 27: {160, 35}, 28: {161, 36, 168, 45, 152, 26, 155, 29}, 29: {162, 156, 37, 30}, 30: {38}, 31: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 32: {40, 164}, 33: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 34: {42}, 35: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 36: {48, 170, 44, 167}, 37: {161, 36, 168, 45, 152, 26, 155, 29}, 38: {46}, 39: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 40: {48, 170, 44, 167}, 41: {49, 34, 171, 159}, 42: {50, 172}, 43: {51, 173}, 44: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 45: {53}, 46: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 47: {8}, 48: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 49: {1}, 50: {6, 7}, 51: {64, 97, 72, 84, 56, 122}, 52: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 53: {58}, 54: {59}, 55: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 56: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 57: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 58: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 59: {64, 97, 72, 84, 56, 122}, 60: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 61: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 62: {129, 99, 67, 104, 74, 86, 91, 124}, 63: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 64: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 65: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 66: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 67: {64, 97, 72, 84, 56, 122}, 68: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 69: {129, 99, 67, 104, 74, 86, 91, 124}, 70: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 71: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 72: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 73: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 74: {138, 79}, 75: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 76: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 77: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 78: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 79: {64, 97, 72, 84, 56, 122}, 80: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 81: {129, 99, 67, 104, 74, 86, 91, 124}, 82: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 83: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 84: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 85: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 86: {129, 99, 67, 104, 74, 86, 91, 124}, 87: {92}, 88: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 89: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 90: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 91: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 92: {64, 97, 72, 84, 56, 122}, 93: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 94: {129, 99, 67, 104, 74, 86, 91, 124}, 95: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 96: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 97: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 98: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 99: {4}, 100: {6, 7}, 101: {129, 99, 67, 104, 74, 86, 91, 124}, 102: {176, 105, 130}, 103: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 104: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 105: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 106: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 107: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 108: {2, 3, 5}, 109: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 110: {112}, 111: {113}, 112: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 113: {115, 15}, 114: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 115: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 116: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 117: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 118: {120, 154, 28}, 119: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 120: {64, 97, 72, 84, 56, 122}, 121: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 122: {129, 99, 67, 104, 74, 86, 91, 124}, 123: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 124: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 125: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 126: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 127: {129, 99, 67, 104, 74, 86, 91, 124}, 128: {176, 105, 130}, 129: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 130: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 131: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 132: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 133: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 134: {2, 3, 5}, 135: {136}, 136: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 137: {138, 79}, 138: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 139: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 140: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 141: {2, 3, 5}, 142: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 143: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 144: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 145: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 146: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 147: {147}, 148: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 149: {149}, 150: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 151: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 152: {161, 36, 168, 45, 152, 26, 155, 29}, 153: {153, 27}, 154: {120, 154, 28}, 155: {161, 36, 168, 45, 152, 26, 155, 29}, 156: {162, 156, 37, 30}, 157: {157, 31}, 158: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 159: {49, 34, 171, 159}, 160: {160, 35}, 161: {161, 36, 168, 45, 152, 26, 155, 29}, 162: {162, 156, 37, 30}, 163: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 164: {40, 164}, 165: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 166: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 167: {48, 170, 44, 167}, 168: {161, 36, 168, 45, 152, 26, 155, 29}, 169: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 170: {48, 170, 44, 167}, 171: {49, 34, 171, 159}, 172: {50, 172}, 173: {51, 173}, 174: {165, 134, 41, 109, 174, 143, 52, 150, 23}, 175: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 176: {176, 105, 130}, 177: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 178: {178}, 179: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 180: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 181: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 182: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 183: {183}, 184: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 185: {132, 69, 101, 107, 76, 140, 16, 81, 179, 116, 88, 185, 126, 61, 94}, 186: {133, 137, 11, 14, 142, 144, 18, 146, 180, 186, 63, 65, 66, 71, 73, 77, 83, 85, 89, 96, 98, 102, 108, 114, 121, 123, 127}, 187: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 188: {188}, 189: {128, 131, 135, 139, 13, 141, 17, 145, 19, 148, 21, 151, 25, 158, 33, 163, 166, 39, 169, 43, 47, 175, 177, 181, 54, 55, 182, 57, 184, 187, 60, 189, 62, 68, 70, 75, 78, 80, 82, 87, 90, 93, 95, 100, 103, 106, 110, 111, 117, 118, 119, 125}, 190: {190}})
Equivalent! frozenset({67, 99, 86, 74, 124}) {69, 81, 94, 122, 62}
Equivalent! frozenset({100, 68, 87, 75, 125}) {70, 82, 123, 63, 95}
Equivalent! frozenset({90, 78, 103}) {73, 98, 85}
Equivalent! frozenset({138, 79}) {137, 74}
Equivalent! frozenset({80, 139}) {138, 75}
Equivalent! frozenset({104, 129}) {101, 127}
Equivalent! frozenset({176, 105, 130}) {128, 102, 176}
Equivalent! frozenset({177, 106, 131}) {129, 177, 103}
Equivalent! frozenset({107, 132}) {104, 130}
Equivalent! frozenset({108, 133}) {105, 131}
Equivalent! frozenset({109, 134}) {106, 132}
Equivalent! frozenset({110, 135}) {107, 133}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cf98b1e0>, {0: {0}, 1: {10}, 2: {11}, 3: {12}, 4: {13}, 5: {9}, 6: {14}, 7: {15}, 8: {16}, 9: {17}, 10: {18}, 11: {19}, 12: {20}, 13: {21}, 14: {22}, 15: {23}, 16: {24}, 17: {25}, 18: {26}, 19: {27}, 20: {28}, 21: {29}, 22: {30}, 23: {31}, 24: {32}, 25: {33}, 26: {34}, 27: {35}, 28: {36}, 29: {37}, 30: {38}, 31: {39}, 32: {40}, 33: {41}, 34: {42}, 35: {43}, 36: {44}, 37: {45}, 38: {46}, 39: {47}, 40: {48}, 41: {49}, 42: {50}, 43: {51}, 44: {52}, 45: {53}, 46: {54}, 47: {8}, 48: {128, 55}, 49: {1}, 50: {6}, 51: {56}, 52: {57}, 53: {58}, 54: {59}, 55: {60}, 56: {61}, 57: {62}, 58: {63}, 59: {64}, 60: {65}, 61: {66, 98, 73, 85, 123}, 62: {124}, 63: {75}, 64: {69}, 65: {70}, 66: {96, 83, 71}, 67: {72, 97, 84}, 68: {66, 98, 73, 85, 123}, 69: {67}, 70: {100}, 71: {88, 76, 101}, 72: {89, 77, 102}, 73: {90}, 74: {79}, 75: {139}, 76: {81}, 77: {82}, 78: {96, 83, 71}, 79: {72, 97, 84}, 80: {66, 98, 73, 85, 123}, 81: {99}, 82: {68}, 83: {88, 76, 101}, 84: {89, 77, 102}, 85: {103}, 86: {91}, 87: {92}, 88: {93}, 89: {94}, 90: {95}, 91: {96, 121, 83, 71}, 92: {72, 97, 122, 84}, 93: {66, 98, 73, 144, 85, 123}, 94: {86}, 95: {125}, 96: {88, 76, 101, 126}, 97: {89, 77, 102, 127}, 98: {78}, 99: {4}, 100: {7}, 101: {104}, 102: {105}, 103: {131}, 104: {107}, 105: {108}, 106: {109}, 107: {110}, 108: {2}, 109: {111}, 110: {112}, 111: {113}, 112: {114}, 113: {115}, 114: {116}, 115: {117}, 116: {118}, 117: {119}, 118: {120}, 119: {96, 121}, 120: {97, 122}, 121: {66, 98, 73, 144, 85, 123}, 122: {74}, 123: {87}, 124: {101, 126}, 125: {102, 127}, 126: {128}, 127: {129}, 128: {176}, 129: {177}, 130: {132}, 131: {133}, 132: {134}, 133: {135}, 134: {3}, 135: {136}, 136: {137}, 137: {138}, 138: {80}, 139: {140}, 140: {141}, 141: {5}, 142: {142}, 143: {143}, 144: {144, 98, 123}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {130}, 177: {106}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
MORE 48 POT: 2
EXACT 49 getelementptr getelementptr
EXACT 50 getelementptr getelementptr
EXACT 51 add add
EXACT 52 store store
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 load load
EXACT 59 add add
EXACT 60 load load
MORE 61 POT: 5
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
MORE 66 POT: 3
MORE 67 POT: 3
MORE 68 POT: 5
EXACT 69 add add
EXACT 70 store store
MORE 71 POT: 3
MORE 72 POT: 3
EXACT 73 store store
EXACT 74 add add
EXACT 75 store store
EXACT 76 inttoptr inttoptr
EXACT 77 store store
MORE 78 POT: 3
MORE 79 POT: 3
MORE 80 POT: 5
EXACT 81 add add
EXACT 82 store store
MORE 83 POT: 3
MORE 84 POT: 3
EXACT 85 store store
EXACT 86 add add
EXACT 87 add add
EXACT 88 store store
EXACT 89 inttoptr inttoptr
EXACT 90 store store
MORE 91 POT: 4
MORE 92 POT: 4
MORE 93 POT: 6
EXACT 94 add add
EXACT 95 store store
MORE 96 POT: 4
MORE 97 POT: 4
EXACT 98 store store
EXACT 99 getelementptr getelementptr
EXACT 100 getelementptr getelementptr
EXACT 101 add add
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 load load
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 bitcast bitcast
EXACT 109 store store
EXACT 110 add add
EXACT 111 add add
EXACT 112 load load
EXACT 113 add add
EXACT 114 inttoptr inttoptr
EXACT 115 store store
EXACT 116 store store
EXACT 117 store store
EXACT 118 tail tail
MORE 119 POT: 2
MORE 120 POT: 2
MORE 121 POT: 6
EXACT 122 add add
EXACT 123 store store
MORE 124 POT: 2
MORE 125 POT: 2
EXACT 126 store store
EXACT 127 add add
EXACT 128 add add
EXACT 129 store store
EXACT 130 inttoptr inttoptr
EXACT 131 load load
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 bitcast bitcast
EXACT 135 add add
EXACT 136 load load
EXACT 137 add add
EXACT 138 store store
EXACT 139 inttoptr inttoptr
EXACT 140 store store
EXACT 141 bitcast bitcast
EXACT 142 load load
EXACT 143 zext zext
MORE 144 POT: 3
EXACT 145 store store
EXACT 146 load load
EXACT 147 add add
EXACT 148 store store
EXACT 149 icmp icmp
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 trunc trunc
EXACT 153 and and
EXACT 154 tail tail
EXACT 155 trunc trunc
EXACT 156 and and
EXACT 157 xor xor
EXACT 158 store store
EXACT 159 xor xor
EXACT 160 lshr lshr
EXACT 161 trunc trunc
EXACT 162 and and
EXACT 163 store store
EXACT 164 icmp icmp
EXACT 165 zext zext
EXACT 166 store store
EXACT 167 lshr lshr
EXACT 168 trunc trunc
EXACT 169 store store
EXACT 170 lshr lshr
EXACT 171 xor xor
EXACT 172 add add
EXACT 173 icmp icmp
EXACT 174 zext zext
EXACT 175 store store
EXACT 176 add add
EXACT 177 store store
EXACT 178 add add
EXACT 179 inttoptr inttoptr
EXACT 180 load load
EXACT 181 store store
EXACT 182 store store
EXACT 183 add add
EXACT 184 store store
EXACT 185 inttoptr inttoptr
EXACT 186 load load
EXACT 187 store store
EXACT 188 add add
EXACT 189 store store
EXACT 190 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 5 %ESI = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = load i64, i64* %RBP, align 8
- 12 %6 = add i64 %1, 1
- 13 store i64 %6, i64* %PC, align 8
- 14 %7 = load i64, i64* %RSP, align 8
- 15 %8 = add i64 %7, -8
- 16 %9 = inttoptr i64 %8 to i64*
- 17 store i64 %5, i64* %9, align 8
- 18 %10 = load i64, i64* %PC, align 8
- 19 store i64 %8, i64* %RBP, align 8
- 20 %11 = add i64 %7, -40
- 21 store i64 %11, i64* %RSP, align 8
- 22 %12 = icmp ult i64 %8, 32
- 23 %13 = zext i1 %12 to i8
- 24 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 store i8 %13, i8* %14, align 1
- 26 %15 = trunc i64 %11 to i32
- 27 %16 = and i32 %15, 255
- 28 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
- 29 %18 = trunc i32 %17 to i8
- 30 %19 = and i8 %18, 1
- 31 %20 = xor i8 %19, 1
- 32 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 33 store i8 %20, i8* %21, align 1
- 34 %22 = xor i64 %8, %11
- 35 %23 = lshr i64 %22, 4
- 36 %24 = trunc i64 %23 to i8
- 37 %25 = and i8 %24, 1
- 38 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 store i8 %25, i8* %26, align 1
- 40 %27 = icmp eq i64 %11, 0
- 41 %28 = zext i1 %27 to i8
- 42 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 43 store i8 %28, i8* %29, align 1
- 44 %30 = lshr i64 %11, 63
- 45 %31 = trunc i64 %30 to i8
- 46 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 store i8 %31, i8* %32, align 1
- 48 %33 = lshr i64 %8, 63
- 49 %34 = xor i64 %30, %33
- 50 %35 = add nuw nsw i64 %34, %33
- 51 %36 = icmp eq i64 %35, 2
- 52 %37 = zext i1 %36 to i8
- 53 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 54 store i8 %37, i8* %38, align 1
- 55 store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 4), i64* %RDI, align 8
- 56 %39 = add i64 %7, -24
- 57 store i64 %39, i64* %RAX, align 8
- 58 %40 = add i64 %7, -12
- 59 %41 = add i64 %10, 28
- 60 store i64 %41, i64* %PC, align 8
- 61 %42 = inttoptr i64 %40 to i32*
- 62 store i32 0, i32* %42, align 4
- 63 %43 = load i64, i64* %RBP, align 8
- 64 %44 = add i64 %43, -24
- 65 %45 = load i64, i64* %RAX, align 8
- 66 %46 = load i64, i64* %PC, align 8
- 67 %47 = add i64 %46, 4
- 68 store i64 %47, i64* %PC, align 8
- 69 %48 = inttoptr i64 %44 to i64*
- 70 store i64 %45, i64* %48, align 8
- 71 %49 = load i64, i64* %RBP, align 8
- 72 %50 = add i64 %49, -24
- 73 %51 = load i64, i64* %PC, align 8
- 74 %52 = add i64 %51, 4
- 75 store i64 %52, i64* %PC, align 8
- 76 %53 = inttoptr i64 %50 to i64*
- 77 %54 = load i64, i64* %53, align 8
- 78 store i64 %54, i64* %RAX, align 8
- 79 %55 = add i64 %51, 10
- 80 store i64 %55, i64* %PC, align 8
- 81 %56 = inttoptr i64 %54 to i32*
- 82 store i32 1, i32* %56, align 4
- 83 %57 = load i64, i64* %RBP, align 8
- 84 %58 = add i64 %57, -24
- 85 %59 = load i64, i64* %PC, align 8
- 86 %60 = add i64 %59, 4
- 87 store i64 %60, i64* %PC, align 8
- 88 %61 = inttoptr i64 %58 to i64*
- 89 %62 = load i64, i64* %61, align 8
- 90 store i64 %62, i64* %RAX, align 8
- 91 %63 = add i64 %62, 4
- 92 %64 = add i64 %59, 11
- 93 store i64 %64, i64* %PC, align 8
- 94 %65 = inttoptr i64 %63 to i32*
- 95 store i32 2, i32* %65, align 4
- 96 %66 = load i64, i64* %RBP, align 8
- 97 %67 = add i64 %66, -24
- 98 %68 = load i64, i64* %PC, align 8
- 99 %69 = add i64 %68, 4
- 100 store i64 %69, i64* %PC, align 8
- 101 %70 = inttoptr i64 %67 to i64*
- 102 %71 = load i64, i64* %70, align 8
- 103 store i64 %71, i64* %RAX, align 8
- 104 %72 = add i64 %71, 4
- 105 %73 = add i64 %68, 7
- 106 store i64 %73, i64* %PC, align 8
- 107 %74 = inttoptr i64 %72 to i32*
- 108 %75 = load i32, i32* %74, align 4
- 109 %76 = zext i32 %75 to i64
- 110 store i64 %76, i64* %RSI, align 8
- 111 store i8 0, i8* %AL, align 1
- 112 %77 = add i64 %68, -310
- 113 %78 = add i64 %68, 14
- 114 %79 = load i64, i64* %RSP, align 8
- 115 %80 = add i64 %79, -8
- 116 %81 = inttoptr i64 %80 to i64*
- 117 store i64 %78, i64* %81, align 8
- 118 store i64 %80, i64* %RSP, align 8
- 119 store i64 %77, i64* %PC, align 8
- 120 %82 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)
- 121 %83 = load i64, i64* %RBP, align 8
- 122 %84 = add i64 %83, -24
- 123 %85 = load i64, i64* %PC, align 8
- 124 %86 = add i64 %85, 4
- 125 store i64 %86, i64* %PC, align 8
- 126 %87 = inttoptr i64 %84 to i64*
- 127 %88 = load i64, i64* %87, align 8
- 128 store i64 %88, i64* %RDI, align 8
- 129 %89 = add i64 %88, 4
- 130 %90 = add i64 %85, 7
- 131 store i64 %90, i64* %PC, align 8
- 132 %91 = inttoptr i64 %89 to i32*
- 133 %92 = load i32, i32* %91, align 4
- 134 %93 = zext i32 %92 to i64
- 135 store i64 %93, i64* %RSI, align 8
- 136 %94 = add i64 %83, -28
- 137 %95 = load i32, i32* %EAX, align 4
- 138 %96 = add i64 %85, 10
- 139 store i64 %96, i64* %PC, align 8
- 140 %97 = inttoptr i64 %94 to i32*
- 141 store i32 %95, i32* %97, align 4
- 142 %98 = load i32, i32* %ESI, align 4
- 143 %99 = zext i32 %98 to i64
- 144 %100 = load i64, i64* %PC, align 8
- 145 store i64 %99, i64* %RAX, align 8
- 146 %101 = load i64, i64* %RSP, align 8
- 147 %102 = add i64 %101, 32
- 148 store i64 %102, i64* %RSP, align 8
- 149 %103 = icmp ugt i64 %101, -33
- 150 %104 = zext i1 %103 to i8
- 151 store i8 %104, i8* %14, align 1
- 152 %105 = trunc i64 %102 to i32
- 153 %106 = and i32 %105, 255
- 154 %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #11
- 155 %108 = trunc i32 %107 to i8
- 156 %109 = and i8 %108, 1
- 157 %110 = xor i8 %109, 1
- 158 store i8 %110, i8* %21, align 1
- 159 %111 = xor i64 %102, %101
- 160 %112 = lshr i64 %111, 4
- 161 %113 = trunc i64 %112 to i8
- 162 %114 = and i8 %113, 1
- 163 store i8 %114, i8* %26, align 1
- 164 %115 = icmp eq i64 %102, 0
- 165 %116 = zext i1 %115 to i8
- 166 store i8 %116, i8* %29, align 1
- 167 %117 = lshr i64 %102, 63
- 168 %118 = trunc i64 %117 to i8
- 169 store i8 %118, i8* %32, align 1
- 170 %119 = lshr i64 %101, 63
- 171 %120 = xor i64 %117, %119
- 172 %121 = add nuw nsw i64 %120, %117
- 173 %122 = icmp eq i64 %121, 2
- 174 %123 = zext i1 %122 to i8
- 175 store i8 %123, i8* %38, align 1
- 176 %124 = add i64 %100, 7
- 177 store i64 %124, i64* %PC, align 8
- 178 %125 = add i64 %101, 40
- 179 %126 = inttoptr i64 %102 to i64*
- 180 %127 = load i64, i64* %126, align 8
- 181 store i64 %127, i64* %RBP, align 8
- 182 store i64 %125, i64* %RSP, align 8
- 183 %128 = add i64 %100, 8
- 184 store i64 %128, i64* %PC, align 8
- 185 %129 = inttoptr i64 %125 to i64*
- 186 %130 = load i64, i64* %129, align 8
- 187 store i64 %130, i64* %PC, align 8
- 188 %131 = add i64 %101, 48
- 189 store i64 %131, i64* %RSP, align 8
- 190 \<badref\> = ret %struct.Memory* %82
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cf98b0d0>, {0: {0}, 1: {49}, 2: {108, 141, 134}, 3: {108, 141, 134}, 4: {99}, 5: {108, 141, 134}, 6: {50, 100}, 7: {50, 100}, 8: {47}, 9: {5}, 10: {1}, 11: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 12: {3}, 13: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 14: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 15: {113, 7}, 16: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 17: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 18: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 19: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 20: {12}, 21: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 22: {14}, 23: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 24: {16}, 25: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 26: {161, 37, 168, 18, 21, 152, 155, 28}, 27: {153, 19}, 28: {154, 20, 118}, 29: {161, 37, 168, 18, 21, 152, 155, 28}, 30: {162, 156, 29, 22}, 31: {157, 23}, 32: {24}, 33: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 34: {41, 26, 171, 159}, 35: {160, 27}, 36: {161, 37, 168, 18, 21, 152, 155, 28}, 37: {162, 156, 29, 22}, 38: {30}, 39: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 40: {32, 164}, 41: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 42: {34}, 43: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 44: {40, 170, 36, 167}, 45: {161, 37, 168, 18, 21, 152, 155, 28}, 46: {38}, 47: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 48: {40, 170, 36, 167}, 49: {41, 26, 171, 159}, 50: {42, 172}, 51: {43, 173}, 52: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 53: {45}, 54: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 55: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 56: {67, 79, 51, 120, 59, 92}, 57: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 58: {53}, 59: {54}, 60: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 61: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 62: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 63: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 64: {67, 79, 51, 120, 59, 92}, 65: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 66: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 67: {69, 101, 81, 86, 62, 122, 94, 127}, 68: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 69: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 70: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 71: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 72: {67, 79, 51, 120, 59, 92}, 73: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 74: {69, 101, 81, 86, 62, 122, 94, 127}, 75: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 76: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 77: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 78: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 79: {137, 74}, 80: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 81: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 82: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 83: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 84: {67, 79, 51, 120, 59, 92}, 85: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 86: {69, 101, 81, 86, 62, 122, 94, 127}, 87: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 88: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 89: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 90: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 91: {69, 101, 81, 86, 62, 122, 94, 127}, 92: {87}, 93: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 94: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 95: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 96: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 97: {67, 79, 51, 120, 59, 92}, 98: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 99: {69, 101, 81, 86, 62, 122, 94, 127}, 100: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 101: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 102: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 103: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 104: {69, 101, 81, 86, 62, 122, 94, 127}, 105: {128, 102, 176}, 106: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 107: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 108: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 109: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 110: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 111: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 112: {110}, 113: {111}, 114: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 115: {113, 7}, 116: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 117: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 118: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 119: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 120: {154, 20, 118}, 121: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 122: {67, 79, 51, 120, 59, 92}, 123: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 124: {69, 101, 81, 86, 62, 122, 94, 127}, 125: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 126: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 127: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 128: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 129: {69, 101, 81, 86, 62, 122, 94, 127}, 130: {128, 102, 176}, 131: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 132: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 133: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 134: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 135: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 136: {135}, 137: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 138: {137, 74}, 139: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 140: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 141: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 142: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 143: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 144: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 145: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 146: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 147: {147}, 148: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 149: {149}, 150: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 151: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 152: {161, 37, 168, 18, 21, 152, 155, 28}, 153: {153, 19}, 154: {154, 20, 118}, 155: {161, 37, 168, 18, 21, 152, 155, 28}, 156: {162, 156, 29, 22}, 157: {157, 23}, 158: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 159: {41, 26, 171, 159}, 160: {160, 27}, 161: {161, 37, 168, 18, 21, 152, 155, 28}, 162: {162, 156, 29, 22}, 163: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 164: {32, 164}, 165: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 166: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 167: {40, 170, 36, 167}, 168: {161, 37, 168, 18, 21, 152, 155, 28}, 169: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 170: {40, 170, 36, 167}, 171: {41, 26, 171, 159}, 172: {42, 172}, 173: {43, 173}, 174: {33, 132, 165, 106, 44, 174, 15, 143, 150}, 175: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 176: {128, 102, 176}, 177: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 178: {178}, 179: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 180: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 181: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 182: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 183: {183}, 184: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 185: {64, 96, 130, 185, 71, 8, 104, 139, 76, 114, 83, 179, 56, 89, 124}, 186: {2, 131, 6, 136, 10, 142, 144, 146, 180, 58, 186, 60, 61, 66, 68, 72, 78, 80, 84, 91, 93, 97, 105, 112, 119, 121, 125}, 187: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 188: {188}, 189: {129, 4, 133, 9, 138, 11, 140, 13, 17, 145, 148, 151, 25, 158, 31, 35, 163, 166, 39, 169, 46, 175, 48, 177, 52, 181, 182, 55, 184, 57, 187, 189, 63, 65, 70, 73, 75, 77, 82, 85, 88, 90, 95, 98, 103, 107, 109, 115, 116, 117, 123, 126}, 190: {190}})
Equivalent! frozenset({81, 69, 62, 122, 94}) {99, 67, 74, 86, 124}
Equivalent! frozenset({82, 70, 123, 63, 95}) {100, 68, 75, 87, 125}
Equivalent! frozenset({73, 98, 85}) {90, 78, 103}
Equivalent! frozenset({137, 74}) {138, 79}
Equivalent! frozenset({138, 75}) {80, 139}
Equivalent! frozenset({101, 127}) {104, 129}
Equivalent! frozenset({176, 128, 102}) {176, 105, 130}
Equivalent! frozenset({177, 129, 103}) {177, 106, 131}
Equivalent! frozenset({104, 130}) {107, 132}
Equivalent! frozenset({105, 131}) {108, 133}
Equivalent! frozenset({106, 132}) {109, 134}
Equivalent! frozenset({107, 133}) {110, 135}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cf98b0d0>, {0: {0}, 1: {49}, 2: {108}, 3: {134}, 4: {99}, 5: {141}, 6: {50}, 7: {100}, 8: {47}, 9: {5}, 10: {1}, 11: {2}, 12: {3}, 13: {4}, 14: {6}, 15: {7}, 16: {8}, 17: {9}, 18: {10}, 19: {11}, 20: {12}, 21: {13}, 22: {14}, 23: {15}, 24: {16}, 25: {17}, 26: {18}, 27: {19}, 28: {20}, 29: {21}, 30: {22}, 31: {23}, 32: {24}, 33: {25}, 34: {26}, 35: {27}, 36: {28}, 37: {29}, 38: {30}, 39: {31}, 40: {32}, 41: {33}, 42: {34}, 43: {35}, 44: {36}, 45: {37}, 46: {38}, 47: {39}, 48: {40}, 49: {41}, 50: {42}, 51: {43}, 52: {44}, 53: {45}, 54: {46}, 55: {48, 126}, 56: {51}, 57: {52}, 58: {53}, 59: {54}, 60: {55}, 61: {56}, 62: {57}, 63: {58}, 64: {59}, 65: {60}, 66: {68, 80, 93, 121, 61}, 67: {69}, 68: {70}, 69: {64}, 70: {65}, 71: {66, 91, 78}, 72: {67, 92, 79}, 73: {68, 80, 93, 121, 61}, 74: {62}, 75: {123}, 76: {96, 83, 71}, 77: {72, 97, 84}, 78: {98}, 79: {74}, 80: {138}, 81: {76}, 82: {77}, 83: {66, 91, 78}, 84: {67, 92, 79}, 85: {68, 80, 93, 121, 61}, 86: {122}, 87: {63}, 88: {96, 83, 71}, 89: {72, 97, 84}, 90: {73}, 91: {86}, 92: {87}, 93: {88}, 94: {89}, 95: {90}, 96: {66, 91, 78, 119}, 97: {120, 67, 92, 79}, 98: {68, 144, 80, 93, 121, 61}, 99: {81}, 100: {82}, 101: {96, 83, 124, 71}, 102: {72, 97, 84, 125}, 103: {85}, 104: {101}, 105: {128}, 106: {129}, 107: {104}, 108: {105}, 109: {106}, 110: {107}, 111: {109}, 112: {110}, 113: {111}, 114: {112}, 115: {113}, 116: {114}, 117: {115}, 118: {116}, 119: {117}, 120: {118}, 121: {91, 119}, 122: {120, 92}, 123: {68, 144, 80, 93, 121, 61}, 124: {94}, 125: {95}, 126: {96, 124}, 127: {97, 125}, 128: {126}, 129: {127}, 130: {102}, 131: {103}, 132: {130}, 133: {131}, 134: {132}, 135: {133}, 136: {135}, 137: {136}, 138: {137}, 139: {75}, 140: {139}, 141: {140}, 142: {142}, 143: {143}, 144: {144, 121, 93}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 store store
EXACT 14 load load
EXACT 15 add add
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 store store
EXACT 20 add add
EXACT 21 store store
EXACT 22 icmp icmp
EXACT 23 zext zext
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 tail tail
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 xor xor
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 xor xor
EXACT 35 lshr lshr
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 icmp icmp
EXACT 41 zext zext
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 trunc trunc
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 xor xor
EXACT 50 add add
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
MORE 55 POT: 2
EXACT 56 add add
EXACT 57 store store
EXACT 58 add add
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
EXACT 65 load load
MORE 66 POT: 5
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 store store
MORE 71 POT: 3
MORE 72 POT: 3
MORE 73 POT: 5
EXACT 74 add add
EXACT 75 store store
MORE 76 POT: 3
MORE 77 POT: 3
EXACT 78 store store
EXACT 79 add add
EXACT 80 store store
EXACT 81 inttoptr inttoptr
EXACT 82 store store
MORE 83 POT: 3
MORE 84 POT: 3
MORE 85 POT: 5
EXACT 86 add add
EXACT 87 store store
MORE 88 POT: 3
MORE 89 POT: 3
EXACT 90 store store
EXACT 91 add add
EXACT 92 add add
EXACT 93 store store
EXACT 94 inttoptr inttoptr
EXACT 95 store store
MORE 96 POT: 4
MORE 97 POT: 4
MORE 98 POT: 6
EXACT 99 add add
EXACT 100 store store
MORE 101 POT: 4
MORE 102 POT: 4
EXACT 103 store store
EXACT 104 add add
EXACT 105 add add
EXACT 106 store store
EXACT 107 inttoptr inttoptr
EXACT 108 load load
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 store store
EXACT 112 add add
EXACT 113 add add
EXACT 114 load load
EXACT 115 add add
EXACT 116 inttoptr inttoptr
EXACT 117 store store
EXACT 118 store store
EXACT 119 store store
EXACT 120 tail tail
MORE 121 POT: 2
MORE 122 POT: 2
MORE 123 POT: 6
EXACT 124 add add
EXACT 125 store store
MORE 126 POT: 2
MORE 127 POT: 2
EXACT 128 store store
EXACT 129 add add
EXACT 130 add add
EXACT 131 store store
EXACT 132 inttoptr inttoptr
EXACT 133 load load
EXACT 134 zext zext
EXACT 135 store store
EXACT 136 add add
EXACT 137 load load
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 store store
EXACT 142 load load
EXACT 143 zext zext
MORE 144 POT: 3
EXACT 145 store store
EXACT 146 load load
EXACT 147 add add
EXACT 148 store store
EXACT 149 icmp icmp
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 trunc trunc
EXACT 153 and and
EXACT 154 tail tail
EXACT 155 trunc trunc
EXACT 156 and and
EXACT 157 xor xor
EXACT 158 store store
EXACT 159 xor xor
EXACT 160 lshr lshr
EXACT 161 trunc trunc
EXACT 162 and and
EXACT 163 store store
EXACT 164 icmp icmp
EXACT 165 zext zext
EXACT 166 store store
EXACT 167 lshr lshr
EXACT 168 trunc trunc
EXACT 169 store store
EXACT 170 lshr lshr
EXACT 171 xor xor
EXACT 172 add add
EXACT 173 icmp icmp
EXACT 174 zext zext
EXACT 175 store store
EXACT 176 add add
EXACT 177 store store
EXACT 178 add add
EXACT 179 inttoptr inttoptr
EXACT 180 load load
EXACT 181 store store
EXACT 182 store store
EXACT 183 add add
EXACT 184 store store
EXACT 185 inttoptr inttoptr
EXACT 186 load load
EXACT 187 store store
EXACT 188 add add
EXACT 189 store store
EXACT 190 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i39 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0', '%40 = add i64 %7, -24', 'store i64 %40, i64* %RAX.i39, align 8', '%41 = add i64 %7, -12', '%42 = add i64 %10, 28', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -24', '%46 = load i64, i64* %RAX.i39, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', 'store i64 %55, i64* %RAX.i39, align 8', '%56 = add i64 %52, 10', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %55 to i32*', 'store i32 1, i32* %57, align 4', '%61 = add i64 %60, 4', 'store i64 %61, i64* %3, align 8', 'store i64 %63, i64* %RAX.i39, align 8', '%64 = add i64 %63, 4', '%65 = add i64 %60, 11', 'store i64 %65, i64* %3, align 8', '%66 = inttoptr i64 %64 to i32*', 'store i32 2, i32* %66, align 4', '%70 = add i64 %69, 4', 'store i64 %70, i64* %3, align 8', 'store i64 %72, i64* %RAX.i39, align 8', '%73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%RSI.i19 = getelementptr inbounds %union.anon, %union.anon* %73, i64 0, i32 0', '%74 = add i64 %72, 4', '%75 = add i64 %69, 7', 'store i64 %75, i64* %3, align 8', '%76 = inttoptr i64 %74 to i32*', '%77 = load i32, i32* %76, align 4', '%78 = zext i32 %77 to i64', 'store i64 %78, i64* %RSI.i19, align 8', '%AL.i = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i, align 1', '%79 = add i64 %69, -310', '%80 = add i64 %69, 14', '%81 = load i64, i64* %6, align 8', '%82 = add i64 %81, -8', '%83 = inttoptr i64 %82 to i64*', 'store i64 %80, i64* %83, align 8', 'store i64 %82, i64* %6, align 8', 'store i64 %79, i64* %3, align 8', '%88 = add i64 %87, 4', 'store i64 %88, i64* %3, align 8', 'store i64 %90, i64* %RDI.i42, align 8', '%91 = add i64 %90, 4', '%92 = add i64 %87, 7', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %91 to i32*', '%94 = load i32, i32* %93, align 4', '%95 = zext i32 %94 to i64', 'store i64 %95, i64* %RSI.i19, align 8', '%EAX.i = bitcast %union.anon* %39 to i32*', '%96 = add i64 %85, -28', '%97 = load i32, i32* %EAX.i, align 4', '%98 = add i64 %87, 10', 'store i64 %98, i64* %3, align 8', '%99 = inttoptr i64 %96 to i32*', 'store i32 %97, i32* %99, align 4', '%ESI.i = bitcast %union.anon* %73 to i32*', '%100 = load i32, i32* %ESI.i, align 4', '%101 = zext i32 %100 to i64', 'store i64 %101, i64* %RAX.i39, align 8', '%103 = load i64, i64* %6, align 8', '%104 = add i64 %103, 32', 'store i64 %104, i64* %6, align 8', '%105 = icmp ugt i64 %103, -33', '%106 = zext i1 %105 to i8', 'store i8 %106, i8* %14, align 1', '%107 = trunc i64 %104 to i32', '%108 = and i32 %107, 255', '%109 = tail call i32 @llvm.ctpop.i32(i32 %108)', '%110 = trunc i32 %109 to i8', '%111 = and i8 %110, 1', '%112 = xor i8 %111, 1', 'store i8 %112, i8* %21, align 1', '%113 = xor i64 %104, %103', '%114 = lshr i64 %113, 4', '%115 = trunc i64 %114 to i8', '%116 = and i8 %115, 1', 'store i8 %116, i8* %26, align 1', '%117 = icmp eq i64 %104, 0', '%118 = zext i1 %117 to i8', 'store i8 %118, i8* %29, align 1', '%119 = lshr i64 %104, 63', '%120 = trunc i64 %119 to i8', 'store i8 %120, i8* %32, align 1', '%121 = lshr i64 %103, 63', '%122 = xor i64 %119, %121', '%123 = add nuw nsw i64 %122, %119', '%124 = icmp eq i64 %123, 2', '%125 = zext i1 %124 to i8', 'store i8 %125, i8* %38, align 1', '%126 = add i64 %102, 7', 'store i64 %126, i64* %3, align 8', '%127 = add i64 %103, 40', '%128 = inttoptr i64 %104 to i64*', '%129 = load i64, i64* %128, align 8', 'store i64 %129, i64* %RBP.i, align 8', 'store i64 %127, i64* %6, align 8', '%130 = add i64 %102, 8', 'store i64 %130, i64* %3, align 8', '%131 = inttoptr i64 %127 to i64*', '%132 = load i64, i64* %131, align 8', 'store i64 %132, i64* %3, align 8', '%133 = add i64 %103, 48', 'store i64 %133, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: store i64 add (i64 ptrtoint (%G__0x400604_type* @G__0x400604 to i64), i64 172), i64* %RDI.i42, align 8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i39 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Found line to remove! %40 = add i64 %7, -24
Found line to remove! store i64 %40, i64* %RAX.i39, align 8
Found line to remove! %41 = add i64 %7, -12
Found line to remove! %42 = add i64 %10, 28
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %41 to i32*
Found line to remove! store i32 0, i32* %43, align 4
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -24
Found line to remove! %46 = load i64, i64* %RAX.i39, align 8
Keep: %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 4
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Keep: %50 = load i64, i64* %RBP.i, align 8
Keep: %51 = add i64 %50, -24
Keep: %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %3, align 8
Keep: %54 = inttoptr i64 %51 to i64*
Keep: %55 = load i64, i64* %54, align 8
Found line to remove! store i64 %55, i64* %RAX.i39, align 8
Found line to remove! %56 = add i64 %52, 10
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = inttoptr i64 %55 to i32*
Found line to remove! store i32 1, i32* %57, align 4
Keep: %58 = load i64, i64* %RBP.i, align 8
Keep: %59 = add i64 %58, -24
Keep: %60 = load i64, i64* %3, align 8
Found line to remove! %61 = add i64 %60, 4
Found line to remove! store i64 %61, i64* %3, align 8
Keep: %62 = inttoptr i64 %59 to i64*
Keep: %63 = load i64, i64* %62, align 8
Found line to remove! store i64 %63, i64* %RAX.i39, align 8
Found line to remove! %64 = add i64 %63, 4
Found line to remove! %65 = add i64 %60, 11
Found line to remove! store i64 %65, i64* %3, align 8
Found line to remove! %66 = inttoptr i64 %64 to i32*
Found line to remove! store i32 2, i32* %66, align 4
Keep: %67 = load i64, i64* %RBP.i, align 8
Keep: %68 = add i64 %67, -24
Keep: %69 = load i64, i64* %3, align 8
Found line to remove! %70 = add i64 %69, 4
Found line to remove! store i64 %70, i64* %3, align 8
Keep: %71 = inttoptr i64 %68 to i64*
Keep: %72 = load i64, i64* %71, align 8
Found line to remove! store i64 %72, i64* %RAX.i39, align 8
Found line to remove! %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %RSI.i19 = getelementptr inbounds %union.anon, %union.anon* %73, i64 0, i32 0
Found line to remove! %74 = add i64 %72, 4
Found line to remove! %75 = add i64 %69, 7
Found line to remove! store i64 %75, i64* %3, align 8
Found line to remove! %76 = inttoptr i64 %74 to i32*
Found line to remove! %77 = load i32, i32* %76, align 4
Found line to remove! %78 = zext i32 %77 to i64
Found line to remove! store i64 %78, i64* %RSI.i19, align 8
Found line to remove! %AL.i = bitcast %union.anon* %39 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %79 = add i64 %69, -310
Found line to remove! %80 = add i64 %69, 14
Found line to remove! %81 = load i64, i64* %6, align 8
Found line to remove! %82 = add i64 %81, -8
Found line to remove! %83 = inttoptr i64 %82 to i64*
Found line to remove! store i64 %80, i64* %83, align 8
Found line to remove! store i64 %82, i64* %6, align 8
Found line to remove! store i64 %79, i64* %3, align 8
Keep: %84 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
Keep: %85 = load i64, i64* %RBP.i, align 8
Keep: %86 = add i64 %85, -24
Keep: %87 = load i64, i64* %3, align 8
Found line to remove! %88 = add i64 %87, 4
Found line to remove! store i64 %88, i64* %3, align 8
Keep: %89 = inttoptr i64 %86 to i64*
Keep: %90 = load i64, i64* %89, align 8
Found line to remove! store i64 %90, i64* %RDI.i42, align 8
Found line to remove! %91 = add i64 %90, 4
Found line to remove! %92 = add i64 %87, 7
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = inttoptr i64 %91 to i32*
Found line to remove! %94 = load i32, i32* %93, align 4
Found line to remove! %95 = zext i32 %94 to i64
Found line to remove! store i64 %95, i64* %RSI.i19, align 8
Found line to remove! %EAX.i = bitcast %union.anon* %39 to i32*
Found line to remove! %96 = add i64 %85, -28
Found line to remove! %97 = load i32, i32* %EAX.i, align 4
Found line to remove! %98 = add i64 %87, 10
Found line to remove! store i64 %98, i64* %3, align 8
Found line to remove! %99 = inttoptr i64 %96 to i32*
Found line to remove! store i32 %97, i32* %99, align 4
Found line to remove! %ESI.i = bitcast %union.anon* %73 to i32*
Found line to remove! %100 = load i32, i32* %ESI.i, align 4
Found line to remove! %101 = zext i32 %100 to i64
Keep: %102 = load i64, i64* %3, align 8
Found line to remove! store i64 %101, i64* %RAX.i39, align 8
Found line to remove! %103 = load i64, i64* %6, align 8
Found line to remove! %104 = add i64 %103, 32
Found line to remove! store i64 %104, i64* %6, align 8
Found line to remove! %105 = icmp ugt i64 %103, -33
Found line to remove! %106 = zext i1 %105 to i8
Found line to remove! store i8 %106, i8* %14, align 1
Found line to remove! %107 = trunc i64 %104 to i32
Found line to remove! %108 = and i32 %107, 255
Found line to remove! %109 = tail call i32 @llvm.ctpop.i32(i32 %108)
Found line to remove! %110 = trunc i32 %109 to i8
Found line to remove! %111 = and i8 %110, 1
Found line to remove! %112 = xor i8 %111, 1
Found line to remove! store i8 %112, i8* %21, align 1
Found line to remove! %113 = xor i64 %104, %103
Found line to remove! %114 = lshr i64 %113, 4
Found line to remove! %115 = trunc i64 %114 to i8
Found line to remove! %116 = and i8 %115, 1
Found line to remove! store i8 %116, i8* %26, align 1
Found line to remove! %117 = icmp eq i64 %104, 0
Found line to remove! %118 = zext i1 %117 to i8
Found line to remove! store i8 %118, i8* %29, align 1
Found line to remove! %119 = lshr i64 %104, 63
Found line to remove! %120 = trunc i64 %119 to i8
Found line to remove! store i8 %120, i8* %32, align 1
Found line to remove! %121 = lshr i64 %103, 63
Found line to remove! %122 = xor i64 %119, %121
Found line to remove! %123 = add nuw nsw i64 %122, %119
Found line to remove! %124 = icmp eq i64 %123, 2
Found line to remove! %125 = zext i1 %124 to i8
Found line to remove! store i8 %125, i8* %38, align 1
Found line to remove! %126 = add i64 %102, 7
Found line to remove! store i64 %126, i64* %3, align 8
Found line to remove! %127 = add i64 %103, 40
Found line to remove! %128 = inttoptr i64 %104 to i64*
Found line to remove! %129 = load i64, i64* %128, align 8
Found line to remove! store i64 %129, i64* %RBP.i, align 8
Found line to remove! store i64 %127, i64* %6, align 8
Found line to remove! %130 = add i64 %102, 8
Found line to remove! store i64 %130, i64* %3, align 8
Found line to remove! %131 = inttoptr i64 %127 to i64*
Found line to remove! %132 = load i64, i64* %131, align 8
Found line to remove! store i64 %132, i64* %3, align 8
Found line to remove! %133 = add i64 %103, 48
Found line to remove! store i64 %133, i64* %6, align 8
Keep: ret %struct.Memory* %84
Missed: dict_keys(['%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i39 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0', '%40 = add i64 %7, -24', 'store i64 %40, i64* %RAX.i39, align 8', '%41 = add i64 %7, -12', '%42 = add i64 %10, 28', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %41 to i32*', 'store i32 0, i32* %43, align 4', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -24', '%46 = load i64, i64* %RAX.i39, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %3, align 8', 'store i64 %55, i64* %RAX.i39, align 8', '%56 = add i64 %52, 10', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %55 to i32*', 'store i32 1, i32* %57, align 4', '%61 = add i64 %60, 4', 'store i64 %61, i64* %3, align 8', 'store i64 %63, i64* %RAX.i39, align 8', '%64 = add i64 %63, 4', '%65 = add i64 %60, 11', 'store i64 %65, i64* %3, align 8', '%66 = inttoptr i64 %64 to i32*', 'store i32 2, i32* %66, align 4', '%70 = add i64 %69, 4', 'store i64 %70, i64* %3, align 8', 'store i64 %72, i64* %RAX.i39, align 8', '%73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%RSI.i19 = getelementptr inbounds %union.anon, %union.anon* %73, i64 0, i32 0', '%74 = add i64 %72, 4', '%75 = add i64 %69, 7', 'store i64 %75, i64* %3, align 8', '%76 = inttoptr i64 %74 to i32*', '%77 = load i32, i32* %76, align 4', '%78 = zext i32 %77 to i64', 'store i64 %78, i64* %RSI.i19, align 8', '%AL.i = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i, align 1', '%79 = add i64 %69, -310', '%80 = add i64 %69, 14', '%81 = load i64, i64* %6, align 8', '%82 = add i64 %81, -8', '%83 = inttoptr i64 %82 to i64*', 'store i64 %80, i64* %83, align 8', 'store i64 %82, i64* %6, align 8', 'store i64 %79, i64* %3, align 8', '%88 = add i64 %87, 4', 'store i64 %88, i64* %3, align 8', 'store i64 %90, i64* %RDI.i42, align 8', '%91 = add i64 %90, 4', '%92 = add i64 %87, 7', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %91 to i32*', '%94 = load i32, i32* %93, align 4', '%95 = zext i32 %94 to i64', 'store i64 %95, i64* %RSI.i19, align 8', '%EAX.i = bitcast %union.anon* %39 to i32*', '%96 = add i64 %85, -28', '%97 = load i32, i32* %EAX.i, align 4', '%98 = add i64 %87, 10', 'store i64 %98, i64* %3, align 8', '%99 = inttoptr i64 %96 to i32*', 'store i32 %97, i32* %99, align 4', '%ESI.i = bitcast %union.anon* %73 to i32*', '%100 = load i32, i32* %ESI.i, align 4', '%101 = zext i32 %100 to i64', 'store i64 %101, i64* %RAX.i39, align 8', '%103 = load i64, i64* %6, align 8', '%104 = add i64 %103, 32', 'store i64 %104, i64* %6, align 8', '%105 = icmp ugt i64 %103, -33', '%106 = zext i1 %105 to i8', 'store i8 %106, i8* %14, align 1', '%107 = trunc i64 %104 to i32', '%108 = and i32 %107, 255', '%109 = tail call i32 @llvm.ctpop.i32(i32 %108)', '%110 = trunc i32 %109 to i8', '%111 = and i8 %110, 1', '%112 = xor i8 %111, 1', 'store i8 %112, i8* %21, align 1', '%113 = xor i64 %104, %103', '%114 = lshr i64 %113, 4', '%115 = trunc i64 %114 to i8', '%116 = and i8 %115, 1', 'store i8 %116, i8* %26, align 1', '%117 = icmp eq i64 %104, 0', '%118 = zext i1 %117 to i8', 'store i8 %118, i8* %29, align 1', '%119 = lshr i64 %104, 63', '%120 = trunc i64 %119 to i8', 'store i8 %120, i8* %32, align 1', '%121 = lshr i64 %103, 63', '%122 = xor i64 %119, %121', '%123 = add nuw nsw i64 %122, %119', '%124 = icmp eq i64 %123, 2', '%125 = zext i1 %124 to i8', 'store i8 %125, i8* %38, align 1', '%126 = add i64 %102, 7', 'store i64 %126, i64* %3, align 8', '%127 = add i64 %103, 40', '%128 = inttoptr i64 %104 to i64*', '%129 = load i64, i64* %128, align 8', 'store i64 %129, i64* %RBP.i, align 8', 'store i64 %127, i64* %6, align 8', '%130 = add i64 %102, 8', 'store i64 %130, i64* %3, align 8', '%131 = inttoptr i64 %127 to i64*', '%132 = load i64, i64* %131, align 8', 'store i64 %132, i64* %3, align 8', '%133 = add i64 %103, 48', 'store i64 %133, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -24', 'store i64 %39, i64* %RAX, align 8', '%40 = add i64 %7, -12', '%41 = add i64 %10, 28', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -24', '%45 = load i64, i64* %RAX, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %PC, align 8', 'store i64 %54, i64* %RAX, align 8', '%55 = add i64 %51, 10', 'store i64 %55, i64* %PC, align 8', '%56 = inttoptr i64 %54 to i32*', 'store i32 1, i32* %56, align 4', '%60 = add i64 %59, 4', 'store i64 %60, i64* %PC, align 8', 'store i64 %62, i64* %RAX, align 8', '%63 = add i64 %62, 4', '%64 = add i64 %59, 11', 'store i64 %64, i64* %PC, align 8', '%65 = inttoptr i64 %63 to i32*', 'store i32 2, i32* %65, align 4', '%69 = add i64 %68, 4', 'store i64 %69, i64* %PC, align 8', 'store i64 %71, i64* %RAX, align 8', '%72 = add i64 %71, 4', '%73 = add i64 %68, 7', 'store i64 %73, i64* %PC, align 8', '%74 = inttoptr i64 %72 to i32*', '%75 = load i32, i32* %74, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%77 = add i64 %68, -310', '%78 = add i64 %68, 14', '%79 = load i64, i64* %RSP, align 8', '%80 = add i64 %79, -8', '%81 = inttoptr i64 %80 to i64*', 'store i64 %78, i64* %81, align 8', 'store i64 %80, i64* %RSP, align 8', 'store i64 %77, i64* %PC, align 8', '%86 = add i64 %85, 4', 'store i64 %86, i64* %PC, align 8', 'store i64 %88, i64* %RDI, align 8', '%89 = add i64 %88, 4', '%90 = add i64 %85, 7', 'store i64 %90, i64* %PC, align 8', '%91 = inttoptr i64 %89 to i32*', '%92 = load i32, i32* %91, align 4', '%93 = zext i32 %92 to i64', 'store i64 %93, i64* %RSI, align 8', '%94 = add i64 %83, -28', '%95 = load i32, i32* %EAX, align 4', '%96 = add i64 %85, 10', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %94 to i32*', 'store i32 %95, i32* %97, align 4', '%98 = load i32, i32* %ESI, align 4', '%99 = zext i32 %98 to i64', 'store i64 %99, i64* %RAX, align 8', '%101 = load i64, i64* %RSP, align 8', '%102 = add i64 %101, 32', 'store i64 %102, i64* %RSP, align 8', '%103 = icmp ugt i64 %101, -33', '%104 = zext i1 %103 to i8', 'store i8 %104, i8* %14, align 1', '%105 = trunc i64 %102 to i32', '%106 = and i32 %105, 255', '%107 = tail call i32 @llvm.ctpop.i32(i32 %106) #11', '%108 = trunc i32 %107 to i8', '%109 = and i8 %108, 1', '%110 = xor i8 %109, 1', 'store i8 %110, i8* %21, align 1', '%111 = xor i64 %102, %101', '%112 = lshr i64 %111, 4', '%113 = trunc i64 %112 to i8', '%114 = and i8 %113, 1', 'store i8 %114, i8* %26, align 1', '%115 = icmp eq i64 %102, 0', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %29, align 1', '%117 = lshr i64 %102, 63', '%118 = trunc i64 %117 to i8', 'store i8 %118, i8* %32, align 1', '%119 = lshr i64 %101, 63', '%120 = xor i64 %117, %119', '%121 = add nuw nsw i64 %120, %117', '%122 = icmp eq i64 %121, 2', '%123 = zext i1 %122 to i8', 'store i8 %123, i8* %38, align 1', '%124 = add i64 %100, 7', 'store i64 %124, i64* %PC, align 8', '%125 = add i64 %101, 40', '%126 = inttoptr i64 %102 to i64*', '%127 = load i64, i64* %126, align 8', 'store i64 %127, i64* %RBP, align 8', 'store i64 %125, i64* %RSP, align 8', '%128 = add i64 %100, 8', 'store i64 %128, i64* %PC, align 8', '%129 = inttoptr i64 %125 to i64*', '%130 = load i64, i64* %129, align 8', 'store i64 %130, i64* %PC, align 8', '%131 = add i64 %101, 48', 'store i64 %131, i64* %RSP, align 8'])
Keep: block_400520:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Keep: %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %39 = add i64 %7, -24
Found line to remove! store i64 %39, i64* %RAX, align 8
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 28
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -24
Found line to remove! %45 = load i64, i64* %RAX, align 8
Keep: %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Keep: %49 = load i64, i64* %RBP, align 8
Keep: %50 = add i64 %49, -24
Keep: %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %PC, align 8
Keep: %53 = inttoptr i64 %50 to i64*
Keep: %54 = load i64, i64* %53, align 8
Found line to remove! store i64 %54, i64* %RAX, align 8
Found line to remove! %55 = add i64 %51, 10
Found line to remove! store i64 %55, i64* %PC, align 8
Found line to remove! %56 = inttoptr i64 %54 to i32*
Found line to remove! store i32 1, i32* %56, align 4
Keep: %57 = load i64, i64* %RBP, align 8
Keep: %58 = add i64 %57, -24
Keep: %59 = load i64, i64* %PC, align 8
Found line to remove! %60 = add i64 %59, 4
Found line to remove! store i64 %60, i64* %PC, align 8
Keep: %61 = inttoptr i64 %58 to i64*
Keep: %62 = load i64, i64* %61, align 8
Found line to remove! store i64 %62, i64* %RAX, align 8
Found line to remove! %63 = add i64 %62, 4
Found line to remove! %64 = add i64 %59, 11
Found line to remove! store i64 %64, i64* %PC, align 8
Found line to remove! %65 = inttoptr i64 %63 to i32*
Found line to remove! store i32 2, i32* %65, align 4
Keep: %66 = load i64, i64* %RBP, align 8
Keep: %67 = add i64 %66, -24
Keep: %68 = load i64, i64* %PC, align 8
Found line to remove! %69 = add i64 %68, 4
Found line to remove! store i64 %69, i64* %PC, align 8
Keep: %70 = inttoptr i64 %67 to i64*
Keep: %71 = load i64, i64* %70, align 8
Found line to remove! store i64 %71, i64* %RAX, align 8
Found line to remove! %72 = add i64 %71, 4
Found line to remove! %73 = add i64 %68, 7
Found line to remove! store i64 %73, i64* %PC, align 8
Found line to remove! %74 = inttoptr i64 %72 to i32*
Found line to remove! %75 = load i32, i32* %74, align 4
Found line to remove! %76 = zext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %77 = add i64 %68, -310
Found line to remove! %78 = add i64 %68, 14
Found line to remove! %79 = load i64, i64* %RSP, align 8
Found line to remove! %80 = add i64 %79, -8
Found line to remove! %81 = inttoptr i64 %80 to i64*
Found line to remove! store i64 %78, i64* %81, align 8
Found line to remove! store i64 %80, i64* %RSP, align 8
Found line to remove! store i64 %77, i64* %PC, align 8
Keep: %82 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %83 = load i64, i64* %RBP, align 8
Keep: %84 = add i64 %83, -24
Keep: %85 = load i64, i64* %PC, align 8
Found line to remove! %86 = add i64 %85, 4
Found line to remove! store i64 %86, i64* %PC, align 8
Keep: %87 = inttoptr i64 %84 to i64*
Keep: %88 = load i64, i64* %87, align 8
Found line to remove! store i64 %88, i64* %RDI, align 8
Found line to remove! %89 = add i64 %88, 4
Found line to remove! %90 = add i64 %85, 7
Found line to remove! store i64 %90, i64* %PC, align 8
Found line to remove! %91 = inttoptr i64 %89 to i32*
Found line to remove! %92 = load i32, i32* %91, align 4
Found line to remove! %93 = zext i32 %92 to i64
Found line to remove! store i64 %93, i64* %RSI, align 8
Found line to remove! %94 = add i64 %83, -28
Found line to remove! %95 = load i32, i32* %EAX, align 4
Found line to remove! %96 = add i64 %85, 10
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %94 to i32*
Found line to remove! store i32 %95, i32* %97, align 4
Found line to remove! %98 = load i32, i32* %ESI, align 4
Found line to remove! %99 = zext i32 %98 to i64
Keep: %100 = load i64, i64* %PC, align 8
Found line to remove! store i64 %99, i64* %RAX, align 8
Found line to remove! %101 = load i64, i64* %RSP, align 8
Found line to remove! %102 = add i64 %101, 32
Found line to remove! store i64 %102, i64* %RSP, align 8
Found line to remove!Writing '/tmp/tmpxw0k75z4.dot'...
Writing '/tmp/tmpxw0k75z4.dot':Done

Reading LLVM: /tmp/tmpurjpu4j8-query.ll
Extracting function [main] from /tmp/tmpurjpu4j8-query.ll
Dot file generated!
Writing '/tmp/tmpdz0vnb9x.dot'...
Writing '/tmp/tmpdz0vnb9x.dot':Done

Reading LLVM: /tmp/tmppe08hgbx-target.ll
Extracting function [main] from /tmp/tmppe08hgbx-target.ll
Dot file generated!
 %103 = icmp ugt i64 %101, -33
Found line to remove! %104 = zext i1 %103 to i8
Found line to remove! store i8 %104, i8* %14, align 1
Found line to remove! %105 = trunc i64 %102 to i32
Found line to remove! %106 = and i32 %105, 255
Found line to remove! %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #11
Found line to remove! %108 = trunc i32 %107 to i8
Found line to remove! %109 = and i8 %108, 1
Found line to remove! %110 = xor i8 %109, 1
Found line to remove! store i8 %110, i8* %21, align 1
Found line to remove! %111 = xor i64 %102, %101
Found line to remove! %112 = lshr i64 %111, 4
Found line to remove! %113 = trunc i64 %112 to i8
Found line to remove! %114 = and i8 %113, 1
Found line to remove! store i8 %114, i8* %26, align 1
Found line to remove! %115 = icmp eq i64 %102, 0
Found line to remove! %116 = zext i1 %115 to i8
Found line to remove! store i8 %116, i8* %29, align 1
Found line to remove! %117 = lshr i64 %102, 63
Found line to remove! %118 = trunc i64 %117 to i8
Found line to remove! store i8 %118, i8* %32, align 1
Found line to remove! %119 = lshr i64 %101, 63
Found line to remove! %120 = xor i64 %117, %119
Found line to remove! %121 = add nuw nsw i64 %120, %117
Found line to remove! %122 = icmp eq i64 %121, 2
Found line to remove! %123 = zext i1 %122 to i8
Found line to remove! store i8 %123, i8* %38, align 1
Found line to remove! %124 = add i64 %100, 7
Found line to remove! store i64 %124, i64* %PC, align 8
Found line to remove! %125 = add i64 %101, 40
Found line to remove! %126 = inttoptr i64 %102 to i64*
Found line to remove! %127 = load i64, i64* %126, align 8
Found line to remove! store i64 %127, i64* %RBP, align 8
Found line to remove! store i64 %125, i64* %RSP, align 8
Found line to remove! %128 = add i64 %100, 8
Found line to remove! store i64 %128, i64* %PC, align 8
Found line to remove! %129 = inttoptr i64 %125 to i64*
Found line to remove! %130 = load i64, i64* %129, align 8
Found line to remove! store i64 %130, i64* %PC, align 8
Found line to remove! %131 = add i64 %101, 48
Found line to remove! store i64 %131, i64* %RSP, align 8
Keep: ret %struct.Memory* %82
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0', '%ESI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -24', 'store i64 %39, i64* %RAX, align 8', '%40 = add i64 %7, -12', '%41 = add i64 %10, 28', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -24', '%45 = load i64, i64* %RAX, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %PC, align 8', 'store i64 %54, i64* %RAX, align 8', '%55 = add i64 %51, 10', 'store i64 %55, i64* %PC, align 8', '%56 = inttoptr i64 %54 to i32*', 'store i32 1, i32* %56, align 4', '%60 = add i64 %59, 4', 'store i64 %60, i64* %PC, align 8', 'store i64 %62, i64* %RAX, align 8', '%63 = add i64 %62, 4', '%64 = add i64 %59, 11', 'store i64 %64, i64* %PC, align 8', '%65 = inttoptr i64 %63 to i32*', 'store i32 2, i32* %65, align 4', '%69 = add i64 %68, 4', 'store i64 %69, i64* %PC, align 8', 'store i64 %71, i64* %RAX, align 8', '%72 = add i64 %71, 4', '%73 = add i64 %68, 7', 'store i64 %73, i64* %PC, align 8', '%74 = inttoptr i64 %72 to i32*', '%75 = load i32, i32* %74, align 4', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%77 = add i64 %68, -310', '%78 = add i64 %68, 14', '%79 = load i64, i64* %RSP, align 8', '%80 = add i64 %79, -8', '%81 = inttoptr i64 %80 to i64*', 'store i64 %78, i64* %81, align 8', 'store i64 %80, i64* %RSP, align 8', 'store i64 %77, i64* %PC, align 8', '%86 = add i64 %85, 4', 'store i64 %86, i64* %PC, align 8', 'store i64 %88, i64* %RDI, align 8', '%89 = add i64 %88, 4', '%90 = add i64 %85, 7', 'store i64 %90, i64* %PC, align 8', '%91 = inttoptr i64 %89 to i32*', '%92 = load i32, i32* %91, align 4', '%93 = zext i32 %92 to i64', 'store i64 %93, i64* %RSI, align 8', '%94 = add i64 %83, -28', '%95 = load i32, i32* %EAX, align 4', '%96 = add i64 %85, 10', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %94 to i32*', 'store i32 %95, i32* %97, align 4', '%98 = load i32, i32* %ESI, align 4', '%99 = zext i32 %98 to i64', 'store i64 %99, i64* %RAX, align 8', '%101 = load i64, i64* %RSP, align 8', '%102 = add i64 %101, 32', 'store i64 %102, i64* %RSP, align 8', '%103 = icmp ugt i64 %101, -33', '%104 = zext i1 %103 to i8', 'store i8 %104, i8* %14, align 1', '%105 = trunc i64 %102 to i32', '%106 = and i32 %105, 255', '%107 = tail call i32 @llvm.ctpop.i32(i32 %106) #11', '%108 = trunc i32 %107 to i8', '%109 = and i8 %108, 1', '%110 = xor i8 %109, 1', 'store i8 %110, i8* %21, align 1', '%111 = xor i64 %102, %101', '%112 = lshr i64 %111, 4', '%113 = trunc i64 %112 to i8', '%114 = and i8 %113, 1', 'store i8 %114, i8* %26, align 1', '%115 = icmp eq i64 %102, 0', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %29, align 1', '%117 = lshr i64 %102, 63', '%118 = trunc i64 %117 to i8', 'store i8 %118, i8* %32, align 1', '%119 = lshr i64 %101, 63', '%120 = xor i64 %117, %119', '%121 = add nuw nsw i64 %120, %117', '%122 = icmp eq i64 %121, 2', '%123 = zext i1 %122 to i8', 'store i8 %123, i8* %38, align 1', '%124 = add i64 %100, 7', 'store i64 %124, i64* %PC, align 8', '%125 = add i64 %101, 40', '%126 = inttoptr i64 %102 to i64*', '%127 = load i64, i64* %126, align 8', 'store i64 %127, i64* %RBP, align 8', 'store i64 %125, i64* %RSP, align 8', '%128 = add i64 %100, 8', 'store i64 %128, i64* %PC, align 8', '%129 = inttoptr i64 %125 to i64*', '%130 = load i64, i64* %129, align 8', 'store i64 %130, i64* %PC, align 8', '%131 = add i64 %101, 48', 'store i64 %131, i64* %RSP, align 8'])
================ Starting round 2
MAPPING:
- 0 %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 1 store i64 add (i64 ptrtoint (%G__0x400604_type* @G__0x400604 to i64), i64 172), i64* %RDI.i42, align 8
- 2 %var_2_84 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
- 3 \<badref\> = ret %struct.Memory* %var_2_84
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cefe2c80>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cefe2c80>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 tail tail
EXACT 3 ret ret
================ Starting round 3
MAPPING:
- 0 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 1 store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 4), i64* %RDI, align 8
- 2 %var_2_82 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)
- 3 \<badref\> = ret %struct.Memory* %var_2_82
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cf6c9950>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7ff1cf6c9950>, {0: {0}, 1: {1}, 2: {2}, 3: {3}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 tail tail
EXACT 3 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%G__0x400604_type* @G__0x400604 to i64), i64 172), i64* %RDI.i42, align 8'])
Keep: entry:
Found line to remove! %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 add (i64 ptrtoint (%G__0x400604_type* @G__0x400604 to i64), i64 172), i64* %RDI.i42, align 8
Keep: %var_2_84 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
Keep: ret %struct.Memory* %var_2_84
Missed: dict_keys(['%RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%G__0x400604_type* @G__0x400604 to i64), i64 172), i64* %RDI.i42, align 8'])
TO REMOVE: dict_keys(['%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 4), i64* %RDI, align 8'])
Keep: block_400520:
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 4), i64* %RDI, align 8
Keep: %var_2_82 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: ret %struct.Memory* %var_2_82
Missed: dict_keys(['%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 4), i64* %RDI, align 8'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_0/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_0/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
