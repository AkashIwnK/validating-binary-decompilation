Writing '/tmp/tmpa2m_up31.dot'...
Writing '/tmp/tmpa2m_up31.dot':Done

Reading LLVM: /tmp/tmpyv3jytpb-query.ll
Extracting function [printdata] from /tmp/tmpyv3jytpb-query.ll
Dot file generated!
Writing '/tmp/tmpbnxkrl94.dot'...
Writing '/tmp/tmpbnxkrl94.dot':Done

Reading LLVM: /tmp/tmprm4fho6n-target.ll
Extracting function [printdata] from /tmp/tmprm4fho6n-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = add i64 %7, -16
- 14 %12 = add i64 %10, 10
- 15 store i64 %12, i64* %3, align 8
- 16 %13 = inttoptr i64 %11 to i32*
- 17 store i32 0, i32* %13, align 4
- 18 %14 = load i64, i64* %RBP.i, align 8
- 19 %15 = add i64 %14, -4
- 20 %16 = load i64, i64* %3, align 8
- 21 %17 = add i64 %16, 7
- 22 store i64 %17, i64* %3, align 8
- 23 %18 = inttoptr i64 %15 to i32*
- 24 store i32 0, i32* %18, align 4
- 25 %RAX.i37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 26 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 27 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 28 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 29 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 30 %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 31 %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 32 %RCX.i21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 33 %.pre = load i64, i64* %3, align 8
- 34 \<badref\> = br label %block_.L_4004f2
- 35 %25 = phi i64 [ %149, %block_.L_400527 ], [ %.pre, %entry ]
- 36 %26 = load i64, i64* %RBP.i, align 8
- 37 %27 = add i64 %26, -4
- 38 %28 = add i64 %25, 4
- 39 store i64 %28, i64* %3, align 8
- 40 %29 = inttoptr i64 %27 to i32*
- 41 %30 = load i32, i32* %29, align 4
- 42 %31 = sext i32 %30 to i64
- 43 store i64 %31, i64* %RAX.i37, align 8
- 44 %32 = add nsw i64 %31, -10
- 45 %33 = icmp ult i32 %30, 10
- 46 %34 = zext i1 %33 to i8
- 47 store i8 %34, i8* %19, align 1
- 48 %35 = trunc i64 %32 to i32
- 49 %36 = and i32 %35, 255
- 50 %37 = tail call i32 @llvm.ctpop.i32(i32 %36)
- 51 %38 = trunc i32 %37 to i8
- 52 %39 = and i8 %38, 1
- 53 %40 = xor i8 %39, 1
- 54 store i8 %40, i8* %20, align 1
- 55 %41 = xor i64 %32, %31
- 56 %42 = lshr i64 %41, 4
- 57 %43 = trunc i64 %42 to i8
- 58 %44 = and i8 %43, 1
- 59 store i8 %44, i8* %21, align 1
- 60 %45 = icmp eq i64 %32, 0
- 61 %46 = zext i1 %45 to i8
- 62 store i8 %46, i8* %22, align 1
- 63 %47 = lshr i64 %32, 63
- 64 %48 = trunc i64 %47 to i8
- 65 store i8 %48, i8* %23, align 1
- 66 %49 = lshr i64 %31, 63
- 67 %50 = xor i64 %47, %49
- 68 %51 = add nuw nsw i64 %50, %49
- 69 %52 = icmp eq i64 %51, 2
- 70 %53 = zext i1 %52 to i8
- 71 store i8 %53, i8* %24, align 1
- 72 %.v = select i1 %33, i64 14, i64 72
- 73 %54 = add i64 %25, %.v
- 74 store i64 %54, i64* %3, align 8
- 75 \<badref\> = br i1 %33, label %block_400500, label %block_.L_40053a
- 76 %55 = add i64 %54, 4
- 77 store i64 %55, i64* %3, align 8
- 78 %56 = load i32, i32* %29, align 4
- 79 %57 = sext i32 %56 to i64
- 80 store i64 %57, i64* %RAX.i37, align 8
- 81 %58 = shl nsw i64 %57, 3
- 82 %59 = add i64 %58, ptrtoint (%G_0x601040___rax_8__type* @G_0x601040___rax_8_ to i64)
- 83 %60 = add i64 %54, 13
- 84 store i64 %60, i64* %3, align 8
- 85 %61 = inttoptr i64 %59 to i64*
- 86 %62 = load i64, i64* %61, align 8
- 87 store i8 0, i8* %19, align 1
- 88 %63 = trunc i64 %62 to i32
- 89 %64 = and i32 %63, 255
- 90 %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
- 91 %66 = trunc i32 %65 to i8
- 92 %67 = and i8 %66, 1
- 93 %68 = xor i8 %67, 1
- 94 store i8 %68, i8* %20, align 1
- 95 store i8 0, i8* %21, align 1
- 96 %69 = icmp eq i64 %62, 0
- 97 %70 = zext i1 %69 to i8
- 98 store i8 %70, i8* %22, align 1
- 99 %71 = lshr i64 %62, 63
- 100 %72 = trunc i64 %71 to i8
- 101 store i8 %72, i8* %23, align 1
- 102 store i8 0, i8* %24, align 1
- 103 %.v6 = select i1 %69, i64 39, i64 19
- 104 %73 = add i64 %54, %.v6
- 105 store i64 %73, i64* %3, align 8
- 106 \<badref\> = br i1 %69, label %block_.L_400527, label %block_400513
- 107 %74 = add i64 %73, 4
- 108 store i64 %74, i64* %3, align 8
- 109 %75 = load i32, i32* %29, align 4
- 110 %76 = sext i32 %75 to i64
- 111 store i64 %76, i64* %RAX.i37, align 8
- 112 %77 = shl nsw i64 %76, 3
- 113 %78 = add i64 %77, ptrtoint (%G_0x601040___rax_8__type* @G_0x601040___rax_8_ to i64)
- 114 %79 = add i64 %73, 12
- 115 store i64 %79, i64* %3, align 8
- 116 %80 = inttoptr i64 %78 to i64*
- 117 %81 = load i64, i64* %80, align 8
- 118 store i64 %81, i64* %RAX.i37, align 8
- 119 %82 = add i64 %73, 14
- 120 store i64 %82, i64* %3, align 8
- 121 %83 = inttoptr i64 %81 to i32*
- 122 %84 = load i32, i32* %83, align 4
- 123 %85 = zext i32 %84 to i64
- 124 store i64 %85, i64* %RCX.i21, align 8
- 125 %86 = add i64 %26, -8
- 126 %87 = add i64 %73, 17
- 127 store i64 %87, i64* %3, align 8
- 128 %88 = inttoptr i64 %86 to i32*
- 129 %89 = load i32, i32* %88, align 4
- 130 %90 = add i32 %89, %84
- 131 %91 = zext i32 %90 to i64
- 132 store i64 %91, i64* %RCX.i21, align 8
- 133 %92 = icmp ult i32 %90, %84
- 134 %93 = icmp ult i32 %90, %89
- 135 %94 = or i1 %92, %93
- 136 %95 = zext i1 %94 to i8
- 137 store i8 %95, i8* %19, align 1
- 138 %96 = and i32 %90, 255
- 139 %97 = tail call i32 @llvm.ctpop.i32(i32 %96)
- 140 %98 = trunc i32 %97 to i8
- 141 %99 = and i8 %98, 1
- 142 %100 = xor i8 %99, 1
- 143 store i8 %100, i8* %20, align 1
- 144 %101 = xor i32 %89, %84
- 145 %102 = xor i32 %101, %90
- 146 %103 = lshr i32 %102, 4
- 147 %104 = trunc i32 %103 to i8
- 148 %105 = and i8 %104, 1
- 149 store i8 %105, i8* %21, align 1
- 150 %106 = icmp eq i32 %90, 0
- 151 %107 = zext i1 %106 to i8
- 152 store i8 %107, i8* %22, align 1
- 153 %108 = lshr i32 %90, 31
- 154 %109 = trunc i32 %108 to i8
- 155 store i8 %109, i8* %23, align 1
- 156 %110 = lshr i32 %84, 31
- 157 %111 = lshr i32 %89, 31
- 158 %112 = xor i32 %108, %110
- 159 %113 = xor i32 %108, %111
- 160 %114 = add nuw nsw i32 %112, %113
- 161 %115 = icmp eq i32 %114, 2
- 162 %116 = zext i1 %115 to i8
- 163 store i8 %116, i8* %24, align 1
- 164 %117 = add i64 %73, 20
- 165 store i64 %117, i64* %3, align 8
- 166 store i32 %90, i32* %88, align 4
- 167 %.pre4 = load i64, i64* %3, align 8
- 168 %.pre5 = load i64, i64* %RBP.i, align 8
- 169 \<badref\> = br label %block_.L_400527
- 170 %118 = phi i64 [ %.pre5, %block_400513 ], [ %26, %block_400500 ]
- 171 %119 = phi i64 [ %.pre4, %block_400513 ], [ %73, %block_400500 ]
- 172 %120 = add i64 %118, -4
- 173 %121 = add i64 %119, 8
- 174 store i64 %121, i64* %3, align 8
- 175 %122 = inttoptr i64 %120 to i32*
- 176 %123 = load i32, i32* %122, align 4
- 177 %124 = add i32 %123, 1
- 178 %125 = zext i32 %124 to i64
- 179 store i64 %125, i64* %RAX.i37, align 8
- 180 %126 = icmp eq i32 %123, -1
- 181 %127 = icmp eq i32 %124, 0
- 182 %128 = or i1 %126, %127
- 183 %129 = zext i1 %128 to i8
- 184 store i8 %129, i8* %19, align 1
- 185 %130 = and i32 %124, 255
- 186 %131 = tail call i32 @llvm.ctpop.i32(i32 %130)
- 187 %132 = trunc i32 %131 to i8
- 188 %133 = and i8 %132, 1
- 189 %134 = xor i8 %133, 1
- 190 store i8 %134, i8* %20, align 1
- 191 %135 = xor i32 %124, %123
- 192 %136 = lshr i32 %135, 4
- 193 %137 = trunc i32 %136 to i8
- 194 %138 = and i8 %137, 1
- 195 store i8 %138, i8* %21, align 1
- 196 %139 = zext i1 %127 to i8
- 197 store i8 %139, i8* %22, align 1
- 198 %140 = lshr i32 %124, 31
- 199 %141 = trunc i32 %140 to i8
- 200 store i8 %141, i8* %23, align 1
- 201 %142 = lshr i32 %123, 31
- 202 %143 = xor i32 %140, %142
- 203 %144 = add nuw nsw i32 %143, %140
- 204 %145 = icmp eq i32 %144, 2
- 205 %146 = zext i1 %145 to i8
- 206 store i8 %146, i8* %24, align 1
- 207 %147 = add i64 %119, 14
- 208 store i64 %147, i64* %3, align 8
- 209 store i32 %124, i32* %122, align 4
- 210 %148 = load i64, i64* %3, align 8
- 211 %149 = add i64 %148, -67
- 212 store i64 %149, i64* %3, align 8
- 213 \<badref\> = br label %block_.L_4004f2
- 214 %150 = add i64 %26, -8
- 215 %151 = add i64 %54, 3
- 216 store i64 %151, i64* %3, align 8
- 217 %152 = inttoptr i64 %150 to i32*
- 218 %153 = load i32, i32* %152, align 4
- 219 %154 = zext i32 %153 to i64
- 220 store i64 %154, i64* %RAX.i37, align 8
- 221 %155 = add i64 %54, 4
- 222 store i64 %155, i64* %3, align 8
- 223 %156 = load i64, i64* %6, align 8
- 224 %157 = add i64 %156, 8
- 225 %158 = inttoptr i64 %156 to i64*
- 226 %159 = load i64, i64* %158, align 8
- 227 store i64 %159, i64* %RBP.i, align 8
- 228 store i64 %157, i64* %6, align 8
- 229 %160 = add i64 %54, 5
- 230 store i64 %160, i64* %3, align 8
- 231 %161 = inttoptr i64 %157 to i64*
- 232 %162 = load i64, i64* %161, align 8
- 233 store i64 %162, i64* %3, align 8
- 234 %163 = add i64 %156, 16
- 235 store i64 %163, i64* %6, align 8
- 236 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeee11af28>, {0: {0}, 1: {3}, 2: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 3: {169, 5}, 4: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 5: {7}, 6: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 7: {9, 35, 76}, 8: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 9: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 10: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 11: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 12: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 13: {15}, 14: {16}, 15: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 16: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 17: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 18: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 19: {123, 164, 21}, 20: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 21: {23}, 22: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 23: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 24: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 25: {1}, 26: {27}, 27: {28}, 28: {29}, 29: {30}, 30: {31}, 31: {32}, 32: {2}, 33: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 34: {120, 34, 205}, 35: {121, 162, 163}, 36: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 37: {123, 164, 21}, 38: {124, 42, 58, 206}, 39: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 40: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 41: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 42: {128, 209, 61}, 43: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 44: {130}, 45: {131}, 46: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 47: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 48: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 49: {89, 177, 219, 135}, 50: {136, 178, 90, 220}, 51: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 52: {99, 138, 144, 180, 186, 92, 222}, 53: {223, 139, 93, 181}, 54: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 55: {96, 194, 141, 109, 110, 183, 153, 95}, 56: {184, 97, 142}, 57: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 58: {99, 138, 144, 180, 186, 92, 222}, 59: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 60: {226, 101, 173, 146, 84, 85}, 61: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 62: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 63: {152, 229, 149}, 64: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 65: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 66: {152, 229, 149}, 67: {96, 194, 141, 109, 110, 183, 153, 95}, 68: {64, 195, 234, 111, 81, 212, 154, 159}, 69: {112, 155, 196}, 70: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 71: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 72: {158}, 73: {64, 195, 234, 111, 81, 212, 154, 159}, 74: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 75: {161, 236}, 76: {124, 42, 58, 206}, 77: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 78: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 79: {128, 209, 61}, 80: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 81: {211, 63}, 82: {64, 195, 234, 111, 81, 212, 154, 159}, 83: {213}, 84: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 85: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 86: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 87: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 88: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 89: {89, 177, 219, 135}, 90: {136, 178, 90, 220}, 91: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 92: {99, 138, 144, 180, 186, 92, 222}, 93: {223, 139, 93, 181}, 94: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 95: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 96: {226, 101, 173, 146, 84, 85}, 97: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 98: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 99: {152, 229, 149}, 100: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 101: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 102: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 103: {233}, 104: {64, 195, 234, 111, 81, 212, 154, 159}, 105: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 106: {161, 236}, 107: {124, 42, 58, 206}, 108: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 109: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 110: {128, 209, 61}, 111: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 112: {211, 63}, 113: {64, 195, 234, 111, 81, 212, 154, 159}, 114: {65}, 115: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 116: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 117: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 118: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 119: {70, 199}, 120: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 121: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 122: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 123: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 124: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 125: {9, 35, 76}, 126: {77}, 127: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 128: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 129: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 130: {64, 195, 234, 111, 81, 212, 154, 159}, 131: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 132: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 133: {226, 101, 173, 146, 84, 85}, 134: {226, 101, 173, 146, 84, 85}, 135: {174, 86}, 136: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 137: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 138: {89, 177, 219, 135}, 139: {136, 178, 90, 220}, 140: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 141: {99, 138, 144, 180, 186, 92, 222}, 142: {223, 139, 93, 181}, 143: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 144: {96, 194, 141, 109, 110, 183, 153, 95}, 145: {96, 194, 141, 109, 110, 183, 153, 95}, 146: {184, 97, 142}, 147: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 148: {99, 138, 144, 180, 186, 92, 222}, 149: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 150: {226, 101, 173, 146, 84, 85}, 151: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 152: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 153: {193, 104, 107, 108, 190}, 154: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 155: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 156: {193, 104, 107, 108, 190}, 157: {193, 104, 107, 108, 190}, 158: {96, 194, 141, 109, 110, 183, 153, 95}, 159: {96, 194, 141, 109, 110, 183, 153, 95}, 160: {64, 195, 234, 111, 81, 212, 154, 159}, 161: {112, 155, 196}, 162: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 163: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 164: {115}, 165: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 166: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 167: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 168: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 169: {120, 34, 205}, 170: {121, 162, 163}, 171: {121, 162, 163}, 172: {123, 164, 21}, 173: {45, 165}, 174: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 175: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 176: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 177: {169, 5}, 178: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 179: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 180: {172}, 181: {226, 101, 173, 146, 84, 85}, 182: {174, 86}, 183: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 184: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 185: {89, 177, 219, 135}, 186: {136, 178, 90, 220}, 187: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 188: {99, 138, 144, 180, 186, 92, 222}, 189: {223, 139, 93, 181}, 190: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 191: {96, 194, 141, 109, 110, 183, 153, 95}, 192: {184, 97, 142}, 193: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 194: {99, 138, 144, 180, 186, 92, 222}, 195: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 196: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 197: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 198: {193, 104, 107, 108, 190}, 199: {98, 134, 230, 137, 105, 143, 179, 150, 185, 218, 91, 221, 191}, 200: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 201: {193, 104, 107, 108, 190}, 202: {96, 194, 141, 109, 110, 183, 153, 95}, 203: {64, 195, 234, 111, 81, 212, 154, 159}, 204: {112, 155, 196}, 205: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 206: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 207: {70, 199}, 208: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 209: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 210: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 211: {203}, 212: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 213: {120, 34, 205}, 214: {9, 35, 76}, 215: {36}, 216: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 217: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 218: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 219: {227, 132, 197, 102, 40, 74, 170, 175, 113, 82, 147, 188, 87, 156}, 220: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 221: {124, 42, 58, 206}, 222: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 223: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 224: {45, 165}, 225: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 226: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 227: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 228: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 229: {50}, 230: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 231: {67, 38, 167, 72, 10, 46, 79, 18, 52, 215, 25, 126}, 232: {4, 8, 13, 20, 22, 33, 39, 168, 44, 47, 53, 60, 68, 73, 202, 80, 208, 216, 118, 119, 122, 127}, 233: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 234: {55}, 235: {129, 133, 6, 11, 12, 140, 14, 17, 145, 19, 148, 151, 24, 26, 157, 160, 37, 166, 41, 43, 171, 48, 49, 176, 51, 54, 182, 56, 59, 187, 189, 62, 192, 66, 69, 198, 71, 200, 201, 75, 204, 78, 207, 210, 83, 214, 88, 217, 94, 224, 225, 100, 228, 103, 231, 232, 106, 235, 114, 116, 117, 125}, 236: {57}})
Equivalent! frozenset({120, 34, 205}) {169, 34, 213}
Equivalent! frozenset({122, 119}) {168, 36}
Equivalent! frozenset({208, 60, 127}) {41, 109, 78}
Equivalent! frozenset({128, 209, 61}) {42, 110, 79}
Equivalent! frozenset({129, 210, 62}) {80, 43, 111}
Equivalent! frozenset({42, 206}) {76, 221}
Equivalent! frozenset({43, 207}) {77, 222}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeee11af28>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: {6}, 5: {7}, 6: {8}, 7: {9}, 8: {10}, 9: {11}, 10: {12}, 11: {13}, 12: {14}, 13: {15}, 14: {16}, 15: {17}, 16: {18}, 17: {19}, 18: {20}, 19: {21}, 20: {22}, 21: {23}, 22: {24}, 23: {25}, 24: {26}, 25: {1}, 26: {27}, 27: {28}, 28: {29}, 29: {30}, 30: {31}, 31: {32}, 32: {2}, 33: {33}, 34: {34}, 35: {121}, 36: {119}, 37: {123}, 38: {124}, 39: {125}, 40: {126}, 41: {208}, 42: {128}, 43: {210}, 44: {130}, 45: {131}, 46: {132}, 47: {133}, 48: {134}, 49: {135}, 50: {136}, 51: {137}, 52: {138}, 53: {139}, 54: {140}, 55: {141}, 56: {142}, 57: {143}, 58: {144}, 59: {145}, 60: {146}, 61: {147}, 62: {148}, 63: {149}, 64: {150}, 65: {151}, 66: {152}, 67: {153}, 68: {154}, 69: {155}, 70: {156}, 71: {157}, 72: {158}, 73: {159}, 74: {160}, 75: {161}, 76: {42}, 77: {43}, 78: {127}, 79: {61}, 80: {129}, 81: {211}, 82: {212}, 83: {213}, 84: {214}, 85: {215}, 86: {216}, 87: {176, 217, 88, 133}, 88: {218}, 89: {219}, 90: {220}, 91: {221}, 92: {222}, 93: {223}, 94: {224}, 95: {225, 145, 187, 100}, 96: {226}, 97: {227}, 98: {228}, 99: {229}, 100: {230}, 101: {231}, 102: {232, 114, 157, 198}, 103: {233}, 104: {234}, 105: {235}, 106: {236}, 107: {58}, 108: {59}, 109: {60}, 110: {209}, 111: {62}, 112: {63}, 113: {64}, 114: {65}, 115: {66}, 116: {67}, 117: {68}, 118: {69}, 119: {70}, 120: {71}, 121: {72}, 122: {73}, 123: {74}, 124: {75}, 125: {76}, 126: {77}, 127: {78}, 128: {79}, 129: {80}, 130: {81}, 131: {82}, 132: {83}, 133: {84}, 134: {85}, 135: {86}, 136: {87}, 137: {88}, 138: {89}, 139: {90}, 140: {91}, 141: {92}, 142: {93}, 143: {94}, 144: {95}, 145: {96}, 146: {97}, 147: {98}, 148: {99}, 149: {100}, 150: {101}, 151: {102}, 152: {103}, 153: {104}, 154: {105}, 155: {106}, 156: {107}, 157: {108}, 158: {109}, 159: {110}, 160: {111}, 161: {112}, 162: {113}, 163: {114}, 164: {115}, 165: {116}, 166: {117}, 167: {118}, 168: {122}, 169: {120}, 170: {162}, 171: {163}, 172: {164}, 173: {165}, 174: {166}, 175: {167}, 176: {168}, 177: {169}, 178: {170}, 179: {171}, 180: {172}, 181: {173}, 182: {174}, 183: {175}, 184: {176}, 185: {177}, 186: {178}, 187: {179}, 188: {180}, 189: {181}, 190: {182}, 191: {183}, 192: {184}, 193: {185}, 194: {186}, 195: {187}, 196: {188}, 197: {189}, 198: {190}, 199: {191}, 200: {192}, 201: {193}, 202: {194}, 203: {195}, 204: {196}, 205: {197}, 206: {198}, 207: {199}, 208: {200}, 209: {201}, 210: {202}, 211: {203}, 212: {204}, 213: {205}, 214: {35}, 215: {36}, 216: {37}, 217: {38}, 218: {39}, 219: {40}, 220: {41}, 221: {206}, 222: {207}, 223: {44}, 224: {45}, 225: {46}, 226: {47}, 227: {48}, 228: {49}, 229: {50}, 230: {51}, 231: {52}, 232: {53}, 233: {54}, 234: {55}, 235: {56}, 236: {57}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 add add
EXACT 14 add add
EXACT 15 store store
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 add add
EXACT 20 load load
EXACT 21 add add
EXACT 22 store store
EXACT 23 inttoptr inttoptr
EXACT 24 store store
EXACT 25 getelementptr getelementptr
EXACT 26 getelementptr getelementptr
EXACT 27 getelementptr getelementptr
EXACT 28 getelementptr getelementptr
EXACT 29 getelementptr getelementptr
EXACT 30 getelementptr getelementptr
EXACT 31 getelementptr getelementptr
EXACT 32 getelementptr getelementptr
EXACT 33 load load
EXACT 34 br br
EXACT 35 phi phi
EXACT 36 load load
EXACT 37 add add
EXACT 38 add add
EXACT 39 store store
EXACT 40 inttoptr inttoptr
EXACT 41 load load
EXACT 42 sext sext
EXACT 43 store store
EXACT 44 add add
EXACT 45 icmp icmp
EXACT 46 zext zext
EXACT 47 store store
EXACT 48 trunc trunc
EXACT 49 and and
EXACT 50 tail tail
EXACT 51 trunc trunc
EXACT 52 and and
EXACT 53 xor xor
EXACT 54 store store
EXACT 55 xor xor
EXACT 56 lshr lshr
EXACT 57 trunc trunc
EXACT 58 and and
EXACT 59 store store
EXACT 60 icmp icmp
EXACT 61 zext zext
EXACT 62 store store
EXACT 63 lshr lshr
EXACT 64 trunc trunc
EXACT 65 store store
EXACT 66 lshr lshr
EXACT 67 xor xor
EXACT 68 add add
EXACT 69 icmp icmp
EXACT 70 zext zext
EXACT 71 store store
EXACT 72 select select
EXACT 73 add add
EXACT 74 store store
EXACT 75 br br
EXACT 76 add add
EXACT 77 store store
EXACT 78 load load
EXACT 79 sext sext
EXACT 80 store store
EXACT 81 shl shl
EXACT 82 add add
EXACT 83 add add
EXACT 84 store store
EXACT 85 inttoptr inttoptr
EXACT 86 load load
MORE 87 POT: 4
EXACT 88 trunc trunc
EXACT 89 and and
EXACT 90 tail tail
EXACT 91 trunc trunc
EXACT 92 and and
EXACT 93 xor xor
EXACT 94 store store
MORE 95 POT: 4
EXACT 96 icmp icmp
EXACT 97 zext zext
EXACT 98 store store
EXACT 99 lshr lshr
EXACT 100 trunc trunc
EXACT 101 store store
MORE 102 POT: 4
EXACT 103 select select
EXACT 104 add add
EXACT 105 store store
EXACT 106 br br
EXACT 107 add add
EXACT 108 store store
EXACT 109 load load
EXACT 110 sext sext
EXACT 111 store store
EXACT 112 shl shl
EXACT 113 add add
EXACT 114 add add
EXACT 115 store store
EXACT 116 inttoptr inttoptr
EXACT 117 load load
EXACT 118 store store
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 load load
EXACT 123 zext zext
EXACT 124 store store
EXACT 125 add add
EXACT 126 add add
EXACT 127 store store
EXACT 128 inttoptr inttoptr
EXACT 129 load load
EXACT 130 add add
EXACT 131 zext zext
EXACT 132 store store
EXACT 133 icmp icmp
EXACT 134 icmp icmp
EXACT 135 or or
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 and and
EXACT 139 tail tail
EXACT 140 trunc trunc
EXACT 141 and and
EXACT 142 xor xor
EXACT 143 store store
EXACT 144 xor xor
EXACT 145 xor xor
EXACT 146 lshr lshr
EXACT 147 trunc trunc
EXACT 148 and and
EXACT 149 store store
EXACT 150 icmp icmp
EXACT 151 zext zext
EXACT 152 store store
EXACT 153 lshr lshr
EXACT 154 trunc trunc
EXACT 155 store store
EXACT 156 lshr lshr
EXACT 157 lshr lshr
EXACT 158 xor xor
EXACT 159 xor xor
EXACT 160 add add
EXACT 161 icmp icmp
EXACT 162 zext zext
EXACT 163 store store
EXACT 164 add add
EXACT 165 store store
EXACT 166 store store
EXACT 167 load load
EXACT 168 load load
EXACT 169 br br
EXACT 170 phi phi
EXACT 171 phi phi
EXACT 172 add add
EXACT 173 add add
EXACT 174 store store
EXACT 175 inttoptr inttoptr
EXACT 176 load load
EXACT 177 add add
EXACT 178 zext zext
EXACT 179 store store
EXACT 180 icmp icmp
EXACT 181 icmp icmp
EXACT 182 or or
EXACT 183 zext zext
EXACT 184 store store
EXACT 185 and and
EXACT 186 tail tail
EXACT 187 trunc trunc
EXACT 188 and and
EXACT 189 xor xor
EXACT 190 store store
EXACT 191 xor xor
EXACT 192 lshr lshr
EXACT 193 trunc trunc
EXACT 194 and and
EXACT 195 store store
EXACT 196 zext zext
EXACT 197 store store
EXACT 198 lshr lshr
EXACT 199 trunc trunc
EXACT 200 store store
EXACT 201 lshr lshr
EXACT 202 xor xor
EXACT 203 add add
EXACT 204 icmp icmp
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 add add
EXACT 208 store store
EXACT 209 store store
EXACT 210 load load
EXACT 211 add add
EXACT 212 store store
EXACT 213 br br
EXACT 214 add add
EXACT 215 add add
EXACT 216 store store
EXACT 217 inttoptr inttoptr
EXACT 218 load load
EXACT 219 zext zext
EXACT 220 store store
EXACT 221 add add
EXACT 222 store store
EXACT 223 load load
EXACT 224 add add
EXACT 225 inttoptr inttoptr
EXACT 226 load load
EXACT 227 store store
EXACT 228 store store
EXACT 229 add add
EXACT 230 store store
EXACT 231 inttoptr inttoptr
EXACT 232 load load
EXACT 233 store store
EXACT 234 add add
EXACT 235 store store
EXACT 236 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 3 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 4 %3 = load i64, i64* %RBP, align 8
- 5 %4 = add i64 %1, 1
- 6 store i64 %4, i64* %PC, align 8
- 7 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 8 %6 = load i64, i64* %5, align 8
- 9 %7 = add i64 %6, -8
- 10 %8 = inttoptr i64 %7 to i64*
- 11 store i64 %3, i64* %8, align 8
- 12 store i64 %7, i64* %5, align 8
- 13 %9 = load i64, i64* %PC, align 8
- 14 store i64 %7, i64* %RBP, align 8
- 15 %10 = add i64 %6, -16
- 16 %11 = add i64 %9, 10
- 17 store i64 %11, i64* %PC, align 8
- 18 %12 = inttoptr i64 %10 to i32*
- 19 store i32 0, i32* %12, align 4
- 20 %13 = load i64, i64* %RBP, align 8
- 21 %14 = add i64 %13, -4
- 22 %15 = load i64, i64* %PC, align 8
- 23 %16 = add i64 %15, 7
- 24 store i64 %16, i64* %PC, align 8
- 25 %17 = inttoptr i64 %14 to i32*
- 26 store i32 0, i32* %17, align 4
- 27 %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 28 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 29 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 30 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 31 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 32 %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 33 %.pre = load i64, i64* %PC, align 8
- 34 \<badref\> = br label %block_4004f2
- 35 %24 = add i64 %83, -8
- 36 %25 = add i64 %111, 3
- 37 store i64 %25, i64* %PC, align 8
- 38 %26 = inttoptr i64 %24 to i32*
- 39 %27 = load i32, i32* %26, align 4
- 40 %28 = zext i32 %27 to i64
- 41 store i64 %28, i64* %RAX, align 8
- 42 %29 = add i64 %111, 4
- 43 store i64 %29, i64* %PC, align 8
- 44 %30 = load i64, i64* %5, align 8
- 45 %31 = add i64 %30, 8
- 46 %32 = inttoptr i64 %30 to i64*
- 47 %33 = load i64, i64* %32, align 8
- 48 store i64 %33, i64* %RBP, align 8
- 49 store i64 %31, i64* %5, align 8
- 50 %34 = add i64 %111, 5
- 51 store i64 %34, i64* %PC, align 8
- 52 %35 = inttoptr i64 %31 to i64*
- 53 %36 = load i64, i64* %35, align 8
- 54 store i64 %36, i64* %PC, align 8
- 55 %37 = add i64 %30, 16
- 56 store i64 %37, i64* %5, align 8
- 57 ret %struct.Memory* %2
- 58 %38 = add i64 %162, 4
- 59 store i64 %38, i64* %PC, align 8
- 60 %39 = load i32, i32* %86, align 4
- 61 %40 = sext i32 %39 to i64
- 62 store i64 %40, i64* %RAX, align 8
- 63 %41 = shl nsw i64 %40, 3
- 64 %42 = add i64 %41, ptrtoint (%mydata_type* @mydata to i64)
- 65 %43 = add i64 %162, 12
- 66 store i64 %43, i64* %PC, align 8
- 67 %44 = inttoptr i64 %42 to i64*
- 68 %45 = load i64, i64* %44, align 8
- 69 store i64 %45, i64* %RAX, align 8
- 70 %46 = add i64 %162, 14
- 71 store i64 %46, i64* %PC, align 8
- 72 %47 = inttoptr i64 %45 to i32*
- 73 %48 = load i32, i32* %47, align 4
- 74 %49 = zext i32 %48 to i64
- 75 store i64 %49, i64* %RCX, align 8
- 76 %50 = add i64 %83, -8
- 77 %51 = add i64 %162, 17
- 78 store i64 %51, i64* %PC, align 8
- 79 %52 = inttoptr i64 %50 to i32*
- 80 %53 = load i32, i32* %52, align 4
- 81 %54 = add i32 %53, %48
- 82 %55 = zext i32 %54 to i64
- 83 store i64 %55, i64* %RCX, align 8
- 84 %56 = icmp ult i32 %54, %48
- 85 %57 = icmp ult i32 %54, %53
- 86 %58 = or i1 %56, %57
- 87 %59 = zext i1 %58 to i8
- 88 store i8 %59, i8* %18, align 1
- 89 %60 = and i32 %54, 255
- 90 %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
- 91 %62 = trunc i32 %61 to i8
- 92 %63 = and i8 %62, 1
- 93 %64 = xor i8 %63, 1
- 94 store i8 %64, i8* %19, align 1
- 95 %65 = xor i32 %53, %48
- 96 %66 = xor i32 %65, %54
- 97 %67 = lshr i32 %66, 4
- 98 %68 = trunc i32 %67 to i8
- 99 %69 = and i8 %68, 1
- 100 store i8 %69, i8* %20, align 1
- 101 %70 = icmp eq i32 %54, 0
- 102 %71 = zext i1 %70 to i8
- 103 store i8 %71, i8* %21, align 1
- 104 %72 = lshr i32 %54, 31
- 105 %73 = trunc i32 %72 to i8
- 106 store i8 %73, i8* %22, align 1
- 107 %74 = lshr i32 %48, 31
- 108 %75 = lshr i32 %53, 31
- 109 %76 = xor i32 %72, %74
- 110 %77 = xor i32 %72, %75
- 111 %78 = add nuw nsw i32 %76, %77
- 112 %79 = icmp eq i32 %78, 2
- 113 %80 = zext i1 %79 to i8
- 114 store i8 %80, i8* %23, align 1
- 115 %81 = add i64 %162, 20
- 116 store i64 %81, i64* %PC, align 8
- 117 store i32 %54, i32* %52, align 4
- 118 %.pre4 = load i64, i64* %PC, align 8
- 119 %.pre5 = load i64, i64* %RBP, align 8
- 120 \<badref\> = br label %block_400527
- 121 %82 = phi i64 [ %143, %block_400527 ], [ %.pre, %block_4004e0 ]
- 122 %83 = load i64, i64* %RBP, align 8
- 123 %84 = add i64 %83, -4
- 124 %85 = add i64 %82, 4
- 125 store i64 %85, i64* %PC, align 8
- 126 %86 = inttoptr i64 %84 to i32*
- 127 %87 = load i32, i32* %86, align 4
- 128 %88 = sext i32 %87 to i64
- 129 store i64 %88, i64* %RAX, align 8
- 130 %89 = add nsw i64 %88, -10
- 131 %90 = icmp ult i32 %87, 10
- 132 %91 = zext i1 %90 to i8
- 133 store i8 %91, i8* %18, align 1
- 134 %92 = trunc i64 %89 to i32
- 135 %93 = and i32 %92, 255
- 136 %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12
- 137 %95 = trunc i32 %94 to i8
- 138 %96 = and i8 %95, 1
- 139 %97 = xor i8 %96, 1
- 140 store i8 %97, i8* %19, align 1
- 141 %98 = xor i64 %89, %88
- 142 %99 = lshr i64 %98, 4
- 143 %100 = trunc i64 %99 to i8
- 144 %101 = and i8 %100, 1
- 145 store i8 %101, i8* %20, align 1
- 146 %102 = icmp eq i64 %89, 0
- 147 %103 = zext i1 %102 to i8
- 148 store i8 %103, i8* %21, align 1
- 149 %104 = lshr i64 %89, 63
- 150 %105 = trunc i64 %104 to i8
- 151 store i8 %105, i8* %22, align 1
- 152 %106 = lshr i64 %88, 63
- 153 %107 = xor i64 %104, %106
- 154 %108 = add nuw nsw i64 %107, %106
- 155 %109 = icmp eq i64 %108, 2
- 156 %110 = zext i1 %109 to i8
- 157 store i8 %110, i8* %23, align 1
- 158 %.v = select i1 %90, i64 14, i64 72
- 159 %111 = add i64 %82, %.v
- 160 store i64 %111, i64* %PC, align 8
- 161 \<badref\> = br i1 %90, label %block_400500, label %block_40053a
- 162 %112 = phi i64 [ %83, %block_400500 ], [ %.pre5, %block_400513 ]
- 163 %113 = phi i64 [ %162, %block_400500 ], [ %.pre4, %block_400513 ]
- 164 %114 = add i64 %112, -4
- 165 %115 = add i64 %113, 8
- 166 store i64 %115, i64* %PC, align 8
- 167 %116 = inttoptr i64 %114 to i32*
- 168 %117 = load i32, i32* %116, align 4
- 169 %118 = add i32 %117, 1
- 170 %119 = zext i32 %118 to i64
- 171 store i64 %119, i64* %RAX, align 8
- 172 %120 = icmp eq i32 %117, -1
- 173 %121 = icmp eq i32 %118, 0
- 174 %122 = or i1 %120, %121
- 175 %123 = zext i1 %122 to i8
- 176 store i8 %123, i8* %18, align 1
- 177 %124 = and i32 %118, 255
- 178 %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #12
- 179 %126 = trunc i32 %125 to i8
- 180 %127 = and i8 %126, 1
- 181 %128 = xor i8 %127, 1
- 182 store i8 %128, i8* %19, align 1
- 183 %129 = xor i32 %118, %117
- 184 %130 = lshr i32 %129, 4
- 185 %131 = trunc i32 %130 to i8
- 186 %132 = and i8 %131, 1
- 187 store i8 %132, i8* %20, align 1
- 188 %133 = zext i1 %121 to i8
- 189 store i8 %133, i8* %21, align 1
- 190 %134 = lshr i32 %118, 31
- 191 %135 = trunc i32 %134 to i8
- 192 store i8 %135, i8* %22, align 1
- 193 %136 = lshr i32 %117, 31
- 194 %137 = xor i32 %134, %136
- 195 %138 = add nuw nsw i32 %137, %134
- 196 %139 = icmp eq i32 %138, 2
- 197 %140 = zext i1 %139 to i8
- 198 store i8 %140, i8* %23, align 1
- 199 %141 = add i64 %113, 14
- 200 store i64 %141, i64* %PC, align 8
- 201 store i32 %118, i32* %116, align 4
- 202 %142 = load i64, i64* %PC, align 8
- 203 %143 = add i64 %142, -67
- 204 store i64 %143, i64* %PC, align 8
- 205 \<badref\> = br label %block_4004f2
- 206 %144 = add i64 %111, 4
- 207 store i64 %144, i64* %PC, align 8
- 208 %145 = load i32, i32* %86, align 4
- 209 %146 = sext i32 %145 to i64
- 210 store i64 %146, i64* %RAX, align 8
- 211 %147 = shl nsw i64 %146, 3
- 212 %148 = add i64 %147, ptrtoint (%mydata_type* @mydata to i64)
- 213 %149 = add i64 %111, 13
- 214 store i64 %149, i64* %PC, align 8
- 215 %150 = inttoptr i64 %148 to i64*
- 216 %151 = load i64, i64* %150, align 8
- 217 store i8 0, i8* %18, align 1
- 218 %152 = trunc i64 %151 to i32
- 219 %153 = and i32 %152, 255
- 220 %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12
- 221 %155 = trunc i32 %154 to i8
- 222 %156 = and i8 %155, 1
- 223 %157 = xor i8 %156, 1
- 224 store i8 %157, i8* %19, align 1
- 225 store i8 0, i8* %20, align 1
- 226 %158 = icmp eq i64 %151, 0
- 227 %159 = zext i1 %158 to i8
- 228 store i8 %159, i8* %21, align 1
- 229 %160 = lshr i64 %151, 63
- 230 %161 = trunc i64 %160 to i8
- 231 store i8 %161, i8* %22, align 1
- 232 store i8 0, i8* %23, align 1
- 233 %.v6 = select i1 %158, i64 39, i64 19
- 234 %162 = add i64 %111, %.v6
- 235 store i64 %162, i64* %PC, align 8
- 236 \<badref\> = br i1 %158, label %block_400527, label %block_400513
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeee11ae18>, {0: {0}, 1: {25}, 2: {32}, 3: {1}, 4: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 5: {177, 3}, 6: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 7: {5}, 8: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 9: {125, 214, 7}, 10: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 11: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 12: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 13: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 14: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 15: {13}, 16: {14}, 17: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 18: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 19: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 20: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 21: {19, 172, 37}, 22: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 23: {21}, 24: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 25: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 26: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 27: {26}, 28: {27}, 29: {28}, 30: {29}, 31: {30}, 32: {31}, 33: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 34: {169, 34, 213}, 35: {125, 214, 7}, 36: {215}, 37: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 38: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 39: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 40: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 41: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 42: {107, 76, 221, 38}, 43: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 44: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 45: {224, 173}, 46: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 47: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 48: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 49: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 50: {229}, 51: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 52: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 53: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 54: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 55: {234}, 56: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 57: {236}, 58: {107, 76, 221, 38}, 59: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 60: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 61: {42, 110, 79}, 62: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 63: {112, 81}, 64: {160, 130, 68, 104, 73, 203, 113, 82}, 65: {114}, 66: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 67: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 68: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 69: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 70: {207, 119}, 71: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 72: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 73: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 74: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 75: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 76: {125, 214, 7}, 77: {126}, 78: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 79: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 80: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 81: {160, 130, 68, 104, 73, 203, 113, 82}, 82: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 83: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 84: {96, 133, 134, 181, 150, 60}, 85: {96, 133, 134, 181, 150, 60}, 86: {182, 135}, 87: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 88: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 89: {89, 49, 138, 185}, 90: {186, 50, 139, 90}, 91: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 92: {194, 141, 188, 148, 52, 58, 92}, 93: {93, 53, 142, 189}, 94: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 95: {191, 67, 202, 144, 145, 55, 158, 159}, 96: {191, 67, 202, 144, 145, 55, 158, 159}, 97: {56, 146, 192}, 98: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 99: {194, 141, 188, 148, 52, 58, 92}, 100: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 101: {96, 133, 134, 181, 150, 60}, 102: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 103: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 104: {198, 201, 153, 156, 157}, 105: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 106: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 107: {198, 201, 153, 156, 157}, 108: {198, 201, 153, 156, 157}, 109: {191, 67, 202, 144, 145, 55, 158, 159}, 110: {191, 67, 202, 144, 145, 55, 158, 159}, 111: {160, 130, 68, 104, 73, 203, 113, 82}, 112: {161, 204, 69}, 113: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 114: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 115: {164}, 116: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 117: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 118: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 119: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 120: {169, 34, 213}, 121: {170, 35, 171}, 122: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 123: {19, 172, 37}, 124: {107, 76, 221, 38}, 125: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 126: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 127: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 128: {42, 110, 79}, 129: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 130: {44}, 131: {45}, 132: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 133: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 134: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 135: {89, 49, 138, 185}, 136: {186, 50, 139, 90}, 137: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 138: {194, 141, 188, 148, 52, 58, 92}, 139: {93, 53, 142, 189}, 140: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 141: {191, 67, 202, 144, 145, 55, 158, 159}, 142: {56, 146, 192}, 143: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 144: {194, 141, 188, 148, 52, 58, 92}, 145: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 146: {96, 133, 134, 181, 150, 60}, 147: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 148: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 149: {66, 99, 63}, 150: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 151: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 152: {66, 99, 63}, 153: {191, 67, 202, 144, 145, 55, 158, 159}, 154: {160, 130, 68, 104, 73, 203, 113, 82}, 155: {161, 204, 69}, 156: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 157: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 158: {72}, 159: {160, 130, 68, 104, 73, 203, 113, 82}, 160: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 161: {106, 75}, 162: {170, 35, 171}, 163: {170, 35, 171}, 164: {19, 172, 37}, 165: {224, 173}, 166: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 167: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 168: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 169: {177, 3}, 170: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 171: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 172: {180}, 173: {96, 133, 134, 181, 150, 60}, 174: {182, 135}, 175: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 176: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 177: {89, 49, 138, 185}, 178: {186, 50, 139, 90}, 179: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 180: {194, 141, 188, 148, 52, 58, 92}, 181: {93, 53, 142, 189}, 182: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 183: {191, 67, 202, 144, 145, 55, 158, 159}, 184: {56, 146, 192}, 185: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 186: {194, 141, 188, 148, 52, 58, 92}, 187: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 188: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 189: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 190: {198, 201, 153, 156, 157}, 191: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 192: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 193: {198, 201, 153, 156, 157}, 194: {191, 67, 202, 144, 145, 55, 158, 159}, 195: {160, 130, 68, 104, 73, 203, 113, 82}, 196: {161, 204, 69}, 197: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 198: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 199: {207, 119}, 200: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 201: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 202: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 203: {211}, 204: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 205: {169, 34, 213}, 206: {107, 76, 221, 38}, 207: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 208: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 209: {42, 110, 79}, 210: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 211: {112, 81}, 212: {160, 130, 68, 104, 73, 203, 113, 82}, 213: {83}, 214: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 215: {128, 225, 217, 231, 8, 40, 175, 16, 116, 85, 23, 121}, 216: {129, 2, 6, 11, 18, 20, 33, 36, 167, 168, 41, 176, 78, 210, 86, 218, 223, 226, 232, 109, 117, 122}, 217: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 218: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 219: {89, 49, 138, 185}, 220: {186, 50, 139, 90}, 221: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 222: {194, 141, 188, 148, 52, 58, 92}, 223: {93, 53, 142, 189}, 224: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 225: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 226: {96, 133, 134, 181, 150, 60}, 227: {97, 162, 131, 196, 70, 136, 205, 46, 219, 178, 151, 183, 123, 61}, 228: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 229: {66, 99, 63}, 230: {64, 193, 100, 199, 140, 187, 48, 51, 147, 88, 57, 154, 91}, 231: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 232: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 233: {103}, 234: {160, 130, 68, 104, 73, 203, 113, 82}, 235: {4, 132, 9, 10, 137, 12, 15, 143, 17, 149, 22, 24, 152, 155, 163, 165, 166, 39, 43, 174, 47, 179, 54, 184, 59, 62, 190, 65, 195, 197, 71, 200, 74, 77, 206, 80, 208, 209, 84, 212, 87, 216, 220, 94, 95, 222, 98, 227, 228, 101, 102, 230, 105, 233, 235, 108, 111, 115, 118, 120, 124, 127}, 236: {106, 75}})
Equivalent! frozenset({169, 34, 213}) {120, 34, 205}
Equivalent! frozenset({76, 221}) {42, 206}
Equivalent! frozenset({77, 222}) {43, 207}
Equivalent! frozenset({41, 109, 78}) {208, 60, 127}
Equivalent! frozenset({42, 110, 79}) {128, 209, 61}
Equivalent! frozenset({80, 43, 111}) {129, 210, 62}
Equivalent! frozenset({168, 36}) {122, 119}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeee11ae18>, {0: {0}, 1: {25}, 2: {32}, 3: {1}, 4: {2}, 5: {3}, 6: {4}, 7: {5}, 8: {6}, 9: {7}, 10: {8}, 11: {9}, 12: {10}, 13: {11}, 14: {12}, 15: {13}, 16: {14}, 17: {15}, 18: {16}, 19: {17}, 20: {18}, 21: {19}, 22: {20}, 23: {21}, 24: {22}, 25: {23}, 26: {24}, 27: {26}, 28: {27}, 29: {28}, 30: {29}, 31: {30}, 32: {31}, 33: {33}, 34: {34}, 35: {214}, 36: {215}, 37: {216}, 38: {217}, 39: {218}, 40: {219}, 41: {220}, 42: {76}, 43: {77}, 44: {223}, 45: {224}, 46: {225}, 47: {226}, 48: {227}, 49: {228}, 50: {229}, 51: {230}, 52: {231}, 53: {232}, 54: {233}, 55: {234}, 56: {235}, 57: {236}, 58: {107}, 59: {108}, 60: {109}, 61: {79}, 62: {111}, 63: {112}, 64: {113}, 65: {114}, 66: {115}, 67: {116}, 68: {117}, 69: {118}, 70: {119}, 71: {120}, 72: {121}, 73: {122}, 74: {123}, 75: {124}, 76: {125}, 77: {126}, 78: {127}, 79: {128}, 80: {129}, 81: {130}, 82: {131}, 83: {132}, 84: {133}, 85: {134}, 86: {135}, 87: {136}, 88: {137}, 89: {138}, 90: {139}, 91: {140}, 92: {141}, 93: {142}, 94: {143}, 95: {144}, 96: {145}, 97: {146}, 98: {147}, 99: {148}, 100: {149}, 101: {150}, 102: {151}, 103: {152}, 104: {153}, 105: {154}, 106: {155}, 107: {156}, 108: {157}, 109: {158}, 110: {159}, 111: {160}, 112: {161}, 113: {162}, 114: {163}, 115: {164}, 116: {165}, 117: {166}, 118: {167}, 119: {36}, 120: {169}, 121: {35}, 122: {168}, 123: {37}, 124: {38}, 125: {39}, 126: {40}, 127: {78}, 128: {42}, 129: {80}, 130: {44}, 131: {45}, 132: {46}, 133: {47}, 134: {48}, 135: {49}, 136: {50}, 137: {51}, 138: {52}, 139: {53}, 140: {54}, 141: {55}, 142: {56}, 143: {57}, 144: {58}, 145: {59}, 146: {60}, 147: {61}, 148: {62}, 149: {63}, 150: {64}, 151: {65}, 152: {66}, 153: {67}, 154: {68}, 155: {69}, 156: {70}, 157: {71}, 158: {72}, 159: {73}, 160: {74}, 161: {75}, 162: {170}, 163: {171}, 164: {172}, 165: {173}, 166: {174}, 167: {175}, 168: {176}, 169: {177}, 170: {178}, 171: {179}, 172: {180}, 173: {181}, 174: {182}, 175: {183}, 176: {184}, 177: {185}, 178: {186}, 179: {187}, 180: {188}, 181: {189}, 182: {190}, 183: {191}, 184: {192}, 185: {193}, 186: {194}, 187: {195}, 188: {196}, 189: {197}, 190: {198}, 191: {199}, 192: {200}, 193: {201}, 194: {202}, 195: {203}, 196: {204}, 197: {205}, 198: {206}, 199: {207}, 200: {208}, 201: {209}, 202: {210}, 203: {211}, 204: {212}, 205: {213}, 206: {221}, 207: {222}, 208: {41}, 209: {110}, 210: {43}, 211: {81}, 212: {82}, 213: {83}, 214: {84}, 215: {85}, 216: {86}, 217: {184, 137, 47, 87}, 218: {88}, 219: {89}, 220: {90}, 221: {91}, 222: {92}, 223: {93}, 224: {94}, 225: {59, 149, 195, 95}, 226: {96}, 227: {97}, 228: {98}, 229: {99}, 230: {100}, 231: {101}, 232: {102, 163, 206, 71}, 233: {103}, 234: {104}, 235: {105}, 236: {106}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 store store
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 store store
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 add add
EXACT 17 store store
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 add add
EXACT 22 load load
EXACT 23 add add
EXACT 24 store store
EXACT 25 inttoptr inttoptr
EXACT 26 store store
EXACT 27 getelementptr getelementptr
EXACT 28 getelementptr getelementptr
EXACT 29 getelementptr getelementptr
EXACT 30 getelementptr getelementptr
EXACT 31 getelementptr getelementptr
EXACT 32 getelementptr getelementptr
EXACT 33 load load
EXACT 34 br br
EXACT 35 add add
EXACT 36 add add
EXACT 37 store store
EXACT 38 inttoptr inttoptr
EXACT 39 load load
EXACT 40 zext zext
EXACT 41 store store
EXACT 42 add add
EXACT 43 store store
EXACT 44 load load
EXACT 45 add add
EXACT 46 inttoptr inttoptr
EXACT 47 load load
EXACT 48 store store
EXACT 49 store store
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 load load
EXACT 54 store store
EXACT 55 add add
EXACT 56 store store
EXACT 57 ret ret
EXACT 58 add add
EXACT 59 store store
EXACT 60 load load
EXACT 61 sext sext
EXACT 62 store store
EXACT 63 shl shl
EXACT 64 add add
EXACT 65 add add
EXACT 66 store store
EXACT 67 inttoptr inttoptr
EXACT 68 load load
EXACT 69 store store
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 zext zext
EXACT 75 store store
EXACT 76 add add
EXACT 77 add add
EXACT 78 store store
EXACT 79 inttoptr inttoptr
EXACT 80 load load
EXACT 81 add add
EXACT 82 zext zext
EXACT 83 store store
EXACT 84 icmp icmp
EXACT 85 icmp icmp
EXACT 86 or or
EXACT 87 zext zext
EXACT 88 store store
EXACT 89 and and
EXACT 90 tail tail
EXACT 91 trunc trunc
EXACT 92 and and
EXACT 93 xor xor
EXACT 94 store store
EXACT 95 xor xor
EXACT 96 xor xor
EXACT 97 lshr lshr
EXACT 98 trunc trunc
EXACT 99 and and
EXACT 100 store store
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 lshr lshr
EXACT 105 trunc trunc
EXACT 106 store store
EXACT 107 lshr lshr
EXACT 108 lshr lshr
EXACT 109 xor xor
EXACT 110 xor xor
EXACT 111 add add
EXACT 112 icmp icmp
EXACT 113 zext zext
EXACT 114 store store
EXACT 115 add add
EXACT 116 store store
EXACT 117 store store
EXACT 118 load load
EXACT 119 load load
EXACT 120 br br
EXACT 121 phi phi
EXACT 122 load load
EXACT 123 add add
EXACT 124 add add
EXACT 125 store store
EXACT 126 inttoptr inttoptr
EXACT 127 load load
EXACT 128 sext sext
EXACT 129 store store
EXACT 130 add add
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 trunc trunc
EXACT 135 and and
EXACT 136 tail tail
EXACT 137 trunc trunc
EXACT 138 and and
EXACT 139 xor xor
EXACT 140 store store
EXACT 141 xor xor
EXACT 142 lshr lshr
EXACT 143 trunc trunc
EXACT 144 and and
EXACT 145 store store
EXACT 146 icmp icmp
EXACT 147 zext zext
EXACT 148 store store
EXACT 149 lshr lshr
EXACT 150 trunc trunc
EXACT 151 store store
EXACT 152 lshr lshr
EXACT 153 xor xor
EXACT 154 add add
EXACT 155 icmp icmp
EXACT 156 zext zext
EXACT 157 store store
EXACT 158 select select
EXACT 159 add add
EXACT 160 store store
EXACT 161 br br
EXACT 162 phi phi
EXACT 163 phi phi
EXACT 164 add add
EXACT 165 add add
EXACT 166 store store
EXACT 167 inttoptr inttoptr
EXACT 168 load load
EXACT 169 add add
EXACT 170 zext zext
EXACT 171 store store
EXACT 172 icmp icmp
EXACT 173 icmp icmp
EXACT 174 or or
EXACT 175 zext zext
EXACT 176 store store
EXACT 177 and and
EXACT 178 tail tail
EXACT 179 trunc trunc
EXACT 180 and and
EXACT 181 xor xor
EXACT 182 store store
EXACT 183 xor xor
EXACT 184 lshr lshr
EXACT 185 trunc trunc
EXACT 186 and and
EXACT 187 store store
EXACT 188 zext zext
EXACT 189 store store
EXACT 190 lshr lshr
EXACT 191 trunc trunc
EXACT 192 store store
EXACT 193 lshr lshr
EXACT 194 xor xor
EXACT 195 add add
EXACT 196 icmp icmp
EXACT 197 zext zext
EXACT 198 store store
EXACT 199 add add
EXACT 200 store store
EXACT 201 store store
EXACT 202 load load
EXACT 203 add add
EXACT 204 store store
EXACT 205 br br
EXACT 206 add add
EXACT 207 store store
EXACT 208 load load
EXACT 209 sext sext
EXACT 210 store store
EXACT 211 shl shl
EXACT 212 add add
EXACT 213 add add
EXACT 214 store store
EXACT 215 inttoptr inttoptr
EXACT 216 load load
MORE 217 POT: 4
EXACT 218 trunc trunc
EXACT 219 and and
EXACT 220 tail tail
EXACT 221 trunc trunc
EXACT 222 and and
EXACT 223 xor xor
EXACT 224 store store
MORE 225 POT: 4
EXACT 226 icmp icmp
EXACT 227 zext zext
EXACT 228 store store
EXACT 229 lshr lshr
EXACT 230 trunc trunc
EXACT 231 store store
MORE 232 POT: 4
EXACT 233 select select
EXACT 234 add add
EXACT 235 store store
EXACT 236 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -16', '%12 = add i64 %10, 10', 'store i64 %12, i64* %3, align 8', '%13 = inttoptr i64 %11 to i32*', 'store i32 0, i32* %13, align 4', '%14 = load i64, i64* %RBP.i, align 8', '%15 = add i64 %14, -4', '%16 = load i64, i64* %3, align 8', '%17 = add i64 %16, 7', 'store i64 %17, i64* %3, align 8', '%18 = inttoptr i64 %15 to i32*', 'store i32 0, i32* %18, align 4', '%RAX.i37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%RCX.i21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%25 = phi i64 [ %149, %block_.L_400527 ], [ %.pre, %entry ]', '%28 = add i64 %25, 4', 'store i64 %28, i64* %3, align 8', '%31 = sext i32 %30 to i64', 'store i64 %31, i64* %RAX.i37, align 8', '%32 = add nsw i64 %31, -10', '%34 = zext i1 %33 to i8', 'store i8 %34, i8* %19, align 1', '%35 = trunc i64 %32 to i32', '%36 = and i32 %35, 255', '%37 = tail call i32 @llvm.ctpop.i32(i32 %36)', '%38 = trunc i32 %37 to i8', '%39 = and i8 %38, 1', '%40 = xor i8 %39, 1', 'store i8 %40, i8* %20, align 1', '%41 = xor i64 %32, %31', '%42 = lshr i64 %41, 4', '%43 = trunc i64 %42 to i8', '%44 = and i8 %43, 1', 'store i8 %44, i8* %21, align 1', '%45 = icmp eq i64 %32, 0', '%46 = zext i1 %45 to i8', 'store i8 %46, i8* %22, align 1', '%47 = lshr i64 %32, 63', '%48 = trunc i64 %47 to i8', 'store i8 %48, i8* %23, align 1', '%49 = lshr i64 %31, 63', '%50 = xor i64 %47, %49', '%51 = add nuw nsw i64 %50, %49', '%52 = icmp eq i64 %51, 2', '%53 = zext i1 %52 to i8', 'store i8 %53, i8* %24, align 1', '%.v = select i1 %33, i64 14, i64 72', '%54 = add i64 %25, %.v', 'store i64 %54, i64* %3, align 8', '%55 = add i64 %54, 4', 'store i64 %55, i64* %3, align 8', 'store i64 %57, i64* %RAX.i37, align 8', '%60 = add i64 %54, 13', 'store i64 %60, i64* %3, align 8', '%63 = trunc i64 %62 to i32', '%64 = and i32 %63, 255', '%65 = tail call i32 @llvm.ctpop.i32(i32 %64)', '%66 = trunc i32 %65 to i8', '%67 = and i8 %66, 1', '%68 = xor i8 %67, 1', 'store i8 %68, i8* %20, align 1', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %22, align 1', '%71 = lshr i64 %62, 63', '%72 = trunc i64 %71 to i8', 'store i8 %72, i8* %23, align 1', '%.v6 = select i1 %69, i64 39, i64 19', '%73 = add i64 %54, %.v6', 'store i64 %73, i64* %3, align 8', '%74 = add i64 %73, 4', 'store i64 %74, i64* %3, align 8', '%75 = load i32, i32* %29, align 4', '%76 = sext i32 %75 to i64', 'store i64 %76, i64* %RAX.i37, align 8', '%77 = shl nsw i64 %76, 3', '%78 = add i64 %77, ptrtoint (%G_0x601040___rax_8__type* @G_0x601040___rax_8_ to i64)', '%79 = add i64 %73, 12', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %78 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %RAX.i37, align 8', '%82 = add i64 %73, 14', 'store i64 %82, i64* %3, align 8', '%83 = inttoptr i64 %81 to i32*', '%84 = load i32, i32* %83, align 4', '%85 = zext i32 %84 to i64', 'store i64 %85, i64* %RCX.i21, align 8', '%86 = add i64 %26, -8', '%87 = add i64 %73, 17', 'store i64 %87, i64* %3, align 8', '%88 = inttoptr i64 %86 to i32*', '%89 = load i32, i32* %88, align 4', '%90 = add i32 %89, %84', '%91 = zext i32 %90 to i64', 'store i64 %91, i64* %RCX.i21, align 8', '%92 = icmp ult i32 %90, %84', '%93 = icmp ult i32 %90, %89', '%94 = or i1 %92, %93', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %19, align 1', '%96 = and i32 %90, 255', '%97 = tail call i32 @llvm.ctpop.i32(i32 %96)', '%98 = trunc i32 %97 to i8', '%99 = and i8 %98, 1', '%100 = xor i8 %99, 1', 'store i8 %100, i8* %20, align 1', '%101 = xor i32 %89, %84', '%102 = xor i32 %101, %90', '%103 = lshr i32 %102, 4', '%104 = trunc i32 %103 to i8', '%105 = and i8 %104, 1', 'store i8 %105, i8* %21, align 1', '%106 = icmp eq i32 %90, 0', '%107 = zext i1 %106 to i8', 'store i8 %107, i8* %22, align 1', '%108 = lshr i32 %90, 31', '%109 = trunc i32 %108 to i8', 'store i8 %109, i8* %23, align 1', '%110 = lshr i32 %84, 31', '%111 = lshr i32 %89, 31', '%112 = xor i32 %108, %110', '%113 = xor i32 %108, %111', '%114 = add nuw nsw i32 %112, %113', '%115 = icmp eq i32 %114, 2', '%116 = zext i1 %115 to i8', 'store i8 %116, i8* %24, align 1', '%117 = add i64 %73, 20', 'store i64 %117, i64* %3, align 8', 'store i32 %90, i32* %88, align 4', '%.pre4 = load i64, i64* %3, align 8', '%.pre5 = load i64, i64* %RBP.i, align 8', '%118 = phi i64 [ %.pre5, %block_400513 ], [ %26, %block_400500 ]', '%119 = phi i64 [ %.pre4, %block_400513 ], [ %73, %block_400500 ]', '%120 = add i64 %118, -4', '%121 = add i64 %119, 8', 'store i64 %121, i64* %3, align 8', '%122 = inttoptr i64 %120 to i32*', '%123 = load i32, i32* %122, align 4', '%124 = add i32 %123, 1', '%125 = zext i32 %124 to i64', 'store i64 %125, i64* %RAX.i37, align 8', '%126 = icmp eq i32 %123, -1', '%127 = icmp eq i32 %124, 0', '%128 = or i1 %126, %127', '%129 = zext i1 %128 to i8', 'store i8 %129, i8* %19, align 1', '%130 = and i32 %124, 255', '%131 = tail call i32 @llvm.ctpop.i32(i32 %130)', '%132 = trunc i32 %131 to i8', '%133 = and i8 %132, 1', '%134 = xor i8 %133, 1', 'store i8 %134, i8* %20, align 1', '%135 = xor i32 %124, %123', '%136 = lshr i32 %135, 4', '%137 = trunc i32 %136 to i8', '%138 = and i8 %137, 1', 'store i8 %138, i8* %21, align 1', '%139 = zext i1 %127 to i8', 'store i8 %139, i8* %22, align 1', '%140 = lshr i32 %124, 31', '%141 = trunc i32 %140 to i8', 'store i8 %141, i8* %23, align 1', '%142 = lshr i32 %123, 31', '%143 = xor i32 %140, %142', '%144 = add nuw nsw i32 %143, %140', '%145 = icmp eq i32 %144, 2', '%146 = zext i1 %145 to i8', 'store i8 %146, i8* %24, align 1', '%147 = add i64 %119, 14', 'store i64 %147, i64* %3, align 8', 'store i32 %124, i32* %122, align 4', '%148 = load i64, i64* %3, align 8', '%149 = add i64 %148, -67', 'store i64 %149, i64* %3, align 8', '%150 = add i64 %26, -8', '%151 = add i64 %54, 3', 'store i64 %151, i64* %3, align 8', '%152 = inttoptr i64 %150 to i32*', '%153 = load i32, i32* %152, align 4', '%154 = zext i32 %153 to i64', 'store i64 %154, i64* %RAX.i37, align 8', '%155 = add i64 %54, 4', 'store i64 %155, i64* %3, align 8', '%156 = load i64, i64* %6, align 8', '%157 = add i64 %156, 8', '%158 = inttoptr i64 %156 to i64*', '%159 = load i64, i64* %158, align 8', 'store i64 %159, i64* %RBP.i, align 8', 'store i64 %157, i64* %6, align 8', '%160 = add i64 %54, 5', 'store i64 %160, i64* %3, align 8', '%161 = inttoptr i64 %157 to i64*', '%162 = load i64, i64* %161, align 8', 'store i64 %162, i64* %3, align 8', '%163 = add i64 %156, 16', 'store i64 %163, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -16
Found line to remove! %12 = add i64 %10, 10
Found line to remove! store i64 %12, i64* %3, align 8
Found line to remove! %13 = inttoptr i64 %11 to i32*
Found line to remove! store i32 0, i32* %13, align 4
Found line to remove! %14 = load i64, i64* %RBP.i, align 8
Found line to remove! %15 = add i64 %14, -4
Found line to remove! %16 = load i64, i64* %3, align 8
Found line to remove! %17 = add i64 %16, 7
Found line to remove! store i64 %17, i64* %3, align 8
Found line to remove! %18 = inttoptr i64 %15 to i32*
Found line to remove! store i32 0, i32* %18, align 4
Found line to remove! %RAX.i37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Keep: %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Keep: %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %RCX.i21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_4004f2
Keep: 
Keep: block_.L_4004f2:                                  ; preds = %block_.L_400527, %entry
Found line to remove! %25 = phi i64 [ %149, %block_.L_400527 ], [ %.pre, %entry ]
Keep: %26 = load i64, i64* %RBP.i, align 8
Keep: %27 = add i64 %26, -4
Found line to remove! %28 = add i64 %25, 4
Found line to remove! store i64 %28, i64* %3, align 8
Keep: %29 = inttoptr i64 %27 to i32*
Keep: %30 = load i32, i32* %29, align 4
Found line to remove! %31 = sext i32 %30 to i64
Found line to remove! store i64 %31, i64* %RAX.i37, align 8
Found line to remove! %32 = add nsw i64 %31, -10
Keep: %33 = icmp ult i32 %30, 10
Found line to remove! %34 = zext i1 %33 to i8
Found line to remove! store i8 %34, i8* %19, align 1
Found line to remove! %35 = trunc i64 %32 to i32
Found line to remove! %36 = and i32 %35, 255
Found line to remove! %37 = tail call i32 @llvm.ctpop.i32(i32 %36)
Found line to remove! %38 = trunc i32 %37 to i8
Found line to remove! %39 = and i8 %38, 1
Found line to remove! %40 = xor i8 %39, 1
Found line to remove! store i8 %40, i8* %20, align 1
Found line to remove! %41 = xor i64 %32, %31
Found line to remove! %42 = lshr i64 %41, 4
Found line to remove! %43 = trunc i64 %42 to i8
Found line to remove! %44 = and i8 %43, 1
Found line to remove! store i8 %44, i8* %21, align 1
Found line to remove! %45 = icmp eq i64 %32, 0
Found line to remove! %46 = zext i1 %45 to i8
Found line to remove! store i8 %46, i8* %22, align 1
Found line to remove! %47 = lshr i64 %32, 63
Found line to remove! %48 = trunc i64 %47 to i8
Found line to remove! store i8 %48, i8* %23, align 1
Found line to remove! %49 = lshr i64 %31, 63
Found line to remove! %50 = xor i64 %47, %49
Found line to remove! %51 = add nuw nsw i64 %50, %49
Found line to remove! %52 = icmp eq i64 %51, 2
Found line to remove! %53 = zext i1 %52 to i8
Found line to remove! store i8 %53, i8* %24, align 1
Found line to remove! %.v = select i1 %33, i64 14, i64 72
Found line to remove! %54 = add i64 %25, %.v
Found line to remove! store i64 %54, i64* %3, align 8
Keep: br i1 %33, label %block_400500, label %block_.L_40053a
Keep: 
Keep: block_400500:                                     ; preds = %block_.L_4004f2
Found line to remove! %55 = add i64 %54, 4
Found line to remove! store i64 %55, i64* %3, align 8
Keep: %56 = load i32, i32* %29, align 4
Keep: %57 = sext i32 %56 to i64
Found line to remove! store i64 %57, i64* %RAX.i37, align 8
Keep: %58 = shl nsw i64 %57, 3
Keep: %59 = add i64 %58, ptrtoint (%G_0x601040___rax_8__type* @G_0x601040___rax_8_ to i64)
Found line to remove! %60 = add i64 %54, 13
Found line to remove! store i64 %60, i64* %3, align 8
Keep: %61 = inttoptr i64 %59 to i64*
Keep: %62 = load i64, i64* %61, align 8
Keep: store i8 0, i8* %19, align 1
Found line to remove! %63 = trunc i64 %62 to i32
Found line to remove! %64 = and i32 %63, 255
Found line to remove! %65 = tail call i32 @llvm.ctpop.i32(i32 %64)
Found line to remove! %66 = trunc i32 %65 to i8
Found line to remove! %67 = and i8 %66, 1
Found line to remove! %68 = xor i8 %67, 1
Found line to remove! store i8 %68, i8* %20, align 1
Keep: store i8 0, i8* %21, align 1
Keep: %69 = icmp eq i64 %62, 0
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %22, align 1
Found line to remove! %71 = lshr i64 %62, 63
Found line to remove! %72 = trunc i64 %71 to i8
Found line to remove! store i8 %72, i8* %23, align 1
Keep: store i8 0, i8* %24, align 1
Found line to remove! %.v6 = select i1 %69, i64 39, i64 19
Found line to remove! %73 = add i64 %54, %.v6
Found line to remove! store i64 %73, i64* %3, align 8
Keep: br i1 %69, label %block_.L_400527, label %block_400513
Keep: 
Keep: block_400513:                                     ; preds = %block_400500
Found line to remove! %74 = add i64 %73, 4
Found line to remove! store i64 %74, i64* %3, align 8
Found line to remove! %75 = load i32, i32* %29, align 4
Found line to remove! %76 = sext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RAX.i37, align 8
Found line to remove! %77 = shl nsw i64 %76, 3
Found line to remove! %78 = add i64 %77, ptrtoint (%G_0x601040___rax_8__type* @G_0x601040___rax_8_ to i64)
Found line to remove! %79 = add i64 %73, 12
Found line to remove! store i64 %79, i64* %3, align 8
Found line to remove! %80 = inttoptr i64 %78 to i64*
Found line to remove! %81 = load i64, i64* %80, align 8
Found line to remove! store i64 %81, i64* %RAX.i37, align 8
Found line to remove! %82 = add i64 %73, 14
Found line to remove! store i64 %82, i64* %3, align 8
Found line to remove! %83 = inttoptr i64 %81 to i32*
Found line to remove! %84 = load i32, i32* %83, align 4
Found line to remove! %85 = zext i32 %84 to i64
Found line to remove! store i64 %85, i64* %RCX.i21, align 8
Found line to remove! %86 = add i64 %26, -8
Found line to remove! %87 = add i64 %73, 17
Found line to remove! store i64 %87, i64* %3, align 8
Found line to remove! %88 = inttoptr i64 %86 to i32*
Found line to remove! %89 = load i32, i32* %88, align 4
Found line to remove! %90 = add i32 %89, %84
Found line to remove! %91 = zext i32 %90 to i64
Found line to remove! store i64 %91, i64* %RCX.i21, align 8
Found line to remove! %92 = icmp ult i32 %90, %84
Found line to remove! %93 = icmp ult i32 %90, %89
Found line to remove! %94 = or i1 %92, %93
Found line to remove! %95 = zext i1 %94 to i8
Found line to remove! store i8 %95, i8* %19, align 1
Found line to remove! %96 = and i32 %90, 255
Found line to remove! %97 = tail call i32 @llvm.ctpop.i32(i32 %96)
Found line to remove! %98 = trunc i32 %97 to i8
Found line to remove! %99 = and i8 %98, 1
Found line to remove! %100 = xor i8 %99, 1
Found line to remove! store i8 %100, i8* %20, align 1
Found line to remove! %101 = xor i32 %89, %84
Found line to remove! %102 = xor i32 %101, %90
Found line to remove! %103 = lshr i32 %102, 4
Found line to remove! %104 = trunc i32 %103 to i8
Found line to remove! %105 = and i8 %104, 1
Found line to remove! store i8 %105, i8* %21, align 1
Found line to remove! %106 = icmp eq i32 %90, 0
Found line to remove! %107 = zext i1 %106 to i8
Found line to remove! store i8 %107, i8* %22, align 1
Found line to remove! %108 = lshr i32 %90, 31
Found line to remove! %109 = trunc i32 %108 to i8
Found line to remove! store i8 %109, i8* %23, align 1
Found line to remove! %110 = lshr i32 %84, 31
Found line to remove! %111 = lshr i32 %89, 31
Found line to remove! %112 = xor i32 %108, %110
Found line to remove! %113 = xor i32 %108, %111
Found line to remove! %114 = add nuw nsw i32 %112, %113
Found line to remove! %115 = icmp eq i32 %114, 2
Found line to remove! %116 = zext i1 %115 to i8
Found line to remove! store i8 %116, i8* %24, align 1
Found line to remove! %117 = add i64 %73, 20
Found line to remove! store i64 %117, i64* %3, align 8
Found line to remove! store i32 %90, i32* %88, align 4
Found line to remove! %.pre4 = load i64, i64* %3, align 8
Found line to remove! %.pre5 = load i64, i64* %RBP.i, align 8
Keep: br label %block_.L_400527
Keep: 
Keep: block_.L_400527:                                  ; preds = %block_400513, %block_400500
Found line to remove! %118 = phi i64 [ %.pre5, %block_400513 ], [ %26, %block_400500 ]
Found line to remove! %119 = phi i64 [ %.pre4, %block_400513 ], [ %73, %block_400500 ]
Found line to remove! %120 = add i64 %118, -4
Found line to remove! %121 = add i64 %119, 8
Found line to remove! store i64 %121, i64* %3, align 8
Found line to remove! %122 = inttoptr i64 %120 to i32*
Found line to remove! %123 = load i32, i32* %122, align 4
Found line to remove! %124 = add i32 %123, 1
Found line to remove! %125 = zext i32 %124 to i64
Found line to remove! store i64 %125, i64* %RAX.i37, align 8
Found line to remove! %126 = icmp eq i32 %123, -1
Found line to remove! %127 = icmp eq i32 %124, 0
Found line to remove! %128 = or i1 %126, %127
Found line to remove! %129 = zext i1 %128 to i8
Found line to remove! store i8 %129, i8* %19, align 1
Found line to remove! %130 = and i32 %124, 255
Found line to remove! %131 = tail call i32 @llvm.ctpop.i32(i32 %130)
Found line to remove! %132 = trunc i32 %131 to i8
Found line to remove! %133 = and i8 %132, 1
Found line to remove! %134 = xor i8 %133, 1
Found line to remove! store i8 %134, i8* %20, align 1
Found line to remove! %135 = xor i32 %124, %123
Found line to remove! %136 = lshr i32 %135, 4
Found line to remove! %137 = trunc i32 %136 to i8
Found line to remove! %138 = and i8 %137, 1
Found line to remove! store i8 %138, i8* %21, align 1
Found line to remove! %139 = zext i1 %127 to i8
Found line to remove! store i8 %139, i8* %22, align 1
Found line to remove! %140 = lshr i32 %124, 31
Found line to remove! %141 = trunc i32 %140 to i8
Found line to remove! store i8 %141, i8* %23, align 1
Found line to remove! %142 = lshr i32 %123, 31
Found line to remove! %143 = xor i32 %140, %142
Found line to remove! %144 = add nuw nsw i32 %143, %140
Found line to remove! %145 = icmp eq i32 %144, 2
Found line to remove! %146 = zext i1 %145 to i8
Found line to remove! store i8 %146, i8* %24, align 1
Found line to remove! %147 = add i64 %119, 14
Found line to remove! store i64 %147, i64* %3, align 8
Found line to remove! store i32 %124, i32* %122, align 4
Found line to remove! %148 = load i64, i64* %3, align 8
Found line to remove! %149 = add i64 %148, -67
Found line to remove! store i64 %149, i64* %3, align 8
Keep: br label %block_.L_4004f2
Keep: 
Keep: block_.L_40053a:                                  ; preds = %block_.L_4004f2
Found line to remove! %150 = add i64 %26, -8
Found line to remove! %151 = add i64 %54, 3
Found line to remove! store i64 %151, i64* %3, align 8
Found line to remove! %152 = inttoptr i64 %150 to i32*
Found line to remove! %153 = load i32, i32* %152, align 4
Found line to remove! %154 = zext i32 %153 to i64
Found line to remove! store i64 %154, i64* %RAX.i37, align 8
Found line to remove! %155 = add i64 %54, 4
Found line to remove! store i64 %155, i64* %3, align 8
Found line to remove! %156 = load i64, i64* %6, align 8
Found line to remove! %157 = add i64 %156, 8
Found line to remove! %158 = inttoptr i64 %156 to i64*
Found line to remove! %159 = load i64, i64* %158, align 8
Found line to remove! store i64 %159, i64* %RBP.i, align 8
Found line to remove! store i64 %157, i64* %6, align 8
Found line to remove! %160 = add i64 %54, 5
Found line to remove! store i64 %160, i64* %3, align 8
Found line to remove! %161 = inttoptr i64 %157 to i64*
Found line to remove! %162 = load i64, i64* %161, align 8
Found line to remove! store i64 %162, i64* %3, align 8
Found line to remove! %163 = add i64 %156, 16
Found line to remove! store i64 %163, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%6 = load i64, i64* %5, align 8', '%7 = add i64 %6, -8', '%8 = inttoptr i64 %7 to i64*', 'store i64 %3, i64* %8, align 8', 'store i64 %7, i64* %5, align 8', '%9 = load i64, i64* %PC, align 8', 'store i64 %7, i64* %RBP, align 8', '%10 = add i64 %6, -16', '%11 = add i64 %9, 10', 'store i64 %11, i64* %PC, align 8', '%12 = inttoptr i64 %10 to i32*', 'store i32 0, i32* %12, align 4', '%13 = load i64, i64* %RBP, align 8', '%14 = add i64 %13, -4', '%15 = load i64, i64* %PC, align 8', '%16 = add i64 %15, 7', 'store i64 %16, i64* %PC, align 8', '%17 = inttoptr i64 %14 to i32*', 'store i32 0, i32* %17, align 4', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%.pre = load i64, i64* %PC, align 8', '%24 = add i64 %83, -8', '%25 = add i64 %111, 3', 'store i64 %25, i64* %PC, align 8', '%26 = inttoptr i64 %24 to i32*', '%27 = load i32, i32* %26, align 4', '%28 = zext i32 %27 to i64', 'store i64 %28, i64* %RAX, align 8', '%29 = add i64 %111, 4', 'store i64 %29, i64* %PC, align 8', '%30 = load i64, i64* %5, align 8', '%31 = add i64 %30, 8', '%32 = inttoptr i64 %30 to i64*', '%33 = load i64, i64* %32, align 8', 'store i64 %33, i64* %RBP, align 8', 'store i64 %31, i64* %5, align 8', '%34 = add i64 %111, 5', 'store i64 %34, i64* %PC, align 8', '%35 = inttoptr i64 %31 to i64*', '%36 = load i64, i64* %35, align 8', 'store i64 %36, i64* %PC, align 8', '%37 = add i64 %30, 16', 'store i64 %37, i64* %5, align 8', 'ret %struct.Memory* %2', '%38 = add i64 %162, 4', 'store i64 %38, i64* %PC, align 8', '%39 = load i32, i32* %86, align 4', '%40 = sext i32 %39 to i64', 'store i64 %40, i64* %RAX, align 8', '%41 = shl nsw i64 %40, 3', '%42 = add i64 %41, ptrtoint (%mydata_type* @mydata to i64)', '%43 = add i64 %162, 12', 'store i64 %43, i64* %PC, align 8', '%44 = inttoptr i64 %42 to i64*', '%45 = load i64, i64* %44, align 8', 'store i64 %45, i64* %RAX, align 8', '%46 = add i64 %162, 14', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %45 to i32*', '%48 = load i32, i32* %47, align 4', '%49 = zext i32 %48 to i64', 'store i64 %49, i64* %RCX, align 8', '%50 = add i64 %83, -8', '%51 = add i64 %162, 17', 'store i64 %51, i64* %PC, align 8', '%52 = inttoptr i64 %50 to i32*', '%53 = load i32, i32* %52, align 4', '%54 = add i32 %53, %48', '%55 = zext i32 %54 to i64', 'store i64 %55, i64* %RCX, align 8', '%56 = icmp ult i32 %54, %48', '%57 = icmp ult i32 %54, %53', '%58 = or i1 %56, %57', '%59 = zext i1 %58 to i8', 'store i8 %59, i8* %18, align 1', '%60 = and i32 %54, 255', '%61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12', '%62 = trunc i32 %61 to i8', '%63 = and i8 %62, 1', '%64 = xor i8 %63, 1', 'store i8 %64, i8* %19, align 1', '%65 = xor i32 %53, %48', '%66 = xor i32 %65, %54', '%67 = lshr i32 %66, 4', '%68 = trunc i32 %67 to i8', '%69 = and i8 %68, 1', 'store i8 %69, i8* %20, align 1', '%70 = icmp eq i32 %54, 0', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %21, align 1', '%72 = lshr i32 %54, 31', '%73 = trunc i32 %72 to i8', 'store i8 %73, i8* %22, align 1', '%74 = lshr i32 %48, 31', '%75 = lshr i32 %53, 31', '%76 = xor i32 %72, %74', '%77 = xor i32 %72, %75', '%78 = add nuw nsw i32 %76, %77', '%79 = icmp eq i32 %78, 2', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %23, align 1', '%81 = add i64 %162, 20', 'store i64 %81, i64* %PC, align 8', 'store i32 %54, i32* %52, align 4', '%.pre4 = load i64, i64* %PC, align 8', '%.pre5 = load i64, i64* %RBP, align 8', '%82 = phi i64 [ %143, %block_400527 ], [ %.pre, %block_4004e0 ]', '%85 = add i64 %82, 4', 'store i64 %85, i64* %PC, align 8', '%88 = sext i32 %87 to i64', 'store i64 %88, i64* %RAX, align 8', '%89 = add nsw i64 %88, -10', '%91 = zext i1 %90 to i8', 'store i8 %91, i8* %18, align 1', '%92 = trunc i64 %89 to i32', '%93 = and i32 %92, 255', '%94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12', '%95 = trunc i32 %94 to i8', '%96 = and i8 %95, 1', '%97 = xor i8 %96, 1', 'store i8 %97, i8* %19, align 1', '%98 = xor i64 %89, %88', '%99 = lshr i64 %98, 4', '%100 = trunc i64 %99 to i8', '%101 = and i8 %100, 1', 'store i8 %101, i8* %20, align 1', '%102 = icmp eq i64 %89, 0', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %21, align 1', '%104 = lshr i64 %89, 63', '%105 = trunc i64 %104 to i8', 'store i8 %105, i8* %22, align 1', '%106 = lshr i64 %88, 63', '%107 = xor i64 %104, %106', '%108 = add nuw nsw i64 %107, %106', '%109 = icmp eq i64 %108, 2', '%110 = zext i1 %109 to i8', 'store i8 %110, i8* %23, align 1', '%.v = select i1 %90, i64 14, i64 72', '%111 = add i64 %82, %.v', 'store i64 %111, i64* %PC, align 8', '%112 = phi i64 [ %83, %block_400500 ], [ %.pre5, %block_400513 ]', '%113 = phi i64 [ %162, %block_400500 ], [ %.pre4, %block_400513 ]', '%114 = add i64 %112, -4', '%115 = add i64 %113, 8', 'store i64 %115, i64* %PC, align 8', '%116 = inttoptr i64 %114 to i32*', '%117 = load i32, i32* %116, align 4', '%118 = add i32 %117, 1', '%119 = zext i32 %118 to i64', 'store i64 %119, i64* %RAX, align 8', '%120 = icmp eq i32 %117, -1', '%121 = icmp eq i32 %118, 0', '%122 = or i1 %120, %121', '%123 = zext i1 %122 to i8', 'store i8 %123, i8* %18, align 1', '%124 = and i32 %118, 255', '%125 = tail call i32 @llvm.ctpop.i32(i32 %124) #12', '%126 = trunc i32 %125 to i8', '%127 = and i8 %126, 1', '%128 = xor i8 %127, 1', 'store i8 %128, i8* %19, align 1', '%129 = xor i32 %118, %117', '%130 = lshr i32 %129, 4', '%131 = trunc i32 %130 to i8', '%132 = and i8 %131, 1', 'store i8 %132, i8* %20, align 1', '%133 = zext i1 %121 to i8', 'store i8 %133, i8* %21, align 1', '%134 = lshr i32 %118, 31', '%135 = trunc i32 %134 to i8', 'store i8 %135, i8* %22, align 1', '%136 = lshr i32 %117, 31', '%137 = xor i32 %134, %136', '%138 = add nuw nsw i32 %137, %134', '%139 = icmp eq i32 %138, 2', '%140 = zext i1 %139 to i8', 'store i8 %140, i8* %23, align 1', '%141 = add i64 %113, 14', 'store i64 %141, i64* %PC, align 8', 'store i32 %118, i32* %116, align 4', '%142 = load i64, i64* %PC, align 8', '%143 = add i64 %142, -67', 'store i64 %143, i64* %PC, align 8', '%144 = add i64 %111, 4', 'store i64 %144, i64* %PC, align 8', 'store i64 %146, i64* %RAX, align 8', '%149 = add i64 %111, 13', 'store i64 %149, i64* %PC, align 8', '%152 = trunc i64 %151 to i32', '%153 = and i32 %152, 255', '%154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12', '%155 = trunc i32 %154 to i8', '%156 = and i8 %155, 1', '%157 = xor i8 %156, 1', 'store i8 %157, i8* %19, align 1', '%159 = zext i1 %158 to i8', 'store i8 %159, i8* %21, align 1', '%160 = lshr i64 %151, 63', '%161 = trunc i64 %160 to i8', 'store i8 %161, i8* %22, align 1', '%.v6 = select i1 %158, i64 39, i64 19', '%162 = add i64 %111, %.v6', 'store i64 %162, i64* %PC, align 8'])
Keep: block_4004e0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %5, align 8
Found line to remove! %7 = add i64 %6, -8
Found line to remove! %8 = inttoptr i64 %7 to i64*
Found line to remove! store i64 %3, i64* %8, align 8
Found line to remove! store i64 %7, i64* %5, align 8
Found line to remove! %9 = load i64, i64* %PC, align 8
Found line to remove! store i64 %7, i64* %RBP, align 8
Found line to remove! %10 = add i64 %6, -16
Found line to remove! %11 = add i64 %9, 10
Found line to remove! store i64 %11, i64* %PC, align 8
Found line to remove! %12 = inttoptr i64 %10 to i32*
Found line to remove! store i32 0, i32* %12, align 4
Found line to remove! %13 = load i64, i64* %RBP, align 8
Found line to remove! %14 = add i64 %13, -4
Found line to remove! %15 = load i64, i64* %PC, align 8
Found line to remove! %16 = add i64 %15, 7
Found line to remove! store i64 %16, i64* %PC, align 8
Found line to remove! %17 = inttoptr i64 %14 to i32*
Found line to remove! store i32 0, i32* %17, align 4
Keep: %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Keep: %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Keep: %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4004f2
Keep: 
Keep: block_40053a:                                     ; preds = %block_4004f2
Found line to remove! %24 = add i64 %83, -8
Found line to remove! %25 = add i64 %111, 3
Found line to remove! store i64 %25, i64* %PC, align 8
Found line to remove! %26 = inttoptr i64 %24 to i32*
Found line to remove! %27 = load i32, i32* %26, align 4
Found line to remove! %28 = zext i32 %27 to i64
Found line to remove! store i64 %28, i64* %RAX, align 8
Found line to remove! %29 = add i64 %111, 4
Found line to remove! store i64 %29, i64* %PC, align 8
Found line to remove! %30 = load i64, i64* %5, align 8
Found line to remove! %31 = add i64 %30, 8
Found line to remove! %32 = inttoptr i64 %30 to i64*
Found line to remove! %33 = load i64, i64* %32, align 8
Found line to remove! store i64 %33, i64* %RBP, align 8
Found line to remove! store i64 %31, i64* %5, align 8
Found line to remove! %34 = add i64 %111, 5
Found line to remove! store i64 %34, i64* %PC, align 8
Found line to remove! %35 = inttoptr i64 %31 to i64*
Found line to remove! %36 = load i64, i64* %35, align 8
Found line to remove! store i64 %36, i64* %PC, align 8
Found line to remove! %37 = add i64 %30, 16
Found line to remove! store i64 %37, i64* %5, align 8
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_400513:                                     ; preds = %block_400500
Found line to remove! %38 = add i64 %162, 4
Found line to remove! store i64 %38, i64* %PC, align 8
Found line to remove! %39 = load i32, i32* %86, align 4
Found line to remove! %40 = sext i32 %39 to i64
Found line to remove! store i64 %40, i64* %RAX, align 8
Found line to remove! %41 = shl nsw i64 %40, 3
Found line to remove! %42 = add i64 %41, ptrtoint (%mydata_type* @mydata to i64)
Found line to remove! %43 = add i64 %162, 12
Found line to remove! store i64 %43, i64* %PC, align 8
Found line to remove! %44 = inttoptr i64 %42 to i64*
Found line to remove! %45 = load i64, i64* %44, align 8
Found line to remove! store i64 %45, i64* %RAX, align 8
Found line to remove! %46 = add i64 %162, 14
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = inttoptr i64 %45 to i32*
Found line to remove! %48 = load i32, i32* %47, align 4
Found line to remove! %49 = zext i32 %48 to i64
Found line to remove! store i64 %49, i64* %RCX, align 8
Found line to remove! %50 = add i64 %83, -8
Found line to remove! %51 = add i64 %162, 17
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = inttoptr i64 %50 to i32*
Found line to remove! %53 = load i32, i32* %52, align 4
Found line to remove! %54 = add i32 %53, %48
Found line to remove! %55 = zext i32 %54 to i64
Found line to remove! store i64 %55, i64* %RCX, align 8
Found line to remove! %56 = icmp ult i32 %54, %48
Found line to remove! %57 = icmp ult i32 %54, %53
Found line to remove! %58 = or i1 %56, %57
Found line to remove! %59 = zext i1 %58 to i8
Found line to remove! store i8 %59, i8* %18, align 1
Found line to remove! %60 = and i32 %54, 255
Found line to remove! %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
Found line to remove! %62 = trunc i32 %61 to i8
Found line to remove! %63 = and i8 %62, 1
Found line to remove! %64 = xor i8 %63, 1
Found line to remove! store i8 %64, i8* %19, align 1
Found line to remove! %65 = xor i32 %53, %48
Found line to remove! %66 = xor i32 %65, %54
Found line to remove! %67 = lshr i32 %66, 4
Found line to remove! %68 = trunc i32 %67 to i8
Found line to remove! %69 = and i8 %68, 1
Found line to remove! store i8 %69, i8* %20, align 1
Found line to remove! %70 = icmp eq i32 %54, 0
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %21, align 1
Found line to remove! %72 = lshr i32 %54, 31
Found line to remove! %73 = trunc i32 %72 to i8
Found line to remove! store i8 %73, i8* %22, align 1
Found line to remove! %74 = lshr i32 %48, 31
Found line to remove! %75 = lshr i32 %53, 31
Found line to remove! %76 = xor i32 %72, %74
Found line to remove! %77 = xor i32 %72, %75
Found line to remove! %78 = add nuw nsw i32 %76, %77
Found line to remove! %79 = icmp eq i32 %78, 2
Found line to remove! %80 = zext i1 %79 to i8
Found line to remove! store i8 %80, i8* %23, align 1
Found line to remove! %81 = add i64 %162, 20
Found line to remove! store i64 %81, i64* %PC, align 8
Found line to remove! store i32 %54, i32* %52, align 4
Found line to remove! %.pre4 = load i64, i64* %PC, align 8
Found line to remove! %.pre5 = load i64, i64* %RBP, align 8
Keep: br label %block_400527
Keep: 
Keep: block_4004f2:                                     ; preds = %block_400527, %block_4004e0
Found line to remove! %82 = phi i64 [ %143, %block_400527 ], [ %.pre, %block_4004e0 ]
Keep: %83 = load i64, i64* %RBP, align 8
Keep: %84 = add i64 %83, -4
Found line to remove! %85 = add i64 %82, 4
Found line to remove! store i64 %85, i64* %PC, align 8
Keep: %86 = inttoptr i64 %84 to i32*
Keep: %87 = load i32, i32* %86, align 4
Found line to remove! %88 = sext i32 %87 to i64
Found line to remove! store i64 %88, i64* %RAX, align 8
Found line to remove! %89 = add nsw i64 %88, -10
Keep: %90 = icmp ult i32 %87, 10
Found line to remove! %91 = zext i1 %90 to i8
Found line to remove! store i8 %91, i8* %18, align 1
Found line to remove! %92 = trunc i64 %89 to i32
Found line to remove! %93 = and i32 %92, 255
Found line to remove! %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12
Found line to remove! %95 = trunc i32 %94 to i8
Found line to remove! %96 = and i8 %95, 1
Found line to remove! %97 = xor i8 %96, 1
Found line to remove! store i8 %97, i8* %19, align 1
Found line to remove! %98 = xor i64 %89, %88
Found line to remove! %99 = lshr i64 %98, 4
Found line to remove! %100 = trunc i64 %99 to i8
Found line to remove! %101 = and i8 %100, 1
Found line to remove! store i8 %101, i8* %20, align 1Writing '/tmp/tmpnfyzjigs.dot'...
Writing '/tmp/tmpnfyzjigs.dot':Done

Reading LLVM: /tmp/tmpyv3jytpb-query.ll
Extracting function [printdata] from /tmp/tmpyv3jytpb-query.ll
Dot file generated!
Writing '/tmp/tmpr4esz0s5.dot'...
Writing '/tmp/tmpr4esz0s5.dot':Done

Reading LLVM: /tmp/tmprm4fho6n-target.ll
Extracting function [printdata] from /tmp/tmprm4fho6n-target.ll
Dot file generated!

Found line to remove! %102 = icmp eq i64 %89, 0
Found line to remove! %103 = zext i1 %102 to i8
Found line to remove! store i8 %103, i8* %21, align 1
Found line to remove! %104 = lshr i64 %89, 63
Found line to remove! %105 = trunc i64 %104 to i8
Found line to remove! store i8 %105, i8* %22, align 1
Found line to remove! %106 = lshr i64 %88, 63
Found line to remove! %107 = xor i64 %104, %106
Found line to remove! %108 = add nuw nsw i64 %107, %106
Found line to remove! %109 = icmp eq i64 %108, 2
Found line to remove! %110 = zext i1 %109 to i8
Found line to remove! store i8 %110, i8* %23, align 1
Found line to remove! %.v = select i1 %90, i64 14, i64 72
Found line to remove! %111 = add i64 %82, %.v
Found line to remove! store i64 %111, i64* %PC, align 8
Keep: br i1 %90, label %block_400500, label %block_40053a
Keep: 
Keep: block_400527:                                     ; preds = %block_400500, %block_400513
Found line to remove! %112 = phi i64 [ %83, %block_400500 ], [ %.pre5, %block_400513 ]
Found line to remove! %113 = phi i64 [ %162, %block_400500 ], [ %.pre4, %block_400513 ]
Found line to remove! %114 = add i64 %112, -4
Found line to remove! %115 = add i64 %113, 8
Found line to remove! store i64 %115, i64* %PC, align 8
Found line to remove! %116 = inttoptr i64 %114 to i32*
Found line to remove! %117 = load i32, i32* %116, align 4
Found line to remove! %118 = add i32 %117, 1
Found line to remove! %119 = zext i32 %118 to i64
Found line to remove! store i64 %119, i64* %RAX, align 8
Found line to remove! %120 = icmp eq i32 %117, -1
Found line to remove! %121 = icmp eq i32 %118, 0
Found line to remove! %122 = or i1 %120, %121
Found line to remove! %123 = zext i1 %122 to i8
Found line to remove! store i8 %123, i8* %18, align 1
Found line to remove! %124 = and i32 %118, 255
Found line to remove! %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #12
Found line to remove! %126 = trunc i32 %125 to i8
Found line to remove! %127 = and i8 %126, 1
Found line to remove! %128 = xor i8 %127, 1
Found line to remove! store i8 %128, i8* %19, align 1
Found line to remove! %129 = xor i32 %118, %117
Found line to remove! %130 = lshr i32 %129, 4
Found line to remove! %131 = trunc i32 %130 to i8
Found line to remove! %132 = and i8 %131, 1
Found line to remove! store i8 %132, i8* %20, align 1
Found line to remove! %133 = zext i1 %121 to i8
Found line to remove! store i8 %133, i8* %21, align 1
Found line to remove! %134 = lshr i32 %118, 31
Found line to remove! %135 = trunc i32 %134 to i8
Found line to remove! store i8 %135, i8* %22, align 1
Found line to remove! %136 = lshr i32 %117, 31
Found line to remove! %137 = xor i32 %134, %136
Found line to remove! %138 = add nuw nsw i32 %137, %134
Found line to remove! %139 = icmp eq i32 %138, 2
Found line to remove! %140 = zext i1 %139 to i8
Found line to remove! store i8 %140, i8* %23, align 1
Found line to remove! %141 = add i64 %113, 14
Found line to remove! store i64 %141, i64* %PC, align 8
Found line to remove! store i32 %118, i32* %116, align 4
Found line to remove! %142 = load i64, i64* %PC, align 8
Found line to remove! %143 = add i64 %142, -67
Found line to remove! store i64 %143, i64* %PC, align 8
Keep: br label %block_4004f2
Keep: 
Keep: block_400500:                                     ; preds = %block_4004f2
Found line to remove! %144 = add i64 %111, 4
Found line to remove! store i64 %144, i64* %PC, align 8
Keep: %145 = load i32, i32* %86, align 4
Keep: %146 = sext i32 %145 to i64
Found line to remove! store i64 %146, i64* %RAX, align 8
Keep: %147 = shl nsw i64 %146, 3
Keep: %148 = add i64 %147, ptrtoint (%mydata_type* @mydata to i64)
Found line to remove! %149 = add i64 %111, 13
Found line to remove! store i64 %149, i64* %PC, align 8
Keep: %150 = inttoptr i64 %148 to i64*
Keep: %151 = load i64, i64* %150, align 8
Keep: store i8 0, i8* %18, align 1
Found line to remove! %152 = trunc i64 %151 to i32
Found line to remove! %153 = and i32 %152, 255
Found line to remove! %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #12
Found line to remove! %155 = trunc i32 %154 to i8
Found line to remove! %156 = and i8 %155, 1
Found line to remove! %157 = xor i8 %156, 1
Found line to remove! store i8 %157, i8* %19, align 1
Keep: store i8 0, i8* %20, align 1
Keep: %158 = icmp eq i64 %151, 0
Found line to remove! %159 = zext i1 %158 to i8
Found line to remove! store i8 %159, i8* %21, align 1
Found line to remove! %160 = lshr i64 %151, 63
Found line to remove! %161 = trunc i64 %160 to i8
Found line to remove! store i8 %161, i8* %22, align 1
Keep: store i8 0, i8* %23, align 1
Found line to remove! %.v6 = select i1 %158, i64 39, i64 19
Found line to remove! %162 = add i64 %111, %.v6
Found line to remove! store i64 %162, i64* %PC, align 8
Keep: br i1 %158, label %block_400527, label %block_400513
================ Starting round 2
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %var_2_261 = load i64, i64* %RBP.i, align 8
- 5 %var_2_272 = add i64 %var_2_261, -4
- 6 %var_2_293 = inttoptr i64 %var_2_272 to i32*
- 7 %var_2_304 = load i32, i32* %var_2_293, align 4
- 8 %var_2_335 = icmp ult i32 %var_2_304, 10
- 9 \<badref\> = br i1 %var_2_335, label %block_400500.preheader, label %block_.L_40053a
- 10 \<badref\> = br label %block_400500
- 11 store i8 0, i8* %var_2_19, align 1
- 12 store i8 0, i8* %var_2_21, align 1
- 13 store i8 0, i8* %var_2_24, align 1
- 14 %var_2_30 = load i32, i32* %var_2_293, align 4
- 15 %var_2_33 = icmp ult i32 %var_2_30, 10
- 16 \<badref\> = br i1 %var_2_33, label %block_400500, label %block_.L_40053a.loopexit
- 17 \<badref\> = br label %block_.L_40053a
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeed47de18>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {16, 4, 7}, 5: {5}, 6: {6}, 7: {16, 4, 7}, 8: {8, 17}, 9: {9, 18}, 10: {10, 11}, 11: {13, 14, 15}, 12: {13, 14, 15}, 13: {13, 14, 15}, 14: {16, 4, 7}, 15: {8, 17}, 16: {9, 18}, 17: {10, 11}, 18: {12}})
Equivalent! frozenset({16, 7}) {14, 7}
Equivalent! frozenset({8, 17}) {8, 15}
Equivalent! frozenset({9, 18}) {16, 9}
Equivalent! frozenset({10, 11}) {17, 10}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeed47de18>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {18}, 10: {11}, 11: {13}, 12: {14}, 13: {15}, 14: {16}, 15: {17}, 16: {9}, 17: {10}, 18: {12}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 inttoptr inttoptr
EXACT 7 load load
EXACT 8 icmp icmp
EXACT 9 br br
EXACT 10 br br
EXACT 11 store store
EXACT 12 store store
EXACT 13 store store
EXACT 14 load load
EXACT 15 icmp icmp
EXACT 16 br br
EXACT 17 br br
EXACT 18 ret ret
================ Starting round 3
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %var_2_831 = load i64, i64* %RBP, align 8
- 5 %var_2_842 = add i64 %var_2_831, -4
- 6 %var_2_863 = inttoptr i64 %var_2_842 to i32*
- 7 %var_2_874 = load i32, i32* %var_2_863, align 4
- 8 %var_2_905 = icmp ult i32 %var_2_874, 10
- 9 \<badref\> = br i1 %var_2_905, label %block_400500.preheader, label %block_40053a
- 10 \<badref\> = br label %block_400500
- 11 \<badref\> = br label %block_40053a
- 12 ret %struct.Memory* %2
- 13 store i8 0, i8* %var_2_18, align 1
- 14 store i8 0, i8* %var_2_20, align 1
- 15 store i8 0, i8* %var_2_23, align 1
- 16 %var_2_87 = load i32, i32* %var_2_863, align 4
- 17 %var_2_90 = icmp ult i32 %var_2_87, 10
- 18 \<badref\> = br i1 %var_2_90, label %block_400500, label %block_40053a.loopexit
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeedbb7ea0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4, 14, 7}, 5: {5}, 6: {6}, 7: {4, 14, 7}, 8: {8, 15}, 9: {16, 9}, 10: {17, 10}, 11: {17, 10}, 12: {18}, 13: {11, 12, 13}, 14: {11, 12, 13}, 15: {11, 12, 13}, 16: {4, 14, 7}, 17: {8, 15}, 18: {16, 9}})
Equivalent! frozenset({14, 7}) {16, 7}
Equivalent! frozenset({8, 15}) {8, 17}
Equivalent! frozenset({16, 9}) {9, 18}
Equivalent! frozenset({17, 10}) {10, 11}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7feeedbb7ea0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {16}, 10: {17}, 11: {10}, 12: {18}, 13: {11}, 14: {12}, 15: {13}, 16: {14}, 17: {15}, 18: {9}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 inttoptr inttoptr
EXACT 7 load load
EXACT 8 icmp icmp
EXACT 9 br br
EXACT 10 br br
EXACT 11 br br
EXACT 12 ret ret
EXACT 13 store store
EXACT 14 store store
EXACT 15 store store
EXACT 16 load load
EXACT 17 icmp icmp
EXACT 18 br br
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_19, align 1', 'store i8 0, i8* %var_2_21, align 1', 'store i8 0, i8* %var_2_24, align 1', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_261 = load i64, i64* %RBP.i, align 8
Keep: %var_2_272 = add i64 %var_2_261, -4
Keep: %var_2_293 = inttoptr i64 %var_2_272 to i32*
Keep: %var_2_304 = load i32, i32* %var_2_293, align 4
Keep: %var_2_335 = icmp ult i32 %var_2_304, 10
Keep: br i1 %var_2_335, label %block_400500.preheader, label %block_.L_40053a
Keep: 
Keep: block_400500.preheader:                           ; preds = %entry
Keep: br label %block_400500
Keep: 
Keep: block_400500:                                     ; preds = %block_400500.preheader, %block_400500
Found line to remove! store i8 0, i8* %var_2_19, align 1
Found line to remove! store i8 0, i8* %var_2_21, align 1
Found line to remove! store i8 0, i8* %var_2_24, align 1
Keep: %var_2_30 = load i32, i32* %var_2_293, align 4
Keep: %var_2_33 = icmp ult i32 %var_2_30, 10
Keep: br i1 %var_2_33, label %block_400500, label %block_.L_40053a.loopexit
Keep: 
Keep: block_.L_40053a.loopexit:                         ; preds = %block_400500
Keep: br label %block_.L_40053a
Keep: 
Keep: block_.L_40053a:                                  ; preds = %block_.L_40053a.loopexit, %entry
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'ret %struct.Memory* %2', 'store i8 0, i8* %var_2_18, align 1', 'store i8 0, i8* %var_2_20, align 1', 'store i8 0, i8* %var_2_23, align 1'])
Keep: block_4004e0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_831 = load i64, i64* %RBP, align 8
Keep: %var_2_842 = add i64 %var_2_831, -4
Keep: %var_2_863 = inttoptr i64 %var_2_842 to i32*
Keep: %var_2_874 = load i32, i32* %var_2_863, align 4
Keep: %var_2_905 = icmp ult i32 %var_2_874, 10
Keep: br i1 %var_2_905, label %block_400500.preheader, label %block_40053a
Keep: 
Keep: block_400500.preheader:                           ; preds = %block_4004e0
Keep: br label %block_400500
Keep: 
Keep: block_40053a.loopexit:                            ; preds = %block_400500
Keep: br label %block_40053a
Keep: 
Keep: block_40053a:                                     ; preds = %block_40053a.loopexit, %block_4004e0
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_400500:                                     ; preds = %block_400500.preheader, %block_400500
Found line to remove! store i8 0, i8* %var_2_18, align 1
Found line to remove! store i8 0, i8* %var_2_20, align 1
Found line to remove! store i8 0, i8* %var_2_23, align 1
Keep: %var_2_87 = load i32, i32* %var_2_863, align 4
Keep: %var_2_90 = icmp ult i32 %var_2_87, 10
Keep: br i1 %var_2_90, label %block_400500, label %block_40053a.loopexit
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_17/printdata/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_17/binary/test.mcsema.calls_renamed.ll printdata
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
