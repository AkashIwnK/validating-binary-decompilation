Writing '/tmp/tmp3fi0skdh.dot'...
Writing '/tmp/tmp3fi0skdh.dot':Done

Reading LLVM: /tmp/tmp_bezjpqj-query.ll
Extracting function [main] from /tmp/tmp_bezjpqj-query.ll
Dot file generated!
Writing '/tmp/tmp4qhha9lw.dot'...
Writing '/tmp/tmp4qhha9lw.dot':Done

Reading LLVM: /tmp/tmpw75eqehx-target.ll
Extracting function [main] from /tmp/tmpw75eqehx-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = add i64 %7, -12
- 49 %41 = add i64 %10, 14
- 50 store i64 %41, i64* %3, align 8
- 51 %42 = inttoptr i64 %40 to i32*
- 52 store i32 0, i32* %42, align 4
- 53 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 54 %EDI.i = bitcast %union.anon* %43 to i32*
- 55 %44 = load i64, i64* %RBP.i, align 8
- 56 %45 = add i64 %44, -8
- 57 %46 = load i32, i32* %EDI.i, align 4
- 58 %47 = load i64, i64* %3, align 8
- 59 %48 = add i64 %47, 3
- 60 store i64 %48, i64* %3, align 8
- 61 %49 = inttoptr i64 %45 to i32*
- 62 store i32 %46, i32* %49, align 4
- 63 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 64 %50 = load i64, i64* %RBP.i, align 8
- 65 %51 = add i64 %50, -16
- 66 %52 = load i64, i64* %RSI.i, align 8
- 67 %53 = load i64, i64* %3, align 8
- 68 %54 = add i64 %53, 4
- 69 store i64 %54, i64* %3, align 8
- 70 %55 = inttoptr i64 %51 to i64*
- 71 store i64 %52, i64* %55, align 8
- 72 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 73 %AL.i = bitcast %union.anon* %56 to i8*
- 74 %57 = load i64, i64* %3, align 8
- 75 store i8 0, i8* %AL.i, align 1
- 76 %58 = add i64 %57, 26
- 77 %59 = add i64 %57, 7
- 78 %60 = load i64, i64* %6, align 8
- 79 %61 = add i64 %60, -8
- 80 %62 = inttoptr i64 %61 to i64*
- 81 store i64 %59, i64* %62, align 8
- 82 store i64 %61, i64* %6, align 8
- 83 store i64 %58, i64* %3, align 8
- 84 %call2_4004c8 = tail call %struct.Memory* @sub_4004e0.printdata(%struct.State* %0, i64 %58, %struct.Memory* %2)
- 85 %63 = load i64, i64* %6, align 8
- 86 %64 = load i64, i64* %3, align 8
- 87 %65 = add i64 %63, 16
- 88 store i64 %65, i64* %6, align 8
- 89 %66 = icmp ugt i64 %63, -17
- 90 %67 = zext i1 %66 to i8
- 91 store i8 %67, i8* %14, align 1
- 92 %68 = trunc i64 %65 to i32
- 93 %69 = and i32 %68, 255
- 94 %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
- 95 %71 = trunc i32 %70 to i8
- 96 %72 = and i8 %71, 1
- 97 %73 = xor i8 %72, 1
- 98 store i8 %73, i8* %21, align 1
- 99 %74 = xor i64 %63, 16
- 100 %75 = xor i64 %74, %65
- 101 %76 = lshr i64 %75, 4
- 102 %77 = trunc i64 %76 to i8
- 103 %78 = and i8 %77, 1
- 104 store i8 %78, i8* %27, align 1
- 105 %79 = icmp eq i64 %65, 0
- 106 %80 = zext i1 %79 to i8
- 107 store i8 %80, i8* %30, align 1
- 108 %81 = lshr i64 %65, 63
- 109 %82 = trunc i64 %81 to i8
- 110 store i8 %82, i8* %33, align 1
- 111 %83 = lshr i64 %63, 63
- 112 %84 = xor i64 %81, %83
- 113 %85 = add nuw nsw i64 %84, %81
- 114 %86 = icmp eq i64 %85, 2
- 115 %87 = zext i1 %86 to i8
- 116 store i8 %87, i8* %39, align 1
- 117 %88 = add i64 %64, 5
- 118 store i64 %88, i64* %3, align 8
- 119 %89 = add i64 %63, 24
- 120 %90 = inttoptr i64 %65 to i64*
- 121 %91 = load i64, i64* %90, align 8
- 122 store i64 %91, i64* %RBP.i, align 8
- 123 store i64 %89, i64* %6, align 8
- 124 %92 = add i64 %64, 6
- 125 store i64 %92, i64* %3, align 8
- 126 %93 = inttoptr i64 %89 to i64*
- 127 %94 = load i64, i64* %93, align 8
- 128 store i64 %94, i64* %3, align 8
- 129 %95 = add i64 %63, 32
- 130 store i64 %95, i64* %6, align 8
- 131 \<badref\> = ret %struct.Memory* %call2_4004c8
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd84b7c7268>, {0: {0}, 1: {7}, 2: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 3: {9}, 4: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 5: {6}, 6: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 7: {59, 12, 79}, 8: {64, 72, 13, 80, 56, 120, 126}, 9: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 10: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 11: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 12: {17}, 13: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 14: {19}, 15: {39, 106, 50, 115, 20, 90}, 16: {21}, 17: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 18: {34, 102, 43, 109, 23, 26, 92, 95}, 19: {24, 93}, 20: {25, 84, 94}, 21: {34, 102, 43, 109, 23, 26, 92, 95}, 22: {96, 35, 27, 103}, 23: {97, 28}, 24: {29}, 25: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 26: {99, 31}, 27: {32, 100, 112, 47}, 28: {33, 101}, 29: {34, 102, 43, 109, 23, 26, 92, 95}, 30: {96, 35, 27, 103}, 31: {36}, 32: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 33: {105, 38}, 34: {39, 106, 50, 115, 20, 90}, 35: {40}, 36: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 37: {42, 108, 46, 111}, 38: {34, 102, 43, 109, 23, 26, 92, 95}, 39: {44}, 40: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 41: {42, 108, 46, 111}, 42: {32, 100, 112, 47}, 43: {48, 113}, 44: {49, 114}, 45: {39, 106, 50, 115, 20, 90}, 46: {51}, 47: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 48: {53}, 49: {54}, 50: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 51: {64, 72, 13, 80, 56, 120, 126}, 52: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 53: {3}, 54: {2, 4}, 55: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 56: {59, 12, 79}, 57: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 58: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 59: {62}, 60: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 61: {64, 72, 13, 80, 56, 120, 126}, 62: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 63: {5}, 64: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 65: {67}, 66: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 67: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 68: {70}, 69: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 70: {64, 72, 13, 80, 56, 120, 126}, 71: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 72: {1}, 73: {2, 4}, 74: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 75: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 76: {76}, 77: {77}, 78: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 79: {59, 12, 79}, 80: {64, 72, 13, 80, 56, 120, 126}, 81: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 82: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 83: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 84: {25, 84, 94}, 85: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 86: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 87: {87}, 88: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 89: {89}, 90: {39, 106, 50, 115, 20, 90}, 91: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 92: {34, 102, 43, 109, 23, 26, 92, 95}, 93: {24, 93}, 94: {25, 84, 94}, 95: {34, 102, 43, 109, 23, 26, 92, 95}, 96: {96, 35, 27, 103}, 97: {97, 28}, 98: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 99: {99, 31}, 100: {32, 100, 112, 47}, 101: {33, 101}, 102: {34, 102, 43, 109, 23, 26, 92, 95}, 103: {96, 35, 27, 103}, 104: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 105: {105, 38}, 106: {39, 106, 50, 115, 20, 90}, 107: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 108: {42, 108, 46, 111}, 109: {34, 102, 43, 109, 23, 26, 92, 95}, 110: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 111: {42, 108, 46, 111}, 112: {32, 100, 112, 47}, 113: {48, 113}, 114: {49, 114}, 115: {39, 106, 50, 115, 20, 90}, 116: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 117: {117}, 118: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 119: {119}, 120: {64, 72, 13, 80, 56, 120, 126}, 121: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 122: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 123: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 124: {124}, 125: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 126: {64, 72, 13, 80, 56, 120, 126}, 127: {66, 68, 69, 8, 74, 11, 78, 15, 85, 86, 121, 58, 60, 61, 127}, 128: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 129: {129}, 130: {128, 130, 10, 14, 16, 18, 22, 30, 37, 41, 45, 52, 55, 57, 63, 65, 71, 73, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 131: {131}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd84b7c7268>, {0: {0}, 1: {7}, 2: {8}, 3: {9}, 4: {10}, 5: {6}, 6: {11}, 7: {12}, 8: {13}, 9: {14}, 10: {15}, 11: {16}, 12: {17}, 13: {18}, 14: {19}, 15: {20}, 16: {21}, 17: {22}, 18: {23}, 19: {24}, 20: {25}, 21: {26}, 22: {27}, 23: {28}, 24: {29}, 25: {30}, 26: {31}, 27: {32}, 28: {33}, 29: {34}, 30: {35}, 31: {36}, 32: {37}, 33: {38}, 34: {39}, 35: {40}, 36: {41}, 37: {42}, 38: {43}, 39: {44}, 40: {45}, 41: {46}, 42: {47}, 43: {48}, 44: {49}, 45: {50}, 46: {51}, 47: {52}, 48: {53}, 49: {54}, 50: {55}, 51: {56}, 52: {57}, 53: {3}, 54: {4}, 55: {58}, 56: {59}, 57: {60}, 58: {61}, 59: {62}, 60: {63}, 61: {64}, 62: {65}, 63: {5}, 64: {66}, 65: {67}, 66: {68}, 67: {69}, 68: {70}, 69: {71}, 70: {72}, 71: {73}, 72: {1}, 73: {2}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 add add
EXACT 49 add add
EXACT 50 store store
EXACT 51 inttoptr inttoptr
EXACT 52 store store
EXACT 53 getelementptr getelementptr
EXACT 54 bitcast bitcast
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
EXACT 58 load load
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 getelementptr getelementptr
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 load load
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 getelementptr getelementptr
EXACT 73 bitcast bitcast
EXACT 74 load load
EXACT 75 store store
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
EXACT 85 load load
EXACT 86 load load
EXACT 87 add add
EXACT 88 store store
EXACT 89 icmp icmp
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 tail tail
EXACT 95 trunc trunc
EXACT 96 and and
EXACT 97 xor xor
EXACT 98 store store
EXACT 99 xor xor
EXACT 100 xor xor
EXACT 101 lshr lshr
EXACT 102 trunc trunc
EXACT 103 and and
EXACT 104 store store
EXACT 105 icmp icmp
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 lshr lshr
EXACT 109 trunc trunc
EXACT 110 store store
EXACT 111 lshr lshr
EXACT 112 xor xor
EXACT 113 add add
EXACT 114 icmp icmp
EXACT 115 zext zext
EXACT 116 store store
EXACT 117 add add
EXACT 118 store store
EXACT 119 add add
EXACT 120 inttoptr inttoptr
EXACT 121 load load
EXACT 122 store store
EXACT 123 store store
EXACT 124 add add
EXACT 125 store store
EXACT 126 inttoptr inttoptr
EXACT 127 load load
EXACT 128 store store
EXACT 129 add add
EXACT 130 store store
EXACT 131 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 4 %EDI = bitcast %union.anon* %4 to i32*
- 5 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 6 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 7 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 8 %5 = load i64, i64* %RBP, align 8
- 9 %6 = add i64 %1, 1
- 10 store i64 %6, i64* %PC, align 8
- 11 %7 = load i64, i64* %RSP, align 8
- 12 %8 = add i64 %7, -8
- 13 %9 = inttoptr i64 %8 to i64*
- 14 store i64 %5, i64* %9, align 8
- 15 %10 = load i64, i64* %PC, align 8
- 16 store i64 %8, i64* %RBP, align 8
- 17 %11 = add i64 %7, -24
- 18 store i64 %11, i64* %RSP, align 8
- 19 %12 = icmp ult i64 %8, 16
- 20 %13 = zext i1 %12 to i8
- 21 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 22 store i8 %13, i8* %14, align 1
- 23 %15 = trunc i64 %11 to i32
- 24 %16 = and i32 %15, 255
- 25 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 26 %18 = trunc i32 %17 to i8
- 27 %19 = and i8 %18, 1
- 28 %20 = xor i8 %19, 1
- 29 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 30 store i8 %20, i8* %21, align 1
- 31 %22 = xor i64 %8, 16
- 32 %23 = xor i64 %22, %11
- 33 %24 = lshr i64 %23, 4
- 34 %25 = trunc i64 %24 to i8
- 35 %26 = and i8 %25, 1
- 36 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 37 store i8 %26, i8* %27, align 1
- 38 %28 = icmp eq i64 %11, 0
- 39 %29 = zext i1 %28 to i8
- 40 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 41 store i8 %29, i8* %30, align 1
- 42 %31 = lshr i64 %11, 63
- 43 %32 = trunc i64 %31 to i8
- 44 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 45 store i8 %32, i8* %33, align 1
- 46 %34 = lshr i64 %8, 63
- 47 %35 = xor i64 %31, %34
- 48 %36 = add nuw nsw i64 %35, %34
- 49 %37 = icmp eq i64 %36, 2
- 50 %38 = zext i1 %37 to i8
- 51 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 52 store i8 %38, i8* %39, align 1
- 53 %40 = add i64 %7, -12
- 54 %41 = add i64 %10, 14
- 55 store i64 %41, i64* %PC, align 8
- 56 %42 = inttoptr i64 %40 to i32*
- 57 store i32 0, i32* %42, align 4
- 58 %43 = load i64, i64* %RBP, align 8
- 59 %44 = add i64 %43, -8
- 60 %45 = load i32, i32* %EDI, align 4
- 61 %46 = load i64, i64* %PC, align 8
- 62 %47 = add i64 %46, 3
- 63 store i64 %47, i64* %PC, align 8
- 64 %48 = inttoptr i64 %44 to i32*
- 65 store i32 %45, i32* %48, align 4
- 66 %49 = load i64, i64* %RBP, align 8
- 67 %50 = add i64 %49, -16
- 68 %51 = load i64, i64* %RSI, align 8
- 69 %52 = load i64, i64* %PC, align 8
- 70 %53 = add i64 %52, 4
- 71 store i64 %53, i64* %PC, align 8
- 72 %54 = inttoptr i64 %50 to i64*
- 73 store i64 %51, i64* %54, align 8
- 74 %55 = load i64, i64* %PC, align 8
- 75 store i8 0, i8* %AL, align 1
- 76 %56 = add i64 %55, 26
- 77 %57 = add i64 %55, 7
- 78 %58 = load i64, i64* %RSP, align 8
- 79 %59 = add i64 %58, -8
- 80 %60 = inttoptr i64 %59 to i64*
- 81 store i64 %57, i64* %60, align 8
- 82 store i64 %59, i64* %RSP, align 8
- 83 store i64 %56, i64* %PC, align 8
- 84 %61 = tail call %struct.Memory* @sub_4004e0_printdata_renamed_(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2)
- 85 %62 = load i64, i64* %RSP, align 8
- 86 %63 = load i64, i64* %PC, align 8
- 87 %64 = add i64 %62, 16
- 88 store i64 %64, i64* %RSP, align 8
- 89 %65 = icmp ugt i64 %62, -17
- 90 %66 = zext i1 %65 to i8
- 91 store i8 %66, i8* %14, align 1
- 92 %67 = trunc i64 %64 to i32
- 93 %68 = and i32 %67, 255
- 94 %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
- 95 %70 = trunc i32 %69 to i8
- 96 %71 = and i8 %70, 1
- 97 %72 = xor i8 %71, 1
- 98 store i8 %72, i8* %21, align 1
- 99 %73 = xor i64 %62, 16
- 100 %74 = xor i64 %73, %64
- 101 %75 = lshr i64 %74, 4
- 102 %76 = trunc i64 %75 to i8
- 103 %77 = and i8 %76, 1
- 104 store i8 %77, i8* %27, align 1
- 105 %78 = icmp eq i64 %64, 0
- 106 %79 = zext i1 %78 to i8
- 107 store i8 %79, i8* %30, align 1
- 108 %80 = lshr i64 %64, 63
- 109 %81 = trunc i64 %80 to i8
- 110 store i8 %81, i8* %33, align 1
- 111 %82 = lshr i64 %62, 63
- 112 %83 = xor i64 %80, %82
- 113 %84 = add nuw nsw i64 %83, %80
- 114 %85 = icmp eq i64 %84, 2
- 115 %86 = zext i1 %85 to i8
- 116 store i8 %86, i8* %39, align 1
- 117 %87 = add i64 %63, 5
- 118 store i64 %87, i64* %PC, align 8
- 119 %88 = add i64 %62, 24
- 120 %89 = inttoptr i64 %64 to i64*
- 121 %90 = load i64, i64* %89, align 8
- 122 store i64 %90, i64* %RBP, align 8
- 123 store i64 %88, i64* %RSP, align 8
- 124 %91 = add i64 %63, 6
- 125 store i64 %91, i64* %PC, align 8
- 126 %92 = inttoptr i64 %88 to i64*
- 127 %93 = load i64, i64* %92, align 8
- 128 store i64 %93, i64* %PC, align 8
- 129 %94 = add i64 %62, 32
- 130 store i64 %94, i64* %RSP, align 8
- 131 \<badref\> = ret %struct.Memory* %61
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd84b7c7400>, {0: {0}, 1: {72}, 2: {73, 54}, 3: {53}, 4: {73, 54}, 5: {63}, 6: {5}, 7: {1}, 8: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 9: {3}, 10: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 11: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 12: {56, 79, 7}, 13: {70, 8, 80, 51, 120, 61, 126}, 14: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 15: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 16: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 17: {12}, 18: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 19: {14}, 20: {34, 106, 45, 15, 115, 90}, 21: {16}, 22: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 23: {38, 102, 109, 18, 21, 92, 29, 95}, 24: {19, 93}, 25: {20, 94, 84}, 26: {38, 102, 109, 18, 21, 92, 29, 95}, 27: {96, 103, 22, 30}, 28: {97, 23}, 29: {24}, 30: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 31: {26, 99}, 32: {112, 42, 27, 100}, 33: {28, 101}, 34: {38, 102, 109, 18, 21, 92, 29, 95}, 35: {96, 103, 22, 30}, 36: {31}, 37: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 38: {33, 105}, 39: {34, 106, 45, 15, 115, 90}, 40: {35}, 41: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 42: {41, 108, 37, 111}, 43: {38, 102, 109, 18, 21, 92, 29, 95}, 44: {39}, 45: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 46: {41, 108, 37, 111}, 47: {112, 42, 27, 100}, 48: {113, 43}, 49: {114, 44}, 50: {34, 106, 45, 15, 115, 90}, 51: {46}, 52: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 53: {48}, 54: {49}, 55: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 56: {70, 8, 80, 51, 120, 61, 126}, 57: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 58: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 59: {56, 79, 7}, 60: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 61: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 62: {59}, 63: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 64: {70, 8, 80, 51, 120, 61, 126}, 65: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 66: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 67: {65}, 68: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 69: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 70: {68}, 71: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 72: {70, 8, 80, 51, 120, 61, 126}, 73: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 74: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 75: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 76: {76}, 77: {77}, 78: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 79: {56, 79, 7}, 80: {70, 8, 80, 51, 120, 61, 126}, 81: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 82: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 83: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 84: {20, 94, 84}, 85: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 86: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 87: {87}, 88: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 89: {89}, 90: {34, 106, 45, 15, 115, 90}, 91: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 92: {38, 102, 109, 18, 21, 92, 29, 95}, 93: {19, 93}, 94: {20, 94, 84}, 95: {38, 102, 109, 18, 21, 92, 29, 95}, 96: {96, 103, 22, 30}, 97: {97, 23}, 98: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 99: {26, 99}, 100: {112, 42, 27, 100}, 101: {28, 101}, 102: {38, 102, 109, 18, 21, 92, 29, 95}, 103: {96, 103, 22, 30}, 104: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 105: {33, 105}, 106: {34, 106, 45, 15, 115, 90}, 107: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 108: {41, 108, 37, 111}, 109: {38, 102, 109, 18, 21, 92, 29, 95}, 110: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 111: {41, 108, 37, 111}, 112: {112, 42, 27, 100}, 113: {113, 43}, 114: {114, 44}, 115: {34, 106, 45, 15, 115, 90}, 116: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 117: {117}, 118: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 119: {119}, 120: {70, 8, 80, 51, 120, 61, 126}, 121: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 122: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 123: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 124: {124}, 125: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 126: {70, 8, 80, 51, 120, 61, 126}, 127: {64, 121, 2, 66, 67, 6, 10, 74, 78, 85, 86, 55, 57, 58, 127}, 128: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 129: {129}, 130: {128, 130, 4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 60, 62, 69, 71, 75, 81, 82, 83, 88, 91, 98, 104, 107, 110, 116, 118, 122, 123, 125}, 131: {131}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fd84b7c7400>, {0: {0}, 1: {72}, 2: {73}, 3: {53}, 4: {54}, 5: {63}, 6: {5}, 7: {1}, 8: {2}, 9: {3}, 10: {4}, 11: {6}, 12: {7}, 13: {8}, 14: {9}, 15: {10}, 16: {11}, 17: {12}, 18: {13}, 19: {14}, 20: {15}, 21: {16}, 22: {17}, 23: {18}, 24: {19}, 25: {20}, 26: {21}, 27: {22}, 28: {23}, 29: {24}, 30: {25}, 31: {26}, 32: {27}, 33: {28}, 34: {29}, 35: {30}, 36: {31}, 37: {32}, 38: {33}, 39: {34}, 40: {35}, 41: {36}, 42: {37}, 43: {38}, 44: {39}, 45: {40}, 46: {41}, 47: {42}, 48: {43}, 49: {44}, 50: {45}, 51: {46}, 52: {47}, 53: {48}, 54: {49}, 55: {50}, 56: {51}, 57: {52}, 58: {55}, 59: {56}, 60: {57}, 61: {58}, 62: {59}, 63: {60}, 64: {61}, 65: {62}, 66: {64}, 67: {65}, 68: {66}, 69: {67}, 70: {68}, 71: {69}, 72: {70}, 73: {71}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 store store
EXACT 11 load load
EXACT 12 add add
EXACT 13 inttoptr inttoptr
EXACT 14 store store
EXACT 15 load load
EXACT 16 store store
EXACT 17 add add
EXACT 18 store store
EXACT 19 icmp icmp
EXACT 20 zext zext
EXACT 21 getelementptr getelementptr
EXACT 22 store store
EXACT 23 trunc trunc
EXACT 24 and and
EXACT 25 tail tail
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 xor xor
EXACT 29 getelementptr getelementptr
EXACT 30 store store
EXACT 31 xor xor
EXACT 32 xor xor
EXACT 33 lshr lshr
EXACT 34 trunc trunc
EXACT 35 and and
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 icmp icmp
EXACT 39 zext zext
EXACT 40 getelementptr getelementptr
EXACT 41 store store
EXACT 42 lshr lshr
EXACT 43 trunc trunc
EXACT 44 getelementptr getelementptr
EXACT 45 store store
EXACT 46 lshr lshr
EXACT 47 xor xor
EXACT 48 add add
EXACT 49 icmp icmp
EXACT 50 zext zext
EXACT 51 getelementptr getelementptr
EXACT 52 store store
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 load load
EXACT 59 add add
EXACT 60 load load
EXACT 61 load load
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 store store
EXACT 74 load load
EXACT 75 store store
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
EXACT 85 load load
EXACT 86 load load
EXACT 87 add add
EXACT 88 store store
EXACT 89 icmp icmp
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 trunc trunc
EXACT 93 and and
EXACT 94 tail tail
EXACT 95 trunc trunc
EXACT 96 and and
EXACT 97 xor xor
EXACT 98 store store
EXACT 99 xor xor
EXACT 100 xor xor
EXACT 101 lshr lshr
EXACT 102 trunc trunc
EXACT 103 and and
EXACT 104 store store
EXACT 105 icmp icmp
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 lshr lshr
EXACT 109 trunc trunc
EXACT 110 store store
EXACT 111 lshr lshr
EXACT 112 xor xor
EXACT 113 add add
EXACT 114 icmp icmp
EXACT 115 zext zext
EXACT 116 store store
EXACT 117 add add
EXACT 118 store store
EXACT 119 add add
EXACT 120 inttoptr inttoptr
EXACT 121 load load
EXACT 122 store store
EXACT 123 store store
EXACT 124 add add
EXACT 125 store store
EXACT 126 inttoptr inttoptr
EXACT 127 load load
EXACT 128 store store
EXACT 129 add add
EXACT 130 store store
EXACT 131 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 14', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %43 to i32*', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI.i, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %56 to i8*', 'store i8 0, i8* %AL.i, align 1', '%59 = add i64 %57, 7', '%60 = load i64, i64* %6, align 8', '%61 = add i64 %60, -8', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %6, align 8', 'store i64 %58, i64* %3, align 8', '%63 = load i64, i64* %6, align 8', '%64 = load i64, i64* %3, align 8', '%65 = add i64 %63, 16', 'store i64 %65, i64* %6, align 8', '%66 = icmp ugt i64 %63, -17', '%67 = zext i1 %66 to i8', 'store i8 %67, i8* %14, align 1', '%68 = trunc i64 %65 to i32', '%69 = and i32 %68, 255', '%70 = tail call i32 @llvm.ctpop.i32(i32 %69)', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', '%73 = xor i8 %72, 1', 'store i8 %73, i8* %21, align 1', '%74 = xor i64 %63, 16', '%75 = xor i64 %74, %65', '%76 = lshr i64 %75, 4', '%77 = trunc i64 %76 to i8', '%78 = and i8 %77, 1', 'store i8 %78, i8* %27, align 1', '%79 = icmp eq i64 %65, 0', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %30, align 1', '%81 = lshr i64 %65, 63', '%82 = trunc i64 %81 to i8', 'store i8 %82, i8* %33, align 1', '%83 = lshr i64 %63, 63', '%84 = xor i64 %81, %83', '%85 = add nuw nsw i64 %84, %81', '%86 = icmp eq i64 %85, 2', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %39, align 1', '%88 = add i64 %64, 5', 'store i64 %88, i64* %3, align 8', '%89 = add i64 %63, 24', '%90 = inttoptr i64 %65 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %RBP.i, align 8', 'store i64 %89, i64* %6, align 8', '%92 = add i64 %64, 6', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %89 to i64*', '%94 = load i64, i64* %93, align 8', 'store i64 %94, i64* %3, align 8', '%95 = add i64 %63, 32', 'store i64 %95, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 14
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %43 to i32*
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = load i32, i32* %EDI.i, align 4
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 3
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i32*
Found line to remove! store i32 %46, i32* %49, align 4
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI.i, align 8
Found line to remove! %53 = load i64, i64* %3, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %3, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %56 to i8*
Keep: %57 = load i64, i64* %3, align 8
Found line to remove! store i8 0, i8* %AL.i, align 1
Keep: %58 = add i64 %57, 26
Found line to remove! %59 = add i64 %57, 7
Found line to remove! %60 = load i64, i64* %6, align 8
Found line to remove! %61 = add i64 %60, -8
Found line to remove! %62 = inttoptr i64 %61 to i64*
Found line to remove! store i64 %59, i64* %62, align 8
Found line to remove! store i64 %61, i64* %6, align 8
Found line to remove! store i64 %58, i64* %3, align 8
Keep: %call2_4004c8 = tail call %struct.Memory* @sub_4004e0.printdata(%struct.State* %0, i64 %58, %struct.Memory* %2)
Found line to remove! %63 = load i64, i64* %6, align 8
Found line to remove! %64 = load i64, i64* %3, align 8
Found line to remove! %65 = add i64 %63, 16
Found line to remove! store i64 %65, i64* %6, align 8
Found line to remove! %66 = icmp ugt i64 %63, -17
Found line to remove! %67 = zext i1 %66 to i8
Found line to remove! store i8 %67, i8* %14, align 1
Found line to remove! %68 = trunc i64 %65 to i32
Found line to remove! %69 = and i32 %68, 255
Found line to remove! %70 = tail call i32 @llvm.ctpop.i32(i32 %69)
Found line to remove! %71 = trunc i32 %70 to i8
Found line to remove! %72 = and i8 %71, 1
Found line to remove! %73 = xor i8 %72, 1
Found line to remove! store i8 %73, i8* %21, align 1
Found line to remove! %74 = xor i64 %63, 16
Found line to remove! %75 = xor i64 %74, %65
Found line to remove! %76 = lshr i64 %75, 4
Found line to remove! %77 = trunc i64 %76 to i8
Found line to remove! %78 = and i8 %77, 1
Found line to remove! store i8 %78, i8* %27, align 1
Found line to remove! %79 = icmp eq i64 %65, 0
Found line to remove! %80 = zext i1 %79 to i8
Found line to remove! store i8 %80, i8* %30, align 1
Found line to remove! %81 = lshr i64 %65, 63
Found line to remove! %82 = trunc i64 %81 to i8
Found line to remove! store i8 %82, i8* %33, align 1
Found line to remove! %83 = lshr i64 %63, 63
Found line to remove! %84 = xor i64 %81, %83
Found line to remove! %85 = add nuw nsw i64 %84, %81
Found line to remove! %86 = icmp eq i64 %85, 2
Found line to remove! %87 = zext i1 %86 to i8
Found line to remove! store i8 %87, i8* %39, align 1
Found line to remove! %88 = add i64 %64, 5
Found line to remove! store i64 %88, i64* %3, align 8
Found line to remove! %89 = add i64 %63, 24
Found line to remove! %90 = inttoptr i64 %65 to i64*
Found line to remove! %91 = load i64, i64* %90, align 8
Found line to remove! store i64 %91, i64* %RBP.i, align 8
Found line to remove! store i64 %89, i64* %6, align 8
Found line to remove! %92 = add i64 %64, 6
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = inttoptr i64 %89 to i64*
Found line to remove! %94 = load i64, i64* %93, align 8
Found line to remove! store i64 %94, i64* %3, align 8
Found line to remove! %95 = add i64 %63, 32
Found line to remove! store i64 %95, i64* %6, align 8
Keep: ret %struct.Memory* %call2_4004c8
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 14', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %43 to i32*', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI.i, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %56 to i8*', 'store i8 0, i8* %AL.i, align 1', '%59 = add i64 %57, 7', '%60 = load i64, i64* %6, align 8', '%61 = add i64 %60, -8', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %6, align 8', 'store i64 %58, i64* %3, align 8', '%63 = load i64, i64* %6, align 8', '%64 = load i64, i64* %3, align 8', '%65 = add i64 %63, 16', 'store i64 %65, i64* %6, align 8', '%66 = icmp ugt i64 %63, -17', '%67 = zext i1 %66 to i8', 'store i8 %67, i8* %14, align 1', '%68 = trunc i64 %65 to i32', '%69 = and i32 %68, 255', '%70 = tail call i32 @llvm.ctpop.i32(i32 %69)', '%71 = trunc i32 %70 to i8', '%72 = and i8 %71, 1', '%73 = xor i8 %72, 1', 'store i8 %73, i8* %21, align 1', '%74 = xor i64 %63, 16', '%75 = xor i64 %74, %65', '%76 = lshr i64 %75, 4', '%77 = trunc i64 %76 to i8', '%78 = and i8 %77, 1', 'store i8 %78, i8* %27, align 1', '%79 = icmp eq i64 %65, 0', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %30, align 1', '%81 = lshr i64 %65, 63', '%82 = trunc i64 %81 to i8', 'store i8 %82, i8* %33, align 1', '%83 = lshr i64 %63, 63', '%84 = xor i64 %81, %83', '%85 = add nuw nsw i64 %84, %81', '%86 = icmp eq i64 %85, 2', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %39, align 1', '%88 = add i64 %64, 5', 'store i64 %88, i64* %3, align 8', '%89 = add i64 %63, 24', '%90 = inttoptr i64 %65 to i64*', '%91 = load i64, i64* %90, align 8', 'store i64 %91, i64* %RBP.i, align 8', 'store i64 %89, i64* %6, align 8', '%92 = add i64 %64, 6', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %89 to i64*', '%94 = load i64, i64* %93, align 8', 'store i64 %94, i64* %3, align 8', '%95 = add i64 %63, 32', 'store i64 %95, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', 'store i8 0, i8* %AL, align 1', '%57 = add i64 %55, 7', '%58 = load i64, i64* %RSP, align 8', '%59 = add i64 %58, -8', '%60 = inttoptr i64 %59 to i64*', 'store i64 %57, i64* %60, align 8', 'store i64 %59, i64* %RSP, align 8', 'store i64 %56, i64* %PC, align 8', '%62 = load i64, i64* %RSP, align 8', '%63 = load i64, i64* %PC, align 8', '%64 = add i64 %62, 16', 'store i64 %64, i64* %RSP, align 8', '%65 = icmp ugt i64 %62, -17', '%66 = zext i1 %65 to i8', 'store i8 %66, i8* %14, align 1', '%67 = trunc i64 %64 to i32', '%68 = and i32 %67, 255', '%69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12', '%70 = trunc i32 %69 to i8', '%71 = and i8 %70, 1', '%72 = xor i8 %71, 1', 'store i8 %72, i8* %21, align 1', '%73 = xor i64 %62, 16', '%74 = xor i64 %73, %64', '%75 = lshr i64 %74, 4', '%76 = trunc i64 %75 to i8', '%77 = and i8 %76, 1', 'store i8 %77, i8* %27, align 1', '%78 = icmp eq i64 %64, 0', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %30, align 1', '%80 = lshr i64 %64, 63', '%81 = trunc i64 %80 to i8', 'store i8 %81, i8* %33, align 1', '%82 = lshr i64 %62, 63', '%83 = xor i64 %80, %82', '%84 = add nuw nsw i64 %83, %80', '%85 = icmp eq i64 %84, 2', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %39, align 1', '%87 = add i64 %63, 5', 'store i64 %87, i64* %PC, align 8', '%88 = add i64 %62, 24', '%89 = inttoptr i64 %64 to i64*', '%90 = load i64, i64* %89, align 8', 'store i64 %90, i64* %RBP, align 8', 'store i64 %88, i64* %RSP, align 8', '%91 = add i64 %63, 6', 'store i64 %91, i64* %PC, align 8', '%92 = inttoptr i64 %88 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %PC, align 8', '%94 = add i64 %62, 32', 'store i64 %94, i64* %RSP, align 8'])
Keep: block_4004b0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 14
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Found line to remove! %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %PC, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Keep: %56 = add i64 %55, 26
Found line to remove! %57 = add i64 %55, 7
Found line to remove! %58 = load i64, i64* %RSP, align 8
Found line to remove! %59 = add i64 %58, -8
Found line to remove! %60 = inttoptr i64 %59 to i64*
Found line to remove! store i64 %57, i64* %60, align 8
Found line to remove! store i64 %59, i64* %RSP, align 8
Found line to remove! store i64 %56, i64* %PC, align 8
Keep: %61 = tail call %struct.Memory* @sub_4004e0_printdata_renamed_(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2)
Found line to remove! %62 = load i64, i64* %RSP, align 8
Found line to remove! %63 = load i64, i64* %PC, align 8
Found line to remove! %64 = add i64 %62, 16
Found line to remove! store i64 %64, i64* %RSP, align 8
Found line to remove! %65 = icmp ugt i64 %62, -17
Found line to remove! %66 = zext i1 %65 to i8
Found line to remove! store i8 %66, i8* %14, align 1
Found line to remove! %67 = trunc i64 %64 to i32
Found line to remove! %68 = and i32 %67, 255
Found line to remove! %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
Found line to remove! %70 = trunc i32 %69 to i8
Found line to remove! %71 = and i8 %70, 1
Found line to remove! %72 = xor i8 %71, 1
Found line to remove! store i8 %72, i8* %21, align 1
Found line to remove! %73 = xor i64 %62, 16
Found line to remove! %74 = xor i64 %73, %64
Found line to remove! %75 = lshr i64 %74, 4
Found line to remove! %76 = trunc i64 %75 to i8
Found line to remove! %77 = and i8 %76, 1
Found line to remove! store i8 %77, i8* %27, align 1
Found line to remove! %78 = icmp eq i64 %64, 0
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %30, align 1
Found line to remove! %80 = lshr i64 %64, 63
Found line to remove! %81 = trunc i64 %80 to i8
Found line to remove! store i8 %81, i8* %33, align 1
Found line to remove! %82 = lshr i64 %62, 63
Found line to remove! %83 = xor i64 %80, %82
Found line to remove! %84 = add nuw nsw i64 %83, %80
Found line to remove! %85 = icmp eq i64 %84, 2
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %39, align 1
Found line to remove! %87 = add i64 %63, 5
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %88 = add i64 %62, 24
Found line to remove! %89 = inttoptr i64 %64 to i64*
Found line to remove! %90 = load i64, i64* %89, align 8
Found line to remove! store i64 %90, i64* %RBP, align 8
Found line to remove! store i64 %88, i64* %RSP, align 8
Found line to remove! %91 = add i64 %63, 6
Found line to remove! store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %88 to i64*
Found line to remove! %93 = load i64, i64* %92, align 8
Found line to remove! store i64 %93, i64* %PC, align 8
Found line to remove! %94 = add i64 %62, 32
Found line to remove! store i64 %94, i64* %RSP, align 8
Keep: ret %struct.Memory* %61
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', 'store i8 0, i8* %AL, align 1', '%57 = add i64 %55, 7', '%58 = load i64, i64* %RSP, align 8', '%59 = add i64 %58, -8', '%60 = inttoptr i64 %59 to i64*', 'store i64 %57, i64* %60, align 8', 'store i64 %59, i64* %RSP, align 8', 'store i64 %56, i64* %PC, align 8', '%62 = load i64, i64* %RSP, align 8', '%63 = load i64, i64* %PC, align 8', '%64 = add i64 %62, 16', 'store i64 %64, i64* %RSP, align 8', '%65 = icmp ugt i64 %62, -17', '%66 = zext i1 %65 to i8', 'store i8 %66, i8* %14, align 1', '%67 = trunc i64 %64 to i32', '%68 = and i32 %67, 255', '%69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12', '%70 = trunc i32 %69 to i8', '%71 = and i8 %70, 1', '%72 = xor i8 %71, 1', 'store i8 %72, i8* %21, align 1', '%73 = xor i64 %62, 16', '%74 = xor i64 %73, %64', '%75 = lshr i64 %74, 4', '%76 = trunc i64 %75 to i8', '%77 = and i8 %76, 1', 'store i8 %77, i8* %27, align 1', '%78 = icmp eq i64 %64, 0', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %30, align 1', '%80 = lshr i64 %64, 63', '%81 = trunc i64 %80 to i8', 'store i8 %81, i8* %33, align 1', '%82 = lshr i64 %62, 63', '%83 = xor i64 %80, %82', '%84 = add nuw nsw i64 %83, %80', '%85 = icmp eq i64 %84, 2', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %39, align 1', '%87 = add i64 %63, 5', 'store i64 %87, i64* %PC, align 8', '%88 = add i64 %62, 24', '%89 = inttoptr i64 %64 to i64*', '%90 = load i64, i64* %89, align 8', 'store i64 %90, i64* %RBP, align 8', 'store i64 %88, i64* %RSP, align 8', '%91 = add i64 %63, 6', 'store i64 %91, i64* %PC, align 8', '%92 = inttoptr i64 %88 to i64*', '%93 = load i64, i64* %92, align 8', 'store i64 %93, i64* %PC, align 8', '%94 = add i64 %62, 32', 'store i64 %94, i64* %RSP, align 8'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_17/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_17/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
