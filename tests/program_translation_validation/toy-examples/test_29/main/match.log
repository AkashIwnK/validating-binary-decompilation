Writing '/tmp/tmpazk4hoxe.dot'...
Writing '/tmp/tmpazk4hoxe.dot':Done

Reading LLVM: /tmp/tmpf7501ym4-query.ll
Extracting function [main] from /tmp/tmpf7501ym4-query.ll
Dot file generated!
Writing '/tmp/tmpkxkro7g4.dot'...
Writing '/tmp/tmpkxkro7g4.dot':Done

Reading LLVM: /tmp/tmpvhpe4wia-target.ll
Extracting function [main] from /tmp/tmpvhpe4wia-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -56
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 48
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = add i64 %7, -12
- 49 %41 = add i64 %10, 14
- 50 store i64 %41, i64* %3, align 8
- 51 %42 = inttoptr i64 %40 to i32*
- 52 store i32 0, i32* %42, align 4
- 53 %43 = load i64, i64* %RBP.i, align 8
- 54 %44 = add i64 %43, -36
- 55 %45 = load i64, i64* %3, align 8
- 56 %46 = add i64 %45, 7
- 57 store i64 %46, i64* %3, align 8
- 58 %47 = inttoptr i64 %44 to i32*
- 59 store i32 0, i32* %47, align 4
- 60 %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 61 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 62 %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 63 %.pre = load i64, i64* %3, align 8
- 64 \<badref\> = br label %block_.L_4005c6
- 65 %48 = phi i64 [ %139, %block_4005d0 ], [ %.pre, %entry ]
- 66 %49 = load i64, i64* %RBP.i, align 8
- 67 %50 = add i64 %49, -36
- 68 %51 = add i64 %48, 4
- 69 store i64 %51, i64* %3, align 8
- 70 %52 = inttoptr i64 %50 to i32*
- 71 %53 = load i32, i32* %52, align 4
- 72 %54 = add i32 %53, -5
- 73 %55 = icmp ult i32 %53, 5
- 74 %56 = zext i1 %55 to i8
- 75 store i8 %56, i8* %14, align 1
- 76 %57 = and i32 %54, 255
- 77 %58 = tail call i32 @llvm.ctpop.i32(i32 %57)
- 78 %59 = trunc i32 %58 to i8
- 79 %60 = and i8 %59, 1
- 80 %61 = xor i8 %60, 1
- 81 store i8 %61, i8* %21, align 1
- 82 %62 = xor i32 %54, %53
- 83 %63 = lshr i32 %62, 4
- 84 %64 = trunc i32 %63 to i8
- 85 %65 = and i8 %64, 1
- 86 store i8 %65, i8* %27, align 1
- 87 %66 = icmp eq i32 %54, 0
- 88 %67 = zext i1 %66 to i8
- 89 store i8 %67, i8* %30, align 1
- 90 %68 = lshr i32 %54, 31
- 91 %69 = trunc i32 %68 to i8
- 92 store i8 %69, i8* %33, align 1
- 93 %70 = lshr i32 %53, 31
- 94 %71 = xor i32 %68, %70
- 95 %72 = add nuw nsw i32 %71, %70
- 96 %73 = icmp eq i32 %72, 2
- 97 %74 = zext i1 %73 to i8
- 98 store i8 %74, i8* %39, align 1
- 99 %75 = icmp ne i8 %69, 0
- 100 %76 = xor i1 %75, %73
- 101 %.v = select i1 %76, i64 10, i64 64
- 102 %77 = add i64 %48, %.v
- 103 store i64 %77, i64* %3, align 8
- 104 \<badref\> = br i1 %76, label %block_4005d0, label %block_.L_400606
- 105 %78 = add i64 %49, -32
- 106 store i64 %78, i64* %RSI.i, align 8
- 107 %79 = add i64 %77, 11
- 108 store i64 %79, i64* %3, align 8
- 109 %80 = inttoptr i64 %78 to i32*
- 110 store i32 5, i32* %80, align 4
- 111 %81 = load i64, i64* %RBP.i, align 8
- 112 %82 = add i64 %81, -28
- 113 %83 = load i64, i64* %3, align 8
- 114 %84 = add i64 %83, 7
- 115 store i64 %84, i64* %3, align 8
- 116 %85 = inttoptr i64 %82 to i32*
- 117 store i32 6, i32* %85, align 4
- 118 %86 = load i64, i64* %RBP.i, align 8
- 119 %87 = add i64 %86, -24
- 120 %88 = load i64, i64* %3, align 8
- 121 %89 = add i64 %88, 7
- 122 store i64 %89, i64* %3, align 8
- 123 %90 = inttoptr i64 %87 to i32*
- 124 store i32 7, i32* %90, align 4
- 125 %91 = load i64, i64* %RBP.i, align 8
- 126 %92 = add i64 %91, -20
- 127 %93 = load i64, i64* %3, align 8
- 128 %94 = add i64 %93, 7
- 129 store i64 %94, i64* %3, align 8
- 130 %95 = inttoptr i64 %92 to i32*
- 131 store i32 8, i32* %95, align 4
- 132 %96 = load i64, i64* %RBP.i, align 8
- 133 %97 = add i64 %96, -36
- 134 %98 = load i64, i64* %3, align 8
- 135 %99 = add i64 %98, 3
- 136 store i64 %99, i64* %3, align 8
- 137 %100 = inttoptr i64 %97 to i32*
- 138 %101 = load i32, i32* %100, align 4
- 139 %102 = zext i32 %101 to i64
- 140 store i64 %102, i64* %RDI.i, align 8
- 141 %103 = add i64 %98, -208
- 142 %104 = add i64 %98, 8
- 143 %105 = load i64, i64* %6, align 8
- 144 %106 = add i64 %105, -8
- 145 %107 = inttoptr i64 %106 to i64*
- 146 store i64 %104, i64* %107, align 8
- 147 store i64 %106, i64* %6, align 8
- 148 store i64 %103, i64* %3, align 8
- 149 %call2_4005f3 = tail call %struct.Memory* @sub_400520.foo(%struct.State* nonnull %0, i64 %103, %struct.Memory* %2)
- 150 %108 = load i64, i64* %RBP.i, align 8
- 151 %109 = add i64 %108, -36
- 152 %110 = load i64, i64* %3, align 8
- 153 %111 = add i64 %110, 3
- 154 store i64 %111, i64* %3, align 8
- 155 %112 = inttoptr i64 %109 to i32*
- 156 %113 = load i32, i32* %112, align 4
- 157 %114 = add i32 %113, 1
- 158 %115 = zext i32 %114 to i64
- 159 store i64 %115, i64* %RAX.i13, align 8
- 160 %116 = icmp eq i32 %113, -1
- 161 %117 = icmp eq i32 %114, 0
- 162 %118 = or i1 %116, %117
- 163 %119 = zext i1 %118 to i8
- 164 store i8 %119, i8* %14, align 1
- 165 %120 = and i32 %114, 255
- 166 %121 = tail call i32 @llvm.ctpop.i32(i32 %120)
- 167 %122 = trunc i32 %121 to i8
- 168 %123 = and i8 %122, 1
- 169 %124 = xor i8 %123, 1
- 170 store i8 %124, i8* %21, align 1
- 171 %125 = xor i32 %114, %113
- 172 %126 = lshr i32 %125, 4
- 173 %127 = trunc i32 %126 to i8
- 174 %128 = and i8 %127, 1
- 175 store i8 %128, i8* %27, align 1
- 176 %129 = zext i1 %117 to i8
- 177 store i8 %129, i8* %30, align 1
- 178 %130 = lshr i32 %114, 31
- 179 %131 = trunc i32 %130 to i8
- 180 store i8 %131, i8* %33, align 1
- 181 %132 = lshr i32 %113, 31
- 182 %133 = xor i32 %130, %132
- 183 %134 = add nuw nsw i32 %133, %130
- 184 %135 = icmp eq i32 %134, 2
- 185 %136 = zext i1 %135 to i8
- 186 store i8 %136, i8* %39, align 1
- 187 %137 = add i64 %110, 9
- 188 store i64 %137, i64* %3, align 8
- 189 store i32 %114, i32* %112, align 4
- 190 %138 = load i64, i64* %3, align 8
- 191 %139 = add i64 %138, -59
- 192 store i64 %139, i64* %3, align 8
- 193 \<badref\> = br label %block_.L_4005c6
- 194 store i64 0, i64* %RAX.i13, align 8
- 195 %140 = load i64, i64* %6, align 8
- 196 %141 = add i64 %140, 48
- 197 store i64 %141, i64* %6, align 8
- 198 %142 = icmp ugt i64 %140, -49
- 199 %143 = zext i1 %142 to i8
- 200 store i8 %143, i8* %14, align 1
- 201 %144 = trunc i64 %141 to i32
- 202 %145 = and i32 %144, 255
- 203 %146 = tail call i32 @llvm.ctpop.i32(i32 %145)
- 204 %147 = trunc i32 %146 to i8
- 205 %148 = and i8 %147, 1
- 206 %149 = xor i8 %148, 1
- 207 store i8 %149, i8* %21, align 1
- 208 %150 = xor i64 %140, 16
- 209 %151 = xor i64 %150, %141
- 210 %152 = lshr i64 %151, 4
- 211 %153 = trunc i64 %152 to i8
- 212 %154 = and i8 %153, 1
- 213 store i8 %154, i8* %27, align 1
- 214 %155 = icmp eq i64 %141, 0
- 215 %156 = zext i1 %155 to i8
- 216 store i8 %156, i8* %30, align 1
- 217 %157 = lshr i64 %141, 63
- 218 %158 = trunc i64 %157 to i8
- 219 store i8 %158, i8* %33, align 1
- 220 %159 = lshr i64 %140, 63
- 221 %160 = xor i64 %157, %159
- 222 %161 = add nuw nsw i64 %160, %157
- 223 %162 = icmp eq i64 %161, 2
- 224 %163 = zext i1 %162 to i8
- 225 store i8 %163, i8* %39, align 1
- 226 %164 = add i64 %77, 7
- 227 store i64 %164, i64* %3, align 8
- 228 %165 = add i64 %140, 56
- 229 %166 = inttoptr i64 %141 to i64*
- 230 %167 = load i64, i64* %166, align 8
- 231 store i64 %167, i64* %RBP.i, align 8
- 232 store i64 %165, i64* %6, align 8
- 233 %168 = add i64 %77, 8
- 234 store i64 %168, i64* %3, align 8
- 235 %169 = inttoptr i64 %165 to i64*
- 236 %170 = load i64, i64* %169, align 8
- 237 store i64 %170, i64* %3, align 8
- 238 %171 = add i64 %140, 64
- 239 store i64 %171, i64* %6, align 8
- 240 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9476e2aae8>, {0: {0}, 1: {5}, 2: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 3: {204, 7}, 4: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 5: {4}, 6: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 7: {10, 191}, 8: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 9: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 10: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 11: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 12: {15}, 13: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 14: {17}, 15: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 16: {19}, 17: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 18: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 19: {73, 123, 212, 22}, 20: {196, 74, 213, 23, 124}, 21: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 22: {33, 132, 76, 83, 215, 25, 221, 126}, 23: {216, 26, 77, 127}, 24: {27}, 25: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 26: {29, 79}, 27: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 28: {81, 130, 219, 31}, 29: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 30: {33, 132, 76, 83, 215, 25, 221, 126}, 31: {34}, 32: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 33: {36, 134, 208, 146, 85}, 34: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 35: {38}, 36: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 37: {40, 91, 88, 44}, 38: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 39: {42}, 40: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 41: {40, 91, 88, 44}, 42: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 43: {230, 142, 46, 149, 93}, 44: {143, 231, 94, 47}, 45: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 46: {49}, 47: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 48: {51}, 49: {52}, 50: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 51: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 52: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 53: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 54: {57, 114, 180, 198}, 55: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 56: {161, 97, 168, 175, 59}, 57: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 58: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 59: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 60: {2}, 61: {3}, 62: {1}, 63: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 64: {64, 240}, 65: {112}, 66: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 67: {57, 114, 180, 198}, 68: {115}, 69: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 70: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 71: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 72: {119}, 73: {120}, 74: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 75: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 76: {73, 123, 212, 22}, 77: {196, 74, 213, 23, 124}, 78: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 79: {33, 132, 76, 83, 215, 25, 221, 126}, 80: {216, 26, 77, 127}, 81: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 82: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 83: {81, 130, 219, 31}, 84: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 85: {33, 132, 76, 83, 215, 25, 221, 126}, 86: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 87: {36, 134, 208, 146, 85}, 88: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 89: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 90: {137, 228, 140, 225}, 91: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 92: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 93: {137, 228, 140, 225}, 94: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 95: {230, 142, 46, 149, 93}, 96: {143, 231, 94, 47}, 97: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 98: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 99: {36, 134, 208, 146, 85}, 100: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 101: {148}, 102: {230, 142, 46, 149, 93}, 103: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 104: {151}, 105: {152}, 106: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 107: {154}, 108: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 109: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 110: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 111: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 112: {159}, 113: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 114: {161, 97, 168, 175, 59}, 115: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 116: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 117: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 118: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 119: {166}, 120: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 121: {161, 97, 168, 175, 59}, 122: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 123: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 124: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 125: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 126: {173}, 127: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 128: {161, 97, 168, 175, 59}, 129: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 130: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 131: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 132: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 133: {57, 114, 180, 198}, 134: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 135: {200, 182}, 136: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 137: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 138: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 139: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 140: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 141: {188}, 142: {104, 189}, 143: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 144: {10, 191}, 145: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 146: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 147: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 148: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 149: {196, 74, 213, 23, 124}, 150: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 151: {57, 114, 180, 198}, 152: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 153: {200, 182}, 154: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 155: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 156: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 157: {204, 7}, 158: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 159: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 160: {207}, 161: {36, 134, 208, 146, 85}, 162: {209}, 163: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 164: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 165: {73, 123, 212, 22}, 166: {196, 74, 213, 23, 124}, 167: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 168: {33, 132, 76, 83, 215, 25, 221, 126}, 169: {216, 26, 77, 127}, 170: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 171: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 172: {81, 130, 219, 31}, 173: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 174: {33, 132, 76, 83, 215, 25, 221, 126}, 175: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 176: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 177: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 178: {137, 228, 140, 225}, 179: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 180: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 181: {137, 228, 140, 225}, 182: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 183: {230, 142, 46, 149, 93}, 184: {143, 231, 94, 47}, 185: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 186: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 187: {234}, 188: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 189: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 190: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 191: {238}, 192: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 193: {64, 240}, 194: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 195: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 196: {67}, 197: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 198: {69}, 199: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 200: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 201: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 202: {73, 123, 212, 22}, 203: {196, 74, 213, 23, 124}, 204: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 205: {33, 132, 76, 83, 215, 25, 221, 126}, 206: {216, 26, 77, 127}, 207: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 208: {29, 79}, 209: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 210: {81, 130, 219, 31}, 211: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 212: {33, 132, 76, 83, 215, 25, 221, 126}, 213: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 214: {36, 134, 208, 146, 85}, 215: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 216: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 217: {40, 91, 88, 44}, 218: {32, 226, 131, 72, 41, 138, 75, 82, 21, 214, 24, 89, 220, 125}, 219: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 220: {40, 91, 88, 44}, 221: {129, 229, 45, 141, 80, 147, 218, 92, 30}, 222: {230, 142, 46, 149, 93}, 223: {143, 231, 94, 47}, 224: {223, 37, 70, 135, 232, 205, 48, 144, 18, 210, 86, 121, 186, 95}, 225: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 226: {161, 97, 168, 175, 59}, 227: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 228: {99}, 229: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 230: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 231: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 232: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 233: {104, 189}, 234: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 235: {192, 163, 100, 106, 11, 170, 202, 177, 117, 54, 184, 156, 61}, 236: {6, 9, 13, 158, 160, 165, 167, 172, 174, 179, 181, 56, 185, 58, 190, 63, 66, 197, 199, 203, 101, 107, 237, 113, 118}, 237: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 238: {109}, 239: {128, 133, 8, 136, 139, 12, 14, 16, 145, 20, 150, 153, 155, 28, 157, 162, 35, 164, 39, 169, 43, 171, 176, 50, 178, 53, 55, 183, 187, 60, 62, 65, 193, 194, 68, 195, 71, 201, 78, 206, 211, 84, 87, 217, 90, 222, 96, 224, 98, 227, 102, 103, 105, 233, 235, 108, 236, 110, 239, 116, 122}, 240: {111}})
Equivalent! frozenset({160, 58, 174, 167}) {120, 113, 127, 55}
Equivalent! frozenset({168, 161, 59, 175}) {56, 121, 114, 128}
Equivalent! frozenset({176, 169, 162, 60}) {129, 57, 122, 115}
Equivalent! frozenset({64, 240}) {64, 193}
Equivalent! frozenset({181, 199}) {152, 134}
Equivalent! frozenset({200, 182}) {153, 135}
Equivalent! frozenset({201, 183}) {136, 154}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9476e2aae8>, {0: {0}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {4}, 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {14}, 12: {15}, 13: {16}, 14: {17}, 15: {18}, 16: {19}, 17: {20}, 18: {21}, 19: {22}, 20: {23}, 21: {24}, 22: {25}, 23: {26}, 24: {27}, 25: {28}, 26: {29}, 27: {30}, 28: {31}, 29: {32}, 30: {33}, 31: {34}, 32: {35}, 33: {36}, 34: {37}, 35: {38}, 36: {39}, 37: {40}, 38: {41}, 39: {42}, 40: {43}, 41: {44}, 42: {45}, 43: {46}, 44: {47}, 45: {48}, 46: {49}, 47: {50}, 48: {51}, 49: {52}, 50: {53}, 51: {54}, 52: {55}, 53: {56, 197}, 54: {57, 198}, 55: {167}, 56: {168}, 57: {169}, 58: {202, 61}, 59: {236, 62}, 60: {2}, 61: {3}, 62: {1}, 63: {63}, 64: {64}, 65: {112}, 66: {113}, 67: {114}, 68: {115}, 69: {116}, 70: {117}, 71: {118}, 72: {119}, 73: {120}, 74: {121}, 75: {122}, 76: {123}, 77: {124}, 78: {125}, 79: {126}, 80: {127}, 81: {128}, 82: {129}, 83: {130}, 84: {131}, 85: {132}, 86: {133}, 87: {134}, 88: {135}, 89: {136}, 90: {137}, 91: {138}, 92: {139}, 93: {140}, 94: {141}, 95: {142}, 96: {143}, 97: {144}, 98: {145}, 99: {146}, 100: {147}, 101: {148}, 102: {149}, 103: {150}, 104: {151}, 105: {152}, 106: {153}, 107: {154}, 108: {155}, 109: {156}, 110: {157}, 111: {158}, 112: {159}, 113: {58}, 114: {59}, 115: {60}, 116: {163}, 117: {164}, 118: {165}, 119: {166}, 120: {160}, 121: {161}, 122: {162}, 123: {170}, 124: {171}, 125: {172}, 126: {173}, 127: {174}, 128: {175}, 129: {176}, 130: {177}, 131: {178}, 132: {179}, 133: {180}, 134: {199}, 135: {182}, 136: {201}, 137: {184}, 138: {185}, 139: {186}, 140: {187}, 141: {188}, 142: {189}, 143: {190}, 144: {191}, 145: {192}, 146: {193}, 147: {194}, 148: {195}, 149: {196}, 150: {197}, 151: {198}, 152: {181}, 153: {200}, 154: {183}, 155: {202}, 156: {203}, 157: {204}, 158: {205}, 159: {206}, 160: {207}, 161: {208}, 162: {209}, 163: {210}, 164: {211}, 165: {212}, 166: {213}, 167: {214}, 168: {215}, 169: {216}, 170: {217}, 171: {218}, 172: {219}, 173: {220}, 174: {221}, 175: {222}, 176: {223}, 177: {224}, 178: {225}, 179: {226}, 180: {227}, 181: {228}, 182: {229}, 183: {230}, 184: {231}, 185: {232}, 186: {233}, 187: {234}, 188: {235}, 189: {236}, 190: {237}, 191: {238}, 192: {239}, 193: {240}, 194: {65, 206}, 195: {66}, 196: {67}, 197: {68}, 198: {69}, 199: {70}, 200: {71}, 201: {72}, 202: {73}, 203: {74}, 204: {75}, 205: {76}, 206: {77}, 207: {78}, 208: {79}, 209: {80}, 210: {81}, 211: {82}, 212: {83}, 213: {84}, 214: {85}, 215: {86}, 216: {87}, 217: {88}, 218: {89}, 219: {90}, 220: {91}, 221: {92}, 222: {93}, 223: {94}, 224: {95}, 225: {96}, 226: {97}, 227: {98}, 228: {99}, 229: {100}, 230: {101}, 231: {102}, 232: {103}, 233: {104}, 234: {105}, 235: {106}, 236: {107}, 237: {108}, 238: {109}, 239: {110}, 240: {111}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 add add
EXACT 49 add add
EXACT 50 store store
EXACT 51 inttoptr inttoptr
EXACT 52 store store
MORE 53 POT: 2
MORE 54 POT: 2
EXACT 55 load load
EXACT 56 add add
EXACT 57 store store
MORE 58 POT: 2
MORE 59 POT: 2
EXACT 60 getelementptr getelementptr
EXACT 61 getelementptr getelementptr
EXACT 62 getelementptr getelementptr
EXACT 63 load load
EXACT 64 br br
EXACT 65 phi phi
EXACT 66 load load
EXACT 67 add add
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 load load
EXACT 72 add add
EXACT 73 icmp icmp
EXACT 74 zext zext
EXACT 75 store store
EXACT 76 and and
EXACT 77 tail tail
EXACT 78 trunc trunc
EXACT 79 and and
EXACT 80 xor xor
EXACT 81 store store
EXACT 82 xor xor
EXACT 83 lshr lshr
EXACT 84 trunc trunc
EXACT 85 and and
EXACT 86 store store
EXACT 87 icmp icmp
EXACT 88 zext zext
EXACT 89 store store
EXACT 90 lshr lshr
EXACT 91 trunc trunc
EXACT 92 store store
EXACT 93 lshr lshr
EXACT 94 xor xor
EXACT 95 add add
EXACT 96 icmp icmp
EXACT 97 zext zext
EXACT 98 store store
EXACT 99 icmp icmp
EXACT 100 xor xor
EXACT 101 select select
EXACT 102 add add
EXACT 103 store store
EXACT 104 br br
EXACT 105 add add
EXACT 106 store store
EXACT 107 add add
EXACT 108 store store
EXACT 109 inttoptr inttoptr
EXACT 110 store store
EXACT 111 load load
EXACT 112 add add
EXACT 113 load load
EXACT 114 add add
EXACT 115 store store
EXACT 116 inttoptr inttoptr
EXACT 117 store store
EXACT 118 load load
EXACT 119 add add
EXACT 120 load load
EXACT 121 add add
EXACT 122 store store
EXACT 123 inttoptr inttoptr
EXACT 124 store store
EXACT 125 load load
EXACT 126 add add
EXACT 127 load load
EXACT 128 add add
EXACT 129 store store
EXACT 130 inttoptr inttoptr
EXACT 131 store store
EXACT 132 load load
EXACT 133 add add
EXACT 134 load load
EXACT 135 add add
EXACT 136 store store
EXACT 137 inttoptr inttoptr
EXACT 138 load load
EXACT 139 zext zext
EXACT 140 store store
EXACT 141 add add
EXACT 142 add add
EXACT 143 load load
EXACT 144 add add
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 store store
EXACT 148 store store
EXACT 149 tail tail
EXACT 150 load load
EXACT 151 add add
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 load load
EXACT 157 add add
EXACT 158 zext zext
EXACT 159 store store
EXACT 160 icmp icmp
EXACT 161 icmp icmp
EXACT 162 or or
EXACT 163 zext zext
EXACT 164 store store
EXACT 165 and and
EXACT 166 tail tail
EXACT 167 trunc trunc
EXACT 168 and and
EXACT 169 xor xor
EXACT 170 store store
EXACT 171 xor xor
EXACT 172 lshr lshr
EXACT 173 trunc trunc
EXACT 174 and and
EXACT 175 store store
EXACT 176 zext zext
EXACT 177 store store
EXACT 178 lshr lshr
EXACT 179 trunc trunc
EXACT 180 store store
EXACT 181 lshr lshr
EXACT 182 xor xor
EXACT 183 add add
EXACT 184 icmp icmp
EXACT 185 zext zext
EXACT 186 store store
EXACT 187 add add
EXACT 188 store store
EXACT 189 store store
EXACT 190 load load
EXACT 191 add add
EXACT 192 store store
EXACT 193 br br
MORE 194 POT: 2
EXACT 195 load load
EXACT 196 add add
EXACT 197 store store
EXACT 198 icmp icmp
EXACT 199 zext zext
EXACT 200 store store
EXACT 201 trunc trunc
EXACT 202 and and
EXACT 203 tail tail
EXACT 204 trunc trunc
EXACT 205 and and
EXACT 206 xor xor
EXACT 207 store store
EXACT 208 xor xor
EXACT 209 xor xor
EXACT 210 lshr lshr
EXACT 211 trunc trunc
EXACT 212 and and
EXACT 213 store store
EXACT 214 icmp icmp
EXACT 215 zext zext
EXACT 216 store store
EXACT 217 lshr lshr
EXACT 218 trunc trunc
EXACT 219 store store
EXACT 220 lshr lshr
EXACT 221 xor xor
EXACT 222 add add
EXACT 223 icmp icmp
EXACT 224 zext zext
EXACT 225 store store
EXACT 226 add add
EXACT 227 store store
EXACT 228 add add
EXACT 229 inttoptr inttoptr
EXACT 230 load load
EXACT 231 store store
EXACT 232 store store
EXACT 233 add add
EXACT 234 store store
EXACT 235 inttoptr inttoptr
EXACT 236 load load
EXACT 237 store store
EXACT 238 add add
EXACT 239 store store
EXACT 240 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 3 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 4 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %3 = load i64, i64* %RBP, align 8
- 7 %4 = add i64 %1, 1
- 8 store i64 %4, i64* %PC, align 8
- 9 %5 = load i64, i64* %RSP, align 8
- 10 %6 = add i64 %5, -8
- 11 %7 = inttoptr i64 %6 to i64*
- 12 store i64 %3, i64* %7, align 8
- 13 %8 = load i64, i64* %PC, align 8
- 14 store i64 %6, i64* %RBP, align 8
- 15 %9 = add i64 %5, -56
- 16 store i64 %9, i64* %RSP, align 8
- 17 %10 = icmp ult i64 %6, 48
- 18 %11 = zext i1 %10 to i8
- 19 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 20 store i8 %11, i8* %12, align 1
- 21 %13 = trunc i64 %9 to i32
- 22 %14 = and i32 %13, 255
- 23 %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
- 24 %16 = trunc i32 %15 to i8
- 25 %17 = and i8 %16, 1
- 26 %18 = xor i8 %17, 1
- 27 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 28 store i8 %18, i8* %19, align 1
- 29 %20 = xor i64 %6, 16
- 30 %21 = xor i64 %20, %9
- 31 %22 = lshr i64 %21, 4
- 32 %23 = trunc i64 %22 to i8
- 33 %24 = and i8 %23, 1
- 34 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 35 store i8 %24, i8* %25, align 1
- 36 %26 = icmp eq i64 %9, 0
- 37 %27 = zext i1 %26 to i8
- 38 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 39 store i8 %27, i8* %28, align 1
- 40 %29 = lshr i64 %9, 63
- 41 %30 = trunc i64 %29 to i8
- 42 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 43 store i8 %30, i8* %31, align 1
- 44 %32 = lshr i64 %6, 63
- 45 %33 = xor i64 %29, %32
- 46 %34 = add nuw nsw i64 %33, %32
- 47 %35 = icmp eq i64 %34, 2
- 48 %36 = zext i1 %35 to i8
- 49 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 50 store i8 %36, i8* %37, align 1
- 51 %38 = add i64 %5, -12
- 52 %39 = add i64 %8, 14
- 53 store i64 %39, i64* %PC, align 8
- 54 %40 = inttoptr i64 %38 to i32*
- 55 store i32 0, i32* %40, align 4
- 56 %41 = load i64, i64* %RBP, align 8
- 57 %42 = add i64 %41, -36
- 58 %43 = load i64, i64* %PC, align 8
- 59 %44 = add i64 %43, 7
- 60 store i64 %44, i64* %PC, align 8
- 61 %45 = inttoptr i64 %42 to i32*
- 62 store i32 0, i32* %45, align 4
- 63 %.pre = load i64, i64* %PC, align 8
- 64 \<badref\> = br label %block_4005c6
- 65 store i64 0, i64* %RAX, align 8
- 66 %46 = load i64, i64* %RSP, align 8
- 67 %47 = add i64 %46, 48
- 68 store i64 %47, i64* %RSP, align 8
- 69 %48 = icmp ugt i64 %46, -49
- 70 %49 = zext i1 %48 to i8
- 71 store i8 %49, i8* %12, align 1
- 72 %50 = trunc i64 %47 to i32
- 73 %51 = and i32 %50, 255
- 74 %52 = tail call i32 @llvm.ctpop.i32(i32 %51) #12
- 75 %53 = trunc i32 %52 to i8
- 76 %54 = and i8 %53, 1
- 77 %55 = xor i8 %54, 1
- 78 store i8 %55, i8* %19, align 1
- 79 %56 = xor i64 %46, 16
- 80 %57 = xor i64 %56, %47
- 81 %58 = lshr i64 %57, 4
- 82 %59 = trunc i64 %58 to i8
- 83 %60 = and i8 %59, 1
- 84 store i8 %60, i8* %25, align 1
- 85 %61 = icmp eq i64 %47, 0
- 86 %62 = zext i1 %61 to i8
- 87 store i8 %62, i8* %28, align 1
- 88 %63 = lshr i64 %47, 63
- 89 %64 = trunc i64 %63 to i8
- 90 store i8 %64, i8* %31, align 1
- 91 %65 = lshr i64 %46, 63
- 92 %66 = xor i64 %63, %65
- 93 %67 = add nuw nsw i64 %66, %63
- 94 %68 = icmp eq i64 %67, 2
- 95 %69 = zext i1 %68 to i8
- 96 store i8 %69, i8* %37, align 1
- 97 %70 = add i64 %107, 7
- 98 store i64 %70, i64* %PC, align 8
- 99 %71 = add i64 %46, 56
- 100 %72 = inttoptr i64 %47 to i64*
- 101 %73 = load i64, i64* %72, align 8
- 102 store i64 %73, i64* %RBP, align 8
- 103 store i64 %71, i64* %RSP, align 8
- 104 %74 = add i64 %107, 8
- 105 store i64 %74, i64* %PC, align 8
- 106 %75 = inttoptr i64 %71 to i64*
- 107 %76 = load i64, i64* %75, align 8
- 108 store i64 %76, i64* %PC, align 8
- 109 %77 = add i64 %46, 64
- 110 store i64 %77, i64* %RSP, align 8
- 111 ret %struct.Memory* %2
- 112 %78 = phi i64 [ %170, %block_4005d0 ], [ %.pre, %block_4005b0 ]
- 113 %79 = load i64, i64* %RBP, align 8
- 114 %80 = add i64 %79, -36
- 115 %81 = add i64 %78, 4
- 116 store i64 %81, i64* %PC, align 8
- 117 %82 = inttoptr i64 %80 to i32*
- 118 %83 = load i32, i32* %82, align 4
- 119 %84 = add i32 %83, -5
- 120 %85 = icmp ult i32 %83, 5
- 121 %86 = zext i1 %85 to i8
- 122 store i8 %86, i8* %12, align 1
- 123 %87 = and i32 %84, 255
- 124 %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #12
- 125 %89 = trunc i32 %88 to i8
- 126 %90 = and i8 %89, 1
- 127 %91 = xor i8 %90, 1
- 128 store i8 %91, i8* %19, align 1
- 129 %92 = xor i32 %84, %83
- 130 %93 = lshr i32 %92, 4
- 131 %94 = trunc i32 %93 to i8
- 132 %95 = and i8 %94, 1
- 133 store i8 %95, i8* %25, align 1
- 134 %96 = icmp eq i32 %84, 0
- 135 %97 = zext i1 %96 to i8
- 136 store i8 %97, i8* %28, align 1
- 137 %98 = lshr i32 %84, 31
- 138 %99 = trunc i32 %98 to i8
- 139 store i8 %99, i8* %31, align 1
- 140 %100 = lshr i32 %83, 31
- 141 %101 = xor i32 %98, %100
- 142 %102 = add nuw nsw i32 %101, %100
- 143 %103 = icmp eq i32 %102, 2
- 144 %104 = zext i1 %103 to i8
- 145 store i8 %104, i8* %37, align 1
- 146 %105 = icmp ne i8 %99, 0
- 147 %106 = xor i1 %105, %103
- 148 %.v = select i1 %106, i64 10, i64 64
- 149 %107 = add i64 %78, %.v
- 150 store i64 %107, i64* %PC, align 8
- 151 \<badref\> = br i1 %106, label %block_4005d0, label %block_400606
- 152 %108 = add i64 %79, -32
- 153 store i64 %108, i64* %RSI, align 8
- 154 %109 = add i64 %107, 11
- 155 store i64 %109, i64* %PC, align 8
- 156 %110 = inttoptr i64 %108 to i32*
- 157 store i32 5, i32* %110, align 4
- 158 %111 = load i64, i64* %RBP, align 8
- 159 %112 = add i64 %111, -28
- 160 %113 = load i64, i64* %PC, align 8
- 161 %114 = add i64 %113, 7
- 162 store i64 %114, i64* %PC, align 8
- 163 %115 = inttoptr i64 %112 to i32*
- 164 store i32 6, i32* %115, align 4
- 165 %116 = load i64, i64* %RBP, align 8
- 166 %117 = add i64 %116, -24
- 167 %118 = load i64, i64* %PC, align 8
- 168 %119 = add i64 %118, 7
- 169 store i64 %119, i64* %PC, align 8
- 170 %120 = inttoptr i64 %117 to i32*
- 171 store i32 7, i32* %120, align 4
- 172 %121 = load i64, i64* %RBP, align 8
- 173 %122 = add i64 %121, -20
- 174 %123 = load i64, i64* %PC, align 8
- 175 %124 = add i64 %123, 7
- 176 store i64 %124, i64* %PC, align 8
- 177 %125 = inttoptr i64 %122 to i32*
- 178 store i32 8, i32* %125, align 4
- 179 %126 = load i64, i64* %RBP, align 8
- 180 %127 = add i64 %126, -36
- 181 %128 = load i64, i64* %PC, align 8
- 182 %129 = add i64 %128, 3
- 183 store i64 %129, i64* %PC, align 8
- 184 %130 = inttoptr i64 %127 to i32*
- 185 %131 = load i32, i32* %130, align 4
- 186 %132 = zext i32 %131 to i64
- 187 store i64 %132, i64* %RDI, align 8
- 188 %133 = add i64 %128, -208
- 189 %134 = add i64 %128, 8
- 190 %135 = load i64, i64* %RSP, align 8
- 191 %136 = add i64 %135, -8
- 192 %137 = inttoptr i64 %136 to i64*
- 193 store i64 %134, i64* %137, align 8
- 194 store i64 %136, i64* %RSP, align 8
- 195 store i64 %133, i64* %PC, align 8
- 196 %138 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %133, %struct.Memory* %2)
- 197 %139 = load i64, i64* %RBP, align 8
- 198 %140 = add i64 %139, -36
- 199 %141 = load i64, i64* %PC, align 8
- 200 %142 = add i64 %141, 3
- 201 store i64 %142, i64* %PC, align 8
- 202 %143 = inttoptr i64 %140 to i32*
- 203 %144 = load i32, i32* %143, align 4
- 204 %145 = add i32 %144, 1
- 205 %146 = zext i32 %145 to i64
- 206 store i64 %146, i64* %RAX, align 8
- 207 %147 = icmp eq i32 %144, -1
- 208 %148 = icmp eq i32 %145, 0
- 209 %149 = or i1 %147, %148
- 210 %150 = zext i1 %149 to i8
- 211 store i8 %150, i8* %12, align 1
- 212 %151 = and i32 %145, 255
- 213 %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #12
- 214 %153 = trunc i32 %152 to i8
- 215 %154 = and i8 %153, 1
- 216 %155 = xor i8 %154, 1
- 217 store i8 %155, i8* %19, align 1
- 218 %156 = xor i32 %145, %144
- 219 %157 = lshr i32 %156, 4
- 220 %158 = trunc i32 %157 to i8
- 221 %159 = and i8 %158, 1
- 222 store i8 %159, i8* %25, align 1
- 223 %160 = zext i1 %148 to i8
- 224 store i8 %160, i8* %28, align 1
- 225 %161 = lshr i32 %145, 31
- 226 %162 = trunc i32 %161 to i8
- 227 store i8 %162, i8* %31, align 1
- 228 %163 = lshr i32 %144, 31
- 229 %164 = xor i32 %161, %163
- 230 %165 = add nuw nsw i32 %164, %161
- 231 %166 = icmp eq i32 %165, 2
- 232 %167 = zext i1 %166 to i8
- 233 store i8 %167, i8* %37, align 1
- 234 %168 = add i64 %141, 9
- 235 store i64 %168, i64* %PC, align 8
- 236 store i32 %145, i32* %143, align 4
- 237 %169 = load i64, i64* %PC, align 8
- 238 %170 = add i64 %169, -59
- 239 store i64 %170, i64* %PC, align 8
- 240 \<badref\> = br label %block_4005c6
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9476e2a950>, {0: {0}, 1: {62}, 2: {60}, 3: {61}, 4: {5}, 5: {1}, 6: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 7: {3, 157}, 8: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 9: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 10: {144, 7}, 11: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 12: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 13: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 14: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 15: {12}, 16: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 17: {14}, 18: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 19: {16}, 20: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 21: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 22: {202, 19, 76, 165}, 23: {166, 203, 77, 20, 149}, 24: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 25: {168, 205, 174, 79, 212, 85, 22, 30}, 26: {80, 169, 206, 23}, 27: {24}, 28: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 29: {208, 26}, 30: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 31: {210, 172, 83, 28}, 32: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 33: {168, 205, 174, 79, 212, 85, 22, 30}, 34: {31}, 35: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 36: {161, 33, 99, 214, 87}, 37: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 38: {35}, 39: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 40: {41, 220, 217, 37}, 41: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 42: {39}, 43: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 44: {41, 220, 217, 37}, 45: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 46: {102, 43, 183, 222, 95}, 47: {96, 44, 184, 223}, 48: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 49: {46}, 50: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 51: {48}, 52: {49}, 53: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 54: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 55: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 56: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 57: {67, 133, 54, 151}, 58: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 59: {128, 226, 114, 56, 121}, 60: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 61: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 62: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 63: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 64: {64, 193}, 65: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 66: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 67: {196}, 68: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 69: {198}, 70: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 71: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 72: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 73: {202, 19, 76, 165}, 74: {166, 203, 77, 20, 149}, 75: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 76: {168, 205, 174, 79, 212, 85, 22, 30}, 77: {80, 169, 206, 23}, 78: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 79: {208, 26}, 80: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 81: {210, 172, 83, 28}, 82: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 83: {168, 205, 174, 79, 212, 85, 22, 30}, 84: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 85: {161, 33, 99, 214, 87}, 86: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 87: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 88: {41, 220, 217, 37}, 89: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 90: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 91: {41, 220, 217, 37}, 92: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 93: {102, 43, 183, 222, 95}, 94: {96, 44, 184, 223}, 95: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 96: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 97: {128, 226, 114, 56, 121}, 98: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 99: {228}, 100: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 101: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 102: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 103: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 104: {233, 142}, 105: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 106: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 107: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 108: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 109: {238}, 110: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 111: {240}, 112: {65}, 113: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 114: {67, 133, 54, 151}, 115: {68}, 116: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 117: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 118: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 119: {72}, 120: {73}, 121: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 122: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 123: {202, 19, 76, 165}, 124: {166, 203, 77, 20, 149}, 125: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 126: {168, 205, 174, 79, 212, 85, 22, 30}, 127: {80, 169, 206, 23}, 128: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 129: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 130: {210, 172, 83, 28}, 131: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 132: {168, 205, 174, 79, 212, 85, 22, 30}, 133: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 134: {161, 33, 99, 214, 87}, 135: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 136: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 137: {178, 90, 93, 181}, 138: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 139: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 140: {178, 90, 93, 181}, 141: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 142: {102, 43, 183, 222, 95}, 143: {96, 44, 184, 223}, 144: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 145: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 146: {161, 33, 99, 214, 87}, 147: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 148: {101}, 149: {102, 43, 183, 222, 95}, 150: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 151: {104}, 152: {105}, 153: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 154: {107}, 155: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 156: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 157: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 158: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 159: {112}, 160: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 161: {128, 226, 114, 56, 121}, 162: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 163: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 164: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 165: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 166: {119}, 167: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 168: {128, 226, 114, 56, 121}, 169: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 170: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 171: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 172: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 173: {126}, 174: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 175: {128, 226, 114, 56, 121}, 176: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 177: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 178: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 179: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 180: {67, 133, 54, 151}, 181: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 182: {153, 135}, 183: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 184: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 185: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 186: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 187: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 188: {141}, 189: {233, 142}, 190: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 191: {144, 7}, 192: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 193: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 194: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 195: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 196: {166, 203, 77, 20, 149}, 197: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 198: {67, 133, 54, 151}, 199: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 200: {153, 135}, 201: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 202: {130, 229, 70, 8, 137, 235, 155, 109, 145, 51, 116, 58, 123}, 203: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 204: {3, 157}, 205: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 206: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 207: {160}, 208: {161, 33, 99, 214, 87}, 209: {162}, 210: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 211: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 212: {202, 19, 76, 165}, 213: {166, 203, 77, 20, 149}, 214: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 215: {168, 205, 174, 79, 212, 85, 22, 30}, 216: {80, 169, 206, 23}, 217: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 218: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 219: {210, 172, 83, 28}, 220: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 221: {168, 205, 174, 79, 212, 85, 22, 30}, 222: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 223: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 224: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 225: {178, 90, 93, 181}, 226: {38, 167, 201, 204, 173, 78, 18, 179, 84, 21, 211, 218, 91, 29}, 227: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 228: {178, 90, 93, 181}, 229: {100, 42, 171, 209, 82, 182, 27, 221, 94}, 230: {102, 43, 183, 222, 95}, 231: {96, 44, 184, 223}, 232: {224, 97, 34, 163, 199, 74, 139, 45, 15, 176, 215, 88, 185, 158}, 233: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 234: {187}, 235: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 236: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 237: {2, 132, 6, 134, 10, 138, 143, 150, 152, 156, 53, 55, 190, 63, 66, 195, 71, 230, 236, 111, 113, 118, 120, 125, 127}, 238: {191}, 239: {129, 131, 4, 136, 9, 11, 140, 13, 17, 146, 147, 148, 25, 154, 159, 32, 36, 164, 40, 170, 47, 175, 177, 50, 52, 180, 57, 186, 59, 188, 189, 192, 194, 69, 197, 200, 75, 207, 81, 213, 86, 216, 89, 219, 92, 225, 98, 227, 103, 231, 232, 106, 234, 108, 237, 110, 239, 115, 117, 122, 124}, 240: {64, 193}})
Equivalent! frozenset({120, 113, 55, 127}) {160, 58, 174, 167}
Equivalent! frozenset({56, 121, 114, 128}) {168, 161, 59, 175}
Equivalent! frozenset({129, 122, 115, 57}) {176, 169, 162, 60}
Equivalent! frozenset({64, 193}) {64, 240}
Equivalent! frozenset({152, 134}) {181, 199}
Equivalent! frozenset({153, 135}) {200, 182}
Equivalent! frozenset({136, 154}) {201, 183}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f9476e2a950>, {0: {0}, 1: {62}, 2: {60}, 3: {61}, 4: {5}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: {11}, 15: {12}, 16: {13}, 17: {14}, 18: {15}, 19: {16}, 20: {17}, 21: {18}, 22: {19}, 23: {20}, 24: {21}, 25: {22}, 26: {23}, 27: {24}, 28: {25}, 29: {26}, 30: {27}, 31: {28}, 32: {29}, 33: {30}, 34: {31}, 35: {32}, 36: {33}, 37: {34}, 38: {35}, 39: {36}, 40: {37}, 41: {38}, 42: {39}, 43: {40}, 44: {41}, 45: {42}, 46: {43}, 47: {44}, 48: {45}, 49: {46}, 50: {47}, 51: {48}, 52: {49}, 53: {50}, 54: {51}, 55: {52}, 56: {53, 150}, 57: {54, 151}, 58: {113}, 59: {114}, 60: {57}, 61: {58, 155}, 62: {59, 189}, 63: {63}, 64: {64}, 65: {194, 159}, 66: {195}, 67: {196}, 68: {197}, 69: {198}, 70: {199}, 71: {200}, 72: {201}, 73: {202}, 74: {203}, 75: {204}, 76: {205}, 77: {206}, 78: {207}, 79: {208}, 80: {209}, 81: {210}, 82: {211}, 83: {212}, 84: {213}, 85: {214}, 86: {215}, 87: {216}, 88: {217}, 89: {218}, 90: {219}, 91: {220}, 92: {221}, 93: {222}, 94: {223}, 95: {224}, 96: {225}, 97: {226}, 98: {227}, 99: {228}, 100: {229}, 101: {230}, 102: {231}, 103: {232}, 104: {233}, 105: {234}, 106: {235}, 107: {236}, 108: {237}, 109: {238}, 110: {239}, 111: {240}, 112: {65}, 113: {66}, 114: {67}, 115: {68}, 116: {69}, 117: {70}, 118: {71}, 119: {72}, 120: {73}, 121: {74}, 122: {75}, 123: {76}, 124: {77}, 125: {78}, 126: {79}, 127: {80}, 128: {81}, 129: {82}, 130: {83}, 131: {84}, 132: {85}, 133: {86}, 134: {87}, 135: {88}, 136: {89}, 137: {90}, 138: {91}, 139: {92}, 140: {93}, 141: {94}, 142: {95}, 143: {96}, 144: {97}, 145: {98}, 146: {99}, 147: {100}, 148: {101}, 149: {102}, 150: {103}, 151: {104}, 152: {105}, 153: {106}, 154: {107}, 155: {108}, 156: {109}, 157: {110}, 158: {111}, 159: {112}, 160: {120}, 161: {121}, 162: {115}, 163: {116}, 164: {117}, 165: {118}, 166: {119}, 167: {127}, 168: {56}, 169: {122}, 170: {123}, 171: {124}, 172: {125}, 173: {126}, 174: {55}, 175: {128}, 176: {129}, 177: {130}, 178: {131}, 179: {132}, 180: {133}, 181: {152}, 182: {135}, 183: {154}, 184: {137}, 185: {138}, 186: {139}, 187: {140}, 188: {141}, 189: {142}, 190: {143}, 191: {144}, 192: {145}, 193: {146}, 194: {147}, 195: {148}, 196: {149}, 197: {150}, 198: {151}, 199: {134}, 200: {153}, 201: {136}, 202: {155}, 203: {156}, 204: {157}, 205: {158}, 206: {159}, 207: {160}, 208: {161}, 209: {162}, 210: {163}, 211: {164}, 212: {165}, 213: {166}, 214: {167}, 215: {168}, 216: {169}, 217: {170}, 218: {171}, 219: {172}, 220: {173}, 221: {174}, 222: {175}, 223: {176}, 224: {177}, 225: {178}, 226: {179}, 227: {180}, 228: {181}, 229: {182}, 230: {183}, 231: {184}, 232: {185}, 233: {186}, 234: {187}, 235: {188}, 236: {189}, 237: {190}, 238: {191}, 239: {192}, 240: {193}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 store store
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 store store
EXACT 17 icmp icmp
EXACT 18 zext zext
EXACT 19 getelementptr getelementptr
EXACT 20 store store
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 tail tail
EXACT 24 trunc trunc
EXACT 25 and and
EXACT 26 xor xor
EXACT 27 getelementptr getelementptr
EXACT 28 store store
EXACT 29 xor xor
EXACT 30 xor xor
EXACT 31 lshr lshr
EXACT 32 trunc trunc
EXACT 33 and and
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 icmp icmp
EXACT 37 zext zext
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 trunc trunc
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 xor xor
EXACT 46 add add
EXACT 47 icmp icmp
EXACT 48 zext zext
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 add add
EXACT 52 add add
EXACT 53 store store
EXACT 54 inttoptr inttoptr
EXACT 55 store store
MORE 56 POT: 2
MORE 57 POT: 2
EXACT 58 load load
EXACT 59 add add
EXACT 60 store store
MORE 61 POT: 2
MORE 62 POT: 2
EXACT 63 load load
EXACT 64 br br
MORE 65 POT: 2
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 icmp icmp
EXACT 70 zext zext
EXACT 71 store store
EXACT 72 trunc trunc
EXACT 73 and and
EXACT 74 tail tail
EXACT 75 trunc trunc
EXACT 76 and and
EXACT 77 xor xor
EXACT 78 store store
EXACT 79 xor xor
EXACT 80 xor xor
EXACT 81 lshr lshr
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 store store
EXACT 85 icmp icmp
EXACT 86 zext zext
EXACT 87 store store
EXACT 88 lshr lshr
EXACT 89 trunc trunc
EXACT 90 store store
EXACT 91 lshr lshr
EXACT 92 xor xor
EXACT 93 add add
EXACT 94 icmp icmp
EXACT 95 zext zext
EXACT 96 store store
EXACT 97 add add
EXACT 98 store store
EXACT 99 add add
EXACT 100 inttoptr inttoptr
EXACT 101 load load
EXACT 102 store store
EXACT 103 store store
EXACT 104 add add
EXACT 105 store store
EXACT 106 inttoptr inttoptr
EXACT 107 load load
EXACT 108 store store
EXACT 109 add add
EXACT 110 store store
EXACT 111 ret ret
EXACT 112 phi phi
EXACT 113 load load
EXACT 114 add add
EXACT 115 add add
EXACT 116 store store
EXACT 117 inttoptr inttoptr
EXACT 118 load load
EXACT 119 add add
EXACT 120 icmp icmp
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 and and
EXACT 124 tail tail
EXACT 125 trunc trunc
EXACT 126 and and
EXACT 127 xor xor
EXACT 128 store store
EXACT 129 xor xor
EXACT 130 lshr lshr
EXACT 131 trunc trunc
EXACT 132 and and
EXACT 133 store store
EXACT 134 icmp icmp
EXACT 135 zext zext
EXACT 136 store store
EXACT 137 lshr lshr
EXACT 138 trunc trunc
EXACT 139 store store
EXACT 140 lshr lshr
EXACT 141 xor xor
EXACT 142 add add
EXACT 143 icmp icmp
EXACT 144 zext zext
EXACT 145 store store
EXACT 146 icmp icmp
EXACT 147 xor xor
EXACT 148 select select
EXACT 149 add add
EXACT 150 store store
EXACT 151 br br
EXACT 152 add add
EXACT 153 store store
EXACT 154 add add
EXACT 155 store store
EXACT 156 inttoptr inttoptr
EXACT 157 store store
EXACT 158 load load
EXACT 159 add add
EXACT 160 load load
EXACT 161 add add
EXACT 162 store store
EXACT 163 inttoptr inttoptr
EXACT 164 store store
EXACT 165 load load
EXACT 166 add add
EXACT 167 load load
EXACT 168 add add
EXACT 169 store store
EXACT 170 inttoptr inttoptr
EXACT 171 store store
EXACT 172 load load
EXACT 173 add add
EXACT 174 load load
EXACT 175 add add
EXACT 176 store store
EXACT 177 inttoptr inttoptr
EXACT 178 store store
EXACT 179 load load
EXACT 180 add add
EXACT 181 load load
EXACT 182 add add
EXACT 183 store store
EXACT 184 inttoptr inttoptr
EXACT 185 load load
EXACT 186 zext zext
EXACT 187 store store
EXACT 188 add add
EXACT 189 add add
EXACT 190 load load
EXACT 191 add add
EXACT 192 inttoptr inttoptr
EXACT 193 store store
EXACT 194 store store
EXACT 195 store store
EXACT 196 tail tail
EXACT 197 load load
EXACT 198 add add
EXACT 199 load load
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 add add
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 icmp icmp
EXACT 208 icmp icmp
EXACT 209 or or
EXACT 210 zext zext
EXACT 211 store store
EXACT 212 and and
EXACT 213 tail tail
EXACT 214 trunc trunc
EXACT 215 and and
EXACT 216 xor xor
EXACT 217 store store
EXACT 218 xor xor
EXACT 219 lshr lshr
EXACT 220 trunc trunc
EXACT 221 and and
EXACT 222 store store
EXACT 223 zext zext
EXACT 224 store store
EXACT 225 lshr lshr
EXACT 226 trunc trunc
EXACT 227 store store
EXACT 228 lshr lshr
EXACT 229 xor xor
EXACT 230 add add
EXACT 231 icmp icmp
EXACT 232 zext zext
EXACT 233 store store
EXACT 234 add add
EXACT 235 store store
EXACT 236 store store
EXACT 237 load load
EXACT 238 add add
EXACT 239 store store
EXACT 240 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 48', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 14', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%45 = load i64, i64* %3, align 8', '%46 = add i64 %45, 7', 'store i64 %46, i64* %3, align 8', '%RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%48 = phi i64 [ %139, %block_4005d0 ], [ %.pre, %entry ]', '%51 = add i64 %48, 4', 'store i64 %51, i64* %3, align 8', '%55 = icmp ult i32 %53, 5', '%56 = zext i1 %55 to i8', 'store i8 %56, i8* %14, align 1', '%57 = and i32 %54, 255', '%58 = tail call i32 @llvm.ctpop.i32(i32 %57)', '%59 = trunc i32 %58 to i8', '%60 = and i8 %59, 1', '%61 = xor i8 %60, 1', 'store i8 %61, i8* %21, align 1', '%62 = xor i32 %54, %53', '%63 = lshr i32 %62, 4', '%64 = trunc i32 %63 to i8', '%65 = and i8 %64, 1', 'store i8 %65, i8* %27, align 1', '%66 = icmp eq i32 %54, 0', '%67 = zext i1 %66 to i8', 'store i8 %67, i8* %30, align 1', 'store i8 %69, i8* %33, align 1', '%74 = zext i1 %73 to i8', 'store i8 %74, i8* %39, align 1', '%.v = select i1 %76, i64 10, i64 64', '%77 = add i64 %48, %.v', 'store i64 %77, i64* %3, align 8', '%78 = add i64 %49, -32', 'store i64 %78, i64* %RSI.i, align 8', '%79 = add i64 %77, 11', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %78 to i32*', 'store i32 5, i32* %80, align 4', '%81 = load i64, i64* %RBP.i, align 8', '%82 = add i64 %81, -28', '%83 = load i64, i64* %3, align 8', '%84 = add i64 %83, 7', 'store i64 %84, i64* %3, align 8', '%85 = inttoptr i64 %82 to i32*', 'store i32 6, i32* %85, align 4', '%86 = load i64, i64* %RBP.i, align 8', '%87 = add i64 %86, -24', '%88 = load i64, i64* %3, align 8', '%89 = add i64 %88, 7', 'store i64 %89, i64* %3, align 8', '%90 = inttoptr i64 %87 to i32*', 'store i32 7, i32* %90, align 4', '%91 = load i64, i64* %RBP.i, align 8', '%92 = add i64 %91, -20', '%93 = load i64, i64* %3, align 8', '%94 = add i64 %93, 7', 'store i64 %94, i64* %3, align 8', '%95 = inttoptr i64 %92 to i32*', 'store i32 8, i32* %95, align 4', '%96 = load i64, i64* %RBP.i, align 8', '%97 = add i64 %96, -36', '%98 = load i64, i64* %3, align 8', '%99 = add i64 %98, 3', 'store i64 %99, i64* %3, align 8', '%100 = inttoptr i64 %97 to i32*', '%101 = load i32, i32* %100, align 4', '%102 = zext i32 %101 to i64', 'store i64 %102, i64* %RDI.i, align 8', '%103 = add i64 %98, -208', '%104 = add i64 %98, 8', '%105 = load i64, i64* %6, align 8', '%106 = add i64 %105, -8', '%107 = inttoptr i64 %106 to i64*', 'store i64 %104, i64* %107, align 8', 'store i64 %106, i64* %6, align 8', 'store i64 %103, i64* %3, align 8', '%call2_4005f3 = tail call %struct.Memory* @sub_400520.foo(%struct.State* nonnull %0, i64 %103, %struct.Memory* %2)', '%108 = load i64, i64* %RBP.i, align 8', '%109 = add i64 %108, -36', '%110 = load i64, i64* %3, align 8', '%111 = add i64 %110, 3', 'store i64 %111, i64* %3, align 8', '%112 = inttoptr i64 %109 to i32*', '%113 = load i32, i32* %112, align 4', '%114 = add i32 %113, 1', '%115 = zext i32 %114 to i64', 'store i64 %115, i64* %RAX.i13, align 8', '%116 = icmp eq i32 %113, -1', '%117 = icmp eq i32 %114, 0', '%118 = or i1 %116, %117', '%119 = zext i1 %118 to i8', 'store i8 %119, i8* %14, align 1', '%120 = and i32 %114, 255', '%121 = tail call i32 @llvm.ctpop.i32(i32 %120)', '%122 = trunc i32 %121 to i8', '%123 = and i8 %122, 1', '%124 = xor i8 %123, 1', 'store i8 %124, i8* %21, align 1', '%125 = xor i32 %114, %113', '%126 = lshr i32 %125, 4', '%127 = trunc i32 %126 to i8', '%128 = and i8 %127, 1', 'store i8 %128, i8* %27, align 1', '%129 = zext i1 %117 to i8', 'store i8 %129, i8* %30, align 1', '%130 = lshr i32 %114, 31', '%131 = trunc i32 %130 to i8', 'store i8 %131, i8* %33, align 1', '%132 = lshr i32 %113, 31', '%133 = xor i32 %130, %132', '%134 = add nuw nsw i32 %133, %130', '%135 = icmp eq i32 %134, 2', '%136 = zext i1 %135 to i8', 'store i8 %136, i8* %39, align 1', '%137 = add i64 %110, 9', 'store i64 %137, i64* %3, align 8', 'store i32 %114, i32* %112, align 4', '%138 = load i64, i64* %3, align 8', '%139 = add i64 %138, -59', 'store i64 %139, i64* %3, align 8', '%140 = load i64, i64* %6, align 8', '%141 = add i64 %140, 48', 'store i64 %141, i64* %6, align 8', '%142 = icmp ugt i64 %140, -49', '%143 = zext i1 %142 to i8', 'store i8 %143, i8* %14, align 1', '%144 = trunc i64 %141 to i32', '%145 = and i32 %144, 255', '%146 = tail call i32 @llvm.ctpop.i32(i32 %145)', '%147 = trunc i32 %146 to i8', '%148 = and i8 %147, 1', '%149 = xor i8 %148, 1', 'store i8 %149, i8* %21, align 1', '%150 = xor i64 %140, 16', '%151 = xor i64 %150, %141', '%152 = lshr i64 %151, 4', '%153 = trunc i64 %152 to i8', '%154 = and i8 %153, 1', 'store i8 %154, i8* %27, align 1', '%155 = icmp eq i64 %141, 0', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %30, align 1', '%157 = lshr i64 %141, 63', '%158 = trunc i64 %157 to i8', 'store i8 %158, i8* %33, align 1', '%159 = lshr i64 %140, 63', '%160 = xor i64 %157, %159', '%161 = add nuw nsw i64 %160, %157', '%162 = icmp eq i64 %161, 2', '%163 = zext i1 %162 to i8', 'store i8 %163, i8* %39, align 1', '%164 = add i64 %77, 7', 'store i64 %164, i64* %3, align 8', '%165 = add i64 %140, 56', '%166 = inttoptr i64 %141 to i64*', '%167 = load i64, i64* %166, align 8', 'store i64 %167, i64* %RBP.i, align 8', 'store i64 %165, i64* %6, align 8', '%168 = add i64 %77, 8', 'store i64 %168, i64* %3, align 8', '%169 = inttoptr i64 %165 to i64*', '%170 = load i64, i64* %169, align 8', 'store i64 %170, i64* %3, align 8', '%171 = add i64 %140, 64', 'store i64 %171, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -56
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 48
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 14
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Keep: %43 = load i64, i64* %RBP.i, align 8
Keep: %44 = add i64 %43, -36
Found line to remove! %45 = load i64, i64* %3, align 8
Found line to remove! %46 = add i64 %45, 7
Found line to remove! store i64 %46, i64* %3, align 8
Keep: %47 = inttoptr i64 %44 to i32*
Keep: store i32 0, i32* %47, align 4
Found line to remove! %RSI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Keep: %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_4005c6
Keep: 
Keep: block_.L_4005c6:                                  ; preds = %block_4005d0, %entry
Found line to remove! %48 = phi i64 [ %139, %block_4005d0 ], [ %.pre, %entry ]
Keep: %49 = load i64, i64* %RBP.i, align 8
Keep: %50 = add i64 %49, -36
Found line to remove! %51 = add i64 %48, 4
Found line to remove! store i64 %51, i64* %3, align 8
Keep: %52 = inttoptr i64 %50 to i32*
Keep: %53 = load i32, i32* %52, align 4
Keep: %54 = add i32 %53, -5
Found line to remove! %55 = icmp ult i32 %53, 5
Found line to remove! %56 = zext i1 %55 to i8
Found line to remove! store i8 %56, i8* %14, align 1
Found line to remove! %57 = and i32 %54, 255
Found line to remove! %58 = tail call i32 @llvm.ctpop.i32(i32 %57)
Found line to remove! %59 = trunc i32 %58 to i8
Found line to remove! %60 = and i8 %59, 1
Found line to remove! %61 = xor i8 %60, 1
Found line to remove! store i8 %61, i8* %21, align 1
Found line to remove! %62 = xor i32 %54, %53
Found line to remove! %63 = lshr i32 %62, 4
Found line to remove! %64 = trunc i32 %63 to i8
Found line to remove! %65 = and i8 %64, 1
Found line to remove! store i8 %65, i8* %27, align 1
Found line to remove! %66 = icmp eq i32 %54, 0
Found line to remove! %67 = zext i1 %66 to i8
Found line to remove! store i8 %67, i8* %30, align 1
Keep: %68 = lshr i32 %54, 31
Keep: %69 = trunc i32 %68 to i8
Found line to remove! store i8 %69, i8* %33, align 1
Keep: %70 = lshr i32 %53, 31
Keep: %71 = xor i32 %68, %70
Keep: %72 = add nuw nsw i32 %71, %70
Keep: %73 = icmp eq i32 %72, 2
Found line to remove! %74 = zext i1 %73 to i8
Found line to remove! store i8 %74, i8* %39, align 1
Keep: %75 = icmp ne i8 %69, 0
Keep: %76 = xor i1 %75, %73
Found line to remove! %.v = select i1 %76, i64 10, i64 64
Found line to remove! %77 = add i64 %48, %.v
Found line to remove! store i64 %77, i64* %3, align 8
Keep: br i1 %76, label %block_4005d0, label %block_.L_400606
Keep: 
Keep: block_4005d0:                                     ; preds = %block_.L_4005c6
Found line to remove! %78 = add i64 %49, -32
Found line to remove! store i64 %78, i64* %RSI.i, align 8
Found line to remove! %79 = add i64 %77, 11
Found line to remove! store i64 %79, i64* %3, align 8
Found line to remove! %80 = inttoptr i64 %78 to i32*
Found line to remove! store i32 5, i32* %80, align 4
Found line to remove! %81 = load i64, i64* %RBP.i, align 8
Found line to remove! %82 = add i64 %81, -28
Found line to remove! %83 = load i64, i64* %3, align 8
Found line to remove! %84 = add i64 %83, 7
Found line to remove! store i64 %84, i64* %3, align 8
Found line to remove! %85 = inttoptr i64 %82 to i32*
Found line to remove! store i32 6, i32* %85, align 4
Found line to remove! %86 = load i64, i64* %RBP.i, align 8
Found line to remove! %87 = add i64 %86, -24
Found line to remove! %88 = load i64, i64* %3, align 8
Found line to remove! %89 = add i64 %88, 7
Found line to remove! store i64 %89, i64* %3, align 8
Found line to remove! %90 = inttoptr i64 %87 to i32*
Found line to remove! store i32 7, i32* %90, align 4
Found line to remove! %91 = load i64, i64* %RBP.i, align 8
Found line to remove! %92 = add i64 %91, -20
Found line to remove! %93 = load i64, i64* %3, align 8
Found line to remove! %94 = add i64 %93, 7
Found line to remove! store i64 %94, i64* %3, align 8
Found line to remove! %95 = inttoptr i64 %92 to i32*
Found line to remove! store i32 8, i32* %95, align 4
Found line to remove! %96 = load i64, i64* %RBP.i, align 8
Found line to remove! %97 = add i64 %96, -36
Found line to remove! %98 = load i64, i64* %3, align 8
Found line to remove! %99 = add i64 %98, 3
Found line to remove! store i64 %99, i64* %3, align 8
Found line to remove! %100 = inttoptr i64 %97 to i32*
Found line to remove! %101 = load i32, i32* %100, align 4
Found line to remove! %102 = zext i32 %101 to i64
Found line to remove! store i64 %102, i64* %RDI.i, align 8
Found line to remove! %103 = add i64 %98, -208
Found line to remove! %104 = add i64 %98, 8
Found line to remove! %105 = load i64, i64* %6, align 8
Found line to remove! %106 = add i64 %105, -8
Found line to remove! %107 = inttoptr i64 %106 to i64*
Found line to remove! store i64 %104, i64* %107, align 8
Found line to remove! store i64 %106, i64* %6, align 8
Found line to remove! store i64 %103, i64* %3, align 8
Found line to remove! %call2_4005f3 = tail call %struct.Memory* @sub_400520.foo(%struct.State* nonnull %0, i64 %103, %struct.Memory* %2)
Found line to remove! %108 = load i64, i64* %RBP.i, align 8
Found line to remove! %109 = add i64 %108, -36
Found line to remove! %110 = load i64, i64* %3, align 8
Found line to remove! %111 = add i64 %110, 3
Found line to remove! store i64 %111, i64* %3, align 8
Found line to remove! %112 = inttoptr i64 %109 to i32*
Found line to remove! %113 = load i32, i32* %112, align 4
Found line to remove! %114 = add i32 %113, 1
Found line to remove! %115 = zext i32 %114 to i64
Found line to remove! store i64 %115, i64* %RAX.i13, align 8
Found line to remove! %116 = icmp eq i32 %113, -1
Found line to remove! %117 = icmp eq i32 %114, 0
Found line to remove! %118 = or i1 %116, %117
Found line to remove! %119 = zext i1 %118 to i8
Found line to remove! store i8 %119, i8* %14, align 1
Found line to remove! %120 = and i32 %114, 255
Found line to remove! %121 = tail call i32 @llvm.ctpop.i32(i32 %120)
Found line to remove! %122 = trunc i32 %121 to i8
Found line to remove! %123 = and i8 %122, 1
Found line to remove! %124 = xor i8 %123, 1
Found line to remove! store i8 %124, i8* %21, align 1
Found line to remove! %125 = xor i32 %114, %113
Found line to remove! %126 = lshr i32 %125, 4
Found line to remove! %127 = trunc i32 %126 to i8
Found line to remove! %128 = and i8 %127, 1
Found line to remove! store i8 %128, i8* %27, align 1
Found line to remove! %129 = zext i1 %117 to i8
Found line to remove! store i8 %129, i8* %30, align 1
Found line to remove! %130 = lshr i32 %114, 31
Found line to remove! %131 = trunc i32 %130 to i8
Found line to remove! store i8 %131, i8* %33, align 1
Found line to remove! %132 = lshr i32 %113, 31
Found line to remove! %133 = xor i32 %130, %132
Found line to remove! %134 = add nuw nsw i32 %133, %130
Found line to remove! %135 = icmp eq i32 %134, 2
Found line to remove! %136 = zext i1 %135 to i8
Found line to remove! store i8 %136, i8* %39, align 1
Found line to remove! %137 = add i64 %110, 9
Found line to remove! store i64 %137, i64* %3, align 8
Found line to remove! store i32 %114, i32* %112, align 4
Found line to remove! %138 = load i64, i64* %3, align 8
Found line to remove! %139 = add i64 %138, -59
Found line to remove! store i64 %139, i64* %3, align 8
Keep: br label %block_.L_4005c6
Keep: 
Keep: block_.L_400606:                                  ; preds = %block_.L_4005c6
Keep: store i64 0, i64* %RAX.i13, align 8
Found line to remove! %140 = load i64, i64* %6, align 8
Found line to remove! %141 = add i64 %140, 48
Found line to remove! store i64 %141, i64* %6, align 8
Found line to remove! %142 = icmp ugt i64 %140, -49
Found line to remove! %143 = zext i1 %142 to i8
Found line to remove! store i8 %143, i8* %14, align 1
Found line to remove! %144 = trunc i64 %141 to i32
Found line to remove! %145 = and i32 %144, 255
Found line to remove! %146 = tail call i32 @llvm.ctpop.i32(i32 %145)
Found line to remove! %147 = trunc i32 %146 to i8
Found line to remove! %148 = and i8 %147, 1
Found line to remove! %149 = xor i8 %148, 1
Found line to remove! store i8 %149, i8* %21, align 1
Found line to remove! %150 = xor i64 %140, 16
Found line to remove! %151 = xor i64 %150, %141
Found line to remove! %152 = lshr i64 %151, 4
Found line to remove! %153 = trunc i64 %152 to i8
Found line to remove! %154 = and i8 %153, 1
Found line to remove! store i8 %154, i8* %27, align 1
Found line to remove! %155 = icmp eq i64 %141, 0
Found line to remove! %156 = zext i1 %155 to i8
Found line to remove! store i8 %156, i8* %30, align 1
Found line to remove! %157 = lshr i64 %141, 63
Found line to remove! %158 = trunc i64 %157 to i8
Found line to remove! store i8 %158, i8* %33, align 1
Found line to remove! %159 = lshr i64 %140, 63
Found line to remove! %160 = xor i64 %157, %159
Found line to remove! %161 = add nuw nsw i64 %160, %157
Found line to remove! %162 = icmp eq i64 %161, 2
Found line to remove! %163 = zext i1 %162 to i8
Found line to remove! store i8 %163, i8* %39, align 1
Found line to remove! %164 = add i64 %77, 7
Found line to remove! store i64 %164, i64* %3, align 8
Found line to remove! %165 = add i64 %140, 56
Found line to remove! %166 = inttoptr i64 %141 to i64*
Found line to remove! %167 = load i64, i64* %166, align 8
Found line to remove! store i64 %167, i64* %RBP.i, align 8
Found line to remove! store i64 %165, i64* %6, align 8
Found line to remove! %168 = add i64 %77, 8
Found line to remove! store i64 %168, i64* %3, align 8
Found line to remove! %169 = inttoptr i64 %165 to i64*
Found line to remove! %170 = load i64, i64* %169, align 8
Found line to remove! store i64 %170, i64* %3, align 8
Found line to remove! %171 = add i64 %140, 64
Found line to remove! store i64 %171, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = load i64, i64* %RSP, align 8', '%6 = add i64 %5, -8', '%7 = inttoptr i64 %6 to i64*', 'store i64 %3, i64* %7, align 8', '%8 = load i64, i64* %PC, align 8', 'store i64 %6, i64* %RBP, align 8', '%9 = add i64 %5, -56', 'store i64 %9, i64* %RSP, align 8', '%10 = icmp ult i64 %6, 48', '%11 = zext i1 %10 to i8', '%12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %11, i8* %12, align 1', '%13 = trunc i64 %9 to i32', '%14 = and i32 %13, 255', '%15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12', '%16 = trunc i32 %15 to i8', '%17 = and i8 %16, 1', '%18 = xor i8 %17, 1', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %18, i8* %19, align 1', '%20 = xor i64 %6, 16', '%21 = xor i64 %20, %9', '%22 = lshr i64 %21, 4', '%23 = trunc i64 %22 to i8', '%24 = and i8 %23, 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %24, i8* %25, align 1', '%26 = icmp eq i64 %9, 0', '%27 = zext i1 %26 to i8', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %27, i8* %28, align 1', '%29 = lshr i64 %9, 63', '%30 = trunc i64 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %6, 63', '%33 = xor i64 %29, %32', '%34 = add nuw nsw i64 %33, %32', '%35 = icmp eq i64 %34, 2', '%36 = zext i1 %35 to i8', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %36, i8* %37, align 1', '%38 = add i64 %5, -12', '%39 = add i64 %8, 14', 'store i64 %39, i64* %PC, align 8', '%40 = inttoptr i64 %38 to i32*', 'store i32 0, i32* %40, align 4', '%43 = load i64, i64* %PC, align 8', '%44 = add i64 %43, 7', 'store i64 %44, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%46 = load i64, i64* %RSP, align 8', '%47 = add i64 %46, 48', 'store i64 %47, i64* %RSP, align 8', '%48 = icmp ugt i64 %46, -49', '%49 = zext i1 %48 to i8', 'store i8 %49, i8* %12, align 1', '%50 = trunc i64 %47 to i32', '%51 = and i32 %50, 255', '%52 = tail call i32 @llvm.ctpop.i32(i32 %51) #12', '%53 = trunc i32 %52 to i8', '%54 = and i8 %53, 1', '%55 = xor i8 %54, 1', 'store i8 %55, i8* %19, align 1', '%56 = xor i64 %46, 16', '%57 = xor i64 %56, %47', '%58 = lshr i64 %57, 4', '%59 = trunc i64 %58 to i8', '%60 = and i8 %59, 1', 'store i8 %60, i8* %25, align 1', '%61 = icmp eq i64 %47, 0', '%62 = zext i1 %61 to i8', 'store i8 %62, i8* %28, align 1', '%63 = lshr i64 %47, 63', '%64 = trunc i64 %63 to i8', 'store i8 %64, i8* %31, align 1', '%65 = lshr i64 %46, 63', '%66 = xor i64 %63, %65', '%67 = add nuw nsw i64 %66, %63', '%68 = icmp eq i64 %67, 2', '%69 = zext i1 %68 to i8', 'store i8 %69, i8* %37, align 1', '%70 = add i64 %107, 7', 'store i64 %70, i64* %PC, align 8', '%71 = add i64 %46, 56', '%72 = inttoptr i64 %47 to i64*', '%73 = load i64, i64* %72, align 8', 'store i64 %73, i64* %RBP, align 8', 'store i64 %71, i64* %RSP, align 8', '%74 = add i64 %107, 8', 'store i64 %74, i64* %PC, align 8', '%75 = inttoptr i64 %71 to i64*', '%76 = load i64, i64* %75, align 8', 'store i64 %76, i64* %PC, align 8', '%77 = add i64 %46, 64', 'store i64 %77, i64* %RSP, align 8', 'ret %struct.Memory* %2', '%78 = phi i64 [ %170, %block_4005d0 ], [ %.pre, %block_4005b0 ]', '%81 = add i64 %78, 4', 'store i64 %81, i64* %PC, align 8', '%85 = icmp ult i32 %83, 5', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %12, align 1', '%87 = and i32 %84, 255', '%88 = tail call i32 @llvm.ctpop.i32(i32 %87) #12', '%89 = trunc i32 %88 to i8', '%90 = and i8 %89, 1', '%91 = xor i8 %90, 1', 'store i8 %91, i8* %19, align 1', '%92 = xor i32 %84, %83', '%93 = lshr i32 %92, 4', '%94 = trunc i32 %93 to i8', '%95 = and i8 %94, 1', 'store i8 %95, i8* %25, align 1', '%96 = icmp eq i32 %84, 0', '%97 = zext i1 %96 to i8', 'store i8 %97, i8* %28, align 1', 'store i8 %99, i8* %31, align 1', '%104 = zext i1 %103 to i8', 'store i8 %104, i8* %37, align 1', '%.v = select i1 %106, i64 10, i64 64', '%107 = add i64 %78, %.v', 'store i64 %107, i64* %PC, align 8', '%108 = add i64 %79, -32', 'store i64 %108, i64* %RSI, align 8', '%109 = add i64 %107, 11', 'store i64 %109, i64* %PC, align 8', '%110 = inttoptr i64 %108 to i32*', 'store i32 5, i32* %110, align 4', '%111 = load i64, i64* %RBP, align 8', '%112 = add i64 %111, -28', '%113 = load i64, i64* %PC, align 8', '%114 = add i64 %113, 7', 'store i64 %114, i64* %PC, align 8', '%115 = inttoptr i64 %112 to i32*', 'store i32 6, i32* %115, align 4', '%116 = load i64, i64* %RBP, align 8', '%117 = add i64 %116, -24', '%118 = load i64, i64* %PC, align 8', '%119 = add i64 %118, 7', 'store i64 %119, i64* %PC, align 8', '%120 = inttoptr i64 %117 to i32*', 'store i32 7, i32* %120, align 4', '%121 = load i64, i64* %RBP, align 8', '%122 = add i64 %121, -20', '%123 = load i64, i64* %PC, align 8', '%124 = add i64 %123, 7', 'store i64 %124, i64* %PC, align 8', '%125 = inttoptr i64 %122 to i32*', 'store i32 8, i32* %125, align 4', '%126 = load i64, i64* %RBP, align 8', '%127 = add i64 %126, -36', '%128 = load i64, i64* %PC, align 8', '%129 = add i64 %128, 3', 'store i64 %129, i64* %PC, align 8', '%130 = inttoptr i64 %127 to i32*', '%131 = load i32, i32* %130, align 4', '%132 = zext i32 %131 to i64', 'store i64 %132, i64* %RDI, align 8', '%133 = add i64 %128, -208', '%134 = add i64 %128, 8', '%135 = load i64, i64* %RSP, align 8', '%136 = add i64 %135, -8', '%137 = inttoptr i64 %136 to i64*', 'store i64 %134, i64* %137, align 8', 'store i64 %136, i64* %RSP, align 8', 'store i64 %133, i64* %PC, align 8', '%138 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %133, %struct.Memory* %2)', '%139 = load i64, i64* %RBP, align 8', '%140 = add i64 %139, -36', '%141 = load i64, i64* %PC, align 8', '%142 = add i64 %141, 3', 'store i64 %142, i64* %PC, align 8', '%143 = inttoptr i64 %140 to i32*', '%144 = load i32, i32* %143, align 4', '%145 = add i32 %144, 1', '%146 = zext i32 %145 to i64', 'store i64 %146, i64* %RAX, align 8', '%147 = icmp eq i32 %144, -1', '%148 = icmp eq i32 %145, 0', '%149 = or i1 %147, %148', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %12, align 1', '%151 = and i32 %145, 255', '%152 = tail call i32 @llvm.ctpop.i32(i32 %151) #12', '%153 = trunc i32 %152 to i8', '%154 = and i8 %153, 1', '%155 = xor i8 %154, 1', 'store i8 %155, i8* %19, align 1', '%156 = xor i32 %145, %144', '%157 = lshr i32 %156, 4', '%158 = trunc i32 %157 to i8', '%159 = and i8 %158, 1', 'store i8 %159, i8* %25, align 1', '%160 = zext i1 %148 to i8', 'store i8 %160, i8* %28, align 1', '%161 = lshr i32 %145, 31', '%162 = trunc i32 %161 to i8', 'store i8 %162, i8* %31, align 1', '%163 = lshr i32 %144, 31', '%164 = xor i32 %161, %163', '%165 = add nuw nsw i32 %164, %161', '%166 = icmp eq i32 %165, 2', '%167 = zext i1 %166 to i8', 'store i8 %167, i8* %37, align 1', '%168 = add i64 %141, 9', 'store i64 %168, i64* %PC, align 8', 'store i32 %145, i32* %143, align 4', '%169 = load i64, i64* %PC, align 8', '%170 = add i64 %169, -59', 'store i64 %170, i64* %PC, align 8'])
Keep: block_4005b0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = load i64, i64* %RSP, align 8
Found line to remove! %6 = add i64 %5, -8
Found line to remove! %7 = inttoptr i64 %6 to i64*
Found line to remove! store i64 %3, i64* %7, align 8
Found line to remove! %8 = load i64, i64* %PC, align 8
Found line to remove! store i64 %6, i64* %RBP, align 8
Found line to remove! %9 = add i64 %5, -56
Found line to remove! store i64 %9, i64* %RSP, align 8
Found line to remove! %10 = icmp ult i64 %6, 48
Found line to remove! %11 = zext i1 %10 to i8
Found line to remove! %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %11, i8* %12, align 1
Found line to remove! %13 = trunc i64 %9 to i32
Found line to remove! %14 = and i32 %13, 255
Found line to remove! %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
Found line to remove! %16 = trunc i32 %15 to i8
Found line to remove! %17 = and i8 %16, 1
Found line to remove! %18 = xor i8 %17, 1
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %18, i8* %19, align 1
Found line to remove! %20 = xor i64 %6, 16
Found line to remove! %21 = xor i64 %20, %9
Found line to remove! %22 = lshr i64 %21, 4
Found line to remove! %23 = trunc i64 %22 to i8
Found line to remove! %24 = and i8 %23, 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %24, i8* %25, align 1
Found line to remove! %26 = icmp eq i64 %9, 0
Found line to remove! %27 = zext i1 %26 to i8
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = lshr i64 %9, 63
Found line to remove! %30 = trunc i64 %29 to i8
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %30, i8* %31, align 1
Found line to remove! %32 = lshr i64 %6, 63
Found line to remove! %33 = xor i64 %29, %32
Found line to remove! %34 = add nuw nsw i64 %33, %32
Found line to remove! %35 = icmp eq i64 %34, 2
Found line to remove! %36 = zext i1 %35 to i8
Found line to remove! %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %36, i8* %37, align 1
Found line to remove! %38 = add i64 %5, -12
Found line to remove! %39 = add i64 %8, 14
Found line to remove! store i64 %39, i64* %PC, align 8
Found line to remove! %40 = inttoptr i64 %38 to i32*
Found line to remove! store i32 0, i32* %40, align 4
Keep: %41 = load i64, i64* %RBP, align 8
Keep: %42 = add i64 %41, -36
Found line to remove! %43 = load i64, i64* %PC, align 8
Found line to remove! %44 = add i64 %43, 7
Found line to remove! store i64 %44, i64* %PC, align 8
Keep: %45 = inttoptr i64 %42 to i32*
Keep: store i32 0, i32* %45, align 4
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_4005c6
Keep: 
Keep: block_400606:                                     ; preds = %block_4005c6
Keep: store i64 0, i64* %RAX, align 8
Found line to remove! %46 = load i64, i64* %RSP, align 8
Found line to remove! %47 = add i64 %46, 48
Found line to remove! store i64 %47, i64* %RSP, align 8
Found line to remove! %48 = icmp ugt i64 %46, -49
Found line to remove! %49 = zext i1 %48 to i8
Found line to remove! store i8 %49, i8* %12, align 1
Found line to remove! %50 = trunc i64 %47 to i32
Found line to remove! %51 = and i32 %50, 255
Found line to remove! %52 = tail call i32 @llvm.ctpop.i32(i32 %51) #12
Found line to remove! %53 = trunc i32 %52 to i8
Found line to remove! %54 = and i8 %53, 1
Found line to remove! %55 = xor i8 %54, 1
Found line to remove! store i8 %55, i8* %19, align 1
Found line to remove! %56 = xor i64 %46, 16
Found line to remove! %57 = xor i64 %56, %47
Found line to remove! %58 = lshr i64 %57, 4
Found line to remove! %59 = trunc i64 %58 to i8
Found line to remove! %60 = and i8 %59, 1
Found line to remove! store i8 %60, i8* %25, align 1
Found line to remove! %61 = icmp eq i64 %47, 0
Found line to remove! %62 = zext i1 %61 to i8
Found line to remove! store i8 %62, i8* %28, align 1
Found line to remove! %63 = lshr i64 %47, 63
Found line to remove! %64 = trunc i64 %63 to i8
Found line to remove! store i8 %64, i8* %31, align 1
Found line to remove! %65 = lshr i64 %46, 63
Found line to remove! %66 = xor i64 %63, %65
Found line to remove! %67 = add nuw nsw i64 %66, %63
Found line to remove! %68 = icmp eq i64 %67, 2
Found line to remove! %69 = zext i1 %68 to i8
Found line to remove! store i8 %69, i8* %37, align 1
Found line to remove! %70 = add i64 %107, 7
Found line to remove! store i64 %70, i64* %PC, align 8
Found line to remove! %71 = add i64 %46, 56
Found line to remove! %72 = inttoptr i64 %47 to i64*
Found line to remove! %73 = load i64, i64* %72, align 8
Found line to remove! store i64 %73, i64* %RBP, align 8
Found line to remove! store i64 %71, i64* %RSP, align 8
Found line to remove! %74 = add i64 %107, 8
Found line to remove! store i64 %74, i64* %PC, align 8
Found line to remove! %75 = inttoptr i64 %71 to i64*
Found line to remove! %76 = load i64, i64* %75, align 8
Found line to remove! store i64 %76, i64* %PC, align 8
Found line to remove! %77 = add i64 %46, 64
Found line to remove! store i64 %77, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_4005c6:                                     ; preds = %block_4005d0, %block_4005b0
Found line to remove! %78 = phi i64 [ %170, %block_4005d0 ], [ %.pre, %block_4005b0 ]
Keep: %79 = load i64, i64* %RBP, align 8
Keep: %80 = add i64 %79, -36
Found line to remove! %81 = add i64 %78, 4
Found line to remove! store i64 %81, i64* %PC, align 8
Keep: %82 = inttoptr i64 %80 to i32*
Keep: %83 = load i32, i32* %82, align 4
Keep: %84 = add i32 %83, -5
Found line to remove! %85 = icmp ult i32 %83, 5
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %12, align 1
Found line to remove! %87 = and i32 %84, 255
Found line to remove! %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #12
Found line to remove! %89 = trunc i32 %88 to i8
Found line to remove! %90 = and i8 %89, 1
Found line to remove! %91 = xor i8 %90, 1
Found line to remove! store i8 %91, i8* %19, align 1
Found line to remove! %92 = xor i32 %84, %83
Found line to remove! %93 = lshr i32 %92, 4
Found line to remove! %94 = trunc i32 %93 to i8
Found line to remove! %95 = and i8 %94, 1
Found line to remove! store i8 %95, i8* %25, align 1
Found line to remove! %96 = icmp eq i32 %84, 0
Found line to remove! %97 = zext i1 %96 to i8
Found line to remove! store i8 %97, i8* %28, align 1
Keep: %98 = lshr i32 %84, 31
Keep: %99 = trunc i32 %98 to i8
Found line to remove! store i8 %99, i8* %31, align 1
Keep: %100 = lshr i32 %83, 31
Keep: %101 = xor i32 %98, %100
Keep: %102 = add nuw nsw i32 %101, %100
Keep: %103 = icmp eq i32 %102, 2
Found line to remove! %104 = zext i1 %103 to i8
Found line to remove! store i8 %104, i8* %37, align 1
Keep: %105 = icmp ne i8 %99, 0
Keep: %106 = xor i1 %105, %103
Found line to remove! %.v = select i1 %106, i64 10, i64 64
Found line to remove! %107 = add i64 %78, %.v
Found line to remove! store i64 %107, i64* %PC, align 8
Keep: br i1 %106, label %block_4005d0, label %block_400606Writing '/tmp/tmp5ryod3qp.dot'...
Writing '/tmp/tmp5ryod3qp.dot':Done

Reading LLVM: /tmp/tmpf7501ym4-query.ll
Extracting function [main] from /tmp/tmpf7501ym4-query.ll
Dot file generated!
Writing '/tmp/tmp36cjoixh.dot'...
Writing '/tmp/tmp36cjoixh.dot':Done

Reading LLVM: /tmp/tmpvhpe4wia-target.ll
Extracting function [main] from /tmp/tmpvhpe4wia-target.ll
Dot file generated!

Keep: 
Keep: block_4005d0:                                     ; preds = %block_4005c6
Found line to remove! %108 = add i64 %79, -32
Found line to remove! store i64 %108, i64* %RSI, align 8
Found line to remove! %109 = add i64 %107, 11
Found line to remove! store i64 %109, i64* %PC, align 8
Found line to remove! %110 = inttoptr i64 %108 to i32*
Found line to remove! store i32 5, i32* %110, align 4
Found line to remove! %111 = load i64, i64* %RBP, align 8
Found line to remove! %112 = add i64 %111, -28
Found line to remove! %113 = load i64, i64* %PC, align 8
Found line to remove! %114 = add i64 %113, 7
Found line to remove! store i64 %114, i64* %PC, align 8
Found line to remove! %115 = inttoptr i64 %112 to i32*
Found line to remove! store i32 6, i32* %115, align 4
Found line to remove! %116 = load i64, i64* %RBP, align 8
Found line to remove! %117 = add i64 %116, -24
Found line to remove! %118 = load i64, i64* %PC, align 8
Found line to remove! %119 = add i64 %118, 7
Found line to remove! store i64 %119, i64* %PC, align 8
Found line to remove! %120 = inttoptr i64 %117 to i32*
Found line to remove! store i32 7, i32* %120, align 4
Found line to remove! %121 = load i64, i64* %RBP, align 8
Found line to remove! %122 = add i64 %121, -20
Found line to remove! %123 = load i64, i64* %PC, align 8
Found line to remove! %124 = add i64 %123, 7
Found line to remove! store i64 %124, i64* %PC, align 8
Found line to remove! %125 = inttoptr i64 %122 to i32*
Found line to remove! store i32 8, i32* %125, align 4
Found line to remove! %126 = load i64, i64* %RBP, align 8
Found line to remove! %127 = add i64 %126, -36
Found line to remove! %128 = load i64, i64* %PC, align 8
Found line to remove! %129 = add i64 %128, 3
Found line to remove! store i64 %129, i64* %PC, align 8
Found line to remove! %130 = inttoptr i64 %127 to i32*
Found line to remove! %131 = load i32, i32* %130, align 4
Found line to remove! %132 = zext i32 %131 to i64
Found line to remove! store i64 %132, i64* %RDI, align 8
Found line to remove! %133 = add i64 %128, -208
Found line to remove! %134 = add i64 %128, 8
Found line to remove! %135 = load i64, i64* %RSP, align 8
Found line to remove! %136 = add i64 %135, -8
Found line to remove! %137 = inttoptr i64 %136 to i64*
Found line to remove! store i64 %134, i64* %137, align 8
Found line to remove! store i64 %136, i64* %RSP, align 8
Found line to remove! store i64 %133, i64* %PC, align 8
Found line to remove! %138 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %133, %struct.Memory* %2)
Found line to remove! %139 = load i64, i64* %RBP, align 8
Found line to remove! %140 = add i64 %139, -36
Found line to remove! %141 = load i64, i64* %PC, align 8
Found line to remove! %142 = add i64 %141, 3
Found line to remove! store i64 %142, i64* %PC, align 8
Found line to remove! %143 = inttoptr i64 %140 to i32*
Found line to remove! %144 = load i32, i32* %143, align 4
Found line to remove! %145 = add i32 %144, 1
Found line to remove! %146 = zext i32 %145 to i64
Found line to remove! store i64 %146, i64* %RAX, align 8
Found line to remove! %147 = icmp eq i32 %144, -1
Found line to remove! %148 = icmp eq i32 %145, 0
Found line to remove! %149 = or i1 %147, %148
Found line to remove! %150 = zext i1 %149 to i8
Found line to remove! store i8 %150, i8* %12, align 1
Found line to remove! %151 = and i32 %145, 255
Found line to remove! %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #12
Found line to remove! %153 = trunc i32 %152 to i8
Found line to remove! %154 = and i8 %153, 1
Found line to remove! %155 = xor i8 %154, 1
Found line to remove! store i8 %155, i8* %19, align 1
Found line to remove! %156 = xor i32 %145, %144
Found line to remove! %157 = lshr i32 %156, 4
Found line to remove! %158 = trunc i32 %157 to i8
Found line to remove! %159 = and i8 %158, 1
Found line to remove! store i8 %159, i8* %25, align 1
Found line to remove! %160 = zext i1 %148 to i8
Found line to remove! store i8 %160, i8* %28, align 1
Found line to remove! %161 = lshr i32 %145, 31
Found line to remove! %162 = trunc i32 %161 to i8
Found line to remove! store i8 %162, i8* %31, align 1
Found line to remove! %163 = lshr i32 %144, 31
Found line to remove! %164 = xor i32 %161, %163
Found line to remove! %165 = add nuw nsw i32 %164, %161
Found line to remove! %166 = icmp eq i32 %165, 2
Found line to remove! %167 = zext i1 %166 to i8
Found line to remove! store i8 %167, i8* %37, align 1
Found line to remove! %168 = add i64 %141, 9
Found line to remove! store i64 %168, i64* %PC, align 8
Found line to remove! store i32 %145, i32* %143, align 4
Found line to remove! %169 = load i64, i64* %PC, align 8
Found line to remove! %170 = add i64 %169, -59
Found line to remove! store i64 %170, i64* %PC, align 8
Keep: br label %block_4005c6
================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_43 = load i64, i64* %RBP.i, align 8
- 2 %var_2_44 = add i64 %var_2_43, -36
- 3 %var_2_47 = inttoptr i64 %var_2_44 to i32*
- 4 store i32 0, i32* %var_2_47, align 4
- 5 %var_2_49 = load i64, i64* %RBP.i, align 8
- 6 %var_2_50 = add i64 %var_2_49, -36
- 7 %var_2_52 = inttoptr i64 %var_2_50 to i32*
- 8 %var_2_53 = load i32, i32* %var_2_52, align 4
- 9 %var_2_54 = add i32 %var_2_53, -5
- 10 %var_2_68 = lshr i32 %var_2_54, 31
- 11 %var_2_70 = lshr i32 %var_2_53, 31
- 12 %var_2_71 = xor i32 %var_2_68, %var_2_70
- 13 %var_2_72 = add nuw nsw i32 %var_2_71, %var_2_70
- 14 %var_2_73 = icmp eq i32 %var_2_72, 2
- 15 %var_2_75 = icmp ne i32 %var_2_68, 0
- 16 %var_2_76 = xor i1 %var_2_75, %var_2_73
- 17 \<badref\> = br i1 %var_2_76, label %block_.L_4005c6.preheader, label %block_.L_400606.split
- 18 \<badref\> = br label %block_.L_4005c6
- 19 \<badref\> = br label %block_.L_4005c6
- 20 %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 21 store i64 0, i64* %RAX.i13, align 8
- 22 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f94767e9620>, {0: {0}, 1: {8, 1, 5}, 2: {2, 6}, 3: {3, 7}, 4: {4, 20}, 5: {8, 1, 5}, 6: {2, 6}, 7: {3, 7}, 8: {8, 1, 5}, 9: {9}, 10: {10, 11}, 11: {10, 11}, 12: {16, 12}, 13: {13}, 14: {14}, 15: {15}, 16: {16, 12}, 17: {17}, 18: {18, 22}, 19: {18, 22}, 20: {19}, 21: {4, 20}, 22: {21}})
Equivalent! frozenset({18, 22}) {18, 19}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f94767e9620>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {22}, 20: {19}, 21: {20}, 22: {21}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 lshr lshr
EXACT 11 lshr lshr
EXACT 12 xor xor
EXACT 13 add add
EXACT 14 icmp icmp
EXACT 15 icmp icmp
EXACT 16 xor xor
EXACT 17 br br
EXACT 18 br br
EXACT 19 br br
EXACT 20 getelementptr getelementptr
EXACT 21 store store
EXACT 22 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_41 = load i64, i64* %RBP, align 8
- 2 %var_2_42 = add i64 %var_2_41, -36
- 3 %var_2_45 = inttoptr i64 %var_2_42 to i32*
- 4 store i32 0, i32* %var_2_45, align 4
- 5 %var_2_79 = load i64, i64* %RBP, align 8
- 6 %var_2_80 = add i64 %var_2_79, -36
- 7 %var_2_82 = inttoptr i64 %var_2_80 to i32*
- 8 %var_2_83 = load i32, i32* %var_2_82, align 4
- 9 %var_2_84 = add i32 %var_2_83, -5
- 10 %var_2_98 = lshr i32 %var_2_84, 31
- 11 %var_2_100 = lshr i32 %var_2_83, 31
- 12 %var_2_101 = xor i32 %var_2_98, %var_2_100
- 13 %var_2_102 = add nuw nsw i32 %var_2_101, %var_2_100
- 14 %var_2_103 = icmp eq i32 %var_2_102, 2
- 15 %var_2_105 = icmp ne i32 %var_2_98, 0
- 16 %var_2_106 = xor i1 %var_2_105, %var_2_103
- 17 \<badref\> = br i1 %var_2_106, label %block_4005c6.preheader, label %block_400606.split
- 18 \<badref\> = br label %block_4005c6
- 19 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 20 store i64 0, i64* %RAX, align 8
- 21 ret %struct.Memory* %2
- 22 \<badref\> = br label %block_4005c6
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f947709cea0>, {0: {0}, 1: {8, 1, 5}, 2: {2, 6}, 3: {3, 7}, 4: {4, 21}, 5: {8, 1, 5}, 6: {2, 6}, 7: {3, 7}, 8: {8, 1, 5}, 9: {9}, 10: {10, 11}, 11: {10, 11}, 12: {16, 12}, 13: {13}, 14: {14}, 15: {15}, 16: {16, 12}, 17: {17}, 18: {18, 19}, 19: {20}, 20: {4, 21}, 21: {22}, 22: {18, 19}})
Equivalent! frozenset({18, 19}) {18, 22}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f947709cea0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {20}, 20: {21}, 21: {22}, 22: {19}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 lshr lshr
EXACT 11 lshr lshr
EXACT 12 xor xor
EXACT 13 add add
EXACT 14 icmp icmp
EXACT 15 icmp icmp
EXACT 16 xor xor
EXACT 17 br br
EXACT 18 br br
EXACT 19 getelementptr getelementptr
EXACT 20 store store
EXACT 21 ret ret
EXACT 22 br br
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_43 = load i64, i64* %RBP.i, align 8', '%var_2_44 = add i64 %var_2_43, -36', '%var_2_47 = inttoptr i64 %var_2_44 to i32*', 'store i32 0, i32* %var_2_47, align 4', '%RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX.i13, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_43 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_44 = add i64 %var_2_43, -36
Found line to remove! %var_2_47 = inttoptr i64 %var_2_44 to i32*
Found line to remove! store i32 0, i32* %var_2_47, align 4
Keep: %var_2_49 = load i64, i64* %RBP.i, align 8
Keep: %var_2_50 = add i64 %var_2_49, -36
Keep: %var_2_52 = inttoptr i64 %var_2_50 to i32*
Keep: %var_2_53 = load i32, i32* %var_2_52, align 4
Keep: %var_2_54 = add i32 %var_2_53, -5
Keep: %var_2_68 = lshr i32 %var_2_54, 31
Keep: %var_2_70 = lshr i32 %var_2_53, 31
Keep: %var_2_71 = xor i32 %var_2_68, %var_2_70
Keep: %var_2_72 = add nuw nsw i32 %var_2_71, %var_2_70
Keep: %var_2_73 = icmp eq i32 %var_2_72, 2
Keep: %var_2_75 = icmp ne i32 %var_2_68, 0
Keep: %var_2_76 = xor i1 %var_2_75, %var_2_73
Keep: br i1 %var_2_76, label %block_.L_4005c6.preheader, label %block_.L_400606.split
Keep: 
Keep: block_.L_4005c6.preheader:                        ; preds = %entry
Keep: br label %block_.L_4005c6
Keep: 
Keep: block_.L_4005c6:                                  ; preds = %block_.L_4005c6.preheader, %block_.L_4005c6
Keep: br label %block_.L_4005c6
Keep: 
Keep: block_.L_400606.split:                            ; preds = %entry
Found line to remove! %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 0, i64* %RAX.i13, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_41 = load i64, i64* %RBP, align 8', '%var_2_42 = add i64 %var_2_41, -36', '%var_2_45 = inttoptr i64 %var_2_42 to i32*', 'store i32 0, i32* %var_2_45, align 4', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 0, i64* %RAX, align 8', 'ret %struct.Memory* %2'])
Keep: block_4005b0:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_41 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_42 = add i64 %var_2_41, -36
Found line to remove! %var_2_45 = inttoptr i64 %var_2_42 to i32*
Found line to remove! store i32 0, i32* %var_2_45, align 4
Keep: %var_2_79 = load i64, i64* %RBP, align 8
Keep: %var_2_80 = add i64 %var_2_79, -36
Keep: %var_2_82 = inttoptr i64 %var_2_80 to i32*
Keep: %var_2_83 = load i32, i32* %var_2_82, align 4
Keep: %var_2_84 = add i32 %var_2_83, -5
Keep: %var_2_98 = lshr i32 %var_2_84, 31
Keep: %var_2_100 = lshr i32 %var_2_83, 31
Keep: %var_2_101 = xor i32 %var_2_98, %var_2_100
Keep: %var_2_102 = add nuw nsw i32 %var_2_101, %var_2_100
Keep: %var_2_103 = icmp eq i32 %var_2_102, 2
Keep: %var_2_105 = icmp ne i32 %var_2_98, 0
Keep: %var_2_106 = xor i1 %var_2_105, %var_2_103
Keep: br i1 %var_2_106, label %block_4005c6.preheader, label %block_400606.split
Keep: 
Keep: block_4005c6.preheader:                           ; preds = %block_4005b0
Keep: br label %block_4005c6
Keep: 
Keep: block_400606.split:                               ; preds = %block_4005b0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 0, i64* %RAX, align 8
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_4005c6:                                     ; preds = %block_4005c6.preheader, %block_4005c6
Keep: br label %block_4005c6
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_29/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_29/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
