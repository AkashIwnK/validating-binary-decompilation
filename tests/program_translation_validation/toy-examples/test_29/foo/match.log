Writing '/tmp/tmpyslpi3x6.dot'...
Writing '/tmp/tmpyslpi3x6.dot':Done

Reading LLVM: /tmp/tmpvdygv5v8-query.ll
Extracting function [foo] from /tmp/tmpvdygv5v8-query.ll
Dot file generated!
Writing '/tmp/tmpxuhnvph_.dot'...
Writing '/tmp/tmpxuhnvph_.dot':Done

Reading LLVM: /tmp/tmp8naatsdh-target.ll
Extracting function [foo] from /tmp/tmp8naatsdh-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 48 %EDI.i = bitcast %union.anon* %39 to i32*
- 49 %40 = add i64 %7, -12
- 50 %41 = load i32, i32* %EDI.i, align 4
- 51 %42 = add i64 %10, 10
- 52 store i64 %42, i64* %3, align 8
- 53 %43 = inttoptr i64 %40 to i32*
- 54 store i32 %41, i32* %43, align 4
- 55 %RSI.i82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 56 %44 = load i64, i64* %RBP.i, align 8
- 57 %45 = add i64 %44, -16
- 58 %46 = load i64, i64* %RSI.i82, align 8
- 59 %47 = load i64, i64* %3, align 8
- 60 %48 = add i64 %47, 4
- 61 store i64 %48, i64* %3, align 8
- 62 %49 = inttoptr i64 %45 to i64*
- 63 store i64 %46, i64* %49, align 8
- 64 %50 = load i64, i64* %RBP.i, align 8
- 65 %51 = add i64 %50, -20
- 66 %52 = load i64, i64* %3, align 8
- 67 %53 = add i64 %52, 7
- 68 store i64 %53, i64* %3, align 8
- 69 %54 = inttoptr i64 %51 to i32*
- 70 store i32 3, i32* %54, align 4
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 72 %RAX.i77 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
- 73 %EAX.i74 = bitcast %union.anon* %55 to i32*
- 74 %RCX.i67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 75 %RDX.i60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 76 %.pre = load i64, i64* %3, align 8
- 77 \<badref\> = br label %block_.L_400536
- 78 %56 = phi i64 [ %168, %block_400542 ], [ %.pre, %entry ]
- 79 %57 = load i64, i64* %RBP.i, align 8
- 80 %58 = add i64 %57, -20
- 81 %59 = add i64 %56, 3
- 82 store i64 %59, i64* %3, align 8
- 83 %60 = inttoptr i64 %58 to i32*
- 84 %61 = load i32, i32* %60, align 4
- 85 %62 = zext i32 %61 to i64
- 86 store i64 %62, i64* %RAX.i77, align 8
- 87 %63 = add i64 %57, -4
- 88 %64 = add i64 %56, 6
- 89 store i64 %64, i64* %3, align 8
- 90 %65 = inttoptr i64 %63 to i32*
- 91 %66 = load i32, i32* %65, align 4
- 92 %67 = sub i32 %61, %66
- 93 %68 = icmp ult i32 %61, %66
- 94 %69 = zext i1 %68 to i8
- 95 store i8 %69, i8* %14, align 1
- 96 %70 = and i32 %67, 255
- 97 %71 = tail call i32 @llvm.ctpop.i32(i32 %70)
- 98 %72 = trunc i32 %71 to i8
- 99 %73 = and i8 %72, 1
- 100 %74 = xor i8 %73, 1
- 101 store i8 %74, i8* %21, align 1
- 102 %75 = xor i32 %66, %61
- 103 %76 = xor i32 %75, %67
- 104 %77 = lshr i32 %76, 4
- 105 %78 = trunc i32 %77 to i8
- 106 %79 = and i8 %78, 1
- 107 store i8 %79, i8* %26, align 1
- 108 %80 = icmp eq i32 %67, 0
- 109 %81 = zext i1 %80 to i8
- 110 store i8 %81, i8* %29, align 1
- 111 %82 = lshr i32 %67, 31
- 112 %83 = trunc i32 %82 to i8
- 113 store i8 %83, i8* %32, align 1
- 114 %84 = lshr i32 %61, 31
- 115 %85 = lshr i32 %66, 31
- 116 %86 = xor i32 %85, %84
- 117 %87 = xor i32 %82, %84
- 118 %88 = add nuw nsw i32 %87, %86
- 119 %89 = icmp eq i32 %88, 2
- 120 %90 = zext i1 %89 to i8
- 121 store i8 %90, i8* %38, align 1
- 122 %91 = or i1 %80, %68
- 123 %.v = select i1 %91, i64 55, i64 12
- 124 %92 = add i64 %56, %.v
- 125 store i64 %92, i64* %3, align 8
- 126 \<badref\> = br i1 %91, label %block_.L_40056d, label %block_400542
- 127 %93 = add i64 %57, -16
- 128 %94 = add i64 %92, 4
- 129 store i64 %94, i64* %3, align 8
- 130 %95 = inttoptr i64 %93 to i64*
- 131 %96 = load i64, i64* %95, align 8
- 132 store i64 %96, i64* %RAX.i77, align 8
- 133 %97 = add i64 %92, 7
- 134 store i64 %97, i64* %3, align 8
- 135 %98 = load i32, i32* %60, align 4
- 136 %99 = add i32 %98, -1
- 137 %100 = zext i32 %99 to i64
- 138 %101 = icmp eq i32 %98, 0
- 139 %102 = zext i1 %101 to i8
- 140 store i8 %102, i8* %14, align 1
- 141 %103 = and i32 %99, 255
- 142 %104 = tail call i32 @llvm.ctpop.i32(i32 %103)
- 143 %105 = trunc i32 %104 to i8
- 144 %106 = and i8 %105, 1
- 145 %107 = xor i8 %106, 1
- 146 store i8 %107, i8* %21, align 1
- 147 %108 = xor i32 %99, %98
- 148 %109 = lshr i32 %108, 4
- 149 %110 = trunc i32 %109 to i8
- 150 %111 = and i8 %110, 1
- 151 store i8 %111, i8* %26, align 1
- 152 %112 = icmp eq i32 %99, 0
- 153 %113 = zext i1 %112 to i8
- 154 store i8 %113, i8* %29, align 1
- 155 %114 = lshr i32 %99, 31
- 156 %115 = trunc i32 %114 to i8
- 157 store i8 %115, i8* %32, align 1
- 158 %116 = lshr i32 %98, 31
- 159 %117 = xor i32 %114, %116
- 160 %118 = add nuw nsw i32 %117, %116
- 161 %119 = icmp eq i32 %118, 2
- 162 %120 = zext i1 %119 to i8
- 163 store i8 %120, i8* %38, align 1
- 164 store i64 %100, i64* %RCX.i67, align 8
- 165 store i64 %100, i64* %RDX.i60, align 8
- 166 %121 = shl nuw nsw i64 %100, 2
- 167 %122 = add i64 %96, %121
- 168 %123 = add i64 %92, 17
- 169 store i64 %123, i64* %3, align 8
- 170 %124 = inttoptr i64 %122 to i32*
- 171 %125 = load i32, i32* %124, align 4
- 172 %126 = zext i32 %125 to i64
- 173 store i64 %126, i64* %RCX.i67, align 8
- 174 %127 = add i64 %92, 21
- 175 store i64 %127, i64* %3, align 8
- 176 %128 = load i64, i64* %95, align 8
- 177 store i64 %128, i64* %RAX.i77, align 8
- 178 %129 = add i64 %92, 24
- 179 store i64 %129, i64* %3, align 8
- 180 %130 = load i32, i32* %60, align 4
- 181 %131 = zext i32 %130 to i64
- 182 store i64 %131, i64* %RSI.i82, align 8
- 183 store i64 %131, i64* %RDX.i60, align 8
- 184 %132 = shl nuw nsw i64 %131, 2
- 185 %133 = add i64 %128, %132
- 186 %134 = add i64 %92, 29
- 187 store i64 %134, i64* %3, align 8
- 188 %135 = inttoptr i64 %133 to i32*
- 189 store i32 %125, i32* %135, align 4
- 190 %136 = load i64, i64* %RBP.i, align 8
- 191 %137 = add i64 %136, -20
- 192 %138 = load i64, i64* %3, align 8
- 193 %139 = add i64 %138, 3
- 194 store i64 %139, i64* %3, align 8
- 195 %140 = inttoptr i64 %137 to i32*
- 196 %141 = load i32, i32* %140, align 4
- 197 %142 = add i32 %141, -1
- 198 %143 = zext i32 %142 to i64
- 199 store i64 %143, i64* %RAX.i77, align 8
- 200 %144 = icmp ne i32 %141, 0
- 201 %145 = zext i1 %144 to i8
- 202 store i8 %145, i8* %14, align 1
- 203 %146 = and i32 %142, 255
- 204 %147 = tail call i32 @llvm.ctpop.i32(i32 %146)
- 205 %148 = trunc i32 %147 to i8
- 206 %149 = and i8 %148, 1
- 207 %150 = xor i8 %149, 1
- 208 store i8 %150, i8* %21, align 1
- 209 %151 = xor i32 %141, 16
- 210 %152 = xor i32 %151, %142
- 211 %153 = lshr i32 %152, 4
- 212 %154 = trunc i32 %153 to i8
- 213 %155 = and i8 %154, 1
- 214 store i8 %155, i8* %26, align 1
- 215 %156 = icmp eq i32 %142, 0
- 216 %157 = zext i1 %156 to i8
- 217 store i8 %157, i8* %29, align 1
- 218 %158 = lshr i32 %142, 31
- 219 %159 = trunc i32 %158 to i8
- 220 store i8 %159, i8* %32, align 1
- 221 %160 = lshr i32 %141, 31
- 222 %161 = xor i32 %158, %160
- 223 %162 = xor i32 %158, 1
- 224 %163 = add nuw nsw i32 %161, %162
- 225 %164 = icmp eq i32 %163, 2
- 226 %165 = zext i1 %164 to i8
- 227 store i8 %165, i8* %38, align 1
- 228 %166 = add i64 %138, 9
- 229 store i64 %166, i64* %3, align 8
- 230 store i32 %142, i32* %140, align 4
- 231 %167 = load i64, i64* %3, align 8
- 232 %168 = add i64 %167, -50
- 233 store i64 %168, i64* %3, align 8
- 234 \<badref\> = br label %block_.L_400536
- 235 %RDI.i = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 236 store i64 ptrtoint (%G__0x400694_type* @G__0x400694 to i64), i64* %RDI.i, align 8
- 237 %169 = add i64 %92, 13
- 238 store i64 %169, i64* %3, align 8
- 239 %170 = load i32, i32* %65, align 4
- 240 %171 = zext i32 %170 to i64
- 241 store i64 %171, i64* %RSI.i82, align 8
- 242 %172 = add i64 %57, -16
- 243 %173 = add i64 %92, 17
- 244 store i64 %173, i64* %3, align 8
- 245 %174 = inttoptr i64 %172 to i64*
- 246 %175 = load i64, i64* %174, align 8
- 247 store i64 %175, i64* %RAX.i77, align 8
- 248 %176 = add i64 %92, 19
- 249 store i64 %176, i64* %3, align 8
- 250 %177 = inttoptr i64 %175 to i32*
- 251 %178 = load i32, i32* %177, align 4
- 252 %179 = zext i32 %178 to i64
- 253 store i64 %179, i64* %RDX.i60, align 8
- 254 %180 = add i64 %92, 23
- 255 store i64 %180, i64* %3, align 8
- 256 %181 = load i64, i64* %174, align 8
- 257 store i64 %181, i64* %RAX.i77, align 8
- 258 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 259 %182 = add i64 %181, 4
- 260 %183 = add i64 %92, 26
- 261 store i64 %183, i64* %3, align 8
- 262 %184 = inttoptr i64 %182 to i32*
- 263 %185 = load i32, i32* %184, align 4
- 264 %186 = zext i32 %185 to i64
- 265 store i64 %186, i64* %RCX.i, align 8
- 266 %187 = add i64 %92, 30
- 267 store i64 %187, i64* %3, align 8
- 268 %188 = load i64, i64* %174, align 8
- 269 store i64 %188, i64* %RAX.i77, align 8
- 270 %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 271 %190 = add i64 %188, 8
- 272 %191 = add i64 %92, 34
- 273 store i64 %191, i64* %3, align 8
- 274 %192 = inttoptr i64 %190 to i32*
- 275 %193 = load i32, i32* %192, align 4
- 276 %194 = zext i32 %193 to i64
- 277 store i64 %194, i64* %189, align 8
- 278 %195 = add i64 %92, 38
- 279 store i64 %195, i64* %3, align 8
- 280 %196 = load i64, i64* %174, align 8
- 281 store i64 %196, i64* %RAX.i77, align 8
- 282 %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
- 283 %198 = add i64 %196, 12
- 284 %199 = add i64 %92, 42
- 285 store i64 %199, i64* %3, align 8
- 286 %200 = inttoptr i64 %198 to i32*
- 287 %201 = load i32, i32* %200, align 4
- 288 %202 = zext i32 %201 to i64
- 289 store i64 %202, i64* %197, align 8
- 290 %AL.i = bitcast %union.anon* %55 to i8*
- 291 store i8 0, i8* %AL.i, align 1
- 292 %203 = add i64 %92, -333
- 293 %204 = add i64 %92, 49
- 294 %205 = load i64, i64* %6, align 8
- 295 %206 = add i64 %205, -8
- 296 %207 = inttoptr i64 %206 to i64*
- 297 store i64 %204, i64* %207, align 8
- 298 store i64 %206, i64* %6, align 8
- 299 store i64 %203, i64* %3, align 8
- 300 %208 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
- 301 %209 = load i64, i64* %RBP.i, align 8
- 302 %210 = add i64 %209, -24
- 303 %211 = load i32, i32* %EAX.i74, align 4
- 304 %212 = load i64, i64* %3, align 8
- 305 %213 = add i64 %212, 3
- 306 store i64 %213, i64* %3, align 8
- 307 %214 = inttoptr i64 %210 to i32*
- 308 store i32 %211, i32* %214, align 4
- 309 %215 = load i64, i64* %6, align 8
- 310 %216 = load i64, i64* %3, align 8
- 311 %217 = add i64 %215, 32
- 312 store i64 %217, i64* %6, align 8
- 313 %218 = icmp ugt i64 %215, -33
- 314 %219 = zext i1 %218 to i8
- 315 store i8 %219, i8* %14, align 1
- 316 %220 = trunc i64 %217 to i32
- 317 %221 = and i32 %220, 255
- 318 %222 = tail call i32 @llvm.ctpop.i32(i32 %221)
- 319 %223 = trunc i32 %222 to i8
- 320 %224 = and i8 %223, 1
- 321 %225 = xor i8 %224, 1
- 322 store i8 %225, i8* %21, align 1
- 323 %226 = xor i64 %217, %215
- 324 %227 = lshr i64 %226, 4
- 325 %228 = trunc i64 %227 to i8
- 326 %229 = and i8 %228, 1
- 327 store i8 %229, i8* %26, align 1
- 328 %230 = icmp eq i64 %217, 0
- 329 %231 = zext i1 %230 to i8
- 330 store i8 %231, i8* %29, align 1
- 331 %232 = lshr i64 %217, 63
- 332 %233 = trunc i64 %232 to i8
- 333 store i8 %233, i8* %32, align 1
- 334 %234 = lshr i64 %215, 63
- 335 %235 = xor i64 %232, %234
- 336 %236 = add nuw nsw i64 %235, %232
- 337 %237 = icmp eq i64 %236, 2
- 338 %238 = zext i1 %237 to i8
- 339 store i8 %238, i8* %38, align 1
- 340 %239 = add i64 %216, 5
- 341 store i64 %239, i64* %3, align 8
- 342 %240 = add i64 %215, 40
- 343 %241 = inttoptr i64 %217 to i64*
- 344 %242 = load i64, i64* %241, align 8
- 345 store i64 %242, i64* %RBP.i, align 8
- 346 store i64 %240, i64* %6, align 8
- 347 %243 = add i64 %216, 6
- 348 store i64 %243, i64* %3, align 8
- 349 %244 = inttoptr i64 %240 to i64*
- 350 %245 = load i64, i64* %244, align 8
- 351 store i64 %245, i64* %3, align 8
- 352 %246 = add i64 %215, 48
- 353 store i64 %246, i64* %6, align 8
- 354 ret %struct.Memory* %208
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe079caa730>, {0: {0}, 1: {10}, 2: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 3: {12}, 4: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 5: {9}, 6: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 7: {186, 15}, 8: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 9: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 10: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 11: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 12: {20}, 13: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 14: {22}, 15: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 16: {24}, 17: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 18: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 19: {96, 322, 260, 208, 27}, 20: {97, 323, 261, 209, 28, 191}, 21: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 22: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 23: {100, 326, 264, 212, 342, 31}, 24: {32}, 25: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 26: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 27: {35, 104, 330, 267, 215}, 28: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 29: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 30: {38}, 31: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 32: {257, 40, 108, 334, 271, 219, 93, 319}, 33: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 34: {42}, 35: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 36: {48, 225, 44, 222}, 37: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 38: {46}, 39: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 40: {48, 225, 44, 222}, 41: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 42: {227, 304, 50, 343, 118, 279, 124, 286}, 43: {344, 228, 51, 119, 280}, 44: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 45: {53}, 46: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 47: {3}, 48: {2, 4, 127}, 49: {55}, 50: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 51: {57}, 52: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 53: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 54: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 55: {8}, 56: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 57: {246, 62, 135}, 58: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 59: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 60: {65, 247, 151}, 61: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 62: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 63: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 64: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 65: {80, 310, 70}, 66: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 67: {72, 252}, 68: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 69: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 70: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 71: {1}, 72: {128, 5}, 73: {2, 4, 127}, 74: {6}, 75: {7}, 76: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 77: {353, 77}, 78: {78}, 79: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 80: {80, 310, 70}, 81: {312, 81, 196}, 82: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 83: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 84: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 85: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 86: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 87: {87}, 88: {88, 238}, 89: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 90: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 91: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 92: {92}, 93: {257, 40, 108, 334, 271, 219, 93, 319}, 94: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 95: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 96: {96, 322, 260, 208, 27}, 97: {97, 323, 261, 209, 28, 191}, 98: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 99: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 100: {100, 326, 264, 212, 342, 31}, 101: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 102: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 103: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 104: {35, 104, 330, 267, 215}, 105: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 106: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 107: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 108: {257, 40, 108, 334, 271, 219, 93, 319}, 109: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 110: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 111: {111, 337, 274, 114, 115, 277, 340}, 112: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 113: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 114: {111, 337, 274, 114, 115, 277, 340}, 115: {111, 337, 274, 114, 115, 277, 340}, 116: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 117: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 118: {227, 304, 50, 343, 118, 279, 124, 286}, 119: {344, 228, 51, 119, 280}, 120: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 121: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 122: {122}, 123: {123}, 124: {227, 304, 50, 343, 118, 279, 124, 286}, 125: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 126: {126}, 127: {246, 62, 135}, 128: {65, 247, 151}, 129: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 130: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 131: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 132: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 133: {72, 252}, 134: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 135: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 136: {316, 255}, 137: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 138: {257, 40, 108, 334, 271, 219, 93, 319}, 139: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 140: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 141: {96, 322, 260, 208, 27}, 142: {97, 323, 261, 209, 28, 191}, 143: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 144: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 145: {100, 326, 264, 212, 342, 31}, 146: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 147: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 148: {35, 104, 330, 267, 215}, 149: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 150: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 151: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 152: {257, 40, 108, 334, 271, 219, 93, 319}, 153: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 154: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 155: {111, 337, 274, 114, 115, 277, 340}, 156: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 157: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 158: {111, 337, 274, 114, 115, 277, 340}, 159: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 160: {227, 304, 50, 343, 118, 279, 124, 286}, 161: {344, 228, 51, 119, 280}, 162: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 163: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 164: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 165: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 166: {285, 303}, 167: {227, 304, 50, 343, 118, 279, 124, 286}, 168: {136, 287}, 169: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 170: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 171: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 172: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 173: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 174: {293}, 175: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 176: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 177: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 178: {297}, 179: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 180: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 181: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 182: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 183: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 184: {285, 303}, 185: {227, 304, 50, 343, 118, 279, 124, 286}, 186: {305}, 187: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 188: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 189: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 190: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 191: {80, 310, 70}, 192: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 193: {312, 81, 196}, 194: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 195: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 196: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 197: {316, 255}, 198: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 199: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 200: {257, 40, 108, 334, 271, 219, 93, 319}, 201: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 202: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 203: {96, 322, 260, 208, 27}, 204: {97, 323, 261, 209, 28, 191}, 205: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 206: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 207: {100, 326, 264, 212, 342, 31}, 208: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 209: {328}, 210: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 211: {35, 104, 330, 267, 215}, 212: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 213: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 214: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 215: {257, 40, 108, 334, 271, 219, 93, 319}, 216: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 217: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 218: {111, 337, 274, 114, 115, 277, 340}, 219: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 220: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 221: {111, 337, 274, 114, 115, 277, 340}, 222: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 223: {100, 326, 264, 212, 342, 31}, 224: {227, 304, 50, 343, 118, 279, 124, 286}, 225: {344, 228, 51, 119, 280}, 226: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 227: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 228: {347}, 229: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 230: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 231: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 232: {351}, 233: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 234: {353, 77}, 235: {128, 5}, 236: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 237: {130}, 238: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 239: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 240: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 241: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 242: {246, 62, 135}, 243: {136, 287}, 244: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 245: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 246: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 247: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 248: {141}, 249: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 250: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 251: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 252: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 253: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 254: {147}, 255: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 256: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 257: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 258: {6}, 259: {65, 247, 151}, 260: {152}, 261: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 262: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 263: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 264: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 265: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 266: {158}, 267: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 268: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 269: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 270: {162}, 271: {163}, 272: {164}, 273: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 274: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 275: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 276: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 277: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 278: {170}, 279: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 280: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 281: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 282: {174}, 283: {175}, 284: {176}, 285: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 286: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 287: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 288: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 289: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 290: {2, 4, 127}, 291: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 292: {183}, 293: {184}, 294: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 295: {186, 15}, 296: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 297: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 298: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 299: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 300: {97, 323, 261, 209, 28, 191}, 301: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 302: {193}, 303: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 304: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 305: {312, 81, 196}, 306: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 307: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 308: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 309: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 310: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 311: {202}, 312: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 313: {204}, 314: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 315: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 316: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 317: {96, 322, 260, 208, 27}, 318: {97, 323, 261, 209, 28, 191}, 319: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 320: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 321: {100, 326, 264, 212, 342, 31}, 322: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 323: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 324: {35, 104, 330, 267, 215}, 325: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 326: {99, 37, 325, 263, 106, 332, 269, 211, 217, 30}, 327: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 328: {257, 40, 108, 334, 271, 219, 93, 319}, 329: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 330: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 331: {48, 225, 44, 222}, 332: {98, 36, 324, 262, 105, 331, 268, 45, 207, 112, 210, 275, 338, 216, 26, 29, 223}, 333: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 334: {48, 225, 44, 222}, 335: {34, 226, 102, 103, 329, 266, 49, 116, 117, 214, 278, 341}, 336: {227, 304, 50, 343, 118, 279, 124, 286}, 337: {344, 228, 51, 119, 280}, 338: {256, 258, 133, 272, 145, 23, 281, 156, 291, 168, 41, 300, 52, 180, 317, 320, 205, 335, 85, 345, 220, 94, 229, 109, 120}, 339: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 340: {231}, 341: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 342: {233}, 343: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 344: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 345: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 346: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 347: {88, 238}, 348: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 349: {289, 67, 166, 154, 198, 74, 138, 234, 187, 314, 143, 16, 240, 178, 83, 307, 249, 90, 59}, 350: {132, 11, 139, 14, 144, 18, 149, 155, 160, 290, 167, 295, 299, 172, 179, 309, 311, 56, 185, 315, 61, 63, 64, 192, 194, 195, 69, 71, 200, 201, 76, 79, 84, 91, 350, 235, 241, 250, 254}, 351: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 352: {243}, 353: {13, 17, 19, 21, 25, 33, 39, 43, 47, 54, 58, 60, 66, 68, 73, 75, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 131, 134, 137, 140, 142, 146, 148, 150, 153, 157, 159, 161, 165, 169, 171, 173, 177, 181, 182, 188, 189, 190, 197, 199, 203, 206, 213, 218, 221, 224, 230, 232, 236, 237, 239, 242, 244, 248, 251, 253, 259, 265, 270, 273, 276, 282, 283, 284, 288, 292, 294, 296, 298, 301, 302, 306, 308, 313, 318, 321, 327, 333, 336, 339, 346, 348, 349, 352}, 354: {245}})
Equivalent! frozenset({353, 77}) {234, 77}
Equivalent! frozenset({246, 135}) {242, 127}
Equivalent! frozenset({249, 138}) {130, 245}
Equivalent! frozenset({160, 149, 295, 250, 139, 172}) {256, 131, 268, 176, 246, 280}
Equivalent! frozenset({161, 150, 296, 251, 140, 173}) {257, 132, 269, 177, 247, 281}
Equivalent! frozenset({316, 255}) {136, 197}
Equivalent! frozenset({322, 260}) {203, 141}
Equivalent! frozenset({323, 261}) {204, 142}
Equivalent! frozenset({324, 262}) {205, 143}
Equivalent! frozenset({325, 263}) {144, 206}
Equivalent! frozenset({264, 326}) {145, 207}
Equivalent! frozenset({265, 327}) {208, 146}
Equivalent! frozenset({334, 271}) {152, 215}
Equivalent! frozenset({272, 335}) {216, 153}
Equivalent! frozenset({336, 273}) {217, 154}
Equivalent! frozenset({337, 274}) {218, 155}
Equivalent! frozenset({338, 275}) {219, 156}
Equivalent! frozenset({339, 276}) {220, 157}
Equivalent! frozenset({136, 287}) {168, 243}
Equivalent! frozenset({288, 137}) {169, 244}
Equivalent! frozenset({195, 311}) {192, 304}
Equivalent! frozenset({312, 196}) {193, 305}
Equivalent! frozenset({313, 197}) {194, 306}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe079caa730>, {0: {0}, 1: {10}, 2: {11}, 3: {12}, 4: {13}, 5: {9}, 6: {14}, 7: {15}, 8: {16}, 9: {17}, 10: {18}, 11: {19}, 12: {20}, 13: {21}, 14: {22}, 15: {23}, 16: {24}, 17: {25}, 18: {26}, 19: {27}, 20: {28}, 21: {29}, 22: {30}, 23: {31}, 24: {32}, 25: {33}, 26: {34}, 27: {35}, 28: {36}, 29: {37}, 30: {38}, 31: {39}, 32: {40}, 33: {41}, 34: {42}, 35: {43}, 36: {44}, 37: {45}, 38: {46}, 39: {47}, 40: {48}, 41: {49}, 42: {50}, 43: {51}, 44: {52}, 45: {53}, 46: {54}, 47: {3}, 48: {4}, 49: {55}, 50: {56}, 51: {57}, 52: {58}, 53: {59}, 54: {60}, 55: {8}, 56: {61}, 57: {62}, 58: {63}, 59: {64}, 60: {65}, 61: {66}, 62: {67}, 63: {68}, 64: {69, 309}, 65: {70, 310}, 66: {71}, 67: {72}, 68: {73}, 69: {74, 314}, 70: {75, 349}, 71: {1}, 72: {5}, 73: {2}, 74: {6}, 75: {7}, 76: {76}, 77: {77}, 78: {78}, 79: {309, 79}, 80: {80, 310}, 81: {81}, 82: {82}, 83: {314, 83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {135}, 128: {247}, 129: {248}, 130: {249}, 131: {149}, 132: {150}, 133: {252}, 134: {253}, 135: {315, 84, 254}, 136: {316}, 137: {256}, 138: {257, 93, 319}, 139: {320, 258, 94}, 140: {321, 259, 95}, 141: {260}, 142: {261}, 143: {262}, 144: {325}, 145: {264}, 146: {327}, 147: {266}, 148: {267}, 149: {268}, 150: {269}, 151: {270}, 152: {334}, 153: {335}, 154: {273}, 155: {274}, 156: {275}, 157: {276}, 158: {277}, 159: {278}, 160: {279}, 161: {280}, 162: {281}, 163: {282}, 164: {283}, 165: {284}, 166: {285}, 167: {286}, 168: {136}, 169: {288}, 170: {289}, 171: {290}, 172: {291}, 173: {292}, 174: {293}, 175: {294}, 176: {250}, 177: {251}, 178: {297}, 179: {298}, 180: {299}, 181: {300}, 182: {301}, 183: {302}, 184: {303}, 185: {304}, 186: {305}, 187: {306}, 188: {307}, 189: {308}, 190: {309, 79}, 191: {80, 310}, 192: {195}, 193: {312}, 194: {313}, 195: {314, 83}, 196: {315, 84, 254}, 197: {255}, 198: {317}, 199: {318}, 200: {257, 93, 319}, 201: {320, 258, 94}, 202: {321, 259, 95}, 203: {322}, 204: {323}, 205: {324}, 206: {263}, 207: {326}, 208: {265}, 209: {328}, 210: {329}, 211: {330}, 212: {331}, 213: {332}, 214: {333}, 215: {271}, 216: {272}, 217: {336}, 218: {337}, 219: {338}, 220: {339}, 221: {340}, 222: {341}, 223: {342}, 224: {343}, 225: {344}, 226: {345}, 227: {346}, 228: {347}, 229: {348}, 230: {349}, 231: {350}, 232: {351}, 233: {352}, 234: {353}, 235: {128}, 236: {129}, 237: {130}, 238: {131}, 239: {132}, 240: {133}, 241: {134}, 242: {246}, 243: {287}, 244: {137}, 245: {138}, 246: {139}, 247: {140}, 248: {141}, 249: {142}, 250: {143}, 251: {144}, 252: {145}, 253: {146}, 254: {147}, 255: {148}, 256: {160}, 257: {161}, 258: {6}, 259: {151}, 260: {152}, 261: {153}, 262: {154}, 263: {155}, 264: {156}, 265: {157}, 266: {158}, 267: {159}, 268: {295}, 269: {296}, 270: {162}, 271: {163}, 272: {164}, 273: {165}, 274: {166}, 275: {167}, 276: {168}, 277: {169}, 278: {170}, 279: {171}, 280: {172}, 281: {173}, 282: {174}, 283: {175}, 284: {176}, 285: {177}, 286: {178}, 287: {179}, 288: {180}, 289: {181}, 290: {127}, 291: {182}, 292: {183}, 293: {184}, 294: {185}, 295: {186}, 296: {187}, 297: {188}, 298: {189}, 299: {190}, 300: {191}, 301: {192}, 302: {193}, 303: {194}, 304: {311}, 305: {196}, 306: {197}, 307: {198}, 308: {199}, 309: {200}, 310: {201}, 311: {202}, 312: {203}, 313: {204}, 314: {205}, 315: {206}, 316: {207}, 317: {208}, 318: {209}, 319: {210}, 320: {211}, 321: {212}, 322: {213}, 323: {214}, 324: {215}, 325: {216}, 326: {217}, 327: {218}, 328: {219}, 329: {220}, 330: {221}, 331: {222}, 332: {223}, 333: {224}, 334: {225}, 335: {226}, 336: {227}, 337: {228}, 338: {229}, 339: {230}, 340: {231}, 341: {232}, 342: {233}, 343: {234}, 344: {235}, 345: {236}, 346: {237}, 347: {238}, 348: {239}, 349: {240}, 350: {241}, 351: {242}, 352: {243}, 353: {244}, 354: {245}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 bitcast bitcast
EXACT 49 add add
EXACT 50 load load
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 load load
EXACT 57 add add
EXACT 58 load load
EXACT 59 load load
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
MORE 64 POT: 2
MORE 65 POT: 2
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
MORE 69 POT: 2
MORE 70 POT: 2
EXACT 71 getelementptr getelementptr
EXACT 72 getelementptr getelementptr
EXACT 73 bitcast bitcast
EXACT 74 getelementptr getelementptr
EXACT 75 getelementptr getelementptr
EXACT 76 load load
EXACT 77 br br
EXACT 78 phi phi
MORE 79 POT: 2
MORE 80 POT: 2
EXACT 81 add add
EXACT 82 store store
MORE 83 POT: 2
EXACT 84 load load
EXACT 85 zext zext
EXACT 86 store store
EXACT 87 add add
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 load load
EXACT 92 sub sub
EXACT 93 icmp icmp
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 and and
EXACT 97 tail tail
EXACT 98 trunc trunc
EXACT 99 and and
EXACT 100 xor xor
EXACT 101 store store
EXACT 102 xor xor
EXACT 103 xor xor
EXACT 104 lshr lshr
EXACT 105 trunc trunc
EXACT 106 and and
EXACT 107 store store
EXACT 108 icmp icmp
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 lshr lshr
EXACT 112 trunc trunc
EXACT 113 store store
EXACT 114 lshr lshr
EXACT 115 lshr lshr
EXACT 116 xor xor
EXACT 117 xor xor
EXACT 118 add add
EXACT 119 icmp icmp
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 or or
EXACT 123 select select
EXACT 124 add add
EXACT 125 store store
EXACT 126 br br
EXACT 127 add add
EXACT 128 add add
EXACT 129 store store
EXACT 130 inttoptr inttoptr
EXACT 131 load load
EXACT 132 store store
EXACT 133 add add
EXACT 134 store store
MORE 135 POT: 3
EXACT 136 add add
EXACT 137 zext zext
MORE 138 POT: 3
MORE 139 POT: 3
MORE 140 POT: 3
EXACT 141 and and
EXACT 142 tail tail
EXACT 143 trunc trunc
EXACT 144 and and
EXACT 145 xor xor
EXACT 146 store store
EXACT 147 xor xor
EXACT 148 lshr lshr
EXACT 149 trunc trunc
EXACT 150 and and
EXACT 151 store store
EXACT 152 icmp icmp
EXACT 153 zext zext
EXACT 154 store store
EXACT 155 lshr lshr
EXACT 156 trunc trunc
EXACT 157 store store
EXACT 158 lshr lshr
EXACT 159 xor xor
EXACT 160 add add
EXACT 161 icmp icmp
EXACT 162 zext zext
EXACT 163 store store
EXACT 164 store store
EXACT 165 store store
EXACT 166 shl shl
EXACT 167 add add
EXACT 168 add add
EXACT 169 store store
EXACT 170 inttoptr inttoptr
EXACT 171 load load
EXACT 172 zext zext
EXACT 173 store store
EXACT 174 add add
EXACT 175 store store
EXACT 176 load load
EXACT 177 store store
EXACT 178 add add
EXACT 179 store store
EXACT 180 load load
EXACT 181 zext zext
EXACT 182 store store
EXACT 183 store store
EXACT 184 shl shl
EXACT 185 add add
EXACT 186 add add
EXACT 187 store store
EXACT 188 inttoptr inttoptr
EXACT 189 store store
MORE 190 POT: 2
MORE 191 POT: 2
EXACT 192 load load
EXACT 193 add add
EXACT 194 store store
MORE 195 POT: 2
MORE 196 POT: 3
EXACT 197 add add
EXACT 198 zext zext
EXACT 199 store store
MORE 200 POT: 3
MORE 201 POT: 3
MORE 202 POT: 3
EXACT 203 and and
EXACT 204 tail tail
EXACT 205 trunc trunc
EXACT 206 and and
EXACT 207 xor xor
EXACT 208 store store
EXACT 209 xor xor
EXACT 210 xor xor
EXACT 211 lshr lshr
EXACT 212 trunc trunc
EXACT 213 and and
EXACT 214 store store
EXACT 215 icmp icmp
EXACT 216 zext zext
EXACT 217 store store
EXACT 218 lshr lshr
EXACT 219 trunc trunc
EXACT 220 store store
EXACT 221 lshr lshr
EXACT 222 xor xor
EXACT 223 xor xor
EXACT 224 add add
EXACT 225 icmp icmp
EXACT 226 zext zext
EXACT 227 store store
EXACT 228 add add
EXACT 229 store store
EXACT 230 store store
EXACT 231 load load
EXACT 232 add add
EXACT 233 store store
EXACT 234 br br
EXACT 235 getelementptr getelementptr
EXACT 236 store store
EXACT 237 add add
EXACT 238 store store
EXACT 239 load load
EXACT 240 zext zext
EXACT 241 store store
EXACT 242 add add
EXACT 243 add add
EXACT 244 store store
EXACT 245 inttoptr inttoptr
EXACT 246 load load
EXACT 247 store store
EXACT 248 add add
EXACT 249 store store
EXACT 250 inttoptr inttoptr
EXACT 251 load load
EXACT 252 zext zext
EXACT 253 store store
EXACT 254 add add
EXACT 255 store store
EXACT 256 load load
EXACT 257 store store
EXACT 258 getelementptr getelementptr
EXACT 259 add add
EXACT 260 add add
EXACT 261 store store
EXACT 262 inttoptr inttoptr
EXACT 263 load load
EXACT 264 zext zext
EXACT 265 store store
EXACT 266 add add
EXACT 267 store store
EXACT 268 load load
EXACT 269 store store
EXACT 270 getelementptr getelementptr
EXACT 271 add add
EXACT 272 add add
EXACT 273 store store
EXACT 274 inttoptr inttoptr
EXACT 275 load load
EXACT 276 zext zext
EXACT 277 store store
EXACT 278 add add
EXACT 279 store store
EXACT 280 load load
EXACT 281 store store
EXACT 282 getelementptr getelementptr
EXACT 283 add add
EXACT 284 add add
EXACT 285 store store
EXACT 286 inttoptr inttoptr
EXACT 287 load load
EXACT 288 zext zext
EXACT 289 store store
EXACT 290 bitcast bitcast
EXACT 291 store store
EXACT 292 add add
EXACT 293 add add
EXACT 294 load load
EXACT 295 add add
EXACT 296 inttoptr inttoptr
EXACT 297 store store
EXACT 298 store store
EXACT 299 store store
EXACT 300 tail tail
EXACT 301 load load
EXACT 302 add add
EXACT 303 load load
EXACT 304 load load
EXACT 305 add add
EXACT 306 store store
EXACT 307 inttoptr inttoptr
EXACT 308 store store
EXACT 309 load load
EXACT 310 load load
EXACT 311 add add
EXACT 312 store store
EXACT 313 icmp icmp
EXACT 314 zext zext
EXACT 315 store store
EXACT 316 trunc trunc
EXACT 317 and and
EXACT 318 tail tail
EXACT 319 trunc trunc
EXACT 320 and and
EXACT 321 xor xor
EXACT 322 store store
EXACT 323 xor xor
EXACT 324 lshr lshr
EXACT 325 trunc trunc
EXACT 326 and and
EXACT 327 store store
EXACT 328 icmp icmp
EXACT 329 zext zext
EXACT 330 store store
EXACT 331 lshr lshr
EXACT 332 trunc trunc
EXACT 333 store store
EXACT 334 lshr lshr
EXACT 335 xor xor
EXACT 336 add add
EXACT 337 icmp icmp
EXACT 338 zext zext
EXACT 339 store store
EXACT 340 add add
EXACT 341 store store
EXACT 342 add add
EXACT 343 inttoptr inttoptr
EXACT 344 load load
EXACT 345 store store
EXACT 346 store store
EXACT 347 add add
EXACT 348 store store
EXACT 349 inttoptr inttoptr
EXACT 350 load load
EXACT 351 store store
EXACT 352 add add
EXACT 353 store store
EXACT 354 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %3 to i32*
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 4 %EDI = bitcast %union.anon* %4 to i32*
- 5 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 6 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 7 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 8 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = load i64, i64* %RBP, align 8
- 12 %6 = add i64 %1, 1
- 13 store i64 %6, i64* %PC, align 8
- 14 %7 = load i64, i64* %RSP, align 8
- 15 %8 = add i64 %7, -8
- 16 %9 = inttoptr i64 %8 to i64*
- 17 store i64 %5, i64* %9, align 8
- 18 %10 = load i64, i64* %PC, align 8
- 19 store i64 %8, i64* %RBP, align 8
- 20 %11 = add i64 %7, -40
- 21 store i64 %11, i64* %RSP, align 8
- 22 %12 = icmp ult i64 %8, 32
- 23 %13 = zext i1 %12 to i8
- 24 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 store i8 %13, i8* %14, align 1
- 26 %15 = trunc i64 %11 to i32
- 27 %16 = and i32 %15, 255
- 28 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 29 %18 = trunc i32 %17 to i8
- 30 %19 = and i8 %18, 1
- 31 %20 = xor i8 %19, 1
- 32 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 33 store i8 %20, i8* %21, align 1
- 34 %22 = xor i64 %8, %11
- 35 %23 = lshr i64 %22, 4
- 36 %24 = trunc i64 %23 to i8
- 37 %25 = and i8 %24, 1
- 38 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 store i8 %25, i8* %26, align 1
- 40 %27 = icmp eq i64 %11, 0
- 41 %28 = zext i1 %27 to i8
- 42 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 43 store i8 %28, i8* %29, align 1
- 44 %30 = lshr i64 %11, 63
- 45 %31 = trunc i64 %30 to i8
- 46 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 store i8 %31, i8* %32, align 1
- 48 %33 = lshr i64 %8, 63
- 49 %34 = xor i64 %30, %33
- 50 %35 = add nuw nsw i64 %34, %33
- 51 %36 = icmp eq i64 %35, 2
- 52 %37 = zext i1 %36 to i8
- 53 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 54 store i8 %37, i8* %38, align 1
- 55 %39 = add i64 %7, -12
- 56 %40 = load i32, i32* %EDI, align 4
- 57 %41 = add i64 %10, 10
- 58 store i64 %41, i64* %PC, align 8
- 59 %42 = inttoptr i64 %39 to i32*
- 60 store i32 %40, i32* %42, align 4
- 61 %43 = load i64, i64* %RBP, align 8
- 62 %44 = add i64 %43, -16
- 63 %45 = load i64, i64* %RSI, align 8
- 64 %46 = load i64, i64* %PC, align 8
- 65 %47 = add i64 %46, 4
- 66 store i64 %47, i64* %PC, align 8
- 67 %48 = inttoptr i64 %44 to i64*
- 68 store i64 %45, i64* %48, align 8
- 69 %49 = load i64, i64* %RBP, align 8
- 70 %50 = add i64 %49, -20
- 71 %51 = load i64, i64* %PC, align 8
- 72 %52 = add i64 %51, 7
- 73 store i64 %52, i64* %PC, align 8
- 74 %53 = inttoptr i64 %50 to i32*
- 75 store i32 3, i32* %53, align 4
- 76 %.pre = load i64, i64* %PC, align 8
- 77 \<badref\> = br label %block_400536
- 78 %54 = phi i64 [ %244, %block_400542 ], [ %.pre, %block_400520 ]
- 79 %55 = load i64, i64* %RBP, align 8
- 80 %56 = add i64 %55, -20
- 81 %57 = add i64 %54, 3
- 82 store i64 %57, i64* %PC, align 8
- 83 %58 = inttoptr i64 %56 to i32*
- 84 %59 = load i32, i32* %58, align 4
- 85 %60 = zext i32 %59 to i64
- 86 store i64 %60, i64* %RAX, align 8
- 87 %61 = add i64 %55, -4
- 88 %62 = add i64 %54, 6
- 89 store i64 %62, i64* %PC, align 8
- 90 %63 = inttoptr i64 %61 to i32*
- 91 %64 = load i32, i32* %63, align 4
- 92 %65 = sub i32 %59, %64
- 93 %66 = icmp ult i32 %59, %64
- 94 %67 = zext i1 %66 to i8
- 95 store i8 %67, i8* %14, align 1
- 96 %68 = and i32 %65, 255
- 97 %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
- 98 %70 = trunc i32 %69 to i8
- 99 %71 = and i8 %70, 1
- 100 %72 = xor i8 %71, 1
- 101 store i8 %72, i8* %21, align 1
- 102 %73 = xor i32 %64, %59
- 103 %74 = xor i32 %73, %65
- 104 %75 = lshr i32 %74, 4
- 105 %76 = trunc i32 %75 to i8
- 106 %77 = and i8 %76, 1
- 107 store i8 %77, i8* %26, align 1
- 108 %78 = icmp eq i32 %65, 0
- 109 %79 = zext i1 %78 to i8
- 110 store i8 %79, i8* %29, align 1
- 111 %80 = lshr i32 %65, 31
- 112 %81 = trunc i32 %80 to i8
- 113 store i8 %81, i8* %32, align 1
- 114 %82 = lshr i32 %59, 31
- 115 %83 = lshr i32 %64, 31
- 116 %84 = xor i32 %83, %82
- 117 %85 = xor i32 %80, %82
- 118 %86 = add nuw nsw i32 %85, %84
- 119 %87 = icmp eq i32 %86, 2
- 120 %88 = zext i1 %87 to i8
- 121 store i8 %88, i8* %38, align 1
- 122 %89 = or i1 %78, %66
- 123 %.v = select i1 %89, i64 55, i64 12
- 124 %90 = add i64 %54, %.v
- 125 store i64 %90, i64* %PC, align 8
- 126 \<badref\> = br i1 %89, label %block_40056d, label %block_400542
- 127 %AL = bitcast %union.anon* %3 to i8*
- 128 %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 129 store i64 add (i64 ptrtoint (%seg_400690__rodata_type* @seg_400690__rodata to i64), i64 4), i64* %RDI, align 8
- 130 %91 = add i64 %90, 13
- 131 store i64 %91, i64* %PC, align 8
- 132 %92 = load i32, i32* %63, align 4
- 133 %93 = zext i32 %92 to i64
- 134 store i64 %93, i64* %RSI, align 8
- 135 %94 = add i64 %55, -16
- 136 %95 = add i64 %90, 17
- 137 store i64 %95, i64* %PC, align 8
- 138 %96 = inttoptr i64 %94 to i64*
- 139 %97 = load i64, i64* %96, align 8
- 140 store i64 %97, i64* %RAX, align 8
- 141 %98 = add i64 %90, 19
- 142 store i64 %98, i64* %PC, align 8
- 143 %99 = inttoptr i64 %97 to i32*
- 144 %100 = load i32, i32* %99, align 4
- 145 %101 = zext i32 %100 to i64
- 146 store i64 %101, i64* %RDX, align 8
- 147 %102 = add i64 %90, 23
- 148 store i64 %102, i64* %PC, align 8
- 149 %103 = load i64, i64* %96, align 8
- 150 store i64 %103, i64* %RAX, align 8
- 151 %104 = add i64 %103, 4
- 152 %105 = add i64 %90, 26
- 153 store i64 %105, i64* %PC, align 8
- 154 %106 = inttoptr i64 %104 to i32*
- 155 %107 = load i32, i32* %106, align 4
- 156 %108 = zext i32 %107 to i64
- 157 store i64 %108, i64* %RCX, align 8
- 158 %109 = add i64 %90, 30
- 159 store i64 %109, i64* %PC, align 8
- 160 %110 = load i64, i64* %96, align 8
- 161 store i64 %110, i64* %RAX, align 8
- 162 %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 163 %112 = add i64 %110, 8
- 164 %113 = add i64 %90, 34
- 165 store i64 %113, i64* %PC, align 8
- 166 %114 = inttoptr i64 %112 to i32*
- 167 %115 = load i32, i32* %114, align 4
- 168 %116 = zext i32 %115 to i64
- 169 store i64 %116, i64* %111, align 8
- 170 %117 = add i64 %90, 38
- 171 store i64 %117, i64* %PC, align 8
- 172 %118 = load i64, i64* %96, align 8
- 173 store i64 %118, i64* %RAX, align 8
- 174 %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
- 175 %120 = add i64 %118, 12
- 176 %121 = add i64 %90, 42
- 177 store i64 %121, i64* %PC, align 8
- 178 %122 = inttoptr i64 %120 to i32*
- 179 %123 = load i32, i32* %122, align 4
- 180 %124 = zext i32 %123 to i64
- 181 store i64 %124, i64* %119, align 8
- 182 store i8 0, i8* %AL, align 1
- 183 %125 = add i64 %90, -333
- 184 %126 = add i64 %90, 49
- 185 %127 = load i64, i64* %RSP, align 8
- 186 %128 = add i64 %127, -8
- 187 %129 = inttoptr i64 %128 to i64*
- 188 store i64 %126, i64* %129, align 8
- 189 store i64 %128, i64* %RSP, align 8
- 190 store i64 %125, i64* %PC, align 8
- 191 %130 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)
- 192 %131 = load i64, i64* %RBP, align 8
- 193 %132 = add i64 %131, -24
- 194 %133 = load i32, i32* %EAX, align 4
- 195 %134 = load i64, i64* %PC, align 8
- 196 %135 = add i64 %134, 3
- 197 store i64 %135, i64* %PC, align 8
- 198 %136 = inttoptr i64 %132 to i32*
- 199 store i32 %133, i32* %136, align 4
- 200 %137 = load i64, i64* %RSP, align 8
- 201 %138 = load i64, i64* %PC, align 8
- 202 %139 = add i64 %137, 32
- 203 store i64 %139, i64* %RSP, align 8
- 204 %140 = icmp ugt i64 %137, -33
- 205 %141 = zext i1 %140 to i8
- 206 store i8 %141, i8* %14, align 1
- 207 %142 = trunc i64 %139 to i32
- 208 %143 = and i32 %142, 255
- 209 %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #12
- 210 %145 = trunc i32 %144 to i8
- 211 %146 = and i8 %145, 1
- 212 %147 = xor i8 %146, 1
- 213 store i8 %147, i8* %21, align 1
- 214 %148 = xor i64 %139, %137
- 215 %149 = lshr i64 %148, 4
- 216 %150 = trunc i64 %149 to i8
- 217 %151 = and i8 %150, 1
- 218 store i8 %151, i8* %26, align 1
- 219 %152 = icmp eq i64 %139, 0
- 220 %153 = zext i1 %152 to i8
- 221 store i8 %153, i8* %29, align 1
- 222 %154 = lshr i64 %139, 63
- 223 %155 = trunc i64 %154 to i8
- 224 store i8 %155, i8* %32, align 1
- 225 %156 = lshr i64 %137, 63
- 226 %157 = xor i64 %154, %156
- 227 %158 = add nuw nsw i64 %157, %154
- 228 %159 = icmp eq i64 %158, 2
- 229 %160 = zext i1 %159 to i8
- 230 store i8 %160, i8* %38, align 1
- 231 %161 = add i64 %138, 5
- 232 store i64 %161, i64* %PC, align 8
- 233 %162 = add i64 %137, 40
- 234 %163 = inttoptr i64 %139 to i64*
- 235 %164 = load i64, i64* %163, align 8
- 236 store i64 %164, i64* %RBP, align 8
- 237 store i64 %162, i64* %RSP, align 8
- 238 %165 = add i64 %138, 6
- 239 store i64 %165, i64* %PC, align 8
- 240 %166 = inttoptr i64 %162 to i64*
- 241 %167 = load i64, i64* %166, align 8
- 242 store i64 %167, i64* %PC, align 8
- 243 %168 = add i64 %137, 48
- 244 store i64 %168, i64* %RSP, align 8
- 245 ret %struct.Memory* %130
- 246 %169 = add i64 %55, -16
- 247 %170 = add i64 %90, 4
- 248 store i64 %170, i64* %PC, align 8
- 249 %171 = inttoptr i64 %169 to i64*
- 250 %172 = load i64, i64* %171, align 8
- 251 store i64 %172, i64* %RAX, align 8
- 252 %173 = add i64 %90, 7
- 253 store i64 %173, i64* %PC, align 8
- 254 %174 = load i32, i32* %58, align 4
- 255 %175 = add i32 %174, -1
- 256 %176 = zext i32 %175 to i64
- 257 %177 = icmp eq i32 %174, 0
- 258 %178 = zext i1 %177 to i8
- 259 store i8 %178, i8* %14, align 1
- 260 %179 = and i32 %175, 255
- 261 %180 = tail call i32 @llvm.ctpop.i32(i32 %179) #12
- 262 %181 = trunc i32 %180 to i8
- 263 %182 = and i8 %181, 1
- 264 %183 = xor i8 %182, 1
- 265 store i8 %183, i8* %21, align 1
- 266 %184 = xor i32 %175, %174
- 267 %185 = lshr i32 %184, 4
- 268 %186 = trunc i32 %185 to i8
- 269 %187 = and i8 %186, 1
- 270 store i8 %187, i8* %26, align 1
- 271 %188 = icmp eq i32 %175, 0
- 272 %189 = zext i1 %188 to i8
- 273 store i8 %189, i8* %29, align 1
- 274 %190 = lshr i32 %175, 31
- 275 %191 = trunc i32 %190 to i8
- 276 store i8 %191, i8* %32, align 1
- 277 %192 = lshr i32 %174, 31
- 278 %193 = xor i32 %190, %192
- 279 %194 = add nuw nsw i32 %193, %192
- 280 %195 = icmp eq i32 %194, 2
- 281 %196 = zext i1 %195 to i8
- 282 store i8 %196, i8* %38, align 1
- 283 store i64 %176, i64* %RCX, align 8
- 284 store i64 %176, i64* %RDX, align 8
- 285 %197 = shl nuw nsw i64 %176, 2
- 286 %198 = add i64 %172, %197
- 287 %199 = add i64 %90, 17
- 288 store i64 %199, i64* %PC, align 8
- 289 %200 = inttoptr i64 %198 to i32*
- 290 %201 = load i32, i32* %200, align 4
- 291 %202 = zext i32 %201 to i64
- 292 store i64 %202, i64* %RCX, align 8
- 293 %203 = add i64 %90, 21
- 294 store i64 %203, i64* %PC, align 8
- 295 %204 = load i64, i64* %171, align 8
- 296 store i64 %204, i64* %RAX, align 8
- 297 %205 = add i64 %90, 24
- 298 store i64 %205, i64* %PC, align 8
- 299 %206 = load i32, i32* %58, align 4
- 300 %207 = zext i32 %206 to i64
- 301 store i64 %207, i64* %RSI, align 8
- 302 store i64 %207, i64* %RDX, align 8
- 303 %208 = shl nuw nsw i64 %207, 2
- 304 %209 = add i64 %204, %208
- 305 %210 = add i64 %90, 29
- 306 store i64 %210, i64* %PC, align 8
- 307 %211 = inttoptr i64 %209 to i32*
- 308 store i32 %201, i32* %211, align 4
- 309 %212 = load i64, i64* %RBP, align 8
- 310 %213 = add i64 %212, -20
- 311 %214 = load i64, i64* %PC, align 8
- 312 %215 = add i64 %214, 3
- 313 store i64 %215, i64* %PC, align 8
- 314 %216 = inttoptr i64 %213 to i32*
- 315 %217 = load i32, i32* %216, align 4
- 316 %218 = add i32 %217, -1
- 317 %219 = zext i32 %218 to i64
- 318 store i64 %219, i64* %RAX, align 8
- 319 %220 = icmp ne i32 %217, 0
- 320 %221 = zext i1 %220 to i8
- 321 store i8 %221, i8* %14, align 1
- 322 %222 = and i32 %218, 255
- 323 %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #12
- 324 %224 = trunc i32 %223 to i8
- 325 %225 = and i8 %224, 1
- 326 %226 = xor i8 %225, 1
- 327 store i8 %226, i8* %21, align 1
- 328 %227 = xor i32 %217, 16
- 329 %228 = xor i32 %227, %218
- 330 %229 = lshr i32 %228, 4
- 331 %230 = trunc i32 %229 to i8
- 332 %231 = and i8 %230, 1
- 333 store i8 %231, i8* %26, align 1
- 334 %232 = icmp eq i32 %218, 0
- 335 %233 = zext i1 %232 to i8
- 336 store i8 %233, i8* %29, align 1
- 337 %234 = lshr i32 %218, 31
- 338 %235 = trunc i32 %234 to i8
- 339 store i8 %235, i8* %32, align 1
- 340 %236 = lshr i32 %217, 31
- 341 %237 = xor i32 %234, %236
- 342 %238 = xor i32 %234, 1
- 343 %239 = add nuw nsw i32 %237, %238
- 344 %240 = icmp eq i32 %239, 2
- 345 %241 = zext i1 %240 to i8
- 346 store i8 %241, i8* %38, align 1
- 347 %242 = add i64 %214, 9
- 348 store i64 %242, i64* %PC, align 8
- 349 store i32 %218, i32* %216, align 4
- 350 %243 = load i64, i64* %PC, align 8
- 351 %244 = add i64 %243, -50
- 352 store i64 %244, i64* %PC, align 8
- 353 \<badref\> = br label %block_400536
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe079caa840>, {0: {0}, 1: {71}, 2: {48, 73, 290}, 3: {47}, 4: {48, 73, 290}, 5: {72, 235}, 6: {74, 258}, 7: {75}, 8: {55}, 9: {5}, 10: {1}, 11: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 12: {3}, 13: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 14: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 15: {295, 7}, 16: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 17: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 18: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 19: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 20: {12}, 21: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 22: {14}, 23: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 24: {16}, 25: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 26: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 27: {96, 203, 141, 19, 317}, 28: {97, 204, 300, 142, 20, 318}, 29: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 30: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 31: {321, 100, 207, 145, 23, 223}, 32: {24}, 33: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 34: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 35: {324, 104, 211, 148, 27}, 36: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 37: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 38: {30}, 39: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 40: {32, 200, 328, 138, 108, 215, 152, 93}, 41: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 42: {34}, 43: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 44: {40, 331, 36, 334}, 45: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 46: {38}, 47: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 48: {40, 331, 36, 334}, 49: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 50: {160, 224, 167, 42, 336, 118, 185, 124}, 51: {161, 225, 43, 337, 119}, 52: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 53: {45}, 54: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 55: {49}, 56: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 57: {51}, 58: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 59: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 60: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 61: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 62: {57, 242, 127}, 63: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 64: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 65: {128, 259, 60}, 66: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 67: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 68: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 69: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 70: {80, 65, 191}, 71: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 72: {67, 133}, 73: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 74: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 75: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 76: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 77: {234, 77}, 78: {78}, 79: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 80: {80, 65, 191}, 81: {81, 193, 305}, 82: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 83: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 84: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 85: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 86: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 87: {87}, 88: {88, 347}, 89: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 90: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 91: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 92: {92}, 93: {32, 200, 328, 138, 108, 215, 152, 93}, 94: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 95: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 96: {96, 203, 141, 19, 317}, 97: {97, 204, 300, 142, 20, 318}, 98: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 99: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 100: {321, 100, 207, 145, 23, 223}, 101: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 102: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 103: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 104: {324, 104, 211, 148, 27}, 105: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 106: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 107: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 108: {32, 200, 328, 138, 108, 215, 152, 93}, 109: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 110: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 111: {111, 114, 115, 218, 155, 221, 158}, 112: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 113: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 114: {111, 114, 115, 218, 155, 221, 158}, 115: {111, 114, 115, 218, 155, 221, 158}, 116: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 117: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 118: {160, 224, 167, 42, 336, 118, 185, 124}, 119: {161, 225, 43, 337, 119}, 120: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 121: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 122: {122}, 123: {123}, 124: {160, 224, 167, 42, 336, 118, 185, 124}, 125: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 126: {126}, 127: {48, 73, 290}, 128: {72, 235}, 129: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 130: {237}, 131: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 132: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 133: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 134: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 135: {57, 242, 127}, 136: {168, 243}, 137: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 138: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 139: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 140: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 141: {248}, 142: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 143: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 144: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 145: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 146: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 147: {254}, 148: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 149: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 150: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 151: {128, 259, 60}, 152: {260}, 153: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 154: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 155: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 156: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 157: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 158: {266}, 159: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 160: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 161: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 162: {270}, 163: {271}, 164: {272}, 165: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 166: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 167: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 168: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 169: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 170: {278}, 171: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 172: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 173: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 174: {282}, 175: {283}, 176: {284}, 177: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 178: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 179: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 180: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 181: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 182: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 183: {292}, 184: {293}, 185: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 186: {295, 7}, 187: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 188: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 189: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 190: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 191: {97, 204, 300, 142, 20, 318}, 192: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 193: {302}, 194: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 195: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 196: {81, 193, 305}, 197: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 198: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 199: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 200: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 201: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 202: {311}, 203: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 204: {313}, 205: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 206: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 207: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 208: {96, 203, 141, 19, 317}, 209: {97, 204, 300, 142, 20, 318}, 210: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 211: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 212: {321, 100, 207, 145, 23, 223}, 213: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 214: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 215: {324, 104, 211, 148, 27}, 216: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 217: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 218: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 219: {32, 200, 328, 138, 108, 215, 152, 93}, 220: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 221: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 222: {40, 331, 36, 334}, 223: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 224: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 225: {40, 331, 36, 334}, 226: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 227: {160, 224, 167, 42, 336, 118, 185, 124}, 228: {161, 225, 43, 337, 119}, 229: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 230: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 231: {340}, 232: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 233: {342}, 234: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 235: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 236: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 237: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 238: {88, 347}, 239: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 240: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 241: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 242: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 243: {352}, 244: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 245: {354}, 246: {57, 242, 127}, 247: {128, 259, 60}, 248: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 249: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 250: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 251: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 252: {67, 133}, 253: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 254: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 255: {136, 197}, 256: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 257: {32, 200, 328, 138, 108, 215, 152, 93}, 258: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 259: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 260: {96, 203, 141, 19, 317}, 261: {97, 204, 300, 142, 20, 318}, 262: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 263: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 264: {321, 100, 207, 145, 23, 223}, 265: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 266: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 267: {324, 104, 211, 148, 27}, 268: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 269: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 270: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 271: {32, 200, 328, 138, 108, 215, 152, 93}, 272: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 273: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 274: {111, 114, 115, 218, 155, 221, 158}, 275: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 276: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 277: {111, 114, 115, 218, 155, 221, 158}, 278: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 279: {160, 224, 167, 42, 336, 118, 185, 124}, 280: {161, 225, 43, 337, 119}, 281: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 282: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 283: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 284: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 285: {184, 166}, 286: {160, 224, 167, 42, 336, 118, 185, 124}, 287: {168, 243}, 288: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 289: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 290: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 291: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 292: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 293: {174}, 294: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 295: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 296: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 297: {178}, 298: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 299: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 300: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 301: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 302: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 303: {184, 166}, 304: {160, 224, 167, 42, 336, 118, 185, 124}, 305: {186}, 306: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 307: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 308: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 309: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 310: {80, 65, 191}, 311: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 312: {81, 193, 305}, 313: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 314: {130, 195, 69, 262, 8, 296, 170, 250, 274, 83, 307, 53, 245, 343, 90, 188, 349, 62, 286}, 315: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 316: {136, 197}, 317: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 318: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 319: {32, 200, 328, 138, 108, 215, 152, 93}, 320: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 321: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 322: {96, 203, 141, 19, 317}, 323: {97, 204, 300, 142, 20, 318}, 324: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 325: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 326: {321, 100, 207, 145, 23, 223}, 327: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 328: {209}, 329: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 330: {324, 104, 211, 148, 27}, 331: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 332: {320, 99, 326, 106, 206, 144, 213, 22, 150, 29}, 333: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 334: {32, 200, 328, 138, 108, 215, 152, 93}, 335: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 336: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 337: {111, 114, 115, 218, 155, 221, 158}, 338: {98, 37, 325, 105, 332, 205, 143, 112, 156, 18, 212, 21, 149, 316, 219, 28, 319}, 339: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 340: {111, 114, 115, 218, 155, 221, 158}, 341: {323, 102, 103, 41, 335, 210, 147, 116, 117, 26, 222, 159}, 342: {321, 100, 207, 145, 23, 223}, 343: {160, 224, 167, 42, 336, 118, 185, 124}, 344: {161, 225, 43, 337, 119}, 345: {264, 137, 139, 15, 276, 153, 288, 33, 162, 44, 172, 181, 314, 198, 201, 329, 338, 85, 216, 94, 226, 109, 240, 120, 252}, 346: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 347: {228}, 348: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 349: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 350: {256, 2, 131, 6, 135, 263, 10, 268, 275, 280, 287, 294, 171, 301, 303, 176, 304, 50, 180, 309, 310, 56, 58, 59, 190, 64, 192, 66, 196, 76, 79, 84, 344, 91, 350, 231, 239, 246, 251}, 351: {232}, 352: {4, 9, 11, 13, 17, 25, 31, 35, 39, 46, 52, 54, 61, 63, 68, 70, 82, 86, 89, 95, 101, 107, 110, 113, 121, 125, 129, 132, 134, 140, 146, 151, 154, 157, 163, 164, 165, 169, 173, 175, 177, 179, 182, 183, 187, 189, 194, 199, 202, 208, 214, 217, 220, 227, 229, 230, 233, 236, 238, 241, 244, 247, 249, 253, 255, 257, 261, 265, 267, 269, 273, 277, 279, 281, 285, 289, 291, 297, 298, 299, 306, 308, 312, 315, 322, 327, 330, 333, 339, 341, 345, 346, 348, 351, 353}, 353: {234, 77}})
Equivalent! frozenset({234, 77}) {353, 77}
Equivalent! frozenset({242, 127}) {246, 135}
Equivalent! frozenset({168, 243}) {136, 287}
Equivalent! frozenset({169, 244}) {288, 137}
Equivalent! frozenset({130, 245}) {249, 138}
Equivalent! frozenset({256, 176, 131, 246, 280, 268}) {160, 295, 139, 172, 149, 250}
Equivalent! frozenset({257, 177, 132, 247, 281, 269}) {161, 296, 140, 173, 150, 251}
Equivalent! frozenset({192, 304}) {195, 311}
Equivalent! frozenset({193, 305}) {312, 196}
Equivalent! frozenset({194, 306}) {313, 197}
Equivalent! frozenset({136, 197}) {316, 255}
Equivalent! frozenset({203, 141}) {322, 260}
Equivalent! frozenset({204, 142}) {323, 261}
Equivalent! frozenset({205, 143}) {324, 262}
Equivalent! frozenset({144, 206}) {325, 263}
Equivalent! frozenset({145, 207}) {264, 326}
Equivalent! frozenset({208, 146}) {265, 327}
Equivalent! frozenset({152, 215}) {334, 271}
Equivalent! frozenset({216, 153}) {272, 335}
Equivalent! frozenset({217, 154}) {336, 273}
Equivalent! frozenset({218, 155}) {337, 274}
Equivalent! frozenset({219, 156}) {338, 275}
Equivalent! frozenset({220, 157}) {339, 276}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe079caa840>, {0: {0}, 1: {71}, 2: {73}, 3: {47}, 4: {48}, 5: {72}, 6: {74, 258}, 7: {75}, 8: {55}, 9: {5}, 10: {1}, 11: {2}, 12: {3}, 13: {4}, 14: {6}, 15: {7}, 16: {8}, 17: {9}, 18: {10}, 19: {11}, 20: {12}, 21: {13}, 22: {14}, 23: {15}, 24: {16}, 25: {17}, 26: {18}, 27: {19}, 28: {20}, 29: {21}, 30: {22}, 31: {23}, 32: {24}, 33: {25}, 34: {26}, 35: {27}, 36: {28}, 37: {29}, 38: {30}, 39: {31}, 40: {32}, 41: {33}, 42: {34}, 43: {35}, 44: {36}, 45: {37}, 46: {38}, 47: {39}, 48: {40}, 49: {41}, 50: {42}, 51: {43}, 52: {44}, 53: {45}, 54: {46}, 55: {49}, 56: {50}, 57: {51}, 58: {52}, 59: {53}, 60: {54}, 61: {56}, 62: {57}, 63: {58}, 64: {59}, 65: {60}, 66: {61}, 67: {62}, 68: {63}, 69: {64, 190}, 70: {65, 191}, 71: {66}, 72: {67}, 73: {68}, 74: {195, 69}, 75: {70, 230}, 76: {76}, 77: {77}, 78: {78}, 79: {190, 79}, 80: {80, 191}, 81: {81}, 82: {82}, 83: {83, 195}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {290}, 128: {235}, 129: {236}, 130: {237}, 131: {238}, 132: {239}, 133: {240}, 134: {241}, 135: {127}, 136: {168}, 137: {244}, 138: {245}, 139: {131}, 140: {132}, 141: {248}, 142: {249}, 143: {250}, 144: {251}, 145: {252}, 146: {253}, 147: {254}, 148: {255}, 149: {280}, 150: {281}, 151: {259}, 152: {260}, 153: {261}, 154: {262}, 155: {263}, 156: {264}, 157: {265}, 158: {266}, 159: {267}, 160: {256}, 161: {257}, 162: {270}, 163: {271}, 164: {272}, 165: {273}, 166: {274}, 167: {275}, 168: {276}, 169: {277}, 170: {278}, 171: {279}, 172: {246}, 173: {247}, 174: {282}, 175: {283}, 176: {284}, 177: {285}, 178: {286}, 179: {287}, 180: {288}, 181: {289}, 182: {291}, 183: {292}, 184: {293}, 185: {294}, 186: {295}, 187: {296}, 188: {297}, 189: {298}, 190: {299}, 191: {300}, 192: {301}, 193: {302}, 194: {303}, 195: {192}, 196: {305}, 197: {306}, 198: {307}, 199: {308}, 200: {309}, 201: {310}, 202: {311}, 203: {312}, 204: {313}, 205: {314}, 206: {315}, 207: {316}, 208: {317}, 209: {318}, 210: {319}, 211: {320}, 212: {321}, 213: {322}, 214: {323}, 215: {324}, 216: {325}, 217: {326}, 218: {327}, 219: {328}, 220: {329}, 221: {330}, 222: {331}, 223: {332}, 224: {333}, 225: {334}, 226: {335}, 227: {336}, 228: {337}, 229: {338}, 230: {339}, 231: {340}, 232: {341}, 233: {342}, 234: {343}, 235: {344}, 236: {345}, 237: {346}, 238: {347}, 239: {348}, 240: {349}, 241: {350}, 242: {351}, 243: {352}, 244: {353}, 245: {354}, 246: {242}, 247: {128}, 248: {129}, 249: {130}, 250: {268}, 251: {269}, 252: {133}, 253: {134}, 254: {135, 196, 84}, 255: {197}, 256: {137}, 257: {200, 138, 93}, 258: {201, 139, 94}, 259: {202, 140, 95}, 260: {141}, 261: {142}, 262: {143}, 263: {206}, 264: {145}, 265: {208}, 266: {147}, 267: {148}, 268: {149}, 269: {150}, 270: {151}, 271: {215}, 272: {216}, 273: {154}, 274: {155}, 275: {156}, 276: {157}, 277: {158}, 278: {159}, 279: {160}, 280: {161}, 281: {162}, 282: {163}, 283: {164}, 284: {165}, 285: {166}, 286: {167}, 287: {243}, 288: {169}, 289: {170}, 290: {171}, 291: {172}, 292: {173}, 293: {174}, 294: {175}, 295: {176}, 296: {177}, 297: {178}, 298: {179}, 299: {180}, 300: {181}, 301: {182}, 302: {183}, 303: {184}, 304: {185}, 305: {186}, 306: {187}, 307: {188}, 308: {189}, 309: {190, 79}, 310: {80, 191}, 311: {304}, 312: {193}, 313: {194}, 314: {83, 195}, 315: {135, 196, 84}, 316: {136}, 317: {198}, 318: {199}, 319: {200, 138, 93}, 320: {201, 139, 94}, 321: {202, 140, 95}, 322: {203}, 323: {204}, 324: {205}, 325: {144}, 326: {207}, 327: {146}, 328: {209}, 329: {210}, 330: {211}, 331: {212}, 332: {213}, 333: {214}, 334: {152}, 335: {153}, 336: {217}, 337: {218}, 338: {219}, 339: {220}, 340: {221}, 341: {222}, 342: {223}, 343: {224}, 344: {225}, 345: {226}, 346: {227}, 347: {228}, 348: {229}, 349: {230}, 350: {231}, 351: {232}, 352: {233}, 353: {234}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
MORE 6 POT: 2
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 store store
EXACT 14 load load
EXACT 15 add add
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 store store
EXACT 20 add add
EXACT 21 store store
EXACT 22 icmp icmp
EXACT 23 zext zext
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 tail tail
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 xor xor
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 xor xor
EXACT 35 lshr lshr
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 icmp icmp
EXACT 41 zext zext
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 trunc trunc
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 xor xor
EXACT 50 add add
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 add add
EXACT 56 load load
EXACT 57 add add
EXACT 58 store store
EXACT 59 inttoptr inttoptr
EXACT 60 store store
EXACT 61 load load
EXACT 62 add add
EXACT 63 load load
EXACT 64 load load
EXACT 65 add add
EXACT 66 store store
EXACT 67 inttoptr inttoptr
EXACT 68 store store
MORE 69 POT: 2
MORE 70 POT: 2
EXACT 71 load load
EXACT 72 add add
EXACT 73 store store
MORE 74 POT: 2
MORE 75 POT: 2
EXACT 76 load load
EXACT 77 br br
EXACT 78 phi phi
MORE 79 POT: 2
MORE 80 POT: 2
EXACT 81 add add
EXACT 82 store store
MORE 83 POT: 2
EXACT 84 load load
EXACT 85 zext zext
EXACT 86 store store
EXACT 87 add add
EXACT 88 add add
EXACT 89 store store
EXACT 90 inttoptr inttoptr
EXACT 91 load load
EXACT 92 sub sub
EXACT 93 icmp icmp
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 and and
EXACT 97 tail tail
EXACT 98 trunc trunc
EXACT 99 and and
EXACT 100 xor xor
EXACT 101 store store
EXACT 102 xor xor
EXACT 103 xor xor
EXACT 104 lshr lshr
EXACT 105 trunc trunc
EXACT 106 and and
EXACT 107 store store
EXACT 108 icmp icmp
EXACT 109 zext zext
EXACT 110 store store
EXACT 111 lshr lshr
EXACT 112 trunc trunc
EXACT 113 store store
EXACT 114 lshr lshr
EXACT 115 lshr lshr
EXACT 116 xor xor
EXACT 117 xor xor
EXACT 118 add add
EXACT 119 icmp icmp
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 or or
EXACT 123 select select
EXACT 124 add add
EXACT 125 store store
EXACT 126 br br
EXACT 127 bitcast bitcast
EXACT 128 getelementptr getelementptr
EXACT 129 store store
EXACT 130 add add
EXACT 131 store store
EXACT 132 load load
EXACT 133 zext zext
EXACT 134 store store
EXACT 135 add add
EXACT 136 add add
EXACT 137 store store
EXACT 138 inttoptr inttoptr
EXACT 139 load load
EXACT 140 store store
EXACT 141 add add
EXACT 142 store store
EXACT 143 inttoptr inttoptr
EXACT 144 load load
EXACT 145 zext zext
EXACT 146 store store
EXACT 147 add add
EXACT 148 store store
EXACT 149 load load
EXACT 150 store store
EXACT 151 add add
EXACT 152 add add
EXACT 153 store store
EXACT 154 inttoptr inttoptr
EXACT 155 load load
EXACT 156 zext zext
EXACT 157 store store
EXACT 158 add add
EXACT 159 store store
EXACT 160 load load
EXACT 161 store store
EXACT 162 getelementptr getelementptr
EXACT 163 add add
EXACT 164 add add
EXACT 165 store store
EXACT 166 inttoptr inttoptr
EXACT 167 load load
EXACT 168 zext zext
EXACT 169 store store
EXACT 170 add add
EXACT 171 store store
EXACT 172 load load
EXACT 173 store store
EXACT 174 getelementptr getelementptr
EXACT 175 add add
EXACT 176 add add
EXACT 177 store store
EXACT 178 inttoptr inttoptr
EXACT 179 load load
EXACT 180 zext zext
EXACT 181 store store
EXACT 182 store store
EXACT 183 add add
EXACT 184 add add
EXACT 185 load load
EXACT 186 add add
EXACT 187 inttoptr inttoptr
EXACT 188 store store
EXACT 189 store store
EXACT 190 store store
EXACT 191 tail tail
EXACT 192 load load
EXACT 193 add add
EXACT 194 load load
EXACT 195 load load
EXACT 196 add add
EXACT 197 store store
EXACT 198 inttoptr inttoptr
EXACT 199 store store
EXACT 200 load load
EXACT 201 load load
EXACT 202 add add
EXACT 203 store store
EXACT 204 icmp icmp
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 trunc trunc
EXACT 208 and and
EXACT 209 tail tail
EXACT 210 trunc trunc
EXACT 211 and and
EXACT 212 xor xor
EXACT 213 store store
EXACT 214 xor xor
EXACT 215 lshr lshr
EXACT 216 trunc trunc
EXACT 217 and and
EXACT 218 store store
EXACT 219 icmp icmp
EXACT 220 zext zext
EXACT 221 store store
EXACT 222 lshr lshr
EXACT 223 trunc trunc
EXACT 224 store store
EXACT 225 lshr lshr
EXACT 226 xor xor
EXACT 227 add add
EXACT 228 icmp icmp
EXACT 229 zext zext
EXACT 230 store store
EXACT 231 add add
EXACT 232 store store
EXACT 233 add add
EXACT 234 inttoptr inttoptr
EXACT 235 load load
EXACT 236 store store
EXACT 237 store store
EXACT 238 add add
EXACT 239 store store
EXACT 240 inttoptr inttoptr
EXACT 241 load load
EXACT 242 store store
EXACT 243 add add
EXACT 244 store store
EXACT 245 ret ret
EXACT 246 add add
EXACT 247 add add
EXACT 248 store store
EXACT 249 inttoptr inttoptr
EXACT 250 load load
EXACT 251 store store
EXACT 252 add add
EXACT 253 store store
MORE 254 POT: 3
EXACT 255 add add
EXACT 256 zext zext
MORE 257 POT: 3
MORE 258 POT: 3
MORE 259 POT: 3
EXACT 260 and and
EXACT 261 tail tail
EXACT 262 trunc trunc
EXACT 263 and and
EXACT 264 xor xor
EXACT 265 store store
EXACT 266 xor xor
EXACT 267 lshr lshr
EXACT 268 trunc trunc
EXACT 269 and and
EXACT 270 store store
EXACT 271 icmp icmp
EXACT 272 zext zext
EXACT 273 store store
EXACT 274 lshr lshr
EXACT 275 trunc trunc
EXACT 276 store store
EXACT 277 lshr lshr
EXACT 278 xor xor
EXACT 279 add add
EXACT 280 icmp icmp
EXACT 281 zext zext
EXACT 282 store store
EXACT 283 store store
EXACT 284 store store
EXACT 285 shl shl
EXACT 286 add add
EXACT 287 add add
EXACT 288 store store
EXACT 289 inttoptr inttoptr
EXACT 290 load load
EXACT 291 zext zext
EXACT 292 store store
EXACT 293 add add
EXACT 294 store store
EXACT 295 load load
EXACT 296 store store
EXACT 297 add add
EXACT 298 store store
EXACT 299 load load
EXACT 300 zext zext
EXACT 301 store store
EXACT 302 store store
EXACT 303 shl shl
EXACT 304 add add
EXACT 305 add add
EXACT 306 store store
EXACT 307 inttoptr inttoptr
EXACT 308 store store
MORE 309 POT: 2
MORE 310 POT: 2
EXACT 311 load load
EXACT 312 add add
EXACT 313 store store
MORE 314 POT: 2
MORE 315 POT: 3
EXACT 316 add add
EXACT 317 zext zext
EXACT 318 store store
MORE 319 POT: 3
MORE 320 POT: 3
MORE 321 POT: 3
EXACT 322 and and
EXACT 323 tail tail
EXACT 324 trunc trunc
EXACT 325 and and
EXACT 326 xor xor
EXACT 327 store store
EXACT 328 xor xor
EXACT 329 xor xor
EXACT 330 lshr lshr
EXACT 331 trunc trunc
EXACT 332 and and
EXACT 333 store store
EXACT 334 icmp icmp
EXACT 335 zext zext
EXACT 336 store store
EXACT 337 lshr lshr
EXACT 338 trunc trunc
EXACT 339 store store
EXACT 340 lshr lshr
EXACT 341 xor xor
EXACT 342 xor xor
EXACT 343 add add
EXACT 344 icmp icmp
EXACT 345 zext zext
EXACT 346 store store
EXACT 347 add add
EXACT 348 store store
EXACT 349 store store
EXACT 350 load load
EXACT 351 add add
EXACT 352 store store
EXACT 353 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %39 to i32*', '%40 = add i64 %7, -12', '%41 = load i32, i32* %EDI.i, align 4', '%42 = add i64 %10, 10', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i32*', 'store i32 %41, i32* %43, align 4', '%RSI.i82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -16', '%46 = load i64, i64* %RSI.i82, align 8', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 7', 'store i64 %53, i64* %3, align 8', '%55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i77 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%EAX.i74 = bitcast %union.anon* %55 to i32*', '%RCX.i67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDX.i60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%.pre = load i64, i64* %3, align 8', '%56 = phi i64 [ %168, %block_400542 ], [ %.pre, %entry ]', '%59 = add i64 %56, 3', 'store i64 %59, i64* %3, align 8', '%62 = zext i32 %61 to i64', 'store i64 %62, i64* %RAX.i77, align 8', '%64 = add i64 %56, 6', 'store i64 %64, i64* %3, align 8', '%69 = zext i1 %68 to i8', 'store i8 %69, i8* %14, align 1', '%70 = and i32 %67, 255', '%71 = tail call i32 @llvm.ctpop.i32(i32 %70)', '%72 = trunc i32 %71 to i8', '%73 = and i8 %72, 1', '%74 = xor i8 %73, 1', 'store i8 %74, i8* %21, align 1', '%75 = xor i32 %66, %61', '%76 = xor i32 %75, %67', '%77 = lshr i32 %76, 4', '%78 = trunc i32 %77 to i8', '%79 = and i8 %78, 1', 'store i8 %79, i8* %26, align 1', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %29, align 1', '%82 = lshr i32 %67, 31', '%83 = trunc i32 %82 to i8', 'store i8 %83, i8* %32, align 1', '%84 = lshr i32 %61, 31', '%85 = lshr i32 %66, 31', '%86 = xor i32 %85, %84', '%87 = xor i32 %82, %84', '%88 = add nuw nsw i32 %87, %86', '%89 = icmp eq i32 %88, 2', '%90 = zext i1 %89 to i8', 'store i8 %90, i8* %38, align 1', '%.v = select i1 %91, i64 55, i64 12', '%92 = add i64 %56, %.v', 'store i64 %92, i64* %3, align 8', '%93 = add i64 %57, -16', '%94 = add i64 %92, 4', 'store i64 %94, i64* %3, align 8', '%95 = inttoptr i64 %93 to i64*', '%96 = load i64, i64* %95, align 8', 'store i64 %96, i64* %RAX.i77, align 8', '%97 = add i64 %92, 7', 'store i64 %97, i64* %3, align 8', '%99 = add i32 %98, -1', '%100 = zext i32 %99 to i64', '%103 = and i32 %99, 255', '%104 = tail call i32 @llvm.ctpop.i32(i32 %103)', '%105 = trunc i32 %104 to i8', '%106 = and i8 %105, 1', '%107 = xor i8 %106, 1', 'store i8 %107, i8* %21, align 1', '%108 = xor i32 %99, %98', '%109 = lshr i32 %108, 4', '%110 = trunc i32 %109 to i8', '%111 = and i8 %110, 1', 'store i8 %111, i8* %26, align 1', '%112 = icmp eq i32 %99, 0', '%113 = zext i1 %112 to i8', 'store i8 %113, i8* %29, align 1', '%114 = lshr i32 %99, 31', '%115 = trunc i32 %114 to i8', 'store i8 %115, i8* %32, align 1', '%116 = lshr i32 %98, 31', '%117 = xor i32 %114, %116', '%118 = add nuw nsw i32 %117, %116', '%119 = icmp eq i32 %118, 2', '%120 = zext i1 %119 to i8', 'store i8 %120, i8* %38, align 1', 'store i64 %100, i64* %RCX.i67, align 8', 'store i64 %100, i64* %RDX.i60, align 8', '%121 = shl nuw nsw i64 %100, 2', '%122 = add i64 %96, %121', '%123 = add i64 %92, 17', 'store i64 %123, i64* %3, align 8', '%124 = inttoptr i64 %122 to i32*', '%125 = load i32, i32* %124, align 4', '%126 = zext i32 %125 to i64', 'store i64 %126, i64* %RCX.i67, align 8', '%127 = add i64 %92, 21', 'store i64 %127, i64* %3, align 8', '%128 = load i64, i64* %95, align 8', 'store i64 %128, i64* %RAX.i77, align 8', '%129 = add i64 %92, 24', 'store i64 %129, i64* %3, align 8', '%130 = load i32, i32* %60, align 4', '%131 = zext i32 %130 to i64', 'store i64 %131, i64* %RSI.i82, align 8', 'store i64 %131, i64* %RDX.i60, align 8', '%132 = shl nuw nsw i64 %131, 2', '%133 = add i64 %128, %132', '%134 = add i64 %92, 29', 'store i64 %134, i64* %3, align 8', '%135 = inttoptr i64 %133 to i32*', 'store i32 %125, i32* %135, align 4', '%138 = load i64, i64* %3, align 8', '%139 = add i64 %138, 3', 'store i64 %139, i64* %3, align 8', '%142 = add i32 %141, -1', '%143 = zext i32 %142 to i64', 'store i64 %143, i64* %RAX.i77, align 8', '%146 = and i32 %142, 255', '%147 = tail call i32 @llvm.ctpop.i32(i32 %146)', '%148 = trunc i32 %147 to i8', '%149 = and i8 %148, 1', '%150 = xor i8 %149, 1', 'store i8 %150, i8* %21, align 1', '%151 = xor i32 %141, 16', '%152 = xor i32 %151, %142', '%153 = lshr i32 %152, 4', '%154 = trunc i32 %153 to i8', '%155 = and i8 %154, 1', 'store i8 %155, i8* %26, align 1', '%156 = icmp eq i32 %142, 0', '%157 = zext i1 %156 to i8', 'store i8 %157, i8* %29, align 1', '%158 = lshr i32 %142, 31', '%159 = trunc i32 %158 to i8', 'store i8 %159, i8* %32, align 1', '%160 = lshr i32 %141, 31', '%161 = xor i32 %158, %160', '%162 = xor i32 %158, 1', '%163 = add nuw nsw i32 %161, %162', '%164 = icmp eq i32 %163, 2', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %38, align 1', '%166 = add i64 %138, 9', 'store i64 %166, i64* %3, align 8', 'store i32 %142, i32* %140, align 4', '%167 = load i64, i64* %3, align 8', '%168 = add i64 %167, -50', 'store i64 %168, i64* %3, align 8', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0', 'store i64 ptrtoint (%G__0x400694_type* @G__0x400694 to i64), i64* %RDI.i, align 8', '%169 = add i64 %92, 13', 'store i64 %169, i64* %3, align 8', '%170 = load i32, i32* %65, align 4', '%171 = zext i32 %170 to i64', 'store i64 %171, i64* %RSI.i82, align 8', '%172 = add i64 %57, -16', '%173 = add i64 %92, 17', 'store i64 %173, i64* %3, align 8', '%174 = inttoptr i64 %172 to i64*', '%175 = load i64, i64* %174, align 8', 'store i64 %175, i64* %RAX.i77, align 8', '%176 = add i64 %92, 19', 'store i64 %176, i64* %3, align 8', '%177 = inttoptr i64 %175 to i32*', '%178 = load i32, i32* %177, align 4', '%179 = zext i32 %178 to i64', 'store i64 %179, i64* %RDX.i60, align 8', '%180 = add i64 %92, 23', 'store i64 %180, i64* %3, align 8', '%181 = load i64, i64* %174, align 8', 'store i64 %181, i64* %RAX.i77, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%182 = add i64 %181, 4', '%183 = add i64 %92, 26', 'store i64 %183, i64* %3, align 8', '%184 = inttoptr i64 %182 to i32*', '%185 = load i32, i32* %184, align 4', '%186 = zext i32 %185 to i64', 'store i64 %186, i64* %RCX.i, align 8', '%187 = add i64 %92, 30', 'store i64 %187, i64* %3, align 8', '%188 = load i64, i64* %174, align 8', 'store i64 %188, i64* %RAX.i77, align 8', '%189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', '%190 = add i64 %188, 8', '%191 = add i64 %92, 34', 'store i64 %191, i64* %3, align 8', '%192 = inttoptr i64 %190 to i32*', '%193 = load i32, i32* %192, align 4', '%194 = zext i32 %193 to i64', 'store i64 %194, i64* %189, align 8', '%195 = add i64 %92, 38', 'store i64 %195, i64* %3, align 8', '%196 = load i64, i64* %174, align 8', 'store i64 %196, i64* %RAX.i77, align 8', '%197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0', '%198 = add i64 %196, 12', '%199 = add i64 %92, 42', 'store i64 %199, i64* %3, align 8', '%200 = inttoptr i64 %198 to i32*', '%201 = load i32, i32* %200, align 4', '%202 = zext i32 %201 to i64', 'store i64 %202, i64* %197, align 8', '%AL.i = bitcast %union.anon* %55 to i8*', 'store i8 0, i8* %AL.i, align 1', '%203 = add i64 %92, -333', '%204 = add i64 %92, 49', '%205 = load i64, i64* %6, align 8', '%206 = add i64 %205, -8', '%207 = inttoptr i64 %206 to i64*', 'store i64 %204, i64* %207, align 8', 'store i64 %206, i64* %6, align 8', 'store i64 %203, i64* %3, align 8', '%208 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)', '%209 = load i64, i64* %RBP.i, align 8', '%210 = add i64 %209, -24', '%211 = load i32, i32* %EAX.i74, align 4', '%212 = load i64, i64* %3, align 8', '%213 = add i64 %212, 3', 'store i64 %213, i64* %3, align 8', '%214 = inttoptr i64 %210 to i32*', 'store i32 %211, i32* %214, align 4', '%215 = load i64, i64* %6, align 8', '%216 = load i64, i64* %3, align 8', '%217 = add i64 %215, 32', 'store i64 %217, i64* %6, align 8', '%218 = icmp ugt i64 %215, -33', '%219 = zext i1 %218 to i8', 'store i8 %219, i8* %14, align 1', '%220 = trunc i64 %217 to i32', '%221 = and i32 %220, 255', '%222 = tail call i32 @llvm.ctpop.i32(i32 %221)', '%223 = trunc i32 %222 to i8', '%224 = and i8 %223, 1', '%225 = xor i8 %224, 1', 'store i8 %225, i8* %21, align 1', '%226 = xor i64 %217, %215', '%227 = lshr i64 %226, 4', '%228 = trunc i64 %227 to i8', '%229 = and i8 %228, 1', 'store i8 %229, i8* %26, align 1', '%230 = icmp eq i64 %217, 0', '%231 = zext i1 %230 to i8', 'store i8 %231, i8* %29, align 1', '%232 = lshr i64 %217, 63', '%233 = trunc i64 %232 to i8', 'store i8 %233, i8* %32, align 1', '%234 = lshr i64 %215, 63', '%235 = xor i64 %232, %234', '%236 = add nuw nsw i64 %235, %232', '%237 = icmp eq i64 %236, 2', '%238 = zext i1 %237 to i8', 'store i8 %238, i8* %38, align 1', '%239 = add i64 %216, 5', 'store i64 %239, i64* %3, align 8', '%240 = add i64 %215, 40', '%241 = inttoptr i64 %217 to i64*', '%242 = load i64, i64* %241, align 8', 'store i64 %242, i64* %RBP.i, align 8', 'store i64 %240, i64* %6, align 8', '%243 = add i64 %216, 6', 'store i64 %243, i64* %3, align 8', '%244 = inttoptr i64 %240 to i64*', '%245 = load i64, i64* %244, align 8', 'store i64 %245, i64* %3, align 8', '%246 = add i64 %215, 48', 'store i64 %246, i64* %6, align 8', 'ret %struct.Memory* %208'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %39 to i32*
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = load i32, i32* %EDI.i, align 4
Found line to remove! %42 = add i64 %10, 10
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %40 to i32*
Found line to remove! store i32 %41, i32* %43, align 4
Found line to remove! %RSI.i82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -16
Found line to remove! %46 = load i64, i64* %RSI.i82, align 8
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 4
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Keep: %50 = load i64, i64* %RBP.i, align 8
Keep: %51 = add i64 %50, -20
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 7
Found line to remove! store i64 %53, i64* %3, align 8
Keep: %54 = inttoptr i64 %51 to i32*
Keep: store i32 3, i32* %54, align 4
Found line to remove! %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i77 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
Found line to remove! %EAX.i74 = bitcast %union.anon* %55 to i32*
Found line to remove! %RCX.i67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX.i60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_400536
Keep: 
Keep: block_.L_400536:                                  ; preds = %block_400542, %entry
Found line to remove! %56 = phi i64 [ %168, %block_400542 ], [ %.pre, %entry ]
Keep: %57 = load i64, i64* %RBP.i, align 8
Keep: %58 = add i64 %57, -20
Found line to remove! %59 = add i64 %56, 3
Found line to remove! store i64 %59, i64* %3, align 8
Keep: %60 = inttoptr i64 %58 to i32*
Keep: %61 = load i32, i32* %60, align 4
Found line to remove! %62 = zext i32 %61 to i64
Found line to remove! store i64 %62, i64* %RAX.i77, align 8
Keep: %63 = add i64 %57, -4
Found line to remove! %64 = add i64 %56, 6
Found line to remove! store i64 %64, i64* %3, align 8
Keep: %65 = inttoptr i64 %63 to i32*
Keep: %66 = load i32, i32* %65, align 4
Keep: %67 = sub i32 %61, %66
Keep: %68 = icmp ult i32 %61, %66
Found line to remove! %69 = zext i1 %68 to i8
Found line to remove! store i8 %69, i8* %14, align 1
Found line to remove! %70 = and i32 %67, 255
Found line to remove! %71 = tail call i32 @llvm.ctpop.i32(i32 %70)
Found line to remove! %72 = trunc i32 %71 to i8
Found line to remove! %73 = and i8 %72, 1
Found line to remove! %74 = xor i8 %73, 1
Found line to remove! store i8 %74, i8* %21, align 1
Found line to remove! %75 = xor i32 %66, %61
Found line to remove! %76 = xor i32 %75, %67
Found line to remove! %77 = lshr i32 %76, 4
Found line to remove! %78 = trunc i32 %77 to i8
Found line to remove! %79 = and i8 %78, 1
Found line to remove! store i8 %79, i8* %26, align 1
Keep: %80 = icmp eq i32 %67, 0
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %29, align 1
Found line to remove! %82 = lshr i32 %67, 31
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! store i8 %83, i8* %32, align 1
Found line to remove! %84 = lshr i32 %61, 31
Found line to remove! %85 = lshr i32 %66, 31
Found line to remove! %86 = xor i32 %85, %84
Found line to remove! %87 = xor i32 %82, %84
Found line to remove! %88 = add nuw nsw i32 %87, %86
Found line to remove! %89 = icmp eq i32 %88, 2
Found line to remove! %90 = zext i1 %89 to i8
Found line to remove! store i8 %90, i8* %38, align 1
Keep: %91 = or i1 %80, %68
Found line to remove! %.v = select i1 %91, i64 55, i64 12
Found line to remove! %92 = add i64 %56, %.v
Found line to remove! store i64 %92, i64* %3, align 8
Keep: br i1 %91, label %block_.L_40056d, label %block_400542
Keep: 
Keep: block_400542:                                     ; preds = %block_.L_400536
Found line to remove! %93 = add i64 %57, -16
Found line to remove! %94 = add i64 %92, 4
Found line to remove! store i64 %94, i64* %3, align 8
Found line to remove! %95 = inttoptr i64 %93 to i64*
Found line to remove! %96 = load i64, i64* %95, align 8
Found line to remove! store i64 %96, i64* %RAX.i77, align 8
Found line to remove! %97 = add i64 %92, 7
Found line to remove! store i64 %97, i64* %3, align 8
Keep: %98 = load i32, i32* %60, align 4
Found line to remove! %99 = add i32 %98, -1
Found line to remove! %100 = zext i32 %99 to i64
Keep: %101 = icmp eq i32 %98, 0
Keep: %102 = zext i1 %101 to i8
Keep: store i8 %102, i8* %14, align 1
Found line to remove! %103 = and i32 %99, 255
Found line to remove! %104 = tail call i32 @llvm.ctpop.i32(i32 %103)
Found line to remove! %105 = trunc i32 %104 to i8
Found line to remove! %106 = and i8 %105, 1
Found line to remove! %107 = xor i8 %106, 1
Found line to remove! store i8 %107, i8* %21, align 1
Found line to remove! %108 = xor i32 %99, %98
Found line to remove! %109 = lshr i32 %108, 4
Found line to remove! %110 = trunc i32 %109 to i8
Found line to remove! %111 = and i8 %110, 1
Found line to remove! store i8 %111, i8* %26, align 1
Found line to remove! %112 = icmp eq i32 %99, 0
Found line to remove! %113 = zext i1 %112 to i8
Found line to remove! store i8 %113, i8* %29, align 1
Found line to remove! %114 = lshr i32 %99, 31
Found line to remove! %115 = trunc i32 %114 to i8
Found line to remove! store i8 %115, i8* %32, align 1
Found line to remove! %116 = lshr i32 %98, 31
Found line to remove! %117 = xor i32 %114, %116
Found line to remove! %118 = add nuw nsw i32 %117, %116
Found line to remove! %119 = icmp eq i32 %118, 2
Found line to remove! %120 = zext i1 %119 to i8
Found line to remove! store i8 %120, i8* %38, align 1
Found line to remove! store i64 %100, i64* %RCX.i67, align 8
Found line to remove! store i64 %100, i64* %RDX.i60, align 8
Found line to remove! %121 = shl nuw nsw i64 %100, 2
Found line to remove! %122 = add i64 %96, %121
Found line to remove! %123 = add i64 %92, 17
Found line to remove! store i64 %123, i64* %3, align 8
Found line to remove! %124 = inttoptr i64 %122 to i32*
Found line to remove! %125 = load i32, i32* %124, align 4
Found line to remove! %126 = zext i32 %125 to i64
Found line to remove! store i64 %126, i64* %RCX.i67, align 8
Found line to remove! %127 = add i64 %92, 21
Found line to remove! store i64 %127, i64* %3, align 8
Found line to remove! %128 = load i64, i64* %95, align 8
Found line to remove! store i64 %128, i64* %RAX.i77, align 8
Found line to remove! %129 = add i64 %92, 24
Found line to remove! store i64 %129, i64* %3, align 8
Found line to remove! %130 = load i32, i32* %60, align 4
Found line to remove! %131 = zext i32 %130 to i64
Found line to remove! store i64 %131, i64* %RSI.i82, align 8
Found line to remove! store i64 %131, i64* %RDX.i60, align 8
Found line to remove! %132 = shl nuw nsw i64 %131, 2
Found line to remove! %133 = add i64 %128, %132
Found line to remove! %134 = add i64 %92, 29
Found line to remove! store i64 %134, i64* %3, align 8
Found line to remove! %135 = inttoptr i64 %133 to i32*
Found line to remove! store i32 %125, i32* %135, align 4
Keep: %136 = load i64, i64* %RBP.i, align 8
Keep: %137 = add i64 %136, -20
Found line to remove! %138 = load i64, i64* %3, align 8
Found line to remove! %139 = add i64 %138, 3
Found line to remove! store i64 %139, i64* %3, align 8
Keep: %140 = inttoptr i64 %137 to i32*
Keep: %141 = load i32, i32* %140, align 4
Found line to remove! %142 = add i32 %141, -1
Found line to remove! %143 = zext i32 %142 to i64
Found line to remove! store i64 %143, i64* %RAX.i77, align 8
Keep: %144 = icmp ne i32 %141, 0
Keep: %145 = zext i1 %144 to i8
Keep: store i8 %145, i8* %14, align 1
Found line to remove! %146 = and i32 %142, 255
Found line to remove! %147 = tail call i32 @llvm.ctpop.i32(i32 %146)
Found line to remove! %148 = trunc i32 %147 to i8
Found line to remove! %149 = and i8 %148, 1
Found line to remove! %150 = xor i8 %149, 1
Found line to remove! store i8 %150, i8* %21, align 1
Found line to remove! %151 = xor i32 %141, 16
Found line to remove! %152 = xor i32 %151, %142
Found line to remove! %153 = lshr i32 %152, 4
Found line to remove! %154 = trunc i32 %153 to i8
Found line to remove! %155 = and i8 %154, 1
Found line to remove! store i8 %155, i8* %26, align 1
Found line to remove! %156 = icmp eq i32 %142, 0
Found line to remove! %157 = zext i1 %156 to i8
Found line to remove! store i8 %157, i8* %29, align 1
Found line to remove! %158 = lshr i32 %142, 31
Found line to remove! %159 = trunc i32 %158 to i8
Found line to remove! store i8 %159, i8* %32, align 1
Found line to remove! %160 = lshr i32 %141, 31
Found line to remove! %161 = xor i32 %158, %160
Found line to remove! %162 = xor i32 %158, 1
Found line to remove! %163 = add nuw nsw i32 %161, %162
Found line to remove! %164 = icmp eq i32 %163, 2
Found line to remove! %165 = zext i1 %164 to i8
Found line to remove! store i8 %165, i8* %38, align 1
Found line to remove! %166 = add i64 %138, 9
Found line to remove! store i64 %166, i64* %3, align 8
Found line to remove! store i32 %142, i32* %140, align 4
Found line to remove! %167 = load i64, i64* %3, align 8
Found line to remove! %168 = add i64 %167, -50
Found line to remove! store i64 %168, i64* %3, align 8
Keep: br label %block_.L_400536
Keep: 
Keep: block_.L_40056d:                                  ; preds = %block_.L_400536
Found line to remove! %RDI.i = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Found line to remove! store i64 ptrtoint (%G__0x400694_type* @G__0x400694 to i64), i64* %RDI.i, align 8
Found line to remove! %169 = add i64 %92, 13
Found line to remove! store i64 %169, i64* %3, align 8
Found line to remove! %170 = load i32, i32* %65, align 4
Found line to remove! %171 = zext i32 %170 to i64
Found line to remove! store i64 %171, i64* %RSI.i82, align 8
Found line to remove! %172 = add i64 %57, -16
Found line to remove! %173 = add i64 %92, 17
Found line to remove! store i64 %173, i64* %3, align 8
Found line to remove! %174 = inttoptr i64 %172 to i64*
Found line to remove! %175 = load i64, i64* %174, align 8
Found line to remove! store i64 %175, i64* %RAX.i77, align 8
Found line to remove! %176 = add i64 %92, 19
Found line to remove! store i64 %176, i64* %3, align 8
Found line to remove! %177 = inttoptr i64 %175 to i32*
Found line to remove! %178 = load i32, i32* %177, align 4
Found line to remove! %179 = zext i32 %178 to i64
Found line to remove! store i64 %179, i64* %RDX.i60, align 8
Found line to remove! %180 = add i64 %92, 23
Found line to remove! store i64 %180, i64* %3, align 8
Found line to remove! %181 = load i64, i64* %174, align 8
Found line to remove! store i64 %181, i64* %RAX.i77, align 8
Found line to remove! %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %182 = add i64 %181, 4
Found line to remove! %183 = add i64 %92, 26
Found line to remove! store i64 %183, i64* %3, align 8
Found line to remove! %184 = inttoptr i64 %182 to i32*
Found line to remove! %185 = load i32, i32* %184, align 4
Found line to remove! %186 = zext i32 %185 to i64
Found line to remove! store i64 %186, i64* %RCX.i, align 8
Found line to remove! %187 = add i64 %92, 30
Found line to remove! store i64 %187, i64* %3, align 8
Found line to remove! %188 = load i64, i64* %174, align 8
Found line to remove! store i64 %188, i64* %RAX.i77, align 8
Found line to remove! %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! %190 = add i64 %188, 8
Found line to remove! %191 = add i64 %92, 34
Found line to remove! store i64 %191, i64* %3, align 8
Found line to remove! %192 = inttoptr i64 %190 to i32*
Found line to remove! %193 = load i32, i32* %192, align 4
Found line to remove! %194 = zext i32 %193 to i64
Found line to remove! store i64 %194, i64* %189, align 8
Found line to remove! %195 = add i64 %92, 38
Found line to remove! store i64 %195, i64* %3, align 8
Found line to remove! %196 = load i64, i64* %174, align 8
Found line to remove! store i64 %196, i64* %RAX.i77, align 8
Found line to remove! %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
Found line to remove! %198 = add i64 %196, 12
Found line to remove! %199 = add i64 %92, 42
Found line to remove! store i64 %199, i64* %3, align 8
Found line to remove! %200 = inttoptr i64 %198 to i32*
Found line to remove! %201 = load i32, i32* %200, align 4
Found line to remove! %202 = zext i32 %201 to i64
Found line to remove! store i64 %202, i64* %197, align 8
Found line to remove! %AL.i = bitcast %union.anon* %55 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %203 = add i64 %92, -333
Found line to remove! %204 = add i64 %92, 49
Found line to remove! %205 = load i64, i64* %6, align 8
Found line to remove! %206 = add i64 %205, -8
Found line to remove! %207 = inttoptr i64 %206 to i64*
Found line to remove! store i64 %204, i64* %207, align 8
Found line to remove! store i64 %206, i64* %6, align 8
Found line to remove! store i64 %203, i64* %3, align 8
Found line to remove! %208 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
Found line to remove! %209 = load i64, i64* %RBP.i, align 8
Found line to remove! %210 = add i64 %209, -24
Found line to remove! %211 = load i32, i32* %EAX.i74, align 4
Found line to remove! %212 = load i64, i64* %3, align 8
Found line to remove! %213 = add i64 %212, 3
Found line to remove! store i64 %213, i64* %3, align 8
Found line to remove! %214 = inttoptr i64 %210 to i32*
Found line to remove! store i32 %211, i32* %214, align 4
Found line to remove! %215 = load i64, i64* %6, align 8
Found line to remove! %216 = load i64, i64* %3, align 8
Found line to remove! %217 = add i64 %215, 32
Found line to remove! store i64 %217, i64* %6, align 8
Found line to remove! %218 = icmp ugt i64 %215, -33
Found line to remove! %219 = zext i1 %218 to i8
Found line to remove! store i8 %219, i8* %14, align 1
Found line to remove! %220 = trunc i64 %217 to i32
Found line to remove! %221 = and i32 %220, 255
Found line to remove! %222 = tail call i32 @llvm.ctpop.i32(i32 %221)
Found line to remove! %223 = trunc i32 %222 to i8
Found line to remove! %224 = and i8 %223, 1
Found line to remove! %225 = xor i8 %224, 1
Found line to remove! store i8 %225, i8* %21, align 1
Found line to remove! %226 = xor i64 %217, %215
Found line to remove! %227 = lshr i64 %226, 4
Found line to remove! %228 = trunc i64 %227 to i8
Found line to remove! %229 = and i8 %228, 1
Found line to remove! store i8 %229, i8* %26, align 1
Found line to remove! %230 = icmp eq i64 %217, 0
Found line to remove! %231 = zext i1 %230 to i8
Found line to remove! store i8 %231, i8* %29, align 1
Found line to remove! %232 = lshr i64 %217, 63
Found line to remove! %233 = trunc i64 %232 to i8
Found line to remove! store i8 %233, i8* %32, align 1
Found line to remove! %234 = lshr i64 %215, 63
Found line to remove! %235 = xor i64 %232, %234
Found line to remove! %236 = add nuw nsw i64 %235, %232
Found line to remove! %237 = icmp eq i64 %236, 2
Found line to remove! %238 = zext i1 %237 to i8
Found line to remove! store i8 %238, i8* %38, align 1
Found line to remove! %239 = add i64 %216, 5
Found line to remove! store i64 %239, i64* %3, align 8
Found line to remove! %240 = add i64 %215, 40
Found line to remove! %241 = inttoptr i64 %217 to i64*
Found line to remove! %242 = load i64, i64* %241, align 8
Found line to remove! store i64 %242, i64* %RBP.i, align 8
Found line to remove! store i64 %240, i64* %6, align 8
Found line to remove! %243 = add i64 %216, 6
Found line to remove! store i64 %243, i64* %3, align 8
Found line to remove! %244 = inttoptr i64 %240 to i64*
Found line to remove! %245 = load i64, i64* %244, align 8
Found line to remove! store i64 %245, i64* %3, align 8
Found line to remove! %246 = add i64 %215, 48
Found line to remove! store i64 %246, i64* %6, align 8
Found line to remove! ret %struct.Memory* %208
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = load i32, i32* %EDI, align 4', '%41 = add i64 %10, 10', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %39 to i32*', 'store i32 %40, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI, align 8', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%51 = load i64, i64* %PC, align 8', '%52 = add i64 %51, 7', 'store i64 %52, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%54 = phi i64 [ %244, %block_400542 ], [ %.pre, %block_400520 ]', '%57 = add i64 %54, 3', 'store i64 %57, i64* %PC, align 8', '%60 = zext i32 %59 to i64', 'store i64 %60, i64* %RAX, align 8', '%62 = add i64 %54, 6', 'store i64 %62, i64* %PC, align 8', '%67 = zext i1 %66 to i8', 'store i8 %67, i8* %14, align 1', '%68 = and i32 %65, 255', '%69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12', '%70 = trunc i32 %69 to i8', '%71 = and i8 %70, 1', '%72 = xor i8 %71, 1', 'store i8 %72, i8* %21, align 1', '%73 = xor i32 %64, %59', '%74 = xor i32 %73, %65', '%75 = lshr i32 %74, 4', '%76 = trunc i32 %75 to i8', '%77 = and i8 %76, 1', 'store i8 %77, i8* %26, align 1', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %29, align 1', '%80 = lshr i32 %65, 31', '%81 = trunc i32 %80 to i8', 'store i8 %81, i8* %32, align 1', '%82 = lshr i32 %59, 31', '%83 = lshr i32 %64, 31', '%84 = xor i32 %83, %82', '%85 = xor i32 %80, %82', '%86 = add nuw nsw i32 %85, %84', '%87 = icmp eq i32 %86, 2', '%88 = zext i1 %87 to i8', 'store i8 %88, i8* %38, align 1', '%.v = select i1 %89, i64 55, i64 12', '%90 = add i64 %54, %.v', 'store i64 %90, i64* %PC, align 8', '%AL = bitcast %union.anon* %3 to i8*', '%RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', 'store i64 add (i64 ptrtoint (%seg_400690__rodata_type* @seg_400690__rodata to i64), i64 4), i64* %RDI, align 8', '%91 = add i64 %90, 13', 'store i64 %91, i64* %PC, align 8', '%92 = load i32, i32* %63, align 4', '%93 = zext i32 %92 to i64', 'store i64 %93, i64* %RSI, align 8', '%94 = add i64 %55, -16', '%95 = add i64 %90, 17', 'store i64 %95, i64* %PC, align 8', '%96 = inttoptr i64 %94 to i64*', '%97 = load i64, i64* %96, align 8', 'store i64 %97, i64* %RAX, align 8', '%98 = add i64 %90, 19', 'store i64 %98, i64* %PC, align 8', '%99 = inttoptr i64 %97 to i32*', '%100 = load i32, i32* %99, align 4', '%101 = zext i32 %100 to i64', 'store i64 %101, i64* %RDX, align 8', '%102 = add i64 %90, 23', 'store i64 %102, i64* %PC, align 8', '%103 = load i64, i64* %96, align 8', 'store i64 %103, i64* %RAX, align 8', '%104 = add i64 %103, 4', '%105 = add i64 %90, 26', 'store i64 %105, i64* %PC, align 8', '%106 = inttoptr i64 %104 to i32*', '%107 = load i32, i32* %106, align 4', '%108 = zext i32 %107 to i64', 'store i64 %108, i64* %RCX, align 8', '%109 = add i64 %90, 30', 'store i64 %109, i64* %PC, align 8', '%110 = load i64, i64* %96, align 8', 'store i64 %110, i64* %RAX, align 8', '%111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', '%112 = add i64 %110, 8', '%113 = add i64 %90, 34', 'store i64 %113, i64* %PC, align 8', '%114 = inttoptr i64 %112 to i32*', '%115 = load i32, i32* %114, align 4', '%116 = zext i32 %115 to i64', 'store i64 %116, i64* %111, align 8', '%117 = add i64 %90, 38', 'store i64 %117, i64* %PC, align 8', '%118 = load i64, i64* %96, align 8', 'store i64 %118, i64* %RAX, align 8', '%119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0', '%120 = add i64 %118, 12', '%121 = add i64 %90, 42', 'store i64 %121, i64* %PC, align 8', '%122 = inttoptr i64 %120 to i32*', '%123 = load i32, i32* %122, align 4', '%124 = zext i32 %123 to i64', 'store i64 %124, i64* %119, align 8', 'store i8 0, i8* %AL, align 1', '%125 = add i64 %90, -333', '%126 = add i64 %90, 49', '%127 = load i64, i64* %RSP, align 8', '%128 = add i64 %127, -8', '%129 = inttoptr i64 %128 to i64*', 'store i64 %126, i64* %129, align 8', 'store i64 %128, i64* %RSP, align 8', 'store i64 %125, i64* %PC, align 8', '%130 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)', '%131 = load i64, i64* %RBP, align 8', '%132 = add i64 %131, -24', '%133 = load i32, i32* %EAX, align 4', '%134 = load i64, i64* %PC, align 8', '%135 = add i64 %134, 3', 'store i64 %135, i64* %PC, align 8', '%136 = inttoptr i64 %132 to i32*', 'store i32 %133, i32* %136, align 4', '%137 = load i64, i64* %RSP, align 8', '%138 = load i64, i64* %PC, align 8', '%139 = add i64 %137, 32', 'store i64 %139, i64* %RSP, align 8', '%140 = icmp ugt i64 %137, -33', '%141 = zext i1 %140 to i8', 'store i8 %141, i8* %14, align 1', '%142 = trunc i64 %139 to i32', '%143 = and i32 %142, 255', '%144 = tail call i32 @llvm.ctpop.i32(i32 %143) #12', '%145 = trunc i32 %144 to i8', '%146 = and i8 %145, 1', '%147 = xor i8 %146, 1', 'store i8 %147, i8* %21, align 1', '%148 = xor i64 %139, %137', '%149 = lshr i64 %148, 4', '%150 = trunc i64 %149 to i8', '%151 = and i8 %150, 1', 'store i8 %151, i8* %26, align 1', '%152 = icmp eq i64 %139, 0', '%153 = zext i1 %152 to i8', 'store i8 %153, i8* %29, align 1', '%154 = lshr i64 %139, 63', '%155 = trunc i64 %154 to i8', 'store i8 %155, i8* %32, align 1', '%156 = lshr i64 %137, 63', '%157 = xor i64 %154, %156', '%158 = add nuw nsw i64 %157, %154', '%159 = icmp eq i64 %158, 2', '%160 = zext i1 %159 to i8', 'store i8 %160, i8* %38, align 1', '%161 = add i64 %138, 5', 'store i64 %161, i64* %PC, align 8', '%162 = add i64 %137, 40', '%163 = inttoptr i64 %139 to i64*', '%164 = load i64, i64* %163, align 8', 'store i64 %164, i64* %RBP, align 8', 'store i64 %162, i64* %RSP, align 8', '%165 = add i64 %138, 6', 'store i64 %165, i64* %PC, align 8', '%166 = inttoptr i64 %162 to i64*', '%167 = load i64, i64* %166, align 8', 'store i64 %167, i64* %PC, align 8', '%168 = add i64 %137, 48', 'store i64 %168, i64* %RSP, align 8', 'ret %struct.Memory* %130', '%169 = add i64 %55, -16', '%170 = add i64 %90, 4', 'store i64 %170, i64* %PC, align 8', '%171 = inttoptr i64 %169 to i64*', '%172 = load i64, i64* %171, align 8', 'store i64 %172, i64* %RAX, align 8', '%173 = add i64 %90, 7', 'store i64 %173, i64* %PC, align 8', '%175 = add i32 %174, -1', '%176 = zext i32 %175 to i64', '%179 = and i32 %175, 255', '%180 = tail call i32 @llvm.ctpop.i32(i32 %179) #12', '%181 = trunc i32 %180 to i8', '%182 = and i8 %181, 1', '%183 = xor i8 %182, 1', 'store i8 %183, i8* %21, align 1', '%184 = xor i32 %175, %174', '%185 = lshr i32 %184, 4', '%186 = trunc i32 %185 to i8', '%187 = and i8 %186, 1', 'store i8 %187, i8* %26, align 1', '%188 = icmp eq i32 %175, 0', '%189 = zext i1 %188 to i8', 'store i8 %189, i8* %29, align 1', '%190 = lshr i32 %175, 31', '%191 = trunc i32 %190 to i8', 'store i8 %191, i8* %32, align 1', '%192 = lshr i32 %174, 31', '%193 = xor i32 %190, %192', '%194 = add nuw nsw i32 %193, %192', '%195 = icmp eq i32 %194, 2', '%196 = zext i1 %195 to i8', 'store i8 %196, i8* %38, align 1', 'store i64 %176, i64* %RCX, align 8', 'store i64 %176, i64* %RDX, align 8', '%197 = shl nuw nsw i64 %176, 2', '%198 = add i64 %172, %197', '%199 = add i64 %90, 17', 'store i64 %199, i64* %PC, align 8', '%200 = inttoptr i64 %198 to i32*', '%201 = load i32, i32* %200, align 4', '%202 = zext i32 %201 to i64', 'store i64 %202, i64* %RCX, align 8', '%203 = add i64 %90, 21', 'store i64 %203, i64* %PC, align 8', '%204 = load i64, i64* %171, align 8', 'store i64 %204, i64* %RAX, align 8', '%205 = add i64 %90, 24', 'store i64 %205, i64* %PC, align 8', '%206 = load i32, i32* %58, align 4', '%207 = zext i32 %206 to i64', 'store i64 %207, i64* %RSI, align 8', 'store i64 %207, i64* %RDX, align 8', '%208 = shl nuw nsw i64 %207, 2', '%209 = add i64 %204, %208', '%210 = add i64 %90, 29', 'store i64 %210, i64* %PC, align 8', '%211 = inttoptr i64 %209 to i32*', 'store i32 %201, i32* %211, align 4', '%214 = load i64, i64* %PC, align 8', '%215 = add i64 %214, 3', 'store i64 %215, i64* %PC, align 8', '%218 = add i32 %217, -1', '%219 = zext i32 %218 to i64', 'store i64 %219, i64* %RAX, align 8', '%222 = and i32 %218, 255', '%223 = tail call i32 @llvm.ctpop.i32(i32 %222) #12', '%224 = trunc i32 %223 to i8', '%225 = and i8 %224, 1', '%226 = xor i8 %225, 1', 'store i8 %226, i8* %21, align 1', '%227 = xor i32 %217, 16', '%228 = xor i32 %227, %218', '%229 = lshr i32 %228, 4', '%230 = trunc i32 %229 to i8', '%231 = and i8 %230, 1', 'store i8 %231, i8* %26, align 1', '%232 = icmp eq i32 %218, 0', '%233 = zext i1 %232 to i8', 'store i8 %233, i8* %29, align 1', '%234 = lshr i32 %218, 31', '%235 = trunc i32 %234 to i8', 'store i8 %235, i8* %32, align 1', '%236 = lshr i32 %217, 31', '%237 = xor i32 %234, %236', '%238 = xor i32 %234, 1', '%239 = add nuw nsw i32 %237, %238', '%240 = icmp eq i32 %239, 2', '%241 = zext i1 %240 to i8', 'store i8 %241, i8* %38, align 1', '%242 = add i64 %214, 9', 'store i64 %242, i64* %PC, align 8', 'store i32 %218, i32* %216, align 4', '%243 = load i64, i64* %PC, align 8', '%244 = add i64 %243, -50', 'store i64 %244, i64* %PC, align 8'])
Keep: block_400520:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = load i32, i32* %EDI, align 4
Found line to remove! %41 = add i64 %10, 10
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %39 to i32*
Found line to remove! store i32 %40, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %RSI, align 8
Found line to remove! %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Keep: %49 = load i64, i64* %RBP, align 8
Keep: %50 = add i64 %49, -20
Found line to remove! %51 = load i64, i64* %PC, align 8
Found line to remove! %52 = add i64 %51, 7
Found line to remove! store i64 %52, i64* %PC, align 8
Keep: %53 = inttoptr i64 %50 to i32*
Keep: store i32 3, i32* %53, align 4
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400536
Keep: 
Keep: block_400536:                                     ; preds = %block_400542, %block_400520
Found line to remove! %54 = phi i64 [ %244, %block_400542 ], [ %.pre, %block_400520 ]
Keep: %55 = load i64, i64* %RBP, align 8
Keep: %56 = add i64 %55, -20
Found line to remove! %57 = add i64 %54, 3
Found line to remove! store i64 %57, i64* %PC, align 8
Keep: %58 = inttoptr i64 %56 to i32*
Keep: %59 = load i32, i32* %58, align 4
Found line to remove! %60 = zext i32 %59 to i64
Found line to remove! store i64 %60, i64* %RAX, align 8
Keep: %61 = add i64 %55, -4
Found line to remove! %62 = add i64 %54, 6
Found line to remove! store i64 %62, i64* %PC, align 8
Keep: %63 = inttoptr i64 %61 to i32*
Keep: %64 = load i32, i32* %63, align 4
Keep: %65 = sub i32 %59, %64
Keep: %66 = icmp ult i32 %59, %64
Found line to remove! %67 = zext i1 %66 to i8
Found line to remove! store i8 %67, i8* %14, align 1
Found line to remove! %68 = and i32 %65, 255
Found line to remove! %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
Found line to remove! %70 = trunc i32 %69 to i8
Found line to remove! %71 = and i8 %70, 1
Found line to remove! %72 = xor i8 %71, 1
Found line to remove! store i8 %72, i8* %21, align 1
Found line to remove! %73 = xor i32 %64, %59
Found line to remove! %74 = xor i32 %73, %65
Found line to remove! %75 = lshr i32 %74, 4
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! %77 = and i8 %76, 1
Found line to remove! store i8 %77, i8* %26, align 1
Keep: %78 = icmp eq i32 %65, 0
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %29, align 1
Found line to remove! %80 = lshr i32 %65, 31
Found line to remove! %81 = trunc i32 %80 to i8
Found line to remove! store i8 %81, i8* %32, align 1
Found line to remove! %82 = lshr i32 %59, 31
Found line to remove! %83 = lshr i32 %64, 31
Found line to remove! %84 = xor i32 %83, %82
Found line to remove! %85 = xor i32 %80, %82
Found line to remove! %86 = add nuw nsw i32 %85, %84
Found line to remove! %87 = icmp eq i32 %86, 2
Found line to remove! %88 = zext i1 %87 to i8
Found line to remove! store i8 %88, i8* %38, align 1
Keep: %89 = or i1 %78, %66
Found line to remove! %.v = select i1 %89, i64 55, i64 12
Found line to remove! %90 = add i64 %54, %.v
Found line to remove! store i64 %90, i64* %PC, align 8
Keep: br i1 %89, label %block_40056d, label %block_400542
Keep: 
Keep: block_40056d:                                     ; preds = %block_400536
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! store i64 add (i64 ptrtoint (%seg_400690__rodata_type* @seg_400690__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %91 = add i64 %90, 13
Found line to remove! store i64 %91, i64* %PC, align 8
Found line to remove! %92 = load i32, i32* %63, align 4
Found line to remove! %93 = zext i32 %92 to i64
Found line to remove! store i64 %93, i64* %RSI, align 8
Found line to remove! %94 = add i64 %55, -16
Found line to remove! %95 = add i64 %90, 17
Found line to remove! store i64 %95, i64* %PC, align 8
Found line to remove! %96 = inttoptr i64 %94 to i64*
Found line to remove! %97 = load i64, i64* %96, align 8
Found line to remove! store i64 %97, i64* %RAX, align 8
Found line to remove! %98 = add i64 %90, 19
Found line to remove! store i64 %98, i64* %PC, align 8
Found line to remove! %99 = inttoptr i64 %97 to i32*
Found line to remove! %100 = load i32, i32* %99, align 4
Found line to remove! %101 = zext i32 %100 to i64
Found line to remove! store i64 %101, i64* %RDX, align 8
Found line to remove! %102 = add i64 %90, 23
Found line to remove! store i64 %102, i64* %PC, align 8
Found line to remove! %103 = load i64, i64* %96, align 8
Found line to remove! store i64 %103, i64* %RAX, align 8
Found line to remove! %104 = add i64 %103, 4
Found line to remove! %105 = add i64 %90, 26
Found line to remove! store i64 %105, i64* %PC, align 8
Found line to remove! %106 = inttoptr i64 %104 to i32*
Found line to remove! %107 = load i32, i32* %106, align 4
Found line to remove! %108 = zext i32 %107 to i64
Found line to remove! store i64 %108, i64* %RCX, align 8
Found line to remove! %109 = add i64 %90, 30
Found line to remove! store i64 %109, i64* %PC, align 8
Found line to remove! %110 = load i64, i64* %96, align 8
Found line to remove! store i64 %110, i64* %RAX, align 8
Found line to remove! %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! %112 = add i64 %110, 8
Found line to remove! %113 = add i64 %90, 34
Found line to remove! store i64 %113, i64* %PC, align 8
Found line to remove! %114 = inttoptr i64 %112 to i32*
Found line to remove! %115 = load i32, i32* %114, align 4
Found line to remove! %116 = zext i32 %115 to i64
Found line to remove! store i64 %116, i64* %111, align 8
Found line to remove! %117 = add i64 %90, 38
Found line to remove! store i64 %117, i64* %PC, align 8
Found line to remove! %118 = load i64, i64* %96, align 8
Found line to remove! store i64 %118, i64* %RAX, align 8
Found line to remove! %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
Found line to remove! %120 = add i64 %118, 12
Found line to remove! %121 = add i64 %90, 42
Found line to remove! store i64 %121, i64* %PC, align 8
Found line to remove! %122 = inttoptr i64 %120 to i32*
Found line to remove! %123 = load i32, i32* %122, align 4
Found line to remove! %124 = zext i32 %123 to i64
Found line to remove! store i64 %124, i64* %119, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %125 = add i64 %90, -333
Found line to remove! %126 = add i64 %90, 49
Found line to remove! %127 = load i64, i64* %RSP, align 8
Found line to remove! %128 = add i64 %127, -8
Found line to remove! %129 = inttoptr i64 %128 to i64*
Found line to remove! store i64 %126, i64* %129, align 8
Found line to remove! store i64 %128, i64* %RSP, align 8
Found line to remove! store i64 %125, i64* %PC, align 8
Found line to remove! %130 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %131 = load i64, i64* %RBP, align 8
Found line to remove! %132 = add i64 %131, -24
Found line to remove! %133 = load i32, i32* %EAX, align 4
Found line to remove! %134 = load i64, i64* %PC, align 8
Found line to remove! %135 = add i64 %134, 3
Found line to remove! store i64 %135, i64* %PC, align 8
Found line to remove! %136 = inttoptr i64 %132 to i32*
Found line to remove! store i32 %133, i32* %136, align 4
Found line to remove! %137 = load i64, i64* %RSP, align 8
Found line to remove! %138 = load i64, i64* %PC, align 8
Found line to remove! %139 = add i64 %137, 32
Found line to remove! store i64 %139, i64* %RSP, align 8
Found line to remove! %140 = icmp ugt i64 %137, -33
Found line to remove! %141 = zext i1 %140 to i8
Found line to remove! store i8 %141, i8* %14, align 1
Found line to remove! %142 = trunc i64 %139 to i32
Found line to remove! %143 = and i32 %142, 255
Found line to remove! %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #12
Found line to remove! %145 = trunc i32 %144 to i8
Found line to remove! %146 = and i8 %145, 1
Found line to remove! %147 = xor i8 %146, 1
Found line to remove! store i8 %147, i8* %21, align 1
Found line to remove! %148 = xor i64 %139, %137
Found line to remove! %149 = lshr i64 %148, 4
Found line to remove! %150 = trunc i64 %149 to i8
Found line to remove! %151 = and i8 %150, 1
Found line to remove! store i8 %151, i8* %26, align 1
Found line to remove! %152 = icmp eq i64 %139, 0
Found line to remove! %153 = zext i1 %152 to i8
Found line to remove! store i8 %153, i8* %29, align 1
Found line to remove! %154 = lshr i64 %139, 63
Found line to remove! %155 = trunc i64 %154 to i8
Found line to remove! store i8 %155, i8* %32, align 1
Found line to remove! %156 = lshr i64 %137, 63
Found line to remove! %157 = xor i64 %154, %156
Found line to remove! %158 = add nuw nsw i64 %157, %154
Found line to remove! %159 = icmp eq i64 %158, 2
Found line to remove! %160 = zext i1 %159 to i8
Found line to remove! store i8 %160, i8* %38, align 1
Found line to remove! %161 = add i64 %138, 5
Found line to remove! store i64 %161, i64* %PC, align 8
Found line to remove! %162 = add i64 %137, 40
Found line to remove! %163 = inttoptr i64 %139 to i64*
Found line to remove! %164 = load i64, i64* %163, align 8
Found line to remove! store i64 %164, i64* %RBP, align 8
Found line to remove! store i64 %162, i64* %RSP, align 8
Found line to remove! %165 = add i64 %138, 6
Found line to remove! store i64 %165, i64* %PC, align 8
Found line to remove! %166 = inttoptr i64 %162 to i64*
Found line to remove! %167 = load i64, i64* %166, align 8
Found line to remove! store i64 %167, i64* %PC, align 8
Found line to remove! %168 = add i64 %137, 48
Found line to remove! store i64 %168, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %130
Keep: 
Keep: block_400542:                                     ; preds = %block_400536
Found line to remove! %169 = add i64 %55, -16
Found line to remove! %170 = add i64 %90, 4
Found line to remove! store i64 %170, i64* %PC, align 8
Found line to remove! %171 = inttoptr i64 %169 to i64*
Found line to remove! %172 = load i64, i64* %171, align 8
Found line to remove! store i64 %172, i64* %RAX, align 8
Found line to remove! %173 = add i64 %90, 7
Found line to remove! store i64 %173, i64* %PC, align 8
Keep: %174 = load i32, i32* %58, align 4
Found line to remove! %175 = add i32 %174, -1
Found line to remove! %176 = zext i32 %175 to i64
Keep: %177 = icmp eq i32 %174, 0
Keep: %178 = zext i1 %177 to i8
Keep: store i8 %178, i8* %14, align 1
Found line to remove! %179 = and i32 %175, 255
Found line to remove! %180 = tail call i32 @llvm.ctpop.i32(i32 %179) #12
Found line to remove! %181 = trunc i32 %180 to i8
Found line to remove! %182 = and i8 %181, 1
Found line to remove! %183 = xor i8 %182, 1
Found line to remove! store i8 %183, i8* %21, align 1
Found line to remove! %184 = xor i32 %175, %174
Found line to remove! %185 = lshr i32 %184, 4
Found line to remove! %186 = trunc i32 %185 to i8
Found line to remove! %187 = and i8 %186, 1
Found line to remove! store i8 %187, i8* %26, align 1
Found line to remove! %188 = icmp eq i32 %175, 0
Found line to remove! %189 = zext i1 %188 to i8
Found line to remove! store i8 %189, i8* %29, align 1
Found line to remove! %190 = lshr i32 %175, 31
Found line to remove! %191 = trunc i32 %190 to i8
Found line to remove! store i8 %191, i8* %32, align 1
Found line to remove! %192 = lshr i32 %174, 31
Found line to remove! %193 = xor i32 %190, %192
Found line to remove! %194 = add nuw nsw i32 %193, %192
Found line to remove! %195 = icmp eq i32 %194, 2
Found line to remove! %196 = zext i1 %195 to i8
Found line to remove! store i8 %196, i8* %38, align 1
Found line to remove! store i64 %176, i64* %RCX, align 8
Found line to remove! store i64 %176, i64* %RDX, align 8
Found line to remove! %197 = shl nuw nsw i64 %176, 2
Found line to remove! %198 = add i64 %172, %197
Found line to remove! %199 = add i64 %90, 17
Found line to remove! store i64 %199, i64* %PC, align 8
Found line to remove! %200 = inttoptr i64 %198 to i32*
Found line to remove! %201 = load i32, i32* %200, align 4
Found line to remove! %202 = zext i32 %201 to i64
Found line to remove! store i64 %202, i64* %RCX, align 8
Found line to remove! %203 = add i64 %90, 21
Found line to remove! store i64 %203, i64* %PC, align 8
Found line to remove! %204 = load i64, i64* %171, align 8
Found line to remove!Writing '/tmp/tmp6i9h3auy.dot'...
Writing '/tmp/tmp6i9h3auy.dot':Done

Reading LLVM: /tmp/tmpvdygv5v8-query.ll
Extracting function [foo] from /tmp/tmpvdygv5v8-query.ll
Dot file generated!
Writing '/tmp/tmphsfjf8na.dot'...
Writing '/tmp/tmphsfjf8na.dot':Done

Reading LLVM: /tmp/tmp8naatsdh-target.ll
Extracting function [foo] from /tmp/tmp8naatsdh-target.ll
Dot file generated!
 store i64 %204, i64* %RAX, align 8
Found line to remove! %205 = add i64 %90, 24
Found line to remove! store i64 %205, i64* %PC, align 8
Found line to remove! %206 = load i32, i32* %58, align 4
Found line to remove! %207 = zext i32 %206 to i64
Found line to remove! store i64 %207, i64* %RSI, align 8
Found line to remove! store i64 %207, i64* %RDX, align 8
Found line to remove! %208 = shl nuw nsw i64 %207, 2
Found line to remove! %209 = add i64 %204, %208
Found line to remove! %210 = add i64 %90, 29
Found line to remove! store i64 %210, i64* %PC, align 8
Found line to remove! %211 = inttoptr i64 %209 to i32*
Found line to remove! store i32 %201, i32* %211, align 4
Keep: %212 = load i64, i64* %RBP, align 8
Keep: %213 = add i64 %212, -20
Found line to remove! %214 = load i64, i64* %PC, align 8
Found line to remove! %215 = add i64 %214, 3
Found line to remove! store i64 %215, i64* %PC, align 8
Keep: %216 = inttoptr i64 %213 to i32*
Keep: %217 = load i32, i32* %216, align 4
Found line to remove! %218 = add i32 %217, -1
Found line to remove! %219 = zext i32 %218 to i64
Found line to remove! store i64 %219, i64* %RAX, align 8
Keep: %220 = icmp ne i32 %217, 0
Keep: %221 = zext i1 %220 to i8
Keep: store i8 %221, i8* %14, align 1
Found line to remove! %222 = and i32 %218, 255
Found line to remove! %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #12
Found line to remove! %224 = trunc i32 %223 to i8
Found line to remove! %225 = and i8 %224, 1
Found line to remove! %226 = xor i8 %225, 1
Found line to remove! store i8 %226, i8* %21, align 1
Found line to remove! %227 = xor i32 %217, 16
Found line to remove! %228 = xor i32 %227, %218
Found line to remove! %229 = lshr i32 %228, 4
Found line to remove! %230 = trunc i32 %229 to i8
Found line to remove! %231 = and i8 %230, 1
Found line to remove! store i8 %231, i8* %26, align 1
Found line to remove! %232 = icmp eq i32 %218, 0
Found line to remove! %233 = zext i1 %232 to i8
Found line to remove! store i8 %233, i8* %29, align 1
Found line to remove! %234 = lshr i32 %218, 31
Found line to remove! %235 = trunc i32 %234 to i8
Found line to remove! store i8 %235, i8* %32, align 1
Found line to remove! %236 = lshr i32 %217, 31
Found line to remove! %237 = xor i32 %234, %236
Found line to remove! %238 = xor i32 %234, 1
Found line to remove! %239 = add nuw nsw i32 %237, %238
Found line to remove! %240 = icmp eq i32 %239, 2
Found line to remove! %241 = zext i1 %240 to i8
Found line to remove! store i8 %241, i8* %38, align 1
Found line to remove! %242 = add i64 %214, 9
Found line to remove! store i64 %242, i64* %PC, align 8
Found line to remove! store i32 %218, i32* %216, align 4
Found line to remove! %243 = load i64, i64* %PC, align 8
Found line to remove! %244 = add i64 %243, -50
Found line to remove! store i64 %244, i64* %PC, align 8
Keep: br label %block_400536
================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_50 = load i64, i64* %RBP.i, align 8
- 3 %var_2_51 = add i64 %var_2_50, -20
- 4 %var_2_54 = inttoptr i64 %var_2_51 to i32*
- 5 store i32 3, i32* %var_2_54, align 4
- 6 %var_2_571 = load i64, i64* %RBP.i, align 8
- 7 %var_2_582 = add i64 %var_2_571, -20
- 8 %var_2_603 = inttoptr i64 %var_2_582 to i32*
- 9 %var_2_614 = load i32, i32* %var_2_603, align 4
- 10 %var_2_635 = add i64 %var_2_571, -4
- 11 %var_2_656 = inttoptr i64 %var_2_635 to i32*
- 12 %var_2_667 = load i32, i32* %var_2_656, align 4
- 13 %3 = icmp ugt i32 %var_2_614, %var_2_667
- 14 \<badref\> = br i1 %3, label %block_400542.preheader, label %block_.L_40056d
- 15 \<badref\> = br label %block_400542
- 16 store i8 0, i8* %var_2_14, align 1
- 17 %var_2_141 = load i32, i32* %var_2_603, align 4
- 18 %var_2_144 = icmp ne i32 %var_2_141, 0
- 19 %var_2_145 = zext i1 %var_2_144 to i8
- 20 store i8 %var_2_145, i8* %var_2_14, align 1
- 21 %var_2_61 = load i32, i32* %var_2_603, align 4
- 22 %var_2_66 = load i32, i32* %var_2_656, align 4
- 23 %4 = icmp ugt i32 %var_2_61, %var_2_66
- 24 \<badref\> = br i1 %4, label %block_400542, label %block_.L_40056d.loopexit
- 25 \<badref\> = br label %block_.L_40056d
- 26 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe079a27048>, {0: {0}, 1: {1}, 2: {2, 6, 9, 12, 19, 23, 24}, 3: {3, 7}, 4: {8, 11, 4}, 5: {18, 5, 22}, 6: {2, 6, 9, 12, 19, 23, 24}, 7: {3, 7}, 8: {8, 11, 4}, 9: {2, 6, 9, 12, 19, 23, 24}, 10: {10}, 11: {8, 11, 4}, 12: {2, 6, 9, 12, 19, 23, 24}, 13: {25, 20, 13}, 14: {26, 14}, 15: {16, 15}, 16: {18, 5, 22}, 17: {2, 6, 9, 12, 19, 23, 24}, 18: {25, 20, 13}, 19: {21}, 20: {18, 5, 22}, 21: {2, 6, 9, 12, 19, 23, 24}, 22: {2, 6, 9, 12, 19, 23, 24}, 23: {25, 20, 13}, 24: {26, 14}, 25: {16, 15}, 26: {17}})
Equivalent! frozenset({9, 23}) {9, 21}
Equivalent! frozenset({24, 12}) {12, 22}
Equivalent! frozenset({25, 13}) {13, 23}
Equivalent! frozenset({26, 14}) {24, 14}
Equivalent! frozenset({16, 15}) {25, 15}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe079a27048>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {24}, 13: {25}, 14: {14}, 15: {15}, 16: {18, 22}, 17: {19}, 18: {20}, 19: {21}, 20: {22}, 21: {23}, 22: {12}, 23: {13}, 24: {26}, 25: {16}, 26: {17}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 store store
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 icmp icmp
EXACT 14 br br
EXACT 15 br br
MORE 16 POT: 2
EXACT 17 load load
EXACT 18 icmp icmp
EXACT 19 zext zext
EXACT 20 store store
EXACT 21 load load
EXACT 22 load load
EXACT 23 icmp icmp
EXACT 24 br br
EXACT 25 br br
EXACT 26 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_49 = load i64, i64* %RBP, align 8
- 3 %var_2_50 = add i64 %var_2_49, -20
- 4 %var_2_53 = inttoptr i64 %var_2_50 to i32*
- 5 store i32 3, i32* %var_2_53, align 4
- 6 %var_2_551 = load i64, i64* %RBP, align 8
- 7 %var_2_562 = add i64 %var_2_551, -20
- 8 %var_2_583 = inttoptr i64 %var_2_562 to i32*
- 9 %var_2_594 = load i32, i32* %var_2_583, align 4
- 10 %var_2_615 = add i64 %var_2_551, -4
- 11 %var_2_636 = inttoptr i64 %var_2_615 to i32*
- 12 %var_2_647 = load i32, i32* %var_2_636, align 4
- 13 %3 = icmp ugt i32 %var_2_594, %var_2_647
- 14 \<badref\> = br i1 %3, label %block_400542.preheader, label %block_40056d
- 15 \<badref\> = br label %block_400542
- 16 \<badref\> = br label %block_40056d
- 17 ret %struct.Memory* %2
- 18 store i8 0, i8* %var_2_14, align 1
- 19 %var_2_217 = load i32, i32* %var_2_583, align 4
- 20 %var_2_220 = icmp ne i32 %var_2_217, 0
- 21 %var_2_221 = zext i1 %var_2_220 to i8
- 22 store i8 %var_2_221, i8* %var_2_14, align 1
- 23 %var_2_59 = load i32, i32* %var_2_583, align 4
- 24 %var_2_64 = load i32, i32* %var_2_636, align 4
- 25 %4 = icmp ugt i32 %var_2_59, %var_2_64
- 26 \<badref\> = br i1 %4, label %block_400542, label %block_40056d.loopexit
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe0797c8ae8>, {0: {0}, 1: {1}, 2: {2, 6, 9, 12, 17, 21, 22}, 3: {3, 7}, 4: {8, 11, 4}, 5: {16, 20, 5}, 6: {2, 6, 9, 12, 17, 21, 22}, 7: {3, 7}, 8: {8, 11, 4}, 9: {2, 6, 9, 12, 17, 21, 22}, 10: {10}, 11: {8, 11, 4}, 12: {2, 6, 9, 12, 17, 21, 22}, 13: {18, 13, 23}, 14: {24, 14}, 15: {25, 15}, 16: {25, 15}, 17: {26}, 18: {16, 20, 5}, 19: {2, 6, 9, 12, 17, 21, 22}, 20: {18, 13, 23}, 21: {19}, 22: {16, 20, 5}, 23: {2, 6, 9, 12, 17, 21, 22}, 24: {2, 6, 9, 12, 17, 21, 22}, 25: {18, 13, 23}, 26: {24, 14}})
Equivalent! frozenset({9, 21}) {9, 23}
Equivalent! frozenset({12, 22}) {24, 12}
Equivalent! frozenset({13, 23}) {25, 13}
Equivalent! frozenset({24, 14}) {26, 14}
Equivalent! frozenset({25, 15}) {16, 15}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe0797c8ae8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {10}, 11: {11}, 12: {22}, 13: {23}, 14: {14}, 15: {15}, 16: {25}, 17: {26}, 18: {16, 20}, 19: {17}, 20: {18}, 21: {19}, 22: {20}, 23: {21}, 24: {12}, 25: {13}, 26: {24}})Writing '/tmp/tmphv_c_qn3.dot'...
Writing '/tmp/tmphv_c_qn3.dot':Done

Reading LLVM: /tmp/tmpvdygv5v8-query.ll
Extracting function [foo] from /tmp/tmpvdygv5v8-query.ll
Dot file generated!
Writing '/tmp/tmpaqgzv209.dot'...
Writing '/tmp/tmpaqgzv209.dot':Done

Reading LLVM: /tmp/tmp8naatsdh-target.ll
Extracting function [foo] from /tmp/tmp8naatsdh-target.ll
Dot file generated!

EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 store store
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 load load
EXACT 13 icmp icmp
EXACT 14 br br
EXACT 15 br br
EXACT 16 br br
EXACT 17 ret ret
MORE 18 POT: 2
EXACT 19 load load
EXACT 20 icmp icmp
EXACT 21 zext zext
EXACT 22 store store
EXACT 23 load load
EXACT 24 load load
EXACT 25 icmp icmp
EXACT 26 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_50 = load i64, i64* %RBP.i, align 8', '%var_2_51 = add i64 %var_2_50, -20', '%var_2_54 = inttoptr i64 %var_2_51 to i32*', 'store i32 3, i32* %var_2_54, align 4', '%var_2_141 = load i32, i32* %var_2_603, align 4', '%var_2_144 = icmp ne i32 %var_2_141, 0', '%var_2_145 = zext i1 %var_2_144 to i8', 'store i8 %var_2_145, i8* %var_2_14, align 1', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_50 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_51 = add i64 %var_2_50, -20
Found line to remove! %var_2_54 = inttoptr i64 %var_2_51 to i32*
Found line to remove! store i32 3, i32* %var_2_54, align 4
Keep: %var_2_571 = load i64, i64* %RBP.i, align 8
Keep: %var_2_582 = add i64 %var_2_571, -20
Keep: %var_2_603 = inttoptr i64 %var_2_582 to i32*
Keep: %var_2_614 = load i32, i32* %var_2_603, align 4
Keep: %var_2_635 = add i64 %var_2_571, -4
Keep: %var_2_656 = inttoptr i64 %var_2_635 to i32*
Keep: %var_2_667 = load i32, i32* %var_2_656, align 4
Keep: %3 = icmp ugt i32 %var_2_614, %var_2_667
Keep: br i1 %3, label %block_400542.preheader, label %block_.L_40056d
Keep: 
Keep: block_400542.preheader:                           ; preds = %entry
Keep: br label %block_400542
Keep: 
Keep: block_400542:                                     ; preds = %block_400542.preheader, %block_400542
Keep: store i8 0, i8* %var_2_14, align 1
Found line to remove! %var_2_141 = load i32, i32* %var_2_603, align 4
Found line to remove! %var_2_144 = icmp ne i32 %var_2_141, 0
Found line to remove! %var_2_145 = zext i1 %var_2_144 to i8
Found line to remove! store i8 %var_2_145, i8* %var_2_14, align 1
Keep: %var_2_61 = load i32, i32* %var_2_603, align 4
Keep: %var_2_66 = load i32, i32* %var_2_656, align 4
Keep: %4 = icmp ugt i32 %var_2_61, %var_2_66
Keep: br i1 %4, label %block_400542, label %block_.L_40056d.loopexit
Keep: 
Keep: block_.L_40056d.loopexit:                         ; preds = %block_400542
Keep: br label %block_.L_40056d
Keep: 
Keep: block_.L_40056d:                                  ; preds = %block_.L_40056d.loopexit, %entry
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_49 = load i64, i64* %RBP, align 8', '%var_2_50 = add i64 %var_2_49, -20', '%var_2_53 = inttoptr i64 %var_2_50 to i32*', 'store i32 3, i32* %var_2_53, align 4', 'ret %struct.Memory* %2', '%var_2_217 = load i32, i32* %var_2_583, align 4', '%var_2_220 = icmp ne i32 %var_2_217, 0', '%var_2_221 = zext i1 %var_2_220 to i8', 'store i8 %var_2_221, i8* %var_2_14, align 1'])
Keep: block_400520:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_49 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_50 = add i64 %var_2_49, -20
Found line to remove! %var_2_53 = inttoptr i64 %var_2_50 to i32*
Found line to remove! store i32 3, i32* %var_2_53, align 4
Keep: %var_2_551 = load i64, i64* %RBP, align 8
Keep: %var_2_562 = add i64 %var_2_551, -20
Keep: %var_2_583 = inttoptr i64 %var_2_562 to i32*
Keep: %var_2_594 = load i32, i32* %var_2_583, align 4
Keep: %var_2_615 = add i64 %var_2_551, -4
Keep: %var_2_636 = inttoptr i64 %var_2_615 to i32*
Keep: %var_2_647 = load i32, i32* %var_2_636, align 4
Keep: %3 = icmp ugt i32 %var_2_594, %var_2_647
Keep: br i1 %3, label %block_400542.preheader, label %block_40056d
Keep: 
Keep: block_400542.preheader:                           ; preds = %block_400520
Keep: br label %block_400542
Keep: 
Keep: block_40056d.loopexit:                            ; preds = %block_400542
Keep: br label %block_40056d
Keep: 
Keep: block_40056d:                                     ; preds = %block_40056d.loopexit, %block_400520
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_400542:                                     ; preds = %block_400542.preheader, %block_400542
Keep: store i8 0, i8* %var_2_14, align 1
Found line to remove! %var_2_217 = load i32, i32* %var_2_583, align 4
Found line to remove! %var_2_220 = icmp ne i32 %var_2_217, 0
Found line to remove! %var_2_221 = zext i1 %var_2_220 to i8
Found line to remove! store i8 %var_2_221, i8* %var_2_14, align 1
Keep: %var_2_59 = load i32, i32* %var_2_583, align 4
Keep: %var_2_64 = load i32, i32* %var_2_636, align 4
Keep: %4 = icmp ugt i32 %var_2_59, %var_2_64
Keep: br i1 %4, label %block_400542, label %block_40056d.loopexit
================ Starting round 4
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_571 = load i64, i64* %RBP.i, align 8
- 3 %var_2_582 = add i64 %var_2_571, -20
- 4 %var_2_603 = inttoptr i64 %var_2_582 to i32*
- 5 %var_2_614 = load i32, i32* %var_2_603, align 4
- 6 %var_2_635 = add i64 %var_2_571, -4
- 7 %var_2_656 = inttoptr i64 %var_2_635 to i32*
- 8 %var_2_667 = load i32, i32* %var_2_656, align 4
- 9 %var_4_3 = icmp ugt i32 %var_2_614, %var_2_667
- 10 \<badref\> = br i1 %var_4_3, label %block_400542.preheader, label %block_.L_40056d
- 11 \<badref\> = br label %block_400542
- 12 store i8 0, i8* %var_2_14, align 1
- 13 %var_2_61 = load i32, i32* %var_2_603, align 4
- 14 %var_2_66 = load i32, i32* %var_2_656, align 4
- 15 %var_4_4 = icmp ugt i32 %var_2_61, %var_2_66
- 16 \<badref\> = br i1 %var_4_4, label %block_400542, label %block_.L_40056d.loopexit
- 17 \<badref\> = br label %block_.L_40056d
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe078dba510>, {0: {0}, 1: {1}, 2: {2, 5, 8, 15, 16}, 3: {3}, 4: {4, 7}, 5: {2, 5, 8, 15, 16}, 6: {6}, 7: {4, 7}, 8: {2, 5, 8, 15, 16}, 9: {9, 17}, 10: {10, 18}, 11: {11, 12}, 12: {14}, 13: {2, 5, 8, 15, 16}, 14: {2, 5, 8, 15, 16}, 15: {9, 17}, 16: {10, 18}, 17: {11, 12}, 18: {13}})
Equivalent! frozenset({5, 15}) {13, 5}
Equivalent! frozenset({16, 8}) {8, 14}
Equivalent! frozenset({17, 9}) {9, 15}
Equivalent! frozenset({18, 10}) {16, 10}
Equivalent! frozenset({11, 12}) {17, 11}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe078dba510>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {15}, 6: {6}, 7: {7}, 8: {16}, 9: {17}, 10: {10}, 11: {12}, 12: {14}, 13: {5}, 14: {8}, 15: {9}, 16: {18}, 17: {11}, 18: {13}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 load load
EXACT 9 icmp icmp
EXACT 10 br br
EXACT 11 br br
EXACT 12 store store
EXACT 13 load load
EXACT 14 load load
EXACT 15 icmp icmp
EXACT 16 br br
EXACT 17 br br
EXACT 18 ret ret
================ Starting round 5
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 2 %var_2_551 = load i64, i64* %RBP, align 8
- 3 %var_2_562 = add i64 %var_2_551, -20
- 4 %var_2_583 = inttoptr i64 %var_2_562 to i32*
- 5 %var_2_594 = load i32, i32* %var_2_583, align 4
- 6 %var_2_615 = add i64 %var_2_551, -4
- 7 %var_2_636 = inttoptr i64 %var_2_615 to i32*
- 8 %var_2_647 = load i32, i32* %var_2_636, align 4
- 9 %var_4_3 = icmp ugt i32 %var_2_594, %var_2_647
- 10 \<badref\> = br i1 %var_4_3, label %block_400542.preheader, label %block_40056d
- 11 \<badref\> = br label %block_400542
- 12 \<badref\> = br label %block_40056d
- 13 ret %struct.Memory* %2
- 14 store i8 0, i8* %var_2_14, align 1
- 15 %var_2_59 = load i32, i32* %var_2_583, align 4
- 16 %var_2_64 = load i32, i32* %var_2_636, align 4
- 17 %var_4_4 = icmp ugt i32 %var_2_59, %var_2_64
- 18 \<badref\> = br i1 %var_4_4, label %block_400542, label %block_40056d.loopexit
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe078739bf8>, {0: {0}, 1: {1}, 2: {2, 5, 8, 13, 14}, 3: {3}, 4: {4, 7}, 5: {2, 5, 8, 13, 14}, 6: {6}, 7: {4, 7}, 8: {2, 5, 8, 13, 14}, 9: {9, 15}, 10: {16, 10}, 11: {17, 11}, 12: {17, 11}, 13: {18}, 14: {12}, 15: {2, 5, 8, 13, 14}, 16: {2, 5, 8, 13, 14}, 17: {9, 15}, 18: {16, 10}})
Equivalent! frozenset({5, 13}) {5, 15}
Equivalent! frozenset({8, 14}) {8, 16}
Equivalent! frozenset({9, 15}) {9, 17}
Equivalent! frozenset({16, 10}) {10, 18}
Equivalent! frozenset({17, 11}) {11, 12}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe078739bf8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {9}, 10: {16}, 11: {17}, 12: {11}, 13: {18}, 14: {12}, 15: {13}, 16: {14}, 17: {15}, 18: {10}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 load load
EXACT 9 icmp icmp
EXACT 10 br br
EXACT 11 br br
EXACT 12 br br
EXACT 13 ret ret
EXACT 14 store store
EXACT 15 load load
EXACT 16 load load
EXACT 17 icmp icmp
EXACT 18 br br
FP: 63 3.0 True
TO REMOVE: dict_keys(['%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'ret %struct.Memory* %2', 'store i8 0, i8* %var_2_14, align 1'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Keep: %var_2_571 = load i64, i64* %RBP.i, align 8
Keep: %var_2_582 = add i64 %var_2_571, -20
Keep: %var_2_603 = inttoptr i64 %var_2_582 to i32*
Keep: %var_2_614 = load i32, i32* %var_2_603, align 4
Keep: %var_2_635 = add i64 %var_2_571, -4
Keep: %var_2_656 = inttoptr i64 %var_2_635 to i32*
Keep: %var_2_667 = load i32, i32* %var_2_656, align 4
Keep: %var_4_3 = icmp ugt i32 %var_2_614, %var_2_667
Keep: br i1 %var_4_3, label %block_400542.preheader, label %block_.L_40056d
Keep: 
Keep: block_400542.preheader:                           ; preds = %entry
Keep: br label %block_400542
Keep: 
Keep: block_400542:                                     ; preds = %block_400542.preheader, %block_400542
Found line to remove! store i8 0, i8* %var_2_14, align 1
Keep: %var_2_61 = load i32, i32* %var_2_603, align 4
Keep: %var_2_66 = load i32, i32* %var_2_656, align 4
Keep: %var_4_4 = icmp ugt i32 %var_2_61, %var_2_66
Keep: br i1 %var_4_4, label %block_400542, label %block_.L_40056d.loopexit
Keep: 
Keep: block_.L_40056d.loopexit:                         ; preds = %block_400542
Keep: br label %block_.L_40056d
Keep: 
Keep: block_.L_40056d:                                  ; preds = %block_.L_40056d.loopexit, %entry
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'ret %struct.Memory* %2', 'store i8 0, i8* %var_2_14, align 1'])
Keep: block_400520:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Keep: %var_2_551 = load i64, i64* %RBP, align 8
Keep: %var_2_562 = add i64 %var_2_551, -20
Keep: %var_2_583 = inttoptr i64 %var_2_562 to i32*
Keep: %var_2_594 = load i32, i32* %var_2_583, align 4
Keep: %var_2_615 = add i64 %var_2_551, -4
Keep: %var_2_636 = inttoptr i64 %var_2_615 to i32*
Keep: %var_2_647 = load i32, i32* %var_2_636, align 4
Keep: %var_4_3 = icmp ugt i32 %var_2_594, %var_2_647
Keep: br i1 %var_4_3, label %block_400542.preheader, label %block_40056d
Keep: 
Keep: block_400542.preheader:                           ; preds = %block_400520
Keep: br label %block_400542
Keep: 
Keep: block_40056d.loopexit:                            ; preds = %block_400542
Keep: br label %block_40056d
Keep: 
Keep: block_40056d:                                     ; preds = %block_40056d.loopexit, %block_400520
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_400542:                                     ; preds = %block_400542.preheader, %block_400542
Found line to remove! store i8 0, i8* %var_2_14, align 1
Keep: %var_2_59 = load i32, i32* %var_2_583, align 4
Keep: %var_2_64 = load i32, i32* %var_2_636, align 4
Keep: %var_4_4 = icmp ugt i32 %var_2_59, %var_2_64
Keep: br i1 %var_4_4, label %block_400542, label %block_40056d.loopexit
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_29/foo/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_29/binary/test.mcsema.calls_renamed.ll foo
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
