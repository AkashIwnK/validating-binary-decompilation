Matching sub_400530_main Vs main


[Info] Retrieve Potential Matches...
[0x55d3c815a0d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55d3c81d5c40]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55d3c8194b10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55d3c81d6190]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55d3c819f3d0]:   %55 = add i64 %54, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	[0x55d3c8175650]:  %49 = add i64 %48, 5
	[0x55d3c817bf80]:  %78 = add i64 %74, 5
	}

[0x55d3c819f450]:   store i64 %55, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c819f4b8]:   %56 = inttoptr i64 %53 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c819f518]:   %57 = load i64, i64* %56, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c819f620]:   %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0 {
	[0x55d3c8151c40]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
	}

[0x55d3c819f6b0]:   store i64 %57, i64* %58, align 1, !tbaa !1284 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c819f7c0]:   %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x55d3c8152480]:  %59 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x55d3c819f838]:   %60 = bitcast i64* %59 to double* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c819f8b0]:   store double 0.000000e+00, double* %60, align 1, !tbaa !1284 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c819f930]:   %61 = add i64 %54, -76 {
	[0x55d3c81768a0]:  %61 = add i64 %54, -76
	}

[0x55d3c819f9b0]:   %62 = add i64 %54, 10 {
	[0x55d3c81766a0]:  %62 = add i64 %54, 10
	}

[0x55d3c819fa18]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c819fa90]:   %64 = add i64 %63, -8 {
	[0x55d3c8176470]:  %64 = add i64 %63, -8
	[0x55d3c8178cc0]:  %71 = add i64 %70, -8
	[0x55d3c81fa610]:  %8 = add i64 %7, -8
	}

[0x55d3c819faf8]:   %65 = inttoptr i64 %64 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c819fb70]:   store i64 %62, i64* %65, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c819fbf0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c819fc70]:   store i64 %61, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c819ff10]:   %66 = tail call %struct.Memory* @sub_400500_fun(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2) {
	[0x55d3c8171400]:  %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x55d3c81fd240]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	[0x55d3c81fd410]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0120]:   store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16), i64* %RDI, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a01a0]:   store i8 1, i8* %AL, align 1, !tbaa !1286 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a0370]:   %68 = add i64 %67, -342 {
	[0x55d3c8178f10]:  %68 = add i64 %66, -342
	}

[0x55d3c81a0430]:   %69 = add i64 %67, 17 {
	[0x55d3c81776d0]:  %69 = add i64 %66, 17
	}

[0x55d3c81a0498]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0510]:   %71 = add i64 %70, -8 {
	[0x55d3c8176470]:  %64 = add i64 %63, -8
	[0x55d3c8178cc0]:  %71 = add i64 %70, -8
	[0x55d3c81fa610]:  %8 = add i64 %7, -8
	}

[0x55d3c81a0578]:   %72 = inttoptr i64 %71 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c81a05f0]:   store i64 %69, i64* %72, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a0670]:   store i64 %71, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a06f0]:   store i64 %68, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a08f8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66) {
	[0x55d3c8171400]:  %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x55d3c81fd240]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	[0x55d3c81fd410]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0a30]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a0a98]:   %75 = load i64, i64* %RBP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0b50]:   %76 = add i64 %75, -20 {
	[0x55d3c817c0e0]:  %76 = add i64 %75, -20
	}

[0x55d3c81a0bb8]:   %77 = load i32, i32* %EAX, align 4 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0c30]:   %78 = add i64 %74, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	[0x55d3c8175650]:  %49 = add i64 %48, 5
	[0x55d3c817bf80]:  %78 = add i64 %74, 5
	}

[0x55d3c81a0cb0]:   store i64 %78, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a0d18]:   %79 = inttoptr i64 %76 to i32* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c81a0d90]:   store i32 %77, i32* %79, align 4 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a0df8]:   %80 = load i32, i32* %ECX, align 4 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0e58]:   %81 = zext i32 %80 to i64 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0f30]:   store i64 %81, i64* %RAX, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a0f98]:   %83 = load i64, i64* %RSP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a1010]:   %84 = add i64 %83, 32 {
	[0x55d3c8179a50]:  %84 = add i64 %83, 32
	}

[0x55d3c81a1090]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a1150]:   %85 = icmp ugt i64 %83, -33 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c81a11b8]:   %86 = zext i1 %85 to i8 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c81a1230]:   store i8 %86, i8* %14, align 1, !tbaa !1265 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a18a8]:   %87 = trunc i64 %84 to i32 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c81a1920]:   %88 = and i32 %87, 255 {
	[0x55d3c8172fc0]:  %16 = and i32 %15, 255
	[0x55d3c8173a40]:  %88 = and i32 %87, 255
	}

[0x55d3c81a19c0]:   %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9 {
	[0x55d3c8171400]:  %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x55d3c81fd240]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	[0x55d3c81fd410]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c81a1b00]:   %91 = and i8 %90, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	[0x55d3c81744e0]:  %25 = and i8 %24, 1
	[0x55d3c817f320]:  %96 = and i8 %95, 1
	}

[0x55d3c81a1b80]:   %92 = xor i8 %91, 1 {
	[0x55d3c8173710]:  %92 = xor i8 %91, 1
	[0x55d3c81e5820]:  %20 = xor i8 %19, 1
	}

[0x55d3c81a1c00]:   store i8 %92, i8* %21, align 1, !tbaa !1279 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a2290]:   %93 = xor i64 %84, %83 {
	[0x55d3c8174640]:  %34 = xor i64 %30, %33
	[0x55d3c817c6d0]:  %93 = xor i64 %84, %83
	[0x55d3c817f400]:  %102 = xor i64 %99, %101
	[0x55d3c81e5710]:  %22 = xor i64 %8, %11
	}

[0x55d3c81a2310]:   %94 = lshr i64 %93, 4 {
	[0x55d3c8173e20]:  %94 = lshr i64 %93, 4
	[0x55d3c81e4720]:  %23 = lshr i64 %22, 4
	}

[0x55d3c81a2378]:   %95 = trunc i64 %94 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c81a23f0]:   %96 = and i8 %95, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	[0x55d3c81744e0]:  %25 = and i8 %24, 1
	[0x55d3c817f320]:  %96 = and i8 %95, 1
	}

[0x55d3c81a2470]:   store i8 %96, i8* %26, align 1, !tbaa !1280 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a2b00]:   %97 = icmp eq i64 %84, 0 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c81a2b68]:   %98 = zext i1 %97 to i8 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c81a2be0]:   store i8 %98, i8* %29, align 1, !tbaa !1281 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a3270]:   %99 = lshr i64 %84, 63 {
	[0x55d3c8173240]:  %33 = lshr i64 %8, 63
	[0x55d3c817e610]:  %101 = lshr i64 %83, 63
	[0x55d3c817ed20]:  %99 = lshr i64 %84, 63
	[0x55d3c81e5e80]:  %30 = lshr i64 %11, 63
	}

[0x55d3c81a32d8]:   %100 = trunc i64 %99 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c81a3350]:   store i8 %100, i8* %32, align 1, !tbaa !1282 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a39e0]:   %101 = lshr i64 %83, 63 {
	[0x55d3c8173240]:  %33 = lshr i64 %8, 63
	[0x55d3c817e610]:  %101 = lshr i64 %83, 63
	[0x55d3c817ed20]:  %99 = lshr i64 %84, 63
	[0x55d3c81e5e80]:  %30 = lshr i64 %11, 63
	}

[0x55d3c81a3a60]:   %102 = xor i64 %99, %101 {
	[0x55d3c8174640]:  %34 = xor i64 %30, %33
	[0x55d3c817c6d0]:  %93 = xor i64 %84, %83
	[0x55d3c817f400]:  %102 = xor i64 %99, %101
	[0x55d3c81e5710]:  %22 = xor i64 %8, %11
	}

[0x55d3c81a3ae0]:   %103 = add nuw nsw i64 %102, %99 {
	[0x55d3c8181d60]:  %103 = add nuw nsw i64 %102, %99
	[0x55d3c81e6700]:  %35 = add nuw nsw i64 %34, %33
	}

[0x55d3c81a3b60]:   %104 = icmp eq i64 %103, 2 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c81a3bc8]:   %105 = zext i1 %104 to i8 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c81a3c40]:   store i8 %105, i8* %38, align 1, !tbaa !1283 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a42d0]:   %106 = add i64 %82, 7 {
	[0x55d3c8180660]:  %106 = add i64 %82, 7
	}

[0x55d3c81a4350]:   store i64 %106, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a4410]:   %107 = add i64 %83, 40 {
	[0x55d3c817f9f0]:  %107 = add i64 %83, 40
	}

[0x55d3c81a4478]:   %108 = inttoptr i64 %84 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c81a44d8]:   %109 = load i64, i64* %108, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a4550]:   store i64 %109, i64* %RBP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a45d0]:   store i64 %107, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a4650]:   %110 = add i64 %82, 8 {
	[0x55d3c8182990]:  %110 = add i64 %82, 8
	}

[0x55d3c81a46d0]:   store i64 %110, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a4738]:   %111 = inttoptr i64 %107 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c81a4798]:   %112 = load i64, i64* %111, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a4810]:   store i64 %112, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a48d0]:   %113 = add i64 %83, 48 {
	[0x55d3c81824b0]:  %113 = add i64 %83, 48
	}

[0x55d3c81a4950]:   store i64 %113, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c81a49b8]:   ret %struct.Memory* %73 {
	[0x55d3c81eea88]:  ret %struct.Memory.32* %call2_400562
	}

[0x55d3c8200488]:   %45 = inttoptr i64 %43 to i32* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c8200500]:   store i32 0, i32* %45, align 4 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8200568]:   %46 = load i64, i64* %RBP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8200620]:   %47 = add i64 %46, -16 {
	[0x55d3c8175230]:  %53 = add i64 %52, -16
	[0x55d3c81757f0]:  %47 = add i64 %46, -16
	}

[0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8200700]:   %49 = add i64 %48, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	[0x55d3c8175650]:  %49 = add i64 %48, 5
	[0x55d3c817bf80]:  %78 = add i64 %74, 5
	}

[0x55d3c8200780]:   store i64 %49, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c82007e8]:   %50 = load i64, i64* %40, align 1 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8200848]:   %51 = inttoptr i64 %47 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c82008c0]:   store i64 %50, i64* %51, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8200928]:   %52 = load i64, i64* %RBP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c82009a0]:   %53 = add i64 %52, -16 {
	[0x55d3c8175230]:  %53 = add i64 %52, -16
	[0x55d3c81757f0]:  %47 = add i64 %46, -16
	}

[0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8206eb0]: %struct.State* %0 {
	[0x55d3c81763c0]:%struct.State.1* %0
	}

[0x55d3c8206ef0]: i64 %1 {
	[0x55d3c8176950]:i64 %1
	}

[0x55d3c8206f30]: %struct.Memory* %2 {
	[0x55d3c8175700]:%struct.Memory.32* %2
	}

[0x55d3c8207158]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c8207208]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55d3c814bf78]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	[0x55d3c81d9558]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	}

[0x55d3c82072c8]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x55d3c814bf78]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	[0x55d3c81d9558]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	}

[0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8207430]:   %6 = add i64 %1, 1 {
	[0x55d3c81710b0]:  %5 = add i64 %1, 1
	}

[0x55d3c82074b0]:   store i64 %6, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8207518]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8208710]:   %8 = add i64 %7, -8 {
	[0x55d3c8176470]:  %64 = add i64 %63, -8
	[0x55d3c8178cc0]:  %71 = add i64 %70, -8
	[0x55d3c81fa610]:  %8 = add i64 %7, -8
	}

[0x55d3c8208790]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55d3c8171400]:  %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x55d3c81fd240]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	[0x55d3c81fd410]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d3c8208808]:   %9 = inttoptr i64 %8 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c8208880]:   store i64 %5, i64* %9, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8208960]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8209030]:   %11 = add i64 %7, -40 {
	[0x55d3c81e0050]:  %11 = add i64 %7, -40
	}

[0x55d3c82090b0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8209170]:   %12 = icmp ult i64 %8, 32 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c82091d8]:   %13 = zext i1 %12 to i8 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c8209250]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c82093e8]:   %15 = trunc i64 %11 to i32 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c82094a0]:   %16 = and i32 %15, 255 {
	[0x55d3c8172fc0]:  %16 = and i32 %15, 255
	[0x55d3c8173a40]:  %88 = and i32 %87, 255
	}

[0x55d3c8209548]:   %18 = trunc i32 %17 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c8209600]:   %19 = and i8 %18, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	[0x55d3c81744e0]:  %25 = and i8 %24, 1
	[0x55d3c817f320]:  %96 = and i8 %95, 1
	}

[0x55d3c8209680]:   %20 = xor i8 %19, 1 {
	[0x55d3c8173710]:  %92 = xor i8 %91, 1
	[0x55d3c81e5820]:  %20 = xor i8 %19, 1
	}

[0x55d3c8209700]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8209890]:   %22 = xor i64 %8, %11 {
	[0x55d3c8174640]:  %34 = xor i64 %30, %33
	[0x55d3c817c6d0]:  %93 = xor i64 %84, %83
	[0x55d3c817f400]:  %102 = xor i64 %99, %101
	[0x55d3c81e5710]:  %22 = xor i64 %8, %11
	}

[0x55d3c8209910]:   %23 = lshr i64 %22, 4 {
	[0x55d3c8173e20]:  %94 = lshr i64 %93, 4
	[0x55d3c81e4720]:  %23 = lshr i64 %22, 4
	}

[0x55d3c8209978]:   %24 = trunc i64 %23 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c82099f0]:   %25 = and i8 %24, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	[0x55d3c81744e0]:  %25 = and i8 %24, 1
	[0x55d3c817f320]:  %96 = and i8 %95, 1
	}

[0x55d3c8209aa0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55d3c81ee9a0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55d3c8209b30]:   store i8 %25, i8* %26, align 1, !tbaa !1280 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8209ce0]:   %27 = icmp eq i64 %11, 0 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c8209d48]:   %28 = zext i1 %27 to i8 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c8209df0]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55d3c817e220]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55d3c8209e80]:   store i8 %28, i8* %29, align 1, !tbaa !1281 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c820a070]:   %30 = lshr i64 %11, 63 {
	[0x55d3c8173240]:  %33 = lshr i64 %8, 63
	[0x55d3c817e610]:  %101 = lshr i64 %83, 63
	[0x55d3c817ed20]:  %99 = lshr i64 %84, 63
	[0x55d3c81e5e80]:  %30 = lshr i64 %11, 63
	}

[0x55d3c820a0d8]:   %31 = trunc i64 %30 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c820a180]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55d3c81796d0]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55d3c820a210]:   store i8 %31, i8* %32, align 1, !tbaa !1282 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c820a3c0]:   %33 = lshr i64 %8, 63 {
	[0x55d3c8173240]:  %33 = lshr i64 %8, 63
	[0x55d3c817e610]:  %101 = lshr i64 %83, 63
	[0x55d3c817ed20]:  %99 = lshr i64 %84, 63
	[0x55d3c81e5e80]:  %30 = lshr i64 %11, 63
	}

[0x55d3c820a440]:   %34 = xor i64 %30, %33 {
	[0x55d3c8174640]:  %34 = xor i64 %30, %33
	[0x55d3c817c6d0]:  %93 = xor i64 %84, %83
	[0x55d3c817f400]:  %102 = xor i64 %99, %101
	[0x55d3c81e5710]:  %22 = xor i64 %8, %11
	}

[0x55d3c820a4c0]:   %35 = add nuw nsw i64 %34, %33 {
	[0x55d3c8181d60]:  %103 = add nuw nsw i64 %102, %99
	[0x55d3c81e6700]:  %35 = add nuw nsw i64 %34, %33
	}

[0x55d3c820a540]:   %36 = icmp eq i64 %35, 2 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c820a5a8]:   %37 = zext i1 %36 to i8 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c820a650]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55d3c81e4ac0]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55d3c820a6e0]:   store i8 %37, i8* %38, align 1, !tbaa !1283 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c820ab68]:   %42 = bitcast i64* %41 to double* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c820b640]:   store double 0.000000e+00, double* %42, align 1, !tbaa !1284 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c820bd10]:   %43 = add i64 %7, -12 {
	[0x55d3c8174b70]:  %43 = add i64 %7, -12
	}

[0x55d3c820bdd0]:   %44 = add i64 %10, 22 {
	[0x55d3c81e62c0]:  %44 = add i64 %10, 22
	}

[0x55d3c820be50]:   store i64 %44, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c821ded8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55d3c822b838]:  %67 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55d3c821ec28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x55d3c8235858]:  %73 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x55d3c822a7f8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c822a8b8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c8230bd0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x55d3c82bfe40]:  %41 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x55d3c82312b0]:   %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x55d3c81e05d0]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x55d3c8235f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55d3c81d1c80]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55d3c8236140]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55d3c81d3580]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55d3c823b080]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55d3c821a5f0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55d3c823b190]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55d3c82bb260]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55d3c81e9258]:   %EAX.i = bitcast %union.anon.5* %67 to i32*
From the pot matches of: [0x55d3c822a7f8]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x55d3c81a01a0]:   store i8 1, i8* %AL, align 1, !tbaa !1286


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81eae58]:   %77 = load i32, i32* %EAX.i, align 4


Removing: [0x55d3c81ead28]:   %AL.i = bitcast %union.anon.5* %67 to i8*
From the pot matches of: [0x55d3c822a8b8]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x55d3c81a0bb8]:   %77 = load i32, i32* %EAX, align 4


Uprime Matches: [0x55d3c81730c8]:   %46 = load i64, i64* %RBP.i, align 8
[0x55d3c8173f68]:   %70 = load i64, i64* %6, align 8
[0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
[0x55d3c81d2f78]:   %7 = load i64, i64* %6, align 8
[0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
[0x55d3c81e3d48]:   %50 = load i64, i64* %40, align 1
[0x55d3c81e7028]:   %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
[0x55d3c81e7158]:   %52 = load i64, i64* %RBP.i, align 8
[0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
[0x55d3c81e7cf8]:   %63 = load i64, i64* %6, align 8
[0x55d3c81e81b8]:   %57 = load i64, i64* %56, align 8
[0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
[0x55d3c81e9128]:   %75 = load i64, i64* %RBP.i, align 8
[0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
[0x55d3c81eae58]:   %77 = load i32, i32* %EAX.i, align 4
[0x55d3c81eb318]:   %83 = load i64, i64* %6, align 8
[0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
[0x55d3c81eba38]:   %80 = load i32, i32* %ECX.i9, align 4
[0x55d3c81ec3b8]:   %109 = load i64, i64* %108, align 8
[0x55d3c81ecf98]:   %112 = load i64, i64* %111, align 8
[0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8


Adj: [0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1


Removing: [0x55d3c81730c8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c8208880]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81757f0]:   %47 = add i64 %46, -16


Removing: [0x55d3c81e7158]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c8208880]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8175230]:   %53 = add i64 %52, -16


Removing: [0x55d3c81e9128]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c8208880]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Removing: [0x55d3c8173f68]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c8207518]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c820bd10]:   %43 = add i64 %7, -12


Uprime Matches: [0x55d3c8174b70]:   %43 = add i64 %7, -12


Adj: [0x55d3c8178cc0]:   %71 = add i64 %70, -8


Removing: [0x55d3c81e7cf8]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c8207518]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c820bd10]:   %43 = add i64 %7, -12


Uprime Matches: [0x55d3c8174b70]:   %43 = add i64 %7, -12


Adj: [0x55d3c8176470]:   %64 = add i64 %63, -8


Removing: [0x55d3c81eb318]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c8207518]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c820bd10]:   %43 = add i64 %7, -12


Uprime Matches: [0x55d3c8174b70]:   %43 = add i64 %7, -12


Adj: [0x55d3c8173cc0]:   %85 = icmp ugt i64 %83, -33
[0x55d3c8179a50]:   %84 = add i64 %83, 32
[0x55d3c817c6d0]:   %93 = xor i64 %84, %83
[0x55d3c817e610]:   %101 = lshr i64 %83, 63
[0x55d3c817f9f0]:   %107 = add i64 %83, 40
[0x55d3c81824b0]:   %113 = add i64 %83, 48


Removing: [0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55d3c820bdd0]:   %44 = add i64 %10, 22


Uprime Matches: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Adj: [0x55d3c81776d0]:   %69 = add i64 %66, 17
[0x55d3c8178f10]:   %68 = add i64 %66, -342


Removing: [0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55d3c820bdd0]:   %44 = add i64 %10, 22


Uprime Matches: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Adj: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c81766a0]:   %62 = add i64 %54, 10
[0x55d3c81768a0]:   %61 = add i64 %54, -76


Removing: [0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55d3c820bdd0]:   %44 = add i64 %10, 22


Uprime Matches: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Adj: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Removing: [0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55d3c820bdd0]:   %44 = add i64 %10, 22


Uprime Matches: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Adj: [0x55d3c8180660]:   %106 = add i64 %82, 7
[0x55d3c8182990]:   %110 = add i64 %82, 8


Removing: [0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55d3c820bdd0]:   %44 = add i64 %10, 22


Uprime Matches: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Adj: [0x55d3c8175650]:   %49 = add i64 %48, 5


Removing: [0x55d3c81dc568]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c81e4920]:   store i8 %31, i8* %32, align 1


Removing: [0x55d3c81e0b78]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c8172fc0]:   %16 = and i32 %15, 255


Removing: [0x55d3c81eb0b8]:   %87 = trunc i64 %84 to i32
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c8173a40]:   %88 = and i32 %87, 255


Removing: [0x55d3c81ecad8]:   %100 = trunc i64 %99 to i8
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c817e770]:   store i8 %100, i8* %32, align 1


Removing: [0x55d3c81744e0]:   %25 = and i8 %24, 1
From the pot matches of: [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime : [0x55d3c8209680]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55d3c8173710]:   %92 = xor i8 %91, 1
[0x55d3c81e5820]:   %20 = xor i8 %19, 1


Adj: [0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1


Removing: [0x55d3c817f320]:   %96 = and i8 %95, 1
From the pot matches of: [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime : [0x55d3c8209680]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55d3c8173710]:   %92 = xor i8 %91, 1
[0x55d3c81e5820]:   %20 = xor i8 %19, 1


Adj: [0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1


Removing: [0x55d3c81730c8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81757f0]:   %47 = add i64 %46, -16


Removing: [0x55d3c8173f68]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8178cc0]:   %71 = add i64 %70, -8


Removing: [0x55d3c81d2f78]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8174b70]:   %43 = add i64 %7, -12
[0x55d3c81e0050]:   %11 = add i64 %7, -40
[0x55d3c81fa610]:   %8 = add i64 %7, -8


Removing: [0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Removing: [0x55d3c81e7158]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8175230]:   %53 = add i64 %52, -16


Removing: [0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81776d0]:   %69 = add i64 %66, 17
[0x55d3c8178f10]:   %68 = add i64 %66, -342


Removing: [0x55d3c81e7cf8]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8176470]:   %64 = add i64 %63, -8


Removing: [0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c81766a0]:   %62 = add i64 %54, 10
[0x55d3c81768a0]:   %61 = add i64 %54, -76


Removing: [0x55d3c81e9128]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Removing: [0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Removing: [0x55d3c81eb318]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8173cc0]:   %85 = icmp ugt i64 %83, -33
[0x55d3c8179a50]:   %84 = add i64 %83, 32
[0x55d3c817c6d0]:   %93 = xor i64 %84, %83
[0x55d3c817e610]:   %101 = lshr i64 %83, 63
[0x55d3c817f9f0]:   %107 = add i64 %83, 40
[0x55d3c81824b0]:   %113 = add i64 %83, 48


Removing: [0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8180660]:   %106 = add i64 %82, 7
[0x55d3c8182990]:   %110 = add i64 %82, 8


Removing: [0x55d3c81eba38]:   %80 = load i32, i32* %ECX.i9, align 4
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c817f5f8]:   %81 = zext i32 %80 to i64


Removing: [0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c8170f60]:   store i64 %5, i64* %3, align 8
[0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c8172910]:   store i8 %20, i8* %21, align 1
[0x55d3c8173630]:   store i8 %92, i8* %21, align 1
[0x55d3c8173b60]:   store i8 %86, i8* %14, align 1
[0x55d3c8174230]:   store i8 %28, i8* %29, align 1
[0x55d3c8174cd0]:   store double 0.000000e+00, double* %42, align 1
[0x55d3c8174f80]:   store i64 %44, i64* %3, align 8
[0x55d3c81754f0]:   store i64 %49, i64* %3, align 8
[0x55d3c8175f10]:   store i32 0, i32* %45, align 4
[0x55d3c8176060]:   store i64 %55, i64* %3, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8176310]:   store i64 %62, i64* %65, align 8
[0x55d3c8177180]:   store i64 %61, i64* %3, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81773a0]:   store i64 %69, i64* %72, align 8
[0x55d3c8177600]:   store i64 %68, i64* %3, align 8
[0x55d3c8177820]:   store i8 1, i8* %AL.i, align 1
[0x55d3c8177bf0]:   store double 0.000000e+00, double* %60, align 1
[0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1
[0x55d3c8179290]:   store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
[0x55d3c817a210]:   store i64 %81, i64* %RAX.i, align 8
[0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4
[0x55d3c817be20]:   store i64 %78, i64* %3, align 8
[0x55d3c817c2c0]:   store i64 0, i64* %RCX.i, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c817e770]:   store i8 %100, i8* %32, align 1
[0x55d3c817ee80]:   store i8 %98, i8* %29, align 1
[0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1
[0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8
[0x55d3c817fb90]:   store i64 %106, i64* %3, align 8
[0x55d3c8181130]:   store i8 %105, i8* %38, align 1
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8
[0x55d3c8182650]:   store i64 %112, i64* %3, align 8
[0x55d3c81827b0]:   store i64 %110, i64* %3, align 8
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e4520]:   store i64 %4, i64* %9, align 8
[0x55d3c81e4920]:   store i8 %31, i8* %32, align 1
[0x55d3c81e5b50]:   store i8 %13, i8* %14, align 1
[0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1
[0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1
[0x55d3c81e65f0]:   store i8 %37, i8* %38, align 1
[0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c8175650]:   %49 = add i64 %48, 5


Removing: [0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c8200568]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c8200620]:   %47 = add i64 %46, -16


Uprime Matches: [0x55d3c8175230]:   %53 = add i64 %52, -16
[0x55d3c81757f0]:   %47 = add i64 %46, -16


Adj: [0x55d3c81e4520]:   store i64 %4, i64* %9, align 8


Removing: [0x55d3c81e9128]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c8200568]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c8200620]:   %47 = add i64 %46, -16


Uprime Matches: [0x55d3c8175230]:   %53 = add i64 %52, -16
[0x55d3c81757f0]:   %47 = add i64 %46, -16


Adj: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Removing: [0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime Matches: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c8175650]:   %49 = add i64 %48, 5
[0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Removing: [0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime Matches: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c8175650]:   %49 = add i64 %48, 5
[0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c81776d0]:   %69 = add i64 %66, 17
[0x55d3c8178f10]:   %68 = add i64 %66, -342


Removing: [0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime Matches: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c8175650]:   %49 = add i64 %48, 5
[0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c8180660]:   %106 = add i64 %82, 7
[0x55d3c8182990]:   %110 = add i64 %82, 8


Removing: [0x55d3c81e8548]:   %56 = inttoptr i64 %53 to i64*
From the pot matches of: [0x55d3c8200848]:   %51 = inttoptr i64 %47 to i64*


Uprime : [0x55d3c82008c0]:   store i64 %50, i64* %51, align 8


Uprime Matches: [0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Adj: [0x55d3c81e81b8]:   %57 = load i64, i64* %56, align 8


Removing: [0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c8200928]:   %52 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c82009a0]:   %53 = add i64 %52, -16


Uprime Matches: [0x55d3c8175230]:   %53 = add i64 %52, -16
[0x55d3c81757f0]:   %47 = add i64 %46, -16


Adj: [0x55d3c81e4520]:   store i64 %4, i64* %9, align 8


Removing: [0x55d3c81e9128]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c8200928]:   %52 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c82009a0]:   %53 = add i64 %52, -16


Uprime Matches: [0x55d3c8175230]:   %53 = add i64 %52, -16
[0x55d3c81757f0]:   %47 = add i64 %46, -16


Adj: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Removing: [0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x55d3c819f9b0]:   %62 = add i64 %54, 10


Uprime Matches: [0x55d3c81766a0]:   %62 = add i64 %54, 10


Adj: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Removing: [0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x55d3c819f9b0]:   %62 = add i64 %54, 10


Uprime Matches: [0x55d3c81766a0]:   %62 = add i64 %54, 10


Adj: [0x55d3c81776d0]:   %69 = add i64 %66, 17
[0x55d3c8178f10]:   %68 = add i64 %66, -342


Removing: [0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x55d3c819f9b0]:   %62 = add i64 %54, 10


Uprime Matches: [0x55d3c81766a0]:   %62 = add i64 %54, 10


Adj: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Removing: [0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x55d3c819f9b0]:   %62 = add i64 %54, 10


Uprime Matches: [0x55d3c81766a0]:   %62 = add i64 %54, 10


Adj: [0x55d3c8180660]:   %106 = add i64 %82, 7
[0x55d3c8182990]:   %110 = add i64 %82, 8


Removing: [0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x55d3c819f9b0]:   %62 = add i64 %54, 10


Uprime Matches: [0x55d3c81766a0]:   %62 = add i64 %54, 10


Adj: [0x55d3c8175650]:   %49 = add i64 %48, 5


Removing: [0x55d3c81e1d88]:   %51 = inttoptr i64 %47 to i64*
From the pot matches of: [0x55d3c819f4b8]:   %56 = inttoptr i64 %53 to i64*


Uprime : [0x55d3c819f518]:   %57 = load i64, i64* %56, align 8


Uprime Matches: [0x55d3c81730c8]:   %46 = load i64, i64* %RBP.i, align 8
[0x55d3c8173f68]:   %70 = load i64, i64* %6, align 8
[0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
[0x55d3c81d2f78]:   %7 = load i64, i64* %6, align 8
[0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
[0x55d3c81e3d48]:   %50 = load i64, i64* %40, align 1
[0x55d3c81e7028]:   %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
[0x55d3c81e7158]:   %52 = load i64, i64* %RBP.i, align 8
[0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
[0x55d3c81e7cf8]:   %63 = load i64, i64* %6, align 8
[0x55d3c81e81b8]:   %57 = load i64, i64* %56, align 8
[0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
[0x55d3c81e9128]:   %75 = load i64, i64* %RBP.i, align 8
[0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
[0x55d3c81eae58]:   %77 = load i32, i32* %EAX.i, align 4
[0x55d3c81eb318]:   %83 = load i64, i64* %6, align 8
[0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
[0x55d3c81eba38]:   %80 = load i32, i32* %ECX.i9, align 4
[0x55d3c81ec3b8]:   %109 = load i64, i64* %108, align 8
[0x55d3c81ecf98]:   %112 = load i64, i64* %111, align 8
[0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8


Adj: [0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Removing: [0x55d3c81eb318]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c819fa18]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c819fa90]:   %64 = add i64 %63, -8


Uprime Matches: [0x55d3c8176470]:   %64 = add i64 %63, -8
[0x55d3c8178cc0]:   %71 = add i64 %70, -8
[0x55d3c81fa610]:   %8 = add i64 %7, -8


Adj: [0x55d3c8173cc0]:   %85 = icmp ugt i64 %83, -33
[0x55d3c8179a50]:   %84 = add i64 %83, 32
[0x55d3c817c6d0]:   %93 = xor i64 %84, %83
[0x55d3c817e610]:   %101 = lshr i64 %83, 63
[0x55d3c817f9f0]:   %107 = add i64 %83, 40
[0x55d3c81824b0]:   %113 = add i64 %83, 48


Removing: [0x55d3c81fa610]:   %8 = add i64 %7, -8
From the pot matches of: [0x55d3c819fa90]:   %64 = add i64 %63, -8


Uprime : [0x55d3c819fbf0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8


Adj: [0x55d3c8173240]:   %33 = lshr i64 %8, 63
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e5710]:   %22 = xor i64 %8, %11
[0x55d3c81e5c60]:   %12 = icmp ult i64 %8, 32
[0x55d3c8229488]:   %9 = inttoptr i64 %8 to i64*


Removing: [0x55d3c81ea738]:   %72 = inttoptr i64 %71 to i64*
From the pot matches of: [0x55d3c819faf8]:   %65 = inttoptr i64 %64 to i64*


Uprime : [0x55d3c819fb70]:   store i64 %62, i64* %65, align 8


Uprime Matches: [0x55d3c8176310]:   store i64 %62, i64* %65, align 8


Adj: [0x55d3c81773a0]:   store i64 %69, i64* %72, align 8


Removing: [0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0430]:   %69 = add i64 %67, 17


Uprime Matches: [0x55d3c81776d0]:   %69 = add i64 %66, 17


Adj: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Removing: [0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0430]:   %69 = add i64 %67, 17


Uprime Matches: [0x55d3c81776d0]:   %69 = add i64 %66, 17


Adj: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c81766a0]:   %62 = add i64 %54, 10
[0x55d3c81768a0]:   %61 = add i64 %54, -76


Removing: [0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0430]:   %69 = add i64 %67, 17


Uprime Matches: [0x55d3c81776d0]:   %69 = add i64 %66, 17


Adj: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Removing: [0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0430]:   %69 = add i64 %67, 17


Uprime Matches: [0x55d3c81776d0]:   %69 = add i64 %66, 17


Adj: [0x55d3c8180660]:   %106 = add i64 %82, 7
[0x55d3c8182990]:   %110 = add i64 %82, 8


Removing: [0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0430]:   %69 = add i64 %67, 17


Uprime Matches: [0x55d3c81776d0]:   %69 = add i64 %66, 17


Adj: [0x55d3c8175650]:   %49 = add i64 %48, 5


Removing: [0x55d3c81eb318]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c81a0498]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c81a0510]:   %71 = add i64 %70, -8


Uprime Matches: [0x55d3c8176470]:   %64 = add i64 %63, -8
[0x55d3c8178cc0]:   %71 = add i64 %70, -8
[0x55d3c81fa610]:   %8 = add i64 %7, -8


Adj: [0x55d3c8173cc0]:   %85 = icmp ugt i64 %83, -33
[0x55d3c8179a50]:   %84 = add i64 %83, 32
[0x55d3c817c6d0]:   %93 = xor i64 %84, %83
[0x55d3c817e610]:   %101 = lshr i64 %83, 63
[0x55d3c817f9f0]:   %107 = add i64 %83, 40
[0x55d3c81824b0]:   %113 = add i64 %83, 48


Removing: [0x55d3c81fa610]:   %8 = add i64 %7, -8
From the pot matches of: [0x55d3c81a0510]:   %71 = add i64 %70, -8


Uprime : [0x55d3c81a0670]:   store i64 %71, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x55d3c81727c0]:   store i64 %11, i64* %6, align 8
[0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c817c410]:   store i64 %84, i64* %6, align 8
[0x55d3c8181ec0]:   store i64 %107, i64* %6, align 8
[0x55d3c8182350]:   store i64 %113, i64* %6, align 8


Adj: [0x55d3c8173240]:   %33 = lshr i64 %8, 63
[0x55d3c81e2940]:   store i64 %8, i64* %RBP.i, align 8
[0x55d3c81e5710]:   %22 = xor i64 %8, %11
[0x55d3c81e5c60]:   %12 = icmp ult i64 %8, 32
[0x55d3c8229488]:   %9 = inttoptr i64 %8 to i64*


Removing: [0x55d3c81e7968]:   %65 = inttoptr i64 %64 to i64*
From the pot matches of: [0x55d3c81a0578]:   %72 = inttoptr i64 %71 to i64*


Uprime : [0x55d3c81a05f0]:   store i64 %69, i64* %72, align 8


Uprime Matches: [0x55d3c81773a0]:   store i64 %69, i64* %72, align 8


Adj: [0x55d3c8176310]:   store i64 %62, i64* %65, align 8


Removing: [0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime Matches: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c8175650]:   %49 = add i64 %48, 5
[0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Removing: [0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime Matches: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c8175650]:   %49 = add i64 %48, 5
[0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c81776d0]:   %69 = add i64 %66, 17
[0x55d3c8178f10]:   %68 = add i64 %66, -342


Removing: [0x55d3c81eb6a8]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime Matches: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c8175650]:   %49 = add i64 %48, 5
[0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c8180660]:   %106 = add i64 %82, 7
[0x55d3c8182990]:   %110 = add i64 %82, 8


Removing: [0x55d3c81730c8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c81a0a98]:   %75 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c81a0b50]:   %76 = add i64 %75, -20


Uprime Matches: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Adj: [0x55d3c81757f0]:   %47 = add i64 %46, -16


Removing: [0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c81a0a98]:   %75 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c81a0b50]:   %76 = add i64 %75, -20


Uprime Matches: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Adj: [0x55d3c81e4520]:   store i64 %4, i64* %9, align 8


Removing: [0x55d3c81e7158]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c81a0a98]:   %75 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c81a0b50]:   %76 = add i64 %75, -20


Uprime Matches: [0x55d3c817c0e0]:   %76 = add i64 %75, -20


Adj: [0x55d3c8175230]:   %53 = add i64 %52, -16


Removing: [0x55d3c81e2578]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a4650]:   %110 = add i64 %82, 8


Uprime Matches: [0x55d3c8182990]:   %110 = add i64 %82, 8


Adj: [0x55d3c81e62c0]:   %44 = add i64 %10, 22


Removing: [0x55d3c81e7708]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a4650]:   %110 = add i64 %82, 8


Uprime Matches: [0x55d3c8182990]:   %110 = add i64 %82, 8


Adj: [0x55d3c81776d0]:   %69 = add i64 %66, 17
[0x55d3c8178f10]:   %68 = add i64 %66, -342


Removing: [0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a4650]:   %110 = add i64 %82, 8


Uprime Matches: [0x55d3c8182990]:   %110 = add i64 %82, 8


Adj: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c81766a0]:   %62 = add i64 %54, 10
[0x55d3c81768a0]:   %61 = add i64 %54, -76


Removing: [0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a4650]:   %110 = add i64 %82, 8


Uprime Matches: [0x55d3c8182990]:   %110 = add i64 %82, 8


Adj: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Removing: [0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a4650]:   %110 = add i64 %82, 8


Uprime Matches: [0x55d3c8182990]:   %110 = add i64 %82, 8


Adj: [0x55d3c8175650]:   %49 = add i64 %48, 5


Removing: [0x55d3c8173f68]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c81a0f98]:   %83 = load i64, i64* %RSP, align 8


Uprime : [0x55d3c81a48d0]:   %113 = add i64 %83, 48


Uprime Matches: [0x55d3c81824b0]:   %113 = add i64 %83, 48


Adj: [0x55d3c8178cc0]:   %71 = add i64 %70, -8


Removing: [0x55d3c81d2f78]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c81a0f98]:   %83 = load i64, i64* %RSP, align 8


Uprime : [0x55d3c81a48d0]:   %113 = add i64 %83, 48


Uprime Matches: [0x55d3c81824b0]:   %113 = add i64 %83, 48


Adj: [0x55d3c8174b70]:   %43 = add i64 %7, -12
[0x55d3c81e0050]:   %11 = add i64 %7, -40
[0x55d3c81fa610]:   %8 = add i64 %7, -8


Removing: [0x55d3c81e7cf8]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c81a0f98]:   %83 = load i64, i64* %RSP, align 8


Uprime : [0x55d3c81a48d0]:   %113 = add i64 %83, 48


Uprime Matches: [0x55d3c81824b0]:   %113 = add i64 %83, 48


Adj: [0x55d3c8176470]:   %64 = add i64 %63, -8


Removing: [0x55d3c81dc568]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c81e4920]:   store i8 %31, i8* %32, align 1


Removing: [0x55d3c81e0b78]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c8172fc0]:   %16 = and i32 %15, 255


Removing: [0x55d3c81eb0b8]:   %87 = trunc i64 %84 to i32
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c8173a40]:   %88 = and i32 %87, 255


Removing: [0x55d3c81ecad8]:   %100 = trunc i64 %99 to i8
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1
[0x55d3c81744e0]:   %25 = and i8 %24, 1
[0x55d3c817f320]:   %96 = and i8 %95, 1


Adj: [0x55d3c817e770]:   store i8 %100, i8* %32, align 1


Removing: [0x55d3c81744e0]:   %25 = and i8 %24, 1
From the pot matches of: [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime : [0x55d3c81a1b80]:   %92 = xor i8 %91, 1


Uprime Matches: [0x55d3c8173710]:   %92 = xor i8 %91, 1
[0x55d3c81e5820]:   %20 = xor i8 %19, 1


Adj: [0x55d3c81e60a0]:   store i8 %25, i8* %26, align 1


Removing: [0x55d3c817f320]:   %96 = and i8 %95, 1
From the pot matches of: [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime : [0x55d3c81a1b80]:   %92 = xor i8 %91, 1


Uprime Matches: [0x55d3c8173710]:   %92 = xor i8 %91, 1
[0x55d3c81e5820]:   %20 = xor i8 %19, 1


Adj: [0x55d3c817f1c0]:   store i8 %96, i8* %26, align 1

Round: 1

Removing: [0x55d3c81ecd38]:   %95 = trunc i64 %94 to i8
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1


Adj: [0x55d3c817f320]:   %96 = and i8 %95, 1


Removing: [0x55d3c82165e8]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1


Adj: [0x55d3c81744e0]:   %25 = and i8 %24, 1


Removing: [0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1


Adj: [0x55d3c81e4520]:   store i64 %4, i64* %9, align 8


Removing: [0x55d3c81e3d48]:   %50 = load i64, i64* %40, align 1
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1


Adj: [0x55d3c81e6a30]:   store i64 %50, i64* %51, align 8


Removing: [0x55d3c81e81b8]:   %57 = load i64, i64* %56, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1


Adj: [0x55d3c8177eb0]:   store i64 %57, i64* %58, align 1


Removing: [0x55d3c81eae58]:   %77 = load i32, i32* %EAX.i, align 4
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1


Adj: [0x55d3c817bcc0]:   store i32 %77, i32* %79, align 4


Removing: [0x55d3c81ec3b8]:   %109 = load i64, i64* %108, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1


Adj: [0x55d3c817f890]:   store i64 %109, i64* %RBP.i, align 8


Removing: [0x55d3c81ecf98]:   %112 = load i64, i64* %111, align 8
From the pot matches of: [0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284


Uprime Matches: [0x55d3c81e64e0]:   store i64 %39, i64* %40, align 1


Adj: [0x55d3c8182650]:   store i64 %112, i64* %3, align 8


Removing: [0x55d3c8175230]:   %53 = add i64 %52, -16
From the pot matches of: [0x55d3c8200620]:   %47 = add i64 %46, -16


Uprime : [0x55d3c8200848]:   %51 = inttoptr i64 %47 to i64*


Uprime Matches: [0x55d3c81e1d88]:   %51 = inttoptr i64 %47 to i64*


Adj: [0x55d3c81e8548]:   %56 = inttoptr i64 %53 to i64*


Removing: [0x55d3c81757f0]:   %47 = add i64 %46, -16
From the pot matches of: [0x55d3c82009a0]:   %53 = add i64 %52, -16


Uprime : [0x55d3c819f4b8]:   %56 = inttoptr i64 %53 to i64*


Uprime Matches: [0x55d3c81e8548]:   %56 = inttoptr i64 %53 to i64*


Adj: [0x55d3c81e1d88]:   %51 = inttoptr i64 %47 to i64*


Removing: [0x55d3c81d2f78]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c819fa18]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c819fa90]:   %64 = add i64 %63, -8


Uprime Matches: [0x55d3c8176470]:   %64 = add i64 %63, -8
[0x55d3c8178cc0]:   %71 = add i64 %70, -8


Adj: [0x55d3c8174b70]:   %43 = add i64 %7, -12
[0x55d3c81e0050]:   %11 = add i64 %7, -40
[0x55d3c81fa610]:   %8 = add i64 %7, -8


Removing: [0x55d3c8178cc0]:   %71 = add i64 %70, -8
From the pot matches of: [0x55d3c819fa90]:   %64 = add i64 %63, -8


Uprime : [0x55d3c819faf8]:   %65 = inttoptr i64 %64 to i64*


Uprime Matches: [0x55d3c81e7968]:   %65 = inttoptr i64 %64 to i64*


Adj: [0x55d3c8177290]:   store i64 %71, i64* %6, align 8
[0x55d3c81ea738]:   %72 = inttoptr i64 %71 to i64*


Removing: [0x55d3c81d2f78]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c81a0498]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c81a0510]:   %71 = add i64 %70, -8


Uprime Matches: [0x55d3c8176470]:   %64 = add i64 %63, -8
[0x55d3c8178cc0]:   %71 = add i64 %70, -8


Adj: [0x55d3c8174b70]:   %43 = add i64 %7, -12
[0x55d3c81e0050]:   %11 = add i64 %7, -40
[0x55d3c81fa610]:   %8 = add i64 %7, -8


Removing: [0x55d3c8176470]:   %64 = add i64 %63, -8
From the pot matches of: [0x55d3c81a0510]:   %71 = add i64 %70, -8


Uprime : [0x55d3c81a0578]:   %72 = inttoptr i64 %71 to i64*


Uprime Matches: [0x55d3c81ea738]:   %72 = inttoptr i64 %71 to i64*


Adj: [0x55d3c81761c0]:   store i64 %64, i64* %6, align 8
[0x55d3c81e7968]:   %65 = inttoptr i64 %64 to i64*


Removing: [0x55d3c81ecd38]:   %95 = trunc i64 %94 to i8
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1


Adj: [0x55d3c817f320]:   %96 = and i8 %95, 1


Removing: [0x55d3c82165e8]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1
[0x55d3c81738f0]:   %91 = and i8 %90, 1


Adj: [0x55d3c81744e0]:   %25 = and i8 %24, 1

Round: 2

Removing: [0x55d3c81e7158]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c8200568]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c8200620]:   %47 = add i64 %46, -16


Uprime Matches: [0x55d3c81757f0]:   %47 = add i64 %46, -16


Adj: [0x55d3c8175230]:   %53 = add i64 %52, -16


Removing: [0x55d3c81730c8]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55d3c8200928]:   %52 = load i64, i64* %RBP, align 8


Uprime : [0x55d3c82009a0]:   %53 = add i64 %52, -16


Uprime Matches: [0x55d3c8175230]:   %53 = add i64 %52, -16


Adj: [0x55d3c81757f0]:   %47 = add i64 %46, -16


Removing: [0x55d3c8173f68]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c819fa18]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c819fa90]:   %64 = add i64 %63, -8


Uprime Matches: [0x55d3c8176470]:   %64 = add i64 %63, -8


Adj: [0x55d3c8178cc0]:   %71 = add i64 %70, -8


Removing: [0x55d3c81e7cf8]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x55d3c81a0498]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x55d3c81a0510]:   %71 = add i64 %70, -8


Uprime Matches: [0x55d3c8178cc0]:   %71 = add i64 %70, -8


Adj: [0x55d3c8176470]:   %64 = add i64 %63, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x55d3c815a0d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55d3c81d5c40]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55d3c8194b10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55d3c81d6190]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55d3c819f3d0]:   %55 = add i64 %54, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	}

[0x55d3c819f450]:   store i64 %55, i64* %PC, align 8 {
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	}

[0x55d3c819f4b8]:   %56 = inttoptr i64 %53 to i64* {
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	}

[0x55d3c819f518]:   %57 = load i64, i64* %56, align 8 {
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	}

[0x55d3c819f620]:   %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0 {
	[0x55d3c8151c40]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
	}

[0x55d3c819f6b0]:   store i64 %57, i64* %58, align 1, !tbaa !1284 {
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	}

[0x55d3c819f7c0]:   %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x55d3c8152480]:  %59 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x55d3c819f838]:   %60 = bitcast i64* %59 to double* {
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	}

[0x55d3c819f8b0]:   store double 0.000000e+00, double* %60, align 1, !tbaa !1284 {
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	}

[0x55d3c819f930]:   %61 = add i64 %54, -76 {
	[0x55d3c81768a0]:  %61 = add i64 %54, -76
	}

[0x55d3c819f9b0]:   %62 = add i64 %54, 10 {
	[0x55d3c81766a0]:  %62 = add i64 %54, 10
	}

[0x55d3c819fa18]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	}

[0x55d3c819fa90]:   %64 = add i64 %63, -8 {
	[0x55d3c8176470]:  %64 = add i64 %63, -8
	}

[0x55d3c819faf8]:   %65 = inttoptr i64 %64 to i64* {
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	}

[0x55d3c819fb70]:   store i64 %62, i64* %65, align 8 {
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	}

[0x55d3c819fbf0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	}

[0x55d3c819fc70]:   store i64 %61, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	}

[0x55d3c819ff10]:   %66 = tail call %struct.Memory* @sub_400500_fun(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2) {
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	}

[0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8 {
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	}

[0x55d3c81a0120]:   store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16), i64* %RDI, align 8, !tbaa !1261 {
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	}

[0x55d3c81a01a0]:   store i8 1, i8* %AL, align 1, !tbaa !1286 {
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	}

[0x55d3c81a0370]:   %68 = add i64 %67, -342 {
	[0x55d3c8178f10]:  %68 = add i64 %66, -342
	}

[0x55d3c81a0430]:   %69 = add i64 %67, 17 {
	[0x55d3c81776d0]:  %69 = add i64 %66, 17
	}

[0x55d3c81a0498]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	}

[0x55d3c81a0510]:   %71 = add i64 %70, -8 {
	[0x55d3c8178cc0]:  %71 = add i64 %70, -8
	}

[0x55d3c81a0578]:   %72 = inttoptr i64 %71 to i64* {
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	}

[0x55d3c81a05f0]:   store i64 %69, i64* %72, align 8 {
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	}

[0x55d3c81a0670]:   store i64 %71, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	}

[0x55d3c81a06f0]:   store i64 %68, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	}

[0x55d3c81a08f8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66) {
	[0x55d3c8171400]:  %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	}

[0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8 {
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c81a0a30]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	}

[0x55d3c81a0a98]:   %75 = load i64, i64* %RBP, align 8 {
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c81a0b50]:   %76 = add i64 %75, -20 {
	[0x55d3c817c0e0]:  %76 = add i64 %75, -20
	}

[0x55d3c81a0bb8]:   %77 = load i32, i32* %EAX, align 4 {
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	}

[0x55d3c81a0c30]:   %78 = add i64 %74, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	[0x55d3c8175650]:  %49 = add i64 %48, 5
	[0x55d3c817bf80]:  %78 = add i64 %74, 5
	}

[0x55d3c81a0cb0]:   store i64 %78, i64* %PC, align 8 {
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	}

[0x55d3c81a0d18]:   %79 = inttoptr i64 %76 to i32* {
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	}

[0x55d3c81a0d90]:   store i32 %77, i32* %79, align 4 {
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	}

[0x55d3c81a0df8]:   %80 = load i32, i32* %ECX, align 4 {
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	}

[0x55d3c81a0e58]:   %81 = zext i32 %80 to i64 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	}

[0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8 {
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	}

[0x55d3c81a0f30]:   store i64 %81, i64* %RAX, align 8, !tbaa !1261 {
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	}

[0x55d3c81a0f98]:   %83 = load i64, i64* %RSP, align 8 {
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	}

[0x55d3c81a1010]:   %84 = add i64 %83, 32 {
	[0x55d3c8179a50]:  %84 = add i64 %83, 32
	}

[0x55d3c81a1090]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	}

[0x55d3c81a1150]:   %85 = icmp ugt i64 %83, -33 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	}

[0x55d3c81a11b8]:   %86 = zext i1 %85 to i8 {
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	}

[0x55d3c81a1230]:   store i8 %86, i8* %14, align 1, !tbaa !1265 {
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	}

[0x55d3c81a18a8]:   %87 = trunc i64 %84 to i32 {
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	}

[0x55d3c81a1920]:   %88 = and i32 %87, 255 {
	[0x55d3c8173a40]:  %88 = and i32 %87, 255
	}

[0x55d3c81a19c0]:   %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9 {
	[0x55d3c81fd240]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8 {
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	}

[0x55d3c81a1b00]:   %91 = and i8 %90, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	}

[0x55d3c81a1b80]:   %92 = xor i8 %91, 1 {
	[0x55d3c8173710]:  %92 = xor i8 %91, 1
	[0x55d3c81e5820]:  %20 = xor i8 %19, 1
	}

[0x55d3c81a1c00]:   store i8 %92, i8* %21, align 1, !tbaa !1279 {
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	}

[0x55d3c81a2290]:   %93 = xor i64 %84, %83 {
	[0x55d3c817c6d0]:  %93 = xor i64 %84, %83
	}

[0x55d3c81a2310]:   %94 = lshr i64 %93, 4 {
	[0x55d3c8173e20]:  %94 = lshr i64 %93, 4
	}

[0x55d3c81a2378]:   %95 = trunc i64 %94 to i8 {
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	}

[0x55d3c81a23f0]:   %96 = and i8 %95, 1 {
	[0x55d3c817f320]:  %96 = and i8 %95, 1
	}

[0x55d3c81a2470]:   store i8 %96, i8* %26, align 1, !tbaa !1280 {
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	}

[0x55d3c81a2b00]:   %97 = icmp eq i64 %84, 0 {
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	}

[0x55d3c81a2b68]:   %98 = zext i1 %97 to i8 {
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	}

[0x55d3c81a2be0]:   store i8 %98, i8* %29, align 1, !tbaa !1281 {
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	}

[0x55d3c81a3270]:   %99 = lshr i64 %84, 63 {
	[0x55d3c817ed20]:  %99 = lshr i64 %84, 63
	}

[0x55d3c81a32d8]:   %100 = trunc i64 %99 to i8 {
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	}

[0x55d3c81a3350]:   store i8 %100, i8* %32, align 1, !tbaa !1282 {
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	}

[0x55d3c81a39e0]:   %101 = lshr i64 %83, 63 {
	[0x55d3c817e610]:  %101 = lshr i64 %83, 63
	}

[0x55d3c81a3a60]:   %102 = xor i64 %99, %101 {
	[0x55d3c817f400]:  %102 = xor i64 %99, %101
	}

[0x55d3c81a3ae0]:   %103 = add nuw nsw i64 %102, %99 {
	[0x55d3c8181d60]:  %103 = add nuw nsw i64 %102, %99
	}

[0x55d3c81a3b60]:   %104 = icmp eq i64 %103, 2 {
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	}

[0x55d3c81a3bc8]:   %105 = zext i1 %104 to i8 {
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	}

[0x55d3c81a3c40]:   store i8 %105, i8* %38, align 1, !tbaa !1283 {
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	}

[0x55d3c81a42d0]:   %106 = add i64 %82, 7 {
	[0x55d3c8180660]:  %106 = add i64 %82, 7
	}

[0x55d3c81a4350]:   store i64 %106, i64* %PC, align 8 {
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	}

[0x55d3c81a4410]:   %107 = add i64 %83, 40 {
	[0x55d3c817f9f0]:  %107 = add i64 %83, 40
	}

[0x55d3c81a4478]:   %108 = inttoptr i64 %84 to i64* {
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	}

[0x55d3c81a44d8]:   %109 = load i64, i64* %108, align 8 {
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	}

[0x55d3c81a4550]:   store i64 %109, i64* %RBP, align 8, !tbaa !1261 {
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	}

[0x55d3c81a45d0]:   store i64 %107, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	}

[0x55d3c81a4650]:   %110 = add i64 %82, 8 {
	[0x55d3c8182990]:  %110 = add i64 %82, 8
	}

[0x55d3c81a46d0]:   store i64 %110, i64* %PC, align 8 {
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	}

[0x55d3c81a4738]:   %111 = inttoptr i64 %107 to i64* {
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	}

[0x55d3c81a4798]:   %112 = load i64, i64* %111, align 8 {
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	}

[0x55d3c81a4810]:   store i64 %112, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	}

[0x55d3c81a48d0]:   %113 = add i64 %83, 48 {
	[0x55d3c81824b0]:  %113 = add i64 %83, 48
	}

[0x55d3c81a4950]:   store i64 %113, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	}

[0x55d3c81a49b8]:   ret %struct.Memory* %73 {
	[0x55d3c81eea88]:  ret %struct.Memory.32* %call2_400562
	}

[0x55d3c8200488]:   %45 = inttoptr i64 %43 to i32* {
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	}

[0x55d3c8200500]:   store i32 0, i32* %45, align 4 {
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	}

[0x55d3c8200568]:   %46 = load i64, i64* %RBP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c8200620]:   %47 = add i64 %46, -16 {
	[0x55d3c81757f0]:  %47 = add i64 %46, -16
	}

[0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8 {
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8200700]:   %49 = add i64 %48, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	[0x55d3c8175650]:  %49 = add i64 %48, 5
	[0x55d3c817bf80]:  %78 = add i64 %74, 5
	}

[0x55d3c8200780]:   store i64 %49, i64* %PC, align 8 {
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	}

[0x55d3c82007e8]:   %50 = load i64, i64* %40, align 1 {
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	}

[0x55d3c8200848]:   %51 = inttoptr i64 %47 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	}

[0x55d3c82008c0]:   store i64 %50, i64* %51, align 8 {
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8200928]:   %52 = load i64, i64* %RBP, align 8 {
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c82009a0]:   %53 = add i64 %52, -16 {
	[0x55d3c8175230]:  %53 = add i64 %52, -16
	}

[0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8 {
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	}

[0x55d3c8206eb0]: %struct.State* %0 {
	[0x55d3c81763c0]:%struct.State.1* %0
	}

[0x55d3c8206ef0]: i64 %1 {
	[0x55d3c8176950]:i64 %1
	}

[0x55d3c8206f30]: %struct.Memory* %2 {
	[0x55d3c8175700]:%struct.Memory.32* %2
	}

[0x55d3c8207158]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	}

[0x55d3c8207208]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55d3c814bf78]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	}

[0x55d3c82072c8]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x55d3c81d9558]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	}

[0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c8207430]:   %6 = add i64 %1, 1 {
	[0x55d3c81710b0]:  %5 = add i64 %1, 1
	}

[0x55d3c82074b0]:   store i64 %6, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	}

[0x55d3c8207518]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	}

[0x55d3c8208710]:   %8 = add i64 %7, -8 {
	[0x55d3c81fa610]:  %8 = add i64 %7, -8
	}

[0x55d3c8208790]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55d3c81fd410]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d3c8208808]:   %9 = inttoptr i64 %8 to i64* {
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c8208880]:   store i64 %5, i64* %9, align 8 {
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	}

[0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8 {
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	}

[0x55d3c8208960]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55d3c8209030]:   %11 = add i64 %7, -40 {
	[0x55d3c81e0050]:  %11 = add i64 %7, -40
	}

[0x55d3c82090b0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	}

[0x55d3c8209170]:   %12 = icmp ult i64 %8, 32 {
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c82091d8]:   %13 = zext i1 %12 to i8 {
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	}

[0x55d3c8209250]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	}

[0x55d3c82093e8]:   %15 = trunc i64 %11 to i32 {
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	}

[0x55d3c82094a0]:   %16 = and i32 %15, 255 {
	[0x55d3c8172fc0]:  %16 = and i32 %15, 255
	}

[0x55d3c8209548]:   %18 = trunc i32 %17 to i8 {
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	}

[0x55d3c8209600]:   %19 = and i8 %18, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	}

[0x55d3c8209680]:   %20 = xor i8 %19, 1 {
	[0x55d3c8173710]:  %92 = xor i8 %91, 1
	[0x55d3c81e5820]:  %20 = xor i8 %19, 1
	}

[0x55d3c8209700]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	}

[0x55d3c8209890]:   %22 = xor i64 %8, %11 {
	[0x55d3c81e5710]:  %22 = xor i64 %8, %11
	}

[0x55d3c8209910]:   %23 = lshr i64 %22, 4 {
	[0x55d3c81e4720]:  %23 = lshr i64 %22, 4
	}

[0x55d3c8209978]:   %24 = trunc i64 %23 to i8 {
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c82099f0]:   %25 = and i8 %24, 1 {
	[0x55d3c81744e0]:  %25 = and i8 %24, 1
	}

[0x55d3c8209aa0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55d3c81ee9a0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55d3c8209b30]:   store i8 %25, i8* %26, align 1, !tbaa !1280 {
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	}

[0x55d3c8209ce0]:   %27 = icmp eq i64 %11, 0 {
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	}

[0x55d3c8209d48]:   %28 = zext i1 %27 to i8 {
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c8209df0]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55d3c817e220]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55d3c8209e80]:   store i8 %28, i8* %29, align 1, !tbaa !1281 {
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	}

[0x55d3c820a070]:   %30 = lshr i64 %11, 63 {
	[0x55d3c81e5e80]:  %30 = lshr i64 %11, 63
	}

[0x55d3c820a0d8]:   %31 = trunc i64 %30 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	}

[0x55d3c820a180]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55d3c81796d0]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55d3c820a210]:   store i8 %31, i8* %32, align 1, !tbaa !1282 {
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	}

[0x55d3c820a3c0]:   %33 = lshr i64 %8, 63 {
	[0x55d3c8173240]:  %33 = lshr i64 %8, 63
	}

[0x55d3c820a440]:   %34 = xor i64 %30, %33 {
	[0x55d3c8174640]:  %34 = xor i64 %30, %33
	}

[0x55d3c820a4c0]:   %35 = add nuw nsw i64 %34, %33 {
	[0x55d3c81e6700]:  %35 = add nuw nsw i64 %34, %33
	}

[0x55d3c820a540]:   %36 = icmp eq i64 %35, 2 {
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	}

[0x55d3c820a5a8]:   %37 = zext i1 %36 to i8 {
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	}

[0x55d3c820a650]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55d3c81e4ac0]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55d3c820a6e0]:   store i8 %37, i8* %38, align 1, !tbaa !1283 {
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	}

[0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8 {
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	}

[0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284 {
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	}

[0x55d3c820ab68]:   %42 = bitcast i64* %41 to double* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	}

[0x55d3c820b640]:   store double 0.000000e+00, double* %42, align 1, !tbaa !1284 {
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	}

[0x55d3c820bd10]:   %43 = add i64 %7, -12 {
	[0x55d3c8174b70]:  %43 = add i64 %7, -12
	}

[0x55d3c820bdd0]:   %44 = add i64 %10, 22 {
	[0x55d3c81e62c0]:  %44 = add i64 %10, 22
	}

[0x55d3c820be50]:   store i64 %44, i64* %PC, align 8 {
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	}

[0x55d3c821ded8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55d3c822b838]:  %67 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55d3c821ec28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x55d3c8235858]:  %73 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x55d3c822a7f8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c822a8b8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x55d3c8230bd0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x55d3c82bfe40]:  %41 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x55d3c82312b0]:   %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x55d3c81e05d0]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x55d3c8235f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55d3c81d1c80]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55d3c8236140]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55d3c81d3580]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55d3c823b080]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55d3c821a5f0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55d3c823b190]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55d3c82bb260]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0

BB match:%block_400530 --> %entry
Corresponding instructions:[0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8
[0x55d3c81d2da8]:   %4 = load i64, i64* %RBP.i, align 8
Retrieved BB Matches...
[0x55d3c8206f70]: block_400530 {
	[0x55d3c81f5d00]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x55d3c8173710]:   %92 = xor i8 %91, 1
From the pot matches of: [0x55d3c8209680]:   %20 = xor i8 %19, 1


Uprime : [0x55d3c8209700]:   store i8 %20, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x55d3c8172910]:   store i8 %20, i8* %21, align 1


Adj: [0x55d3c8173630]:   store i8 %92, i8* %21, align 1


Removing: [0x55d3c81750e0]:   %55 = add i64 %54, 5
From the pot matches of: [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime : [0x55d3c8200780]:   store i64 %49, i64* %PC, align 8


Uprime Matches: [0x55d3c81754f0]:   store i64 %49, i64* %3, align 8


Adj: [0x55d3c8176060]:   store i64 %55, i64* %3, align 8


Removing: [0x55d3c817bf80]:   %78 = add i64 %74, 5
From the pot matches of: [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime : [0x55d3c8200780]:   store i64 %49, i64* %PC, align 8


Uprime Matches: [0x55d3c81754f0]:   store i64 %49, i64* %3, align 8


Adj: [0x55d3c817be20]:   store i64 %78, i64* %3, align 8


Removing: [0x55d3c81750e0]:   %55 = add i64 %54, 5
From the pot matches of: [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime : [0x55d3c81a0cb0]:   store i64 %78, i64* %PC, align 8


Uprime Matches: [0x55d3c817be20]:   store i64 %78, i64* %3, align 8


Adj: [0x55d3c8176060]:   store i64 %55, i64* %3, align 8


Removing: [0x55d3c8175650]:   %49 = add i64 %48, 5
From the pot matches of: [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime : [0x55d3c81a0cb0]:   store i64 %78, i64* %PC, align 8


Uprime Matches: [0x55d3c817be20]:   store i64 %78, i64* %3, align 8


Adj: [0x55d3c81754f0]:   store i64 %49, i64* %3, align 8


Removing: [0x55d3c81e5820]:   %20 = xor i8 %19, 1
From the pot matches of: [0x55d3c81a1b80]:   %92 = xor i8 %91, 1


Uprime : [0x55d3c81a1c00]:   store i8 %92, i8* %21, align 1, !tbaa !1279


Uprime Matches: [0x55d3c8173630]:   store i8 %92, i8* %21, align 1


Adj: [0x55d3c8172910]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x55d3c81738f0]:   %91 = and i8 %90, 1
From the pot matches of: [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime : [0x55d3c8209680]:   %20 = xor i8 %19, 1


Uprime Matches: [0x55d3c81e5820]:   %20 = xor i8 %19, 1


Adj: [0x55d3c8173710]:   %92 = xor i8 %91, 1


Removing: [0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime Matches: [0x55d3c8175650]:   %49 = add i64 %48, 5


Adj: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c81766a0]:   %62 = add i64 %54, 10
[0x55d3c81768a0]:   %61 = add i64 %54, -76


Removing: [0x55d3c81e9388]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x55d3c8200700]:   %49 = add i64 %48, 5


Uprime Matches: [0x55d3c8175650]:   %49 = add i64 %48, 5


Adj: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Removing: [0x55d3c81e8678]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime Matches: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c81750e0]:   %55 = add i64 %54, 5
[0x55d3c81766a0]:   %62 = add i64 %54, 10
[0x55d3c81768a0]:   %61 = add i64 %54, -76


Removing: [0x55d3c81f98a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x55d3c81a0c30]:   %78 = add i64 %74, 5


Uprime Matches: [0x55d3c817bf80]:   %78 = add i64 %74, 5


Adj: [0x55d3c8175650]:   %49 = add i64 %48, 5


Removing: [0x55d3c8172e60]:   %19 = and i8 %18, 1
From the pot matches of: [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime : [0x55d3c81a1b80]:   %92 = xor i8 %91, 1


Uprime Matches: [0x55d3c8173710]:   %92 = xor i8 %91, 1


Adj: [0x55d3c81e5820]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x55d3c81ec158]:   %90 = trunc i32 %89 to i8
From the pot matches of: [0x55d3c8209548]:   %18 = trunc i32 %17 to i8


Uprime : [0x55d3c8209600]:   %19 = and i8 %18, 1


Uprime Matches: [0x55d3c8172e60]:   %19 = and i8 %18, 1


Adj: [0x55d3c81738f0]:   %91 = and i8 %90, 1


Removing: [0x55d3c81e0748]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8


Uprime : [0x55d3c81a1b00]:   %91 = and i8 %90, 1


Uprime Matches: [0x55d3c81738f0]:   %91 = and i8 %90, 1


Adj: [0x55d3c8172e60]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x55d3c815a0d0]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55d3c81d5c40]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55d3c8194b10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55d3c81d6190]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55d3c819f3d0]:   %55 = add i64 %54, 5 {
	[0x55d3c81750e0]:  %55 = add i64 %54, 5
	}

[0x55d3c819f450]:   store i64 %55, i64* %PC, align 8 {
	[0x55d3c8176060]:  store i64 %55, i64* %3, align 8
	}

[0x55d3c819f4b8]:   %56 = inttoptr i64 %53 to i64* {
	[0x55d3c81e8548]:  %56 = inttoptr i64 %53 to i64*
	}

[0x55d3c819f518]:   %57 = load i64, i64* %56, align 8 {
	[0x55d3c81e81b8]:  %57 = load i64, i64* %56, align 8
	}

[0x55d3c819f620]:   %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0 {
	[0x55d3c8151c40]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
	}

[0x55d3c819f6b0]:   store i64 %57, i64* %58, align 1, !tbaa !1284 {
	[0x55d3c8177eb0]:  store i64 %57, i64* %58, align 1
	}

[0x55d3c819f7c0]:   %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x55d3c8152480]:  %59 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x55d3c819f838]:   %60 = bitcast i64* %59 to double* {
	[0x55d3c81e7e28]:  %60 = bitcast i64* %59 to double*
	}

[0x55d3c819f8b0]:   store double 0.000000e+00, double* %60, align 1, !tbaa !1284 {
	[0x55d3c8177bf0]:  store double 0.000000e+00, double* %60, align 1
	}

[0x55d3c819f930]:   %61 = add i64 %54, -76 {
	[0x55d3c81768a0]:  %61 = add i64 %54, -76
	}

[0x55d3c819f9b0]:   %62 = add i64 %54, 10 {
	[0x55d3c81766a0]:  %62 = add i64 %54, 10
	}

[0x55d3c819fa18]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81e7cf8]:  %63 = load i64, i64* %6, align 8
	}

[0x55d3c819fa90]:   %64 = add i64 %63, -8 {
	[0x55d3c8176470]:  %64 = add i64 %63, -8
	}

[0x55d3c819faf8]:   %65 = inttoptr i64 %64 to i64* {
	[0x55d3c81e7968]:  %65 = inttoptr i64 %64 to i64*
	}

[0x55d3c819fb70]:   store i64 %62, i64* %65, align 8 {
	[0x55d3c8176310]:  store i64 %62, i64* %65, align 8
	}

[0x55d3c819fbf0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81761c0]:  store i64 %64, i64* %6, align 8
	}

[0x55d3c819fc70]:   store i64 %61, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8177180]:  store i64 %61, i64* %3, align 8
	}

[0x55d3c819ff10]:   %66 = tail call %struct.Memory* @sub_400500_fun(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2) {
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	}

[0x55d3c819ffd8]:   %67 = load i64, i64* %PC, align 8 {
	[0x55d3c81e7708]:  %66 = load i64, i64* %3, align 8
	}

[0x55d3c81a0120]:   store i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 16), i64* %RDI, align 8, !tbaa !1261 {
	[0x55d3c8179290]:  store i64 add (i64 ptrtoint (%G__0x400610_type* @G__0x400610 to i64), i64 184), i64* %RDI.i, align 8
	}

[0x55d3c81a01a0]:   store i8 1, i8* %AL, align 1, !tbaa !1286 {
	[0x55d3c8177820]:  store i8 1, i8* %AL.i, align 1
	}

[0x55d3c81a0370]:   %68 = add i64 %67, -342 {
	[0x55d3c8178f10]:  %68 = add i64 %66, -342
	}

[0x55d3c81a0430]:   %69 = add i64 %67, 17 {
	[0x55d3c81776d0]:  %69 = add i64 %66, 17
	}

[0x55d3c81a0498]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8173f68]:  %70 = load i64, i64* %6, align 8
	}

[0x55d3c81a0510]:   %71 = add i64 %70, -8 {
	[0x55d3c8178cc0]:  %71 = add i64 %70, -8
	}

[0x55d3c81a0578]:   %72 = inttoptr i64 %71 to i64* {
	[0x55d3c81ea738]:  %72 = inttoptr i64 %71 to i64*
	}

[0x55d3c81a05f0]:   store i64 %69, i64* %72, align 8 {
	[0x55d3c81773a0]:  store i64 %69, i64* %72, align 8
	}

[0x55d3c81a0670]:   store i64 %71, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8177290]:  store i64 %71, i64* %6, align 8
	}

[0x55d3c81a06f0]:   store i64 %68, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8177600]:  store i64 %68, i64* %3, align 8
	}

[0x55d3c81a08f8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66) {
	[0x55d3c8171400]:  %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
	[0x55d3c8174750]:  %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	}

[0x55d3c81a09b8]:   %74 = load i64, i64* %PC, align 8 {
	[0x55d3c81e9388]:  %74 = load i64, i64* %3, align 8
	}

[0x55d3c81a0a30]:   store i64 0, i64* %RCX, align 8, !tbaa !1261 {
	[0x55d3c817c2c0]:  store i64 0, i64* %RCX.i, align 8
	}

[0x55d3c81a0a98]:   %75 = load i64, i64* %RBP, align 8 {
	[0x55d3c81e9128]:  %75 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c81a0b50]:   %76 = add i64 %75, -20 {
	[0x55d3c817c0e0]:  %76 = add i64 %75, -20
	}

[0x55d3c81a0bb8]:   %77 = load i32, i32* %EAX, align 4 {
	[0x55d3c81eae58]:  %77 = load i32, i32* %EAX.i, align 4
	}

[0x55d3c81a0c30]:   %78 = add i64 %74, 5 {
	[0x55d3c817bf80]:  %78 = add i64 %74, 5
	}

[0x55d3c81a0cb0]:   store i64 %78, i64* %PC, align 8 {
	[0x55d3c817be20]:  store i64 %78, i64* %3, align 8
	}

[0x55d3c81a0d18]:   %79 = inttoptr i64 %76 to i32* {
	[0x55d3c81ebb68]:  %79 = inttoptr i64 %76 to i32*
	}

[0x55d3c81a0d90]:   store i32 %77, i32* %79, align 4 {
	[0x55d3c817bcc0]:  store i32 %77, i32* %79, align 4
	}

[0x55d3c81a0df8]:   %80 = load i32, i32* %ECX, align 4 {
	[0x55d3c81eba38]:  %80 = load i32, i32* %ECX.i9, align 4
	}

[0x55d3c81a0e58]:   %81 = zext i32 %80 to i64 {
	[0x55d3c817f5f8]:  %81 = zext i32 %80 to i64
	}

[0x55d3c81a0eb8]:   %82 = load i64, i64* %PC, align 8 {
	[0x55d3c81eb6a8]:  %82 = load i64, i64* %3, align 8
	}

[0x55d3c81a0f30]:   store i64 %81, i64* %RAX, align 8, !tbaa !1261 {
	[0x55d3c817a210]:  store i64 %81, i64* %RAX.i, align 8
	}

[0x55d3c81a0f98]:   %83 = load i64, i64* %RSP, align 8 {
	[0x55d3c81eb318]:  %83 = load i64, i64* %6, align 8
	}

[0x55d3c81a1010]:   %84 = add i64 %83, 32 {
	[0x55d3c8179a50]:  %84 = add i64 %83, 32
	}

[0x55d3c81a1090]:   store i64 %84, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c817c410]:  store i64 %84, i64* %6, align 8
	}

[0x55d3c81a1150]:   %85 = icmp ugt i64 %83, -33 {
	[0x55d3c8173cc0]:  %85 = icmp ugt i64 %83, -33
	}

[0x55d3c81a11b8]:   %86 = zext i1 %85 to i8 {
	[0x55d3c81eb1e8]:  %86 = zext i1 %85 to i8
	}

[0x55d3c81a1230]:   store i8 %86, i8* %14, align 1, !tbaa !1265 {
	[0x55d3c8173b60]:  store i8 %86, i8* %14, align 1
	}

[0x55d3c81a18a8]:   %87 = trunc i64 %84 to i32 {
	[0x55d3c81eb0b8]:  %87 = trunc i64 %84 to i32
	}

[0x55d3c81a1920]:   %88 = and i32 %87, 255 {
	[0x55d3c8173a40]:  %88 = and i32 %87, 255
	}

[0x55d3c81a19c0]:   %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9 {
	[0x55d3c81fd240]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x55d3c81a1a88]:   %90 = trunc i32 %89 to i8 {
	[0x55d3c81ec158]:  %90 = trunc i32 %89 to i8
	}

[0x55d3c81a1b00]:   %91 = and i8 %90, 1 {
	[0x55d3c81738f0]:  %91 = and i8 %90, 1
	}

[0x55d3c81a1b80]:   %92 = xor i8 %91, 1 {
	[0x55d3c8173710]:  %92 = xor i8 %91, 1
	}

[0x55d3c81a1c00]:   store i8 %92, i8* %21, align 1, !tbaa !1279 {
	[0x55d3c8173630]:  store i8 %92, i8* %21, align 1
	}

[0x55d3c81a2290]:   %93 = xor i64 %84, %83 {
	[0x55d3c817c6d0]:  %93 = xor i64 %84, %83
	}

[0x55d3c81a2310]:   %94 = lshr i64 %93, 4 {
	[0x55d3c8173e20]:  %94 = lshr i64 %93, 4
	}

[0x55d3c81a2378]:   %95 = trunc i64 %94 to i8 {
	[0x55d3c81ecd38]:  %95 = trunc i64 %94 to i8
	}

[0x55d3c81a23f0]:   %96 = and i8 %95, 1 {
	[0x55d3c817f320]:  %96 = and i8 %95, 1
	}

[0x55d3c81a2470]:   store i8 %96, i8* %26, align 1, !tbaa !1280 {
	[0x55d3c817f1c0]:  store i8 %96, i8* %26, align 1
	}

[0x55d3c81a2b00]:   %97 = icmp eq i64 %84, 0 {
	[0x55d3c817efe0]:  %97 = icmp eq i64 %84, 0
	}

[0x55d3c81a2b68]:   %98 = zext i1 %97 to i8 {
	[0x55d3c81ecc08]:  %98 = zext i1 %97 to i8
	}

[0x55d3c81a2be0]:   store i8 %98, i8* %29, align 1, !tbaa !1281 {
	[0x55d3c817ee80]:  store i8 %98, i8* %29, align 1
	}

[0x55d3c81a3270]:   %99 = lshr i64 %84, 63 {
	[0x55d3c817ed20]:  %99 = lshr i64 %84, 63
	}

[0x55d3c81a32d8]:   %100 = trunc i64 %99 to i8 {
	[0x55d3c81ecad8]:  %100 = trunc i64 %99 to i8
	}

[0x55d3c81a3350]:   store i8 %100, i8* %32, align 1, !tbaa !1282 {
	[0x55d3c817e770]:  store i8 %100, i8* %32, align 1
	}

[0x55d3c81a39e0]:   %101 = lshr i64 %83, 63 {
	[0x55d3c817e610]:  %101 = lshr i64 %83, 63
	}

[0x55d3c81a3a60]:   %102 = xor i64 %99, %101 {
	[0x55d3c817f400]:  %102 = xor i64 %99, %101
	}

[0x55d3c81a3ae0]:   %103 = add nuw nsw i64 %102, %99 {
	[0x55d3c8181d60]:  %103 = add nuw nsw i64 %102, %99
	}

[0x55d3c81a3b60]:   %104 = icmp eq i64 %103, 2 {
	[0x55d3c8181290]:  %104 = icmp eq i64 %103, 2
	}

[0x55d3c81a3bc8]:   %105 = zext i1 %104 to i8 {
	[0x55d3c81ec618]:  %105 = zext i1 %104 to i8
	}

[0x55d3c81a3c40]:   store i8 %105, i8* %38, align 1, !tbaa !1283 {
	[0x55d3c8181130]:  store i8 %105, i8* %38, align 1
	}

[0x55d3c81a42d0]:   %106 = add i64 %82, 7 {
	[0x55d3c8180660]:  %106 = add i64 %82, 7
	}

[0x55d3c81a4350]:   store i64 %106, i64* %PC, align 8 {
	[0x55d3c817fb90]:  store i64 %106, i64* %3, align 8
	}

[0x55d3c81a4410]:   %107 = add i64 %83, 40 {
	[0x55d3c817f9f0]:  %107 = add i64 %83, 40
	}

[0x55d3c81a4478]:   %108 = inttoptr i64 %84 to i64* {
	[0x55d3c81ec4e8]:  %108 = inttoptr i64 %84 to i64*
	}

[0x55d3c81a44d8]:   %109 = load i64, i64* %108, align 8 {
	[0x55d3c81ec3b8]:  %109 = load i64, i64* %108, align 8
	}

[0x55d3c81a4550]:   store i64 %109, i64* %RBP, align 8, !tbaa !1261 {
	[0x55d3c817f890]:  store i64 %109, i64* %RBP.i, align 8
	}

[0x55d3c81a45d0]:   store i64 %107, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8181ec0]:  store i64 %107, i64* %6, align 8
	}

[0x55d3c81a4650]:   %110 = add i64 %82, 8 {
	[0x55d3c8182990]:  %110 = add i64 %82, 8
	}

[0x55d3c81a46d0]:   store i64 %110, i64* %PC, align 8 {
	[0x55d3c81827b0]:  store i64 %110, i64* %3, align 8
	}

[0x55d3c81a4738]:   %111 = inttoptr i64 %107 to i64* {
	[0x55d3c81ec288]:  %111 = inttoptr i64 %107 to i64*
	}

[0x55d3c81a4798]:   %112 = load i64, i64* %111, align 8 {
	[0x55d3c81ecf98]:  %112 = load i64, i64* %111, align 8
	}

[0x55d3c81a4810]:   store i64 %112, i64* %PC, align 8, !tbaa !1261 {
	[0x55d3c8182650]:  store i64 %112, i64* %3, align 8
	}

[0x55d3c81a48d0]:   %113 = add i64 %83, 48 {
	[0x55d3c81824b0]:  %113 = add i64 %83, 48
	}

[0x55d3c81a4950]:   store i64 %113, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c8182350]:  store i64 %113, i64* %6, align 8
	}

[0x55d3c81a49b8]:   ret %struct.Memory* %73 {
	[0x55d3c81eea88]:  ret %struct.Memory.32* %call2_400562
	}

[0x55d3c8200488]:   %45 = inttoptr i64 %43 to i32* {
	[0x55d3c81e6b68]:  %45 = inttoptr i64 %43 to i32*
	}

[0x55d3c8200500]:   store i32 0, i32* %45, align 4 {
	[0x55d3c8175f10]:  store i32 0, i32* %45, align 4
	}

[0x55d3c8200568]:   %46 = load i64, i64* %RBP, align 8 {
	[0x55d3c81730c8]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c8200620]:   %47 = add i64 %46, -16 {
	[0x55d3c81757f0]:  %47 = add i64 %46, -16
	}

[0x55d3c8200688]:   %48 = load i64, i64* %PC, align 8 {
	[0x55d3c81f98a8]:  %48 = load i64, i64* %3, align 8
	}

[0x55d3c8200700]:   %49 = add i64 %48, 5 {
	[0x55d3c8175650]:  %49 = add i64 %48, 5
	}

[0x55d3c8200780]:   store i64 %49, i64* %PC, align 8 {
	[0x55d3c81754f0]:  store i64 %49, i64* %3, align 8
	}

[0x55d3c82007e8]:   %50 = load i64, i64* %40, align 1 {
	[0x55d3c81e3d48]:  %50 = load i64, i64* %40, align 1
	}

[0x55d3c8200848]:   %51 = inttoptr i64 %47 to i64* {
	[0x55d3c81e1d88]:  %51 = inttoptr i64 %47 to i64*
	}

[0x55d3c82008c0]:   store i64 %50, i64* %51, align 8 {
	[0x55d3c81e6a30]:  store i64 %50, i64* %51, align 8
	}

[0x55d3c8200928]:   %52 = load i64, i64* %RBP, align 8 {
	[0x55d3c81e7158]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c82009a0]:   %53 = add i64 %52, -16 {
	[0x55d3c8175230]:  %53 = add i64 %52, -16
	}

[0x55d3c8200a08]:   %54 = load i64, i64* %PC, align 8 {
	[0x55d3c81e8678]:  %54 = load i64, i64* %3, align 8
	}

[0x55d3c8206eb0]: %struct.State* %0 {
	[0x55d3c81763c0]:%struct.State.1* %0
	}

[0x55d3c8206ef0]: i64 %1 {
	[0x55d3c8176950]:i64 %1
	}

[0x55d3c8206f30]: %struct.Memory* %2 {
	[0x55d3c8175700]:%struct.Memory.32* %2
	}

[0x55d3c8207158]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x55d3c81e94b8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	}

[0x55d3c8207208]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55d3c814bf78]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	}

[0x55d3c82072c8]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x55d3c81d9558]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	}

[0x55d3c82073b8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x55d3c81d2da8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55d3c8207430]:   %6 = add i64 %1, 1 {
	[0x55d3c81710b0]:  %5 = add i64 %1, 1
	}

[0x55d3c82074b0]:   store i64 %6, i64* %PC, align 8 {
	[0x55d3c8170f60]:  store i64 %5, i64* %3, align 8
	}

[0x55d3c8207518]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81d2f78]:  %7 = load i64, i64* %6, align 8
	}

[0x55d3c8208710]:   %8 = add i64 %7, -8 {
	[0x55d3c81fa610]:  %8 = add i64 %7, -8
	}

[0x55d3c8208790]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x55d3c81fd410]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x55d3c8208808]:   %9 = inttoptr i64 %8 to i64* {
	[0x55d3c8229488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55d3c8208880]:   store i64 %5, i64* %9, align 8 {
	[0x55d3c81e4520]:  store i64 %4, i64* %9, align 8
	}

[0x55d3c82088e8]:   %10 = load i64, i64* %PC, align 8 {
	[0x55d3c81e2578]:  %10 = load i64, i64* %3, align 8
	}

[0x55d3c8208960]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55d3c81e2940]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55d3c8209030]:   %11 = add i64 %7, -40 {
	[0x55d3c81e0050]:  %11 = add i64 %7, -40
	}

[0x55d3c82090b0]:   store i64 %11, i64* %RSP, align 8, !tbaa !1261 {
	[0x55d3c81727c0]:  store i64 %11, i64* %6, align 8
	}

[0x55d3c8209170]:   %12 = icmp ult i64 %8, 32 {
	[0x55d3c81e5c60]:  %12 = icmp ult i64 %8, 32
	}

[0x55d3c82091d8]:   %13 = zext i1 %12 to i8 {
	[0x55d3c81e2848]:  %13 = zext i1 %12 to i8
	}

[0x55d3c8209250]:   store i8 %13, i8* %14, align 1, !tbaa !1265 {
	[0x55d3c81e5b50]:  store i8 %13, i8* %14, align 1
	}

[0x55d3c82093e8]:   %15 = trunc i64 %11 to i32 {
	[0x55d3c81e0b78]:  %15 = trunc i64 %11 to i32
	}

[0x55d3c82094a0]:   %16 = and i32 %15, 255 {
	[0x55d3c8172fc0]:  %16 = and i32 %15, 255
	}

[0x55d3c8209548]:   %18 = trunc i32 %17 to i8 {
	[0x55d3c81e0748]:  %18 = trunc i32 %17 to i8
	}

[0x55d3c8209600]:   %19 = and i8 %18, 1 {
	[0x55d3c8172e60]:  %19 = and i8 %18, 1
	}

[0x55d3c8209680]:   %20 = xor i8 %19, 1 {
	[0x55d3c81e5820]:  %20 = xor i8 %19, 1
	}

[0x55d3c8209700]:   store i8 %20, i8* %21, align 1, !tbaa !1279 {
	[0x55d3c8172910]:  store i8 %20, i8* %21, align 1
	}

[0x55d3c8209890]:   %22 = xor i64 %8, %11 {
	[0x55d3c81e5710]:  %22 = xor i64 %8, %11
	}

[0x55d3c8209910]:   %23 = lshr i64 %22, 4 {
	[0x55d3c81e4720]:  %23 = lshr i64 %22, 4
	}

[0x55d3c8209978]:   %24 = trunc i64 %23 to i8 {
	[0x55d3c82165e8]:  %24 = trunc i64 %23 to i8
	}

[0x55d3c82099f0]:   %25 = and i8 %24, 1 {
	[0x55d3c81744e0]:  %25 = and i8 %24, 1
	}

[0x55d3c8209aa0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55d3c81ee9a0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55d3c8209b30]:   store i8 %25, i8* %26, align 1, !tbaa !1280 {
	[0x55d3c81e60a0]:  store i8 %25, i8* %26, align 1
	}

[0x55d3c8209ce0]:   %27 = icmp eq i64 %11, 0 {
	[0x55d3c8174390]:  %27 = icmp eq i64 %11, 0
	}

[0x55d3c8209d48]:   %28 = zext i1 %27 to i8 {
	[0x55d3c82382b8]:  %28 = zext i1 %27 to i8
	}

[0x55d3c8209df0]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55d3c817e220]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55d3c8209e80]:   store i8 %28, i8* %29, align 1, !tbaa !1281 {
	[0x55d3c8174230]:  store i8 %28, i8* %29, align 1
	}

[0x55d3c820a070]:   %30 = lshr i64 %11, 63 {
	[0x55d3c81e5e80]:  %30 = lshr i64 %11, 63
	}

[0x55d3c820a0d8]:   %31 = trunc i64 %30 to i8 {
	[0x55d3c81dc568]:  %31 = trunc i64 %30 to i8
	}

[0x55d3c820a180]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55d3c81796d0]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55d3c820a210]:   store i8 %31, i8* %32, align 1, !tbaa !1282 {
	[0x55d3c81e4920]:  store i8 %31, i8* %32, align 1
	}

[0x55d3c820a3c0]:   %33 = lshr i64 %8, 63 {
	[0x55d3c8173240]:  %33 = lshr i64 %8, 63
	}

[0x55d3c820a440]:   %34 = xor i64 %30, %33 {
	[0x55d3c8174640]:  %34 = xor i64 %30, %33
	}

[0x55d3c820a4c0]:   %35 = add nuw nsw i64 %34, %33 {
	[0x55d3c81e6700]:  %35 = add nuw nsw i64 %34, %33
	}

[0x55d3c820a540]:   %36 = icmp eq i64 %35, 2 {
	[0x55d3c8174e30]:  %36 = icmp eq i64 %35, 2
	}

[0x55d3c820a5a8]:   %37 = zext i1 %36 to i8 {
	[0x55d3c81e3938]:  %37 = zext i1 %36 to i8
	}

[0x55d3c820a650]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55d3c81e4ac0]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55d3c820a6e0]:   store i8 %37, i8* %38, align 1, !tbaa !1283 {
	[0x55d3c81e65f0]:  store i8 %37, i8* %38, align 1
	}

[0x55d3c820a958]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400600__rodata_type* @seg_400600__rodata to i64), i64 8) to i64*), align 8 {
	[0x55d3c81e7028]:  %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
	}

[0x55d3c820a9d0]:   store i64 %39, i64* %40, align 1, !tbaa !1284 {
	[0x55d3c81e64e0]:  store i64 %39, i64* %40, align 1
	}

[0x55d3c820ab68]:   %42 = bitcast i64* %41 to double* {
	[0x55d3c81e6c98]:  %42 = bitcast i64* %41 to double*
	}

[0x55d3c820b640]:   store double 0.000000e+00, double* %42, align 1, !tbaa !1284 {
	[0x55d3c8174cd0]:  store double 0.000000e+00, double* %42, align 1
	}

[0x55d3c820bd10]:   %43 = add i64 %7, -12 {
	[0x55d3c8174b70]:  %43 = add i64 %7, -12
	}

[0x55d3c820bdd0]:   %44 = add i64 %10, 22 {
	[0x55d3c81e62c0]:  %44 = add i64 %10, 22
	}

[0x55d3c820be50]:   store i64 %44, i64* %PC, align 8 {
	[0x55d3c8174f80]:  store i64 %44, i64* %3, align 8
	}

[0x55d3c821ded8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x55d3c822b838]:  %67 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x55d3c821ec28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x55d3c8235858]:  %73 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x55d3c822a7f8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x55d3c81ead28]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x55d3c822a8b8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x55d3c81e9258]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x55d3c8230bd0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x55d3c82bfe40]:  %41 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x55d3c82312b0]:   %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x55d3c81e05d0]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x55d3c8235f70]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55d3c81d1c80]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55d3c8236140]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x55d3c81d3580]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x55d3c823b080]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55d3c821a5f0]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55d3c823b190]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55d3c82bb260]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55d3c8206f70]: block_400530 {
	[0x55d3c81f5d00]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Multiple matches exist for [0x55d3c81a08f8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66)
[0x55d3c8171400]:   %call2_400562 = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400551)
[0x55d3c8174750]:   %call2_400551 = tail call %struct.Memory.32* @sub_400500.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
Iso Match NOT Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
