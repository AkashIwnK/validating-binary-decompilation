Writing '/tmp/tmpw6l8096k.dot'...
Writing '/tmp/tmpw6l8096k.dot':Done

Reading LLVM: /tmp/tmpv8rkkv2c-query.ll
Extracting function [main] from /tmp/tmpv8rkkv2c-query.ll
Dot file generated!
Writing '/tmp/tmpp_dtxd5a.dot'...
Writing '/tmp/tmpp_dtxd5a.dot':Done

Reading LLVM: /tmp/tmpu9l72ky0-target.ll
Extracting function [main] from /tmp/tmpu9l72ky0-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
- 48 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 49 store i64 %39, i64* %40, align 1
- 50 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 51 %42 = bitcast i64* %41 to double*
- 52 store double 0.000000e+00, double* %42, align 1
- 53 %43 = add i64 %7, -12
- 54 %44 = add i64 %10, 22
- 55 store i64 %44, i64* %3, align 8
- 56 %45 = inttoptr i64 %43 to i32*
- 57 store i32 0, i32* %45, align 4
- 58 %46 = load i64, i64* %RBP.i, align 8
- 59 %47 = add i64 %46, -16
- 60 %48 = load i64, i64* %3, align 8
- 61 %49 = add i64 %48, 5
- 62 store i64 %49, i64* %3, align 8
- 63 %50 = load i64, i64* %40, align 1
- 64 %51 = inttoptr i64 %47 to i64*
- 65 store i64 %50, i64* %51, align 8
- 66 %52 = load i64, i64* %RBP.i, align 8
- 67 %53 = add i64 %52, -16
- 68 %54 = load i64, i64* %3, align 8
- 69 %55 = add i64 %54, 5
- 70 store i64 %55, i64* %3, align 8
- 71 %56 = inttoptr i64 %53 to i64*
- 72 %57 = load i64, i64* %56, align 8
- 73 %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
- 74 store i64 %57, i64* %58, align 1
- 75 %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 76 %60 = bitcast i64* %59 to double*
- 77 store double 0.000000e+00, double* %60, align 1
- 78 %61 = add i64 %54, -76
- 79 %62 = add i64 %54, 10
- 80 %63 = load i64, i64* %6, align 8
- 81 %64 = add i64 %63, -8
- 82 %65 = inttoptr i64 %64 to i64*
- 83 store i64 %62, i64* %65, align 8
- 84 store i64 %64, i64* %6, align 8
- 85 store i64 %61, i64* %3, align 8
- 86 %call2_400571 = tail call %struct.Memory* @sub_400520.fun(%struct.State* %0, i64 %61, %struct.Memory* %2)
- 87 %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 88 %66 = load i64, i64* %3, align 8
- 89 store i64 ptrtoint (%G__0x400630_type* @G__0x400630 to i64), i64* %RDI.i, align 8
- 90 %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 91 %AL.i = bitcast %union.anon* %67 to i8*
- 92 store i8 1, i8* %AL.i, align 1
- 93 %68 = add i64 %66, -342
- 94 %69 = add i64 %66, 17
- 95 %70 = load i64, i64* %6, align 8
- 96 %71 = add i64 %70, -8
- 97 %72 = inttoptr i64 %71 to i64*
- 98 store i64 %69, i64* %72, align 8
- 99 store i64 %71, i64* %6, align 8
- 100 store i64 %68, i64* %3, align 8
- 101 %73 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400571)
- 102 %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 103 %ECX.i9 = bitcast %union.anon* %74 to i32*
- 104 %RCX.i = getelementptr inbounds %union.anon, %union.anon* %74, i64 0, i32 0
- 105 %75 = load i64, i64* %3, align 8
- 106 store i64 0, i64* %RCX.i, align 8
- 107 %EAX.i = bitcast %union.anon* %67 to i32*
- 108 %76 = load i64, i64* %RBP.i, align 8
- 109 %77 = add i64 %76, -20
- 110 %78 = load i32, i32* %EAX.i, align 4
- 111 %79 = add i64 %75, 5
- 112 store i64 %79, i64* %3, align 8
- 113 %80 = inttoptr i64 %77 to i32*
- 114 store i32 %78, i32* %80, align 4
- 115 %RAX.i = getelementptr inbounds %union.anon, %union.anon* %67, i64 0, i32 0
- 116 %81 = load i32, i32* %ECX.i9, align 4
- 117 %82 = zext i32 %81 to i64
- 118 %83 = load i64, i64* %3, align 8
- 119 store i64 %82, i64* %RAX.i, align 8
- 120 %84 = load i64, i64* %6, align 8
- 121 %85 = add i64 %84, 32
- 122 store i64 %85, i64* %6, align 8
- 123 %86 = icmp ugt i64 %84, -33
- 124 %87 = zext i1 %86 to i8
- 125 store i8 %87, i8* %14, align 1
- 126 %88 = trunc i64 %85 to i32
- 127 %89 = and i32 %88, 255
- 128 %90 = tail call i32 @llvm.ctpop.i32(i32 %89)
- 129 %91 = trunc i32 %90 to i8
- 130 %92 = and i8 %91, 1
- 131 %93 = xor i8 %92, 1
- 132 store i8 %93, i8* %21, align 1
- 133 %94 = xor i64 %85, %84
- 134 %95 = lshr i64 %94, 4
- 135 %96 = trunc i64 %95 to i8
- 136 %97 = and i8 %96, 1
- 137 store i8 %97, i8* %26, align 1
- 138 %98 = icmp eq i64 %85, 0
- 139 %99 = zext i1 %98 to i8
- 140 store i8 %99, i8* %29, align 1
- 141 %100 = lshr i64 %85, 63
- 142 %101 = trunc i64 %100 to i8
- 143 store i8 %101, i8* %32, align 1
- 144 %102 = lshr i64 %84, 63
- 145 %103 = xor i64 %100, %102
- 146 %104 = add nuw nsw i64 %103, %100
- 147 %105 = icmp eq i64 %104, 2
- 148 %106 = zext i1 %105 to i8
- 149 store i8 %106, i8* %38, align 1
- 150 %107 = add i64 %83, 7
- 151 store i64 %107, i64* %3, align 8
- 152 %108 = add i64 %84, 40
- 153 %109 = inttoptr i64 %85 to i64*
- 154 %110 = load i64, i64* %109, align 8
- 155 store i64 %110, i64* %RBP.i, align 8
- 156 store i64 %108, i64* %6, align 8
- 157 %111 = add i64 %83, 8
- 158 store i64 %111, i64* %3, align 8
- 159 %112 = inttoptr i64 %108 to i64*
- 160 %113 = load i64, i64* %112, align 8
- 161 store i64 %113, i64* %3, align 8
- 162 %114 = add i64 %84, 48
- 163 store i64 %114, i64* %6, align 8
- 164 ret %struct.Memory* %73
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6051de048>, {0: {0}, 1: {10}, 2: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 3: {12}, 4: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 5: {9}, 6: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 7: {89, 101, 15}, 8: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 9: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 10: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 11: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 12: {20}, 13: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 14: {22}, 15: {41, 139, 52, 117, 148, 23, 124}, 16: {24}, 17: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 18: {129, 36, 135, 45, 142, 26, 29, 126}, 19: {27, 127}, 20: {128, 106, 28, 94}, 21: {129, 36, 135, 45, 142, 26, 29, 126}, 22: {136, 130, 37, 30}, 23: {131, 31}, 24: {32}, 25: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 26: {49, 34, 145, 133}, 27: {35, 134}, 28: {129, 36, 135, 45, 142, 26, 29, 126}, 29: {136, 130, 37, 30}, 30: {38}, 31: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 32: {40, 138}, 33: {41, 139, 52, 117, 148, 23, 124}, 34: {42}, 35: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 36: {48, 144, 44, 141}, 37: {129, 36, 135, 45, 142, 26, 29, 126}, 38: {46}, 39: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 40: {48, 144, 44, 141}, 41: {49, 34, 145, 133}, 42: {50, 146}, 43: {51, 147}, 44: {41, 139, 52, 117, 148, 23, 124}, 45: {53}, 46: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 47: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 48: {56}, 49: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 50: {58}, 51: {2, 3, 5, 84, 59}, 52: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 53: {61}, 54: {62}, 55: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 56: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 57: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 58: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 59: {75, 67}, 60: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 61: {112, 77, 69}, 62: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 63: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 64: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 65: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 66: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 67: {75, 67}, 68: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 69: {112, 77, 69}, 70: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 71: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 72: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 73: {81}, 74: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 75: {83}, 76: {2, 3, 5, 84, 59}, 77: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 78: {86}, 79: {87}, 80: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 81: {89, 101, 15}, 82: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 83: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 84: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 85: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 86: {128, 106, 28, 94}, 87: {8}, 88: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 89: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 90: {1}, 91: {2, 3, 5, 84, 59}, 92: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 93: {98}, 94: {99}, 95: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 96: {89, 101, 15}, 97: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 98: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 99: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 100: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 101: {128, 106, 28, 94}, 102: {4}, 103: {2, 3, 5, 84, 59}, 104: {6, 7}, 105: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 106: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 107: {2, 3, 5, 84, 59}, 108: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 109: {110}, 110: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 111: {112, 77, 69}, 112: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 113: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 114: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 115: {6, 7}, 116: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 117: {41, 139, 52, 117, 148, 23, 124}, 118: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 119: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 120: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 121: {121}, 122: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 123: {123}, 124: {41, 139, 52, 117, 148, 23, 124}, 125: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 126: {129, 36, 135, 45, 142, 26, 29, 126}, 127: {27, 127}, 128: {128, 106, 28, 94}, 129: {129, 36, 135, 45, 142, 26, 29, 126}, 130: {136, 130, 37, 30}, 131: {131, 31}, 132: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 133: {49, 34, 145, 133}, 134: {35, 134}, 135: {129, 36, 135, 45, 142, 26, 29, 126}, 136: {136, 130, 37, 30}, 137: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 138: {40, 138}, 139: {41, 139, 52, 117, 148, 23, 124}, 140: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 141: {48, 144, 44, 141}, 142: {129, 36, 135, 45, 142, 26, 29, 126}, 143: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 144: {48, 144, 44, 141}, 145: {49, 34, 145, 133}, 146: {50, 146}, 147: {51, 147}, 148: {41, 139, 52, 117, 148, 23, 124}, 149: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 150: {150}, 151: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 152: {152}, 153: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 154: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 155: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 156: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 157: {157}, 158: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 159: {64, 102, 72, 79, 16, 114, 153, 90, 159}, 160: {11, 14, 18, 154, 160, 55, 66, 68, 71, 74, 76, 80, 88, 95, 100, 107, 109, 111, 116, 118, 120}, 161: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 162: {162}, 163: {132, 137, 140, 13, 143, 17, 19, 21, 149, 151, 25, 155, 156, 158, 33, 161, 163, 39, 43, 47, 54, 57, 60, 63, 65, 70, 73, 78, 82, 85, 91, 92, 93, 96, 97, 103, 104, 105, 108, 113, 115, 119, 122, 125}, 164: {164}})
Equivalent! frozenset({107, 68, 76}) {105, 60, 68}
Equivalent! frozenset({112, 69, 77}) {69, 61, 111}
Equivalent! frozenset({113, 70, 78}) {112, 70, 62}
Equivalent! frozenset({88, 100}) {80, 95}
Equivalent! frozenset({89, 101}) {96, 81}
Equivalent! frozenset({104, 92}) {99, 84}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb6051de048>, {0: {0}, 1: {10}, 2: {11}, 3: {12}, 4: {13}, 5: {9}, 6: {14}, 7: {15}, 8: {16}, 9: {17}, 10: {18}, 11: {19}, 12: {20}, 13: {21}, 14: {22}, 15: {23}, 16: {24}, 17: {25}, 18: {26}, 19: {27}, 20: {28}, 21: {29}, 22: {30}, 23: {31}, 24: {32}, 25: {33}, 26: {34}, 27: {35}, 28: {36}, 29: {37}, 30: {38}, 31: {39}, 32: {40}, 33: {41}, 34: {42}, 35: {43}, 36: {44}, 37: {45}, 38: {46}, 39: {47}, 40: {48}, 41: {49}, 42: {50}, 43: {51}, 44: {52}, 45: {53}, 46: {54}, 47: {55}, 48: {56}, 49: {57}, 50: {58}, 51: {59}, 52: {60}, 53: {61}, 54: {62}, 55: {63}, 56: {64}, 57: {65}, 58: {66}, 59: {67}, 60: {68}, 61: {69}, 62: {78}, 63: {71}, 64: {72}, 65: {73}, 66: {74}, 67: {75}, 68: {76}, 69: {112}, 70: {70}, 71: {79}, 72: {80}, 73: {81}, 74: {82}, 75: {83}, 76: {84}, 77: {85}, 78: {86}, 79: {87}, 80: {88}, 81: {101}, 82: {90}, 83: {91}, 84: {92}, 85: {93}, 86: {94}, 87: {8}, 88: {95}, 89: {96}, 90: {1}, 91: {2}, 92: {97}, 93: {98}, 94: {99}, 95: {100}, 96: {89}, 97: {102}, 98: {103}, 99: {104}, 100: {105}, 101: {106}, 102: {4}, 103: {5}, 104: {7}, 105: {107}, 106: {108}, 107: {3}, 108: {109}, 109: {110}, 110: {111}, 111: {77}, 112: {113}, 113: {114}, 114: {115}, 115: {6}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 load load
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 getelementptr getelementptr
EXACT 51 bitcast bitcast
EXACT 52 store store
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 load load
EXACT 59 add add
EXACT 60 load load
EXACT 61 add add
EXACT 62 store store
EXACT 63 load load
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 inttoptr inttoptr
EXACT 72 load load
EXACT 73 getelementptr getelementptr
EXACT 74 store store
EXACT 75 getelementptr getelementptr
EXACT 76 bitcast bitcast
EXACT 77 store store
EXACT 78 add add
EXACT 79 add add
EXACT 80 load load
EXACT 81 add add
EXACT 82 inttoptr inttoptr
EXACT 83 store store
EXACT 84 store store
EXACT 85 store store
EXACT 86 tail tail
EXACT 87 getelementptr getelementptr
EXACT 88 load load
EXACT 89 store store
EXACT 90 getelementptr getelementptr
EXACT 91 bitcast bitcast
EXACT 92 store store
EXACT 93 add add
EXACT 94 add add
EXACT 95 load load
EXACT 96 add add
EXACT 97 inttoptr inttoptr
EXACT 98 store store
EXACT 99 store store
EXACT 100 store store
EXACT 101 tail tail
EXACT 102 getelementptr getelementptr
EXACT 103 bitcast bitcast
EXACT 104 getelementptr getelementptr
EXACT 105 load load
EXACT 106 store store
EXACT 107 bitcast bitcast
EXACT 108 load load
EXACT 109 add add
EXACT 110 load load
EXACT 111 add add
EXACT 112 store store
EXACT 113 inttoptr inttoptr
EXACT 114 store store
EXACT 115 getelementptr getelementptr
EXACT 116 load load
EXACT 117 zext zext
EXACT 118 load load
EXACT 119 store store
EXACT 120 load load
EXACT 121 add add
EXACT 122 store store
EXACT 123 icmp icmp
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 trunc trunc
EXACT 127 and and
EXACT 128 tail tail
EXACT 129 trunc trunc
EXACT 130 and and
EXACT 131 xor xor
EXACT 132 store store
EXACT 133 xor xor
EXACT 134 lshr lshr
EXACT 135 trunc trunc
EXACT 136 and and
EXACT 137 store store
EXACT 138 icmp icmp
EXACT 139 zext zext
EXACT 140 store store
EXACT 141 lshr lshr
EXACT 142 trunc trunc
EXACT 143 store store
EXACT 144 lshr lshr
EXACT 145 xor xor
EXACT 146 add add
EXACT 147 icmp icmp
EXACT 148 zext zext
EXACT 149 store store
EXACT 150 add add
EXACT 151 store store
EXACT 152 add add
EXACT 153 inttoptr inttoptr
EXACT 154 load load
EXACT 155 store store
EXACT 156 store store
EXACT 157 add add
EXACT 158 store store
EXACT 159 inttoptr inttoptr
EXACT 160 load load
EXACT 161 store store
EXACT 162 add add
EXACT 163 store store
EXACT 164 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = load i64, i64* %RBP, align 8
- 12 %6 = add i64 %1, 1
- 13 store i64 %6, i64* %PC, align 8
- 14 %7 = load i64, i64* %RSP, align 8
- 15 %8 = add i64 %7, -8
- 16 %9 = inttoptr i64 %8 to i64*
- 17 store i64 %5, i64* %9, align 8
- 18 %10 = load i64, i64* %PC, align 8
- 19 store i64 %8, i64* %RBP, align 8
- 20 %11 = add i64 %7, -40
- 21 store i64 %11, i64* %RSP, align 8
- 22 %12 = icmp ult i64 %8, 32
- 23 %13 = zext i1 %12 to i8
- 24 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 25 store i8 %13, i8* %14, align 1
- 26 %15 = trunc i64 %11 to i32
- 27 %16 = and i32 %15, 255
- 28 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 29 %18 = trunc i32 %17 to i8
- 30 %19 = and i8 %18, 1
- 31 %20 = xor i8 %19, 1
- 32 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 33 store i8 %20, i8* %21, align 1
- 34 %22 = xor i64 %8, %11
- 35 %23 = lshr i64 %22, 4
- 36 %24 = trunc i64 %23 to i8
- 37 %25 = and i8 %24, 1
- 38 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 39 store i8 %25, i8* %26, align 1
- 40 %27 = icmp eq i64 %11, 0
- 41 %28 = zext i1 %27 to i8
- 42 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 43 store i8 %28, i8* %29, align 1
- 44 %30 = lshr i64 %11, 63
- 45 %31 = trunc i64 %30 to i8
- 46 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 47 store i8 %31, i8* %32, align 1
- 48 %33 = lshr i64 %8, 63
- 49 %34 = xor i64 %30, %33
- 50 %35 = add nuw nsw i64 %34, %33
- 51 %36 = icmp eq i64 %35, 2
- 52 %37 = zext i1 %36 to i8
- 53 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 54 store i8 %37, i8* %38, align 1
- 55 %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 8) to i64*), align 8
- 56 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 57 store i64 %39, i64* %40, align 1
- 58 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 59 %42 = bitcast i64* %41 to double*
- 60 store double 0.000000e+00, double* %42, align 1
- 61 %43 = add i64 %7, -12
- 62 %44 = add i64 %10, 22
- 63 store i64 %44, i64* %PC, align 8
- 64 %45 = inttoptr i64 %43 to i32*
- 65 store i32 0, i32* %45, align 4
- 66 %46 = load i64, i64* %RBP, align 8
- 67 %47 = add i64 %46, -16
- 68 %48 = load i64, i64* %PC, align 8
- 69 %49 = add i64 %48, 5
- 70 store i64 %49, i64* %PC, align 8
- 71 %50 = load i64, i64* %40, align 1
- 72 %51 = inttoptr i64 %47 to i64*
- 73 store i64 %50, i64* %51, align 8
- 74 %52 = load i64, i64* %RBP, align 8
- 75 %53 = add i64 %52, -16
- 76 %54 = load i64, i64* %PC, align 8
- 77 %55 = add i64 %54, 5
- 78 store i64 %55, i64* %PC, align 8
- 79 %56 = inttoptr i64 %53 to i64*
- 80 %57 = load i64, i64* %56, align 8
- 81 %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
- 82 store i64 %57, i64* %58, align 1
- 83 %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 84 %60 = bitcast i64* %59 to double*
- 85 store double 0.000000e+00, double* %60, align 1
- 86 %61 = add i64 %54, -76
- 87 %62 = add i64 %54, 10
- 88 %63 = load i64, i64* %RSP, align 8
- 89 %64 = add i64 %63, -8
- 90 %65 = inttoptr i64 %64 to i64*
- 91 store i64 %62, i64* %65, align 8
- 92 store i64 %64, i64* %RSP, align 8
- 93 store i64 %61, i64* %PC, align 8
- 94 %66 = tail call %struct.Memory* @sub_400520_fun_renamed_(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2)
- 95 %67 = load i64, i64* %PC, align 8
- 96 store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 16), i64* %RDI, align 8
- 97 store i8 1, i8* %AL, align 1
- 98 %68 = add i64 %67, -342
- 99 %69 = add i64 %67, 17
- 100 %70 = load i64, i64* %RSP, align 8
- 101 %71 = add i64 %70, -8
- 102 %72 = inttoptr i64 %71 to i64*
- 103 store i64 %69, i64* %72, align 8
- 104 store i64 %71, i64* %RSP, align 8
- 105 store i64 %68, i64* %PC, align 8
- 106 %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66)
- 107 %74 = load i64, i64* %PC, align 8
- 108 store i64 0, i64* %RCX, align 8
- 109 %75 = load i64, i64* %RBP, align 8
- 110 %76 = add i64 %75, -20
- 111 %77 = load i32, i32* %EAX, align 4
- 112 %78 = add i64 %74, 5
- 113 store i64 %78, i64* %PC, align 8
- 114 %79 = inttoptr i64 %76 to i32*
- 115 store i32 %77, i32* %79, align 4
- 116 %80 = load i32, i32* %ECX, align 4
- 117 %81 = zext i32 %80 to i64
- 118 %82 = load i64, i64* %PC, align 8
- 119 store i64 %81, i64* %RAX, align 8
- 120 %83 = load i64, i64* %RSP, align 8
- 121 %84 = add i64 %83, 32
- 122 store i64 %84, i64* %RSP, align 8
- 123 %85 = icmp ugt i64 %83, -33
- 124 %86 = zext i1 %85 to i8
- 125 store i8 %86, i8* %14, align 1
- 126 %87 = trunc i64 %84 to i32
- 127 %88 = and i32 %87, 255
- 128 %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12
- 129 %90 = trunc i32 %89 to i8
- 130 %91 = and i8 %90, 1
- 131 %92 = xor i8 %91, 1
- 132 store i8 %92, i8* %21, align 1
- 133 %93 = xor i64 %84, %83
- 134 %94 = lshr i64 %93, 4
- 135 %95 = trunc i64 %94 to i8
- 136 %96 = and i8 %95, 1
- 137 store i8 %96, i8* %26, align 1
- 138 %97 = icmp eq i64 %84, 0
- 139 %98 = zext i1 %97 to i8
- 140 store i8 %98, i8* %29, align 1
- 141 %99 = lshr i64 %84, 63
- 142 %100 = trunc i64 %99 to i8
- 143 store i8 %100, i8* %32, align 1
- 144 %101 = lshr i64 %83, 63
- 145 %102 = xor i64 %99, %101
- 146 %103 = add nuw nsw i64 %102, %99
- 147 %104 = icmp eq i64 %103, 2
- 148 %105 = zext i1 %104 to i8
- 149 store i8 %105, i8* %38, align 1
- 150 %106 = add i64 %82, 7
- 151 store i64 %106, i64* %PC, align 8
- 152 %107 = add i64 %83, 40
- 153 %108 = inttoptr i64 %84 to i64*
- 154 %109 = load i64, i64* %108, align 8
- 155 store i64 %109, i64* %RBP, align 8
- 156 store i64 %107, i64* %RSP, align 8
- 157 %110 = add i64 %82, 8
- 158 store i64 %110, i64* %PC, align 8
- 159 %111 = inttoptr i64 %107 to i64*
- 160 %112 = load i64, i64* %111, align 8
- 161 store i64 %112, i64* %PC, align 8
- 162 %113 = add i64 %83, 48
- 163 store i64 %113, i64* %RSP, align 8
- 164 ret %struct.Memory* %73
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb605437048>, {0: {0}, 1: {90}, 2: {103, 107, 76, 51, 91}, 3: {103, 107, 76, 51, 91}, 4: {102}, 5: {103, 107, 76, 51, 91}, 6: {104, 115}, 7: {104, 115}, 8: {87}, 9: {5}, 10: {1}, 11: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 12: {3}, 13: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 14: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 15: {96, 81, 7}, 16: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 17: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 18: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 19: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 20: {12}, 21: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 22: {14}, 23: {33, 139, 44, 15, 148, 117, 124}, 24: {16}, 25: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 26: {129, 37, 135, 142, 18, 21, 28, 126}, 27: {19, 127}, 28: {128, 20, 101, 86}, 29: {129, 37, 135, 142, 18, 21, 28, 126}, 30: {136, 130, 29, 22}, 31: {131, 23}, 32: {24}, 33: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 34: {41, 26, 145, 133}, 35: {27, 134}, 36: {129, 37, 135, 142, 18, 21, 28, 126}, 37: {136, 130, 29, 22}, 38: {30}, 39: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 40: {32, 138}, 41: {33, 139, 44, 15, 148, 117, 124}, 42: {34}, 43: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 44: {40, 144, 36, 141}, 45: {129, 37, 135, 142, 18, 21, 28, 126}, 46: {38}, 47: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 48: {40, 144, 36, 141}, 49: {41, 26, 145, 133}, 50: {42, 146}, 51: {43, 147}, 52: {33, 139, 44, 15, 148, 117, 124}, 53: {45}, 54: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 55: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 56: {48}, 57: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 58: {50}, 59: {103, 107, 76, 51, 91}, 60: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 61: {53}, 62: {54}, 63: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 64: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 65: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 66: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 67: {67, 59}, 68: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 69: {69, 61, 111}, 70: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 71: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 72: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 73: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 74: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 75: {67, 59}, 76: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 77: {69, 61, 111}, 78: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 79: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 80: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 81: {73}, 82: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 83: {75}, 84: {103, 107, 76, 51, 91}, 85: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 86: {78}, 87: {79}, 88: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 89: {96, 81, 7}, 90: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 91: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 92: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 93: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 94: {128, 20, 101, 86}, 95: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 96: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 97: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 98: {93}, 99: {94}, 100: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 101: {96, 81, 7}, 102: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 103: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 104: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 105: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 106: {128, 20, 101, 86}, 107: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 108: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 109: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 110: {109}, 111: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 112: {69, 61, 111}, 113: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 114: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 115: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 116: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 117: {33, 139, 44, 15, 148, 117, 124}, 118: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 119: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 120: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 121: {121}, 122: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 123: {123}, 124: {33, 139, 44, 15, 148, 117, 124}, 125: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 126: {129, 37, 135, 142, 18, 21, 28, 126}, 127: {19, 127}, 128: {128, 20, 101, 86}, 129: {129, 37, 135, 142, 18, 21, 28, 126}, 130: {136, 130, 29, 22}, 131: {131, 23}, 132: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 133: {41, 26, 145, 133}, 134: {27, 134}, 135: {129, 37, 135, 142, 18, 21, 28, 126}, 136: {136, 130, 29, 22}, 137: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 138: {32, 138}, 139: {33, 139, 44, 15, 148, 117, 124}, 140: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 141: {40, 144, 36, 141}, 142: {129, 37, 135, 142, 18, 21, 28, 126}, 143: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 144: {40, 144, 36, 141}, 145: {41, 26, 145, 133}, 146: {42, 146}, 147: {43, 147}, 148: {33, 139, 44, 15, 148, 117, 124}, 149: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 150: {150}, 151: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 152: {152}, 153: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 154: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 155: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 156: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 157: {157}, 158: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 159: {64, 97, 71, 8, 113, 82, 56, 153, 159}, 160: {2, 6, 10, 154, 160, 47, 58, 60, 63, 66, 68, 72, 80, 88, 95, 105, 108, 110, 116, 118, 120}, 161: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 162: {162}, 163: {4, 132, 9, 137, 11, 140, 13, 143, 17, 149, 151, 25, 155, 156, 158, 31, 161, 35, 163, 39, 46, 49, 52, 55, 57, 62, 65, 70, 74, 77, 83, 84, 85, 89, 92, 98, 99, 100, 106, 112, 114, 119, 122, 125}, 164: {164}})
Equivalent! frozenset({105, 68, 60}) {107, 68, 76}
Equivalent! frozenset({69, 61, 111}) {112, 77, 69}
Equivalent! frozenset({112, 70, 62}) {78, 70, 113}
Equivalent! frozenset({80, 95}) {88, 100}
Equivalent! frozenset({96, 81}) {89, 101}
Equivalent! frozenset({99, 84}) {104, 92}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb605437048>, {0: {0}, 1: {90}, 2: {91}, 3: {107}, 4: {102}, 5: {103}, 6: {115}, 7: {104}, 8: {87}, 9: {5}, 10: {1}, 11: {2}, 12: {3}, 13: {4}, 14: {6}, 15: {7}, 16: {8}, 17: {9}, 18: {10}, 19: {11}, 20: {12}, 21: {13}, 22: {14}, 23: {15}, 24: {16}, 25: {17}, 26: {18}, 27: {19}, 28: {20}, 29: {21}, 30: {22}, 31: {23}, 32: {24}, 33: {25}, 34: {26}, 35: {27}, 36: {28}, 37: {29}, 38: {30}, 39: {31}, 40: {32}, 41: {33}, 42: {34}, 43: {35}, 44: {36}, 45: {37}, 46: {38}, 47: {39}, 48: {40}, 49: {41}, 50: {42}, 51: {43}, 52: {44}, 53: {45}, 54: {46}, 55: {47}, 56: {48}, 57: {49}, 58: {50}, 59: {51}, 60: {52}, 61: {53}, 62: {54}, 63: {55}, 64: {56}, 65: {57}, 66: {58}, 67: {59}, 68: {68}, 69: {111}, 70: {70}, 71: {63}, 72: {64}, 73: {65}, 74: {66}, 75: {67}, 76: {60}, 77: {61}, 78: {112}, 79: {71}, 80: {72}, 81: {73}, 82: {74}, 83: {75}, 84: {76}, 85: {77}, 86: {78}, 87: {79}, 88: {80}, 89: {96}, 90: {82}, 91: {83}, 92: {84}, 93: {85}, 94: {86}, 95: {88}, 96: {89}, 97: {92}, 98: {93}, 99: {94}, 100: {95}, 101: {81}, 102: {97}, 103: {98}, 104: {99}, 105: {100}, 106: {101}, 107: {105}, 108: {106}, 109: {108}, 110: {109}, 111: {110}, 112: {69}, 113: {62}, 114: {113}, 115: {114}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 store store
EXACT 14 load load
EXACT 15 add add
EXACT 16 inttoptr inttoptr
EXACT 17 store store
EXACT 18 load load
EXACT 19 store store
EXACT 20 add add
EXACT 21 store store
EXACT 22 icmp icmp
EXACT 23 zext zext
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 trunc trunc
EXACT 27 and and
EXACT 28 tail tail
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 xor xor
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 xor xor
EXACT 35 lshr lshr
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 icmp icmp
EXACT 41 zext zext
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 lshr lshr
EXACT 45 trunc trunc
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 xor xor
EXACT 50 add add
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 load load
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 getelementptr getelementptr
EXACT 59 bitcast bitcast
EXACT 60 store store
EXACT 61 add add
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 load load
EXACT 72 inttoptr inttoptr
EXACT 73 store store
EXACT 74 load load
EXACT 75 add add
EXACT 76 load load
EXACT 77 add add
EXACT 78 store store
EXACT 79 inttoptr inttoptr
EXACT 80 load load
EXACT 81 getelementptr getelementptr
EXACT 82 store store
EXACT 83 getelementptr getelementptr
EXACT 84 bitcast bitcast
EXACT 85 store store
EXACT 86 add add
EXACT 87 add add
EXACT 88 load load
EXACT 89 add add
EXACT 90 inttoptr inttoptr
EXACT 91 store store
EXACT 92 store store
EXACT 93 store store
EXACT 94 tail tail
EXACT 95 load load
EXACT 96 store store
EXACT 97 store store
EXACT 98 add add
EXACT 99 add add
EXACT 100 load load
EXACT 101 add add
EXACT 102 inttoptr inttoptr
EXACT 103 store store
EXACT 104 store store
EXACT 105 store store
EXACT 106 tail tail
EXACT 107 load load
EXACT 108 store store
EXACT 109 load load
EXACT 110 add add
EXACT 111 load load
EXACT 112 add add
EXACT 113 store store
EXACT 114 inttoptr inttoptr
EXACT 115 store store
EXACT 116 load load
EXACT 117 zext zext
EXACT 118 load load
EXACT 119 store store
EXACT 120 load load
EXACT 121 add add
EXACT 122 store store
EXACT 123 icmp icmp
EXACT 124 zext zext
EXACT 125 store store
EXACT 126 trunc trunc
EXACT 127 and and
EXACT 128 tail tail
EXACT 129 trunc trunc
EXACT 130 and and
EXACT 131 xor xor
EXACT 132 store store
EXACT 133 xor xor
EXACT 134 lshr lshr
EXACT 135 trunc trunc
EXACT 136 and and
EXACT 137 store store
EXACT 138 icmp icmp
EXACT 139 zext zext
EXACT 140 store store
EXACT 141 lshr lshr
EXACT 142 trunc trunc
EXACT 143 store store
EXACT 144 lshr lshr
EXACT 145 xor xor
EXACT 146 add add
EXACT 147 icmp icmp
EXACT 148 zext zext
EXACT 149 store store
EXACT 150 add add
EXACT 151 store store
EXACT 152 add add
EXACT 153 inttoptr inttoptr
EXACT 154 load load
EXACT 155 store store
EXACT 156 store store
EXACT 157 add add
EXACT 158 store store
EXACT 159 inttoptr inttoptr
EXACT 160 load load
EXACT 161 store store
EXACT 162 add add
EXACT 163 store store
EXACT 164 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %39, i64* %40, align 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%42 = bitcast i64* %41 to double*', 'store double 0.000000e+00, double* %42, align 1', '%43 = add i64 %7, -12', '%44 = add i64 %10, 22', 'store i64 %44, i64* %3, align 8', '%45 = inttoptr i64 %43 to i32*', 'store i32 0, i32* %45, align 4', '%46 = load i64, i64* %RBP.i, align 8', '%47 = add i64 %46, -16', '%48 = load i64, i64* %3, align 8', '%49 = add i64 %48, 5', 'store i64 %49, i64* %3, align 8', '%50 = load i64, i64* %40, align 1', '%51 = inttoptr i64 %47 to i64*', 'store i64 %50, i64* %51, align 8', '%52 = load i64, i64* %RBP.i, align 8', '%53 = add i64 %52, -16', '%54 = load i64, i64* %3, align 8', '%55 = add i64 %54, 5', 'store i64 %55, i64* %3, align 8', '%56 = inttoptr i64 %53 to i64*', '%57 = load i64, i64* %56, align 8', '%58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0', 'store i64 %57, i64* %58, align 1', '%59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%60 = bitcast i64* %59 to double*', 'store double 0.000000e+00, double* %60, align 1', '%61 = add i64 %54, -76', '%62 = add i64 %54, 10', '%63 = load i64, i64* %6, align 8', '%64 = add i64 %63, -8', '%65 = inttoptr i64 %64 to i64*', 'store i64 %62, i64* %65, align 8', 'store i64 %64, i64* %6, align 8', 'store i64 %61, i64* %3, align 8', '%call2_400571 = tail call %struct.Memory* @sub_400520.fun(%struct.State* %0, i64 %61, %struct.Memory* %2)', '%RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%66 = load i64, i64* %3, align 8', 'store i64 ptrtoint (%G__0x400630_type* @G__0x400630 to i64), i64* %RDI.i, align 8', '%67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i = bitcast %union.anon* %67 to i8*', 'store i8 1, i8* %AL.i, align 1', '%68 = add i64 %66, -342', '%69 = add i64 %66, 17', '%70 = load i64, i64* %6, align 8', '%71 = add i64 %70, -8', '%72 = inttoptr i64 %71 to i64*', 'store i64 %69, i64* %72, align 8', 'store i64 %71, i64* %6, align 8', 'store i64 %68, i64* %3, align 8', '%73 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400571)', '%74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX.i9 = bitcast %union.anon* %74 to i32*', '%RCX.i = getelementptr inbounds %union.anon, %union.anon* %74, i64 0, i32 0', '%75 = load i64, i64* %3, align 8', 'store i64 0, i64* %RCX.i, align 8', '%EAX.i = bitcast %union.anon* %67 to i32*', '%76 = load i64, i64* %RBP.i, align 8', '%77 = add i64 %76, -20', '%78 = load i32, i32* %EAX.i, align 4', '%79 = add i64 %75, 5', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %77 to i32*', 'store i32 %78, i32* %80, align 4', '%RAX.i = getelementptr inbounds %union.anon, %union.anon* %67, i64 0, i32 0', '%81 = load i32, i32* %ECX.i9, align 4', '%82 = zext i32 %81 to i64', '%83 = load i64, i64* %3, align 8', 'store i64 %82, i64* %RAX.i, align 8', '%84 = load i64, i64* %6, align 8', '%85 = add i64 %84, 32', 'store i64 %85, i64* %6, align 8', '%86 = icmp ugt i64 %84, -33', '%87 = zext i1 %86 to i8', 'store i8 %87, i8* %14, align 1', '%88 = trunc i64 %85 to i32', '%89 = and i32 %88, 255', '%90 = tail call i32 @llvm.ctpop.i32(i32 %89)', '%91 = trunc i32 %90 to i8', '%92 = and i8 %91, 1', '%93 = xor i8 %92, 1', 'store i8 %93, i8* %21, align 1', '%94 = xor i64 %85, %84', '%95 = lshr i64 %94, 4', '%96 = trunc i64 %95 to i8', '%97 = and i8 %96, 1', 'store i8 %97, i8* %26, align 1', '%98 = icmp eq i64 %85, 0', '%99 = zext i1 %98 to i8', 'store i8 %99, i8* %29, align 1', '%100 = lshr i64 %85, 63', '%101 = trunc i64 %100 to i8', 'store i8 %101, i8* %32, align 1', '%102 = lshr i64 %84, 63', '%103 = xor i64 %100, %102', '%104 = add nuw nsw i64 %103, %100', '%105 = icmp eq i64 %104, 2', '%106 = zext i1 %105 to i8', 'store i8 %106, i8* %38, align 1', '%107 = add i64 %83, 7', 'store i64 %107, i64* %3, align 8', '%108 = add i64 %84, 40', '%109 = inttoptr i64 %85 to i64*', '%110 = load i64, i64* %109, align 8', 'store i64 %110, i64* %RBP.i, align 8', 'store i64 %108, i64* %6, align 8', '%111 = add i64 %83, 8', 'store i64 %111, i64* %3, align 8', '%112 = inttoptr i64 %108 to i64*', '%113 = load i64, i64* %112, align 8', 'store i64 %113, i64* %3, align 8', '%114 = add i64 %84, 48', 'store i64 %114, i64* %6, align 8', 'ret %struct.Memory* %73'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = load i64, i64* bitcast (%G_0xc8__rip__type* @G_0xc8__rip_ to i64*), align 8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %39, i64* %40, align 1
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %42 = bitcast i64* %41 to double*
Found line to remove! store double 0.000000e+00, double* %42, align 1
Found line to remove! %43 = add i64 %7, -12
Found line to remove! %44 = add i64 %10, 22
Found line to remove! store i64 %44, i64* %3, align 8
Found line to remove! %45 = inttoptr i64 %43 to i32*
Found line to remove! store i32 0, i32* %45, align 4
Found line to remove! %46 = load i64, i64* %RBP.i, align 8
Found line to remove! %47 = add i64 %46, -16
Found line to remove! %48 = load i64, i64* %3, align 8
Found line to remove! %49 = add i64 %48, 5
Found line to remove! store i64 %49, i64* %3, align 8
Found line to remove! %50 = load i64, i64* %40, align 1
Found line to remove! %51 = inttoptr i64 %47 to i64*
Found line to remove! store i64 %50, i64* %51, align 8
Found line to remove! %52 = load i64, i64* %RBP.i, align 8
Found line to remove! %53 = add i64 %52, -16
Found line to remove! %54 = load i64, i64* %3, align 8
Found line to remove! %55 = add i64 %54, 5
Found line to remove! store i64 %55, i64* %3, align 8
Found line to remove! %56 = inttoptr i64 %53 to i64*
Found line to remove! %57 = load i64, i64* %56, align 8
Found line to remove! %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %57, i64* %58, align 1
Found line to remove! %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %60 = bitcast i64* %59 to double*
Found line to remove! store double 0.000000e+00, double* %60, align 1
Found line to remove! %61 = add i64 %54, -76
Found line to remove! %62 = add i64 %54, 10
Found line to remove! %63 = load i64, i64* %6, align 8
Found line to remove! %64 = add i64 %63, -8
Found line to remove! %65 = inttoptr i64 %64 to i64*
Found line to remove! store i64 %62, i64* %65, align 8
Found line to remove! store i64 %64, i64* %6, align 8
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %call2_400571 = tail call %struct.Memory* @sub_400520.fun(%struct.State* %0, i64 %61, %struct.Memory* %2)
Found line to remove! %RDI.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %66 = load i64, i64* %3, align 8
Found line to remove! store i64 ptrtoint (%G__0x400630_type* @G__0x400630 to i64), i64* %RDI.i, align 8
Found line to remove! %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %67 to i8*
Found line to remove! store i8 1, i8* %AL.i, align 1
Found line to remove! %68 = add i64 %66, -342
Found line to remove! %69 = add i64 %66, 17
Found line to remove! %70 = load i64, i64* %6, align 8
Found line to remove! %71 = add i64 %70, -8
Found line to remove! %72 = inttoptr i64 %71 to i64*
Found line to remove! store i64 %69, i64* %72, align 8
Found line to remove! store i64 %71, i64* %6, align 8
Found line to remove! store i64 %68, i64* %3, align 8
Found line to remove! %73 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400571)
Found line to remove! %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX.i9 = bitcast %union.anon* %74 to i32*
Found line to remove! %RCX.i = getelementptr inbounds %union.anon, %union.anon* %74, i64 0, i32 0
Found line to remove! %75 = load i64, i64* %3, align 8
Found line to remove! store i64 0, i64* %RCX.i, align 8
Found line to remove! %EAX.i = bitcast %union.anon* %67 to i32*
Found line to remove! %76 = load i64, i64* %RBP.i, align 8
Found line to remove! %77 = add i64 %76, -20
Found line to remove! %78 = load i32, i32* %EAX.i, align 4
Found line to remove! %79 = add i64 %75, 5
Found line to remove! store i64 %79, i64* %3, align 8
Found line to remove! %80 = inttoptr i64 %77 to i32*
Found line to remove! store i32 %78, i32* %80, align 4
Found line to remove! %RAX.i = getelementptr inbounds %union.anon, %union.anon* %67, i64 0, i32 0
Found line to remove! %81 = load i32, i32* %ECX.i9, align 4
Found line to remove! %82 = zext i32 %81 to i64
Found line to remove! %83 = load i64, i64* %3, align 8
Found line to remove! store i64 %82, i64* %RAX.i, align 8
Found line to remove! %84 = load i64, i64* %6, align 8
Found line to remove! %85 = add i64 %84, 32
Found line to remove! store i64 %85, i64* %6, align 8
Found line to remove! %86 = icmp ugt i64 %84, -33
Found line to remove! %87 = zext i1 %86 to i8
Found line to remove! store i8 %87, i8* %14, align 1
Found line to remove! %88 = trunc i64 %85 to i32
Found line to remove! %89 = and i32 %88, 255
Found line to remove! %90 = tail call i32 @llvm.ctpop.i32(i32 %89)
Found line to remove! %91 = trunc i32 %90 to i8
Found line to remove! %92 = and i8 %91, 1
Found line to remove! %93 = xor i8 %92, 1
Found line to remove! store i8 %93, i8* %21, align 1
Found line to remove! %94 = xor i64 %85, %84
Found line to remove! %95 = lshr i64 %94, 4
Found line to remove! %96 = trunc i64 %95 to i8
Found line to remove! %97 = and i8 %96, 1
Found line to remove! store i8 %97, i8* %26, align 1
Found line to remove! %98 = icmp eq i64 %85, 0
Found line to remove! %99 = zext i1 %98 to i8
Found line to remove! store i8 %99, i8* %29, align 1
Found line to remove! %100 = lshr i64 %85, 63
Found line to remove! %101 = trunc i64 %100 to i8
Found line to remove! store i8 %101, i8* %32, align 1
Found line to remove! %102 = lshr i64 %84, 63
Found line to remove! %103 = xor i64 %100, %102
Found line to remove! %104 = add nuw nsw i64 %103, %100
Found line to remove! %105 = icmp eq i64 %104, 2
Found line to remove! %106 = zext i1 %105 to i8
Found line to remove! store i8 %106, i8* %38, align 1
Found line to remove! %107 = add i64 %83, 7
Found line to remove! store i64 %107, i64* %3, align 8
Found line to remove! %108 = add i64 %84, 40
Found line to remove! %109 = inttoptr i64 %85 to i64*
Found line to remove! %110 = load i64, i64* %109, align 8
Found line to remove! store i64 %110, i64* %RBP.i, align 8
Found line to remove! store i64 %108, i64* %6, align 8
Found line to remove! %111 = add i64 %83, 8
Found line to remove! store i64 %111, i64* %3, align 8
Found line to remove! %112 = inttoptr i64 %108 to i64*
Found line to remove! %113 = load i64, i64* %112, align 8
Found line to remove! store i64 %113, i64* %3, align 8
Found line to remove! %114 = add i64 %84, 48
Found line to remove! store i64 %114, i64* %6, align 8
Found line to remove! ret %struct.Memory* %73
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 8) to i64*), align 8', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %39, i64* %40, align 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%42 = bitcast i64* %41 to double*', 'store double 0.000000e+00, double* %42, align 1', '%43 = add i64 %7, -12', '%44 = add i64 %10, 22', 'store i64 %44, i64* %PC, align 8', '%45 = inttoptr i64 %43 to i32*', 'store i32 0, i32* %45, align 4', '%46 = load i64, i64* %RBP, align 8', '%47 = add i64 %46, -16', '%48 = load i64, i64* %PC, align 8', '%49 = add i64 %48, 5', 'store i64 %49, i64* %PC, align 8', '%50 = load i64, i64* %40, align 1', '%51 = inttoptr i64 %47 to i64*', 'store i64 %50, i64* %51, align 8', '%52 = load i64, i64* %RBP, align 8', '%53 = add i64 %52, -16', '%54 = load i64, i64* %PC, align 8', '%55 = add i64 %54, 5', 'store i64 %55, i64* %PC, align 8', '%56 = inttoptr i64 %53 to i64*', '%57 = load i64, i64* %56, align 8', '%58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0', 'store i64 %57, i64* %58, align 1', '%59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%60 = bitcast i64* %59 to double*', 'store double 0.000000e+00, double* %60, align 1', '%61 = add i64 %54, -76', '%62 = add i64 %54, 10', '%63 = load i64, i64* %RSP, align 8', '%64 = add i64 %63, -8', '%65 = inttoptr i64 %64 to i64*', 'store i64 %62, i64* %65, align 8', 'store i64 %64, i64* %RSP, align 8', 'store i64 %61, i64* %PC, align 8', '%66 = tail call %struct.Memory* @sub_400520_fun_renamed_(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2)', '%67 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 16), i64* %RDI, align 8', 'store i8 1, i8* %AL, align 1', '%68 = add i64 %67, -342', '%69 = add i64 %67, 17', '%70 = load i64, i64* %RSP, align 8', '%71 = add i64 %70, -8', '%72 = inttoptr i64 %71 to i64*', 'store i64 %69, i64* %72, align 8', 'store i64 %71, i64* %RSP, align 8', 'store i64 %68, i64* %PC, align 8', '%73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66)', '%74 = load i64, i64* %PC, align 8', 'store i64 0, i64* %RCX, align 8', '%75 = load i64, i64* %RBP, align 8', '%76 = add i64 %75, -20', '%77 = load i32, i32* %EAX, align 4', '%78 = add i64 %74, 5', 'store i64 %78, i64* %PC, align 8', '%79 = inttoptr i64 %76 to i32*', 'store i32 %77, i32* %79, align 4', '%80 = load i32, i32* %ECX, align 4', '%81 = zext i32 %80 to i64', '%82 = load i64, i64* %PC, align 8', 'store i64 %81, i64* %RAX, align 8', '%83 = load i64, i64* %RSP, align 8', '%84 = add i64 %83, 32', 'store i64 %84, i64* %RSP, align 8', '%85 = icmp ugt i64 %83, -33', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %14, align 1', '%87 = trunc i64 %84 to i32', '%88 = and i32 %87, 255', '%89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12', '%90 = trunc i32 %89 to i8', '%91 = and i8 %90, 1', '%92 = xor i8 %91, 1', 'store i8 %92, i8* %21, align 1', '%93 = xor i64 %84, %83', '%94 = lshr i64 %93, 4', '%95 = trunc i64 %94 to i8', '%96 = and i8 %95, 1', 'store i8 %96, i8* %26, align 1', '%97 = icmp eq i64 %84, 0', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %29, align 1', '%99 = lshr i64 %84, 63', '%100 = trunc i64 %99 to i8', 'store i8 %100, i8* %32, align 1', '%101 = lshr i64 %83, 63', '%102 = xor i64 %99, %101', '%103 = add nuw nsw i64 %102, %99', '%104 = icmp eq i64 %103, 2', '%105 = zext i1 %104 to i8', 'store i8 %105, i8* %38, align 1', '%106 = add i64 %82, 7', 'store i64 %106, i64* %PC, align 8', '%107 = add i64 %83, 40', '%108 = inttoptr i64 %84 to i64*', '%109 = load i64, i64* %108, align 8', 'store i64 %109, i64* %RBP, align 8', 'store i64 %107, i64* %RSP, align 8', '%110 = add i64 %82, 8', 'store i64 %110, i64* %PC, align 8', '%111 = inttoptr i64 %107 to i64*', '%112 = load i64, i64* %111, align 8', 'store i64 %112, i64* %PC, align 8', '%113 = add i64 %83, 48', 'store i64 %113, i64* %RSP, align 8', 'ret %struct.Memory* %73'])
Keep: block_400550:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 8) to i64*), align 8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %39, i64* %40, align 1
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %42 = bitcast i64* %41 to double*
Found line to remove! store double 0.000000e+00, double* %42, align 1
Found line to remove! %43 = add i64 %7, -12
Found line to remove! %44 = add i64 %10, 22
Found line to remove! store i64 %44, i64* %PC, align 8
Found line to remove! %45 = inttoptr i64 %43 to i32*
Found line to remove! store i32 0, i32* %45, align 4
Found line to remove! %46 = load i64, i64* %RBP, align 8
Found line to remove! %47 = add i64 %46, -16
Found line to remove! %48 = load i64, i64* %PC, align 8
Found line to remove! %49 = add i64 %48, 5
Found line to remove! store i64 %49, i64* %PC, align 8
Found line to remove! %50 = load i64, i64* %40, align 1
Found line to remove! %51 = inttoptr i64 %47 to i64*
Found line to remove! store i64 %50, i64* %51, align 8
Found line to remove! %52 = load i64, i64* %RBP, align 8
Found line to remove! %53 = add i64 %52, -16
Found line to remove! %54 = load i64, i64* %PC, align 8
Found line to remove! %55 = add i64 %54, 5
Found line to remove! store i64 %55, i64* %PC, align 8
Found line to remove! %56 = inttoptr i64 %53 to i64*
Found line to remove! %57 = load i64, i64* %56, align 8
Found line to remove! %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %57, i64* %58, align 1
Found line to remove! %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %60 = bitcast i64* %59 to double*
Found line to remove! store double 0.000000e+00, double* %60, align 1
Found line to remove! %61 = add i64 %54, -76
Found line to remove! %62 = add i64 %54, 10
Found line to remove! %63 = load i64, i64* %RSP, align 8
Found line to remove! %64 = add i64 %63, -8
Found line to remove! %65 = inttoptr i64 %64 to i64*
Found line to remove! store i64 %62, i64* %65, align 8
Found line to remove! store i64 %64, i64* %RSP, align 8
Found line to remove! store i64 %61, i64* %PC, align 8
Found line to remove! %66 = tail call %struct.Memory* @sub_400520_fun_renamed_(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2)
Found line to remove! %67 = load i64, i64* %PC, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_400620__rodata_type* @seg_400620__rodata to i64), i64 16), i64* %RDI, align 8
Found line to remove! store i8 1, i8* %AL, align 1
Found line to remove! %68 = add i64 %67, -342
Found line to remove! %69 = add i64 %67, 17
Found line to remove! %70 = load i64, i64* %RSP, align 8
Found line to remove! %71 = add i64 %70, -8
Found line to remove! %72 = inttoptr i64 %71 to i64*
Found line to remove! store i64 %69, i64* %72, align 8
Found line to remove! store i64 %71, i64* %RSP, align 8
Found line to remove! store i64 %68, i64* %PC, align 8
Found line to remove! %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66)
Found line to remove! %74 = load i64, i64* %PC, align 8
Found line to remove! store i64 0, i64* %RCX, align 8
Found line to remove! %75 = load i64, i64* %RBP, align 8
Found line to remove! %76 = add i64 %75, -20
Found line to remove! %77 = load i32, i32* %EAX, align 4
Found line to remove! %78 = add i64 %74, 5
Found line to remove! store i64 %78, i64* %PC, align 8
Found line to remove! %79 = inttoptr i64 %76 to i32*
Found line to remove! store i32 %77, i32* %79, align 4
Found line to remove! %80 = load i32, i32* %ECX, align 4
Found line to remove! %81 = zext i32 %80 to i64
Found line to remove! %82 = load i64, i64* %PC, align 8
Found line to remove! store i64 %81, i64* %RAX, align 8
Found line to remove! %83 = load i64, i64* %RSP, align 8
Found line to remove! %84 = add i64 %83, 32
Found line to remove! store i64 %84, i64* %RSP, align 8
Found line to remove! %85 = icmp ugt i64 %83, -33
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %14, align 1
Found line to remove! %87 = trunc i64 %84 to i32
Found line to remove! %88 = and i32 %87, 255
Found line to remove! %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12
Found line to remove! %90 = trunc i32 %89 to i8
Found line to remove! %91 = and i8 %90, 1
Found line to remove! %92 = xor i8 %91, 1
Found line to remove! store i8 %92, i8* %21, align 1
Found line to remove! %93 = xor i64 %84, %83
Found line to remove! %94 = lshr i64 %93, 4
Found line to remove! %95 = trunc i64 %94 to i8
Found line to remove! %96 = and i8 %95, 1
Found line to remove! store i8 %96, i8* %26, align 1
Found line to remove! %97 = icmp eq i64 %84, 0
Found line to remove! %98 = zext i1 %97 to i8
Found line to remove! store i8 %98, i8* %29, align 1
Found line to remove! %99 = lshr i64 %84, 63
Found line to remove! %100 = trunc i64 %99 to i8
Found line to remove! store i8 %100, i8* %32, align 1
Found line to remove! %101 = lshr i64 %83, 63
Found line to remove! %102 = xor i64 %99, %101
Found line to remove! %103 = add nuw nsw i64 %102, %99
Found line to remove! %104 = icmp eq i64 %103, 2
Found line to remove! %105 = zext i1 %104 to i8
Found line to remove! store i8 %105, i8* %38, align 1
Found line to remove! %106 = add i64 %82, 7
Found line to remove! store i64 %106, i64* %PC, align 8
Found line to remove! %107 = add i64 %83, 40
Found line to remove! %108 = inttoptr i64 %84 to i64*
Found line to remove! %109 = load i64, i64* %108, align 8
Found line to remove! store i64 %109, i64* %RBP, align 8
Found line to remove! store i64 %107, i64* %RSP, align 8
Found line to remove! %110 = add i64 %82, 8
Found line to remove! store i64 %110, i64* %PC, align 8
Found line to remove! %111 = inttoptr i64 %107 to i64*
Found line to remove! %112 = load i64, i64* %111, align 8
Found line to remove! store i64 %112, i64* %PC, align 8
Found line to remove! %113 = add i64 %83, 48
Found line to remove! store i64 %113, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %73
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_36/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_36/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
