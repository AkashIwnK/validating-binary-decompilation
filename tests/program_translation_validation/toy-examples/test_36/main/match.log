Matching sub_4004f0_main Vs main


[Info] Retrieve Potential Matches...
[0x5570d1b03c70]:   %43 = add i64 %7, -12 {
	[0x5570d1bb2ba0]:  %43 = add i64 %7, -12
	}

[0x5570d1b03d30]:   %44 = add i64 %10, 22 {
	[0x5570d1bb2cd0]:  %44 = add i64 %10, 22
	}

[0x5570d1b03db0]:   store i64 %44, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b03e18]:   %45 = inttoptr i64 %43 to i32* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b03e90]:   store i32 0, i32* %45, align 4 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b03ef8]:   %46 = load i64, i64* %RBP, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b03fb0]:   %47 = add i64 %46, -16 {
	[0x5570d1be7b60]:  %47 = add i64 %46, -16
	[0x5570d1c5fc10]:  %53 = add i64 %52, -16
	}

[0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b04090]:   %49 = add i64 %48, 5 {
	[0x5570d1bcc920]:  %78 = add i64 %74, 5
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	[0x5570d1be7d40]:  %49 = add i64 %48, 5
	}

[0x5570d1b04110]:   store i64 %49, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b04178]:   %50 = load i64, i64* %40, align 1 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b683f0]: %struct.State* %0 {
	[0x5570d1bb31a0]:%struct.State.1* %0
	}

[0x5570d1b68430]: i64 %1 {
	[0x5570d1bb38c0]:i64 %1
	}

[0x5570d1b68cf0]: %struct.Memory* %2 {
	[0x5570d1bcf1c0]:%struct.Memory.32* %2
	}

[0x5570d1b68eb8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b68f90]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5570d1b4b930]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5570d1b69068]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x5570d1b0cd48]:  %67 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x5570d1b690d8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b691b8]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x5570d1b0d148]:  %73 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x5570d1b69278]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b69328]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x5570d1b17148]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	[0x5570d1ba5ae8]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	}

[0x5570d1b693e8]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x5570d1b17148]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	[0x5570d1ba5ae8]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	}

[0x5570d1b694f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5570d1b4cd60]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5570d1b69600]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5570d1b4c5e0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5570d1b69710]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5570d1b4bcb0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5570d1b697a8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b69820]:   %6 = add i64 %1, 1 {
	[0x5570d1ba5650]:  %5 = add i64 %1, 1
	}

[0x5570d1b698a0]:   store i64 %6, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b69908]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b69980]:   %8 = add i64 %7, -8 {
	[0x5570d1ba6720]:  %8 = add i64 %7, -8
	[0x5570d1bc9c20]:  %71 = add i64 %70, -8
	[0x5570d1c6c0f0]:  %64 = add i64 %63, -8
	}

[0x5570d1b69a00]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x5570d1bb0e50]:  %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
	[0x5570d1bc9180]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5570d1bd02d0]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x5570d1b69a78]:   %9 = inttoptr i64 %8 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b69af0]:   store i64 %5, i64* %9, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b69bd0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b69c90]:   %11 = add i64 %7, -40 {
	[0x5570d1ba78e0]:  %11 = add i64 %7, -40
	}

[0x5570d1b69d10]:   store i64 %11, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b69dd0]:   %12 = icmp ult i64 %8, 32 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b69e38]:   %13 = zext i1 %12 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b69ee0]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5570d1ba52b0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x5570d1b69f70]:   store i8 %13, i8* %14, align 1, !tbaa !1261 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6a5e8]:   %15 = trunc i64 %11 to i32 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b6a660]:   %16 = and i32 %15, 255 {
	[0x5570d1ba5000]:  %88 = and i32 %87, 255
	[0x5570d1bc6e80]:  %16 = and i32 %15, 255
	}

[0x5570d1b6a6e0]:   store i8 %31, i8* %32, align 1, !tbaa !1278 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6a760]:   %33 = lshr i64 %8, 63 {
	[0x5570d1ba6af0]:  %30 = lshr i64 %11, 63
	[0x5570d1bca760]:  %33 = lshr i64 %8, 63
	[0x5570d1bd3e50]:  %99 = lshr i64 %84, 63
	[0x5570d1bd4b70]:  %101 = lshr i64 %83, 63
	}

[0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b6a870]:   %19 = and i8 %18, 1 {
	[0x5570d1ba71e0]:  %25 = and i8 %24, 1
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	[0x5570d1bc7ee0]:  %96 = and i8 %95, 1
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b6a8f0]:   %20 = xor i8 %19, 1 {
	[0x5570d1ba7f40]:  %20 = xor i8 %19, 1
	[0x5570d1bd0e30]:  %92 = xor i8 %91, 1
	}

[0x5570d1b6a9a0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5570d1ba8b20]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5570d1b6aa30]:   store i8 %20, i8* %21, align 1, !tbaa !1275 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6b0c0]:   %22 = xor i64 %8, %11 {
	[0x5570d1ba84d0]:  %22 = xor i64 %8, %11
	[0x5570d1bc78e0]:  %93 = xor i64 %84, %83
	[0x5570d1bca9f0]:  %34 = xor i64 %30, %33
	[0x5570d1bd6210]:  %102 = xor i64 %99, %101
	}

[0x5570d1b6b140]:   %23 = lshr i64 %22, 4 {
	[0x5570d1ba85a0]:  %23 = lshr i64 %22, 4
	[0x5570d1bc7a60]:  %94 = lshr i64 %93, 4
	}

[0x5570d1b6b1a8]:   %24 = trunc i64 %23 to i8 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b6b220]:   %25 = and i8 %24, 1 {
	[0x5570d1ba71e0]:  %25 = and i8 %24, 1
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	[0x5570d1bc7ee0]:  %96 = and i8 %95, 1
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b6b2d0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5570d1ba9800]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5570d1b6b360]:   store i8 %25, i8* %26, align 1, !tbaa !1276 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6b9f0]:   %27 = icmp eq i64 %11, 0 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b6ba58]:   %28 = zext i1 %27 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b6bb00]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5570d1bb0600]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5570d1b6bb90]:   store i8 %28, i8* %29, align 1, !tbaa !1277 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6c220]:   %30 = lshr i64 %11, 63 {
	[0x5570d1ba6af0]:  %30 = lshr i64 %11, 63
	[0x5570d1bca760]:  %33 = lshr i64 %8, 63
	[0x5570d1bd3e50]:  %99 = lshr i64 %84, 63
	[0x5570d1bd4b70]:  %101 = lshr i64 %83, 63
	}

[0x5570d1b6c288]:   %31 = trunc i64 %30 to i8 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b6c330]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5570d1bb0860]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5570d1b6c3a8]:   %65 = inttoptr i64 %64 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b6c420]:   store i64 %62, i64* %65, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6c4a0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6c520]:   store i64 %61, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6cbe0]:   %34 = xor i64 %30, %33 {
	[0x5570d1ba84d0]:  %22 = xor i64 %8, %11
	[0x5570d1bc78e0]:  %93 = xor i64 %84, %83
	[0x5570d1bca9f0]:  %34 = xor i64 %30, %33
	[0x5570d1bd6210]:  %102 = xor i64 %99, %101
	}

[0x5570d1b6cc60]:   %35 = add nuw nsw i64 %34, %33 {
	[0x5570d1bca8e0]:  %35 = add nuw nsw i64 %34, %33
	[0x5570d1bd65a0]:  %103 = add nuw nsw i64 %102, %99
	}

[0x5570d1b6cce0]:   %36 = icmp eq i64 %35, 2 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b6cd48]:   %37 = zext i1 %36 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b6cdf0]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5570d1bb0990]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5570d1b6ce80]:   store i8 %37, i8* %38, align 1, !tbaa !1279 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b6d6e0]:   %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5570d1bbc820]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6d9b0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x5570d1bca040]:  %41 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x5570d1b6da28]:   %42 = bitcast i64* %41 to double* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b6e500]:   store double 0.000000e+00, double* %42, align 1, !tbaa !1280 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6f788]:   %51 = inttoptr i64 %47 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b6f800]:   store i64 %50, i64* %51, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6f868]:   %52 = load i64, i64* %RBP, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b6f8e0]:   %53 = add i64 %52, -16 {
	[0x5570d1be7b60]:  %47 = add i64 %46, -16
	[0x5570d1c5fc10]:  %53 = add i64 %52, -16
	}

[0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b6f9c0]:   %55 = add i64 %54, 5 {
	[0x5570d1bcc920]:  %78 = add i64 %74, 5
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	[0x5570d1be7d40]:  %49 = add i64 %48, 5
	}

[0x5570d1b6fa40]:   store i64 %55, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6faa8]:   %56 = inttoptr i64 %53 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b6fb08]:   %57 = load i64, i64* %56, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b6fc10]:   %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0 {
	[0x5570d1bcd4a0]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
	}

[0x5570d1b6fca0]:   store i64 %57, i64* %58, align 1, !tbaa !1280 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6fdb0]:   %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x5570d1bd3ac0]:  %59 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x5570d1b6fe28]:   %60 = bitcast i64* %59 to double* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b6fea0]:   store double 0.000000e+00, double* %60, align 1, !tbaa !1280 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6ff60]:   %61 = add i64 %54, -76 {
	[0x5570d1c6a5c0]:  %61 = add i64 %54, -76
	}

[0x5570d1b6ffe0]:   %62 = add i64 %54, 10 {
	[0x5570d1c69120]:  %62 = add i64 %54, 10
	}

[0x5570d1b70048]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b700c0]:   %64 = add i64 %63, -8 {
	[0x5570d1ba6720]:  %8 = add i64 %7, -8
	[0x5570d1bc9c20]:  %71 = add i64 %70, -8
	[0x5570d1c6c0f0]:  %64 = add i64 %63, -8
	}

[0x5570d1b706c0]:   %66 = tail call %struct.Memory* @sub_4004c0_fun(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2) {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x5570d1bb0e50]:  %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
	[0x5570d1bc9180]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5570d1bd02d0]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b708d0]:   store i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 16), i64* %RDI, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b70950]:   store i8 1, i8* %AL, align 1, !tbaa !1282 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b70b20]:   %68 = add i64 %67, -326 {
	[0x5570d1b13c50]:  %68 = add i64 %66, -326
	}

[0x5570d1b70be0]:   %69 = add i64 %67, 17 {
	[0x5570d1bc9a40]:  %69 = add i64 %66, 17
	}

[0x5570d1b70c48]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b70cc0]:   %71 = add i64 %70, -8 {
	[0x5570d1ba6720]:  %8 = add i64 %7, -8
	[0x5570d1bc9c20]:  %71 = add i64 %70, -8
	[0x5570d1c6c0f0]:  %64 = add i64 %63, -8
	}

[0x5570d1b70d28]:   %72 = inttoptr i64 %71 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b70da0]:   store i64 %69, i64* %72, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b70e20]:   store i64 %71, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b70ea0]:   store i64 %68, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b710c8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66) {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x5570d1bb0e50]:  %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
	[0x5570d1bc9180]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5570d1bd02d0]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71200]:   store i64 0, i64* %RCX, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b71268]:   %75 = load i64, i64* %RBP, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71320]:   %76 = add i64 %75, -20 {
	[0x5570d1bcc850]:  %76 = add i64 %75, -20
	}

[0x5570d1b71388]:   %77 = load i32, i32* %EAX, align 4 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71400]:   %78 = add i64 %74, 5 {
	[0x5570d1bcc920]:  %78 = add i64 %74, 5
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	[0x5570d1be7d40]:  %49 = add i64 %48, 5
	}

[0x5570d1b71480]:   store i64 %78, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b714e8]:   %79 = inttoptr i64 %76 to i32* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b71560]:   store i32 %77, i32* %79, align 4 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b715c8]:   %80 = load i32, i32* %ECX, align 4 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71628]:   %81 = zext i32 %80 to i64 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71700]:   store i64 %81, i64* %RAX, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b71768]:   %83 = load i64, i64* %RSP, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b717e0]:   %84 = add i64 %83, 32 {
	[0x5570d1bcd8b0]:  %84 = add i64 %83, 32
	}

[0x5570d1b71860]:   store i64 %84, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b71920]:   %85 = icmp ugt i64 %83, -33 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b71988]:   %86 = zext i1 %85 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b71a00]:   store i8 %86, i8* %14, align 1, !tbaa !1261 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b71a68]:   %87 = trunc i64 %84 to i32 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b71ae0]:   %88 = and i32 %87, 255 {
	[0x5570d1ba5000]:  %88 = and i32 %87, 255
	[0x5570d1bc6e80]:  %16 = and i32 %15, 255
	}

[0x5570d1b71b80]:   %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9 {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x5570d1bb0e50]:  %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
	[0x5570d1bc9180]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5570d1bd02d0]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x5570d1b71c48]:   %90 = trunc i32 %89 to i8 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b71cc0]:   %91 = and i8 %90, 1 {
	[0x5570d1ba71e0]:  %25 = and i8 %24, 1
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	[0x5570d1bc7ee0]:  %96 = and i8 %95, 1
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b71d40]:   %92 = xor i8 %91, 1 {
	[0x5570d1ba7f40]:  %20 = xor i8 %19, 1
	[0x5570d1bd0e30]:  %92 = xor i8 %91, 1
	}

[0x5570d1b71dc0]:   store i8 %92, i8* %21, align 1, !tbaa !1275 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b71e40]:   %93 = xor i64 %84, %83 {
	[0x5570d1ba84d0]:  %22 = xor i64 %8, %11
	[0x5570d1bc78e0]:  %93 = xor i64 %84, %83
	[0x5570d1bca9f0]:  %34 = xor i64 %30, %33
	[0x5570d1bd6210]:  %102 = xor i64 %99, %101
	}

[0x5570d1b71ec0]:   %94 = lshr i64 %93, 4 {
	[0x5570d1ba85a0]:  %23 = lshr i64 %22, 4
	[0x5570d1bc7a60]:  %94 = lshr i64 %93, 4
	}

[0x5570d1b71f28]:   %95 = trunc i64 %94 to i8 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b71fa0]:   %96 = and i8 %95, 1 {
	[0x5570d1ba71e0]:  %25 = and i8 %24, 1
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	[0x5570d1bc7ee0]:  %96 = and i8 %95, 1
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b72020]:   store i8 %96, i8* %26, align 1, !tbaa !1276 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b720a0]:   %97 = icmp eq i64 %84, 0 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b72108]:   %98 = zext i1 %97 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b72180]:   store i8 %98, i8* %29, align 1, !tbaa !1277 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72200]:   %99 = lshr i64 %84, 63 {
	[0x5570d1ba6af0]:  %30 = lshr i64 %11, 63
	[0x5570d1bca760]:  %33 = lshr i64 %8, 63
	[0x5570d1bd3e50]:  %99 = lshr i64 %84, 63
	[0x5570d1bd4b70]:  %101 = lshr i64 %83, 63
	}

[0x5570d1b72268]:   %100 = trunc i64 %99 to i8 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b722e0]:   store i8 %100, i8* %32, align 1, !tbaa !1278 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72360]:   %101 = lshr i64 %83, 63 {
	[0x5570d1ba6af0]:  %30 = lshr i64 %11, 63
	[0x5570d1bca760]:  %33 = lshr i64 %8, 63
	[0x5570d1bd3e50]:  %99 = lshr i64 %84, 63
	[0x5570d1bd4b70]:  %101 = lshr i64 %83, 63
	}

[0x5570d1b723e0]:   %102 = xor i64 %99, %101 {
	[0x5570d1ba84d0]:  %22 = xor i64 %8, %11
	[0x5570d1bc78e0]:  %93 = xor i64 %84, %83
	[0x5570d1bca9f0]:  %34 = xor i64 %30, %33
	[0x5570d1bd6210]:  %102 = xor i64 %99, %101
	}

[0x5570d1b72460]:   %103 = add nuw nsw i64 %102, %99 {
	[0x5570d1bca8e0]:  %35 = add nuw nsw i64 %34, %33
	[0x5570d1bd65a0]:  %103 = add nuw nsw i64 %102, %99
	}

[0x5570d1b724e0]:   %104 = icmp eq i64 %103, 2 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b72548]:   %105 = zext i1 %104 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b725c0]:   store i8 %105, i8* %38, align 1, !tbaa !1279 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72640]:   %106 = add i64 %82, 7 {
	[0x5570d1bb47b0]:  %106 = add i64 %82, 7
	}

[0x5570d1b726c0]:   store i64 %106, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72780]:   %107 = add i64 %83, 40 {
	[0x5570d1bd9750]:  %107 = add i64 %83, 40
	}

[0x5570d1b727e8]:   %108 = inttoptr i64 %84 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b72848]:   %109 = load i64, i64* %108, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b728c0]:   store i64 %109, i64* %RBP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72940]:   store i64 %107, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b729c0]:   %110 = add i64 %82, 8 {
	[0x5570d1bd9dc0]:  %110 = add i64 %82, 8
	}

[0x5570d1b72a40]:   store i64 %110, i64* %PC, align 8 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72aa8]:   %111 = inttoptr i64 %107 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b72b08]:   %112 = load i64, i64* %111, align 8 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b72b80]:   store i64 %112, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72c40]:   %113 = add i64 %83, 48 {
	[0x5570d1bdbd50]:  %113 = add i64 %83, 48
	}

[0x5570d1b72cc0]:   store i64 %113, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b72d28]:   ret %struct.Memory* %73 {
	[0x5570d1bb84b8]:  ret %struct.Memory.32* %call2_400522
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5570d1bb0028]:   %EAX.i = bitcast %union.anon.5* %67 to i32*
From the pot matches of: [0x5570d1b68eb8]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x5570d1b70950]:   store i8 1, i8* %AL, align 1, !tbaa !1282


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bb03b8]:   %77 = load i32, i32* %EAX.i, align 4


Removing: [0x5570d1baee58]:   %AL.i = bitcast %union.anon.5* %67 to i8*
From the pot matches of: [0x5570d1b690d8]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x5570d1b71388]:   %77 = load i32, i32* %EAX, align 4


Uprime Matches: [0x5570d1b6f5e8]:   %7 = load i64, i64* %6, align 8
[0x5570d1b6f728]:   %4 = load i64, i64* %RBP.i, align 8
[0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
[0x5570d1baa4a8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
[0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
[0x5570d1bab8d8]:   %50 = load i64, i64* %40, align 1
[0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
[0x5570d1bac858]:   %52 = load i64, i64* %RBP.i, align 8
[0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
[0x5570d1bad438]:   %57 = load i64, i64* %56, align 8
[0x5570d1badb58]:   %63 = load i64, i64* %6, align 8
[0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
[0x5570d1bafa38]:   %70 = load i64, i64* %6, align 8
[0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
[0x5570d1bb0288]:   %75 = load i64, i64* %RBP.i, align 8
[0x5570d1bb03b8]:   %77 = load i32, i32* %EAX.i, align 4
[0x5570d1bb0748]:   %80 = load i32, i32* %ECX.i9, align 4
[0x5570d1bb1c38]:   %83 = load i64, i64* %6, align 8
[0x5570d1bb7d98]:   %109 = load i64, i64* %108, align 8
[0x5570d1bb7ff8]:   %112 = load i64, i64* %111, align 8
[0x5570d1bcaf08]:   %46 = load i64, i64* %RBP.i, align 8


Adj: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1


Removing: [0x5570d1bac858]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b697a8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b69af0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1c5fc10]:   %53 = add i64 %52, -16


Removing: [0x5570d1bb0288]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b697a8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b69af0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Removing: [0x5570d1bcaf08]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b697a8]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b69af0]:   store i64 %5, i64* %9, align 8


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1be7b60]:   %47 = add i64 %46, -16


Removing: [0x5570d1badb58]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b69908]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b03c70]:   %43 = add i64 %7, -12


Uprime Matches: [0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Adj: [0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Removing: [0x5570d1bafa38]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b69908]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b03c70]:   %43 = add i64 %7, -12


Uprime Matches: [0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Adj: [0x5570d1bc9c20]:   %71 = add i64 %70, -8


Removing: [0x5570d1bb1c38]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b69908]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b03c70]:   %43 = add i64 %7, -12


Uprime Matches: [0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Adj: [0x5570d1ba5100]:   %85 = icmp ugt i64 %83, -33
[0x5570d1bc78e0]:   %93 = xor i64 %84, %83
[0x5570d1bcd8b0]:   %84 = add i64 %83, 32
[0x5570d1bd4b70]:   %101 = lshr i64 %83, 63
[0x5570d1bd9750]:   %107 = add i64 %83, 40
[0x5570d1bdbd50]:   %113 = add i64 %83, 48


Removing: [0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b03d30]:   %44 = add i64 %10, 22


Uprime Matches: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Adj: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Removing: [0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b03d30]:   %44 = add i64 %10, 22


Uprime Matches: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Adj: [0x5570d1bb47b0]:   %106 = add i64 %82, 7
[0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Removing: [0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b03d30]:   %44 = add i64 %10, 22


Uprime Matches: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Adj: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1c69120]:   %62 = add i64 %54, 10
[0x5570d1c6a5c0]:   %61 = add i64 %54, -76


Removing: [0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b03d30]:   %44 = add i64 %10, 22


Uprime Matches: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Adj: [0x5570d1b13c50]:   %68 = add i64 %66, -326
[0x5570d1bc9a40]:   %69 = add i64 %66, 17


Removing: [0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b03d30]:   %44 = add i64 %10, 22


Uprime Matches: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Adj: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Removing: [0x5570d1ba29b8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bc6e80]:   %16 = and i32 %15, 255


Removing: [0x5570d1ba9fe8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1


Removing: [0x5570d1bb33f8]:   %87 = trunc i64 %84 to i32
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1ba5000]:   %88 = and i32 %87, 255


Removing: [0x5570d1bb59f8]:   %100 = trunc i64 %99 to i8
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1


Removing: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
From the pot matches of: [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime : [0x5570d1b6a8f0]:   %20 = xor i8 %19, 1


Uprime Matches: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1
[0x5570d1bd0e30]:   %92 = xor i8 %91, 1


Adj: [0x5570d1ba9080]:   store i8 %25, i8* %26, align 1


Removing: [0x5570d1bc7ee0]:   %96 = and i8 %95, 1
From the pot matches of: [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime : [0x5570d1b6a8f0]:   %20 = xor i8 %19, 1


Uprime Matches: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1
[0x5570d1bd0e30]:   %92 = xor i8 %91, 1


Adj: [0x5570d1bd3140]:   store i8 %96, i8* %26, align 1


Removing: [0x5570d1b6f5e8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1ba6720]:   %8 = add i64 %7, -8
[0x5570d1ba78e0]:   %11 = add i64 %7, -40
[0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Removing: [0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Removing: [0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Removing: [0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bb47b0]:   %106 = add i64 %82, 7
[0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Removing: [0x5570d1bac858]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1c5fc10]:   %53 = add i64 %52, -16


Removing: [0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1c69120]:   %62 = add i64 %54, 10
[0x5570d1c6a5c0]:   %61 = add i64 %54, -76


Removing: [0x5570d1badb58]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Removing: [0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1b13c50]:   %68 = add i64 %66, -326
[0x5570d1bc9a40]:   %69 = add i64 %66, 17


Removing: [0x5570d1bafa38]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bc9c20]:   %71 = add i64 %70, -8


Removing: [0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Removing: [0x5570d1bb0288]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Removing: [0x5570d1bb0748]:   %80 = load i32, i32* %ECX.i9, align 4
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1babfb8]:   %81 = zext i32 %80 to i64


Removing: [0x5570d1bb1c38]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1ba5100]:   %85 = icmp ugt i64 %83, -33
[0x5570d1bc78e0]:   %93 = xor i64 %84, %83
[0x5570d1bcd8b0]:   %84 = add i64 %83, 32
[0x5570d1bd4b70]:   %101 = lshr i64 %83, 63
[0x5570d1bd9750]:   %107 = add i64 %83, 40
[0x5570d1bdbd50]:   %113 = add i64 %83, 48


Removing: [0x5570d1bcaf08]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1b10400]:   store i8 1, i8* %AL.i, align 1
[0x5570d1b64440]:   store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
[0x5570d1b648a0]:   store i64 %61, i64* %3, align 8
[0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8
[0x5570d1ba5760]:   store i64 %5, i64* %3, align 8
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1ba7c10]:   store i8 %13, i8* %14, align 1
[0x5570d1ba8050]:   store i8 %20, i8* %21, align 1
[0x5570d1ba9080]:   store i8 %25, i8* %26, align 1
[0x5570d1bac250]:   store i64 %39, i64* %40, align 1
[0x5570d1bb2a70]:   store double 0.000000e+00, double* %42, align 1
[0x5570d1bb2e00]:   store i64 %44, i64* %3, align 8
[0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1
[0x5570d1bc9b10]:   store i8 %28, i8* %29, align 1
[0x5570d1bca150]:   store i64 %69, i64* %72, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcb630]:   store i8 %37, i8* %38, align 1
[0x5570d1bcc170]:   store i32 %77, i32* %79, align 4
[0x5570d1bcc320]:   store i64 %68, i64* %3, align 8
[0x5570d1bcc760]:   store i64 0, i64* %RCX.i, align 8
[0x5570d1bcd020]:   store i64 %78, i64* %3, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bcd700]:   store i64 %81, i64* %RAX.i, align 8
[0x5570d1bce670]:   store i64 %106, i64* %3, align 8
[0x5570d1bcec40]:   store i8 %86, i8* %14, align 1
[0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1
[0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1
[0x5570d1bd3140]:   store i8 %96, i8* %26, align 1
[0x5570d1bd3d20]:   store i8 %98, i8* %29, align 1
[0x5570d1bd5220]:   store i64 %110, i64* %3, align 8
[0x5570d1bd6b10]:   store i8 %105, i8* %38, align 1
[0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1be8c10]:   store i32 0, i32* %45, align 4
[0x5570d1c5e900]:   store i64 %49, i64* %3, align 8
[0x5570d1c61120]:   store i64 %50, i64* %51, align 8
[0x5570d1c65860]:   store i64 %57, i64* %58, align 1
[0x5570d1c66630]:   store i64 %55, i64* %3, align 8
[0x5570d1c67dd0]:   store double 0.000000e+00, double* %60, align 1
[0x5570d1c704c0]:   store i64 %62, i64* %65, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1be7b60]:   %47 = add i64 %46, -16


Removing: [0x5570d1b6f728]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b03ef8]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b03fb0]:   %47 = add i64 %46, -16


Uprime Matches: [0x5570d1be7b60]:   %47 = add i64 %46, -16
[0x5570d1c5fc10]:   %53 = add i64 %52, -16


Adj: [0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8


Removing: [0x5570d1bb0288]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b03ef8]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b03fb0]:   %47 = add i64 %46, -16


Uprime Matches: [0x5570d1be7b60]:   %47 = add i64 %46, -16
[0x5570d1c5fc10]:   %53 = add i64 %52, -16


Adj: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Removing: [0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5
[0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Removing: [0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5
[0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1bb47b0]:   %106 = add i64 %82, 7
[0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Removing: [0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5
[0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1b13c50]:   %68 = add i64 %66, -326
[0x5570d1bc9a40]:   %69 = add i64 %66, 17


Removing: [0x5570d1bad308]:   %56 = inttoptr i64 %53 to i64*
From the pot matches of: [0x5570d1b6f788]:   %51 = inttoptr i64 %47 to i64*


Uprime : [0x5570d1b6f800]:   store i64 %50, i64* %51, align 8


Uprime Matches: [0x5570d1c61120]:   store i64 %50, i64* %51, align 8


Adj: [0x5570d1bad438]:   %57 = load i64, i64* %56, align 8


Removing: [0x5570d1b6f728]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6f868]:   %52 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b6f8e0]:   %53 = add i64 %52, -16


Uprime Matches: [0x5570d1be7b60]:   %47 = add i64 %46, -16
[0x5570d1c5fc10]:   %53 = add i64 %52, -16


Adj: [0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8


Removing: [0x5570d1bb0288]:   %75 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6f868]:   %52 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b6f8e0]:   %53 = add i64 %52, -16


Uprime Matches: [0x5570d1be7b60]:   %47 = add i64 %46, -16
[0x5570d1c5fc10]:   %53 = add i64 %52, -16


Adj: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Removing: [0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b6ffe0]:   %62 = add i64 %54, 10


Uprime Matches: [0x5570d1c69120]:   %62 = add i64 %54, 10


Adj: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Removing: [0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b6ffe0]:   %62 = add i64 %54, 10


Uprime Matches: [0x5570d1c69120]:   %62 = add i64 %54, 10


Adj: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Removing: [0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b6ffe0]:   %62 = add i64 %54, 10


Uprime Matches: [0x5570d1c69120]:   %62 = add i64 %54, 10


Adj: [0x5570d1bb47b0]:   %106 = add i64 %82, 7
[0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Removing: [0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b6ffe0]:   %62 = add i64 %54, 10


Uprime Matches: [0x5570d1c69120]:   %62 = add i64 %54, 10


Adj: [0x5570d1b13c50]:   %68 = add i64 %66, -326
[0x5570d1bc9a40]:   %69 = add i64 %66, 17


Removing: [0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b6ffe0]:   %62 = add i64 %54, 10


Uprime Matches: [0x5570d1c69120]:   %62 = add i64 %54, 10


Adj: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Removing: [0x5570d1ba96e8]:   %51 = inttoptr i64 %47 to i64*
From the pot matches of: [0x5570d1b6faa8]:   %56 = inttoptr i64 %53 to i64*


Uprime : [0x5570d1b6fb08]:   %57 = load i64, i64* %56, align 8


Uprime Matches: [0x5570d1b6f5e8]:   %7 = load i64, i64* %6, align 8
[0x5570d1b6f728]:   %4 = load i64, i64* %RBP.i, align 8
[0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
[0x5570d1baa4a8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
[0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
[0x5570d1bab8d8]:   %50 = load i64, i64* %40, align 1
[0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
[0x5570d1bac858]:   %52 = load i64, i64* %RBP.i, align 8
[0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
[0x5570d1bad438]:   %57 = load i64, i64* %56, align 8
[0x5570d1badb58]:   %63 = load i64, i64* %6, align 8
[0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
[0x5570d1bafa38]:   %70 = load i64, i64* %6, align 8
[0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
[0x5570d1bb0288]:   %75 = load i64, i64* %RBP.i, align 8
[0x5570d1bb03b8]:   %77 = load i32, i32* %EAX.i, align 4
[0x5570d1bb0748]:   %80 = load i32, i32* %ECX.i9, align 4
[0x5570d1bb1c38]:   %83 = load i64, i64* %6, align 8
[0x5570d1bb7d98]:   %109 = load i64, i64* %108, align 8
[0x5570d1bb7ff8]:   %112 = load i64, i64* %111, align 8
[0x5570d1bcaf08]:   %46 = load i64, i64* %RBP.i, align 8


Adj: [0x5570d1c61120]:   store i64 %50, i64* %51, align 8


Removing: [0x5570d1bb1c38]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b70048]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b700c0]:   %64 = add i64 %63, -8


Uprime Matches: [0x5570d1ba6720]:   %8 = add i64 %7, -8
[0x5570d1bc9c20]:   %71 = add i64 %70, -8
[0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Adj: [0x5570d1ba5100]:   %85 = icmp ugt i64 %83, -33
[0x5570d1bc78e0]:   %93 = xor i64 %84, %83
[0x5570d1bcd8b0]:   %84 = add i64 %83, 32
[0x5570d1bd4b70]:   %101 = lshr i64 %83, 63
[0x5570d1bd9750]:   %107 = add i64 %83, 40
[0x5570d1bdbd50]:   %113 = add i64 %83, 48


Removing: [0x5570d1ba6720]:   %8 = add i64 %7, -8
From the pot matches of: [0x5570d1b700c0]:   %64 = add i64 %63, -8


Uprime : [0x5570d1b6c4a0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1b14898]:   %9 = inttoptr i64 %8 to i64*
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba7b00]:   %12 = icmp ult i64 %8, 32
[0x5570d1ba84d0]:   %22 = xor i64 %8, %11
[0x5570d1bca760]:   %33 = lshr i64 %8, 63


Removing: [0x5570d1bafc98]:   %72 = inttoptr i64 %71 to i64*
From the pot matches of: [0x5570d1b6c3a8]:   %65 = inttoptr i64 %64 to i64*


Uprime : [0x5570d1b6c420]:   store i64 %62, i64* %65, align 8


Uprime Matches: [0x5570d1c704c0]:   store i64 %62, i64* %65, align 8


Adj: [0x5570d1bca150]:   store i64 %69, i64* %72, align 8


Removing: [0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b70be0]:   %69 = add i64 %67, 17


Uprime Matches: [0x5570d1bc9a40]:   %69 = add i64 %66, 17


Adj: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Removing: [0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b70be0]:   %69 = add i64 %67, 17


Uprime Matches: [0x5570d1bc9a40]:   %69 = add i64 %66, 17


Adj: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Removing: [0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b70be0]:   %69 = add i64 %67, 17


Uprime Matches: [0x5570d1bc9a40]:   %69 = add i64 %66, 17


Adj: [0x5570d1bb47b0]:   %106 = add i64 %82, 7
[0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Removing: [0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b70be0]:   %69 = add i64 %67, 17


Uprime Matches: [0x5570d1bc9a40]:   %69 = add i64 %66, 17


Adj: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1c69120]:   %62 = add i64 %54, 10
[0x5570d1c6a5c0]:   %61 = add i64 %54, -76


Removing: [0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b70be0]:   %69 = add i64 %67, 17


Uprime Matches: [0x5570d1bc9a40]:   %69 = add i64 %66, 17


Adj: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Removing: [0x5570d1bb1c38]:   %83 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b70c48]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b70cc0]:   %71 = add i64 %70, -8


Uprime Matches: [0x5570d1ba6720]:   %8 = add i64 %7, -8
[0x5570d1bc9c20]:   %71 = add i64 %70, -8
[0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Adj: [0x5570d1ba5100]:   %85 = icmp ugt i64 %83, -33
[0x5570d1bc78e0]:   %93 = xor i64 %84, %83
[0x5570d1bcd8b0]:   %84 = add i64 %83, 32
[0x5570d1bd4b70]:   %101 = lshr i64 %83, 63
[0x5570d1bd9750]:   %107 = add i64 %83, 40
[0x5570d1bdbd50]:   %113 = add i64 %83, 48


Removing: [0x5570d1ba6720]:   %8 = add i64 %7, -8
From the pot matches of: [0x5570d1b70cc0]:   %71 = add i64 %70, -8


Uprime : [0x5570d1b70e20]:   store i64 %71, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x5570d1ba79f0]:   store i64 %11, i64* %6, align 8
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8
[0x5570d1bcd5a0]:   store i64 %84, i64* %6, align 8
[0x5570d1bd9ac0]:   store i64 %107, i64* %6, align 8
[0x5570d1bdc050]:   store i64 %113, i64* %6, align 8
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Adj: [0x5570d1b14898]:   %9 = inttoptr i64 %8 to i64*
[0x5570d1ba74e0]:   store i64 %8, i64* %RBP.i, align 8
[0x5570d1ba7b00]:   %12 = icmp ult i64 %8, 32
[0x5570d1ba84d0]:   %22 = xor i64 %8, %11
[0x5570d1bca760]:   %33 = lshr i64 %8, 63


Removing: [0x5570d1badc88]:   %65 = inttoptr i64 %64 to i64*
From the pot matches of: [0x5570d1b70d28]:   %72 = inttoptr i64 %71 to i64*


Uprime : [0x5570d1b70da0]:   store i64 %69, i64* %72, align 8


Uprime Matches: [0x5570d1bca150]:   store i64 %69, i64* %72, align 8


Adj: [0x5570d1c704c0]:   store i64 %62, i64* %65, align 8


Removing: [0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5
[0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Removing: [0x5570d1bac348]:   %82 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5
[0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1bb47b0]:   %106 = add i64 %82, 7
[0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Removing: [0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5
[0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1b13c50]:   %68 = add i64 %66, -326
[0x5570d1bc9a40]:   %69 = add i64 %66, 17


Removing: [0x5570d1b6f728]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b71268]:   %75 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b71320]:   %76 = add i64 %75, -20


Uprime Matches: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Adj: [0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8


Removing: [0x5570d1bac858]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b71268]:   %75 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b71320]:   %76 = add i64 %75, -20


Uprime Matches: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Adj: [0x5570d1c5fc10]:   %53 = add i64 %52, -16


Removing: [0x5570d1bcaf08]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b71268]:   %75 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b71320]:   %76 = add i64 %75, -20


Uprime Matches: [0x5570d1bcc850]:   %76 = add i64 %75, -20


Adj: [0x5570d1be7b60]:   %47 = add i64 %46, -16


Removing: [0x5570d1b98b48]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b729c0]:   %110 = add i64 %82, 8


Uprime Matches: [0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Adj: [0x5570d1bb2cd0]:   %44 = add i64 %10, 22


Removing: [0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b729c0]:   %110 = add i64 %82, 8


Uprime Matches: [0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Adj: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Removing: [0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b729c0]:   %110 = add i64 %82, 8


Uprime Matches: [0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Adj: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1c69120]:   %62 = add i64 %54, 10
[0x5570d1c6a5c0]:   %61 = add i64 %54, -76


Removing: [0x5570d1bae278]:   %66 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b729c0]:   %110 = add i64 %82, 8


Uprime Matches: [0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Adj: [0x5570d1b13c50]:   %68 = add i64 %66, -326
[0x5570d1bc9a40]:   %69 = add i64 %66, 17


Removing: [0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b729c0]:   %110 = add i64 %82, 8


Uprime Matches: [0x5570d1bd9dc0]:   %110 = add i64 %82, 8


Adj: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Removing: [0x5570d1b6f5e8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b71768]:   %83 = load i64, i64* %RSP, align 8


Uprime : [0x5570d1b72c40]:   %113 = add i64 %83, 48


Uprime Matches: [0x5570d1bdbd50]:   %113 = add i64 %83, 48


Adj: [0x5570d1ba6720]:   %8 = add i64 %7, -8
[0x5570d1ba78e0]:   %11 = add i64 %7, -40
[0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Removing: [0x5570d1badb58]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b71768]:   %83 = load i64, i64* %RSP, align 8


Uprime : [0x5570d1b72c40]:   %113 = add i64 %83, 48


Uprime Matches: [0x5570d1bdbd50]:   %113 = add i64 %83, 48


Adj: [0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Removing: [0x5570d1bafa38]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b71768]:   %83 = load i64, i64* %RSP, align 8


Uprime : [0x5570d1b72c40]:   %113 = add i64 %83, 48


Uprime Matches: [0x5570d1bdbd50]:   %113 = add i64 %83, 48


Adj: [0x5570d1bc9c20]:   %71 = add i64 %70, -8


Removing: [0x5570d1ba29b8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bc6e80]:   %16 = and i32 %15, 255


Removing: [0x5570d1ba9fe8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bbbb60]:   store i8 %31, i8* %32, align 1


Removing: [0x5570d1bb33f8]:   %87 = trunc i64 %84 to i32
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1ba5000]:   %88 = and i32 %87, 255


Removing: [0x5570d1bb59f8]:   %100 = trunc i64 %99 to i8
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
[0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bc7ee0]:   %96 = and i8 %95, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bd2f20]:   store i8 %100, i8* %32, align 1


Removing: [0x5570d1ba71e0]:   %25 = and i8 %24, 1
From the pot matches of: [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime : [0x5570d1b71d40]:   %92 = xor i8 %91, 1


Uprime Matches: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1
[0x5570d1bd0e30]:   %92 = xor i8 %91, 1


Adj: [0x5570d1ba9080]:   store i8 %25, i8* %26, align 1


Removing: [0x5570d1bc7ee0]:   %96 = and i8 %95, 1
From the pot matches of: [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime : [0x5570d1b71d40]:   %92 = xor i8 %91, 1


Uprime Matches: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1
[0x5570d1bd0e30]:   %92 = xor i8 %91, 1


Adj: [0x5570d1bd3140]:   store i8 %96, i8* %26, align 1

Round: 1

Removing: [0x5570d1ba4358]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1ba71e0]:   %25 = and i8 %24, 1


Removing: [0x5570d1bb4ce8]:   %95 = trunc i64 %94 to i8
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bc7ee0]:   %96 = and i8 %95, 1


Removing: [0x5570d1b6f728]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1bac250]:   store i64 %39, i64* %40, align 1


Adj: [0x5570d1ba4cb0]:   store i64 %4, i64* %9, align 8


Removing: [0x5570d1bab8d8]:   %50 = load i64, i64* %40, align 1
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1bac250]:   store i64 %39, i64* %40, align 1


Adj: [0x5570d1c61120]:   store i64 %50, i64* %51, align 8


Removing: [0x5570d1bad438]:   %57 = load i64, i64* %56, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1bac250]:   store i64 %39, i64* %40, align 1


Adj: [0x5570d1c65860]:   store i64 %57, i64* %58, align 1


Removing: [0x5570d1bb03b8]:   %77 = load i32, i32* %EAX.i, align 4
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1bac250]:   store i64 %39, i64* %40, align 1


Adj: [0x5570d1bcc170]:   store i32 %77, i32* %79, align 4


Removing: [0x5570d1bb7d98]:   %109 = load i64, i64* %108, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1bac250]:   store i64 %39, i64* %40, align 1


Adj: [0x5570d1bd9940]:   store i64 %109, i64* %RBP.i, align 8


Removing: [0x5570d1bb7ff8]:   %112 = load i64, i64* %111, align 8
From the pot matches of: [0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8


Uprime : [0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280


Uprime Matches: [0x5570d1bac250]:   store i64 %39, i64* %40, align 1


Adj: [0x5570d1bdbbd0]:   store i64 %112, i64* %3, align 8


Removing: [0x5570d1c5fc10]:   %53 = add i64 %52, -16
From the pot matches of: [0x5570d1b03fb0]:   %47 = add i64 %46, -16


Uprime : [0x5570d1b6f788]:   %51 = inttoptr i64 %47 to i64*


Uprime Matches: [0x5570d1ba96e8]:   %51 = inttoptr i64 %47 to i64*


Adj: [0x5570d1bad308]:   %56 = inttoptr i64 %53 to i64*


Removing: [0x5570d1be7b60]:   %47 = add i64 %46, -16
From the pot matches of: [0x5570d1b6f8e0]:   %53 = add i64 %52, -16


Uprime : [0x5570d1b6faa8]:   %56 = inttoptr i64 %53 to i64*


Uprime Matches: [0x5570d1bad308]:   %56 = inttoptr i64 %53 to i64*


Adj: [0x5570d1ba96e8]:   %51 = inttoptr i64 %47 to i64*


Removing: [0x5570d1b6f5e8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b70048]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b700c0]:   %64 = add i64 %63, -8


Uprime Matches: [0x5570d1bc9c20]:   %71 = add i64 %70, -8
[0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Adj: [0x5570d1ba6720]:   %8 = add i64 %7, -8
[0x5570d1ba78e0]:   %11 = add i64 %7, -40
[0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Removing: [0x5570d1bc9c20]:   %71 = add i64 %70, -8
From the pot matches of: [0x5570d1b700c0]:   %64 = add i64 %63, -8


Uprime : [0x5570d1b6c3a8]:   %65 = inttoptr i64 %64 to i64*


Uprime Matches: [0x5570d1badc88]:   %65 = inttoptr i64 %64 to i64*


Adj: [0x5570d1bafc98]:   %72 = inttoptr i64 %71 to i64*
[0x5570d1bca4f0]:   store i64 %71, i64* %6, align 8


Removing: [0x5570d1b6f5e8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b70c48]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b70cc0]:   %71 = add i64 %70, -8


Uprime Matches: [0x5570d1bc9c20]:   %71 = add i64 %70, -8
[0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Adj: [0x5570d1ba6720]:   %8 = add i64 %7, -8
[0x5570d1ba78e0]:   %11 = add i64 %7, -40
[0x5570d1bb2ba0]:   %43 = add i64 %7, -12


Removing: [0x5570d1c6c0f0]:   %64 = add i64 %63, -8
From the pot matches of: [0x5570d1b70cc0]:   %71 = add i64 %70, -8


Uprime : [0x5570d1b70d28]:   %72 = inttoptr i64 %71 to i64*


Uprime Matches: [0x5570d1bafc98]:   %72 = inttoptr i64 %71 to i64*


Adj: [0x5570d1badc88]:   %65 = inttoptr i64 %64 to i64*
[0x5570d1c7ac00]:   store i64 %64, i64* %6, align 8


Removing: [0x5570d1ba4358]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1ba71e0]:   %25 = and i8 %24, 1


Removing: [0x5570d1bb4ce8]:   %95 = trunc i64 %94 to i8
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1ba7e70]:   %19 = and i8 %18, 1
[0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1bc7ee0]:   %96 = and i8 %95, 1

Round: 2

Removing: [0x5570d1bac858]:   %52 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b03ef8]:   %46 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b03fb0]:   %47 = add i64 %46, -16


Uprime Matches: [0x5570d1be7b60]:   %47 = add i64 %46, -16


Adj: [0x5570d1c5fc10]:   %53 = add i64 %52, -16


Removing: [0x5570d1bcaf08]:   %46 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5570d1b6f868]:   %52 = load i64, i64* %RBP, align 8


Uprime : [0x5570d1b6f8e0]:   %53 = add i64 %52, -16


Uprime Matches: [0x5570d1c5fc10]:   %53 = add i64 %52, -16


Adj: [0x5570d1be7b60]:   %47 = add i64 %46, -16


Removing: [0x5570d1bafa38]:   %70 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b70048]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b700c0]:   %64 = add i64 %63, -8


Uprime Matches: [0x5570d1c6c0f0]:   %64 = add i64 %63, -8


Adj: [0x5570d1bc9c20]:   %71 = add i64 %70, -8


Removing: [0x5570d1badb58]:   %63 = load i64, i64* %6, align 8
From the pot matches of: [0x5570d1b70c48]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5570d1b70cc0]:   %71 = add i64 %70, -8


Uprime Matches: [0x5570d1bc9c20]:   %71 = add i64 %70, -8


Adj: [0x5570d1c6c0f0]:   %64 = add i64 %63, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x5570d1b03c70]:   %43 = add i64 %7, -12 {
	[0x5570d1bb2ba0]:  %43 = add i64 %7, -12
	}

[0x5570d1b03d30]:   %44 = add i64 %10, 22 {
	[0x5570d1bb2cd0]:  %44 = add i64 %10, 22
	}

[0x5570d1b03db0]:   store i64 %44, i64* %PC, align 8 {
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	}

[0x5570d1b03e18]:   %45 = inttoptr i64 %43 to i32* {
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	}

[0x5570d1b03e90]:   store i32 0, i32* %45, align 4 {
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	}

[0x5570d1b03ef8]:   %46 = load i64, i64* %RBP, align 8 {
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b03fb0]:   %47 = add i64 %46, -16 {
	[0x5570d1be7b60]:  %47 = add i64 %46, -16
	}

[0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8 {
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	}

[0x5570d1b04090]:   %49 = add i64 %48, 5 {
	[0x5570d1bcc920]:  %78 = add i64 %74, 5
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	[0x5570d1be7d40]:  %49 = add i64 %48, 5
	}

[0x5570d1b04110]:   store i64 %49, i64* %PC, align 8 {
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	}

[0x5570d1b04178]:   %50 = load i64, i64* %40, align 1 {
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	}

[0x5570d1b683f0]: %struct.State* %0 {
	[0x5570d1bb31a0]:%struct.State.1* %0
	}

[0x5570d1b68430]: i64 %1 {
	[0x5570d1bb38c0]:i64 %1
	}

[0x5570d1b68cf0]: %struct.Memory* %2 {
	[0x5570d1bcf1c0]:%struct.Memory.32* %2
	}

[0x5570d1b68eb8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x5570d1b68f90]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5570d1b4b930]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5570d1b69068]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x5570d1b0cd48]:  %67 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x5570d1b690d8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b691b8]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x5570d1b0d148]:  %73 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x5570d1b69278]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	}

[0x5570d1b69328]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x5570d1ba5ae8]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	}

[0x5570d1b693e8]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x5570d1b17148]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	}

[0x5570d1b694f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5570d1b4cd60]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5570d1b69600]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5570d1b4c5e0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5570d1b69710]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5570d1b4bcb0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5570d1b697a8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b69820]:   %6 = add i64 %1, 1 {
	[0x5570d1ba5650]:  %5 = add i64 %1, 1
	}

[0x5570d1b698a0]:   store i64 %6, i64* %PC, align 8 {
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	}

[0x5570d1b69908]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	}

[0x5570d1b69980]:   %8 = add i64 %7, -8 {
	[0x5570d1ba6720]:  %8 = add i64 %7, -8
	}

[0x5570d1b69a00]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5570d1bc9180]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5570d1b69a78]:   %9 = inttoptr i64 %8 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5570d1b69af0]:   store i64 %5, i64* %9, align 8 {
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	}

[0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8 {
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	}

[0x5570d1b69bd0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5570d1b69c90]:   %11 = add i64 %7, -40 {
	[0x5570d1ba78e0]:  %11 = add i64 %7, -40
	}

[0x5570d1b69d10]:   store i64 %11, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	}

[0x5570d1b69dd0]:   %12 = icmp ult i64 %8, 32 {
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	}

[0x5570d1b69e38]:   %13 = zext i1 %12 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	}

[0x5570d1b69ee0]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5570d1ba52b0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x5570d1b69f70]:   store i8 %13, i8* %14, align 1, !tbaa !1261 {
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	}

[0x5570d1b6a5e8]:   %15 = trunc i64 %11 to i32 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	}

[0x5570d1b6a660]:   %16 = and i32 %15, 255 {
	[0x5570d1bc6e80]:  %16 = and i32 %15, 255
	}

[0x5570d1b6a6e0]:   store i8 %31, i8* %32, align 1, !tbaa !1278 {
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	}

[0x5570d1b6a760]:   %33 = lshr i64 %8, 63 {
	[0x5570d1bca760]:  %33 = lshr i64 %8, 63
	}

[0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8 {
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	}

[0x5570d1b6a870]:   %19 = and i8 %18, 1 {
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b6a8f0]:   %20 = xor i8 %19, 1 {
	[0x5570d1ba7f40]:  %20 = xor i8 %19, 1
	[0x5570d1bd0e30]:  %92 = xor i8 %91, 1
	}

[0x5570d1b6a9a0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5570d1ba8b20]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5570d1b6aa30]:   store i8 %20, i8* %21, align 1, !tbaa !1275 {
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	}

[0x5570d1b6b0c0]:   %22 = xor i64 %8, %11 {
	[0x5570d1ba84d0]:  %22 = xor i64 %8, %11
	}

[0x5570d1b6b140]:   %23 = lshr i64 %22, 4 {
	[0x5570d1ba85a0]:  %23 = lshr i64 %22, 4
	}

[0x5570d1b6b1a8]:   %24 = trunc i64 %23 to i8 {
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	}

[0x5570d1b6b220]:   %25 = and i8 %24, 1 {
	[0x5570d1ba71e0]:  %25 = and i8 %24, 1
	}

[0x5570d1b6b2d0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5570d1ba9800]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5570d1b6b360]:   store i8 %25, i8* %26, align 1, !tbaa !1276 {
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	}

[0x5570d1b6b9f0]:   %27 = icmp eq i64 %11, 0 {
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	}

[0x5570d1b6ba58]:   %28 = zext i1 %27 to i8 {
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	}

[0x5570d1b6bb00]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5570d1bb0600]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5570d1b6bb90]:   store i8 %28, i8* %29, align 1, !tbaa !1277 {
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	}

[0x5570d1b6c220]:   %30 = lshr i64 %11, 63 {
	[0x5570d1ba6af0]:  %30 = lshr i64 %11, 63
	}

[0x5570d1b6c288]:   %31 = trunc i64 %30 to i8 {
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	}

[0x5570d1b6c330]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5570d1bb0860]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5570d1b6c3a8]:   %65 = inttoptr i64 %64 to i64* {
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	}

[0x5570d1b6c420]:   store i64 %62, i64* %65, align 8 {
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	}

[0x5570d1b6c4a0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6c520]:   store i64 %61, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	}

[0x5570d1b6cbe0]:   %34 = xor i64 %30, %33 {
	[0x5570d1bca9f0]:  %34 = xor i64 %30, %33
	}

[0x5570d1b6cc60]:   %35 = add nuw nsw i64 %34, %33 {
	[0x5570d1bca8e0]:  %35 = add nuw nsw i64 %34, %33
	}

[0x5570d1b6cce0]:   %36 = icmp eq i64 %35, 2 {
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	}

[0x5570d1b6cd48]:   %37 = zext i1 %36 to i8 {
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	}

[0x5570d1b6cdf0]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5570d1bb0990]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5570d1b6ce80]:   store i8 %37, i8* %38, align 1, !tbaa !1279 {
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	}

[0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8 {
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	}

[0x5570d1b6d6e0]:   %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5570d1bbc820]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280 {
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	}

[0x5570d1b6d9b0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x5570d1bca040]:  %41 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x5570d1b6da28]:   %42 = bitcast i64* %41 to double* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	}

[0x5570d1b6e500]:   store double 0.000000e+00, double* %42, align 1, !tbaa !1280 {
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	}

[0x5570d1b6f788]:   %51 = inttoptr i64 %47 to i64* {
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	}

[0x5570d1b6f800]:   store i64 %50, i64* %51, align 8 {
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	}

[0x5570d1b6f868]:   %52 = load i64, i64* %RBP, align 8 {
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b6f8e0]:   %53 = add i64 %52, -16 {
	[0x5570d1c5fc10]:  %53 = add i64 %52, -16
	}

[0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8 {
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	}

[0x5570d1b6f9c0]:   %55 = add i64 %54, 5 {
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	}

[0x5570d1b6fa40]:   store i64 %55, i64* %PC, align 8 {
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	}

[0x5570d1b6faa8]:   %56 = inttoptr i64 %53 to i64* {
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	}

[0x5570d1b6fb08]:   %57 = load i64, i64* %56, align 8 {
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	}

[0x5570d1b6fc10]:   %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0 {
	[0x5570d1bcd4a0]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
	}

[0x5570d1b6fca0]:   store i64 %57, i64* %58, align 1, !tbaa !1280 {
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	}

[0x5570d1b6fdb0]:   %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x5570d1bd3ac0]:  %59 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x5570d1b6fe28]:   %60 = bitcast i64* %59 to double* {
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	}

[0x5570d1b6fea0]:   store double 0.000000e+00, double* %60, align 1, !tbaa !1280 {
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	}

[0x5570d1b6ff60]:   %61 = add i64 %54, -76 {
	[0x5570d1c6a5c0]:  %61 = add i64 %54, -76
	}

[0x5570d1b6ffe0]:   %62 = add i64 %54, 10 {
	[0x5570d1c69120]:  %62 = add i64 %54, 10
	}

[0x5570d1b70048]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	}

[0x5570d1b700c0]:   %64 = add i64 %63, -8 {
	[0x5570d1c6c0f0]:  %64 = add i64 %63, -8
	}

[0x5570d1b706c0]:   %66 = tail call %struct.Memory* @sub_4004c0_fun(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2) {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	}

[0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8 {
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	}

[0x5570d1b708d0]:   store i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 16), i64* %RDI, align 8, !tbaa !1257 {
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	}

[0x5570d1b70950]:   store i8 1, i8* %AL, align 1, !tbaa !1282 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	}

[0x5570d1b70b20]:   %68 = add i64 %67, -326 {
	[0x5570d1b13c50]:  %68 = add i64 %66, -326
	}

[0x5570d1b70be0]:   %69 = add i64 %67, 17 {
	[0x5570d1bc9a40]:  %69 = add i64 %66, 17
	}

[0x5570d1b70c48]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	}

[0x5570d1b70cc0]:   %71 = add i64 %70, -8 {
	[0x5570d1bc9c20]:  %71 = add i64 %70, -8
	}

[0x5570d1b70d28]:   %72 = inttoptr i64 %71 to i64* {
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	}

[0x5570d1b70da0]:   store i64 %69, i64* %72, align 8 {
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	}

[0x5570d1b70e20]:   store i64 %71, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	}

[0x5570d1b70ea0]:   store i64 %68, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	}

[0x5570d1b710c8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66) {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x5570d1bb0e50]:  %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
	}

[0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8 {
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	}

[0x5570d1b71200]:   store i64 0, i64* %RCX, align 8, !tbaa !1257 {
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	}

[0x5570d1b71268]:   %75 = load i64, i64* %RBP, align 8 {
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71320]:   %76 = add i64 %75, -20 {
	[0x5570d1bcc850]:  %76 = add i64 %75, -20
	}

[0x5570d1b71388]:   %77 = load i32, i32* %EAX, align 4 {
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	}

[0x5570d1b71400]:   %78 = add i64 %74, 5 {
	[0x5570d1bcc920]:  %78 = add i64 %74, 5
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	[0x5570d1be7d40]:  %49 = add i64 %48, 5
	}

[0x5570d1b71480]:   store i64 %78, i64* %PC, align 8 {
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	}

[0x5570d1b714e8]:   %79 = inttoptr i64 %76 to i32* {
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	}

[0x5570d1b71560]:   store i32 %77, i32* %79, align 4 {
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	}

[0x5570d1b715c8]:   %80 = load i32, i32* %ECX, align 4 {
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	}

[0x5570d1b71628]:   %81 = zext i32 %80 to i64 {
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	}

[0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8 {
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	}

[0x5570d1b71700]:   store i64 %81, i64* %RAX, align 8, !tbaa !1257 {
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	}

[0x5570d1b71768]:   %83 = load i64, i64* %RSP, align 8 {
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	}

[0x5570d1b717e0]:   %84 = add i64 %83, 32 {
	[0x5570d1bcd8b0]:  %84 = add i64 %83, 32
	}

[0x5570d1b71860]:   store i64 %84, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	}

[0x5570d1b71920]:   %85 = icmp ugt i64 %83, -33 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	}

[0x5570d1b71988]:   %86 = zext i1 %85 to i8 {
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	}

[0x5570d1b71a00]:   store i8 %86, i8* %14, align 1, !tbaa !1261 {
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	}

[0x5570d1b71a68]:   %87 = trunc i64 %84 to i32 {
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	}

[0x5570d1b71ae0]:   %88 = and i32 %87, 255 {
	[0x5570d1ba5000]:  %88 = and i32 %87, 255
	}

[0x5570d1b71b80]:   %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9 {
	[0x5570d1bd02d0]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x5570d1b71c48]:   %90 = trunc i32 %89 to i8 {
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	}

[0x5570d1b71cc0]:   %91 = and i8 %90, 1 {
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b71d40]:   %92 = xor i8 %91, 1 {
	[0x5570d1ba7f40]:  %20 = xor i8 %19, 1
	[0x5570d1bd0e30]:  %92 = xor i8 %91, 1
	}

[0x5570d1b71dc0]:   store i8 %92, i8* %21, align 1, !tbaa !1275 {
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	}

[0x5570d1b71e40]:   %93 = xor i64 %84, %83 {
	[0x5570d1bc78e0]:  %93 = xor i64 %84, %83
	}

[0x5570d1b71ec0]:   %94 = lshr i64 %93, 4 {
	[0x5570d1bc7a60]:  %94 = lshr i64 %93, 4
	}

[0x5570d1b71f28]:   %95 = trunc i64 %94 to i8 {
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	}

[0x5570d1b71fa0]:   %96 = and i8 %95, 1 {
	[0x5570d1bc7ee0]:  %96 = and i8 %95, 1
	}

[0x5570d1b72020]:   store i8 %96, i8* %26, align 1, !tbaa !1276 {
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	}

[0x5570d1b720a0]:   %97 = icmp eq i64 %84, 0 {
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	}

[0x5570d1b72108]:   %98 = zext i1 %97 to i8 {
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	}

[0x5570d1b72180]:   store i8 %98, i8* %29, align 1, !tbaa !1277 {
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	}

[0x5570d1b72200]:   %99 = lshr i64 %84, 63 {
	[0x5570d1bd3e50]:  %99 = lshr i64 %84, 63
	}

[0x5570d1b72268]:   %100 = trunc i64 %99 to i8 {
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b722e0]:   store i8 %100, i8* %32, align 1, !tbaa !1278 {
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	}

[0x5570d1b72360]:   %101 = lshr i64 %83, 63 {
	[0x5570d1bd4b70]:  %101 = lshr i64 %83, 63
	}

[0x5570d1b723e0]:   %102 = xor i64 %99, %101 {
	[0x5570d1bd6210]:  %102 = xor i64 %99, %101
	}

[0x5570d1b72460]:   %103 = add nuw nsw i64 %102, %99 {
	[0x5570d1bd65a0]:  %103 = add nuw nsw i64 %102, %99
	}

[0x5570d1b724e0]:   %104 = icmp eq i64 %103, 2 {
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b72548]:   %105 = zext i1 %104 to i8 {
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b725c0]:   store i8 %105, i8* %38, align 1, !tbaa !1279 {
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	}

[0x5570d1b72640]:   %106 = add i64 %82, 7 {
	[0x5570d1bb47b0]:  %106 = add i64 %82, 7
	}

[0x5570d1b726c0]:   store i64 %106, i64* %PC, align 8 {
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	}

[0x5570d1b72780]:   %107 = add i64 %83, 40 {
	[0x5570d1bd9750]:  %107 = add i64 %83, 40
	}

[0x5570d1b727e8]:   %108 = inttoptr i64 %84 to i64* {
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	}

[0x5570d1b72848]:   %109 = load i64, i64* %108, align 8 {
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	}

[0x5570d1b728c0]:   store i64 %109, i64* %RBP, align 8, !tbaa !1257 {
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	}

[0x5570d1b72940]:   store i64 %107, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	}

[0x5570d1b729c0]:   %110 = add i64 %82, 8 {
	[0x5570d1bd9dc0]:  %110 = add i64 %82, 8
	}

[0x5570d1b72a40]:   store i64 %110, i64* %PC, align 8 {
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	}

[0x5570d1b72aa8]:   %111 = inttoptr i64 %107 to i64* {
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b72b08]:   %112 = load i64, i64* %111, align 8 {
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	}

[0x5570d1b72b80]:   store i64 %112, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	}

[0x5570d1b72c40]:   %113 = add i64 %83, 48 {
	[0x5570d1bdbd50]:  %113 = add i64 %83, 48
	}

[0x5570d1b72cc0]:   store i64 %113, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	}

[0x5570d1b72d28]:   ret %struct.Memory* %73 {
	[0x5570d1bb84b8]:  ret %struct.Memory.32* %call2_400522
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5570d1b68d70]: block_4004f0 {
	[0x5570d1bc7590]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5570d1bd0e30]:   %92 = xor i8 %91, 1
From the pot matches of: [0x5570d1b6a8f0]:   %20 = xor i8 %19, 1


Uprime : [0x5570d1b6aa30]:   store i8 %20, i8* %21, align 1, !tbaa !1275


Uprime Matches: [0x5570d1ba8050]:   store i8 %20, i8* %21, align 1


Adj: [0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1


Removing: [0x5570d1bcc920]:   %78 = add i64 %74, 5
From the pot matches of: [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime : [0x5570d1b04110]:   store i64 %49, i64* %PC, align 8


Uprime Matches: [0x5570d1c5e900]:   store i64 %49, i64* %3, align 8


Adj: [0x5570d1bcd020]:   store i64 %78, i64* %3, align 8


Removing: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
From the pot matches of: [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime : [0x5570d1b04110]:   store i64 %49, i64* %PC, align 8


Uprime Matches: [0x5570d1c5e900]:   store i64 %49, i64* %3, align 8


Adj: [0x5570d1c66630]:   store i64 %55, i64* %3, align 8


Removing: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
From the pot matches of: [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime : [0x5570d1b71480]:   store i64 %78, i64* %PC, align 8


Uprime Matches: [0x5570d1bcd020]:   store i64 %78, i64* %3, align 8


Adj: [0x5570d1c66630]:   store i64 %55, i64* %3, align 8


Removing: [0x5570d1be7d40]:   %49 = add i64 %48, 5
From the pot matches of: [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime : [0x5570d1b71480]:   store i64 %78, i64* %PC, align 8


Uprime Matches: [0x5570d1bcd020]:   store i64 %78, i64* %3, align 8


Adj: [0x5570d1c5e900]:   store i64 %49, i64* %3, align 8


Removing: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1
From the pot matches of: [0x5570d1b71d40]:   %92 = xor i8 %91, 1


Uprime : [0x5570d1b71dc0]:   store i8 %92, i8* %21, align 1, !tbaa !1275


Uprime Matches: [0x5570d1bd0f20]:   store i8 %92, i8* %21, align 1


Adj: [0x5570d1ba8050]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x5570d1bd07e0]:   %91 = and i8 %90, 1
From the pot matches of: [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime : [0x5570d1b6a8f0]:   %20 = xor i8 %19, 1


Uprime Matches: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1


Adj: [0x5570d1bd0e30]:   %92 = xor i8 %91, 1


Removing: [0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime Matches: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1c69120]:   %62 = add i64 %54, 10
[0x5570d1c6a5c0]:   %61 = add i64 %54, -76


Removing: [0x5570d1bafef8]:   %74 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b04090]:   %49 = add i64 %48, 5


Uprime Matches: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Adj: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Removing: [0x5570d1bab7a8]:   %48 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Adj: [0x5570d1be7d40]:   %49 = add i64 %48, 5


Removing: [0x5570d1bac988]:   %54 = load i64, i64* %3, align 8
From the pot matches of: [0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8


Uprime : [0x5570d1b71400]:   %78 = add i64 %74, 5


Uprime Matches: [0x5570d1bcc920]:   %78 = add i64 %74, 5


Adj: [0x5570d1bd8a30]:   %55 = add i64 %54, 5
[0x5570d1c69120]:   %62 = add i64 %54, 10
[0x5570d1c6a5c0]:   %61 = add i64 %54, -76


Removing: [0x5570d1ba7e70]:   %19 = and i8 %18, 1
From the pot matches of: [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime : [0x5570d1b71d40]:   %92 = xor i8 %91, 1


Uprime Matches: [0x5570d1bd0e30]:   %92 = xor i8 %91, 1


Adj: [0x5570d1ba7f40]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x5570d1bb4238]:   %90 = trunc i32 %89 to i8
From the pot matches of: [0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8


Uprime : [0x5570d1b6a870]:   %19 = and i8 %18, 1


Uprime Matches: [0x5570d1ba7e70]:   %19 = and i8 %18, 1


Adj: [0x5570d1bd07e0]:   %91 = and i8 %90, 1


Removing: [0x5570d1ba4bf8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x5570d1b71c48]:   %90 = trunc i32 %89 to i8


Uprime : [0x5570d1b71cc0]:   %91 = and i8 %90, 1


Uprime Matches: [0x5570d1bd07e0]:   %91 = and i8 %90, 1


Adj: [0x5570d1ba7e70]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x5570d1b03c70]:   %43 = add i64 %7, -12 {
	[0x5570d1bb2ba0]:  %43 = add i64 %7, -12
	}

[0x5570d1b03d30]:   %44 = add i64 %10, 22 {
	[0x5570d1bb2cd0]:  %44 = add i64 %10, 22
	}

[0x5570d1b03db0]:   store i64 %44, i64* %PC, align 8 {
	[0x5570d1bb2e00]:  store i64 %44, i64* %3, align 8
	}

[0x5570d1b03e18]:   %45 = inttoptr i64 %43 to i32* {
	[0x5570d1baabc8]:  %45 = inttoptr i64 %43 to i32*
	}

[0x5570d1b03e90]:   store i32 0, i32* %45, align 4 {
	[0x5570d1be8c10]:  store i32 0, i32* %45, align 4
	}

[0x5570d1b03ef8]:   %46 = load i64, i64* %RBP, align 8 {
	[0x5570d1bcaf08]:  %46 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b03fb0]:   %47 = add i64 %46, -16 {
	[0x5570d1be7b60]:  %47 = add i64 %46, -16
	}

[0x5570d1b04018]:   %48 = load i64, i64* %PC, align 8 {
	[0x5570d1bab7a8]:  %48 = load i64, i64* %3, align 8
	}

[0x5570d1b04090]:   %49 = add i64 %48, 5 {
	[0x5570d1be7d40]:  %49 = add i64 %48, 5
	}

[0x5570d1b04110]:   store i64 %49, i64* %PC, align 8 {
	[0x5570d1c5e900]:  store i64 %49, i64* %3, align 8
	}

[0x5570d1b04178]:   %50 = load i64, i64* %40, align 1 {
	[0x5570d1bab8d8]:  %50 = load i64, i64* %40, align 1
	}

[0x5570d1b683f0]: %struct.State* %0 {
	[0x5570d1bb31a0]:%struct.State.1* %0
	}

[0x5570d1b68430]: i64 %1 {
	[0x5570d1bb38c0]:i64 %1
	}

[0x5570d1b68cf0]: %struct.Memory* %2 {
	[0x5570d1bcf1c0]:%struct.Memory.32* %2
	}

[0x5570d1b68eb8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x5570d1baee58]:  %AL.i = bitcast %union.anon.5* %67 to i8*
	}

[0x5570d1b68f90]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5570d1b4b930]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5570d1b69068]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x5570d1b0cd48]:  %67 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x5570d1b690d8]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x5570d1bb0028]:  %EAX.i = bitcast %union.anon.5* %67 to i32*
	}

[0x5570d1b691b8]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0 {
	[0x5570d1b0d148]:  %73 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 5, i32 0
	}

[0x5570d1b69278]:   %ECX = bitcast %union.anon* %4 to i32* {
	[0x5570d1bafdc8]:  %ECX.i9 = bitcast %union.anon.5* %73 to i32*
	}

[0x5570d1b69328]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x5570d1ba5ae8]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %67, i64 0, i32 0
	}

[0x5570d1b693e8]:   %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x5570d1b17148]:  %RCX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %73, i64 0, i32 0
	}

[0x5570d1b694f0]:   %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0 {
	[0x5570d1b4cd60]:  %RDI.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0, i32 0
	}

[0x5570d1b69600]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5570d1b4c5e0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5570d1b69710]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5570d1b4bcb0]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5570d1b697a8]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5570d1b6f728]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b69820]:   %6 = add i64 %1, 1 {
	[0x5570d1ba5650]:  %5 = add i64 %1, 1
	}

[0x5570d1b698a0]:   store i64 %6, i64* %PC, align 8 {
	[0x5570d1ba5760]:  store i64 %5, i64* %3, align 8
	}

[0x5570d1b69908]:   %7 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1b6f5e8]:  %7 = load i64, i64* %6, align 8
	}

[0x5570d1b69980]:   %8 = add i64 %7, -8 {
	[0x5570d1ba6720]:  %8 = add i64 %7, -8
	}

[0x5570d1b69a00]:   %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9 {
	[0x5570d1bc9180]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5570d1b69a78]:   %9 = inttoptr i64 %8 to i64* {
	[0x5570d1b14898]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5570d1b69af0]:   store i64 %5, i64* %9, align 8 {
	[0x5570d1ba4cb0]:  store i64 %4, i64* %9, align 8
	}

[0x5570d1b69b58]:   %10 = load i64, i64* %PC, align 8 {
	[0x5570d1b98b48]:  %10 = load i64, i64* %3, align 8
	}

[0x5570d1b69bd0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1257 {
	[0x5570d1ba74e0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5570d1b69c90]:   %11 = add i64 %7, -40 {
	[0x5570d1ba78e0]:  %11 = add i64 %7, -40
	}

[0x5570d1b69d10]:   store i64 %11, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1ba79f0]:  store i64 %11, i64* %6, align 8
	}

[0x5570d1b69dd0]:   %12 = icmp ult i64 %8, 32 {
	[0x5570d1ba7b00]:  %12 = icmp ult i64 %8, 32
	}

[0x5570d1b69e38]:   %13 = zext i1 %12 to i8 {
	[0x5570d1ba2928]:  %13 = zext i1 %12 to i8
	}

[0x5570d1b69ee0]:   %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5570d1ba52b0]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x5570d1b69f70]:   store i8 %13, i8* %14, align 1, !tbaa !1261 {
	[0x5570d1ba7c10]:  store i8 %13, i8* %14, align 1
	}

[0x5570d1b6a5e8]:   %15 = trunc i64 %11 to i32 {
	[0x5570d1ba29b8]:  %15 = trunc i64 %11 to i32
	}

[0x5570d1b6a660]:   %16 = and i32 %15, 255 {
	[0x5570d1bc6e80]:  %16 = and i32 %15, 255
	}

[0x5570d1b6a6e0]:   store i8 %31, i8* %32, align 1, !tbaa !1278 {
	[0x5570d1bbbb60]:  store i8 %31, i8* %32, align 1
	}

[0x5570d1b6a760]:   %33 = lshr i64 %8, 63 {
	[0x5570d1bca760]:  %33 = lshr i64 %8, 63
	}

[0x5570d1b6a7f8]:   %18 = trunc i32 %17 to i8 {
	[0x5570d1ba4bf8]:  %18 = trunc i32 %17 to i8
	}

[0x5570d1b6a870]:   %19 = and i8 %18, 1 {
	[0x5570d1ba7e70]:  %19 = and i8 %18, 1
	}

[0x5570d1b6a8f0]:   %20 = xor i8 %19, 1 {
	[0x5570d1ba7f40]:  %20 = xor i8 %19, 1
	}

[0x5570d1b6a9a0]:   %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5570d1ba8b20]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x5570d1b6aa30]:   store i8 %20, i8* %21, align 1, !tbaa !1275 {
	[0x5570d1ba8050]:  store i8 %20, i8* %21, align 1
	}

[0x5570d1b6b0c0]:   %22 = xor i64 %8, %11 {
	[0x5570d1ba84d0]:  %22 = xor i64 %8, %11
	}

[0x5570d1b6b140]:   %23 = lshr i64 %22, 4 {
	[0x5570d1ba85a0]:  %23 = lshr i64 %22, 4
	}

[0x5570d1b6b1a8]:   %24 = trunc i64 %23 to i8 {
	[0x5570d1ba4358]:  %24 = trunc i64 %23 to i8
	}

[0x5570d1b6b220]:   %25 = and i8 %24, 1 {
	[0x5570d1ba71e0]:  %25 = and i8 %24, 1
	}

[0x5570d1b6b2d0]:   %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5570d1ba9800]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x5570d1b6b360]:   store i8 %25, i8* %26, align 1, !tbaa !1276 {
	[0x5570d1ba9080]:  store i8 %25, i8* %26, align 1
	}

[0x5570d1b6b9f0]:   %27 = icmp eq i64 %11, 0 {
	[0x5570d1ba9190]:  %27 = icmp eq i64 %11, 0
	}

[0x5570d1b6ba58]:   %28 = zext i1 %27 to i8 {
	[0x5570d1ba9c58]:  %28 = zext i1 %27 to i8
	}

[0x5570d1b6bb00]:   %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5570d1bb0600]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x5570d1b6bb90]:   store i8 %28, i8* %29, align 1, !tbaa !1277 {
	[0x5570d1bc9b10]:  store i8 %28, i8* %29, align 1
	}

[0x5570d1b6c220]:   %30 = lshr i64 %11, 63 {
	[0x5570d1ba6af0]:  %30 = lshr i64 %11, 63
	}

[0x5570d1b6c288]:   %31 = trunc i64 %30 to i8 {
	[0x5570d1ba9fe8]:  %31 = trunc i64 %30 to i8
	}

[0x5570d1b6c330]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5570d1bb0860]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x5570d1b6c3a8]:   %65 = inttoptr i64 %64 to i64* {
	[0x5570d1badc88]:  %65 = inttoptr i64 %64 to i64*
	}

[0x5570d1b6c420]:   store i64 %62, i64* %65, align 8 {
	[0x5570d1c704c0]:  store i64 %62, i64* %65, align 8
	}

[0x5570d1b6c4a0]:   store i64 %64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1c7ac00]:  store i64 %64, i64* %6, align 8
	}

[0x5570d1b6c520]:   store i64 %61, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1b648a0]:  store i64 %61, i64* %3, align 8
	}

[0x5570d1b6cbe0]:   %34 = xor i64 %30, %33 {
	[0x5570d1bca9f0]:  %34 = xor i64 %30, %33
	}

[0x5570d1b6cc60]:   %35 = add nuw nsw i64 %34, %33 {
	[0x5570d1bca8e0]:  %35 = add nuw nsw i64 %34, %33
	}

[0x5570d1b6cce0]:   %36 = icmp eq i64 %35, 2 {
	[0x5570d1bcb740]:  %36 = icmp eq i64 %35, 2
	}

[0x5570d1b6cd48]:   %37 = zext i1 %36 to i8 {
	[0x5570d1baa248]:  %37 = zext i1 %36 to i8
	}

[0x5570d1b6cdf0]:   %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5570d1bb0990]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x5570d1b6ce80]:   store i8 %37, i8* %38, align 1, !tbaa !1279 {
	[0x5570d1bcb630]:  store i8 %37, i8* %38, align 1
	}

[0x5570d1b6d5d8]:   %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 8) to i64*), align 8 {
	[0x5570d1baa4a8]:  %39 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 8) to i64*), align 8
	}

[0x5570d1b6d6e0]:   %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5570d1bbc820]:  %40 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5570d1b6d770]:   store i64 %39, i64* %40, align 1, !tbaa !1280 {
	[0x5570d1bac250]:  store i64 %39, i64* %40, align 1
	}

[0x5570d1b6d9b0]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x5570d1bca040]:  %41 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x5570d1b6da28]:   %42 = bitcast i64* %41 to double* {
	[0x5570d1baa5d8]:  %42 = bitcast i64* %41 to double*
	}

[0x5570d1b6e500]:   store double 0.000000e+00, double* %42, align 1, !tbaa !1280 {
	[0x5570d1bb2a70]:  store double 0.000000e+00, double* %42, align 1
	}

[0x5570d1b6f788]:   %51 = inttoptr i64 %47 to i64* {
	[0x5570d1ba96e8]:  %51 = inttoptr i64 %47 to i64*
	}

[0x5570d1b6f800]:   store i64 %50, i64* %51, align 8 {
	[0x5570d1c61120]:  store i64 %50, i64* %51, align 8
	}

[0x5570d1b6f868]:   %52 = load i64, i64* %RBP, align 8 {
	[0x5570d1bac858]:  %52 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b6f8e0]:   %53 = add i64 %52, -16 {
	[0x5570d1c5fc10]:  %53 = add i64 %52, -16
	}

[0x5570d1b6f948]:   %54 = load i64, i64* %PC, align 8 {
	[0x5570d1bac988]:  %54 = load i64, i64* %3, align 8
	}

[0x5570d1b6f9c0]:   %55 = add i64 %54, 5 {
	[0x5570d1bd8a30]:  %55 = add i64 %54, 5
	}

[0x5570d1b6fa40]:   store i64 %55, i64* %PC, align 8 {
	[0x5570d1c66630]:  store i64 %55, i64* %3, align 8
	}

[0x5570d1b6faa8]:   %56 = inttoptr i64 %53 to i64* {
	[0x5570d1bad308]:  %56 = inttoptr i64 %53 to i64*
	}

[0x5570d1b6fb08]:   %57 = load i64, i64* %56, align 8 {
	[0x5570d1bad438]:  %57 = load i64, i64* %56, align 8
	}

[0x5570d1b6fc10]:   %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0 {
	[0x5570d1bcd4a0]:  %58 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
	}

[0x5570d1b6fca0]:   store i64 %57, i64* %58, align 1, !tbaa !1280 {
	[0x5570d1c65860]:  store i64 %57, i64* %58, align 1
	}

[0x5570d1b6fdb0]:   %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x5570d1bd3ac0]:  %59 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x5570d1b6fe28]:   %60 = bitcast i64* %59 to double* {
	[0x5570d1bad8f8]:  %60 = bitcast i64* %59 to double*
	}

[0x5570d1b6fea0]:   store double 0.000000e+00, double* %60, align 1, !tbaa !1280 {
	[0x5570d1c67dd0]:  store double 0.000000e+00, double* %60, align 1
	}

[0x5570d1b6ff60]:   %61 = add i64 %54, -76 {
	[0x5570d1c6a5c0]:  %61 = add i64 %54, -76
	}

[0x5570d1b6ffe0]:   %62 = add i64 %54, 10 {
	[0x5570d1c69120]:  %62 = add i64 %54, 10
	}

[0x5570d1b70048]:   %63 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1badb58]:  %63 = load i64, i64* %6, align 8
	}

[0x5570d1b700c0]:   %64 = add i64 %63, -8 {
	[0x5570d1c6c0f0]:  %64 = add i64 %63, -8
	}

[0x5570d1b706c0]:   %66 = tail call %struct.Memory* @sub_4004c0_fun(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2) {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	}

[0x5570d1b70788]:   %67 = load i64, i64* %PC, align 8 {
	[0x5570d1bae278]:  %66 = load i64, i64* %3, align 8
	}

[0x5570d1b708d0]:   store i64 add (i64 ptrtoint (%seg_4005c0__rodata_type* @seg_4005c0__rodata to i64), i64 16), i64* %RDI, align 8, !tbaa !1257 {
	[0x5570d1b64440]:  store i64 add (i64 ptrtoint (%seg_400530__eh_frame_type* @seg_400530__eh_frame to i64), i64 160), i64* %RDI.i, align 8
	}

[0x5570d1b70950]:   store i8 1, i8* %AL, align 1, !tbaa !1282 {
	[0x5570d1b10400]:  store i8 1, i8* %AL.i, align 1
	}

[0x5570d1b70b20]:   %68 = add i64 %67, -326 {
	[0x5570d1b13c50]:  %68 = add i64 %66, -326
	}

[0x5570d1b70be0]:   %69 = add i64 %67, 17 {
	[0x5570d1bc9a40]:  %69 = add i64 %66, 17
	}

[0x5570d1b70c48]:   %70 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bafa38]:  %70 = load i64, i64* %6, align 8
	}

[0x5570d1b70cc0]:   %71 = add i64 %70, -8 {
	[0x5570d1bc9c20]:  %71 = add i64 %70, -8
	}

[0x5570d1b70d28]:   %72 = inttoptr i64 %71 to i64* {
	[0x5570d1bafc98]:  %72 = inttoptr i64 %71 to i64*
	}

[0x5570d1b70da0]:   store i64 %69, i64* %72, align 8 {
	[0x5570d1bca150]:  store i64 %69, i64* %72, align 8
	}

[0x5570d1b70e20]:   store i64 %71, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bca4f0]:  store i64 %71, i64* %6, align 8
	}

[0x5570d1b70ea0]:   store i64 %68, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1bcc320]:  store i64 %68, i64* %3, align 8
	}

[0x5570d1b710c8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66) {
	[0x5570d1bb0bf0]:  %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
	[0x5570d1bb0e50]:  %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
	}

[0x5570d1b71188]:   %74 = load i64, i64* %PC, align 8 {
	[0x5570d1bafef8]:  %74 = load i64, i64* %3, align 8
	}

[0x5570d1b71200]:   store i64 0, i64* %RCX, align 8, !tbaa !1257 {
	[0x5570d1bcc760]:  store i64 0, i64* %RCX.i, align 8
	}

[0x5570d1b71268]:   %75 = load i64, i64* %RBP, align 8 {
	[0x5570d1bb0288]:  %75 = load i64, i64* %RBP.i, align 8
	}

[0x5570d1b71320]:   %76 = add i64 %75, -20 {
	[0x5570d1bcc850]:  %76 = add i64 %75, -20
	}

[0x5570d1b71388]:   %77 = load i32, i32* %EAX, align 4 {
	[0x5570d1bb03b8]:  %77 = load i32, i32* %EAX.i, align 4
	}

[0x5570d1b71400]:   %78 = add i64 %74, 5 {
	[0x5570d1bcc920]:  %78 = add i64 %74, 5
	}

[0x5570d1b71480]:   store i64 %78, i64* %PC, align 8 {
	[0x5570d1bcd020]:  store i64 %78, i64* %3, align 8
	}

[0x5570d1b714e8]:   %79 = inttoptr i64 %76 to i32* {
	[0x5570d1bb04e8]:  %79 = inttoptr i64 %76 to i32*
	}

[0x5570d1b71560]:   store i32 %77, i32* %79, align 4 {
	[0x5570d1bcc170]:  store i32 %77, i32* %79, align 4
	}

[0x5570d1b715c8]:   %80 = load i32, i32* %ECX, align 4 {
	[0x5570d1bb0748]:  %80 = load i32, i32* %ECX.i9, align 4
	}

[0x5570d1b71628]:   %81 = zext i32 %80 to i64 {
	[0x5570d1babfb8]:  %81 = zext i32 %80 to i64
	}

[0x5570d1b71688]:   %82 = load i64, i64* %PC, align 8 {
	[0x5570d1bac348]:  %82 = load i64, i64* %3, align 8
	}

[0x5570d1b71700]:   store i64 %81, i64* %RAX, align 8, !tbaa !1257 {
	[0x5570d1bcd700]:  store i64 %81, i64* %RAX.i, align 8
	}

[0x5570d1b71768]:   %83 = load i64, i64* %RSP, align 8 {
	[0x5570d1bb1c38]:  %83 = load i64, i64* %6, align 8
	}

[0x5570d1b717e0]:   %84 = add i64 %83, 32 {
	[0x5570d1bcd8b0]:  %84 = add i64 %83, 32
	}

[0x5570d1b71860]:   store i64 %84, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bcd5a0]:  store i64 %84, i64* %6, align 8
	}

[0x5570d1b71920]:   %85 = icmp ugt i64 %83, -33 {
	[0x5570d1ba5100]:  %85 = icmp ugt i64 %83, -33
	}

[0x5570d1b71988]:   %86 = zext i1 %85 to i8 {
	[0x5570d1bb1d68]:  %86 = zext i1 %85 to i8
	}

[0x5570d1b71a00]:   store i8 %86, i8* %14, align 1, !tbaa !1261 {
	[0x5570d1bcec40]:  store i8 %86, i8* %14, align 1
	}

[0x5570d1b71a68]:   %87 = trunc i64 %84 to i32 {
	[0x5570d1bb33f8]:  %87 = trunc i64 %84 to i32
	}

[0x5570d1b71ae0]:   %88 = and i32 %87, 255 {
	[0x5570d1ba5000]:  %88 = and i32 %87, 255
	}

[0x5570d1b71b80]:   %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9 {
	[0x5570d1bd02d0]:  %89 = tail call i32 @llvm.ctpop.i32(i32 %88)
	}

[0x5570d1b71c48]:   %90 = trunc i32 %89 to i8 {
	[0x5570d1bb4238]:  %90 = trunc i32 %89 to i8
	}

[0x5570d1b71cc0]:   %91 = and i8 %90, 1 {
	[0x5570d1bd07e0]:  %91 = and i8 %90, 1
	}

[0x5570d1b71d40]:   %92 = xor i8 %91, 1 {
	[0x5570d1bd0e30]:  %92 = xor i8 %91, 1
	}

[0x5570d1b71dc0]:   store i8 %92, i8* %21, align 1, !tbaa !1275 {
	[0x5570d1bd0f20]:  store i8 %92, i8* %21, align 1
	}

[0x5570d1b71e40]:   %93 = xor i64 %84, %83 {
	[0x5570d1bc78e0]:  %93 = xor i64 %84, %83
	}

[0x5570d1b71ec0]:   %94 = lshr i64 %93, 4 {
	[0x5570d1bc7a60]:  %94 = lshr i64 %93, 4
	}

[0x5570d1b71f28]:   %95 = trunc i64 %94 to i8 {
	[0x5570d1bb4ce8]:  %95 = trunc i64 %94 to i8
	}

[0x5570d1b71fa0]:   %96 = and i8 %95, 1 {
	[0x5570d1bc7ee0]:  %96 = and i8 %95, 1
	}

[0x5570d1b72020]:   store i8 %96, i8* %26, align 1, !tbaa !1276 {
	[0x5570d1bd3140]:  store i8 %96, i8* %26, align 1
	}

[0x5570d1b720a0]:   %97 = icmp eq i64 %84, 0 {
	[0x5570d1bd3950]:  %97 = icmp eq i64 %84, 0
	}

[0x5570d1b72108]:   %98 = zext i1 %97 to i8 {
	[0x5570d1bb5798]:  %98 = zext i1 %97 to i8
	}

[0x5570d1b72180]:   store i8 %98, i8* %29, align 1, !tbaa !1277 {
	[0x5570d1bd3d20]:  store i8 %98, i8* %29, align 1
	}

[0x5570d1b72200]:   %99 = lshr i64 %84, 63 {
	[0x5570d1bd3e50]:  %99 = lshr i64 %84, 63
	}

[0x5570d1b72268]:   %100 = trunc i64 %99 to i8 {
	[0x5570d1bb59f8]:  %100 = trunc i64 %99 to i8
	}

[0x5570d1b722e0]:   store i8 %100, i8* %32, align 1, !tbaa !1278 {
	[0x5570d1bd2f20]:  store i8 %100, i8* %32, align 1
	}

[0x5570d1b72360]:   %101 = lshr i64 %83, 63 {
	[0x5570d1bd4b70]:  %101 = lshr i64 %83, 63
	}

[0x5570d1b723e0]:   %102 = xor i64 %99, %101 {
	[0x5570d1bd6210]:  %102 = xor i64 %99, %101
	}

[0x5570d1b72460]:   %103 = add nuw nsw i64 %102, %99 {
	[0x5570d1bd65a0]:  %103 = add nuw nsw i64 %102, %99
	}

[0x5570d1b724e0]:   %104 = icmp eq i64 %103, 2 {
	[0x5570d1bd6720]:  %104 = icmp eq i64 %103, 2
	}

[0x5570d1b72548]:   %105 = zext i1 %104 to i8 {
	[0x5570d1bb5fe8]:  %105 = zext i1 %104 to i8
	}

[0x5570d1b725c0]:   store i8 %105, i8* %38, align 1, !tbaa !1279 {
	[0x5570d1bd6b10]:  store i8 %105, i8* %38, align 1
	}

[0x5570d1b72640]:   %106 = add i64 %82, 7 {
	[0x5570d1bb47b0]:  %106 = add i64 %82, 7
	}

[0x5570d1b726c0]:   store i64 %106, i64* %PC, align 8 {
	[0x5570d1bce670]:  store i64 %106, i64* %3, align 8
	}

[0x5570d1b72780]:   %107 = add i64 %83, 40 {
	[0x5570d1bd9750]:  %107 = add i64 %83, 40
	}

[0x5570d1b727e8]:   %108 = inttoptr i64 %84 to i64* {
	[0x5570d1bb7b38]:  %108 = inttoptr i64 %84 to i64*
	}

[0x5570d1b72848]:   %109 = load i64, i64* %108, align 8 {
	[0x5570d1bb7d98]:  %109 = load i64, i64* %108, align 8
	}

[0x5570d1b728c0]:   store i64 %109, i64* %RBP, align 8, !tbaa !1257 {
	[0x5570d1bd9940]:  store i64 %109, i64* %RBP.i, align 8
	}

[0x5570d1b72940]:   store i64 %107, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bd9ac0]:  store i64 %107, i64* %6, align 8
	}

[0x5570d1b729c0]:   %110 = add i64 %82, 8 {
	[0x5570d1bd9dc0]:  %110 = add i64 %82, 8
	}

[0x5570d1b72a40]:   store i64 %110, i64* %PC, align 8 {
	[0x5570d1bd5220]:  store i64 %110, i64* %3, align 8
	}

[0x5570d1b72aa8]:   %111 = inttoptr i64 %107 to i64* {
	[0x5570d1bb7ec8]:  %111 = inttoptr i64 %107 to i64*
	}

[0x5570d1b72b08]:   %112 = load i64, i64* %111, align 8 {
	[0x5570d1bb7ff8]:  %112 = load i64, i64* %111, align 8
	}

[0x5570d1b72b80]:   store i64 %112, i64* %PC, align 8, !tbaa !1257 {
	[0x5570d1bdbbd0]:  store i64 %112, i64* %3, align 8
	}

[0x5570d1b72c40]:   %113 = add i64 %83, 48 {
	[0x5570d1bdbd50]:  %113 = add i64 %83, 48
	}

[0x5570d1b72cc0]:   store i64 %113, i64* %RSP, align 8, !tbaa !1257 {
	[0x5570d1bdc050]:  store i64 %113, i64* %6, align 8
	}

[0x5570d1b72d28]:   ret %struct.Memory* %73 {
	[0x5570d1bb84b8]:  ret %struct.Memory.32* %call2_400522
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5570d1b68d70]: block_4004f0 {
	[0x5570d1bc7590]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Multiple matches exist for [0x5570d1b710c8]:   %73 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %66)
[0x5570d1bb0bf0]:   %call2_400511 = tail call %struct.Memory.32* @sub_4004c0.fun(%struct.State.1* %0, i64 %61, %struct.Memory.32* %2)
[0x5570d1bb0e50]:   %call2_400522 = tail call %struct.Memory.32* @sub_4003d0.printf_plt(%struct.State.1* %0, i64 %68, %struct.Memory.32* %call2_400511)
Iso Match NOT Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
