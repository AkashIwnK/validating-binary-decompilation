Writing '/tmp/tmpre1odxmw.dot'...
Writing '/tmp/tmpre1odxmw.dot':Done

Reading LLVM: /tmp/tmph0gf03rj-query.ll
Extracting function [fun] from /tmp/tmph0gf03rj-query.ll
Dot file generated!
Writing '/tmp/tmpvpwa0udl.dot'...
Writing '/tmp/tmpvpwa0udl.dot':Done

Reading LLVM: /tmp/tmpy8s_s2wx-target.ll
Extracting function [fun] from /tmp/tmpy8s_s2wx-target.ll
Dot file generated!
================ Starting round 0
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 14 %12 = add i64 %7, -16
- 15 %13 = add i64 %10, 8
- 16 store i64 %13, i64* %3, align 8
- 17 %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
- 18 %15 = load i64, i64* %14, align 1
- 19 %16 = inttoptr i64 %12 to i64*
- 20 store i64 %15, i64* %16, align 8
- 21 %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 22 %18 = load i64, i64* %RBP.i, align 8
- 23 %19 = add i64 %18, -16
- 24 %20 = load i64, i64* %3, align 8
- 25 %21 = add i64 %20, 5
- 26 store i64 %21, i64* %3, align 8
- 27 %22 = bitcast %union.VectorReg* %17 to double*
- 28 %23 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %17, i64 0, i32 0, i32 0, i32 0, i64 0
- 29 %24 = load i64, i64* %23, align 1
- 30 %25 = inttoptr i64 %19 to i64*
- 31 store i64 %24, i64* %25, align 8
- 32 %26 = load i64, i64* %RBP.i, align 8
- 33 %27 = add i64 %26, -8
- 34 %28 = load i64, i64* %3, align 8
- 35 %29 = add i64 %28, 5
- 36 store i64 %29, i64* %3, align 8
- 37 %30 = inttoptr i64 %27 to i64*
- 38 %31 = load i64, i64* %30, align 8
- 39 %32 = bitcast [32 x %union.VectorReg]* %11 to double*
- 40 store i64 %31, i64* %14, align 1
- 41 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 42 %34 = bitcast i64* %33 to double*
- 43 store double 0.000000e+00, double* %34, align 1
- 44 %35 = add i64 %28, 10
- 45 store i64 %35, i64* %3, align 8
- 46 %36 = bitcast i64 %31 to double
- 47 %37 = inttoptr i64 %27 to double*
- 48 %38 = load double, double* %37, align 8
- 49 %39 = fmul double %36, %38
- 50 store double %39, double* %32, align 1
- 51 store i64 0, i64* %33, align 1
- 52 %40 = add i64 %26, -16
- 53 %41 = add i64 %28, 15
- 54 store i64 %41, i64* %3, align 8
- 55 %42 = inttoptr i64 %40 to i64*
- 56 %43 = load i64, i64* %42, align 8
- 57 store i64 %43, i64* %23, align 1
- 58 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 59 %45 = bitcast i64* %44 to double*
- 60 store double 0.000000e+00, double* %45, align 1
- 61 %46 = add i64 %28, 20
- 62 store i64 %46, i64* %3, align 8
- 63 %47 = bitcast i64 %43 to double
- 64 %48 = inttoptr i64 %40 to double*
- 65 %49 = load double, double* %48, align 8
- 66 %50 = fmul double %47, %49
- 67 store double %50, double* %22, align 1
- 68 store i64 0, i64* %44, align 1
- 69 %51 = fadd double %39, %50
- 70 store double %51, double* %32, align 1
- 71 store i64 0, i64* %33, align 1
- 72 %52 = add i64 %28, 25
- 73 store i64 %52, i64* %3, align 8
- 74 %53 = load i64, i64* %6, align 8
- 75 %54 = add i64 %53, 8
- 76 %55 = inttoptr i64 %53 to i64*
- 77 %56 = load i64, i64* %55, align 8
- 78 store i64 %56, i64* %RBP.i, align 8
- 79 store i64 %54, i64* %6, align 8
- 80 %57 = add i64 %28, 26
- 81 store i64 %57, i64* %3, align 8
- 82 %58 = inttoptr i64 %54 to i64*
- 83 %59 = load i64, i64* %58, align 8
- 84 store i64 %59, i64* %3, align 8
- 85 %60 = add i64 %53, 16
- 86 store i64 %60, i64* %6, align 8
- 87 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe32ed9d400>, {0: {0}, 1: {1}, 2: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 3: {5}, 4: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 5: {7}, 6: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 7: {9, 33}, 8: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 9: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 10: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 11: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 12: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 13: {2}, 14: {23, 52, 15}, 15: {16, 75}, 16: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 17: {18}, 18: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 19: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 20: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 21: {3}, 22: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 23: {23, 52, 15}, 24: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 25: {25, 35}, 26: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 27: {39, 27, 42, 46, 59, 63}, 28: {28}, 29: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 30: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 31: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 32: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 33: {9, 33}, 34: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 35: {25, 35}, 36: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 37: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 38: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 39: {39, 27, 42, 46, 59, 63}, 40: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 41: {41}, 42: {39, 27, 42, 46, 59, 63}, 43: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 44: {44}, 45: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 46: {39, 27, 42, 46, 59, 63}, 47: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 48: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 49: {49, 66}, 50: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 51: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 52: {23, 52, 15}, 53: {53}, 54: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 55: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 56: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 57: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 58: {58}, 59: {39, 27, 42, 46, 59, 63}, 60: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 61: {61}, 62: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 63: {39, 27, 42, 46, 59, 63}, 64: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 65: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 66: {49, 66}, 67: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 68: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 69: {69}, 70: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 71: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 72: {72}, 73: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 74: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 75: {16, 75}, 76: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 77: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 78: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 79: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 80: {80}, 81: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 82: {64, 37, 10, 76, 47, 82, 20, 55, 30}, 83: {32, 65, 34, 4, 38, 8, 74, 13, 77, 48, 19, 83, 22, 24, 56, 29}, 84: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 85: {85}, 86: {6, 11, 12, 14, 17, 21, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 87: {87}})
Equivalent! frozenset({24, 34}) {24, 34}
Equivalent! frozenset({25, 35}) {25, 35}
Equivalent! frozenset({26, 36}) {26, 36}
Equivalent! frozenset({51, 71}) {51, 71}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe32ed9d400>, {0: {0}, 1: {1}, 2: {4}, 3: {5}, 4: {6}, 5: {7}, 6: {8}, 7: {9}, 8: {10}, 9: {11}, 10: {12}, 11: {13}, 12: {14}, 13: {2}, 14: {15}, 15: {16}, 16: {17}, 17: {18}, 18: {19}, 19: {20}, 20: {21}, 21: {3}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {28}, 29: {29}, 30: {30}, 31: {31}, 32: {32}, 33: {33}, 34: {34}, 35: {35}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {42}, 43: {43}, 44: {44}, 45: {45}, 46: {46}, 47: {47}, 48: {48}, 49: {49}, 50: {50}, 51: {51}, 52: {52}, 53: {53}, 54: {54}, 55: {55}, 56: {56}, 57: {57}, 58: {58}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 add add
EXACT 16 store store
EXACT 17 getelementptr getelementptr
EXACT 18 load load
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 load load
EXACT 23 add add
EXACT 24 load load
EXACT 25 add add
EXACT 26 store store
EXACT 27 bitcast bitcast
EXACT 28 getelementptr getelementptr
EXACT 29 load load
EXACT 30 inttoptr inttoptr
EXACT 31 store store
EXACT 32 load load
EXACT 33 add add
EXACT 34 load load
EXACT 35 add add
EXACT 36 store store
EXACT 37 inttoptr inttoptr
EXACT 38 load load
EXACT 39 bitcast bitcast
EXACT 40 store store
EXACT 41 getelementptr getelementptr
EXACT 42 bitcast bitcast
EXACT 43 store store
EXACT 44 add add
EXACT 45 store store
EXACT 46 bitcast bitcast
EXACT 47 inttoptr inttoptr
EXACT 48 load load
EXACT 49 fmul fmul
EXACT 50 store store
EXACT 51 store store
EXACT 52 add add
EXACT 53 add add
EXACT 54 store store
EXACT 55 inttoptr inttoptr
EXACT 56 load load
EXACT 57 store store
EXACT 58 getelementptr getelementptr
EXACT 59 bitcast bitcast
EXACT 60 store store
EXACT 61 add add
EXACT 62 store store
EXACT 63 bitcast bitcast
EXACT 64 inttoptr inttoptr
EXACT 65 load load
EXACT 66 fmul fmul
EXACT 67 store store
EXACT 68 store store
EXACT 69 fadd fadd
EXACT 70 store store
EXACT 71 store store
EXACT 72 add add
EXACT 73 store store
EXACT 74 load load
EXACT 75 add add
EXACT 76 inttoptr inttoptr
EXACT 77 load load
EXACT 78 store store
EXACT 79 store store
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 store store
EXACT 85 add add
EXACT 86 store store
EXACT 87 ret ret
================ Starting round 1
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 4 %5 = load i64, i64* %RBP, align 8
- 5 %6 = add i64 %1, 1
- 6 store i64 %6, i64* %PC, align 8
- 7 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 8 %8 = load i64, i64* %7, align 8
- 9 %9 = add i64 %8, -8
- 10 %10 = inttoptr i64 %9 to i64*
- 11 store i64 %5, i64* %10, align 8
- 12 store i64 %9, i64* %7, align 8
- 13 %11 = load i64, i64* %PC, align 8
- 14 store i64 %9, i64* %RBP, align 8
- 15 %12 = add i64 %8, -16
- 16 %13 = add i64 %11, 8
- 17 store i64 %13, i64* %PC, align 8
- 18 %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
- 19 %15 = load i64, i64* %14, align 1
- 20 %16 = inttoptr i64 %12 to i64*
- 21 store i64 %15, i64* %16, align 8
- 22 %17 = load i64, i64* %RBP, align 8
- 23 %18 = add i64 %17, -16
- 24 %19 = load i64, i64* %PC, align 8
- 25 %20 = add i64 %19, 5
- 26 store i64 %20, i64* %PC, align 8
- 27 %21 = bitcast %union.VectorReg* %4 to double*
- 28 %22 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
- 29 %23 = load i64, i64* %22, align 1
- 30 %24 = inttoptr i64 %18 to i64*
- 31 store i64 %23, i64* %24, align 8
- 32 %25 = load i64, i64* %RBP, align 8
- 33 %26 = add i64 %25, -8
- 34 %27 = load i64, i64* %PC, align 8
- 35 %28 = add i64 %27, 5
- 36 store i64 %28, i64* %PC, align 8
- 37 %29 = inttoptr i64 %26 to i64*
- 38 %30 = load i64, i64* %29, align 8
- 39 %31 = bitcast [32 x %union.VectorReg]* %3 to double*
- 40 store i64 %30, i64* %14, align 1
- 41 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 42 %33 = bitcast i64* %32 to double*
- 43 store double 0.000000e+00, double* %33, align 1
- 44 %34 = add i64 %27, 10
- 45 store i64 %34, i64* %PC, align 8
- 46 %35 = bitcast i64 %30 to double
- 47 %36 = inttoptr i64 %26 to double*
- 48 %37 = load double, double* %36, align 8
- 49 %38 = fmul double %35, %37
- 50 store double %38, double* %31, align 1
- 51 store i64 0, i64* %32, align 1
- 52 %39 = add i64 %25, -16
- 53 %40 = add i64 %27, 15
- 54 store i64 %40, i64* %PC, align 8
- 55 %41 = inttoptr i64 %39 to i64*
- 56 %42 = load i64, i64* %41, align 8
- 57 store i64 %42, i64* %22, align 1
- 58 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 59 %44 = bitcast i64* %43 to double*
- 60 store double 0.000000e+00, double* %44, align 1
- 61 %45 = add i64 %27, 20
- 62 store i64 %45, i64* %PC, align 8
- 63 %46 = bitcast i64 %42 to double
- 64 %47 = inttoptr i64 %39 to double*
- 65 %48 = load double, double* %47, align 8
- 66 %49 = fmul double %46, %48
- 67 store double %49, double* %21, align 1
- 68 store i64 0, i64* %43, align 1
- 69 %50 = fadd double %38, %49
- 70 store double %50, double* %31, align 1
- 71 store i64 0, i64* %32, align 1
- 72 %51 = add i64 %27, 25
- 73 store i64 %51, i64* %PC, align 8
- 74 %52 = load i64, i64* %7, align 8
- 75 %53 = add i64 %52, 8
- 76 %54 = inttoptr i64 %52 to i64*
- 77 %55 = load i64, i64* %54, align 8
- 78 store i64 %55, i64* %RBP, align 8
- 79 store i64 %53, i64* %7, align 8
- 80 %56 = add i64 %27, 26
- 81 store i64 %56, i64* %PC, align 8
- 82 %57 = inttoptr i64 %53 to i64*
- 83 %58 = load i64, i64* %57, align 8
- 84 store i64 %58, i64* %PC, align 8
- 85 %59 = add i64 %52, 16
- 86 store i64 %59, i64* %7, align 8
- 87 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe32ed9d598>, {0: {0}, 1: {1}, 2: {13}, 3: {21}, 4: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 5: {3}, 6: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 7: {5}, 8: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 9: {33, 7}, 10: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 11: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 12: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 13: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 14: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 15: {52, 14, 23}, 16: {75, 15}, 17: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 18: {17}, 19: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 20: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 21: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 22: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 23: {52, 14, 23}, 24: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 25: {25, 35}, 26: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 27: {39, 27, 42, 46, 59, 63}, 28: {28}, 29: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 30: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 31: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 32: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 33: {33, 7}, 34: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 35: {25, 35}, 36: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 37: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 38: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 39: {39, 27, 42, 46, 59, 63}, 40: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 41: {41}, 42: {39, 27, 42, 46, 59, 63}, 43: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 44: {44}, 45: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 46: {39, 27, 42, 46, 59, 63}, 47: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 48: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 49: {49, 66}, 50: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 51: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 52: {52, 14, 23}, 53: {53}, 54: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 55: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 56: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 57: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 58: {58}, 59: {39, 27, 42, 46, 59, 63}, 60: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 61: {61}, 62: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 63: {39, 27, 42, 46, 59, 63}, 64: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 65: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 66: {49, 66}, 67: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 68: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 69: {69}, 70: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 71: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 72: {72}, 73: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 74: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 75: {75, 15}, 76: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 77: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 78: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 79: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 80: {80}, 81: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 82: {64, 37, 8, 76, 47, 82, 19, 55, 30}, 83: {32, 65, 2, 34, 6, 38, 74, 11, 77, 48, 18, 83, 22, 24, 56, 29}, 84: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 85: {85}, 86: {4, 9, 10, 12, 16, 20, 26, 31, 36, 40, 43, 45, 50, 51, 54, 57, 60, 62, 67, 68, 70, 71, 73, 78, 79, 81, 84, 86}, 87: {87}})
Equivalent! frozenset({24, 34}) {24, 34}
Equivalent! frozenset({25, 35}) {25, 35}
Equivalent! frozenset({26, 36}) {26, 36}
Equivalent! frozenset({51, 71}) {51, 71}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fe32ed9d598>, {0: {0}, 1: {1}, 2: {13}, 3: {21}, 4: {2}, 5: {3}, 6: {4}, 7: {5}, 8: {6}, 9: {7}, 10: {8}, 11: {9}, 12: {10}, 13: {11}, 14: {12}, 15: {14}, 16: {15}, 17: {16}, 18: {17}, 19: {18}, 20: {19}, 21: {20}, 22: {22}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {28}, 29: {29}, 30: {30}, 31: {31}, 32: {32}, 33: {33}, 34: {34}, 35: {35}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {42}, 43: {43}, 44: {44}, 45: {45}, 46: {46}, 47: {47}, 48: {48}, 49: {49}, 50: {50}, 51: {51}, 52: {52}, 53: {53}, 54: {54}, 55: {55}, 56: {56}, 57: {57}, 58: {58}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 store store
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 store store
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 add add
EXACT 17 store store
EXACT 18 getelementptr getelementptr
EXACT 19 load load
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 load load
EXACT 23 add add
EXACT 24 load load
EXACT 25 add add
EXACT 26 store store
EXACT 27 bitcast bitcast
EXACT 28 getelementptr getelementptr
EXACT 29 load load
EXACT 30 inttoptr inttoptr
EXACT 31 store store
EXACT 32 load load
EXACT 33 add add
EXACT 34 load load
EXACT 35 add add
EXACT 36 store store
EXACT 37 inttoptr inttoptr
EXACT 38 load load
EXACT 39 bitcast bitcast
EXACT 40 store store
EXACT 41 getelementptr getelementptr
EXACT 42 bitcast bitcast
EXACT 43 store store
EXACT 44 add add
EXACT 45 store store
EXACT 46 bitcast bitcast
EXACT 47 inttoptr inttoptr
EXACT 48 load load
EXACT 49 fmul fmul
EXACT 50 store store
EXACT 51 store store
EXACT 52 add add
EXACT 53 add add
EXACT 54 store store
EXACT 55 inttoptr inttoptr
EXACT 56 load load
EXACT 57 store store
EXACT 58 getelementptr getelementptr
EXACT 59 bitcast bitcast
EXACT 60 store store
EXACT 61 add add
EXACT 62 store store
EXACT 63 bitcast bitcast
EXACT 64 inttoptr inttoptr
EXACT 65 load load
EXACT 66 fmul fmul
EXACT 67 store store
EXACT 68 store store
EXACT 69 fadd fadd
EXACT 70 store store
EXACT 71 store store
EXACT 72 add add
EXACT 73 store store
EXACT 74 load load
EXACT 75 add add
EXACT 76 inttoptr inttoptr
EXACT 77 load load
EXACT 78 store store
EXACT 79 store store
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 store store
EXACT 85 add add
EXACT 86 store store
EXACT 87 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1', '%12 = add i64 %7, -16', '%13 = add i64 %10, 8', 'store i64 %13, i64* %3, align 8', '%14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0', '%15 = load i64, i64* %14, align 1', '%16 = inttoptr i64 %12 to i64*', 'store i64 %15, i64* %16, align 8', '%17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%18 = load i64, i64* %RBP.i, align 8', '%19 = add i64 %18, -16', '%20 = load i64, i64* %3, align 8', '%21 = add i64 %20, 5', 'store i64 %21, i64* %3, align 8', '%22 = bitcast %union.VectorReg* %17 to double*', '%23 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %17, i64 0, i32 0, i32 0, i32 0, i64 0', '%24 = load i64, i64* %23, align 1', '%25 = inttoptr i64 %19 to i64*', 'store i64 %24, i64* %25, align 8', '%26 = load i64, i64* %RBP.i, align 8', '%27 = add i64 %26, -8', '%28 = load i64, i64* %3, align 8', '%29 = add i64 %28, 5', 'store i64 %29, i64* %3, align 8', '%30 = inttoptr i64 %27 to i64*', '%31 = load i64, i64* %30, align 8', '%32 = bitcast [32 x %union.VectorReg]* %11 to double*', 'store i64 %31, i64* %14, align 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%34 = bitcast i64* %33 to double*', 'store double 0.000000e+00, double* %34, align 1', '%35 = add i64 %28, 10', 'store i64 %35, i64* %3, align 8', '%36 = bitcast i64 %31 to double', '%37 = inttoptr i64 %27 to double*', '%38 = load double, double* %37, align 8', '%39 = fmul double %36, %38', 'store double %39, double* %32, align 1', 'store i64 0, i64* %33, align 1', '%40 = add i64 %26, -16', '%41 = add i64 %28, 15', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i64*', '%43 = load i64, i64* %42, align 8', 'store i64 %43, i64* %23, align 1', '%44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%45 = bitcast i64* %44 to double*', 'store double 0.000000e+00, double* %45, align 1', '%46 = add i64 %28, 20', 'store i64 %46, i64* %3, align 8', '%47 = bitcast i64 %43 to double', '%48 = inttoptr i64 %40 to double*', '%49 = load double, double* %48, align 8', '%50 = fmul double %47, %49', 'store double %50, double* %22, align 1', 'store i64 0, i64* %44, align 1', '%51 = fadd double %39, %50', 'store double %51, double* %32, align 1', '%52 = add i64 %28, 25', 'store i64 %52, i64* %3, align 8', '%53 = load i64, i64* %6, align 8', '%54 = add i64 %53, 8', '%55 = inttoptr i64 %53 to i64*', '%56 = load i64, i64* %55, align 8', 'store i64 %56, i64* %RBP.i, align 8', 'store i64 %54, i64* %6, align 8', '%57 = add i64 %28, 26', 'store i64 %57, i64* %3, align 8', '%58 = inttoptr i64 %54 to i64*', '%59 = load i64, i64* %58, align 8', 'store i64 %59, i64* %3, align 8', '%60 = add i64 %53, 16', 'store i64 %60, i64* %6, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %12 = add i64 %7, -16
Found line to remove! %13 = add i64 %10, 8
Found line to remove! store i64 %13, i64* %3, align 8
Found line to remove! %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %15 = load i64, i64* %14, align 1
Found line to remove! %16 = inttoptr i64 %12 to i64*
Found line to remove! store i64 %15, i64* %16, align 8
Found line to remove! %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %18 = load i64, i64* %RBP.i, align 8
Found line to remove! %19 = add i64 %18, -16
Found line to remove! %20 = load i64, i64* %3, align 8
Found line to remove! %21 = add i64 %20, 5
Found line to remove! store i64 %21, i64* %3, align 8
Found line to remove! %22 = bitcast %union.VectorReg* %17 to double*
Found line to remove! %23 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %17, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %24 = load i64, i64* %23, align 1
Found line to remove! %25 = inttoptr i64 %19 to i64*
Found line to remove! store i64 %24, i64* %25, align 8
Found line to remove! %26 = load i64, i64* %RBP.i, align 8
Found line to remove! %27 = add i64 %26, -8
Found line to remove! %28 = load i64, i64* %3, align 8
Found line to remove! %29 = add i64 %28, 5
Found line to remove! store i64 %29, i64* %3, align 8
Found line to remove! %30 = inttoptr i64 %27 to i64*
Found line to remove! %31 = load i64, i64* %30, align 8
Found line to remove! %32 = bitcast [32 x %union.VectorReg]* %11 to double*
Found line to remove! store i64 %31, i64* %14, align 1
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %34 = bitcast i64* %33 to double*
Found line to remove! store double 0.000000e+00, double* %34, align 1
Found line to remove! %35 = add i64 %28, 10
Found line to remove! store i64 %35, i64* %3, align 8
Found line to remove! %36 = bitcast i64 %31 to double
Found line to remove! %37 = inttoptr i64 %27 to double*
Found line to remove! %38 = load double, double* %37, align 8
Found line to remove! %39 = fmul double %36, %38
Found line to remove! store double %39, double* %32, align 1
Found line to remove! store i64 0, i64* %33, align 1
Found line to remove! %40 = add i64 %26, -16
Found line to remove! %41 = add i64 %28, 15
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i64*
Found line to remove! %43 = load i64, i64* %42, align 8
Found line to remove! store i64 %43, i64* %23, align 1
Found line to remove! %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %45 = bitcast i64* %44 to double*
Found line to remove! store double 0.000000e+00, double* %45, align 1
Found line to remove! %46 = add i64 %28, 20
Found line to remove! store i64 %46, i64* %3, align 8
Found line to remove! %47 = bitcast i64 %43 to double
Found line to remove! %48 = inttoptr i64 %40 to double*
Found line to remove! %49 = load double, double* %48, align 8
Found line to remove! %50 = fmul double %47, %49
Found line to remove! store double %50, double* %22, align 1
Found line to remove! store i64 0, i64* %44, align 1
Found line to remove! %51 = fadd double %39, %50
Found line to remove! store double %51, double* %32, align 1
Found line to remove! store i64 0, i64* %33, align 1
Found line to remove! %52 = add i64 %28, 25
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %53 = load i64, i64* %6, align 8
Found line to remove! %54 = add i64 %53, 8
Found line to remove! %55 = inttoptr i64 %53 to i64*
Found line to remove! %56 = load i64, i64* %55, align 8
Found line to remove! store i64 %56, i64* %RBP.i, align 8
Found line to remove! store i64 %54, i64* %6, align 8
Found line to remove! %57 = add i64 %28, 26
Found line to remove! store i64 %57, i64* %3, align 8
Found line to remove! %58 = inttoptr i64 %54 to i64*
Found line to remove! %59 = load i64, i64* %58, align 8
Found line to remove! store i64 %59, i64* %3, align 8
Found line to remove! %60 = add i64 %53, 16
Found line to remove! store i64 %60, i64* %6, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', 'store i64 %9, i64* %7, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -16', '%13 = add i64 %11, 8', 'store i64 %13, i64* %PC, align 8', '%14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0', '%15 = load i64, i64* %14, align 1', '%16 = inttoptr i64 %12 to i64*', 'store i64 %15, i64* %16, align 8', '%17 = load i64, i64* %RBP, align 8', '%18 = add i64 %17, -16', '%19 = load i64, i64* %PC, align 8', '%20 = add i64 %19, 5', 'store i64 %20, i64* %PC, align 8', '%21 = bitcast %union.VectorReg* %4 to double*', '%22 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0', '%23 = load i64, i64* %22, align 1', '%24 = inttoptr i64 %18 to i64*', 'store i64 %23, i64* %24, align 8', '%25 = load i64, i64* %RBP, align 8', '%26 = add i64 %25, -8', '%27 = load i64, i64* %PC, align 8', '%28 = add i64 %27, 5', 'store i64 %28, i64* %PC, align 8', '%29 = inttoptr i64 %26 to i64*', '%30 = load i64, i64* %29, align 8', '%31 = bitcast [32 x %union.VectorReg]* %3 to double*', 'store i64 %30, i64* %14, align 1', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%33 = bitcast i64* %32 to double*', 'store double 0.000000e+00, double* %33, align 1', '%34 = add i64 %27, 10', 'store i64 %34, i64* %PC, align 8', '%35 = bitcast i64 %30 to double', '%36 = inttoptr i64 %26 to double*', '%37 = load double, double* %36, align 8', '%38 = fmul double %35, %37', 'store double %38, double* %31, align 1', 'store i64 0, i64* %32, align 1', '%39 = add i64 %25, -16', '%40 = add i64 %27, 15', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %39 to i64*', '%42 = load i64, i64* %41, align 8', 'store i64 %42, i64* %22, align 1', '%43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%44 = bitcast i64* %43 to double*', 'store double 0.000000e+00, double* %44, align 1', '%45 = add i64 %27, 20', 'store i64 %45, i64* %PC, align 8', '%46 = bitcast i64 %42 to double', '%47 = inttoptr i64 %39 to double*', '%48 = load double, double* %47, align 8', '%49 = fmul double %46, %48', 'store double %49, double* %21, align 1', 'store i64 0, i64* %43, align 1', '%50 = fadd double %38, %49', 'store double %50, double* %31, align 1', '%51 = add i64 %27, 25', 'store i64 %51, i64* %PC, align 8', '%52 = load i64, i64* %7, align 8', '%53 = add i64 %52, 8', '%54 = inttoptr i64 %52 to i64*', '%55 = load i64, i64* %54, align 8', 'store i64 %55, i64* %RBP, align 8', 'store i64 %53, i64* %7, align 8', '%56 = add i64 %27, 26', 'store i64 %56, i64* %PC, align 8', '%57 = inttoptr i64 %53 to i64*', '%58 = load i64, i64* %57, align 8', 'store i64 %58, i64* %PC, align 8', '%59 = add i64 %52, 16', 'store i64 %59, i64* %7, align 8', 'ret %struct.Memory* %2'])
Keep: block_400520:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %8 = load i64, i64* %7, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %5, i64* %10, align 8
Found line to remove! store i64 %9, i64* %7, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -16
Found line to remove! %13 = add i64 %11, 8
Found line to remove! store i64 %13, i64* %PC, align 8
Found line to remove! %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %15 = load i64, i64* %14, align 1
Found line to remove! %16 = inttoptr i64 %12 to i64*
Found line to remove! store i64 %15, i64* %16, align 8
Found line to remove! %17 = load i64, i64* %RBP, align 8
Found line to remove! %18 = add i64 %17, -16
Found line to remove! %19 = load i64, i64* %PC, align 8
Found line to remove! %20 = add i64 %19, 5
Found line to remove! store i64 %20, i64* %PC, align 8
Found line to remove! %21 = bitcast %union.VectorReg* %4 to double*
Found line to remove! %22 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %23 = load i64, i64* %22, align 1
Found line to remove! %24 = inttoptr i64 %18 to i64*
Found line to remove! store i64 %23, i64* %24, align 8
Found line to remove! %25 = load i64, i64* %RBP, align 8
Found line to remove! %26 = add i64 %25, -8
Found line to remove! %27 = load i64, i64* %PC, align 8
Found line to remove! %28 = add i64 %27, 5
Found line to remove! store i64 %28, i64* %PC, align 8
Found line to remove! %29 = inttoptr i64 %26 to i64*
Found line to remove! %30 = load i64, i64* %29, align 8
Found line to remove! %31 = bitcast [32 x %union.VectorReg]* %3 to double*
Found line to remove! store i64 %30, i64* %14, align 1
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %33 = bitcast i64* %32 to double*
Found line to remove! store double 0.000000e+00, double* %33, align 1
Found line to remove! %34 = add i64 %27, 10
Found line to remove! store i64 %34, i64* %PC, align 8
Found line to remove! %35 = bitcast i64 %30 to double
Found line to remove! %36 = inttoptr i64 %26 to double*
Found line to remove! %37 = load double, double* %36, align 8
Found line to remove! %38 = fmul double %35, %37
Found line to remove! store double %38, double* %31, align 1
Found line to remove! store i64 0, i64* %32, align 1
Found line to remove! %39 = add i64 %25, -16
Found line to remove! %40 = add i64 %27, 15
Found line to remove! store i64 %40, i64* %PC, align 8
Found line to remove! %41 = inttoptr i64 %39 to i64*
Found line to remove! %42 = load i64, i64* %41, align 8
Found line to remove! store i64 %42, i64* %22, align 1
Found line to remove! %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Found line to remove! %44 = bitcast i64* %43 to double*
Found line to remove! store double 0.000000e+00, double* %44, align 1
Found line to remove! %45 = add i64 %27, 20
Found line to remove! store i64 %45, i64* %PC, align 8
Found line to remove! %46 = bitcast i64 %42 to double
Found line to remove! %47 = inttoptr i64 %39 to double*
Found line to remove! %48 = load double, double* %47, align 8
Found line to remove! %49 = fmul double %46, %48
Found line to remove! store double %49, double* %21, align 1
Found line to remove! store i64 0, i64* %43, align 1
Found line to remove! %50 = fadd double %38, %49
Found line to remove! store double %50, double* %31, align 1
Found line to remove! store i64 0, i64* %32, align 1
Found line to remove! %51 = add i64 %27, 25
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = load i64, i64* %7, align 8
Found line to remove! %53 = add i64 %52, 8
Found line to remove! %54 = inttoptr i64 %52 to i64*
Found line to remove! %55 = load i64, i64* %54, align 8
Found line to remove! store i64 %55, i64* %RBP, align 8
Found line to remove! store i64 %53, i64* %7, align 8
Found line to remove! %56 = add i64 %27, 26
Found line to remove! store i64 %56, i64* %PC, align 8
Found line to remove! %57 = inttoptr i64 %53 to i64*
Found line to remove! %58 = load i64, i64* %57, align 8
Found line to remove! store i64 %58, i64* %PC, align 8
Found line to remove! %59 = add i64 %52, 16
Found line to remove! store i64 %59, i64* %7, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_36/fun/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_36/binary/test.mcsema.calls_renamed.ll fun
/home/ubuntu/Github/llir-matcher/matcher/match.py:811: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
