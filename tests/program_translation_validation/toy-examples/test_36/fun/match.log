Matching sub_400500_fun Vs fun


[Info] Retrieve Potential Matches...
[0x5578fd6fce68]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71ac90]: %struct.State* %0 {
	[0x5578fd742260]:%struct.State.1* %0
	}

[0x5578fd71acd0]: i64 %1 {
	[0x5578fd757480]:i64 %1
	}

[0x5578fd71ad10]: %struct.Memory* %2 {
	[0x5578fd6d15f0]:%struct.Memory.32* %2
	}

[0x5578fd71af40]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5578fd72ee70]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5578fd71b030]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5578fd733380]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5578fd71b0d8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1 {
	[0x5578fd734758]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1
	}

[0x5578fd71b190]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1 {
	[0x5578fd818260]:  %17 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1
	}

[0x5578fd71b270]:   %6 = add i64 %1, 1 {
	[0x5578fd78c720]:  %5 = add i64 %1, 1
	}

[0x5578fd71b2f0]:   store i64 %6, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71b3d0]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5578fd733190]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5578fd71b448]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71b550]:   %9 = add i64 %8, -8 {
	[0x5578fd6ce0b0]:  %8 = add i64 %7, -8
	[0x5578fd6cf910]:  %27 = add i64 %26, -8
	}

[0x5578fd71b5b8]:   %10 = inttoptr i64 %9 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71b630]:   store i64 %5, i64* %10, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71b6b0]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71b718]:   %11 = load i64, i64* %PC, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71b790]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71b810]:   %12 = add i64 %8, -16 {
	[0x5578fd6d12e0]:  %40 = add i64 %26, -16
	[0x5578fd73f920]:  %12 = add i64 %7, -16
	[0x5578fd742b30]:  %19 = add i64 %18, -16
	}

[0x5578fd71b890]:   %13 = add i64 %11, 8 {
	[0x5578fd6d1d80]:  %54 = add i64 %53, 8
	[0x5578fd73d090]:  %13 = add i64 %10, 8
	}

[0x5578fd71b910]:   store i64 %13, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71ba08]:   %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5578fd732c40]:  %23 = getelementptr inbounds %union.VectorReg.3, %union.VectorReg.3* %17, i64 0, i32 0, i32 0, i32 0, i64 0
	[0x5578fd740318]:  %14 = getelementptr inbounds [32 x %union.VectorReg.3], [32 x %union.VectorReg.3]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5578fd71ba78]:   %15 = load i64, i64* %14, align 1 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71bad8]:   %16 = inttoptr i64 %12 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71bb50]:   store i64 %15, i64* %16, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71bbb8]:   %17 = load i64, i64* %RBP, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71bc30]:   %18 = add i64 %17, -16 {
	[0x5578fd6d12e0]:  %40 = add i64 %26, -16
	[0x5578fd73f920]:  %12 = add i64 %7, -16
	[0x5578fd742b30]:  %19 = add i64 %18, -16
	}

[0x5578fd71bc98]:   %19 = load i64, i64* %PC, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71bd10]:   %20 = add i64 %19, 5 {
	[0x5578fd6cff40]:  %21 = add i64 %20, 5
	[0x5578fd7426f0]:  %29 = add i64 %28, 5
	}

[0x5578fd71bd90]:   store i64 %20, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71bdf8]:   %21 = bitcast %union.VectorReg* %4 to double* {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71bed0]:   %22 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5578fd732c40]:  %23 = getelementptr inbounds %union.VectorReg.3, %union.VectorReg.3* %17, i64 0, i32 0, i32 0, i32 0, i64 0
	[0x5578fd740318]:  %14 = getelementptr inbounds [32 x %union.VectorReg.3], [32 x %union.VectorReg.3]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5578fd71bf48]:   %23 = load i64, i64* %22, align 1 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71bfa8]:   %24 = inttoptr i64 %18 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71c020]:   store i64 %23, i64* %24, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71c088]:   %25 = load i64, i64* %RBP, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71c100]:   %26 = add i64 %25, -8 {
	[0x5578fd6ce0b0]:  %8 = add i64 %7, -8
	[0x5578fd6cf910]:  %27 = add i64 %26, -8
	}

[0x5578fd71c168]:   %27 = load i64, i64* %PC, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71c1e0]:   %28 = add i64 %27, 5 {
	[0x5578fd6cff40]:  %21 = add i64 %20, 5
	[0x5578fd7426f0]:  %29 = add i64 %28, 5
	}

[0x5578fd71c260]:   store i64 %28, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71c2c8]:   %29 = inttoptr i64 %26 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71c328]:   %30 = load i64, i64* %29, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71c388]:   %31 = bitcast [32 x %union.VectorReg]* %3 to double* {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71c400]:   store i64 %30, i64* %14, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71c510]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x5578fd73d610]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x5578fd71c588]:   %33 = bitcast i64* %32 to double* {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71c600]:   store double 0.000000e+00, double* %33, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71c680]:   %34 = add i64 %27, 10 {
	[0x5578fd7419b0]:  %35 = add i64 %28, 10
	}

[0x5578fd71c700]:   store i64 %34, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71c768]:   %35 = bitcast i64 %30 to double {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71c7c8]:   %36 = inttoptr i64 %26 to double* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71c828]:   %37 = load double, double* %36, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71c8a0]:   %38 = fmul double %35, %37 {
	[0x5578fd6d1440]:  %50 = fmul double %47, %49
	[0x5578fd741860]:  %39 = fmul double %36, %38
	}

[0x5578fd71c920]:   store double %38, double* %31, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71c9a0]:   store i64 0, i64* %32, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71ca20]:   %39 = add i64 %25, -16 {
	[0x5578fd6d12e0]:  %40 = add i64 %26, -16
	[0x5578fd73f920]:  %12 = add i64 %7, -16
	[0x5578fd742b30]:  %19 = add i64 %18, -16
	}

[0x5578fd71caa0]:   %40 = add i64 %27, 15 {
	[0x5578fd6d1c30]:  %41 = add i64 %28, 15
	}

[0x5578fd71cb20]:   store i64 %40, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71cb88]:   %41 = inttoptr i64 %39 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71cbe8]:   %42 = load i64, i64* %41, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71cc60]:   store i64 %42, i64* %22, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71cd70]:   %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x5578fd81ce40]:  %44 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x5578fd71cde8]:   %44 = bitcast i64* %43 to double* {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71ce60]:   store double 0.000000e+00, double* %44, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71cf20]:   %45 = add i64 %27, 20 {
	[0x5578fd6d1970]:  %46 = add i64 %28, 20
	}

[0x5578fd71cfa0]:   store i64 %45, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71d008]:   %46 = bitcast i64 %42 to double {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71d068]:   %47 = inttoptr i64 %39 to double* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71d0c8]:   %48 = load double, double* %47, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71d140]:   %49 = fmul double %46, %48 {
	[0x5578fd6d1440]:  %50 = fmul double %47, %49
	[0x5578fd741860]:  %39 = fmul double %36, %38
	}

[0x5578fd71d1c0]:   store double %49, double* %21, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd71d240]:   store i64 0, i64* %43, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd772c10]:   %50 = fadd double %38, %49 {
	[0x5578fd6d22f0]:  %51 = fadd double %39, %50
	}

[0x5578fd772c90]:   store double %50, double* %31, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd772d10]:   store i64 0, i64* %32, align 1, !tbaa !1265 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd772dd0]:   %51 = add i64 %27, 25 {
	[0x5578fd743900]:  %52 = add i64 %28, 25
	}

[0x5578fd772e50]:   store i64 %51, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd772eb8]:   %52 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd772f30]:   %53 = add i64 %52, 8 {
	[0x5578fd6d1d80]:  %54 = add i64 %53, 8
	[0x5578fd73d090]:  %13 = add i64 %10, 8
	}

[0x5578fd772f98]:   %54 = inttoptr i64 %52 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd772ff8]:   %55 = load i64, i64* %54, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd773070]:   store i64 %55, i64* %RBP, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd7730f0]:   store i64 %53, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd7731b0]:   %56 = add i64 %27, 26 {
	[0x5578fd6d34b0]:  %57 = add i64 %28, 26
	}

[0x5578fd773230]:   store i64 %56, i64* %PC, align 8 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd773298]:   %57 = inttoptr i64 %53 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd7732f8]:   %58 = load i64, i64* %57, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd773370]:   store i64 %58, i64* %PC, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd7733f0]:   %59 = add i64 %52, 16 {
	[0x5578fd6d30a0]:  %60 = add i64 %53, 16
	}

[0x5578fd773470]:   store i64 %59, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd7734d8]:   ret %struct.Memory* %2 {
	[0x5578fd6d11f8]:  ret %struct.Memory.32* %2
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5578fd73d758]:   %18 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5578fd6fce68]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5578fd71b630]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x5578fd6cda40]:   store i64 %8, i64* %6, align 8
[0x5578fd6cdf60]:   store i64 %4, i64* %9, align 8
[0x5578fd6ce2f0]:   store i64 %5, i64* %3, align 8
[0x5578fd6cf7c0]:   store i64 %13, i64* %3, align 8
[0x5578fd6cfe60]:   store i64 %21, i64* %3, align 8
[0x5578fd6d0060]:   store i64 %15, i64* %16, align 8
[0x5578fd6d0240]:   store double %39, double* %32, align 1
[0x5578fd6d1ad0]:   store double 0.000000e+00, double* %45, align 1
[0x5578fd6d1ee0]:   store i64 %52, i64* %3, align 8
[0x5578fd6d2030]:   store i64 0, i64* %33, align 1
[0x5578fd6d2450]:   store i64 0, i64* %44, align 1
[0x5578fd6d25f0]:   store i64 %56, i64* %RBP.i, align 8
[0x5578fd6d2f50]:   store i64 %60, i64* %6, align 8
[0x5578fd6d3200]:   store i64 %59, i64* %3, align 8
[0x5578fd6d3350]:   store i64 %57, i64* %3, align 8
[0x5578fd6d36e0]:   store i64 %54, i64* %6, align 8
[0x5578fd741500]:   store i64 %8, i64* %RBP.i, align 8
[0x5578fd741660]:   store i64 0, i64* %33, align 1
[0x5578fd741b10]:   store double 0.000000e+00, double* %34, align 1
[0x5578fd742800]:   store i64 %24, i64* %25, align 8
[0x5578fd742c40]:   store i64 %29, i64* %3, align 8
[0x5578fd742e60]:   store i64 %35, i64* %3, align 8
[0x5578fd743080]:   store i64 %31, i64* %14, align 1
[0x5578fd7432a0]:   store i64 %46, i64* %3, align 8
[0x5578fd7434c0]:   store i64 %43, i64* %23, align 1
[0x5578fd7435d0]:   store i64 %41, i64* %3, align 8
[0x5578fd7436e0]:   store double %50, double* %22, align 1
[0x5578fd743a10]:   store double %51, double* %32, align 1


Adj: [0x5578fd742b30]:   %19 = add i64 %18, -16


Removing: [0x5578fd7446e8]:   %26 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5578fd6fce68]:   %5 = load i64, i64* %RBP, align 8


Uprime : [0x5578fd71b630]:   store i64 %5, i64* %10, align 8


Uprime Matches: [0x5578fd6cda40]:   store i64 %8, i64* %6, align 8
[0x5578fd6cdf60]:   store i64 %4, i64* %9, align 8
[0x5578fd6ce2f0]:   store i64 %5, i64* %3, align 8
[0x5578fd6cf7c0]:   store i64 %13, i64* %3, align 8
[0x5578fd6cfe60]:   store i64 %21, i64* %3, align 8
[0x5578fd6d0060]:   store i64 %15, i64* %16, align 8
[0x5578fd6d0240]:   store double %39, double* %32, align 1
[0x5578fd6d1ad0]:   store double 0.000000e+00, double* %45, align 1
[0x5578fd6d1ee0]:   store i64 %52, i64* %3, align 8
[0x5578fd6d2030]:   store i64 0, i64* %33, align 1
[0x5578fd6d2450]:   store i64 0, i64* %44, align 1
[0x5578fd6d25f0]:   store i64 %56, i64* %RBP.i, align 8
[0x5578fd6d2f50]:   store i64 %60, i64* %6, align 8
[0x5578fd6d3200]:   store i64 %59, i64* %3, align 8
[0x5578fd6d3350]:   store i64 %57, i64* %3, align 8
[0x5578fd6d36e0]:   store i64 %54, i64* %6, align 8
[0x5578fd741500]:   store i64 %8, i64* %RBP.i, align 8
[0x5578fd741660]:   store i64 0, i64* %33, align 1
[0x5578fd741b10]:   store double 0.000000e+00, double* %34, align 1
[0x5578fd742800]:   store i64 %24, i64* %25, align 8
[0x5578fd742c40]:   store i64 %29, i64* %3, align 8
[0x5578fd742e60]:   store i64 %35, i64* %3, align 8
[0x5578fd743080]:   store i64 %31, i64* %14, align 1
[0x5578fd7432a0]:   store i64 %46, i64* %3, align 8
[0x5578fd7434c0]:   store i64 %43, i64* %23, align 1
[0x5578fd7435d0]:   store i64 %41, i64* %3, align 8
[0x5578fd7436e0]:   store double %50, double* %22, align 1
[0x5578fd743a10]:   store double %51, double* %32, align 1


Adj: [0x5578fd6cf910]:   %27 = add i64 %26, -8
[0x5578fd6d12e0]:   %40 = add i64 %26, -16


Removing: [0x5578fd746368]:   %53 = load i64, i64* %6, align 8
From the pot matches of: [0x5578fd71b448]:   %8 = load i64, i64* %7, align 8, !tbaa !1261


Uprime : [0x5578fd71b810]:   %12 = add i64 %8, -16


Uprime Matches: [0x5578fd6d12e0]:   %40 = add i64 %26, -16
[0x5578fd73f920]:   %12 = add i64 %7, -16
[0x5578fd742b30]:   %19 = add i64 %18, -16


Adj: [0x5578fd6d1d80]:   %54 = add i64 %53, 8
[0x5578fd6d30a0]:   %60 = add i64 %53, 16
[0x5578fd7481c8]:   %55 = inttoptr i64 %53 to i64*


Removing: [0x5578fd744008]:   %28 = load i64, i64* %3, align 8
From the pot matches of: [0x5578fd71b718]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x5578fd71b890]:   %13 = add i64 %11, 8


Uprime Matches: [0x5578fd6d1d80]:   %54 = add i64 %53, 8
[0x5578fd73d090]:   %13 = add i64 %10, 8


Adj: [0x5578fd6d1970]:   %46 = add i64 %28, 20
[0x5578fd6d1c30]:   %41 = add i64 %28, 15
[0x5578fd6d34b0]:   %57 = add i64 %28, 26
[0x5578fd7419b0]:   %35 = add i64 %28, 10
[0x5578fd7426f0]:   %29 = add i64 %28, 5
[0x5578fd743900]:   %52 = add i64 %28, 25


Removing: [0x5578fd773638]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x5578fd71b718]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x5578fd71b890]:   %13 = add i64 %11, 8


Uprime Matches: [0x5578fd6d1d80]:   %54 = add i64 %53, 8
[0x5578fd73d090]:   %13 = add i64 %10, 8


Adj: [0x5578fd6cff40]:   %21 = add i64 %20, 5


Removing: [0x5578fd730108]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5578fd71bbb8]:   %17 = load i64, i64* %RBP, align 8


Uprime : [0x5578fd71bc30]:   %18 = add i64 %17, -16


Uprime Matches: [0x5578fd6d12e0]:   %40 = add i64 %26, -16
[0x5578fd73f920]:   %12 = add i64 %7, -16
[0x5578fd742b30]:   %19 = add i64 %18, -16


Adj: [0x5578fd6cdf60]:   store i64 %4, i64* %9, align 8


Removing: [0x5578fd73f558]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5578fd71bc98]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x5578fd71bd10]:   %20 = add i64 %19, 5


Uprime Matches: [0x5578fd6cff40]:   %21 = add i64 %20, 5
[0x5578fd7426f0]:   %29 = add i64 %28, 5


Adj: [0x5578fd73d090]:   %13 = add i64 %10, 8


Removing: [0x5578fd745198]:   %48 = inttoptr i64 %40 to double*
From the pot matches of: [0x5578fd71bfa8]:   %24 = inttoptr i64 %18 to i64*


Uprime : [0x5578fd71c020]:   store i64 %23, i64* %24, align 8


Uprime Matches: [0x5578fd742800]:   store i64 %24, i64* %25, align 8


Adj: [0x5578fd744cd8]:   %49 = load double, double* %48, align 8


Removing: [0x5578fd746108]:   %42 = inttoptr i64 %40 to i64*
From the pot matches of: [0x5578fd71bfa8]:   %24 = inttoptr i64 %18 to i64*


Uprime : [0x5578fd71c020]:   store i64 %23, i64* %24, align 8


Uprime Matches: [0x5578fd742800]:   store i64 %24, i64* %25, align 8


Adj: [0x5578fd745ea8]:   %43 = load i64, i64* %42, align 8


Removing: [0x5578fd730108]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5578fd71c088]:   %25 = load i64, i64* %RBP, align 8


Uprime : [0x5578fd71ca20]:   %39 = add i64 %25, -16


Uprime Matches: [0x5578fd6d12e0]:   %40 = add i64 %26, -16
[0x5578fd73f920]:   %12 = add i64 %7, -16
[0x5578fd742b30]:   %19 = add i64 %18, -16


Adj: [0x5578fd6cdf60]:   store i64 %4, i64* %9, align 8


Removing: [0x5578fd73d758]:   %18 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5578fd71c088]:   %25 = load i64, i64* %RBP, align 8


Uprime : [0x5578fd71c100]:   %26 = add i64 %25, -8


Uprime Matches: [0x5578fd6ce0b0]:   %8 = add i64 %7, -8
[0x5578fd6cf910]:   %27 = add i64 %26, -8


Adj: [0x5578fd742b30]:   %19 = add i64 %18, -16


Removing: [0x5578fd73f558]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5578fd71c168]:   %27 = load i64, i64* %PC, align 8


Uprime : [0x5578fd7731b0]:   %56 = add i64 %27, 26


Uprime Matches: [0x5578fd6d34b0]:   %57 = add i64 %28, 26


Adj: [0x5578fd73d090]:   %13 = add i64 %10, 8


Removing: [0x5578fd773638]:   %20 = load i64, i64* %3, align 8
From the pot matches of: [0x5578fd71c168]:   %27 = load i64, i64* %PC, align 8


Uprime : [0x5578fd7731b0]:   %56 = add i64 %27, 26


Uprime Matches: [0x5578fd6d34b0]:   %57 = add i64 %28, 26


Adj: [0x5578fd6cff40]:   %21 = add i64 %20, 5


Removing: [0x5578fd746238]:   %38 = load double, double* %37, align 8
From the pot matches of: [0x5578fd71c328]:   %30 = load i64, i64* %29, align 8


Uprime : [0x5578fd71c768]:   %35 = bitcast i64 %30 to double


Uprime Matches: [0x5578fd73ed68]:   %36 = bitcast i64 %31 to double
[0x5578fd740d28]:   %34 = bitcast i64* %33 to double*
[0x5578fd7452c8]:   %47 = bitcast i64 %43 to double
[0x5578fd7453f8]:   %45 = bitcast i64* %44 to double*
[0x5578fd756888]:   %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
[0x5578fd7952b8]:   %22 = bitcast %union.VectorReg.3* %17 to double*


Adj: [0x5578fd741860]:   %39 = fmul double %36, %38


Removing: [0x5578fd743b48]:   %31 = load i64, i64* %30, align 8
From the pot matches of: [0x5578fd71c828]:   %37 = load double, double* %36, align 8


Uprime : [0x5578fd71c8a0]:   %38 = fmul double %35, %37


Uprime Matches: [0x5578fd741860]:   %39 = fmul double %36, %38


Adj: [0x5578fd73ed68]:   %36 = bitcast i64 %31 to double
[0x5578fd743080]:   store i64 %31, i64* %14, align 1


Removing: [0x5578fd740918]:   %25 = inttoptr i64 %19 to i64*
From the pot matches of: [0x5578fd71cb88]:   %41 = inttoptr i64 %39 to i64*


Uprime : [0x5578fd71cbe8]:   %42 = load i64, i64* %41, align 8


Uprime Matches: [0x5578fd730108]:   %4 = load i64, i64* %RBP.i, align 8
[0x5578fd7302f8]:   %7 = load i64, i64* %6, align 8
[0x5578fd739568]:   %24 = load i64, i64* %23, align 1
[0x5578fd73d758]:   %18 = load i64, i64* %RBP.i, align 8
[0x5578fd73f558]:   %10 = load i64, i64* %3, align 8
[0x5578fd73f828]:   %15 = load i64, i64* %14, align 1
[0x5578fd743b48]:   %31 = load i64, i64* %30, align 8
[0x5578fd744008]:   %28 = load i64, i64* %3, align 8
[0x5578fd7446e8]:   %26 = load i64, i64* %RBP.i, align 8
[0x5578fd744cd8]:   %49 = load double, double* %48, align 8
[0x5578fd745ea8]:   %43 = load i64, i64* %42, align 8
[0x5578fd746238]:   %38 = load double, double* %37, align 8
[0x5578fd746368]:   %53 = load i64, i64* %6, align 8
[0x5578fd747d08]:   %59 = load i64, i64* %58, align 8
[0x5578fd748098]:   %56 = load i64, i64* %55, align 8
[0x5578fd773638]:   %20 = load i64, i64* %3, align 8


Adj: [0x5578fd742800]:   store i64 %24, i64* %25, align 8


Removing: [0x5578fd744cd8]:   %49 = load double, double* %48, align 8
From the pot matches of: [0x5578fd71cbe8]:   %42 = load i64, i64* %41, align 8


Uprime : [0x5578fd71d008]:   %46 = bitcast i64 %42 to double


Uprime Matches: [0x5578fd73ed68]:   %36 = bitcast i64 %31 to double
[0x5578fd740d28]:   %34 = bitcast i64* %33 to double*
[0x5578fd7452c8]:   %47 = bitcast i64 %43 to double
[0x5578fd7453f8]:   %45 = bitcast i64* %44 to double*
[0x5578fd756888]:   %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
[0x5578fd7952b8]:   %22 = bitcast %union.VectorReg.3* %17 to double*


Adj: [0x5578fd6d1440]:   %50 = fmul double %47, %49


Removing: [0x5578fd740918]:   %25 = inttoptr i64 %19 to i64*
From the pot matches of: [0x5578fd71d068]:   %47 = inttoptr i64 %39 to double*


Uprime : [0x5578fd71d0c8]:   %48 = load double, double* %47, align 8


Uprime Matches: [0x5578fd730108]:   %4 = load i64, i64* %RBP.i, align 8
[0x5578fd7302f8]:   %7 = load i64, i64* %6, align 8
[0x5578fd739568]:   %24 = load i64, i64* %23, align 1
[0x5578fd73d758]:   %18 = load i64, i64* %RBP.i, align 8
[0x5578fd73f558]:   %10 = load i64, i64* %3, align 8
[0x5578fd73f828]:   %15 = load i64, i64* %14, align 1
[0x5578fd743b48]:   %31 = load i64, i64* %30, align 8
[0x5578fd744008]:   %28 = load i64, i64* %3, align 8
[0x5578fd7446e8]:   %26 = load i64, i64* %RBP.i, align 8
[0x5578fd744cd8]:   %49 = load double, double* %48, align 8
[0x5578fd745ea8]:   %43 = load i64, i64* %42, align 8
[0x5578fd746238]:   %38 = load double, double* %37, align 8
[0x5578fd746368]:   %53 = load i64, i64* %6, align 8
[0x5578fd747d08]:   %59 = load i64, i64* %58, align 8
[0x5578fd748098]:   %56 = load i64, i64* %55, align 8
[0x5578fd773638]:   %20 = load i64, i64* %3, align 8


Adj: [0x5578fd742800]:   store i64 %24, i64* %25, align 8


Removing: [0x5578fd745ea8]:   %43 = load i64, i64* %42, align 8
From the pot matches of: [0x5578fd71d0c8]:   %48 = load double, double* %47, align 8


Uprime : [0x5578fd71d140]:   %49 = fmul double %46, %48


Uprime Matches: [0x5578fd6d1440]:   %50 = fmul double %47, %49


Adj: [0x5578fd7434c0]:   store i64 %43, i64* %23, align 1
[0x5578fd7452c8]:   %47 = bitcast i64 %43 to double


Removing: [0x5578fd7302f8]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5578fd772eb8]:   %52 = load i64, i64* %7, align 8, !tbaa !1261


Uprime : [0x5578fd7733f0]:   %59 = add i64 %52, 16


Uprime Matches: [0x5578fd6d30a0]:   %60 = add i64 %53, 16


Adj: [0x5578fd6ce0b0]:   %8 = add i64 %7, -8
[0x5578fd73f920]:   %12 = add i64 %7, -16

Round: 1

Removing: [0x5578fd6d12e0]:   %40 = add i64 %26, -16
From the pot matches of: [0x5578fd71bc30]:   %18 = add i64 %17, -16


Uprime : [0x5578fd71bfa8]:   %24 = inttoptr i64 %18 to i64*


Uprime Matches: [0x5578fd740918]:   %25 = inttoptr i64 %19 to i64*


Adj: [0x5578fd745198]:   %48 = inttoptr i64 %40 to double*
[0x5578fd746108]:   %42 = inttoptr i64 %40 to i64*


Removing: [0x5578fd744948]:   %37 = inttoptr i64 %27 to double*
From the pot matches of: [0x5578fd71c2c8]:   %29 = inttoptr i64 %26 to i64*


Uprime : [0x5578fd71c328]:   %30 = load i64, i64* %29, align 8


Uprime Matches: [0x5578fd743b48]:   %31 = load i64, i64* %30, align 8


Adj: [0x5578fd746238]:   %38 = load double, double* %37, align 8


Removing: [0x5578fd743c78]:   %30 = inttoptr i64 %27 to i64*
From the pot matches of: [0x5578fd71c7c8]:   %36 = inttoptr i64 %26 to double*


Uprime : [0x5578fd71c828]:   %37 = load double, double* %36, align 8


Uprime Matches: [0x5578fd746238]:   %38 = load double, double* %37, align 8


Adj: [0x5578fd743b48]:   %31 = load i64, i64* %30, align 8


Removing: [0x5578fd745198]:   %48 = inttoptr i64 %40 to double*
From the pot matches of: [0x5578fd71cb88]:   %41 = inttoptr i64 %39 to i64*


Uprime : [0x5578fd71cbe8]:   %42 = load i64, i64* %41, align 8


Uprime Matches: [0x5578fd745ea8]:   %43 = load i64, i64* %42, align 8


Adj: [0x5578fd744cd8]:   %49 = load double, double* %48, align 8


Removing: [0x5578fd746108]:   %42 = inttoptr i64 %40 to i64*
From the pot matches of: [0x5578fd71d068]:   %47 = inttoptr i64 %39 to double*


Uprime : [0x5578fd71d0c8]:   %48 = load double, double* %47, align 8


Uprime Matches: [0x5578fd744cd8]:   %49 = load double, double* %48, align 8


Adj: [0x5578fd745ea8]:   %43 = load i64, i64* %42, align 8

Round: 2

Removing: [0x5578fd7446e8]:   %26 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5578fd71bbb8]:   %17 = load i64, i64* %RBP, align 8


Uprime : [0x5578fd71bc30]:   %18 = add i64 %17, -16


Uprime Matches: [0x5578fd742b30]:   %19 = add i64 %18, -16


Adj: [0x5578fd6cf910]:   %27 = add i64 %26, -8
[0x5578fd6d12e0]:   %40 = add i64 %26, -16

Round: 3


[Info] After Dual Simulation: Round: 0
[0x5578fd6fce68]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5578fd71ac90]: %struct.State* %0 {
	[0x5578fd742260]:%struct.State.1* %0
	}

[0x5578fd71acd0]: i64 %1 {
	[0x5578fd757480]:i64 %1
	}

[0x5578fd71ad10]: %struct.Memory* %2 {
	[0x5578fd6d15f0]:%struct.Memory.32* %2
	}

[0x5578fd71af40]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5578fd72ee70]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5578fd71b030]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5578fd733380]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5578fd71b0d8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1 {
	[0x5578fd734758]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1
	}

[0x5578fd71b190]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1 {
	[0x5578fd818260]:  %17 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1
	}

[0x5578fd71b270]:   %6 = add i64 %1, 1 {
	[0x5578fd78c720]:  %5 = add i64 %1, 1
	}

[0x5578fd71b2f0]:   store i64 %6, i64* %PC, align 8 {
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	}

[0x5578fd71b3d0]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5578fd733190]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5578fd71b448]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	}

[0x5578fd71b550]:   %9 = add i64 %8, -8 {
	[0x5578fd6ce0b0]:  %8 = add i64 %7, -8
	}

[0x5578fd71b5b8]:   %10 = inttoptr i64 %9 to i64* {
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71b630]:   store i64 %5, i64* %10, align 8 {
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	}

[0x5578fd71b6b0]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	}

[0x5578fd71b718]:   %11 = load i64, i64* %PC, align 8 {
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	}

[0x5578fd71b790]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5578fd71b810]:   %12 = add i64 %8, -16 {
	[0x5578fd73f920]:  %12 = add i64 %7, -16
	}

[0x5578fd71b890]:   %13 = add i64 %11, 8 {
	[0x5578fd73d090]:  %13 = add i64 %10, 8
	}

[0x5578fd71b910]:   store i64 %13, i64* %PC, align 8 {
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	}

[0x5578fd71ba08]:   %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5578fd740318]:  %14 = getelementptr inbounds [32 x %union.VectorReg.3], [32 x %union.VectorReg.3]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5578fd71ba78]:   %15 = load i64, i64* %14, align 1 {
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	}

[0x5578fd71bad8]:   %16 = inttoptr i64 %12 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	}

[0x5578fd71bb50]:   store i64 %15, i64* %16, align 8 {
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	}

[0x5578fd71bbb8]:   %17 = load i64, i64* %RBP, align 8 {
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	}

[0x5578fd71bc30]:   %18 = add i64 %17, -16 {
	[0x5578fd742b30]:  %19 = add i64 %18, -16
	}

[0x5578fd71bc98]:   %19 = load i64, i64* %PC, align 8 {
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71bd10]:   %20 = add i64 %19, 5 {
	[0x5578fd6cff40]:  %21 = add i64 %20, 5
	[0x5578fd7426f0]:  %29 = add i64 %28, 5
	}

[0x5578fd71bd90]:   store i64 %20, i64* %PC, align 8 {
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	}

[0x5578fd71bdf8]:   %21 = bitcast %union.VectorReg* %4 to double* {
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71bed0]:   %22 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5578fd732c40]:  %23 = getelementptr inbounds %union.VectorReg.3, %union.VectorReg.3* %17, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5578fd71bf48]:   %23 = load i64, i64* %22, align 1 {
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	}

[0x5578fd71bfa8]:   %24 = inttoptr i64 %18 to i64* {
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	}

[0x5578fd71c020]:   store i64 %23, i64* %24, align 8 {
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	}

[0x5578fd71c088]:   %25 = load i64, i64* %RBP, align 8 {
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	}

[0x5578fd71c100]:   %26 = add i64 %25, -8 {
	[0x5578fd6cf910]:  %27 = add i64 %26, -8
	}

[0x5578fd71c168]:   %27 = load i64, i64* %PC, align 8 {
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	}

[0x5578fd71c1e0]:   %28 = add i64 %27, 5 {
	[0x5578fd7426f0]:  %29 = add i64 %28, 5
	}

[0x5578fd71c260]:   store i64 %28, i64* %PC, align 8 {
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	}

[0x5578fd71c2c8]:   %29 = inttoptr i64 %26 to i64* {
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	}

[0x5578fd71c328]:   %30 = load i64, i64* %29, align 8 {
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	}

[0x5578fd71c388]:   %31 = bitcast [32 x %union.VectorReg]* %3 to double* {
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	}

[0x5578fd71c400]:   store i64 %30, i64* %14, align 1, !tbaa !1265 {
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	}

[0x5578fd71c510]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x5578fd73d610]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x5578fd71c588]:   %33 = bitcast i64* %32 to double* {
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	}

[0x5578fd71c600]:   store double 0.000000e+00, double* %33, align 1, !tbaa !1265 {
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	}

[0x5578fd71c680]:   %34 = add i64 %27, 10 {
	[0x5578fd7419b0]:  %35 = add i64 %28, 10
	}

[0x5578fd71c700]:   store i64 %34, i64* %PC, align 8 {
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	}

[0x5578fd71c768]:   %35 = bitcast i64 %30 to double {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	}

[0x5578fd71c7c8]:   %36 = inttoptr i64 %26 to double* {
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	}

[0x5578fd71c828]:   %37 = load double, double* %36, align 8 {
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	}

[0x5578fd71c8a0]:   %38 = fmul double %35, %37 {
	[0x5578fd741860]:  %39 = fmul double %36, %38
	}

[0x5578fd71c920]:   store double %38, double* %31, align 1, !tbaa !1265 {
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	}

[0x5578fd71c9a0]:   store i64 0, i64* %32, align 1, !tbaa !1265 {
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	}

[0x5578fd71ca20]:   %39 = add i64 %25, -16 {
	[0x5578fd6d12e0]:  %40 = add i64 %26, -16
	}

[0x5578fd71caa0]:   %40 = add i64 %27, 15 {
	[0x5578fd6d1c30]:  %41 = add i64 %28, 15
	}

[0x5578fd71cb20]:   store i64 %40, i64* %PC, align 8 {
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	}

[0x5578fd71cb88]:   %41 = inttoptr i64 %39 to i64* {
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	}

[0x5578fd71cbe8]:   %42 = load i64, i64* %41, align 8 {
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	}

[0x5578fd71cc60]:   store i64 %42, i64* %22, align 1, !tbaa !1265 {
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	}

[0x5578fd71cd70]:   %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x5578fd81ce40]:  %44 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x5578fd71cde8]:   %44 = bitcast i64* %43 to double* {
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	}

[0x5578fd71ce60]:   store double 0.000000e+00, double* %44, align 1, !tbaa !1265 {
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	}

[0x5578fd71cf20]:   %45 = add i64 %27, 20 {
	[0x5578fd6d1970]:  %46 = add i64 %28, 20
	}

[0x5578fd71cfa0]:   store i64 %45, i64* %PC, align 8 {
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	}

[0x5578fd71d008]:   %46 = bitcast i64 %42 to double {
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	}

[0x5578fd71d068]:   %47 = inttoptr i64 %39 to double* {
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	}

[0x5578fd71d0c8]:   %48 = load double, double* %47, align 8 {
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	}

[0x5578fd71d140]:   %49 = fmul double %46, %48 {
	[0x5578fd6d1440]:  %50 = fmul double %47, %49
	}

[0x5578fd71d1c0]:   store double %49, double* %21, align 1, !tbaa !1265 {
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	}

[0x5578fd71d240]:   store i64 0, i64* %43, align 1, !tbaa !1265 {
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	}

[0x5578fd772c10]:   %50 = fadd double %38, %49 {
	[0x5578fd6d22f0]:  %51 = fadd double %39, %50
	}

[0x5578fd772c90]:   store double %50, double* %31, align 1, !tbaa !1265 {
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd772d10]:   store i64 0, i64* %32, align 1, !tbaa !1265 {
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	}

[0x5578fd772dd0]:   %51 = add i64 %27, 25 {
	[0x5578fd743900]:  %52 = add i64 %28, 25
	}

[0x5578fd772e50]:   store i64 %51, i64* %PC, align 8 {
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	}

[0x5578fd772eb8]:   %52 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	}

[0x5578fd772f30]:   %53 = add i64 %52, 8 {
	[0x5578fd6d1d80]:  %54 = add i64 %53, 8
	}

[0x5578fd772f98]:   %54 = inttoptr i64 %52 to i64* {
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	}

[0x5578fd772ff8]:   %55 = load i64, i64* %54, align 8 {
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	}

[0x5578fd773070]:   store i64 %55, i64* %RBP, align 8, !tbaa !1261 {
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	}

[0x5578fd7730f0]:   store i64 %53, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	}

[0x5578fd7731b0]:   %56 = add i64 %27, 26 {
	[0x5578fd6d34b0]:  %57 = add i64 %28, 26
	}

[0x5578fd773230]:   store i64 %56, i64* %PC, align 8 {
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	}

[0x5578fd773298]:   %57 = inttoptr i64 %53 to i64* {
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	}

[0x5578fd7732f8]:   %58 = load i64, i64* %57, align 8 {
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	}

[0x5578fd773370]:   store i64 %58, i64* %PC, align 8, !tbaa !1261 {
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	}

[0x5578fd7733f0]:   %59 = add i64 %52, 16 {
	[0x5578fd6d30a0]:  %60 = add i64 %53, 16
	}

[0x5578fd773470]:   store i64 %59, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	}

[0x5578fd7734d8]:   ret %struct.Memory* %2 {
	[0x5578fd6d11f8]:  ret %struct.Memory.32* %2
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5578fd71ad50]: block_400500 {
	[0x5578fd717cf0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5578fd7426f0]:   %29 = add i64 %28, 5
From the pot matches of: [0x5578fd71bd10]:   %20 = add i64 %19, 5


Uprime : [0x5578fd71bd90]:   store i64 %20, i64* %PC, align 8


Uprime Matches: [0x5578fd6cfe60]:   store i64 %21, i64* %3, align 8


Adj: [0x5578fd742c40]:   store i64 %29, i64* %3, align 8

Round: 1

Removing: [0x5578fd744008]:   %28 = load i64, i64* %3, align 8
From the pot matches of: [0x5578fd71bc98]:   %19 = load i64, i64* %PC, align 8


Uprime : [0x5578fd71bd10]:   %20 = add i64 %19, 5


Uprime Matches: [0x5578fd6cff40]:   %21 = add i64 %20, 5


Adj: [0x5578fd6d1970]:   %46 = add i64 %28, 20
[0x5578fd6d1c30]:   %41 = add i64 %28, 15
[0x5578fd6d34b0]:   %57 = add i64 %28, 26
[0x5578fd7419b0]:   %35 = add i64 %28, 10
[0x5578fd7426f0]:   %29 = add i64 %28, 5
[0x5578fd743900]:   %52 = add i64 %28, 25

Round: 2


[Info] After Dual Simulation: Round: 1
[0x5578fd6fce68]:   %5 = load i64, i64* %RBP, align 8 {
	[0x5578fd730108]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5578fd71ac90]: %struct.State* %0 {
	[0x5578fd742260]:%struct.State.1* %0
	}

[0x5578fd71acd0]: i64 %1 {
	[0x5578fd757480]:i64 %1
	}

[0x5578fd71ad10]: %struct.Memory* %2 {
	[0x5578fd6d15f0]:%struct.Memory.32* %2
	}

[0x5578fd71af40]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5578fd72ee70]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5578fd71b030]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5578fd733380]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5578fd71b0d8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1 {
	[0x5578fd734758]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1
	}

[0x5578fd71b190]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1 {
	[0x5578fd818260]:  %17 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1
	}

[0x5578fd71b270]:   %6 = add i64 %1, 1 {
	[0x5578fd78c720]:  %5 = add i64 %1, 1
	}

[0x5578fd71b2f0]:   store i64 %6, i64* %PC, align 8 {
	[0x5578fd6ce2f0]:  store i64 %5, i64* %3, align 8
	}

[0x5578fd71b3d0]:   %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5578fd733190]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5578fd71b448]:   %8 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd7302f8]:  %7 = load i64, i64* %6, align 8
	}

[0x5578fd71b550]:   %9 = add i64 %8, -8 {
	[0x5578fd6ce0b0]:  %8 = add i64 %7, -8
	}

[0x5578fd71b5b8]:   %10 = inttoptr i64 %9 to i64* {
	[0x5578fd786488]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5578fd71b630]:   store i64 %5, i64* %10, align 8 {
	[0x5578fd6cdf60]:  store i64 %4, i64* %9, align 8
	}

[0x5578fd71b6b0]:   store i64 %9, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6cda40]:  store i64 %8, i64* %6, align 8
	}

[0x5578fd71b718]:   %11 = load i64, i64* %PC, align 8 {
	[0x5578fd73f558]:  %10 = load i64, i64* %3, align 8
	}

[0x5578fd71b790]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x5578fd741500]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5578fd71b810]:   %12 = add i64 %8, -16 {
	[0x5578fd73f920]:  %12 = add i64 %7, -16
	}

[0x5578fd71b890]:   %13 = add i64 %11, 8 {
	[0x5578fd73d090]:  %13 = add i64 %10, 8
	}

[0x5578fd71b910]:   store i64 %13, i64* %PC, align 8 {
	[0x5578fd6cf7c0]:  store i64 %13, i64* %3, align 8
	}

[0x5578fd71ba08]:   %14 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5578fd740318]:  %14 = getelementptr inbounds [32 x %union.VectorReg.3], [32 x %union.VectorReg.3]* %11, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5578fd71ba78]:   %15 = load i64, i64* %14, align 1 {
	[0x5578fd73f828]:  %15 = load i64, i64* %14, align 1
	}

[0x5578fd71bad8]:   %16 = inttoptr i64 %12 to i64* {
	[0x5578fd73db58]:  %16 = inttoptr i64 %12 to i64*
	}

[0x5578fd71bb50]:   store i64 %15, i64* %16, align 8 {
	[0x5578fd6d0060]:  store i64 %15, i64* %16, align 8
	}

[0x5578fd71bbb8]:   %17 = load i64, i64* %RBP, align 8 {
	[0x5578fd73d758]:  %18 = load i64, i64* %RBP.i, align 8
	}

[0x5578fd71bc30]:   %18 = add i64 %17, -16 {
	[0x5578fd742b30]:  %19 = add i64 %18, -16
	}

[0x5578fd71bc98]:   %19 = load i64, i64* %PC, align 8 {
	[0x5578fd773638]:  %20 = load i64, i64* %3, align 8
	}

[0x5578fd71bd10]:   %20 = add i64 %19, 5 {
	[0x5578fd6cff40]:  %21 = add i64 %20, 5
	}

[0x5578fd71bd90]:   store i64 %20, i64* %PC, align 8 {
	[0x5578fd6cfe60]:  store i64 %21, i64* %3, align 8
	}

[0x5578fd71bdf8]:   %21 = bitcast %union.VectorReg* %4 to double* {
	[0x5578fd7952b8]:  %22 = bitcast %union.VectorReg.3* %17 to double*
	}

[0x5578fd71bed0]:   %22 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0 {
	[0x5578fd732c40]:  %23 = getelementptr inbounds %union.VectorReg.3, %union.VectorReg.3* %17, i64 0, i32 0, i32 0, i32 0, i64 0
	}

[0x5578fd71bf48]:   %23 = load i64, i64* %22, align 1 {
	[0x5578fd739568]:  %24 = load i64, i64* %23, align 1
	}

[0x5578fd71bfa8]:   %24 = inttoptr i64 %18 to i64* {
	[0x5578fd740918]:  %25 = inttoptr i64 %19 to i64*
	}

[0x5578fd71c020]:   store i64 %23, i64* %24, align 8 {
	[0x5578fd742800]:  store i64 %24, i64* %25, align 8
	}

[0x5578fd71c088]:   %25 = load i64, i64* %RBP, align 8 {
	[0x5578fd7446e8]:  %26 = load i64, i64* %RBP.i, align 8
	}

[0x5578fd71c100]:   %26 = add i64 %25, -8 {
	[0x5578fd6cf910]:  %27 = add i64 %26, -8
	}

[0x5578fd71c168]:   %27 = load i64, i64* %PC, align 8 {
	[0x5578fd744008]:  %28 = load i64, i64* %3, align 8
	}

[0x5578fd71c1e0]:   %28 = add i64 %27, 5 {
	[0x5578fd7426f0]:  %29 = add i64 %28, 5
	}

[0x5578fd71c260]:   store i64 %28, i64* %PC, align 8 {
	[0x5578fd742c40]:  store i64 %29, i64* %3, align 8
	}

[0x5578fd71c2c8]:   %29 = inttoptr i64 %26 to i64* {
	[0x5578fd743c78]:  %30 = inttoptr i64 %27 to i64*
	}

[0x5578fd71c328]:   %30 = load i64, i64* %29, align 8 {
	[0x5578fd743b48]:  %31 = load i64, i64* %30, align 8
	}

[0x5578fd71c388]:   %31 = bitcast [32 x %union.VectorReg]* %3 to double* {
	[0x5578fd756888]:  %32 = bitcast [32 x %union.VectorReg.3]* %11 to double*
	}

[0x5578fd71c400]:   store i64 %30, i64* %14, align 1, !tbaa !1265 {
	[0x5578fd743080]:  store i64 %31, i64* %14, align 1
	}

[0x5578fd71c510]:   %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1 {
	[0x5578fd73d610]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
	}

[0x5578fd71c588]:   %33 = bitcast i64* %32 to double* {
	[0x5578fd740d28]:  %34 = bitcast i64* %33 to double*
	}

[0x5578fd71c600]:   store double 0.000000e+00, double* %33, align 1, !tbaa !1265 {
	[0x5578fd741b10]:  store double 0.000000e+00, double* %34, align 1
	}

[0x5578fd71c680]:   %34 = add i64 %27, 10 {
	[0x5578fd7419b0]:  %35 = add i64 %28, 10
	}

[0x5578fd71c700]:   store i64 %34, i64* %PC, align 8 {
	[0x5578fd742e60]:  store i64 %35, i64* %3, align 8
	}

[0x5578fd71c768]:   %35 = bitcast i64 %30 to double {
	[0x5578fd73ed68]:  %36 = bitcast i64 %31 to double
	}

[0x5578fd71c7c8]:   %36 = inttoptr i64 %26 to double* {
	[0x5578fd744948]:  %37 = inttoptr i64 %27 to double*
	}

[0x5578fd71c828]:   %37 = load double, double* %36, align 8 {
	[0x5578fd746238]:  %38 = load double, double* %37, align 8
	}

[0x5578fd71c8a0]:   %38 = fmul double %35, %37 {
	[0x5578fd741860]:  %39 = fmul double %36, %38
	}

[0x5578fd71c920]:   store double %38, double* %31, align 1, !tbaa !1265 {
	[0x5578fd6d0240]:  store double %39, double* %32, align 1
	}

[0x5578fd71c9a0]:   store i64 0, i64* %32, align 1, !tbaa !1265 {
	[0x5578fd741660]:  store i64 0, i64* %33, align 1
	}

[0x5578fd71ca20]:   %39 = add i64 %25, -16 {
	[0x5578fd6d12e0]:  %40 = add i64 %26, -16
	}

[0x5578fd71caa0]:   %40 = add i64 %27, 15 {
	[0x5578fd6d1c30]:  %41 = add i64 %28, 15
	}

[0x5578fd71cb20]:   store i64 %40, i64* %PC, align 8 {
	[0x5578fd7435d0]:  store i64 %41, i64* %3, align 8
	}

[0x5578fd71cb88]:   %41 = inttoptr i64 %39 to i64* {
	[0x5578fd746108]:  %42 = inttoptr i64 %40 to i64*
	}

[0x5578fd71cbe8]:   %42 = load i64, i64* %41, align 8 {
	[0x5578fd745ea8]:  %43 = load i64, i64* %42, align 8
	}

[0x5578fd71cc60]:   store i64 %42, i64* %22, align 1, !tbaa !1265 {
	[0x5578fd7434c0]:  store i64 %43, i64* %23, align 1
	}

[0x5578fd71cd70]:   %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1 {
	[0x5578fd81ce40]:  %44 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
	}

[0x5578fd71cde8]:   %44 = bitcast i64* %43 to double* {
	[0x5578fd7453f8]:  %45 = bitcast i64* %44 to double*
	}

[0x5578fd71ce60]:   store double 0.000000e+00, double* %44, align 1, !tbaa !1265 {
	[0x5578fd6d1ad0]:  store double 0.000000e+00, double* %45, align 1
	}

[0x5578fd71cf20]:   %45 = add i64 %27, 20 {
	[0x5578fd6d1970]:  %46 = add i64 %28, 20
	}

[0x5578fd71cfa0]:   store i64 %45, i64* %PC, align 8 {
	[0x5578fd7432a0]:  store i64 %46, i64* %3, align 8
	}

[0x5578fd71d008]:   %46 = bitcast i64 %42 to double {
	[0x5578fd7452c8]:  %47 = bitcast i64 %43 to double
	}

[0x5578fd71d068]:   %47 = inttoptr i64 %39 to double* {
	[0x5578fd745198]:  %48 = inttoptr i64 %40 to double*
	}

[0x5578fd71d0c8]:   %48 = load double, double* %47, align 8 {
	[0x5578fd744cd8]:  %49 = load double, double* %48, align 8
	}

[0x5578fd71d140]:   %49 = fmul double %46, %48 {
	[0x5578fd6d1440]:  %50 = fmul double %47, %49
	}

[0x5578fd71d1c0]:   store double %49, double* %21, align 1, !tbaa !1265 {
	[0x5578fd7436e0]:  store double %50, double* %22, align 1
	}

[0x5578fd71d240]:   store i64 0, i64* %43, align 1, !tbaa !1265 {
	[0x5578fd6d2450]:  store i64 0, i64* %44, align 1
	}

[0x5578fd772c10]:   %50 = fadd double %38, %49 {
	[0x5578fd6d22f0]:  %51 = fadd double %39, %50
	}

[0x5578fd772c90]:   store double %50, double* %31, align 1, !tbaa !1265 {
	[0x5578fd743a10]:  store double %51, double* %32, align 1
	}

[0x5578fd772d10]:   store i64 0, i64* %32, align 1, !tbaa !1265 {
	[0x5578fd6d2030]:  store i64 0, i64* %33, align 1
	}

[0x5578fd772dd0]:   %51 = add i64 %27, 25 {
	[0x5578fd743900]:  %52 = add i64 %28, 25
	}

[0x5578fd772e50]:   store i64 %51, i64* %PC, align 8 {
	[0x5578fd6d1ee0]:  store i64 %52, i64* %3, align 8
	}

[0x5578fd772eb8]:   %52 = load i64, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd746368]:  %53 = load i64, i64* %6, align 8
	}

[0x5578fd772f30]:   %53 = add i64 %52, 8 {
	[0x5578fd6d1d80]:  %54 = add i64 %53, 8
	}

[0x5578fd772f98]:   %54 = inttoptr i64 %52 to i64* {
	[0x5578fd7481c8]:  %55 = inttoptr i64 %53 to i64*
	}

[0x5578fd772ff8]:   %55 = load i64, i64* %54, align 8 {
	[0x5578fd748098]:  %56 = load i64, i64* %55, align 8
	}

[0x5578fd773070]:   store i64 %55, i64* %RBP, align 8, !tbaa !1261 {
	[0x5578fd6d25f0]:  store i64 %56, i64* %RBP.i, align 8
	}

[0x5578fd7730f0]:   store i64 %53, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6d36e0]:  store i64 %54, i64* %6, align 8
	}

[0x5578fd7731b0]:   %56 = add i64 %27, 26 {
	[0x5578fd6d34b0]:  %57 = add i64 %28, 26
	}

[0x5578fd773230]:   store i64 %56, i64* %PC, align 8 {
	[0x5578fd6d3350]:  store i64 %57, i64* %3, align 8
	}

[0x5578fd773298]:   %57 = inttoptr i64 %53 to i64* {
	[0x5578fd747e38]:  %58 = inttoptr i64 %54 to i64*
	}

[0x5578fd7732f8]:   %58 = load i64, i64* %57, align 8 {
	[0x5578fd747d08]:  %59 = load i64, i64* %58, align 8
	}

[0x5578fd773370]:   store i64 %58, i64* %PC, align 8, !tbaa !1261 {
	[0x5578fd6d3200]:  store i64 %59, i64* %3, align 8
	}

[0x5578fd7733f0]:   %59 = add i64 %52, 16 {
	[0x5578fd6d30a0]:  %60 = add i64 %53, 16
	}

[0x5578fd773470]:   store i64 %59, i64* %7, align 8, !tbaa !1261 {
	[0x5578fd6d2f50]:  store i64 %60, i64* %6, align 8
	}

[0x5578fd7734d8]:   ret %struct.Memory* %2 {
	[0x5578fd6d11f8]:  ret %struct.Memory.32* %2
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5578fd71ad50]: block_400500 {
	[0x5578fd717cf0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [fun] from mcsema/test.opt.ll
Extracting function [fun] from mcsema/test.proposed.opt.ll
Matcher Done...
