Writing '/tmp/tmpvyy2h1bk.dot'...
Writing '/tmp/tmpvyy2h1bk.dot':Done

Reading LLVM: /tmp/tmpjvqs1zaq-query.ll
Extracting function [doOp] from /tmp/tmpjvqs1zaq-query.ll
Dot file generated!
Writing '/tmp/tmpqp1tug4m.dot'...
Writing '/tmp/tmpqp1tug4m.dot':Done

Reading LLVM: /tmp/tmpe6h_hd96-target.ll
Extracting function [doOp] from /tmp/tmpe6h_hd96-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 14 %EDI.i17 = bitcast %union.anon* %11 to i32*
- 15 %12 = add i64 %7, -12
- 16 %13 = load i32, i32* %EDI.i17, align 4
- 17 %14 = add i64 %10, 6
- 18 store i64 %14, i64* %3, align 8
- 19 %15 = inttoptr i64 %12 to i32*
- 20 store i32 %13, i32* %15, align 4
- 21 %RDI.i15 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
- 22 %16 = load i64, i64* %3, align 8
- 23 %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
- 24 %18 = zext i32 %17 to i64
- 25 store i64 %18, i64* %RDI.i15, align 8
- 26 %19 = load i64, i64* %RBP.i, align 8
- 27 %20 = add i64 %19, -8
- 28 %21 = add i64 %16, 10
- 29 store i64 %21, i64* %3, align 8
- 30 %22 = inttoptr i64 %20 to i32*
- 31 store i32 %17, i32* %22, align 4
- 32 %23 = load i64, i64* %RBP.i, align 8
- 33 %24 = add i64 %23, -4
- 34 %25 = load i64, i64* %3, align 8
- 35 %26 = add i64 %25, 3
- 36 store i64 %26, i64* %3, align 8
- 37 %27 = inttoptr i64 %24 to i32*
- 38 %28 = load i32, i32* %27, align 4
- 39 %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
- 40 %30 = add i32 %29, %28
- 41 %31 = zext i32 %30 to i64
- 42 store i64 %31, i64* %RDI.i15, align 8
- 43 %32 = icmp ult i32 %30, %28
- 44 %33 = icmp ult i32 %30, %29
- 45 %34 = or i1 %32, %33
- 46 %35 = zext i1 %34 to i8
- 47 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 48 store i8 %35, i8* %36, align 1
- 49 %37 = and i32 %30, 255
- 50 %38 = tail call i32 @llvm.ctpop.i32(i32 %37)
- 51 %39 = trunc i32 %38 to i8
- 52 %40 = and i8 %39, 1
- 53 %41 = xor i8 %40, 1
- 54 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 55 store i8 %41, i8* %42, align 1
- 56 %43 = xor i32 %29, %28
- 57 %44 = xor i32 %43, %30
- 58 %45 = lshr i32 %44, 4
- 59 %46 = trunc i32 %45 to i8
- 60 %47 = and i8 %46, 1
- 61 %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 62 store i8 %47, i8* %48, align 1
- 63 %49 = icmp eq i32 %30, 0
- 64 %50 = zext i1 %49 to i8
- 65 %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 66 store i8 %50, i8* %51, align 1
- 67 %52 = lshr i32 %30, 31
- 68 %53 = trunc i32 %52 to i8
- 69 %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 70 store i8 %53, i8* %54, align 1
- 71 %55 = lshr i32 %28, 31
- 72 %56 = lshr i32 %29, 31
- 73 %57 = xor i32 %52, %55
- 74 %58 = xor i32 %52, %56
- 75 %59 = add nuw nsw i32 %57, %58
- 76 %60 = icmp eq i32 %59, 2
- 77 %61 = zext i1 %60 to i8
- 78 %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 79 store i8 %61, i8* %62, align 1
- 80 store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
- 81 %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 82 %63 = add i64 %23, -8
- 83 %64 = add i64 %25, 20
- 84 store i64 %64, i64* %3, align 8
- 85 %65 = inttoptr i64 %63 to i32*
- 86 %66 = load i32, i32* %65, align 4
- 87 %67 = zext i32 %66 to i64
- 88 store i64 %67, i64* %RAX.i, align 8
- 89 %68 = add i64 %25, 21
- 90 store i64 %68, i64* %3, align 8
- 91 %69 = load i64, i64* %6, align 8
- 92 %70 = add i64 %69, 8
- 93 %71 = inttoptr i64 %69 to i64*
- 94 %72 = load i64, i64* %71, align 8
- 95 store i64 %72, i64* %RBP.i, align 8
- 96 store i64 %70, i64* %6, align 8
- 97 %73 = add i64 %25, 22
- 98 store i64 %73, i64* %3, align 8
- 99 %74 = inttoptr i64 %70 to i64*
- 100 %75 = load i64, i64* %74, align 8
- 101 store i64 %75, i64* %3, align 8
- 102 %76 = add i64 %69, 16
- 103 store i64 %76, i64* %6, align 8
- 104 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee33f4840>, {0: {0}, 1: {5}, 2: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 3: {7}, 4: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 5: {9}, 6: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 7: {82, 11, 28}, 8: {99, 38, 12, 85, 21, 93, 31}, 9: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 10: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 11: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 12: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 13: {1}, 14: {2}, 15: {17}, 16: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 17: {19}, 18: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 19: {99, 38, 12, 85, 21, 93, 31}, 20: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 21: {4}, 22: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 23: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 24: {65, 42, 78, 47, 87, 25}, 25: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 26: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 27: {82, 11, 28}, 28: {29}, 29: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 30: {99, 38, 12, 85, 21, 93, 31}, 31: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 32: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 33: {34}, 34: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 35: {36}, 36: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 37: {99, 38, 12, 85, 21, 93, 31}, 38: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 39: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 40: {41, 76}, 41: {65, 42, 78, 47, 87, 25}, 42: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 43: {64, 44, 45}, 44: {64, 44, 45}, 45: {46}, 46: {65, 42, 78, 47, 87, 25}, 47: {48}, 48: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 49: {50}, 50: {51}, 51: {52, 69, 60}, 52: {61, 53}, 53: {54}, 54: {55}, 55: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 56: {57, 58, 75, 74}, 57: {57, 58, 75, 74}, 58: {59}, 59: {52, 69, 60}, 60: {61, 53}, 61: {62}, 62: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 63: {64, 44, 45}, 64: {65, 42, 78, 47, 87, 25}, 65: {66}, 66: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 67: {72, 73, 68}, 68: {52, 69, 60}, 69: {70}, 70: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 71: {72, 73, 68}, 72: {72, 73, 68}, 73: {57, 58, 75, 74}, 74: {57, 58, 75, 74}, 75: {41, 76}, 76: {77}, 77: {65, 42, 78, 47, 87, 25}, 78: {79}, 79: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 80: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 81: {3}, 82: {82, 11, 28}, 83: {83}, 84: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 85: {99, 38, 12, 85, 21, 93, 31}, 86: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 87: {65, 42, 78, 47, 87, 25}, 88: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 89: {89}, 90: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 91: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 92: {92}, 93: {99, 38, 12, 85, 21, 93, 31}, 94: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 95: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 96: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 97: {97}, 98: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 99: {99, 38, 12, 85, 21, 93, 31}, 100: {33, 35, 100, 6, 39, 40, 10, 91, 15, 18, 86, 23, 24, 27, 94}, 101: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 102: {102}, 103: {8, 13, 14, 16, 20, 22, 26, 30, 32, 37, 43, 49, 56, 63, 67, 71, 80, 81, 84, 88, 90, 95, 96, 98, 101, 103}, 104: {104}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee33f4840>, {0: {0}, 1: {5}, 2: {6}, 3: {7}, 4: {8}, 5: {9}, 6: {10}, 7: {11}, 8: {12}, 9: {13}, 10: {14}, 11: {15}, 12: {16}, 13: {1}, 14: {2}, 15: {17}, 16: {18}, 17: {19}, 18: {20}, 19: {21}, 20: {22}, 21: {4}, 22: {23}, 23: {24}, 24: {25}, 25: {26}, 26: {27}, 27: {28}, 28: {29}, 29: {30}, 30: {31}, 31: {32}, 32: {33}, 33: {34}, 34: {35}, 35: {36}, 36: {37}, 37: {38}, 38: {39}, 39: {39, 40}, 40: {41}, 41: {42}, 42: {43}, 43: {44}, 44: {44, 45}, 45: {46}, 46: {47}, 47: {48}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {56}, 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {64}, 64: {65}, 65: {66}, 66: {67}, 67: {68}, 68: {69}, 69: {70}, 70: {71}, 71: {72}, 72: {72, 73}, 73: {74}, 74: {74, 75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {80}, 80: {81}, 81: {3}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 bitcast bitcast
EXACT 15 add add
EXACT 16 load load
EXACT 17 add add
EXACT 18 store store
EXACT 19 inttoptr inttoptr
EXACT 20 store store
EXACT 21 getelementptr getelementptr
EXACT 22 load load
EXACT 23 load load
EXACT 24 zext zext
EXACT 25 store store
EXACT 26 load load
EXACT 27 add add
EXACT 28 add add
EXACT 29 store store
EXACT 30 inttoptr inttoptr
EXACT 31 store store
EXACT 32 load load
EXACT 33 add add
EXACT 34 load load
EXACT 35 add add
EXACT 36 store store
EXACT 37 inttoptr inttoptr
EXACT 38 load load
MORE 39 POT: 2
EXACT 40 add add
EXACT 41 zext zext
EXACT 42 store store
EXACT 43 icmp icmp
MORE 44 POT: 2
EXACT 45 or or
EXACT 46 zext zext
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 and and
EXACT 50 tail tail
EXACT 51 trunc trunc
EXACT 52 and and
EXACT 53 xor xor
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 xor xor
EXACT 57 xor xor
EXACT 58 lshr lshr
EXACT 59 trunc trunc
EXACT 60 and and
EXACT 61 getelementptr getelementptr
EXACT 62 store store
EXACT 63 icmp icmp
EXACT 64 zext zext
EXACT 65 getelementptr getelementptr
EXACT 66 store store
EXACT 67 lshr lshr
EXACT 68 trunc trunc
EXACT 69 getelementptr getelementptr
EXACT 70 store store
EXACT 71 lshr lshr
MORE 72 POT: 2
EXACT 73 xor xor
MORE 74 POT: 2
EXACT 75 add add
EXACT 76 icmp icmp
EXACT 77 zext zext
EXACT 78 getelementptr getelementptr
EXACT 79 store store
EXACT 80 store store
EXACT 81 getelementptr getelementptr
EXACT 82 add add
EXACT 83 add add
EXACT 84 store store
EXACT 85 inttoptr inttoptr
EXACT 86 load load
EXACT 87 zext zext
EXACT 88 store store
EXACT 89 add add
EXACT 90 store store
EXACT 91 load load
EXACT 92 add add
EXACT 93 inttoptr inttoptr
EXACT 94 load load
EXACT 95 store store
EXACT 96 store store
EXACT 97 add add
EXACT 98 store store
EXACT 99 inttoptr inttoptr
EXACT 100 load load
EXACT 101 store store
EXACT 102 add add
EXACT 103 store store
EXACT 104 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 2 %EDI = bitcast %union.anon* %3 to i32*
- 3 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 4 %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 5 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 6 %4 = load i64, i64* %RBP, align 8
- 7 %5 = add i64 %1, 1
- 8 store i64 %5, i64* %PC, align 8
- 9 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %7 = load i64, i64* %6, align 8
- 11 %8 = add i64 %7, -8
- 12 %9 = inttoptr i64 %8 to i64*
- 13 store i64 %4, i64* %9, align 8
- 14 store i64 %8, i64* %6, align 8
- 15 %10 = load i64, i64* %PC, align 8
- 16 store i64 %8, i64* %RBP, align 8
- 17 %11 = add i64 %7, -12
- 18 %12 = load i32, i32* %EDI, align 4
- 19 %13 = add i64 %10, 6
- 20 store i64 %13, i64* %PC, align 8
- 21 %14 = inttoptr i64 %11 to i32*
- 22 store i32 %12, i32* %14, align 4
- 23 %15 = load i64, i64* %PC, align 8
- 24 %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8
- 25 %17 = zext i32 %16 to i64
- 26 store i64 %17, i64* %RDI, align 8
- 27 %18 = load i64, i64* %RBP, align 8
- 28 %19 = add i64 %18, -8
- 29 %20 = add i64 %15, 10
- 30 store i64 %20, i64* %PC, align 8
- 31 %21 = inttoptr i64 %19 to i32*
- 32 store i32 %16, i32* %21, align 4
- 33 %22 = load i64, i64* %RBP, align 8
- 34 %23 = add i64 %22, -4
- 35 %24 = load i64, i64* %PC, align 8
- 36 %25 = add i64 %24, 3
- 37 store i64 %25, i64* %PC, align 8
- 38 %26 = inttoptr i64 %23 to i32*
- 39 %27 = load i32, i32* %26, align 4
- 40 %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8
- 41 %29 = add i32 %28, %27
- 42 %30 = zext i32 %29 to i64
- 43 store i64 %30, i64* %RDI, align 8
- 44 %31 = icmp ult i32 %29, %27
- 45 %32 = icmp ult i32 %29, %28
- 46 %33 = or i1 %31, %32
- 47 %34 = zext i1 %33 to i8
- 48 %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 49 store i8 %34, i8* %35, align 1
- 50 %36 = and i32 %29, 255
- 51 %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #12
- 52 %38 = trunc i32 %37 to i8
- 53 %39 = and i8 %38, 1
- 54 %40 = xor i8 %39, 1
- 55 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 56 store i8 %40, i8* %41, align 1
- 57 %42 = xor i32 %28, %27
- 58 %43 = xor i32 %42, %29
- 59 %44 = lshr i32 %43, 4
- 60 %45 = trunc i32 %44 to i8
- 61 %46 = and i8 %45, 1
- 62 %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 63 store i8 %46, i8* %47, align 1
- 64 %48 = icmp eq i32 %29, 0
- 65 %49 = zext i1 %48 to i8
- 66 %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 67 store i8 %49, i8* %50, align 1
- 68 %51 = lshr i32 %29, 31
- 69 %52 = trunc i32 %51 to i8
- 70 %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 71 store i8 %52, i8* %53, align 1
- 72 %54 = lshr i32 %27, 31
- 73 %55 = lshr i32 %28, 31
- 74 %56 = xor i32 %51, %54
- 75 %57 = xor i32 %51, %55
- 76 %58 = add nuw nsw i32 %56, %57
- 77 %59 = icmp eq i32 %58, 2
- 78 %60 = zext i1 %59 to i8
- 79 %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 80 store i8 %60, i8* %61, align 1
- 81 store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8
- 82 %62 = add i64 %22, -8
- 83 %63 = add i64 %24, 20
- 84 store i64 %63, i64* %PC, align 8
- 85 %64 = inttoptr i64 %62 to i32*
- 86 %65 = load i32, i32* %64, align 4
- 87 %66 = zext i32 %65 to i64
- 88 store i64 %66, i64* %RAX, align 8
- 89 %67 = add i64 %24, 21
- 90 store i64 %67, i64* %PC, align 8
- 91 %68 = load i64, i64* %6, align 8
- 92 %69 = add i64 %68, 8
- 93 %70 = inttoptr i64 %68 to i64*
- 94 %71 = load i64, i64* %70, align 8
- 95 store i64 %71, i64* %RBP, align 8
- 96 store i64 %69, i64* %6, align 8
- 97 %72 = add i64 %24, 22
- 98 store i64 %72, i64* %PC, align 8
- 99 %73 = inttoptr i64 %69 to i64*
- 100 %74 = load i64, i64* %73, align 8
- 101 store i64 %74, i64* %PC, align 8
- 102 %75 = add i64 %68, 16
- 103 store i64 %75, i64* %6, align 8
- 104 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee33f46a8>, {0: {0}, 1: {13}, 2: {14}, 3: {81}, 4: {21}, 5: {1}, 6: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 7: {3}, 8: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 9: {5}, 10: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 11: {82, 27, 7}, 12: {99, 37, 8, 19, 85, 93, 30}, 13: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 14: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 15: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 16: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 17: {15}, 18: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 19: {17}, 20: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 21: {99, 37, 8, 19, 85, 93, 30}, 22: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 23: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 24: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 25: {64, 41, 77, 46, 87, 24}, 26: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 27: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 28: {82, 27, 7}, 29: {28}, 30: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 31: {99, 37, 8, 19, 85, 93, 30}, 32: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 33: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 34: {33}, 35: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 36: {35}, 37: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 38: {99, 37, 8, 19, 85, 93, 30}, 39: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 40: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 41: {40, 75}, 42: {64, 41, 77, 46, 87, 24}, 43: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 44: {43, 44, 63}, 45: {43, 44, 63}, 46: {45}, 47: {64, 41, 77, 46, 87, 24}, 48: {47}, 49: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 50: {49}, 51: {50}, 52: {59, 51, 68}, 53: {52, 60}, 54: {53}, 55: {54}, 56: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 57: {56, 57, 74, 73}, 58: {56, 57, 74, 73}, 59: {58}, 60: {59, 51, 68}, 61: {52, 60}, 62: {61}, 63: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 64: {43, 44, 63}, 65: {64, 41, 77, 46, 87, 24}, 66: {65}, 67: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 68: {72, 67, 71}, 69: {59, 51, 68}, 70: {69}, 71: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 72: {72, 67, 71}, 73: {72, 67, 71}, 74: {56, 57, 74, 73}, 75: {56, 57, 74, 73}, 76: {40, 75}, 77: {76}, 78: {64, 41, 77, 46, 87, 24}, 79: {78}, 80: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 81: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 82: {82, 27, 7}, 83: {83}, 84: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 85: {99, 37, 8, 19, 85, 93, 30}, 86: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 87: {64, 41, 77, 46, 87, 24}, 88: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 89: {89}, 90: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 91: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 92: {92}, 93: {99, 37, 8, 19, 85, 93, 30}, 94: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 95: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 96: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 97: {97}, 98: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 99: {99, 37, 8, 19, 85, 93, 30}, 100: {32, 2, 34, 100, 6, 38, 39, 11, 16, 22, 23, 86, 26, 91, 94}, 101: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 102: {102}, 103: {4, 9, 10, 12, 18, 20, 25, 29, 31, 36, 42, 48, 55, 62, 66, 70, 79, 80, 84, 88, 90, 95, 96, 98, 101, 103}, 104: {104}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee33f46a8>, {0: {0}, 1: {13}, 2: {14}, 3: {81}, 4: {21}, 5: {1}, 6: {2}, 7: {3}, 8: {4}, 9: {5}, 10: {6}, 11: {7}, 12: {8}, 13: {9}, 14: {10}, 15: {11}, 16: {12}, 17: {15}, 18: {16}, 19: {17}, 20: {18}, 21: {19}, 22: {20}, 23: {22}, 24: {23}, 25: {24}, 26: {25}, 27: {26}, 28: {27}, 29: {28}, 30: {29}, 31: {30}, 32: {31}, 33: {32}, 34: {33}, 35: {34}, 36: {35}, 37: {36}, 38: {37}, 39: {38}, 40: {38, 39}, 41: {40}, 42: {41}, 43: {42}, 44: {43}, 45: {43, 44}, 46: {45}, 47: {46}, 48: {47}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {63}, 65: {64}, 66: {65}, 67: {66}, 68: {67}, 69: {68}, 70: {69}, 71: {70}, 72: {71}, 73: {72, 71}, 74: {73}, 75: {73, 74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {79}, 81: {80}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 store store
EXACT 9 getelementptr getelementptr
EXACT 10 load load
EXACT 11 add add
EXACT 12 inttoptr inttoptr
EXACT 13 store store
EXACT 14 store store
EXACT 15 load load
EXACT 16 store store
EXACT 17 add add
EXACT 18 load load
EXACT 19 add add
EXACT 20 store store
EXACT 21 inttoptr inttoptr
EXACT 22 store store
EXACT 23 load load
EXACT 24 load load
EXACT 25 zext zext
EXACT 26 store store
EXACT 27 load load
EXACT 28 add add
EXACT 29 add add
EXACT 30 store store
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 load load
EXACT 34 add add
EXACT 35 load load
EXACT 36 add add
EXACT 37 store store
EXACT 38 inttoptr inttoptr
EXACT 39 load load
MORE 40 POT: 2
EXACT 41 add add
EXACT 42 zext zext
EXACT 43 store store
EXACT 44 icmp icmp
MORE 45 POT: 2
EXACT 46 or or
EXACT 47 zext zext
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 and and
EXACT 51 tail tail
EXACT 52 trunc trunc
EXACT 53 and and
EXACT 54 xor xor
EXACT 55 getelementptr getelementptr
EXACT 56 store store
EXACT 57 xor xor
EXACT 58 xor xor
EXACT 59 lshr lshr
EXACT 60 trunc trunc
EXACT 61 and and
EXACT 62 getelementptr getelementptr
EXACT 63 store store
EXACT 64 icmp icmp
EXACT 65 zext zext
EXACT 66 getelementptr getelementptr
EXACT 67 store store
EXACT 68 lshr lshr
EXACT 69 trunc trunc
EXACT 70 getelementptr getelementptr
EXACT 71 store store
EXACT 72 lshr lshr
MORE 73 POT: 2
EXACT 74 xor xor
MORE 75 POT: 2
EXACT 76 add add
EXACT 77 icmp icmp
EXACT 78 zext zext
EXACT 79 getelementptr getelementptr
EXACT 80 store store
EXACT 81 store store
EXACT 82 add add
EXACT 83 add add
EXACT 84 store store
EXACT 85 inttoptr inttoptr
EXACT 86 load load
EXACT 87 zext zext
EXACT 88 store store
EXACT 89 add add
EXACT 90 store store
EXACT 91 load load
EXACT 92 add add
EXACT 93 inttoptr inttoptr
EXACT 94 load load
EXACT 95 store store
EXACT 96 store store
EXACT 97 add add
EXACT 98 store store
EXACT 99 inttoptr inttoptr
EXACT 100 load load
EXACT 101 store store
EXACT 102 add add
EXACT 103 store store
EXACT 104 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i17 = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i17, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%RDI.i15 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0', '%16 = load i64, i64* %3, align 8', '%17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8', '%18 = zext i32 %17 to i64', 'store i64 %18, i64* %RDI.i15, align 8', '%19 = load i64, i64* %RBP.i, align 8', '%20 = add i64 %19, -8', '%21 = add i64 %16, 10', 'store i64 %21, i64* %3, align 8', '%22 = inttoptr i64 %20 to i32*', 'store i32 %17, i32* %22, align 4', '%25 = load i64, i64* %3, align 8', '%26 = add i64 %25, 3', 'store i64 %26, i64* %3, align 8', '%31 = zext i32 %30 to i64', 'store i64 %31, i64* %RDI.i15, align 8', '%32 = icmp ult i32 %30, %28', '%34 = or i1 %32, %33', '%35 = zext i1 %34 to i8', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %35, i8* %36, align 1', '%37 = and i32 %30, 255', '%38 = tail call i32 @llvm.ctpop.i32(i32 %37)', '%39 = trunc i32 %38 to i8', '%40 = and i8 %39, 1', '%41 = xor i8 %40, 1', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %41, i8* %42, align 1', '%43 = xor i32 %29, %28', '%44 = xor i32 %43, %30', '%45 = lshr i32 %44, 4', '%46 = trunc i32 %45 to i8', '%47 = and i8 %46, 1', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %47, i8* %48, align 1', '%49 = icmp eq i32 %30, 0', '%50 = zext i1 %49 to i8', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %50, i8* %51, align 1', '%53 = trunc i32 %52 to i8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %53, i8* %54, align 1', '%55 = lshr i32 %28, 31', '%57 = xor i32 %52, %55', '%59 = add nuw nsw i32 %57, %58', '%60 = icmp eq i32 %59, 2', '%61 = zext i1 %60 to i8', '%62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %61, i8* %62, align 1', 'store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%63 = add i64 %23, -8', '%64 = add i64 %25, 20', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %63 to i32*', '%66 = load i32, i32* %65, align 4', '%67 = zext i32 %66 to i64', 'store i64 %67, i64* %RAX.i, align 8', '%68 = add i64 %25, 21', 'store i64 %68, i64* %3, align 8', '%69 = load i64, i64* %6, align 8', '%70 = add i64 %69, 8', '%71 = inttoptr i64 %69 to i64*', '%72 = load i64, i64* %71, align 8', 'store i64 %72, i64* %RBP.i, align 8', 'store i64 %70, i64* %6, align 8', '%73 = add i64 %25, 22', 'store i64 %73, i64* %3, align 8', '%74 = inttoptr i64 %70 to i64*', '%75 = load i64, i64* %74, align 8', 'store i64 %75, i64* %3, align 8', '%76 = add i64 %69, 16', 'store i64 %76, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i17 = bitcast %union.anon* %11 to i32*
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = load i32, i32* %EDI.i17, align 4
Found line to remove! %14 = add i64 %10, 6
Found line to remove! store i64 %14, i64* %3, align 8
Found line to remove! %15 = inttoptr i64 %12 to i32*
Found line to remove! store i32 %13, i32* %15, align 4
Found line to remove! %RDI.i15 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
Found line to remove! %16 = load i64, i64* %3, align 8
Found line to remove! %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
Found line to remove! %18 = zext i32 %17 to i64
Found line to remove! store i64 %18, i64* %RDI.i15, align 8
Found line to remove! %19 = load i64, i64* %RBP.i, align 8
Found line to remove! %20 = add i64 %19, -8
Found line to remove! %21 = add i64 %16, 10
Found line to remove! store i64 %21, i64* %3, align 8
Found line to remove! %22 = inttoptr i64 %20 to i32*
Found line to remove! store i32 %17, i32* %22, align 4
Keep: %23 = load i64, i64* %RBP.i, align 8
Keep: %24 = add i64 %23, -4
Found line to remove! %25 = load i64, i64* %3, align 8
Found line to remove! %26 = add i64 %25, 3
Found line to remove! store i64 %26, i64* %3, align 8
Keep: %27 = inttoptr i64 %24 to i32*
Keep: %28 = load i32, i32* %27, align 4
Keep: %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
Keep: %30 = add i32 %29, %28
Found line to remove! %31 = zext i32 %30 to i64
Found line to remove! store i64 %31, i64* %RDI.i15, align 8
Found line to remove! %32 = icmp ult i32 %30, %28
Keep: %33 = icmp ult i32 %30, %29
Found line to remove! %34 = or i1 %32, %33
Found line to remove! %35 = zext i1 %34 to i8
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %35, i8* %36, align 1
Found line to remove! %37 = and i32 %30, 255
Found line to remove! %38 = tail call i32 @llvm.ctpop.i32(i32 %37)
Found line to remove! %39 = trunc i32 %38 to i8
Found line to remove! %40 = and i8 %39, 1
Found line to remove! %41 = xor i8 %40, 1
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %41, i8* %42, align 1
Found line to remove! %43 = xor i32 %29, %28
Found line to remove! %44 = xor i32 %43, %30
Found line to remove! %45 = lshr i32 %44, 4
Found line to remove! %46 = trunc i32 %45 to i8
Found line to remove! %47 = and i8 %46, 1
Found line to remove! %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %47, i8* %48, align 1
Found line to remove! %49 = icmp eq i32 %30, 0
Found line to remove! %50 = zext i1 %49 to i8
Found line to remove! %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %50, i8* %51, align 1
Keep: %52 = lshr i32 %30, 31
Found line to remove! %53 = trunc i32 %52 to i8
Found line to remove! %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %53, i8* %54, align 1
Found line to remove! %55 = lshr i32 %28, 31
Keep: %56 = lshr i32 %29, 31
Found line to remove! %57 = xor i32 %52, %55
Keep: %58 = xor i32 %52, %56
Found line to remove! %59 = add nuw nsw i32 %57, %58
Found line to remove! %60 = icmp eq i32 %59, 2
Found line to remove! %61 = zext i1 %60 to i8
Found line to remove! %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %61, i8* %62, align 1
Found line to remove! store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
Found line to remove! %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %63 = add i64 %23, -8
Found line to remove! %64 = add i64 %25, 20
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %65 = inttoptr i64 %63 to i32*
Found line to remove! %66 = load i32, i32* %65, align 4
Found line to remove! %67 = zext i32 %66 to i64
Found line to remove! store i64 %67, i64* %RAX.i, align 8
Found line to remove! %68 = add i64 %25, 21
Found line to remove! store i64 %68, i64* %3, align 8
Found line to remove! %69 = load i64, i64* %6, align 8
Found line to remove! %70 = add i64 %69, 8
Found line to remove! %71 = inttoptr i64 %69 to i64*
Found line to remove! %72 = load i64, i64* %71, align 8
Found line to remove! store i64 %72, i64* %RBP.i, align 8
Found line to remove! store i64 %70, i64* %6, align 8
Found line to remove! %73 = add i64 %25, 22
Found line to remove! store i64 %73, i64* %3, align 8
Found line to remove! %74 = inttoptr i64 %70 to i64*
Found line to remove! %75 = load i64, i64* %74, align 8
Found line to remove! store i64 %75, i64* %3, align 8
Found line to remove! %76 = add i64 %69, 16
Found line to remove! store i64 %76, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i17 = bitcast %union.anon* %11 to i32*', '%12 = add i64 %7, -12', '%13 = load i32, i32* %EDI.i17, align 4', '%14 = add i64 %10, 6', 'store i64 %14, i64* %3, align 8', '%15 = inttoptr i64 %12 to i32*', 'store i32 %13, i32* %15, align 4', '%RDI.i15 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0', '%16 = load i64, i64* %3, align 8', '%17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8', '%18 = zext i32 %17 to i64', 'store i64 %18, i64* %RDI.i15, align 8', '%19 = load i64, i64* %RBP.i, align 8', '%20 = add i64 %19, -8', '%21 = add i64 %16, 10', 'store i64 %21, i64* %3, align 8', '%22 = inttoptr i64 %20 to i32*', 'store i32 %17, i32* %22, align 4', '%25 = load i64, i64* %3, align 8', '%26 = add i64 %25, 3', 'store i64 %26, i64* %3, align 8', '%31 = zext i32 %30 to i64', 'store i64 %31, i64* %RDI.i15, align 8', '%32 = icmp ult i32 %30, %28', '%34 = or i1 %32, %33', '%35 = zext i1 %34 to i8', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %35, i8* %36, align 1', '%37 = and i32 %30, 255', '%38 = tail call i32 @llvm.ctpop.i32(i32 %37)', '%39 = trunc i32 %38 to i8', '%40 = and i8 %39, 1', '%41 = xor i8 %40, 1', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %41, i8* %42, align 1', '%43 = xor i32 %29, %28', '%44 = xor i32 %43, %30', '%45 = lshr i32 %44, 4', '%46 = trunc i32 %45 to i8', '%47 = and i8 %46, 1', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %47, i8* %48, align 1', '%49 = icmp eq i32 %30, 0', '%50 = zext i1 %49 to i8', '%51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %50, i8* %51, align 1', '%53 = trunc i32 %52 to i8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %53, i8* %54, align 1', '%55 = lshr i32 %28, 31', '%57 = xor i32 %52, %55', '%59 = add nuw nsw i32 %57, %58', '%60 = icmp eq i32 %59, 2', '%61 = zext i1 %60 to i8', '%62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %61, i8* %62, align 1', 'store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%63 = add i64 %23, -8', '%64 = add i64 %25, 20', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %63 to i32*', '%66 = load i32, i32* %65, align 4', '%67 = zext i32 %66 to i64', 'store i64 %67, i64* %RAX.i, align 8', '%68 = add i64 %25, 21', 'store i64 %68, i64* %3, align 8', '%69 = load i64, i64* %6, align 8', '%70 = add i64 %69, 8', '%71 = inttoptr i64 %69 to i64*', '%72 = load i64, i64* %71, align 8', 'store i64 %72, i64* %RBP.i, align 8', 'store i64 %70, i64* %6, align 8', '%73 = add i64 %25, 22', 'store i64 %73, i64* %3, align 8', '%74 = inttoptr i64 %70 to i64*', '%75 = load i64, i64* %74, align 8', 'store i64 %75, i64* %3, align 8', '%76 = add i64 %69, 16', 'store i64 %76, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -12', '%12 = load i32, i32* %EDI, align 4', '%13 = add i64 %10, 6', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i32*', 'store i32 %12, i32* %14, align 4', '%15 = load i64, i64* %PC, align 8', '%16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8', '%17 = zext i32 %16 to i64', 'store i64 %17, i64* %RDI, align 8', '%18 = load i64, i64* %RBP, align 8', '%19 = add i64 %18, -8', '%20 = add i64 %15, 10', 'store i64 %20, i64* %PC, align 8', '%21 = inttoptr i64 %19 to i32*', 'store i32 %16, i32* %21, align 4', '%24 = load i64, i64* %PC, align 8', '%25 = add i64 %24, 3', 'store i64 %25, i64* %PC, align 8', '%30 = zext i32 %29 to i64', 'store i64 %30, i64* %RDI, align 8', '%31 = icmp ult i32 %29, %27', '%33 = or i1 %31, %32', '%34 = zext i1 %33 to i8', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %34, i8* %35, align 1', '%36 = and i32 %29, 255', '%37 = tail call i32 @llvm.ctpop.i32(i32 %36) #12', '%38 = trunc i32 %37 to i8', '%39 = and i8 %38, 1', '%40 = xor i8 %39, 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %40, i8* %41, align 1', '%42 = xor i32 %28, %27', '%43 = xor i32 %42, %29', '%44 = lshr i32 %43, 4', '%45 = trunc i32 %44 to i8', '%46 = and i8 %45, 1', '%47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %46, i8* %47, align 1', '%48 = icmp eq i32 %29, 0', '%49 = zext i1 %48 to i8', '%50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %49, i8* %50, align 1', '%52 = trunc i32 %51 to i8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %52, i8* %53, align 1', '%54 = lshr i32 %27, 31', '%56 = xor i32 %51, %54', '%58 = add nuw nsw i32 %56, %57', '%59 = icmp eq i32 %58, 2', '%60 = zext i1 %59 to i8', '%61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %60, i8* %61, align 1', 'store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8', '%62 = add i64 %22, -8', '%63 = add i64 %24, 20', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %62 to i32*', '%65 = load i32, i32* %64, align 4', '%66 = zext i32 %65 to i64', 'store i64 %66, i64* %RAX, align 8', '%67 = add i64 %24, 21', 'store i64 %67, i64* %PC, align 8', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, 8', '%70 = inttoptr i64 %68 to i64*', '%71 = load i64, i64* %70, align 8', 'store i64 %71, i64* %RBP, align 8', 'store i64 %69, i64* %6, align 8', '%72 = add i64 %24, 22', 'store i64 %72, i64* %PC, align 8', '%73 = inttoptr i64 %69 to i64*', '%74 = load i64, i64* %73, align 8', 'store i64 %74, i64* %PC, align 8', '%75 = add i64 %68, 16', 'store i64 %75, i64* %6, align 8'])
Keep: block_400590:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %PC, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -12
Found line to remove! %12 = load i32, i32* %EDI, align 4
Found line to remove! %13 = add i64 %10, 6
Found line to remove! store i64 %13, i64* %PC, align 8
Found line to remove! %14 = inttoptr i64 %11 to i32*
Found line to remove! store i32 %12, i32* %14, align 4
Found line to remove! %15 = load i64, i64* %PC, align 8
Found line to remove! %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8
Found line to remove! %17 = zext i32 %16 to i64
Found line to remove! store i64 %17, i64* %RDI, align 8
Found line to remove! %18 = load i64, i64* %RBP, align 8
Found line to remove! %19 = add i64 %18, -8
Found line to remove! %20 = add i64 %15, 10
Found line to remove! store i64 %20, i64* %PC, align 8
Found line to remove! %21 = inttoptr i64 %19 to i32*
Found line to remove! store i32 %16, i32* %21, align 4
Keep: %22 = load i64, i64* %RBP, align 8
Keep: %23 = add i64 %22, -4
Found line to remove! %24 = load i64, i64* %PC, align 8
Found line to remove! %25 = add i64 %24, 3
Found line to remove! store i64 %25, i64* %PC, align 8
Keep: %26 = inttoptr i64 %23 to i32*
Keep: %27 = load i32, i32* %26, align 4
Keep: %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8
Keep: %29 = add i32 %28, %27
Found line to remove! %30 = zext i32 %29 to i64
Found line to remove! store i64 %30, i64* %RDI, align 8
Found line to remove! %31 = icmp ult i32 %29, %27
Keep: %32 = icmp ult i32 %29, %28
Found line to remove! %33 = or i1 %31, %32
Found line to remove! %34 = zext i1 %33 to i8
Found line to remove! %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %34, i8* %35, align 1
Found line to remove! %36 = and i32 %29, 255
Found line to remove! %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #12
Found line to remove! %38 = trunc i32 %37 to i8
Found line to remove! %39 = and i8 %38, 1
Found line to remove! %40 = xor i8 %39, 1
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %40, i8* %41, align 1
Found line to remove! %42 = xor i32 %28, %27
Found line to remove! %43 = xor i32 %42, %29
Found line to remove! %44 = lshr i32 %43, 4
Found line to remove! %45 = trunc i32 %44 to i8
Found line to remove! %46 = and i8 %45, 1
Found line to remove! %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %46, i8* %47, align 1
Found line to remove! %48 = icmp eq i32 %29, 0
Found line to remove! %49 = zext i1 %48 to i8
Found line to remove! %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %49, i8* %50, align 1
Keep: %51 = lshr i32 %29, 31
Found line to remove! %52 = trunc i32 %51 to i8
Found line to remove! %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %52, i8* %53, align 1
Found line to remove! %54 = lshr i32 %27, 31
Keep: %55 = lshr i32 %28, 31
Found line to remove! %56 = xor i32 %51, %54
Keep: %57 = xor i32 %51, %55
Found line to remove! %58 = add nuw nsw i32 %56, %57
Found line to remove! %59 = icmp eq i32 %58, 2
Found line to remove! %60 = zext i1 %59 to i8Writing '/tmp/tmpg62gyd6c.dot'...
Writing '/tmp/tmpg62gyd6c.dot':Done

Reading LLVM: /tmp/tmpjvqs1zaq-query.ll
Extracting function [doOp] from /tmp/tmpjvqs1zaq-query.ll
Dot file generated!
Writing '/tmp/tmp9p2ssm27.dot'...
Writing '/tmp/tmp9p2ssm27.dot':Done

Reading LLVM: /tmp/tmpe6h_hd96-target.ll
Extracting function [doOp] from /tmp/tmpe6h_hd96-target.ll
Dot file generated!

Found line to remove! %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %60, i8* %61, align 1
Found line to remove! store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8
Found line to remove! %62 = add i64 %22, -8
Found line to remove! %63 = add i64 %24, 20
Found line to remove! store i64 %63, i64* %PC, align 8
Found line to remove! %64 = inttoptr i64 %62 to i32*
Found line to remove! %65 = load i32, i32* %64, align 4
Found line to remove! %66 = zext i32 %65 to i64
Found line to remove! store i64 %66, i64* %RAX, align 8
Found line to remove! %67 = add i64 %24, 21
Found line to remove! store i64 %67, i64* %PC, align 8
Found line to remove! %68 = load i64, i64* %6, align 8
Found line to remove! %69 = add i64 %68, 8
Found line to remove! %70 = inttoptr i64 %68 to i64*
Found line to remove! %71 = load i64, i64* %70, align 8
Found line to remove! store i64 %71, i64* %RBP, align 8
Found line to remove! store i64 %69, i64* %6, align 8
Found line to remove! %72 = add i64 %24, 22
Found line to remove! store i64 %72, i64* %PC, align 8
Found line to remove! %73 = inttoptr i64 %69 to i64*
Found line to remove! %74 = load i64, i64* %73, align 8
Found line to remove! store i64 %74, i64* %PC, align 8
Found line to remove! %75 = add i64 %68, 16
Found line to remove! store i64 %75, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %3 to i32*', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%4 = load i64, i64* %RBP, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %PC, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -12', '%12 = load i32, i32* %EDI, align 4', '%13 = add i64 %10, 6', 'store i64 %13, i64* %PC, align 8', '%14 = inttoptr i64 %11 to i32*', 'store i32 %12, i32* %14, align 4', '%15 = load i64, i64* %PC, align 8', '%16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8', '%17 = zext i32 %16 to i64', 'store i64 %17, i64* %RDI, align 8', '%18 = load i64, i64* %RBP, align 8', '%19 = add i64 %18, -8', '%20 = add i64 %15, 10', 'store i64 %20, i64* %PC, align 8', '%21 = inttoptr i64 %19 to i32*', 'store i32 %16, i32* %21, align 4', '%24 = load i64, i64* %PC, align 8', '%25 = add i64 %24, 3', 'store i64 %25, i64* %PC, align 8', '%30 = zext i32 %29 to i64', 'store i64 %30, i64* %RDI, align 8', '%31 = icmp ult i32 %29, %27', '%33 = or i1 %31, %32', '%34 = zext i1 %33 to i8', '%35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %34, i8* %35, align 1', '%36 = and i32 %29, 255', '%37 = tail call i32 @llvm.ctpop.i32(i32 %36) #12', '%38 = trunc i32 %37 to i8', '%39 = and i8 %38, 1', '%40 = xor i8 %39, 1', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %40, i8* %41, align 1', '%42 = xor i32 %28, %27', '%43 = xor i32 %42, %29', '%44 = lshr i32 %43, 4', '%45 = trunc i32 %44 to i8', '%46 = and i8 %45, 1', '%47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %46, i8* %47, align 1', '%48 = icmp eq i32 %29, 0', '%49 = zext i1 %48 to i8', '%50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %49, i8* %50, align 1', '%52 = trunc i32 %51 to i8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %52, i8* %53, align 1', '%54 = lshr i32 %27, 31', '%56 = xor i32 %51, %54', '%58 = add nuw nsw i32 %56, %57', '%59 = icmp eq i32 %58, 2', '%60 = zext i1 %59 to i8', '%61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %60, i8* %61, align 1', 'store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8', '%62 = add i64 %22, -8', '%63 = add i64 %24, 20', 'store i64 %63, i64* %PC, align 8', '%64 = inttoptr i64 %62 to i32*', '%65 = load i32, i32* %64, align 4', '%66 = zext i32 %65 to i64', 'store i64 %66, i64* %RAX, align 8', '%67 = add i64 %24, 21', 'store i64 %67, i64* %PC, align 8', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, 8', '%70 = inttoptr i64 %68 to i64*', '%71 = load i64, i64* %70, align 8', 'store i64 %71, i64* %RBP, align 8', 'store i64 %69, i64* %6, align 8', '%72 = add i64 %24, 22', 'store i64 %72, i64* %PC, align 8', '%73 = inttoptr i64 %69 to i64*', '%74 = load i64, i64* %73, align 8', 'store i64 %74, i64* %PC, align 8', '%75 = add i64 %68, 16', 'store i64 %75, i64* %6, align 8'])
================ Starting round 2
MAPPING:
- 0 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee30d6950>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee30d6950>, {0: {0}})
EXACT 0 ret ret
================ Starting round 3
MAPPING:
- 0 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee2e8df28>, {0: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f2ee2e8df28>, {0: {0}})
EXACT 0 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys([])
Keep: entry:
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_400590:
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_15/doOp/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_15/binary/test.mcsema.calls_renamed.ll doOp
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
