Matching sub_400570_doOp Vs doOp


[Info] Retrieve Potential Matches...
[0x55cfd8519388]:   %18 = load i64, i64* %RBP, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd8519400]:   %19 = add i64 %18, -8 {
	[0x55cfd8527e50]:  %8 = add i64 %7, -8
	[0x55cfd8532420]:  %20 = add i64 %19, -8
	[0x55cfd85a6360]:  %63 = add i64 %23, -8
	}

[0x55cfd8519480]:   %20 = add i64 %15, 10 {
	[0x55cfd85a5220]:  %21 = add i64 %16, 10
	}

[0x55cfd8519500]:   store i64 %20, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd8519568]:   %21 = inttoptr i64 %19 to i32* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd85195e0]:   store i32 %16, i32* %21, align 4 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd8519648]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd8519700]:   %23 = add i64 %22, -4 {
	[0x55cfd85a5660]:  %24 = add i64 %23, -4
	}

[0x55cfd8519768]:   %24 = load i64, i64* %PC, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd85197e0]:   %25 = add i64 %24, 3 {
	[0x55cfd8533cc0]:  %26 = add i64 %25, 3
	}

[0x55cfd8519860]:   store i64 %25, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd85198c8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd8519928]:   %27 = load i32, i32* %26, align 4 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd85199c8]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55cfd85259c8]:  %RDI.i15 = getelementptr inbounds %union.anon.5, %union.anon.5* %11, i64 0, i32 0
	}

[0x55cfd8519ad0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55cfd8590d70]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55cfd8519b68]:   %4 = load i64, i64* %RBP, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd8519c30]:   %5 = add i64 %1, 1 {
	[0x55cfd8530a70]:  %5 = add i64 %1, 1
	}

[0x55cfd8519cb0]:   store i64 %5, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd8519d90]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55cfd858fbf0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55cfd8519e08]:   %7 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd8519e80]:   %8 = add i64 %7, -8 {
	[0x55cfd8527e50]:  %8 = add i64 %7, -8
	[0x55cfd8532420]:  %20 = add i64 %19, -8
	[0x55cfd85a6360]:  %63 = add i64 %23, -8
	}

[0x55cfd8519ee8]:   %9 = inttoptr i64 %8 to i64* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd8519f60]:   store i64 %4, i64* %9, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd8519fe0]:   store i64 %8, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851a048]:   %10 = load i64, i64* %PC, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851a0c0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851a180]:   %11 = add i64 %7, -12 {
	[0x55cfd85f6b50]:  %12 = add i64 %7, -12
	}

[0x55cfd851a1e8]:   %12 = load i32, i32* %EDI, align 4 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851a260]:   %13 = add i64 %10, 6 {
	[0x55cfd8530bc0]:  %14 = add i64 %10, 6
	}

[0x55cfd851a2e0]:   store i64 %13, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851a348]:   %14 = inttoptr i64 %11 to i32* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd851a3c0]:   store i32 %12, i32* %14, align 4 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851a428]:   %15 = load i64, i64* %PC, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851a528]:   %17 = zext i32 %16 to i64 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851a5a0]:   store i64 %17, i64* %RDI, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851b290]:   %29 = add i32 %28, %27 {
	[0x55cfd8535e80]:  %59 = add nuw nsw i32 %57, %58
	[0x55cfd85a5990]:  %30 = add i32 %29, %28
	}

[0x55cfd851b2f8]:   %30 = zext i32 %29 to i64 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851b370]:   store i64 %30, i64* %RDI, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851b3f0]:   %31 = icmp ult i32 %29, %27 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	[0x55cfd8535d30]:  %60 = icmp eq i32 %59, 2
	[0x55cfd85a4440]:  %33 = icmp ult i32 %30, %29
	[0x55cfd85a6540]:  %49 = icmp eq i32 %30, 0
	}

[0x55cfd851b470]:   %32 = icmp ult i32 %29, %28 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	[0x55cfd8535d30]:  %60 = icmp eq i32 %59, 2
	[0x55cfd85a4440]:  %33 = icmp ult i32 %30, %29
	[0x55cfd85a6540]:  %49 = icmp eq i32 %30, 0
	}

[0x55cfd851b4f0]:   %33 = or i1 %31, %32 {
	[0x55cfd85a5770]:  %34 = or i1 %32, %33
	}

[0x55cfd851b558]:   %34 = zext i1 %33 to i8 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851b600]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55cfd867a990]:  %36 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55cfd851b690]:   store i8 %34, i8* %35, align 1, !tbaa !1265 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851b710]:   %36 = and i32 %29, 255 {
	[0x55cfd85a6100]:  %37 = and i32 %30, 255
	}

[0x55cfd851b7b8]:   %38 = trunc i32 %37 to i8 {
	[0x55cfd85a7478]:  %39 = trunc i32 %38 to i8
	[0x55cfd85a89d8]:  %53 = trunc i32 %52 to i8
	[0x55cfd85a8d68]:  %46 = trunc i32 %45 to i8
	}

[0x55cfd851b830]:   %39 = and i8 %38, 1 {
	[0x55cfd8534760]:  %47 = and i8 %46, 1
	[0x55cfd85a5ff0]:  %40 = and i8 %39, 1
	}

[0x55cfd851b8b0]:   %40 = xor i8 %39, 1 {
	[0x55cfd8534600]:  %41 = xor i8 %40, 1
	}

[0x55cfd851b960]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55cfd85dab00]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55cfd851b9f0]:   store i8 %40, i8* %41, align 1, !tbaa !1279 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851ba70]:   %42 = xor i32 %28, %27 {
	[0x55cfd8533f70]:  %44 = xor i32 %43, %30
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	[0x55cfd8535fe0]:  %58 = xor i32 %52, %56
	[0x55cfd85a5dd0]:  %43 = xor i32 %29, %28
	}

[0x55cfd851baf0]:   %43 = xor i32 %42, %29 {
	[0x55cfd8533f70]:  %44 = xor i32 %43, %30
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	[0x55cfd8535fe0]:  %58 = xor i32 %52, %56
	[0x55cfd85a5dd0]:  %43 = xor i32 %29, %28
	}

[0x55cfd851bb70]:   %44 = lshr i32 %43, 4 {
	[0x55cfd8533e10]:  %45 = lshr i32 %44, 4
	}

[0x55cfd851bbd8]:   %45 = trunc i32 %44 to i8 {
	[0x55cfd85a7478]:  %39 = trunc i32 %38 to i8
	[0x55cfd85a89d8]:  %53 = trunc i32 %52 to i8
	[0x55cfd85a8d68]:  %46 = trunc i32 %45 to i8
	}

[0x55cfd851bc50]:   %46 = and i8 %45, 1 {
	[0x55cfd8534760]:  %47 = and i8 %46, 1
	[0x55cfd85a5ff0]:  %40 = and i8 %39, 1
	}

[0x55cfd851bd00]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55cfd853dd60]:  %48 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55cfd851bd90]:   store i8 %46, i8* %47, align 1, !tbaa !1280 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851be10]:   %48 = icmp eq i32 %29, 0 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	[0x55cfd8535d30]:  %60 = icmp eq i32 %59, 2
	[0x55cfd85a4440]:  %33 = icmp ult i32 %30, %29
	[0x55cfd85a6540]:  %49 = icmp eq i32 %30, 0
	}

[0x55cfd851be78]:   %49 = zext i1 %48 to i8 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851bf20]:   %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55cfd8538e00]:  %51 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55cfd851bfb0]:   store i8 %49, i8* %50, align 1, !tbaa !1281 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851c030]:   %51 = lshr i32 %29, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	[0x55cfd85a6210]:  %56 = lshr i32 %29, 31
	[0x55cfd85a6430]:  %52 = lshr i32 %30, 31
	}

[0x55cfd851c098]:   %52 = trunc i32 %51 to i8 {
	[0x55cfd85a7478]:  %39 = trunc i32 %38 to i8
	[0x55cfd85a89d8]:  %53 = trunc i32 %52 to i8
	[0x55cfd85a8d68]:  %46 = trunc i32 %45 to i8
	}

[0x55cfd851c140]:   %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55cfd8535800]:  %54 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55cfd851c1d0]:   store i8 %52, i8* %53, align 1, !tbaa !1282 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851c250]:   %54 = lshr i32 %27, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	[0x55cfd85a6210]:  %56 = lshr i32 %29, 31
	[0x55cfd85a6430]:  %52 = lshr i32 %30, 31
	}

[0x55cfd851c2d0]:   %55 = lshr i32 %28, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	[0x55cfd85a6210]:  %56 = lshr i32 %29, 31
	[0x55cfd85a6430]:  %52 = lshr i32 %30, 31
	}

[0x55cfd851c350]:   %56 = xor i32 %51, %54 {
	[0x55cfd8533f70]:  %44 = xor i32 %43, %30
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	[0x55cfd8535fe0]:  %58 = xor i32 %52, %56
	[0x55cfd85a5dd0]:  %43 = xor i32 %29, %28
	}

[0x55cfd851c3d0]:   %57 = xor i32 %51, %55 {
	[0x55cfd8533f70]:  %44 = xor i32 %43, %30
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	[0x55cfd8535fe0]:  %58 = xor i32 %52, %56
	[0x55cfd85a5dd0]:  %43 = xor i32 %29, %28
	}

[0x55cfd851c450]:   %58 = add nuw nsw i32 %56, %57 {
	[0x55cfd8535e80]:  %59 = add nuw nsw i32 %57, %58
	[0x55cfd85a5990]:  %30 = add i32 %29, %28
	}

[0x55cfd851c4d0]:   %59 = icmp eq i32 %58, 2 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	[0x55cfd8535d30]:  %60 = icmp eq i32 %59, 2
	[0x55cfd85a4440]:  %33 = icmp ult i32 %30, %29
	[0x55cfd85a6540]:  %49 = icmp eq i32 %30, 0
	}

[0x55cfd851c538]:   %60 = zext i1 %59 to i8 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851c5e0]:   %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55cfd8535590]:  %62 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55cfd851c670]:   store i8 %60, i8* %61, align 1, !tbaa !1283 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851c6f0]:   store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851c770]:   %62 = add i64 %22, -8 {
	[0x55cfd8527e50]:  %8 = add i64 %7, -8
	[0x55cfd8532420]:  %20 = add i64 %19, -8
	[0x55cfd85a6360]:  %63 = add i64 %23, -8
	}

[0x55cfd851c830]:   %63 = add i64 %24, 20 {
	[0x55cfd8535120]:  %64 = add i64 %25, 20
	}

[0x55cfd851c8b0]:   store i64 %63, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851c918]:   %64 = inttoptr i64 %62 to i32* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd851cd88]:   %65 = load i32, i32* %64, align 4 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851cde8]:   %66 = zext i32 %65 to i64 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851ce60]:   store i64 %66, i64* %RAX, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851cf20]:   %67 = add i64 %24, 21 {
	[0x55cfd85383f0]:  %68 = add i64 %25, 21
	}

[0x55cfd851cfa0]:   store i64 %67, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851d008]:   %68 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851d080]:   %69 = add i64 %68, 8 {
	[0x55cfd8536990]:  %70 = add i64 %69, 8
	}

[0x55cfd851d0e8]:   %70 = inttoptr i64 %68 to i64* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd851d148]:   %71 = load i64, i64* %70, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851d1c0]:   store i64 %71, i64* %RBP, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851d240]:   store i64 %69, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851d2c0]:   %72 = add i64 %24, 22 {
	[0x55cfd8536410]:  %73 = add i64 %25, 22
	}

[0x55cfd851d340]:   store i64 %72, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851d3a8]:   %73 = inttoptr i64 %69 to i64* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd851d408]:   %74 = load i64, i64* %73, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851d480]:   store i64 %74, i64* %PC, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851d500]:   %75 = add i64 %68, 16 {
	[0x55cfd853b3f0]:  %76 = add i64 %69, 16
	}

[0x55cfd851d580]:   store i64 %75, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd85215f8]:   ret %struct.Memory* %2 {
	[0x55cfd85aa248]:  ret %struct.Memory.32* %2
	}

[0x55cfd85c5870]: %struct.State* %0 {
	[0x55cfd8527c30]:%struct.State.1* %0
	}

[0x55cfd85c58b0]: i64 %1 {
	[0x55cfd8534260]:i64 %1
	}

[0x55cfd85c58f0]: %struct.Memory* %2 {
	[0x55cfd8535030]:%struct.Memory.32* %2
	}

[0x55cfd85c5aa8]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x55cfd85a3448]:  %EDI.i17 = bitcast %union.anon.5* %11 to i32*
	}

[0x55cfd85c5b80]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55cfd8589510]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55cfd85c5c70]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55cfd858fa20]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55cfd85c5d20]:   %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #9 {
	[0x55cfd8692720]:  %38 = tail call i32 @llvm.ctpop.i32(i32 %37)
	}

[0x55cfd85e6578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55cfd85f4528]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x55cfd8509258]:   %19 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd8519b68]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x55cfd8519f60]:   store i64 %4, i64* %9, align 8


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8532420]:   %20 = add i64 %19, -8


Removing: [0x55cfd85a7218]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd8519b68]:   %4 = load i64, i64* %RBP, align 8


Uprime : [0x55cfd8519f60]:   store i64 %4, i64* %9, align 8


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd85a5660]:   %24 = add i64 %23, -4
[0x55cfd85a6360]:   %63 = add i64 %23, -8


Removing: [0x55cfd85a8e98]:   %69 = load i64, i64* %6, align 8
From the pot matches of: [0x55cfd8519e08]:   %7 = load i64, i64* %6, align 8, !tbaa !1261


Uprime : [0x55cfd851a180]:   %11 = add i64 %7, -12


Uprime Matches: [0x55cfd85f6b50]:   %12 = add i64 %7, -12


Adj: [0x55cfd8536990]:   %70 = add i64 %69, 8
[0x55cfd853b3f0]:   %76 = add i64 %69, 16
[0x55cfd85aabc8]:   %71 = inttoptr i64 %69 to i64*


Removing: [0x55cfd85a0688]:   %16 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a048]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55cfd851a260]:   %13 = add i64 %10, 6


Uprime Matches: [0x55cfd8530bc0]:   %14 = add i64 %10, 6


Adj: [0x55cfd85a5220]:   %21 = add i64 %16, 10


Removing: [0x55cfd85a6b38]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a048]:   %10 = load i64, i64* %PC, align 8


Uprime : [0x55cfd851a260]:   %13 = add i64 %10, 6


Uprime Matches: [0x55cfd8530bc0]:   %14 = add i64 %10, 6


Adj: [0x55cfd8533cc0]:   %26 = add i64 %25, 3
[0x55cfd8535120]:   %64 = add i64 %25, 20
[0x55cfd8536410]:   %73 = add i64 %25, 22
[0x55cfd85383f0]:   %68 = add i64 %25, 21


Removing: [0x55cfd85a6b38]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a428]:   %15 = load i64, i64* %PC, align 8


Uprime : [0x55cfd8519480]:   %20 = add i64 %15, 10


Uprime Matches: [0x55cfd85a5220]:   %21 = add i64 %16, 10


Adj: [0x55cfd8533cc0]:   %26 = add i64 %25, 3
[0x55cfd8535120]:   %64 = add i64 %25, 20
[0x55cfd8536410]:   %73 = add i64 %25, 22
[0x55cfd85383f0]:   %68 = add i64 %25, 21


Removing: [0x55cfd85bac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a428]:   %15 = load i64, i64* %PC, align 8


Uprime : [0x55cfd8519480]:   %20 = add i64 %15, 10


Uprime Matches: [0x55cfd85a5220]:   %21 = add i64 %16, 10


Adj: [0x55cfd8530bc0]:   %14 = add i64 %10, 6


Removing: [0x55cfd8509258]:   %19 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8532420]:   %20 = add i64 %19, -8


Removing: [0x55cfd8532bd8]:   %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd85a4440]:   %33 = icmp ult i32 %30, %29
[0x55cfd85a5990]:   %30 = add i32 %29, %28
[0x55cfd85a5dd0]:   %43 = xor i32 %29, %28
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31


Removing: [0x55cfd8590768]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8527e50]:   %8 = add i64 %7, -8
[0x55cfd85f6b50]:   %12 = add i64 %7, -12


Removing: [0x55cfd85a0688]:   %16 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd85a5220]:   %21 = add i64 %16, 10


Removing: [0x55cfd85a6678]:   %28 = load i32, i32* %27, align 4
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8532d50]:   %32 = icmp ult i32 %30, %28
[0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a5990]:   %30 = add i32 %29, %28
[0x55cfd85a5dd0]:   %43 = xor i32 %29, %28


Removing: [0x55cfd85a6b38]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8533cc0]:   %26 = add i64 %25, 3
[0x55cfd8535120]:   %64 = add i64 %25, 20
[0x55cfd8536410]:   %73 = add i64 %25, 22
[0x55cfd85383f0]:   %68 = add i64 %25, 21


Removing: [0x55cfd85a7218]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd85a5660]:   %24 = add i64 %23, -4
[0x55cfd85a6360]:   %63 = add i64 %23, -8


Removing: [0x55cfd85a7cc8]:   %66 = load i32, i32* %65, align 4
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd85a7808]:   %67 = zext i32 %66 to i64


Removing: [0x55cfd85a8e98]:   %69 = load i64, i64* %6, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8536990]:   %70 = add i64 %69, 8
[0x55cfd853b3f0]:   %76 = add i64 %69, 16
[0x55cfd85aabc8]:   %71 = inttoptr i64 %69 to i64*


Removing: [0x55cfd85bac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8528250]:   store i64 %5, i64* %3, align 8
[0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd85322d0]:   store i64 %21, i64* %3, align 8
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8532ad0]:   store i64 %14, i64* %3, align 8
[0x55cfd8533b60]:   store i64 %26, i64* %3, align 8
[0x55cfd85344a0]:   store i8 %41, i8* %42, align 1
[0x55cfd8534a10]:   store i8 %53, i8* %54, align 1
[0x55cfd8534b60]:   store i8 %50, i8* %51, align 1
[0x55cfd8534e20]:   store i8 %47, i8* %48, align 1
[0x55cfd8535a80]:   store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8535bd0]:   store i8 %61, i8* %62, align 1
[0x55cfd8536210]:   store i64 %64, i64* %3, align 8
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd8536aa0]:   store i64 %68, i64* %3, align 8
[0x55cfd8536dd0]:   store i64 %67, i64* %RAX.i, align 8
[0x55cfd85372f0]:   store i64 %70, i64* %6, align 8
[0x55cfd8538640]:   store i64 %73, i64* %3, align 8
[0x55cfd8539940]:   store i64 %76, i64* %6, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd859fc10]:   store i64 %8, i64* %RBP.i, align 8
[0x55cfd85a2450]:   store i64 %8, i64* %6, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8
[0x55cfd85a4640]:   store i64 %31, i64* %RDI.i15, align 8
[0x55cfd85a5330]:   store i64 %18, i64* %RDI.i15, align 8
[0x55cfd85a5bb0]:   store i8 %35, i8* %36, align 1


Adj: [0x55cfd8530bc0]:   %14 = add i64 %10, 6


Removing: [0x55cfd8533a78]:   %75 = load i64, i64* %74, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851a528]:   %17 = zext i32 %16 to i64


Uprime Matches: [0x55cfd85274f8]:   %31 = zext i32 %30 to i64
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64
[0x55cfd85a3858]:   %35 = zext i1 %34 to i8
[0x55cfd85a7808]:   %67 = zext i32 %66 to i64
[0x55cfd85a7f28]:   %61 = zext i1 %60 to i8
[0x55cfd85a8c38]:   %50 = zext i1 %49 to i8


Adj: [0x55cfd853b550]:   store i64 %75, i64* %3, align 8


Removing: [0x55cfd85905d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851a528]:   %17 = zext i32 %16 to i64


Uprime Matches: [0x55cfd85274f8]:   %31 = zext i32 %30 to i64
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64
[0x55cfd85a3858]:   %35 = zext i1 %34 to i8
[0x55cfd85a7808]:   %67 = zext i32 %66 to i64
[0x55cfd85a7f28]:   %61 = zext i1 %60 to i8
[0x55cfd85a8c38]:   %50 = zext i1 %49 to i8


Adj: [0x55cfd85a4030]:   store i64 %4, i64* %9, align 8


Removing: [0x55cfd85a2088]:   %13 = load i32, i32* %EDI.i17, align 4
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851a528]:   %17 = zext i32 %16 to i64


Uprime Matches: [0x55cfd85274f8]:   %31 = zext i32 %30 to i64
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64
[0x55cfd85a3858]:   %35 = zext i1 %34 to i8
[0x55cfd85a7808]:   %67 = zext i32 %66 to i64
[0x55cfd85a7f28]:   %61 = zext i1 %60 to i8
[0x55cfd85a8c38]:   %50 = zext i1 %49 to i8


Adj: [0x55cfd8532970]:   store i32 %13, i32* %15, align 4


Removing: [0x55cfd85aa968]:   %72 = load i64, i64* %71, align 8
From the pot matches of: [0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851a528]:   %17 = zext i32 %16 to i64


Uprime Matches: [0x55cfd85274f8]:   %31 = zext i32 %30 to i64
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64
[0x55cfd85a3858]:   %35 = zext i1 %34 to i8
[0x55cfd85a7808]:   %67 = zext i32 %66 to i64
[0x55cfd85a7f28]:   %61 = zext i1 %60 to i8
[0x55cfd85a8c38]:   %50 = zext i1 %49 to i8


Adj: [0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8


Removing: [0x55cfd85905d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd8519388]:   %18 = load i64, i64* %RBP, align 8


Uprime : [0x55cfd8519400]:   %19 = add i64 %18, -8


Uprime Matches: [0x55cfd8527e50]:   %8 = add i64 %7, -8
[0x55cfd8532420]:   %20 = add i64 %19, -8
[0x55cfd85a6360]:   %63 = add i64 %23, -8


Adj: [0x55cfd85a4030]:   store i64 %4, i64* %9, align 8


Removing: [0x55cfd85a7df8]:   %65 = inttoptr i64 %63 to i32*
From the pot matches of: [0x55cfd8519568]:   %21 = inttoptr i64 %19 to i32*


Uprime : [0x55cfd85195e0]:   store i32 %16, i32* %21, align 4


Uprime Matches: [0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd8532970]:   store i32 %13, i32* %15, align 4
[0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8
[0x55cfd853b550]:   store i64 %75, i64* %3, align 8
[0x55cfd85a4030]:   store i64 %4, i64* %9, align 8


Adj: [0x55cfd85a7cc8]:   %66 = load i32, i32* %65, align 4


Removing: [0x55cfd85905d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd8519648]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55cfd851c770]:   %62 = add i64 %22, -8


Uprime Matches: [0x55cfd8527e50]:   %8 = add i64 %7, -8
[0x55cfd8532420]:   %20 = add i64 %19, -8
[0x55cfd85a6360]:   %63 = add i64 %23, -8


Adj: [0x55cfd85a4030]:   store i64 %4, i64* %9, align 8


Removing: [0x55cfd8509258]:   %19 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd8519648]:   %22 = load i64, i64* %RBP, align 8


Uprime : [0x55cfd8519700]:   %23 = add i64 %22, -4


Uprime Matches: [0x55cfd85a5660]:   %24 = add i64 %23, -4


Adj: [0x55cfd8532420]:   %20 = add i64 %19, -8


Removing: [0x55cfd85a0688]:   %16 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd8519768]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55cfd851d2c0]:   %72 = add i64 %24, 22


Uprime Matches: [0x55cfd8536410]:   %73 = add i64 %25, 22


Adj: [0x55cfd85a5220]:   %21 = add i64 %16, 10


Removing: [0x55cfd85bac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd8519768]:   %24 = load i64, i64* %PC, align 8


Uprime : [0x55cfd851d2c0]:   %72 = add i64 %24, 22


Uprime Matches: [0x55cfd8536410]:   %73 = add i64 %25, 22


Adj: [0x55cfd8530bc0]:   %14 = add i64 %10, 6


Removing: [0x55cfd8509258]:   %19 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8532420]:   %20 = add i64 %19, -8


Removing: [0x55cfd8533a78]:   %75 = load i64, i64* %74, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd853b550]:   store i64 %75, i64* %3, align 8


Removing: [0x55cfd85905d8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd85a4030]:   store i64 %4, i64* %9, align 8


Removing: [0x55cfd8590768]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8527e50]:   %8 = add i64 %7, -8
[0x55cfd85f6b50]:   %12 = add i64 %7, -12


Removing: [0x55cfd85a0288]:   %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8530e00]:   store i32 %17, i32* %22, align 4
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64


Removing: [0x55cfd85a0688]:   %16 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd85a5220]:   %21 = add i64 %16, 10


Removing: [0x55cfd85a2088]:   %13 = load i32, i32* %EDI.i17, align 4
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8532970]:   store i32 %13, i32* %15, align 4


Removing: [0x55cfd85a6b38]:   %25 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8533cc0]:   %26 = add i64 %25, 3
[0x55cfd8535120]:   %64 = add i64 %25, 20
[0x55cfd8536410]:   %73 = add i64 %25, 22
[0x55cfd85383f0]:   %68 = add i64 %25, 21


Removing: [0x55cfd85a7218]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd85a5660]:   %24 = add i64 %23, -4
[0x55cfd85a6360]:   %63 = add i64 %23, -8


Removing: [0x55cfd85a7cc8]:   %66 = load i32, i32* %65, align 4
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd85a7808]:   %67 = zext i32 %66 to i64


Removing: [0x55cfd85a8e98]:   %69 = load i64, i64* %6, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8536990]:   %70 = add i64 %69, 8
[0x55cfd853b3f0]:   %76 = add i64 %69, 16
[0x55cfd85aabc8]:   %71 = inttoptr i64 %69 to i64*


Removing: [0x55cfd85aa968]:   %72 = load i64, i64* %71, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8536880]:   store i64 %72, i64* %RBP.i, align 8


Removing: [0x55cfd85bac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8


Uprime : [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31


Uprime Matches: [0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
[0x55cfd85a6430]:   %52 = lshr i32 %30, 31


Adj: [0x55cfd8530bc0]:   %14 = add i64 %10, 6


Removing: [0x55cfd85a89d8]:   %53 = trunc i32 %52 to i8
From the pot matches of: [0x55cfd851b7b8]:   %38 = trunc i32 %37 to i8


Uprime : [0x55cfd851b830]:   %39 = and i8 %38, 1


Uprime Matches: [0x55cfd8534760]:   %47 = and i8 %46, 1
[0x55cfd85a5ff0]:   %40 = and i8 %39, 1


Adj: [0x55cfd8534a10]:   store i8 %53, i8* %54, align 1


Removing: [0x55cfd8534760]:   %47 = and i8 %46, 1
From the pot matches of: [0x55cfd851b830]:   %39 = and i8 %38, 1


Uprime : [0x55cfd851b8b0]:   %40 = xor i8 %39, 1


Uprime Matches: [0x55cfd8534600]:   %41 = xor i8 %40, 1


Adj: [0x55cfd8534e20]:   store i8 %47, i8* %48, align 1


Removing: [0x55cfd8532d50]:   %32 = icmp ult i32 %30, %28
From the pot matches of: [0x55cfd851be10]:   %48 = icmp eq i32 %29, 0


Uprime : [0x55cfd851be78]:   %49 = zext i1 %48 to i8


Uprime Matches: [0x55cfd85274f8]:   %31 = zext i32 %30 to i64
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64
[0x55cfd85a3858]:   %35 = zext i1 %34 to i8
[0x55cfd85a7808]:   %67 = zext i32 %66 to i64
[0x55cfd85a7f28]:   %61 = zext i1 %60 to i8
[0x55cfd85a8c38]:   %50 = zext i1 %49 to i8


Adj: [0x55cfd85a5770]:   %34 = or i1 %32, %33


Removing: [0x55cfd85a4440]:   %33 = icmp ult i32 %30, %29
From the pot matches of: [0x55cfd851be10]:   %48 = icmp eq i32 %29, 0


Uprime : [0x55cfd851be78]:   %49 = zext i1 %48 to i8


Uprime Matches: [0x55cfd85274f8]:   %31 = zext i32 %30 to i64
[0x55cfd857bf98]:   %18 = zext i32 %17 to i64
[0x55cfd85a3858]:   %35 = zext i1 %34 to i8
[0x55cfd85a7808]:   %67 = zext i32 %66 to i64
[0x55cfd85a7f28]:   %61 = zext i1 %60 to i8
[0x55cfd85a8c38]:   %50 = zext i1 %49 to i8


Adj: [0x55cfd85a5770]:   %34 = or i1 %32, %33


Removing: [0x55cfd85a1898]:   %22 = inttoptr i64 %20 to i32*
From the pot matches of: [0x55cfd851c918]:   %64 = inttoptr i64 %62 to i32*


Uprime : [0x55cfd851cd88]:   %65 = load i32, i32* %64, align 4


Uprime Matches: [0x55cfd8509258]:   %19 = load i64, i64* %RBP.i, align 8
[0x55cfd8532bd8]:   %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd8533a78]:   %75 = load i64, i64* %74, align 8
[0x55cfd85905d8]:   %4 = load i64, i64* %RBP.i, align 8
[0x55cfd8590768]:   %7 = load i64, i64* %6, align 8
[0x55cfd85a0288]:   %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd85a0688]:   %16 = load i64, i64* %3, align 8
[0x55cfd85a2088]:   %13 = load i32, i32* %EDI.i17, align 4
[0x55cfd85a6678]:   %28 = load i32, i32* %27, align 4
[0x55cfd85a6b38]:   %25 = load i64, i64* %3, align 8
[0x55cfd85a7218]:   %23 = load i64, i64* %RBP.i, align 8
[0x55cfd85a7cc8]:   %66 = load i32, i32* %65, align 4
[0x55cfd85a8e98]:   %69 = load i64, i64* %6, align 8
[0x55cfd85aa968]:   %72 = load i64, i64* %71, align 8
[0x55cfd85bac58]:   %10 = load i64, i64* %3, align 8


Adj: [0x55cfd8530e00]:   store i32 %17, i32* %22, align 4


Removing: [0x55cfd8590768]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x55cfd851d008]:   %68 = load i64, i64* %6, align 8, !tbaa !1261


Uprime : [0x55cfd851d500]:   %75 = add i64 %68, 16


Uprime Matches: [0x55cfd853b3f0]:   %76 = add i64 %69, 16


Adj: [0x55cfd8527e50]:   %8 = add i64 %7, -8
[0x55cfd85f6b50]:   %12 = add i64 %7, -12

Round: 1

Removing: [0x55cfd85a6360]:   %63 = add i64 %23, -8
From the pot matches of: [0x55cfd8519400]:   %19 = add i64 %18, -8


Uprime : [0x55cfd8519568]:   %21 = inttoptr i64 %19 to i32*


Uprime Matches: [0x55cfd85a1898]:   %22 = inttoptr i64 %20 to i32*


Adj: [0x55cfd85a7df8]:   %65 = inttoptr i64 %63 to i32*


Removing: [0x55cfd85a8d68]:   %46 = trunc i32 %45 to i8
From the pot matches of: [0x55cfd851b7b8]:   %38 = trunc i32 %37 to i8


Uprime : [0x55cfd851b830]:   %39 = and i8 %38, 1


Uprime Matches: [0x55cfd85a5ff0]:   %40 = and i8 %39, 1


Adj: [0x55cfd8534760]:   %47 = and i8 %46, 1

Round: 2

Removing: [0x55cfd85a7218]:   %23 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x55cfd8519388]:   %18 = load i64, i64* %RBP, align 8


Uprime : [0x55cfd8519400]:   %19 = add i64 %18, -8


Uprime Matches: [0x55cfd8532420]:   %20 = add i64 %19, -8


Adj: [0x55cfd85a5660]:   %24 = add i64 %23, -4
[0x55cfd85a6360]:   %63 = add i64 %23, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x55cfd8519388]:   %18 = load i64, i64* %RBP, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	}

[0x55cfd8519400]:   %19 = add i64 %18, -8 {
	[0x55cfd8532420]:  %20 = add i64 %19, -8
	}

[0x55cfd8519480]:   %20 = add i64 %15, 10 {
	[0x55cfd85a5220]:  %21 = add i64 %16, 10
	}

[0x55cfd8519500]:   store i64 %20, i64* %PC, align 8 {
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	}

[0x55cfd8519568]:   %21 = inttoptr i64 %19 to i32* {
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	}

[0x55cfd85195e0]:   store i32 %16, i32* %21, align 4 {
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	}

[0x55cfd8519648]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x55cfd8519700]:   %23 = add i64 %22, -4 {
	[0x55cfd85a5660]:  %24 = add i64 %23, -4
	}

[0x55cfd8519768]:   %24 = load i64, i64* %PC, align 8 {
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	}

[0x55cfd85197e0]:   %25 = add i64 %24, 3 {
	[0x55cfd8533cc0]:  %26 = add i64 %25, 3
	}

[0x55cfd8519860]:   store i64 %25, i64* %PC, align 8 {
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	}

[0x55cfd85198c8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x55cfd8519928]:   %27 = load i32, i32* %26, align 4 {
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	}

[0x55cfd85199c8]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55cfd85259c8]:  %RDI.i15 = getelementptr inbounds %union.anon.5, %union.anon.5* %11, i64 0, i32 0
	}

[0x55cfd8519ad0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55cfd8590d70]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55cfd8519b68]:   %4 = load i64, i64* %RBP, align 8 {
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55cfd8519c30]:   %5 = add i64 %1, 1 {
	[0x55cfd8530a70]:  %5 = add i64 %1, 1
	}

[0x55cfd8519cb0]:   store i64 %5, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	}

[0x55cfd8519d90]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55cfd858fbf0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55cfd8519e08]:   %7 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	}

[0x55cfd8519e80]:   %8 = add i64 %7, -8 {
	[0x55cfd8527e50]:  %8 = add i64 %7, -8
	}

[0x55cfd8519ee8]:   %9 = inttoptr i64 %8 to i64* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55cfd8519f60]:   store i64 %4, i64* %9, align 8 {
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	}

[0x55cfd8519fe0]:   store i64 %8, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	}

[0x55cfd851a048]:   %10 = load i64, i64* %PC, align 8 {
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851a0c0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55cfd851a180]:   %11 = add i64 %7, -12 {
	[0x55cfd85f6b50]:  %12 = add i64 %7, -12
	}

[0x55cfd851a1e8]:   %12 = load i32, i32* %EDI, align 4 {
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	}

[0x55cfd851a260]:   %13 = add i64 %10, 6 {
	[0x55cfd8530bc0]:  %14 = add i64 %10, 6
	}

[0x55cfd851a2e0]:   store i64 %13, i64* %PC, align 8 {
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	}

[0x55cfd851a348]:   %14 = inttoptr i64 %11 to i32* {
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55cfd851a3c0]:   store i32 %12, i32* %14, align 4 {
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	}

[0x55cfd851a428]:   %15 = load i64, i64* %PC, align 8 {
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	}

[0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	}

[0x55cfd851a528]:   %17 = zext i32 %16 to i64 {
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	}

[0x55cfd851a5a0]:   store i64 %17, i64* %RDI, align 8, !tbaa !1261 {
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	}

[0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	}

[0x55cfd851b290]:   %29 = add i32 %28, %27 {
	[0x55cfd85a5990]:  %30 = add i32 %29, %28
	}

[0x55cfd851b2f8]:   %30 = zext i32 %29 to i64 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	}

[0x55cfd851b370]:   store i64 %30, i64* %RDI, align 8, !tbaa !1261 {
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	}

[0x55cfd851b3f0]:   %31 = icmp ult i32 %29, %27 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	}

[0x55cfd851b470]:   %32 = icmp ult i32 %29, %28 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	[0x55cfd85a4440]:  %33 = icmp ult i32 %30, %29
	}

[0x55cfd851b4f0]:   %33 = or i1 %31, %32 {
	[0x55cfd85a5770]:  %34 = or i1 %32, %33
	}

[0x55cfd851b558]:   %34 = zext i1 %33 to i8 {
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	}

[0x55cfd851b600]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55cfd867a990]:  %36 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55cfd851b690]:   store i8 %34, i8* %35, align 1, !tbaa !1265 {
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851b710]:   %36 = and i32 %29, 255 {
	[0x55cfd85a6100]:  %37 = and i32 %30, 255
	}

[0x55cfd851b7b8]:   %38 = trunc i32 %37 to i8 {
	[0x55cfd85a7478]:  %39 = trunc i32 %38 to i8
	}

[0x55cfd851b830]:   %39 = and i8 %38, 1 {
	[0x55cfd85a5ff0]:  %40 = and i8 %39, 1
	}

[0x55cfd851b8b0]:   %40 = xor i8 %39, 1 {
	[0x55cfd8534600]:  %41 = xor i8 %40, 1
	}

[0x55cfd851b960]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55cfd85dab00]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55cfd851b9f0]:   store i8 %40, i8* %41, align 1, !tbaa !1279 {
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	}

[0x55cfd851ba70]:   %42 = xor i32 %28, %27 {
	[0x55cfd85a5dd0]:  %43 = xor i32 %29, %28
	}

[0x55cfd851baf0]:   %43 = xor i32 %42, %29 {
	[0x55cfd8533f70]:  %44 = xor i32 %43, %30
	}

[0x55cfd851bb70]:   %44 = lshr i32 %43, 4 {
	[0x55cfd8533e10]:  %45 = lshr i32 %44, 4
	}

[0x55cfd851bbd8]:   %45 = trunc i32 %44 to i8 {
	[0x55cfd85a8d68]:  %46 = trunc i32 %45 to i8
	}

[0x55cfd851bc50]:   %46 = and i8 %45, 1 {
	[0x55cfd8534760]:  %47 = and i8 %46, 1
	}

[0x55cfd851bd00]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55cfd853dd60]:  %48 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55cfd851bd90]:   store i8 %46, i8* %47, align 1, !tbaa !1280 {
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	}

[0x55cfd851be10]:   %48 = icmp eq i32 %29, 0 {
	[0x55cfd85a6540]:  %49 = icmp eq i32 %30, 0
	}

[0x55cfd851be78]:   %49 = zext i1 %48 to i8 {
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851bf20]:   %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55cfd8538e00]:  %51 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55cfd851bfb0]:   store i8 %49, i8* %50, align 1, !tbaa !1281 {
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	}

[0x55cfd851c030]:   %51 = lshr i32 %29, 31 {
	[0x55cfd85a6430]:  %52 = lshr i32 %30, 31
	}

[0x55cfd851c098]:   %52 = trunc i32 %51 to i8 {
	[0x55cfd85a89d8]:  %53 = trunc i32 %52 to i8
	}

[0x55cfd851c140]:   %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55cfd8535800]:  %54 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55cfd851c1d0]:   store i8 %52, i8* %53, align 1, !tbaa !1282 {
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	}

[0x55cfd851c250]:   %54 = lshr i32 %27, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	}

[0x55cfd851c2d0]:   %55 = lshr i32 %28, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	[0x55cfd85a6210]:  %56 = lshr i32 %29, 31
	}

[0x55cfd851c350]:   %56 = xor i32 %51, %54 {
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	}

[0x55cfd851c3d0]:   %57 = xor i32 %51, %55 {
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	[0x55cfd8535fe0]:  %58 = xor i32 %52, %56
	}

[0x55cfd851c450]:   %58 = add nuw nsw i32 %56, %57 {
	[0x55cfd8535e80]:  %59 = add nuw nsw i32 %57, %58
	}

[0x55cfd851c4d0]:   %59 = icmp eq i32 %58, 2 {
	[0x55cfd8535d30]:  %60 = icmp eq i32 %59, 2
	}

[0x55cfd851c538]:   %60 = zext i1 %59 to i8 {
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	}

[0x55cfd851c5e0]:   %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55cfd8535590]:  %62 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55cfd851c670]:   store i8 %60, i8* %61, align 1, !tbaa !1283 {
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	}

[0x55cfd851c6f0]:   store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	}

[0x55cfd851c770]:   %62 = add i64 %22, -8 {
	[0x55cfd85a6360]:  %63 = add i64 %23, -8
	}

[0x55cfd851c830]:   %63 = add i64 %24, 20 {
	[0x55cfd8535120]:  %64 = add i64 %25, 20
	}

[0x55cfd851c8b0]:   store i64 %63, i64* %PC, align 8 {
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	}

[0x55cfd851c918]:   %64 = inttoptr i64 %62 to i32* {
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	}

[0x55cfd851cd88]:   %65 = load i32, i32* %64, align 4 {
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	}

[0x55cfd851cde8]:   %66 = zext i32 %65 to i64 {
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	}

[0x55cfd851ce60]:   store i64 %66, i64* %RAX, align 8, !tbaa !1261 {
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	}

[0x55cfd851cf20]:   %67 = add i64 %24, 21 {
	[0x55cfd85383f0]:  %68 = add i64 %25, 21
	}

[0x55cfd851cfa0]:   store i64 %67, i64* %PC, align 8 {
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	}

[0x55cfd851d008]:   %68 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	}

[0x55cfd851d080]:   %69 = add i64 %68, 8 {
	[0x55cfd8536990]:  %70 = add i64 %69, 8
	}

[0x55cfd851d0e8]:   %70 = inttoptr i64 %68 to i64* {
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd851d148]:   %71 = load i64, i64* %70, align 8 {
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	}

[0x55cfd851d1c0]:   store i64 %71, i64* %RBP, align 8, !tbaa !1261 {
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	}

[0x55cfd851d240]:   store i64 %69, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	}

[0x55cfd851d2c0]:   %72 = add i64 %24, 22 {
	[0x55cfd8536410]:  %73 = add i64 %25, 22
	}

[0x55cfd851d340]:   store i64 %72, i64* %PC, align 8 {
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	}

[0x55cfd851d3a8]:   %73 = inttoptr i64 %69 to i64* {
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	}

[0x55cfd851d408]:   %74 = load i64, i64* %73, align 8 {
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	}

[0x55cfd851d480]:   store i64 %74, i64* %PC, align 8, !tbaa !1261 {
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	}

[0x55cfd851d500]:   %75 = add i64 %68, 16 {
	[0x55cfd853b3f0]:  %76 = add i64 %69, 16
	}

[0x55cfd851d580]:   store i64 %75, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	}

[0x55cfd85215f8]:   ret %struct.Memory* %2 {
	[0x55cfd85aa248]:  ret %struct.Memory.32* %2
	}

[0x55cfd85c5870]: %struct.State* %0 {
	[0x55cfd8527c30]:%struct.State.1* %0
	}

[0x55cfd85c58b0]: i64 %1 {
	[0x55cfd8534260]:i64 %1
	}

[0x55cfd85c58f0]: %struct.Memory* %2 {
	[0x55cfd8535030]:%struct.Memory.32* %2
	}

[0x55cfd85c5aa8]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x55cfd85a3448]:  %EDI.i17 = bitcast %union.anon.5* %11 to i32*
	}

[0x55cfd85c5b80]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55cfd8589510]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55cfd85c5c70]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55cfd858fa20]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55cfd85c5d20]:   %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #9 {
	[0x55cfd8692720]:  %38 = tail call i32 @llvm.ctpop.i32(i32 %37)
	}

[0x55cfd85e6578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55cfd85f4528]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0

BB match:%block_400570 --> %entry
Corresponding instructions:[0x55cfd8519b68]:   %4 = load i64, i64* %RBP, align 8
[0x55cfd85905d8]:   %4 = load i64, i64* %RBP.i, align 8
Retrieved BB Matches...
[0x55cfd85c5930]: block_400570 {
	[0x55cfd852f4b0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0


[Info] After Dual Simulation: Round: 1
[0x55cfd8519388]:   %18 = load i64, i64* %RBP, align 8 {
	[0x55cfd8509258]:  %19 = load i64, i64* %RBP.i, align 8
	}

[0x55cfd8519400]:   %19 = add i64 %18, -8 {
	[0x55cfd8532420]:  %20 = add i64 %19, -8
	}

[0x55cfd8519480]:   %20 = add i64 %15, 10 {
	[0x55cfd85a5220]:  %21 = add i64 %16, 10
	}

[0x55cfd8519500]:   store i64 %20, i64* %PC, align 8 {
	[0x55cfd85322d0]:  store i64 %21, i64* %3, align 8
	}

[0x55cfd8519568]:   %21 = inttoptr i64 %19 to i32* {
	[0x55cfd85a1898]:  %22 = inttoptr i64 %20 to i32*
	}

[0x55cfd85195e0]:   store i32 %16, i32* %21, align 4 {
	[0x55cfd8530e00]:  store i32 %17, i32* %22, align 4
	}

[0x55cfd8519648]:   %22 = load i64, i64* %RBP, align 8 {
	[0x55cfd85a7218]:  %23 = load i64, i64* %RBP.i, align 8
	}

[0x55cfd8519700]:   %23 = add i64 %22, -4 {
	[0x55cfd85a5660]:  %24 = add i64 %23, -4
	}

[0x55cfd8519768]:   %24 = load i64, i64* %PC, align 8 {
	[0x55cfd85a6b38]:  %25 = load i64, i64* %3, align 8
	}

[0x55cfd85197e0]:   %25 = add i64 %24, 3 {
	[0x55cfd8533cc0]:  %26 = add i64 %25, 3
	}

[0x55cfd8519860]:   store i64 %25, i64* %PC, align 8 {
	[0x55cfd8533b60]:  store i64 %26, i64* %3, align 8
	}

[0x55cfd85198c8]:   %26 = inttoptr i64 %23 to i32* {
	[0x55cfd85a67a8]:  %27 = inttoptr i64 %24 to i32*
	}

[0x55cfd8519928]:   %27 = load i32, i32* %26, align 4 {
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	}

[0x55cfd85199c8]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x55cfd85259c8]:  %RDI.i15 = getelementptr inbounds %union.anon.5, %union.anon.5* %11, i64 0, i32 0
	}

[0x55cfd8519ad0]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x55cfd8590d70]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x55cfd8519b68]:   %4 = load i64, i64* %RBP, align 8 {
	[0x55cfd85905d8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x55cfd8519c30]:   %5 = add i64 %1, 1 {
	[0x55cfd8530a70]:  %5 = add i64 %1, 1
	}

[0x55cfd8519cb0]:   store i64 %5, i64* %PC, align 8 {
	[0x55cfd8528250]:  store i64 %5, i64* %3, align 8
	}

[0x55cfd8519d90]:   %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x55cfd858fbf0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x55cfd8519e08]:   %7 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8590768]:  %7 = load i64, i64* %6, align 8
	}

[0x55cfd8519e80]:   %8 = add i64 %7, -8 {
	[0x55cfd8527e50]:  %8 = add i64 %7, -8
	}

[0x55cfd8519ee8]:   %9 = inttoptr i64 %8 to i64* {
	[0x55cfd8590958]:  %9 = inttoptr i64 %8 to i64*
	}

[0x55cfd8519f60]:   store i64 %4, i64* %9, align 8 {
	[0x55cfd85a4030]:  store i64 %4, i64* %9, align 8
	}

[0x55cfd8519fe0]:   store i64 %8, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd85a2450]:  store i64 %8, i64* %6, align 8
	}

[0x55cfd851a048]:   %10 = load i64, i64* %PC, align 8 {
	[0x55cfd85bac58]:  %10 = load i64, i64* %3, align 8
	}

[0x55cfd851a0c0]:   store i64 %8, i64* %RBP, align 8, !tbaa !1261 {
	[0x55cfd859fc10]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x55cfd851a180]:   %11 = add i64 %7, -12 {
	[0x55cfd85f6b50]:  %12 = add i64 %7, -12
	}

[0x55cfd851a1e8]:   %12 = load i32, i32* %EDI, align 4 {
	[0x55cfd85a2088]:  %13 = load i32, i32* %EDI.i17, align 4
	}

[0x55cfd851a260]:   %13 = add i64 %10, 6 {
	[0x55cfd8530bc0]:  %14 = add i64 %10, 6
	}

[0x55cfd851a2e0]:   store i64 %13, i64* %PC, align 8 {
	[0x55cfd8532ad0]:  store i64 %14, i64* %3, align 8
	}

[0x55cfd851a348]:   %14 = inttoptr i64 %11 to i32* {
	[0x55cfd85a2358]:  %15 = inttoptr i64 %12 to i32*
	}

[0x55cfd851a3c0]:   store i32 %12, i32* %14, align 4 {
	[0x55cfd8532970]:  store i32 %13, i32* %15, align 4
	}

[0x55cfd851a428]:   %15 = load i64, i64* %PC, align 8 {
	[0x55cfd85a0688]:  %16 = load i64, i64* %3, align 8
	}

[0x55cfd851a4c8]:   %16 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd85a0288]:  %17 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	}

[0x55cfd851a528]:   %17 = zext i32 %16 to i64 {
	[0x55cfd857bf98]:  %18 = zext i32 %17 to i64
	}

[0x55cfd851a5a0]:   store i64 %17, i64* %RDI, align 8, !tbaa !1261 {
	[0x55cfd85a5330]:  store i64 %18, i64* %RDI.i15, align 8
	}

[0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8532bd8]:  %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	[0x55cfd85a6678]:  %28 = load i32, i32* %27, align 4
	}

[0x55cfd851b290]:   %29 = add i32 %28, %27 {
	[0x55cfd85a5990]:  %30 = add i32 %29, %28
	}

[0x55cfd851b2f8]:   %30 = zext i32 %29 to i64 {
	[0x55cfd85274f8]:  %31 = zext i32 %30 to i64
	}

[0x55cfd851b370]:   store i64 %30, i64* %RDI, align 8, !tbaa !1261 {
	[0x55cfd85a4640]:  store i64 %31, i64* %RDI.i15, align 8
	}

[0x55cfd851b3f0]:   %31 = icmp ult i32 %29, %27 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	}

[0x55cfd851b470]:   %32 = icmp ult i32 %29, %28 {
	[0x55cfd8532d50]:  %32 = icmp ult i32 %30, %28
	[0x55cfd85a4440]:  %33 = icmp ult i32 %30, %29
	}

[0x55cfd851b4f0]:   %33 = or i1 %31, %32 {
	[0x55cfd85a5770]:  %34 = or i1 %32, %33
	}

[0x55cfd851b558]:   %34 = zext i1 %33 to i8 {
	[0x55cfd85a3858]:  %35 = zext i1 %34 to i8
	}

[0x55cfd851b600]:   %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x55cfd867a990]:  %36 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x55cfd851b690]:   store i8 %34, i8* %35, align 1, !tbaa !1265 {
	[0x55cfd85a5bb0]:  store i8 %35, i8* %36, align 1
	}

[0x55cfd851b710]:   %36 = and i32 %29, 255 {
	[0x55cfd85a6100]:  %37 = and i32 %30, 255
	}

[0x55cfd851b7b8]:   %38 = trunc i32 %37 to i8 {
	[0x55cfd85a7478]:  %39 = trunc i32 %38 to i8
	}

[0x55cfd851b830]:   %39 = and i8 %38, 1 {
	[0x55cfd85a5ff0]:  %40 = and i8 %39, 1
	}

[0x55cfd851b8b0]:   %40 = xor i8 %39, 1 {
	[0x55cfd8534600]:  %41 = xor i8 %40, 1
	}

[0x55cfd851b960]:   %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x55cfd85dab00]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x55cfd851b9f0]:   store i8 %40, i8* %41, align 1, !tbaa !1279 {
	[0x55cfd85344a0]:  store i8 %41, i8* %42, align 1
	}

[0x55cfd851ba70]:   %42 = xor i32 %28, %27 {
	[0x55cfd85a5dd0]:  %43 = xor i32 %29, %28
	}

[0x55cfd851baf0]:   %43 = xor i32 %42, %29 {
	[0x55cfd8533f70]:  %44 = xor i32 %43, %30
	}

[0x55cfd851bb70]:   %44 = lshr i32 %43, 4 {
	[0x55cfd8533e10]:  %45 = lshr i32 %44, 4
	}

[0x55cfd851bbd8]:   %45 = trunc i32 %44 to i8 {
	[0x55cfd85a8d68]:  %46 = trunc i32 %45 to i8
	}

[0x55cfd851bc50]:   %46 = and i8 %45, 1 {
	[0x55cfd8534760]:  %47 = and i8 %46, 1
	}

[0x55cfd851bd00]:   %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x55cfd853dd60]:  %48 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x55cfd851bd90]:   store i8 %46, i8* %47, align 1, !tbaa !1280 {
	[0x55cfd8534e20]:  store i8 %47, i8* %48, align 1
	}

[0x55cfd851be10]:   %48 = icmp eq i32 %29, 0 {
	[0x55cfd85a6540]:  %49 = icmp eq i32 %30, 0
	}

[0x55cfd851be78]:   %49 = zext i1 %48 to i8 {
	[0x55cfd85a8c38]:  %50 = zext i1 %49 to i8
	}

[0x55cfd851bf20]:   %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x55cfd8538e00]:  %51 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x55cfd851bfb0]:   store i8 %49, i8* %50, align 1, !tbaa !1281 {
	[0x55cfd8534b60]:  store i8 %50, i8* %51, align 1
	}

[0x55cfd851c030]:   %51 = lshr i32 %29, 31 {
	[0x55cfd85a6430]:  %52 = lshr i32 %30, 31
	}

[0x55cfd851c098]:   %52 = trunc i32 %51 to i8 {
	[0x55cfd85a89d8]:  %53 = trunc i32 %52 to i8
	}

[0x55cfd851c140]:   %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x55cfd8535800]:  %54 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x55cfd851c1d0]:   store i8 %52, i8* %53, align 1, !tbaa !1282 {
	[0x55cfd8534a10]:  store i8 %53, i8* %54, align 1
	}

[0x55cfd851c250]:   %54 = lshr i32 %27, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	}

[0x55cfd851c2d0]:   %55 = lshr i32 %28, 31 {
	[0x55cfd85348b0]:  %55 = lshr i32 %28, 31
	[0x55cfd85a6210]:  %56 = lshr i32 %29, 31
	}

[0x55cfd851c350]:   %56 = xor i32 %51, %54 {
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	}

[0x55cfd851c3d0]:   %57 = xor i32 %51, %55 {
	[0x55cfd8534f80]:  %57 = xor i32 %52, %55
	[0x55cfd8535fe0]:  %58 = xor i32 %52, %56
	}

[0x55cfd851c450]:   %58 = add nuw nsw i32 %56, %57 {
	[0x55cfd8535e80]:  %59 = add nuw nsw i32 %57, %58
	}

[0x55cfd851c4d0]:   %59 = icmp eq i32 %58, 2 {
	[0x55cfd8535d30]:  %60 = icmp eq i32 %59, 2
	}

[0x55cfd851c538]:   %60 = zext i1 %59 to i8 {
	[0x55cfd85a7f28]:  %61 = zext i1 %60 to i8
	}

[0x55cfd851c5e0]:   %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x55cfd8535590]:  %62 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x55cfd851c670]:   store i8 %60, i8* %61, align 1, !tbaa !1283 {
	[0x55cfd8535bd0]:  store i8 %61, i8* %62, align 1
	}

[0x55cfd851c6f0]:   store i32 %29, i32* bitcast (%g_j_type* @g_j to i32*), align 8 {
	[0x55cfd8535a80]:  store i32 %30, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
	}

[0x55cfd851c770]:   %62 = add i64 %22, -8 {
	[0x55cfd85a6360]:  %63 = add i64 %23, -8
	}

[0x55cfd851c830]:   %63 = add i64 %24, 20 {
	[0x55cfd8535120]:  %64 = add i64 %25, 20
	}

[0x55cfd851c8b0]:   store i64 %63, i64* %PC, align 8 {
	[0x55cfd8536210]:  store i64 %64, i64* %3, align 8
	}

[0x55cfd851c918]:   %64 = inttoptr i64 %62 to i32* {
	[0x55cfd85a7df8]:  %65 = inttoptr i64 %63 to i32*
	}

[0x55cfd851cd88]:   %65 = load i32, i32* %64, align 4 {
	[0x55cfd85a7cc8]:  %66 = load i32, i32* %65, align 4
	}

[0x55cfd851cde8]:   %66 = zext i32 %65 to i64 {
	[0x55cfd85a7808]:  %67 = zext i32 %66 to i64
	}

[0x55cfd851ce60]:   store i64 %66, i64* %RAX, align 8, !tbaa !1261 {
	[0x55cfd8536dd0]:  store i64 %67, i64* %RAX.i, align 8
	}

[0x55cfd851cf20]:   %67 = add i64 %24, 21 {
	[0x55cfd85383f0]:  %68 = add i64 %25, 21
	}

[0x55cfd851cfa0]:   store i64 %67, i64* %PC, align 8 {
	[0x55cfd8536aa0]:  store i64 %68, i64* %3, align 8
	}

[0x55cfd851d008]:   %68 = load i64, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd85a8e98]:  %69 = load i64, i64* %6, align 8
	}

[0x55cfd851d080]:   %69 = add i64 %68, 8 {
	[0x55cfd8536990]:  %70 = add i64 %69, 8
	}

[0x55cfd851d0e8]:   %70 = inttoptr i64 %68 to i64* {
	[0x55cfd85aabc8]:  %71 = inttoptr i64 %69 to i64*
	}

[0x55cfd851d148]:   %71 = load i64, i64* %70, align 8 {
	[0x55cfd85aa968]:  %72 = load i64, i64* %71, align 8
	}

[0x55cfd851d1c0]:   store i64 %71, i64* %RBP, align 8, !tbaa !1261 {
	[0x55cfd8536880]:  store i64 %72, i64* %RBP.i, align 8
	}

[0x55cfd851d240]:   store i64 %69, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd85372f0]:  store i64 %70, i64* %6, align 8
	}

[0x55cfd851d2c0]:   %72 = add i64 %24, 22 {
	[0x55cfd8536410]:  %73 = add i64 %25, 22
	}

[0x55cfd851d340]:   store i64 %72, i64* %PC, align 8 {
	[0x55cfd8538640]:  store i64 %73, i64* %3, align 8
	}

[0x55cfd851d3a8]:   %73 = inttoptr i64 %69 to i64* {
	[0x55cfd85aa838]:  %74 = inttoptr i64 %70 to i64*
	}

[0x55cfd851d408]:   %74 = load i64, i64* %73, align 8 {
	[0x55cfd8533a78]:  %75 = load i64, i64* %74, align 8
	}

[0x55cfd851d480]:   store i64 %74, i64* %PC, align 8, !tbaa !1261 {
	[0x55cfd853b550]:  store i64 %75, i64* %3, align 8
	}

[0x55cfd851d500]:   %75 = add i64 %68, 16 {
	[0x55cfd853b3f0]:  %76 = add i64 %69, 16
	}

[0x55cfd851d580]:   store i64 %75, i64* %6, align 8, !tbaa !1261 {
	[0x55cfd8539940]:  store i64 %76, i64* %6, align 8
	}

[0x55cfd85215f8]:   ret %struct.Memory* %2 {
	[0x55cfd85aa248]:  ret %struct.Memory.32* %2
	}

[0x55cfd85c5870]: %struct.State* %0 {
	[0x55cfd8527c30]:%struct.State.1* %0
	}

[0x55cfd85c58b0]: i64 %1 {
	[0x55cfd8534260]:i64 %1
	}

[0x55cfd85c58f0]: %struct.Memory* %2 {
	[0x55cfd8535030]:%struct.Memory.32* %2
	}

[0x55cfd85c5aa8]:   %EDI = bitcast %union.anon* %3 to i32* {
	[0x55cfd85a3448]:  %EDI.i17 = bitcast %union.anon.5* %11 to i32*
	}

[0x55cfd85c5b80]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x55cfd8589510]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x55cfd85c5c70]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x55cfd858fa20]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x55cfd85c5d20]:   %37 = tail call i32 @llvm.ctpop.i32(i32 %36) #9 {
	[0x55cfd8692720]:  %38 = tail call i32 @llvm.ctpop.i32(i32 %37)
	}

[0x55cfd85e6578]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x55cfd85f4528]:  %11 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x55cfd85c5930]: block_400570 {
	[0x55cfd852f4b0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Multiple matches exist for [0x55cfd851b218]:   %28 = load i32, i32* bitcast (%g_j_type* @g_j to i32*), align 8
[0x55cfd8532bd8]:   %29 = load i32, i32* bitcast (%G_0x601030_type* @G_0x601030 to i32*), align 8
[0x55cfd85a6678]:   %28 = load i32, i32* %27, align 4
Multiple matches exist for [0x55cfd851b470]:   %32 = icmp ult i32 %29, %28
[0x55cfd8532d50]:   %32 = icmp ult i32 %30, %28
[0x55cfd85a4440]:   %33 = icmp ult i32 %30, %29
Multiple matches exist for [0x55cfd851c2d0]:   %55 = lshr i32 %28, 31
[0x55cfd85348b0]:   %55 = lshr i32 %28, 31
[0x55cfd85a6210]:   %56 = lshr i32 %29, 31
Multiple matches exist for [0x55cfd851c3d0]:   %57 = xor i32 %51, %55
[0x55cfd8534f80]:   %57 = xor i32 %52, %55
[0x55cfd8535fe0]:   %58 = xor i32 %52, %56
Iso Match NOT Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [doOp] from mcsema/test.opt.ll
Extracting function [doOp] from mcsema/test.proposed.opt.ll
Matcher Done...
