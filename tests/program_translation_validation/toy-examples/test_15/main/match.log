Writing '/tmp/tmpihx4q36i.dot'...
Writing '/tmp/tmpihx4q36i.dot':Done

Reading LLVM: /tmp/tmpl3l7eaho-query.ll
Extracting function [main] from /tmp/tmpl3l7eaho-query.ll
Dot file generated!
Writing '/tmp/tmpdlu5x637.dot'...
Writing '/tmp/tmpdlu5x637.dot':Done

Reading LLVM: /tmp/tmpy5ozh15u-target.ll
Extracting function [main] from /tmp/tmpy5ozh15u-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 48 %RAX.i51 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
- 49 store i64 2, i64* %RAX.i51, align 8
- 50 %40 = add i64 %7, -12
- 51 %41 = add i64 %10, 19
- 52 store i64 %41, i64* %3, align 8
- 53 %42 = inttoptr i64 %40 to i32*
- 54 store i32 0, i32* %42, align 4
- 55 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 56 %EDI.i46 = bitcast %union.anon* %43 to i32*
- 57 %44 = load i64, i64* %RBP.i, align 8
- 58 %45 = add i64 %44, -8
- 59 %46 = load i32, i32* %EDI.i46, align 4
- 60 %47 = load i64, i64* %3, align 8
- 61 %48 = add i64 %47, 3
- 62 store i64 %48, i64* %3, align 8
- 63 %49 = inttoptr i64 %45 to i32*
- 64 store i32 %46, i32* %49, align 4
- 65 %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 66 %50 = load i64, i64* %RBP.i, align 8
- 67 %51 = add i64 %50, -16
- 68 %52 = load i64, i64* %RSI.i43, align 8
- 69 %53 = load i64, i64* %3, align 8
- 70 %54 = add i64 %53, 4
- 71 store i64 %54, i64* %3, align 8
- 72 %55 = inttoptr i64 %51 to i64*
- 73 store i64 %52, i64* %55, align 8
- 74 %EAX.i40 = bitcast %union.anon* %39 to i32*
- 75 %RDI.i41 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
- 76 %56 = load i32, i32* %EAX.i40, align 4
- 77 %57 = zext i32 %56 to i64
- 78 %58 = load i64, i64* %3, align 8
- 79 store i64 %57, i64* %RDI.i41, align 8
- 80 %59 = add i64 %58, 85
- 81 %60 = add i64 %58, 7
- 82 %61 = load i64, i64* %6, align 8
- 83 %62 = add i64 %61, -8
- 84 %63 = inttoptr i64 %62 to i64*
- 85 store i64 %60, i64* %63, align 8
- 86 store i64 %62, i64* %6, align 8
- 87 store i64 %59, i64* %3, align 8
- 88 %call2_40053d = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %59, %struct.Memory* %2)
- 89 %64 = load i64, i64* %3, align 8
- 90 store i64 4, i64* %RDI.i41, align 8
- 91 %65 = load i64, i64* %RBP.i, align 8
- 92 %66 = add i64 %65, -20
- 93 %67 = load i32, i32* %EAX.i40, align 4
- 94 %68 = add i64 %64, 8
- 95 store i64 %68, i64* %3, align 8
- 96 %69 = inttoptr i64 %66 to i32*
- 97 store i32 %67, i32* %69, align 4
- 98 %70 = load i64, i64* %3, align 8
- 99 %71 = add i64 %70, 70
- 100 %72 = add i64 %70, 5
- 101 %73 = load i64, i64* %6, align 8
- 102 %74 = add i64 %73, -8
- 103 %75 = inttoptr i64 %74 to i64*
- 104 store i64 %72, i64* %75, align 8
- 105 store i64 %74, i64* %6, align 8
- 106 store i64 %71, i64* %3, align 8
- 107 %call2_40054a = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %71, %struct.Memory* %call2_40053d)
- 108 %76 = load i64, i64* %3, align 8
- 109 store i64 0, i64* %RDI.i41, align 8
- 110 store i8 0, i8* %14, align 1
- 111 store i8 1, i8* %21, align 1
- 112 store i8 1, i8* %29, align 1
- 113 store i8 0, i8* %32, align 1
- 114 store i8 0, i8* %38, align 1
- 115 store i8 0, i8* %26, align 1
- 116 %77 = load i64, i64* %RBP.i, align 8
- 117 %78 = add i64 %77, -24
- 118 %79 = load i32, i32* %EAX.i40, align 4
- 119 %80 = add i64 %76, 5
- 120 store i64 %80, i64* %3, align 8
- 121 %81 = inttoptr i64 %78 to i32*
- 122 store i32 %79, i32* %81, align 4
- 123 %82 = load i64, i64* %3, align 8
- 124 %83 = add i64 %82, 60
- 125 %84 = add i64 %82, 5
- 126 %85 = load i64, i64* %6, align 8
- 127 %86 = add i64 %85, -8
- 128 %87 = inttoptr i64 %86 to i64*
- 129 store i64 %84, i64* %87, align 8
- 130 store i64 %86, i64* %6, align 8
- 131 store i64 %83, i64* %3, align 8
- 132 %call2_400554 = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %83, %struct.Memory* %call2_40054a)
- 133 %88 = load i64, i64* %3, align 8
- 134 store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i41, align 8
- 135 %89 = load i64, i64* %RBP.i, align 8
- 136 %90 = add i64 %89, -28
- 137 %91 = load i32, i32* %EAX.i40, align 4
- 138 %92 = add i64 %88, 13
- 139 store i64 %92, i64* %3, align 8
- 140 %93 = inttoptr i64 %90 to i32*
- 141 store i32 %91, i32* %93, align 4
- 142 %94 = load i64, i64* %RBP.i, align 8
- 143 %95 = add i64 %94, -20
- 144 %96 = load i64, i64* %3, align 8
- 145 %97 = add i64 %96, 3
- 146 store i64 %97, i64* %3, align 8
- 147 %98 = inttoptr i64 %95 to i32*
- 148 %99 = load i32, i32* %98, align 4
- 149 %100 = zext i32 %99 to i64
- 150 store i64 %100, i64* %RSI.i43, align 8
- 151 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 152 %101 = add i64 %94, -24
- 153 %102 = add i64 %96, 6
- 154 store i64 %102, i64* %3, align 8
- 155 %103 = inttoptr i64 %101 to i32*
- 156 %104 = load i32, i32* %103, align 4
- 157 %105 = zext i32 %104 to i64
- 158 store i64 %105, i64* %RDX.i, align 8
- 159 %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 160 %RCX.i16 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
- 161 %107 = add i64 %94, -28
- 162 %108 = add i64 %96, 9
- 163 store i64 %108, i64* %3, align 8
- 164 %109 = inttoptr i64 %107 to i32*
- 165 %110 = load i32, i32* %109, align 4
- 166 %111 = zext i32 %110 to i64
- 167 store i64 %111, i64* %RCX.i16, align 8
- 168 %AL.i = bitcast %union.anon* %39 to i8*
- 169 store i8 0, i8* %AL.i, align 1
- 170 %112 = add i64 %96, -326
- 171 %113 = add i64 %96, 16
- 172 %114 = load i64, i64* %6, align 8
- 173 %115 = add i64 %114, -8
- 174 %116 = inttoptr i64 %115 to i64*
- 175 store i64 %113, i64* %116, align 8
- 176 store i64 %115, i64* %6, align 8
- 177 store i64 %112, i64* %3, align 8
- 178 %117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400554)
- 179 %ECX.i9 = bitcast %union.anon* %106 to i32*
- 180 %118 = load i64, i64* %3, align 8
- 181 store i64 0, i64* %RCX.i16, align 8
- 182 %119 = load i64, i64* %RBP.i, align 8
- 183 %120 = add i64 %119, -32
- 184 %121 = load i32, i32* %EAX.i40, align 4
- 185 %122 = add i64 %118, 5
- 186 store i64 %122, i64* %3, align 8
- 187 %123 = inttoptr i64 %120 to i32*
- 188 store i32 %121, i32* %123, align 4
- 189 %124 = load i32, i32* %ECX.i9, align 4
- 190 %125 = zext i32 %124 to i64
- 191 %126 = load i64, i64* %3, align 8
- 192 store i64 %125, i64* %RAX.i51, align 8
- 193 %127 = load i64, i64* %6, align 8
- 194 %128 = add i64 %127, 32
- 195 store i64 %128, i64* %6, align 8
- 196 %129 = icmp ugt i64 %127, -33
- 197 %130 = zext i1 %129 to i8
- 198 store i8 %130, i8* %14, align 1
- 199 %131 = trunc i64 %128 to i32
- 200 %132 = and i32 %131, 255
- 201 %133 = tail call i32 @llvm.ctpop.i32(i32 %132)
- 202 %134 = trunc i32 %133 to i8
- 203 %135 = and i8 %134, 1
- 204 %136 = xor i8 %135, 1
- 205 store i8 %136, i8* %21, align 1
- 206 %137 = xor i64 %128, %127
- 207 %138 = lshr i64 %137, 4
- 208 %139 = trunc i64 %138 to i8
- 209 %140 = and i8 %139, 1
- 210 store i8 %140, i8* %26, align 1
- 211 %141 = icmp eq i64 %128, 0
- 212 %142 = zext i1 %141 to i8
- 213 store i8 %142, i8* %29, align 1
- 214 %143 = lshr i64 %128, 63
- 215 %144 = trunc i64 %143 to i8
- 216 store i8 %144, i8* %32, align 1
- 217 %145 = lshr i64 %127, 63
- 218 %146 = xor i64 %143, %145
- 219 %147 = add nuw nsw i64 %146, %143
- 220 %148 = icmp eq i64 %147, 2
- 221 %149 = zext i1 %148 to i8
- 222 store i8 %149, i8* %38, align 1
- 223 %150 = add i64 %126, 7
- 224 store i64 %150, i64* %3, align 8
- 225 %151 = add i64 %127, 40
- 226 %152 = inttoptr i64 %128 to i64*
- 227 %153 = load i64, i64* %152, align 8
- 228 store i64 %153, i64* %RBP.i, align 8
- 229 store i64 %151, i64* %6, align 8
- 230 %154 = add i64 %126, 8
- 231 store i64 %154, i64* %3, align 8
- 232 %155 = inttoptr i64 %151 to i64*
- 233 %156 = load i64, i64* %155, align 8
- 234 store i64 %156, i64* %3, align 8
- 235 %157 = add i64 %127, 48
- 236 store i64 %157, i64* %6, align 8
- 237 ret %struct.Memory* %117
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f5443725c80>, {0: {0}, 1: {14}, 2: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 3: {16}, 4: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 5: {13}, 6: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 7: {66, 132, 107, 174, 19, 88}, 8: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 9: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 10: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 11: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 12: {24}, 13: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 14: {26}, 15: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 16: {28}, 17: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 18: {33, 199, 40, 202, 208, 49, 215, 30}, 19: {200, 31}, 20: {32, 137, 201, 112, 179, 93}, 21: {33, 199, 40, 202, 208, 49, 215, 30}, 22: {41, 34, 203, 209}, 23: {35, 204}, 24: {36}, 25: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 26: {218, 206, 53, 38}, 27: {207, 39}, 28: {33, 199, 40, 202, 208, 49, 215, 30}, 29: {41, 34, 203, 209}, 30: {42}, 31: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 32: {211, 44}, 33: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 34: {46}, 35: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 36: {48, 217, 52, 214}, 37: {33, 199, 40, 202, 208, 49, 215, 30}, 38: {50}, 39: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 40: {48, 217, 52, 214}, 41: {218, 206, 53, 38}, 42: {219, 54}, 43: {220, 55}, 44: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 45: {57}, 46: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 47: {1}, 48: {8, 9, 12}, 49: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 50: {60}, 51: {61}, 52: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 53: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 54: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 55: {6}, 56: {2, 3, 5, 7}, 57: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 58: {66, 132, 107, 174, 19, 88}, 59: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 60: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 61: {69, 150}, 62: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 63: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 64: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 65: {11}, 66: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 67: {74}, 68: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 69: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 70: {77}, 71: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 72: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 73: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 74: {2, 3, 5, 7}, 75: {8, 9, 12}, 76: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 77: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 78: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 79: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 80: {85}, 81: {86, 223}, 82: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 83: {66, 132, 107, 174, 19, 88}, 84: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 85: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 86: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 87: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 88: {32, 137, 201, 112, 179, 93}, 89: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 90: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 91: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 92: {97, 148}, 93: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 94: {99, 230}, 95: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 96: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 97: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 98: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 99: {104}, 100: {105, 130, 185, 124}, 101: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 102: {66, 132, 107, 174, 19, 88}, 103: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 104: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 105: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 106: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 107: {32, 137, 201, 112, 179, 93}, 108: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 109: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 110: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 111: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 112: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 113: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 114: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 115: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 116: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 117: {122, 156}, 118: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 119: {105, 130, 185, 124}, 120: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 121: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 122: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 123: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 124: {129}, 125: {105, 130, 185, 124}, 126: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 127: {66, 132, 107, 174, 19, 88}, 128: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 129: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 130: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 131: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 132: {32, 137, 201, 112, 179, 93}, 133: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 134: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 135: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 136: {163, 141}, 137: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 138: {143}, 139: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 140: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 141: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 142: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 143: {97, 148}, 144: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 145: {69, 150}, 146: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 147: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 148: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 149: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 150: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 151: {10}, 152: {122, 156}, 153: {157}, 154: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 155: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 156: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 157: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 158: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 159: {4}, 160: {8, 9, 12}, 161: {163, 141}, 162: {164}, 163: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 164: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 165: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 166: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 167: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 168: {2, 3, 5, 7}, 169: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 170: {171}, 171: {172}, 172: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 173: {66, 132, 107, 174, 19, 88}, 174: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 175: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 176: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 177: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 178: {32, 137, 201, 112, 179, 93}, 179: {2, 3, 5, 7}, 180: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 181: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 182: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 183: {183}, 184: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 185: {105, 130, 185, 124}, 186: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 187: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 188: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 189: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 190: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 191: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 192: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 193: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 194: {194}, 195: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 196: {196}, 197: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 198: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 199: {33, 199, 40, 202, 208, 49, 215, 30}, 200: {200, 31}, 201: {32, 137, 201, 112, 179, 93}, 202: {33, 199, 40, 202, 208, 49, 215, 30}, 203: {41, 34, 203, 209}, 204: {35, 204}, 205: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 206: {218, 206, 53, 38}, 207: {207, 39}, 208: {33, 199, 40, 202, 208, 49, 215, 30}, 209: {41, 34, 203, 209}, 210: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 211: {211, 44}, 212: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 213: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 214: {48, 217, 52, 214}, 215: {33, 199, 40, 202, 208, 49, 215, 30}, 216: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 217: {48, 217, 52, 214}, 218: {218, 206, 53, 38}, 219: {219, 54}, 220: {220, 55}, 221: {161, 197, 168, 45, 82, 212, 56, 154, 27, 221, 190}, 222: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 223: {86, 223}, 224: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 225: {225}, 226: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 227: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 228: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 229: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 230: {99, 230}, 231: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 232: {159, 226, 101, 133, 71, 166, 232, 108, 79, 175, 145, 20, 152, 89, 187, 126, 63}, 233: {128, 131, 138, 140, 142, 15, 18, 147, 149, 22, 153, 160, 167, 173, 180, 182, 184, 189, 191, 65, 193, 67, 68, 73, 75, 76, 81, 83, 87, 94, 96, 98, 227, 103, 233, 106, 113, 121, 123}, 234: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 235: {235}, 236: {134, 135, 136, 139, 144, 17, 146, 21, 23, 151, 25, 155, 29, 158, 162, 37, 165, 169, 170, 43, 47, 176, 177, 178, 51, 181, 58, 59, 186, 188, 62, 64, 192, 195, 70, 198, 72, 205, 78, 80, 210, 84, 213, 216, 90, 91, 92, 222, 95, 224, 100, 228, 102, 229, 231, 234, 236, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 127}, 237: {237}})
Equivalent! frozenset({68, 149}) {144, 60}
Equivalent! frozenset({69, 150}) {145, 61}
Equivalent! frozenset({70, 151}) {146, 62}
Equivalent! frozenset({106, 131, 173, 87}) {82, 172, 101, 126}
CONFLICT {frozenset({177, 91, 110, 135}), frozenset({108, 133})} {frozenset({177, 91, 110, 135})}
NOT Equivalent! frozenset({88, 107, 132, 174}) {83, 173, 102, 127}
Equivalent! frozenset({177, 91, 110, 135}) {176, 105, 130, 86}
Equivalent! frozenset({94, 191}) {89, 191}
Equivalent! frozenset({99, 230}) {94, 230}
Equivalent! frozenset({100, 231}) {231, 95}
Equivalent! frozenset({128, 103}) {98, 123}
Equivalent! frozenset({105, 130}) {100, 125}
Equivalent! frozenset({108, 133}) {128, 103}
Equivalent! frozenset({109, 134}) {104, 129}
Equivalent! frozenset({113, 180}) {180, 108}
Equivalent! frozenset({185, 124}) {185, 119}
Equivalent! frozenset({186, 125}) {120, 186}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f5443725c80>, {0: {0}, 1: {14}, 2: {15}, 3: {16}, 4: {17}, 5: {13}, 6: {18}, 7: {19}, 8: {20}, 9: {21}, 10: {22}, 11: {23}, 12: {24}, 13: {25}, 14: {26}, 15: {27}, 16: {28}, 17: {29}, 18: {30}, 19: {31}, 20: {32}, 21: {33}, 22: {34}, 23: {35}, 24: {36}, 25: {37}, 26: {38}, 27: {39}, 28: {40}, 29: {41}, 30: {42}, 31: {43}, 32: {44}, 33: {45}, 34: {46}, 35: {47}, 36: {48}, 37: {49}, 38: {50}, 39: {51}, 40: {52}, 41: {53}, 42: {54}, 43: {55}, 44: {56}, 45: {57}, 46: {58}, 47: {1}, 48: {8}, 49: {192, 59}, 50: {60}, 51: {61}, 52: {62}, 53: {63}, 54: {64}, 55: {6}, 56: {7}, 57: {65}, 58: {66}, 59: {67}, 60: {149}, 61: {150}, 62: {151}, 63: {71}, 64: {72}, 65: {11}, 66: {73}, 67: {74}, 68: {75}, 69: {76}, 70: {77}, 71: {78}, 72: {79}, 73: {80}, 74: {3}, 75: {12}, 76: {81}, 77: {82}, 78: {83}, 79: {84}, 80: {85}, 81: {86}, 82: {106}, 83: {88, 107, 132, 174}, 84: {89}, 85: {90}, 86: {135}, 87: {92}, 88: {93}, 89: {94}, 90: {114, 139, 84, 95}, 91: {96}, 92: {97}, 93: {98}, 94: {99}, 95: {231}, 96: {101}, 97: {102}, 98: {128}, 99: {104}, 100: {105}, 101: {173}, 102: {88, 107, 132, 174}, 103: {133}, 104: {109}, 105: {91}, 106: {111}, 107: {112}, 108: {180}, 109: {114, 139, 84, 95}, 110: {115, 29, 198}, 111: {37, 116, 205}, 112: {117, 213, 47}, 113: {216, 51, 118}, 114: {58, 222, 119}, 115: {120, 210, 43}, 116: {121}, 117: {122}, 118: {123}, 119: {124}, 120: {186}, 121: {126}, 122: {127}, 123: {103}, 124: {129}, 125: {130}, 126: {87}, 127: {88, 107, 132, 174}, 128: {108}, 129: {134}, 130: {110}, 131: {136}, 132: {137}, 133: {138}, 134: {114, 139, 84, 95}, 135: {140}, 136: {141}, 137: {142}, 138: {143}, 139: {144}, 140: {145}, 141: {146}, 142: {147}, 143: {148}, 144: {68}, 145: {69}, 146: {70}, 147: {152}, 148: {153}, 149: {154}, 150: {155}, 151: {10}, 152: {156}, 153: {157}, 154: {158}, 155: {159}, 156: {160}, 157: {161}, 158: {162}, 159: {4}, 160: {9}, 161: {163}, 162: {164}, 163: {165}, 164: {166}, 165: {167}, 166: {168}, 167: {169}, 168: {2}, 169: {170}, 170: {171}, 171: {172}, 172: {131}, 173: {88, 107, 132, 174}, 174: {175}, 175: {176}, 176: {177}, 177: {178}, 178: {179}, 179: {5}, 180: {113}, 181: {169, 181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {125}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}, 215: {215}, 216: {216}, 217: {217}, 218: {218}, 219: {219}, 220: {220}, 221: {221}, 222: {222}, 223: {223}, 224: {224}, 225: {225}, 226: {226}, 227: {227}, 228: {228}, 229: {229}, 230: {230}, 231: {100}, 232: {232}, 233: {233}, 234: {234}, 235: {235}, 236: {236}, 237: {237}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 getelementptr getelementptr
MORE 49 POT: 2
EXACT 50 add add
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 bitcast bitcast
EXACT 57 load load
EXACT 58 add add
EXACT 59 load load
EXACT 60 load load
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 getelementptr getelementptr
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 store store
EXACT 74 bitcast bitcast
EXACT 75 getelementptr getelementptr
EXACT 76 load load
EXACT 77 zext zext
EXACT 78 load load
EXACT 79 store store
EXACT 80 add add
EXACT 81 add add
EXACT 82 load load
MORE 83 POT: 4
EXACT 84 inttoptr inttoptr
EXACT 85 store store
EXACT 86 store store
EXACT 87 store store
EXACT 88 tail tail
EXACT 89 load load
MORE 90 POT: 4
EXACT 91 load load
EXACT 92 add add
EXACT 93 load load
EXACT 94 add add
EXACT 95 store store
EXACT 96 inttoptr inttoptr
EXACT 97 store store
EXACT 98 load load
EXACT 99 add add
EXACT 100 add add
EXACT 101 load load
MORE 102 POT: 4
EXACT 103 inttoptr inttoptr
EXACT 104 store store
EXACT 105 store store
EXACT 106 store store
EXACT 107 tail tail
EXACT 108 load load
MORE 109 POT: 4
MORE 110 POT: 3
MORE 111 POT: 3
MORE 112 POT: 3
MORE 113 POT: 3
MORE 114 POT: 3
MORE 115 POT: 3
EXACT 116 load load
EXACT 117 add add
EXACT 118 load load
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 store store
EXACT 123 load load
EXACT 124 add add
EXACT 125 add add
EXACT 126 load load
MORE 127 POT: 4
EXACT 128 inttoptr inttoptr
EXACT 129 store store
EXACT 130 store store
EXACT 131 store store
EXACT 132 tail tail
EXACT 133 load load
MORE 134 POT: 4
EXACT 135 load load
EXACT 136 add add
EXACT 137 load load
EXACT 138 add add
EXACT 139 store store
EXACT 140 inttoptr inttoptr
EXACT 141 store store
EXACT 142 load load
EXACT 143 add add
EXACT 144 load load
EXACT 145 add add
EXACT 146 store store
EXACT 147 inttoptr inttoptr
EXACT 148 load load
EXACT 149 zext zext
EXACT 150 store store
EXACT 151 getelementptr getelementptr
EXACT 152 add add
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 load load
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 getelementptr getelementptr
EXACT 160 getelementptr getelementptr
EXACT 161 add add
EXACT 162 add add
EXACT 163 store store
EXACT 164 inttoptr inttoptr
EXACT 165 load load
EXACT 166 zext zext
EXACT 167 store store
EXACT 168 bitcast bitcast
EXACT 169 store store
EXACT 170 add add
EXACT 171 add add
EXACT 172 load load
MORE 173 POT: 4
EXACT 174 inttoptr inttoptr
EXACT 175 store store
EXACT 176 store store
EXACT 177 store store
EXACT 178 tail tail
EXACT 179 bitcast bitcast
EXACT 180 load load
MORE 181 POT: 2
EXACT 182 load load
EXACT 183 add add
EXACT 184 load load
EXACT 185 add add
EXACT 186 store store
EXACT 187 inttoptr inttoptr
EXACT 188 store store
EXACT 189 load load
EXACT 190 zext zext
EXACT 191 load load
EXACT 192 store store
EXACT 193 load load
EXACT 194 add add
EXACT 195 store store
EXACT 196 icmp icmp
EXACT 197 zext zext
EXACT 198 store store
EXACT 199 trunc trunc
EXACT 200 and and
EXACT 201 tail tail
EXACT 202 trunc trunc
EXACT 203 and and
EXACT 204 xor xor
EXACT 205 store store
EXACT 206 xor xor
EXACT 207 lshr lshr
EXACT 208 trunc trunc
EXACT 209 and and
EXACT 210 store store
EXACT 211 icmp icmp
EXACT 212 zext zext
EXACT 213 store store
EXACT 214 lshr lshr
EXACT 215 trunc trunc
EXACT 216 store store
EXACT 217 lshr lshr
EXACT 218 xor xor
EXACT 219 add add
EXACT 220 icmp icmp
EXACT 221 zext zext
EXACT 222 store store
EXACT 223 add add
EXACT 224 store store
EXACT 225 add add
EXACT 226 inttoptr inttoptr
EXACT 227 load load
EXACT 228 store store
EXACT 229 store store
EXACT 230 add add
EXACT 231 store store
EXACT 232 inttoptr inttoptr
EXACT 233 load load
EXACT 234 store store
EXACT 235 add add
EXACT 236 store store
EXACT 237 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 7 %EDI = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 11 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 12 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 13 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 14 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 15 %6 = load i64, i64* %RBP, align 8
- 16 %7 = add i64 %1, 1
- 17 store i64 %7, i64* %PC, align 8
- 18 %8 = load i64, i64* %RSP, align 8
- 19 %9 = add i64 %8, -8
- 20 %10 = inttoptr i64 %9 to i64*
- 21 store i64 %6, i64* %10, align 8
- 22 %11 = load i64, i64* %PC, align 8
- 23 store i64 %9, i64* %RBP, align 8
- 24 %12 = add i64 %8, -40
- 25 store i64 %12, i64* %RSP, align 8
- 26 %13 = icmp ult i64 %9, 32
- 27 %14 = zext i1 %13 to i8
- 28 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 29 store i8 %14, i8* %15, align 1
- 30 %16 = trunc i64 %12 to i32
- 31 %17 = and i32 %16, 255
- 32 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 33 %19 = trunc i32 %18 to i8
- 34 %20 = and i8 %19, 1
- 35 %21 = xor i8 %20, 1
- 36 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 37 store i8 %21, i8* %22, align 1
- 38 %23 = xor i64 %9, %12
- 39 %24 = lshr i64 %23, 4
- 40 %25 = trunc i64 %24 to i8
- 41 %26 = and i8 %25, 1
- 42 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 43 store i8 %26, i8* %27, align 1
- 44 %28 = icmp eq i64 %12, 0
- 45 %29 = zext i1 %28 to i8
- 46 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 47 store i8 %29, i8* %30, align 1
- 48 %31 = lshr i64 %12, 63
- 49 %32 = trunc i64 %31 to i8
- 50 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 51 store i8 %32, i8* %33, align 1
- 52 %34 = lshr i64 %9, 63
- 53 %35 = xor i64 %31, %34
- 54 %36 = add nuw nsw i64 %35, %34
- 55 %37 = icmp eq i64 %36, 2
- 56 %38 = zext i1 %37 to i8
- 57 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 58 store i8 %38, i8* %39, align 1
- 59 store i64 2, i64* %RAX, align 8
- 60 %40 = add i64 %8, -12
- 61 %41 = add i64 %11, 19
- 62 store i64 %41, i64* %PC, align 8
- 63 %42 = inttoptr i64 %40 to i32*
- 64 store i32 0, i32* %42, align 4
- 65 %43 = load i64, i64* %RBP, align 8
- 66 %44 = add i64 %43, -8
- 67 %45 = load i32, i32* %EDI, align 4
- 68 %46 = load i64, i64* %PC, align 8
- 69 %47 = add i64 %46, 3
- 70 store i64 %47, i64* %PC, align 8
- 71 %48 = inttoptr i64 %44 to i32*
- 72 store i32 %45, i32* %48, align 4
- 73 %49 = load i64, i64* %RBP, align 8
- 74 %50 = add i64 %49, -16
- 75 %51 = load i64, i64* %RSI, align 8
- 76 %52 = load i64, i64* %PC, align 8
- 77 %53 = add i64 %52, 4
- 78 store i64 %53, i64* %PC, align 8
- 79 %54 = inttoptr i64 %50 to i64*
- 80 store i64 %51, i64* %54, align 8
- 81 %55 = load i32, i32* %EAX, align 4
- 82 %56 = zext i32 %55 to i64
- 83 %57 = load i64, i64* %PC, align 8
- 84 store i64 %56, i64* %RDI, align 8
- 85 %58 = add i64 %57, 85
- 86 %59 = add i64 %57, 7
- 87 %60 = load i64, i64* %RSP, align 8
- 88 %61 = add i64 %60, -8
- 89 %62 = inttoptr i64 %61 to i64*
- 90 store i64 %59, i64* %62, align 8
- 91 store i64 %61, i64* %RSP, align 8
- 92 store i64 %58, i64* %PC, align 8
- 93 %63 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
- 94 %64 = load i64, i64* %PC, align 8
- 95 store i64 4, i64* %RDI, align 8
- 96 %65 = load i64, i64* %RBP, align 8
- 97 %66 = add i64 %65, -20
- 98 %67 = load i32, i32* %EAX, align 4
- 99 %68 = add i64 %64, 8
- 100 store i64 %68, i64* %PC, align 8
- 101 %69 = inttoptr i64 %66 to i32*
- 102 store i32 %67, i32* %69, align 4
- 103 %70 = load i64, i64* %PC, align 8
- 104 %71 = add i64 %70, 70
- 105 %72 = add i64 %70, 5
- 106 %73 = load i64, i64* %RSP, align 8
- 107 %74 = add i64 %73, -8
- 108 %75 = inttoptr i64 %74 to i64*
- 109 store i64 %72, i64* %75, align 8
- 110 store i64 %74, i64* %RSP, align 8
- 111 store i64 %71, i64* %PC, align 8
- 112 %76 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %63)
- 113 %77 = load i64, i64* %PC, align 8
- 114 store i64 0, i64* %RDI, align 8
- 115 store i8 0, i8* %15, align 1
- 116 store i8 1, i8* %22, align 1
- 117 store i8 1, i8* %30, align 1
- 118 store i8 0, i8* %33, align 1
- 119 store i8 0, i8* %39, align 1
- 120 store i8 0, i8* %27, align 1
- 121 %78 = load i64, i64* %RBP, align 8
- 122 %79 = add i64 %78, -24
- 123 %80 = load i32, i32* %EAX, align 4
- 124 %81 = add i64 %77, 5
- 125 store i64 %81, i64* %PC, align 8
- 126 %82 = inttoptr i64 %79 to i32*
- 127 store i32 %80, i32* %82, align 4
- 128 %83 = load i64, i64* %PC, align 8
- 129 %84 = add i64 %83, 60
- 130 %85 = add i64 %83, 5
- 131 %86 = load i64, i64* %RSP, align 8
- 132 %87 = add i64 %86, -8
- 133 %88 = inttoptr i64 %87 to i64*
- 134 store i64 %85, i64* %88, align 8
- 135 store i64 %87, i64* %RSP, align 8
- 136 store i64 %84, i64* %PC, align 8
- 137 %89 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %84, %struct.Memory* %76)
- 138 %90 = load i64, i64* %PC, align 8
- 139 store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
- 140 %91 = load i64, i64* %RBP, align 8
- 141 %92 = add i64 %91, -28
- 142 %93 = load i32, i32* %EAX, align 4
- 143 %94 = add i64 %90, 13
- 144 store i64 %94, i64* %PC, align 8
- 145 %95 = inttoptr i64 %92 to i32*
- 146 store i32 %93, i32* %95, align 4
- 147 %96 = load i64, i64* %RBP, align 8
- 148 %97 = add i64 %96, -20
- 149 %98 = load i64, i64* %PC, align 8
- 150 %99 = add i64 %98, 3
- 151 store i64 %99, i64* %PC, align 8
- 152 %100 = inttoptr i64 %97 to i32*
- 153 %101 = load i32, i32* %100, align 4
- 154 %102 = zext i32 %101 to i64
- 155 store i64 %102, i64* %RSI, align 8
- 156 %103 = add i64 %96, -24
- 157 %104 = add i64 %98, 6
- 158 store i64 %104, i64* %PC, align 8
- 159 %105 = inttoptr i64 %103 to i32*
- 160 %106 = load i32, i32* %105, align 4
- 161 %107 = zext i32 %106 to i64
- 162 store i64 %107, i64* %RDX, align 8
- 163 %108 = add i64 %96, -28
- 164 %109 = add i64 %98, 9
- 165 store i64 %109, i64* %PC, align 8
- 166 %110 = inttoptr i64 %108 to i32*
- 167 %111 = load i32, i32* %110, align 4
- 168 %112 = zext i32 %111 to i64
- 169 store i64 %112, i64* %RCX, align 8
- 170 store i8 0, i8* %AL, align 1
- 171 %113 = add i64 %98, -326
- 172 %114 = add i64 %98, 16
- 173 %115 = load i64, i64* %RSP, align 8
- 174 %116 = add i64 %115, -8
- 175 %117 = inttoptr i64 %116 to i64*
- 176 store i64 %114, i64* %117, align 8
- 177 store i64 %116, i64* %RSP, align 8
- 178 store i64 %113, i64* %PC, align 8
- 179 %118 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %89)
- 180 %119 = load i64, i64* %PC, align 8
- 181 store i64 0, i64* %RCX, align 8
- 182 %120 = load i64, i64* %RBP, align 8
- 183 %121 = add i64 %120, -32
- 184 %122 = load i32, i32* %EAX, align 4
- 185 %123 = add i64 %119, 5
- 186 store i64 %123, i64* %PC, align 8
- 187 %124 = inttoptr i64 %121 to i32*
- 188 store i32 %122, i32* %124, align 4
- 189 %125 = load i32, i32* %ECX, align 4
- 190 %126 = zext i32 %125 to i64
- 191 %127 = load i64, i64* %PC, align 8
- 192 store i64 %126, i64* %RAX, align 8
- 193 %128 = load i64, i64* %RSP, align 8
- 194 %129 = add i64 %128, 32
- 195 store i64 %129, i64* %RSP, align 8
- 196 %130 = icmp ugt i64 %128, -33
- 197 %131 = zext i1 %130 to i8
- 198 store i8 %131, i8* %15, align 1
- 199 %132 = trunc i64 %129 to i32
- 200 %133 = and i32 %132, 255
- 201 %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12
- 202 %135 = trunc i32 %134 to i8
- 203 %136 = and i8 %135, 1
- 204 %137 = xor i8 %136, 1
- 205 store i8 %137, i8* %22, align 1
- 206 %138 = xor i64 %129, %128
- 207 %139 = lshr i64 %138, 4
- 208 %140 = trunc i64 %139 to i8
- 209 %141 = and i8 %140, 1
- 210 store i8 %141, i8* %27, align 1
- 211 %142 = icmp eq i64 %129, 0
- 212 %143 = zext i1 %142 to i8
- 213 store i8 %143, i8* %30, align 1
- 214 %144 = lshr i64 %129, 63
- 215 %145 = trunc i64 %144 to i8
- 216 store i8 %145, i8* %33, align 1
- 217 %146 = lshr i64 %128, 63
- 218 %147 = xor i64 %144, %146
- 219 %148 = add nuw nsw i64 %147, %144
- 220 %149 = icmp eq i64 %148, 2
- 221 %150 = zext i1 %149 to i8
- 222 store i8 %150, i8* %39, align 1
- 223 %151 = add i64 %127, 7
- 224 store i64 %151, i64* %PC, align 8
- 225 %152 = add i64 %128, 40
- 226 %153 = inttoptr i64 %129 to i64*
- 227 %154 = load i64, i64* %153, align 8
- 228 store i64 %154, i64* %RBP, align 8
- 229 store i64 %152, i64* %RSP, align 8
- 230 %155 = add i64 %127, 8
- 231 store i64 %155, i64* %PC, align 8
- 232 %156 = inttoptr i64 %152 to i64*
- 233 %157 = load i64, i64* %156, align 8
- 234 store i64 %157, i64* %PC, align 8
- 235 %158 = add i64 %128, 48
- 236 store i64 %158, i64* %RSP, align 8
- 237 ret %struct.Memory* %118
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f5443725e18>, {0: {0}, 1: {47}, 2: {56, 74, 179, 168}, 3: {56, 74, 179, 168}, 4: {159}, 5: {56, 74, 179, 168}, 6: {55}, 7: {56, 74, 179, 168}, 8: {48, 75, 160}, 9: {48, 75, 160}, 10: {151}, 11: {65}, 12: {48, 75, 160}, 13: {5}, 14: {1}, 15: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 16: {3}, 17: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 18: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 19: {102, 7, 173, 83, 58, 127}, 20: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 21: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 22: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 23: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 24: {12}, 25: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 26: {14}, 27: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 28: {16}, 29: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 30: {37, 199, 202, 208, 18, 21, 215, 28}, 31: {200, 19}, 32: {132, 201, 107, 178, 20, 88}, 33: {37, 199, 202, 208, 18, 21, 215, 28}, 34: {209, 203, 29, 22}, 35: {204, 23}, 36: {24}, 37: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 38: {41, 26, 206, 218}, 39: {27, 207}, 40: {37, 199, 202, 208, 18, 21, 215, 28}, 41: {209, 203, 29, 22}, 42: {30}, 43: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 44: {32, 211}, 45: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 46: {34}, 47: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 48: {40, 217, 36, 214}, 49: {37, 199, 202, 208, 18, 21, 215, 28}, 50: {38}, 51: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 52: {40, 217, 36, 214}, 53: {41, 26, 206, 218}, 54: {42, 219}, 55: {43, 220}, 56: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 57: {45}, 58: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 59: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 60: {50}, 61: {51}, 62: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 63: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 64: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 65: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 66: {102, 7, 173, 83, 58, 127}, 67: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 68: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 69: {145, 61}, 70: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 71: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 72: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 73: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 74: {67}, 75: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 76: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 77: {70}, 78: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 79: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 80: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 81: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 82: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 83: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 84: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 85: {80}, 86: {81, 223}, 87: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 88: {102, 7, 173, 83, 58, 127}, 89: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 90: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 91: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 92: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 93: {132, 201, 107, 178, 20, 88}, 94: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 95: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 96: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 97: {92, 143}, 98: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 99: {94, 230}, 100: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 101: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 102: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 103: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 104: {99}, 105: {185, 100, 125, 119}, 106: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 107: {102, 7, 173, 83, 58, 127}, 108: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 109: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 110: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 111: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 112: {132, 201, 107, 178, 20, 88}, 113: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 114: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 115: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 116: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 117: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 118: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 119: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 120: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 121: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 122: {152, 117}, 123: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 124: {185, 100, 125, 119}, 125: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 126: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 127: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 128: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 129: {124}, 130: {185, 100, 125, 119}, 131: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 132: {102, 7, 173, 83, 58, 127}, 133: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 134: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 135: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 136: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 137: {132, 201, 107, 178, 20, 88}, 138: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 139: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 140: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 141: {136, 161}, 142: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 143: {138}, 144: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 145: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 146: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 147: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 148: {92, 143}, 149: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 150: {145, 61}, 151: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 152: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 153: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 154: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 155: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 156: {152, 117}, 157: {153}, 158: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 159: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 160: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 161: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 162: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 163: {136, 161}, 164: {162}, 165: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 166: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 167: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 168: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 169: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 170: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 171: {170}, 172: {171}, 173: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 174: {102, 7, 173, 83, 58, 127}, 175: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 176: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 177: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 178: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 179: {132, 201, 107, 178, 20, 88}, 180: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 181: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 182: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 183: {183}, 184: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 185: {185, 100, 125, 119}, 186: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 187: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 188: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 189: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 190: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 191: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 192: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 193: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 194: {194}, 195: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 196: {196}, 197: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 198: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 199: {37, 199, 202, 208, 18, 21, 215, 28}, 200: {200, 19}, 201: {132, 201, 107, 178, 20, 88}, 202: {37, 199, 202, 208, 18, 21, 215, 28}, 203: {209, 203, 29, 22}, 204: {204, 23}, 205: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 206: {41, 26, 206, 218}, 207: {27, 207}, 208: {37, 199, 202, 208, 18, 21, 215, 28}, 209: {209, 203, 29, 22}, 210: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 211: {32, 211}, 212: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 213: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 214: {40, 217, 36, 214}, 215: {37, 199, 202, 208, 18, 21, 215, 28}, 216: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 217: {40, 217, 36, 214}, 218: {41, 26, 206, 218}, 219: {42, 219}, 220: {43, 220}, 221: {33, 197, 166, 44, 77, 15, 212, 149, 221, 157, 190}, 222: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 223: {81, 223}, 224: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 225: {225}, 226: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 227: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 228: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 229: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 230: {94, 230}, 231: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 232: {96, 128, 226, 164, 103, 8, 72, 232, 140, 187, 174, 147, 84, 53, 121, 155, 63}, 233: {2, 133, 6, 135, 137, 10, 142, 144, 148, 156, 165, 172, 180, 182, 184, 57, 59, 60, 189, 191, 193, 66, 68, 69, 76, 78, 82, 89, 91, 93, 98, 227, 101, 233, 108, 116, 118, 123, 126}, 234: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 235: {235}, 236: {129, 130, 131, 4, 134, 9, 11, 139, 13, 141, 17, 146, 150, 25, 154, 158, 31, 35, 163, 39, 167, 169, 46, 175, 176, 49, 177, 52, 181, 54, 186, 188, 62, 64, 192, 195, 198, 71, 73, 205, 79, 210, 85, 86, 87, 213, 216, 90, 222, 95, 224, 97, 228, 229, 231, 104, 105, 106, 234, 236, 109, 110, 111, 112, 113, 114, 115, 120, 122}, 237: {237}})
Equivalent! frozenset({144, 60}) {68, 149}
Equivalent! frozenset({145, 61}) {69, 150}
Equivalent! frozenset({146, 62}) {70, 151}
Equivalent! frozenset({82, 172, 101, 126}) {106, 131, 173, 87}
CONFLICT {frozenset({176, 105, 130, 86}), frozenset({128, 103})} {frozenset({176, 105, 130, 86})}
NOT Equivalent! frozenset({83, 173, 102, 127}) {88, 107, 132, 174}
Equivalent! frozenset({176, 105, 130, 86}) {177, 91, 110, 135}
Equivalent! frozenset({89, 191}) {94, 191}
Equivalent! frozenset({94, 230}) {99, 230}
Equivalent! frozenset({95, 231}) {100, 231}
Equivalent! frozenset({98, 123}) {128, 103}
Equivalent! frozenset({100, 125}) {105, 130}
Equivalent! frozenset({128, 103}) {108, 133}
Equivalent! frozenset({104, 129}) {109, 134}
Equivalent! frozenset({108, 180}) {113, 180}
Equivalent! frozenset({185, 119}) {185, 124}
Equivalent! frozenset({120, 186}) {186, 125}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f5443725e18>, {0: {0}, 1: {47}, 2: {168}, 3: {74}, 4: {159}, 5: {179}, 6: {55}, 7: {56}, 8: {48}, 9: {160}, 10: {151}, 11: {65}, 12: {75}, 13: {5}, 14: {1}, 15: {2}, 16: {3}, 17: {4}, 18: {6}, 19: {7}, 20: {8}, 21: {9}, 22: {10}, 23: {11}, 24: {12}, 25: {13}, 26: {14}, 27: {15}, 28: {16}, 29: {17}, 30: {18}, 31: {19}, 32: {20}, 33: {21}, 34: {22}, 35: {23}, 36: {24}, 37: {25}, 38: {26}, 39: {27}, 40: {28}, 41: {29}, 42: {30}, 43: {31}, 44: {32}, 45: {33}, 46: {34}, 47: {35}, 48: {36}, 49: {37}, 50: {38}, 51: {39}, 52: {40}, 53: {41}, 54: {42}, 55: {43}, 56: {44}, 57: {45}, 58: {46}, 59: {192, 49}, 60: {50}, 61: {51}, 62: {52}, 63: {53}, 64: {54}, 65: {57}, 66: {58}, 67: {59}, 68: {144}, 69: {145}, 70: {146}, 71: {63}, 72: {64}, 73: {66}, 74: {67}, 75: {68}, 76: {69}, 77: {70}, 78: {71}, 79: {72}, 80: {73}, 81: {76}, 82: {77}, 83: {78}, 84: {79}, 85: {80}, 86: {81}, 87: {126}, 88: {83, 173, 102, 127}, 89: {84}, 90: {85}, 91: {105}, 92: {87}, 93: {88}, 94: {89}, 95: {90, 109, 134, 79}, 96: {91}, 97: {92}, 98: {93}, 99: {94}, 100: {95}, 101: {96}, 102: {97}, 103: {123}, 104: {99}, 105: {100}, 106: {82}, 107: {83, 173, 102, 127}, 108: {128}, 109: {104}, 110: {130}, 111: {106}, 112: {107}, 113: {108}, 114: {90, 109, 134, 79}, 115: {17, 110, 198}, 116: {25, 205, 111}, 117: {112, 35, 213}, 118: {216, 113, 39}, 119: {46, 114, 222}, 120: {210, 115, 31}, 121: {116}, 122: {117}, 123: {118}, 124: {119}, 125: {186}, 126: {121}, 127: {122}, 128: {98}, 129: {124}, 130: {125}, 131: {172}, 132: {83, 173, 102, 127}, 133: {103}, 134: {129}, 135: {86}, 136: {131}, 137: {132}, 138: {133}, 139: {90, 109, 134, 79}, 140: {135}, 141: {136}, 142: {137}, 143: {138}, 144: {139}, 145: {140}, 146: {141}, 147: {142}, 148: {143}, 149: {60}, 150: {61}, 151: {62}, 152: {147}, 153: {148}, 154: {149}, 155: {150}, 156: {152}, 157: {153}, 158: {154}, 159: {155}, 160: {156}, 161: {157}, 162: {158}, 163: {161}, 164: {162}, 165: {163}, 166: {164}, 167: {165}, 168: {166}, 169: {167}, 170: {169}, 171: {170}, 172: {171}, 173: {101}, 174: {83, 173, 102, 127}, 175: {174}, 176: {175}, 177: {176}, 178: {177}, 179: {178}, 180: {180}, 181: {181, 167}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {120}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {194}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}, 208: {208}, 209: {209}, 210: {210}, 211: {211}, 212: {212}, 213: {213}, 214: {214}, 215: {215}, 216: {216}, 217: {217}, 218: {218}, 219: {219}, 220: {220}, 221: {221}, 222: {222}, 223: {223}, 224: {224}, 225: {225}, 226: {226}, 227: {227}, 228: {228}, 229: {229}, 230: {230}, 231: {231}, 232: {232}, 233: {233}, 234: {234}, 235: {235}, 236: {236}, 237: {237}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 getelementptr getelementptr
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 load load
EXACT 19 add add
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 load load
EXACT 23 store store
EXACT 24 add add
EXACT 25 store store
EXACT 26 icmp icmp
EXACT 27 zext zext
EXACT 28 getelementptr getelementptr
EXACT 29 store store
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 tail tail
EXACT 33 trunc trunc
EXACT 34 and and
EXACT 35 xor xor
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 xor xor
EXACT 39 lshr lshr
EXACT 40 trunc trunc
EXACT 41 and and
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 lshr lshr
EXACT 49 trunc trunc
EXACT 50 getelementptr getelementptr
EXACT 51 store store
EXACT 52 lshr lshr
EXACT 53 xor xor
EXACT 54 add add
EXACT 55 icmp icmp
EXACT 56 zext zext
EXACT 57 getelementptr getelementptr
EXACT 58 store store
MORE 59 POT: 2
EXACT 60 add add
EXACT 61 add add
EXACT 62 store store
EXACT 63 inttoptr inttoptr
EXACT 64 store store
EXACT 65 load load
EXACT 66 add add
EXACT 67 load load
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 inttoptr inttoptr
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 load load
EXACT 76 load load
EXACT 77 add add
EXACT 78 store store
EXACT 79 inttoptr inttoptr
EXACT 80 store store
EXACT 81 load load
EXACT 82 zext zext
EXACT 83 load load
EXACT 84 store store
EXACT 85 add add
EXACT 86 add add
EXACT 87 load load
MORE 88 POT: 4
EXACT 89 inttoptr inttoptr
EXACT 90 store store
EXACT 91 store store
EXACT 92 store store
EXACT 93 tail tail
EXACT 94 load load
MORE 95 POT: 4
EXACT 96 load load
EXACT 97 add add
EXACT 98 load load
EXACT 99 add add
EXACT 100 store store
EXACT 101 inttoptr inttoptr
EXACT 102 store store
EXACT 103 load load
EXACT 104 add add
EXACT 105 add add
EXACT 106 load load
MORE 107 POT: 4
EXACT 108 inttoptr inttoptr
EXACT 109 store store
EXACT 110 store store
EXACT 111 store store
EXACT 112 tail tail
EXACT 113 load load
MORE 114 POT: 4
MORE 115 POT: 3
MORE 116 POT: 3
MORE 117 POT: 3
MORE 118 POT: 3
MORE 119 POT: 3
MORE 120 POT: 3
EXACT 121 load load
EXACT 122 add add
EXACT 123 load load
EXACT 124 add add
EXACT 125 store store
EXACT 126 inttoptr inttoptr
EXACT 127 store store
EXACT 128 load load
EXACT 129 add add
EXACT 130 add add
EXACT 131 load load
MORE 132 POT: 4
EXACT 133 inttoptr inttoptr
EXACT 134 store store
EXACT 135 store store
EXACT 136 store store
EXACT 137 tail tail
EXACT 138 load load
MORE 139 POT: 4
EXACT 140 load load
EXACT 141 add add
EXACT 142 load load
EXACT 143 add add
EXACT 144 store store
EXACT 145 inttoptr inttoptr
EXACT 146 store store
EXACT 147 load load
EXACT 148 add add
EXACT 149 load load
EXACT 150 add add
EXACT 151 store store
EXACT 152 inttoptr inttoptr
EXACT 153 load load
EXACT 154 zext zext
EXACT 155 store store
EXACT 156 add add
EXACT 157 add add
EXACT 158 store store
EXACT 159 inttoptr inttoptr
EXACT 160 load load
EXACT 161 zext zext
EXACT 162 store store
EXACT 163 add add
EXACT 164 add add
EXACT 165 store store
EXACT 166 inttoptr inttoptr
EXACT 167 load load
EXACT 168 zext zext
EXACT 169 store store
EXACT 170 store store
EXACT 171 add add
EXACT 172 add add
EXACT 173 load load
MORE 174 POT: 4
EXACT 175 inttoptr inttoptr
EXACT 176 store store
EXACT 177 store store
EXACT 178 store store
EXACT 179 tail tail
EXACT 180 load load
MORE 181 POT: 2
EXACT 182 load load
EXACT 183 add add
EXACT 184 load load
EXACT 185 add add
EXACT 186 store store
EXACT 187 inttoptr inttoptr
EXACT 188 store store
EXACT 189 load load
EXACT 190 zext zext
EXACT 191 load load
EXACT 192 store store
EXACT 193 load load
EXACT 194 add add
EXACT 195 store store
EXACT 196 icmp icmp
EXACT 197 zext zext
EXACT 198 store store
EXACT 199 trunc trunc
EXACT 200 and and
EXACT 201 tail tail
EXACT 202 trunc trunc
EXACT 203 and and
EXACT 204 xor xor
EXACT 205 store store
EXACT 206 xor xor
EXACT 207 lshr lshr
EXACT 208 trunc trunc
EXACT 209 and and
EXACT 210 store store
EXACT 211 icmp icmp
EXACT 212 zext zext
EXACT 213 store store
EXACT 214 lshr lshr
EXACT 215 trunc trunc
EXACT 216 store store
EXACT 217 lshr lshr
EXACT 218 xor xor
EXACT 219 add add
EXACT 220 icmp icmp
EXACT 221 zext zext
EXACT 222 store store
EXACT 223 add add
EXACT 224 store store
EXACT 225 add add
EXACT 226 inttoptr inttoptr
EXACT 227 load load
EXACT 228 store store
EXACT 229 store store
EXACT 230 add add
EXACT 231 store store
EXACT 232 inttoptr inttoptr
EXACT 233 load load
EXACT 234 store store
EXACT 235 add add
EXACT 236 store store
EXACT 237 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 19', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%EDI.i46 = bitcast %union.anon* %43 to i32*', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -8', '%46 = load i32, i32* %EDI.i46, align 4', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 3', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i32*', 'store i32 %46, i32* %49, align 4', '%RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i43, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%EAX.i40 = bitcast %union.anon* %39 to i32*', '%56 = load i32, i32* %EAX.i40, align 4', '%57 = zext i32 %56 to i64', '%58 = load i64, i64* %3, align 8', 'store i64 %57, i64* %RDI.i41, align 8', '%59 = add i64 %58, 85', '%60 = add i64 %58, 7', '%63 = inttoptr i64 %62 to i64*', 'store i64 %60, i64* %63, align 8', 'store i64 %62, i64* %6, align 8', 'store i64 %59, i64* %3, align 8', '%call2_40053d = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %59, %struct.Memory* %2)', '%64 = load i64, i64* %3, align 8', '%65 = load i64, i64* %RBP.i, align 8', '%66 = add i64 %65, -20', '%67 = load i32, i32* %EAX.i40, align 4', '%68 = add i64 %64, 8', 'store i64 %68, i64* %3, align 8', '%69 = inttoptr i64 %66 to i32*', 'store i32 %67, i32* %69, align 4', '%70 = load i64, i64* %3, align 8', '%71 = add i64 %70, 70', '%72 = add i64 %70, 5', '%75 = inttoptr i64 %74 to i64*', 'store i64 %72, i64* %75, align 8', 'store i64 %74, i64* %6, align 8', 'store i64 %71, i64* %3, align 8', '%call2_40054a = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %71, %struct.Memory* %call2_40053d)', '%76 = load i64, i64* %3, align 8', '%77 = load i64, i64* %RBP.i, align 8', '%78 = add i64 %77, -24', '%79 = load i32, i32* %EAX.i40, align 4', '%80 = add i64 %76, 5', 'store i64 %80, i64* %3, align 8', '%81 = inttoptr i64 %78 to i32*', 'store i32 %79, i32* %81, align 4', '%82 = load i64, i64* %3, align 8', '%83 = add i64 %82, 60', '%84 = add i64 %82, 5', '%87 = inttoptr i64 %86 to i64*', 'store i64 %84, i64* %87, align 8', 'store i64 %86, i64* %6, align 8', 'store i64 %83, i64* %3, align 8', '%call2_400554 = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %83, %struct.Memory* %call2_40054a)', '%88 = load i64, i64* %3, align 8', '%89 = load i64, i64* %RBP.i, align 8', '%90 = add i64 %89, -28', '%91 = load i32, i32* %EAX.i40, align 4', '%92 = add i64 %88, 13', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %90 to i32*', 'store i32 %91, i32* %93, align 4', '%94 = load i64, i64* %RBP.i, align 8', '%95 = add i64 %94, -20', '%96 = load i64, i64* %3, align 8', '%97 = add i64 %96, 3', 'store i64 %97, i64* %3, align 8', '%98 = inttoptr i64 %95 to i32*', '%99 = load i32, i32* %98, align 4', '%100 = zext i32 %99 to i64', 'store i64 %100, i64* %RSI.i43, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%101 = add i64 %94, -24', '%102 = add i64 %96, 6', 'store i64 %102, i64* %3, align 8', '%103 = inttoptr i64 %101 to i32*', '%104 = load i32, i32* %103, align 4', '%105 = zext i32 %104 to i64', 'store i64 %105, i64* %RDX.i, align 8', '%107 = add i64 %94, -28', '%108 = add i64 %96, 9', 'store i64 %108, i64* %3, align 8', '%109 = inttoptr i64 %107 to i32*', '%110 = load i32, i32* %109, align 4', '%111 = zext i32 %110 to i64', 'store i64 %111, i64* %RCX.i16, align 8', '%AL.i = bitcast %union.anon* %39 to i8*', 'store i8 0, i8* %AL.i, align 1', '%112 = add i64 %96, -326', '%113 = add i64 %96, 16', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %6, align 8', 'store i64 %112, i64* %3, align 8', '%117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400554)', '%ECX.i9 = bitcast %union.anon* %106 to i32*', '%118 = load i64, i64* %3, align 8', '%119 = load i64, i64* %RBP.i, align 8', '%120 = add i64 %119, -32', '%121 = load i32, i32* %EAX.i40, align 4', '%122 = add i64 %118, 5', 'store i64 %122, i64* %3, align 8', '%123 = inttoptr i64 %120 to i32*', 'store i32 %121, i32* %123, align 4', '%124 = load i32, i32* %ECX.i9, align 4', '%125 = zext i32 %124 to i64', '%126 = load i64, i64* %3, align 8', 'store i64 %125, i64* %RAX.i51, align 8', '%127 = load i64, i64* %6, align 8', '%128 = add i64 %127, 32', 'store i64 %128, i64* %6, align 8', '%129 = icmp ugt i64 %127, -33', '%130 = zext i1 %129 to i8', 'store i8 %130, i8* %14, align 1', '%131 = trunc i64 %128 to i32', '%132 = and i32 %131, 255', '%133 = tail call i32 @llvm.ctpop.i32(i32 %132)', '%134 = trunc i32 %133 to i8', '%135 = and i8 %134, 1', '%136 = xor i8 %135, 1', 'store i8 %136, i8* %21, align 1', '%137 = xor i64 %128, %127', '%138 = lshr i64 %137, 4', '%139 = trunc i64 %138 to i8', '%140 = and i8 %139, 1', 'store i8 %140, i8* %26, align 1', '%141 = icmp eq i64 %128, 0', '%142 = zext i1 %141 to i8', 'store i8 %142, i8* %29, align 1', '%143 = lshr i64 %128, 63', '%144 = trunc i64 %143 to i8', 'store i8 %144, i8* %32, align 1', '%145 = lshr i64 %127, 63', '%146 = xor i64 %143, %145', '%147 = add nuw nsw i64 %146, %143', '%148 = icmp eq i64 %147, 2', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %38, align 1', '%150 = add i64 %126, 7', 'store i64 %150, i64* %3, align 8', '%151 = add i64 %127, 40', '%152 = inttoptr i64 %128 to i64*', '%153 = load i64, i64* %152, align 8', 'store i64 %153, i64* %RBP.i, align 8', 'store i64 %151, i64* %6, align 8', '%154 = add i64 %126, 8', 'store i64 %154, i64* %3, align 8', '%155 = inttoptr i64 %151 to i64*', '%156 = load i64, i64* %155, align 8', 'store i64 %156, i64* %3, align 8', '%157 = add i64 %127, 48', 'store i64 %157, i64* %6, align 8', 'ret %struct.Memory* %117'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Keep: %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Keep: %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Keep: %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Keep: %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Keep: %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i51 = getelementptr inbounds %union.anon, %union.anon* %39, i64 0, i32 0
Keep: store i64 2, i64* %RAX.i51, align 8
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 19
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Keep: %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i46 = bitcast %union.anon* %43 to i32*
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = load i32, i32* %EDI.i46, align 4
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 3
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i32*
Found line to remove! store i32 %46, i32* %49, align 4
Found line to remove! %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI.i43, align 8
Found line to remove! %53 = load i64, i64* %3, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %3, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! %EAX.i40 = bitcast %union.anon* %39 to i32*
Keep: %RDI.i41 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
Found line to remove! %56 = load i32, i32* %EAX.i40, align 4
Found line to remove! %57 = zext i32 %56 to i64
Found line to remove! %58 = load i64, i64* %3, align 8
Found line to remove! store i64 %57, i64* %RDI.i41, align 8
Found line to remove! %59 = add i64 %58, 85
Found line to remove! %60 = add i64 %58, 7
Keep: %61 = load i64, i64* %6, align 8
Keep: %62 = add i64 %61, -8
Found line to remove! %63 = inttoptr i64 %62 to i64*
Found line to remove! store i64 %60, i64* %63, align 8
Found line to remove! store i64 %62, i64* %6, align 8
Found line to remove! store i64 %59, i64* %3, align 8
Found line to remove! %call2_40053d = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %59, %struct.Memory* %2)
Found line to remove! %64 = load i64, i64* %3, align 8
Keep: store i64 4, i64* %RDI.i41, align 8
Found line to remove! %65 = load i64, i64* %RBP.i, align 8
Found line to remove! %66 = add i64 %65, -20
Found line to remove! %67 = load i32, i32* %EAX.i40, align 4
Found line to remove! %68 = add i64 %64, 8
Found line to remove! store i64 %68, i64* %3, align 8
Found line to remove! %69 = inttoptr i64 %66 to i32*
Found line to remove! store i32 %67, i32* %69, align 4
Found line to remove! %70 = load i64, i64* %3, align 8
Found line to remove! %71 = add i64 %70, 70
Found line to remove! %72 = add i64 %70, 5
Keep: %73 = load i64, i64* %6, align 8
Keep: %74 = add i64 %73, -8
Found line to remove! %75 = inttoptr i64 %74 to i64*
Found line to remove! store i64 %72, i64* %75, align 8
Found line to remove! store i64 %74, i64* %6, align 8
Found line to remove! store i64 %71, i64* %3, align 8
Found line to remove! %call2_40054a = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %71, %struct.Memory* %call2_40053d)
Found line to remove! %76 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RDI.i41, align 8
Keep: store i8 0, i8* %14, align 1
Keep: store i8 1, i8* %21, align 1
Keep: store i8 1, i8* %29, align 1
Keep: store i8 0, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Keep: store i8 0, i8* %26, align 1
Found line to remove! %77 = load i64, i64* %RBP.i, align 8
Found line to remove! %78 = add i64 %77, -24
Found line to remove! %79 = load i32, i32* %EAX.i40, align 4
Found line to remove! %80 = add i64 %76, 5
Found line to remove! store i64 %80, i64* %3, align 8
Found line to remove! %81 = inttoptr i64 %78 to i32*
Found line to remove! store i32 %79, i32* %81, align 4
Found line to remove! %82 = load i64, i64* %3, align 8
Found line to remove! %83 = add i64 %82, 60
Found line to remove! %84 = add i64 %82, 5
Keep: %85 = load i64, i64* %6, align 8
Keep: %86 = add i64 %85, -8
Found line to remove! %87 = inttoptr i64 %86 to i64*
Found line to remove! store i64 %84, i64* %87, align 8
Found line to remove! store i64 %86, i64* %6, align 8
Found line to remove! store i64 %83, i64* %3, align 8
Found line to remove! %call2_400554 = tail call %struct.Memory* @sub_400590.doOp(%struct.State* %0, i64 %83, %struct.Memory* %call2_40054a)
Found line to remove! %88 = load i64, i64* %3, align 8
Keep: store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i41, align 8
Found line to remove! %89 = load i64, i64* %RBP.i, align 8
Found line to remove! %90 = add i64 %89, -28
Found line to remove! %91 = load i32, i32* %EAX.i40, align 4
Found line to remove! %92 = add i64 %88, 13
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = inttoptr i64 %90 to i32*
Found line to remove! store i32 %91, i32* %93, align 4
Found line to remove! %94 = load i64, i64* %RBP.i, align 8
Found line to remove! %95 = add i64 %94, -20
Found line to remove! %96 = load i64, i64* %3, align 8
Found line to remove! %97 = add i64 %96, 3
Found line to remove! store i64 %97, i64* %3, align 8
Found line to remove! %98 = inttoptr i64 %95 to i32*
Found line to remove! %99 = load i32, i32* %98, align 4
Found line to remove! %100 = zext i32 %99 to i64
Found line to remove! store i64 %100, i64* %RSI.i43, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %101 = add i64 %94, -24
Found line to remove! %102 = add i64 %96, 6
Found line to remove! store i64 %102, i64* %3, align 8
Found line to remove! %103 = inttoptr i64 %101 to i32*
Found line to remove! %104 = load i32, i32* %103, align 4
Found line to remove! %105 = zext i32 %104 to i64
Found line to remove! store i64 %105, i64* %RDX.i, align 8
Keep: %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Keep: %RCX.i16 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
Found line to remove! %107 = add i64 %94, -28
Found line to remove! %108 = add i64 %96, 9
Found line to remove! store i64 %108, i64* %3, align 8
Found line to remove! %109 = inttoptr i64 %107 to i32*
Found line to remove! %110 = load i32, i32* %109, align 4
Found line to remove! %111 = zext i32 %110 to i64
Found line to remove! store i64 %111, i64* %RCX.i16, align 8
Found line to remove! %AL.i = bitcast %union.anon* %39 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %112 = add i64 %96, -326
Found line to remove! %113 = add i64 %96, 16
Keep: %114 = load i64, i64* %6, align 8
Keep: %115 = add i64 %114, -8
Found line to remove! %116 = inttoptr i64 %115 to i64*
Found line to remove! store i64 %113, i64* %116, align 8
Found line to remove! store i64 %115, i64* %6, align 8
Found line to remove! store i64 %112, i64* %3, align 8
Found line to remove! %117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400554)
Found line to remove! %ECX.i9 = bitcast %union.anon* %106 to i32*
Found line to remove! %118 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RCX.i16, align 8
Found line to remove! %119 = load i64, i64* %RBP.i, align 8
Found line to remove! %120 = add i64 %119, -32
Found line to remove! %121 = load i32, i32* %EAX.i40, align 4
Found line to remove! %122 = add i64 %118, 5
Found line to remove! store i64 %122, i64* %3, align 8
Found line to remove! %123 = inttoptr i64 %120 to i32*
Found line to remove! store i32 %121, i32* %123, align 4
Found line to remove! %124 = load i32, i32* %ECX.i9, align 4
Found line to remove! %125 = zext i32 %124 to i64
Found line to remove! %126 = load i64, i64* %3, align 8
Found line to remove! store i64 %125, i64* %RAX.i51, align 8
Found line to remove! %127 = load i64, i64* %6, align 8
Found line to remove! %128 = add i64 %127, 32
Found line to remove! store i64 %128, i64* %6, align 8
Found line to remove! %129 = icmp ugt i64 %127, -33
Found line to remove! %130 = zext i1 %129 to i8
Found line to remove! store i8 %130, i8* %14, align 1
Found line to remove! %131 = trunc i64 %128 to i32
Found line to remove! %132 = and i32 %131, 255
Found line to remove! %133 = tail call i32 @llvm.ctpop.i32(i32 %132)
Found line to remove! %134 = trunc i32 %133 to i8
Found line to remove! %135 = and i8 %134, 1
Found line to remove! %136 = xor i8 %135, 1
Found line to remove! store i8 %136, i8* %21, align 1
Found line to remove! %137 = xor i64 %128, %127
Found line to remove! %138 = lshr i64 %137, 4
Found line to remove! %139 = trunc i64 %138 to i8
Found line to remove! %140 = and i8 %139, 1
Found line to remove! store i8 %140, i8* %26, align 1
Found line to remove! %141 = icmp eq i64 %128, 0
Found line to remove! %142 = zext i1 %141 to i8
Found line to remove! store i8 %142, i8* %29, align 1
Found line to remove! %143 = lshr i64 %128, 63
Found line to remove! %144 = trunc i64 %143 to i8
Found line to remove! store i8 %144, i8* %32, align 1
Found line to remove! %145 = lshr i64 %127, 63
Found line to remove! %146 = xor i64 %143, %145
Found line to remove! %147 = add nuw nsw i64 %146, %143
Found line to remove! %148 = icmp eq i64 %147, 2
Found line to remove! %149 = zext i1 %148 to i8
Found line to remove! store i8 %149, i8* %38, align 1
Found line to remove! %150 = add i64 %126, 7
Found line to remove! store i64 %150, i64* %3, align 8
Found line to remove! %151 = add i64 %127, 40
Found line to remove! %152 = inttoptr i64 %128 to i64*
Found line to remove! %153 = load i64, i64* %152, align 8
Found line to remove! store i64 %153, i64* %RBP.i, align 8
Found line to remove! store i64 %151, i64* %6, align 8
Found line to remove! %154 = add i64 %126, 8
Found line to remove! store i64 %154, i64* %3, align 8
Found line to remove! %155 = inttoptr i64 %151 to i64*
Found line to remove! %156 = load i64, i64* %155, align 8
Found line to remove! store i64 %156, i64* %3, align 8
Found line to remove! %157 = add i64 %127, 48
Found line to remove! store i64 %157, i64* %6, align 8
Found line to remove! ret %struct.Memory* %117
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ECX = bitcast %union.anon* %4 to i32*', '%EDI = bitcast %union.anon* %5 to i32*', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 19', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', '%55 = load i32, i32* %EAX, align 4', '%56 = zext i32 %55 to i64', '%57 = load i64, i64* %PC, align 8', 'store i64 %56, i64* %RDI, align 8', '%58 = add i64 %57, 85', '%59 = add i64 %57, 7', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %RSP, align 8', 'store i64 %58, i64* %PC, align 8', '%63 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)', '%64 = load i64, i64* %PC, align 8', '%65 = load i64, i64* %RBP, align 8', '%66 = add i64 %65, -20', '%67 = load i32, i32* %EAX, align 4', '%68 = add i64 %64, 8', 'store i64 %68, i64* %PC, align 8', '%69 = inttoptr i64 %66 to i32*', 'store i32 %67, i32* %69, align 4', '%70 = load i64, i64* %PC, align 8', '%71 = add i64 %70, 70', '%72 = add i64 %70, 5', '%75 = inttoptr i64 %74 to i64*', 'store i64 %72, i64* %75, align 8', 'store i64 %74, i64* %RSP, align 8', 'store i64 %71, i64* %PC, align 8', '%76 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %63)', '%77 = load i64, i64* %PC, align 8', '%78 = load i64, i64* %RBP, align 8', '%79 = add i64 %78, -24', '%80 = load i32, i32* %EAX, align 4', '%81 = add i64 %77, 5', 'store i64 %81, i64* %PC, align 8', '%82 = inttoptr i64 %79 to i32*', 'store i32 %80, i32* %82, align 4', '%83 = load i64, i64* %PC, align 8', '%84 = add i64 %83, 60', '%85 = add i64 %83, 5', '%88 = inttoptr i64 %87 to i64*', 'store i64 %85, i64* %88, align 8', 'store i64 %87, i64* %RSP, align 8', 'store i64 %84, i64* %PC, align 8', '%89 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %84, %struct.Memory* %76)', '%90 = load i64, i64* %PC, align 8', '%91 = load i64, i64* %RBP, align 8', '%92 = add i64 %91, -28', '%93 = load i32, i32* %EAX, align 4', '%94 = add i64 %90, 13', 'store i64 %94, i64* %PC, align 8', '%95 = inttoptr i64 %92 to i32*', 'store i32 %93, i32* %95, align 4', '%96 = load i64, i64* %RBP, align 8', '%97 = add i64 %96, -20', '%98 = load i64, i64* %PC, align 8', '%99 = add i64 %98, 3', 'store i64 %99, i64* %PC, align 8', '%100 = inttoptr i64 %97 to i32*', '%101 = load i32, i32* %100, align 4', '%102 = zext i32 %101 to i64', 'store i64 %102, i64* %RSI, align 8', '%103 = add i64 %96, -24', '%104 = add i64 %98, 6', 'store i64 %104, i64* %PC, align 8', '%105 = inttoptr i64 %103 to i32*', '%106 = load i32, i32* %105, align 4', '%107 = zext i32 %106 to i64', 'store i64 %107, i64* %RDX, align 8', '%108 = add i64 %96, -28', '%109 = add i64 %98, 9', 'store i64 %109, i64* %PC, align 8', '%110 = inttoptr i64 %108 to i32*', '%111 = load i32, i32* %110, align 4', '%112 = zext i32 %111 to i64', 'store i64 %112, i64* %RCX, align 8', 'store i8 0, i8* %AL, align 1', '%113 = add i64 %98, -326', '%114 = add i64 %98, 16', '%117 = inttoptr i64 %116 to i64*', 'store i64 %114, i64* %117, align 8', 'store i64 %116, i64* %RSP, align 8', 'store i64 %113, i64* %PC, align 8', '%118 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %89)', '%119 = load i64, i64* %PC, align 8', '%120 = load i64, i64* %RBP, align 8', '%121 = add i64 %120, -32', '%122 = load i32, i32* %EAX, align 4', '%123 = add i64 %119, 5', 'store i64 %123, i64* %PC, align 8', '%124 = inttoptr i64 %121 to i32*', 'store i32 %122, i32* %124, align 4', '%125 = load i32, i32* %ECX, align 4', '%126 = zext i32 %125 to i64', '%127 = load i64, i64* %PC, align 8', 'store i64 %126, i64* %RAX, align 8', '%128 = load i64, i64* %RSP, align 8', '%129 = add i64 %128, 32', 'store i64 %129, i64* %RSP, align 8', '%130 = icmp ugt i64 %128, -33', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %15, align 1', '%132 = trunc i64 %129 to i32', '%133 = and i32 %132, 255', '%134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12', '%135 = trunc i32 %134 to i8', '%136 = and i8 %135, 1', '%137 = xor i8 %136, 1', 'store i8 %137, i8* %22, align 1', '%138 = xor i64 %129, %128', '%139 = lshr i64 %138, 4', '%140 = trunc i64 %139 to i8', '%141 = and i8 %140, 1', 'store i8 %141, i8* %27, align 1', '%142 = icmp eq i64 %129, 0', '%143 = zext i1 %142 to i8', 'store i8 %143, i8* %30, align 1', '%144 = lshr i64 %129, 63', '%145 = trunc i64 %144 to i8', 'store i8 %145, i8* %33, align 1', '%146 = lshr i64 %128, 63', '%147 = xor i64 %144, %146', '%148 = add nuw nsw i64 %147, %144', '%149 = icmp eq i64 %148, 2', '%150 = zext i1 %149 to i8', 'store i8 %150, i8* %39, align 1', '%151 = add i64 %127, 7', 'store i64 %151, i64* %PC, align 8', '%152 = add i64 %128, 40', '%153 = inttoptr i64 %129 to i64*', '%154 = load i64, i64* %153, align 8', 'store i64 %154, i64* %RBP, align 8', 'store i64 %152, i64* %RSP, align 8', '%155 = add i64 %127, 8', 'store i64 %155, i64* %PC, align 8', '%156 = inttoptr i64 %152 to i64*', '%157 = load i64, i64* %156, align 8', 'store i64 %157, i64* %PC, align 8', '%158 = add i64 %128, 48', 'store i64 %158, i64* %RSP, align 8', 'ret %struct.Memory* %118'])
Keep: block_400520:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Keep: %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Keep: %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Keep: %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Keep: %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Keep: %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Keep: store i64 2, i64* %RAX, align 8
Found line to remove! %40 = add i64 %8, -12
Found line to remove! %41 = add i64 %11, 19
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Found line to remove! %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Found line to remove! %55 = load i32, i32* %EAX, align 4
Found line to remove! %56 = zext i32 %55 to i64
Found line to remove! %57 = load i64, i64* %PC, align 8
Found line to remove! store i64 %56, i64* %RDI, align 8
Found line to remove! %58 = add i64 %57, 85
Found line to remove! %59 = add i64 %57, 7
Keep: %60 = load i64, i64* %RSP, align 8
Keep: %61 = add i64 %60, -8
Found line to remove! %62 = inttoptr i64 %61 to i64*
Found line to remove! store i64 %59, i64* %62, align 8
Found line to remove! store i64 %61, i64* %RSP, align 8
Found line to remove! store i64 %58, i64* %PC, align 8
Found line to remove! %63 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
Found line to remove! %64 = load i64, i64* %PC, align 8
Keep: store i64 4, i64* %RDI, align 8
Found line to remove! %65 = load i64, i64* %RBP, align 8
Found line to remove! %66 = add i64 %65, -20
Found line to remove! %67 = load i32, i32* %EAX, align 4
Found line to remove! %68 = add i64 %64, 8
Found line to remove! store i64 %68, i64* %PC, align 8
Found line to remove! %69 = inttoptr i64 %66 to i32*
Found line to remove! store i32 %67, i32* %69, align 4
Found line to remove! %70 = load i64, i64* %PC, align 8
Found line to remove! %71 = add i64 %70, 70
Found line to remove! %72 = add i64 %70, 5
Keep: %73 = load i64, i64* %RSP, align 8
Keep: %74 = add i64 %73, -8
Found line to remove! %75 = inttoptr i64 %74 to i64*
Found line to remove! store i64 %72, i64* %75, align 8
Found line to remove! store i64 %74, i64* %RSP, align 8
Found line to remove! store i64 %71, i64* %PC, align 8
Found line to remove! %76 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %71, %struct.Memory* %63)
Found line to remove! %77 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RDI, align 8
Keep: store i8 0, i8* %15, align 1
Keep: store i8 1, i8* %22, align 1
Keep: store i8 1, i8* %30, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %27, align 1
Found line to remove! %78 = load i64, i64* %RBP, align 8
Found line to remove! %79 = add i64 %78, -24
Found line to remove! %80 = load i32, i32* %EAX, align 4
Found line to remove! %81 = add i64 %77, 5
Found line to remove! store i64 %81, i64* %PC, align 8
Found line to remove! %82 = inttoptr i64 %79 to i32*
Found line to remove! store i32 %80, i32* %82, align 4
Found line to remove! %83 = load i64, i64* %PC, align 8
Found line to remove! %84 = add i64 %83, 60
Found line to remove! %85 = add i64 %83, 5
Keep: %86 = load i64, i64* %RSP, align 8
Keep: %87 = add i64 %86, -8
Found line to remove! %88 = inttoptr i64 %87 to i64*
Found line to remove! store i64 %85, i64* %88, align 8
Found line to remove! store i64 %87, i64* %RSP, align 8
Found line to remove! store i64 %84, i64* %PC, align 8
Found line to remove! %89 = tail call %struct.Memory* @sub_400590_doOp_renamed_(%struct.State* nonnull %0, i64 %84, %struct.Memory* %76)
Found line to remove! %90 = load i64, i64* %PC, align 8
Keep: store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %91 = load i64, i64* %RBP, align 8
Found line to remove! %92 = add i64 %91, -28
Found line to remove!Writing '/tmp/tmpzyeto78_.dot'...
Writing '/tmp/tmpzyeto78_.dot':Done

Reading LLVM: /tmp/tmpl3l7eaho-query.ll
Extracting function [main] from /tmp/tmpl3l7eaho-query.ll
Dot file generated!
Writing '/tmp/tmp_9dd23zm.dot'...
Writing '/tmp/tmp_9dd23zm.dot':Done

Reading LLVM: /tmp/tmpy5ozh15u-target.ll
Extracting function [main] from /tmp/tmpy5ozh15u-target.ll
Dot file generated!
 %93 = load i32, i32* %EAX, align 4
Found line to remove! %94 = add i64 %90, 13
Found line to remove! store i64 %94, i64* %PC, align 8
Found line to remove! %95 = inttoptr i64 %92 to i32*
Found line to remove! store i32 %93, i32* %95, align 4
Found line to remove! %96 = load i64, i64* %RBP, align 8
Found line to remove! %97 = add i64 %96, -20
Found line to remove! %98 = load i64, i64* %PC, align 8
Found line to remove! %99 = add i64 %98, 3
Found line to remove! store i64 %99, i64* %PC, align 8
Found line to remove! %100 = inttoptr i64 %97 to i32*
Found line to remove! %101 = load i32, i32* %100, align 4
Found line to remove! %102 = zext i32 %101 to i64
Found line to remove! store i64 %102, i64* %RSI, align 8
Found line to remove! %103 = add i64 %96, -24
Found line to remove! %104 = add i64 %98, 6
Found line to remove! store i64 %104, i64* %PC, align 8
Found line to remove! %105 = inttoptr i64 %103 to i32*
Found line to remove! %106 = load i32, i32* %105, align 4
Found line to remove! %107 = zext i32 %106 to i64
Found line to remove! store i64 %107, i64* %RDX, align 8
Found line to remove! %108 = add i64 %96, -28
Found line to remove! %109 = add i64 %98, 9
Found line to remove! store i64 %109, i64* %PC, align 8
Found line to remove! %110 = inttoptr i64 %108 to i32*
Found line to remove! %111 = load i32, i32* %110, align 4
Found line to remove! %112 = zext i32 %111 to i64
Found line to remove! store i64 %112, i64* %RCX, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %113 = add i64 %98, -326
Found line to remove! %114 = add i64 %98, 16
Keep: %115 = load i64, i64* %RSP, align 8
Keep: %116 = add i64 %115, -8
Found line to remove! %117 = inttoptr i64 %116 to i64*
Found line to remove! store i64 %114, i64* %117, align 8
Found line to remove! store i64 %116, i64* %RSP, align 8
Found line to remove! store i64 %113, i64* %PC, align 8
Found line to remove! %118 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %89)
Found line to remove! %119 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RCX, align 8
Found line to remove! %120 = load i64, i64* %RBP, align 8
Found line to remove! %121 = add i64 %120, -32
Found line to remove! %122 = load i32, i32* %EAX, align 4
Found line to remove! %123 = add i64 %119, 5
Found line to remove! store i64 %123, i64* %PC, align 8
Found line to remove! %124 = inttoptr i64 %121 to i32*
Found line to remove! store i32 %122, i32* %124, align 4
Found line to remove! %125 = load i32, i32* %ECX, align 4
Found line to remove! %126 = zext i32 %125 to i64
Found line to remove! %127 = load i64, i64* %PC, align 8
Found line to remove! store i64 %126, i64* %RAX, align 8
Found line to remove! %128 = load i64, i64* %RSP, align 8
Found line to remove! %129 = add i64 %128, 32
Found line to remove! store i64 %129, i64* %RSP, align 8
Found line to remove! %130 = icmp ugt i64 %128, -33
Found line to remove! %131 = zext i1 %130 to i8
Found line to remove! store i8 %131, i8* %15, align 1
Found line to remove! %132 = trunc i64 %129 to i32
Found line to remove! %133 = and i32 %132, 255
Found line to remove! %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12
Found line to remove! %135 = trunc i32 %134 to i8
Found line to remove! %136 = and i8 %135, 1
Found line to remove! %137 = xor i8 %136, 1
Found line to remove! store i8 %137, i8* %22, align 1
Found line to remove! %138 = xor i64 %129, %128
Found line to remove! %139 = lshr i64 %138, 4
Found line to remove! %140 = trunc i64 %139 to i8
Found line to remove! %141 = and i8 %140, 1
Found line to remove! store i8 %141, i8* %27, align 1
Found line to remove! %142 = icmp eq i64 %129, 0
Found line to remove! %143 = zext i1 %142 to i8
Found line to remove! store i8 %143, i8* %30, align 1
Found line to remove! %144 = lshr i64 %129, 63
Found line to remove! %145 = trunc i64 %144 to i8
Found line to remove! store i8 %145, i8* %33, align 1
Found line to remove! %146 = lshr i64 %128, 63
Found line to remove! %147 = xor i64 %144, %146
Found line to remove! %148 = add nuw nsw i64 %147, %144
Found line to remove! %149 = icmp eq i64 %148, 2
Found line to remove! %150 = zext i1 %149 to i8
Found line to remove! store i8 %150, i8* %39, align 1
Found line to remove! %151 = add i64 %127, 7
Found line to remove! store i64 %151, i64* %PC, align 8
Found line to remove! %152 = add i64 %128, 40
Found line to remove! %153 = inttoptr i64 %129 to i64*
Found line to remove! %154 = load i64, i64* %153, align 8
Found line to remove! store i64 %154, i64* %RBP, align 8
Found line to remove! store i64 %152, i64* %RSP, align 8
Found line to remove! %155 = add i64 %127, 8
Found line to remove! store i64 %155, i64* %PC, align 8
Found line to remove! %156 = inttoptr i64 %152 to i64*
Found line to remove! %157 = load i64, i64* %156, align 8
Found line to remove! store i64 %157, i64* %PC, align 8
Found line to remove! %158 = add i64 %128, 48
Found line to remove! store i64 %158, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %118
================ Starting round 2
MAPPING:
- 0 %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 1 %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 2 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 4 %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 5 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 6 %RAX.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 7 store i64 2, i64* %RAX.i51, align 8
- 8 %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 9 store i8 0, i8* %var_2_14, align 1
- 10 store i8 1, i8* %var_2_21, align 1
- 11 store i8 1, i8* %var_2_29, align 1
- 12 store i8 0, i8* %var_2_32, align 1
- 13 store i8 0, i8* %var_2_38, align 1
- 14 store i8 0, i8* %var_2_26, align 1
- 15 store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i41, align 8
- 16 %RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 17 store i64 0, i64* %RCX.i16, align 8
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f544307b268>, {0: {3}, 1: {4}, 2: {5}, 3: {6}, 4: {7}, 5: {8}, 6: {0}, 7: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 8: {2}, 9: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 10: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 11: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 12: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 13: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 14: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 15: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 16: {1}, 17: {9, 10, 11, 12, 13, 14, 15, 16, 17}, 18: {18}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f544307b268>, {0: {3}, 1: {4}, 2: {5}, 3: {6}, 4: {7}, 5: {8}, 6: {0}, 7: {9}, 8: {2}, 9: {10}, 10: {11}, 11: {12}, 12: {13}, 13: {14}, 14: {15}, 15: {16}, 16: {1}, 17: {17}, 18: {18}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 store store
EXACT 8 getelementptr getelementptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 store store
EXACT 12 store store
EXACT 13 store store
EXACT 14 store store
EXACT 15 store store
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 ret ret
================ Starting round 3
MAPPING:
- 0 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 2 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 3 %var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 4 %var_2_22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 5 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 6 %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 7 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 8 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 9 store i64 2, i64* %RAX, align 8
- 10 store i8 0, i8* %var_2_15, align 1
- 11 store i8 1, i8* %var_2_22, align 1
- 12 store i8 1, i8* %var_2_30, align 1
- 13 store i8 0, i8* %var_2_33, align 1
- 14 store i8 0, i8* %var_2_39, align 1
- 15 store i8 0, i8* %var_2_27, align 1
- 16 store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
- 17 store i64 0, i64* %RCX, align 8
- 18 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f54437051e0>, {0: {6}, 1: {16}, 2: {8}, 3: {0}, 4: {1}, 5: {2}, 6: {3}, 7: {4}, 8: {5}, 9: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 10: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 11: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 12: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 13: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 14: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 15: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 16: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 17: {7, 9, 10, 11, 12, 13, 14, 15, 17}, 18: {18}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f54437051e0>, {0: {6}, 1: {16}, 2: {8}, 3: {0}, 4: {1}, 5: {2}, 6: {3}, 7: {4}, 8: {5}, 9: {7}, 10: {9}, 11: {10}, 12: {11}, 13: {12}, 14: {13}, 15: {14}, 16: {15}, 17: {17}, 18: {18}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 store store
EXACT 12 store store
EXACT 13 store store
EXACT 14 store store
EXACT 15 store store
EXACT 16 store store
EXACT 17 store store
EXACT 18 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', '%RAX.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 2, i64* %RAX.i51, align 8', '%RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i8 0, i8* %var_2_14, align 1', 'store i8 1, i8* %var_2_21, align 1', 'store i8 1, i8* %var_2_29, align 1', 'store i8 0, i8* %var_2_32, align 1', 'store i8 0, i8* %var_2_38, align 1', 'store i8 0, i8* %var_2_26, align 1', 'store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i41, align 8', '%RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 0, i64* %RCX.i16, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %var_2_14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! %RAX.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 2, i64* %RAX.i51, align 8
Found line to remove! %RDI.i41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i8 0, i8* %var_2_14, align 1
Found line to remove! store i8 1, i8* %var_2_21, align 1
Found line to remove! store i8 1, i8* %var_2_29, align 1
Found line to remove! store i8 0, i8* %var_2_32, align 1
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Found line to remove! store i64 ptrtoint (%G__0x400644_type* @G__0x400644 to i64), i64* %RDI.i41, align 8
Found line to remove! %RCX.i16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 0, i64* %RCX.i16, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', '%var_2_22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', '%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i64 2, i64* %RAX, align 8', 'store i8 0, i8* %var_2_15, align 1', 'store i8 1, i8* %var_2_22, align 1', 'store i8 1, i8* %var_2_30, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_27, align 1', 'store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8', 'store i64 0, i64* %RCX, align 8', 'ret %struct.Memory* %2'])
Keep: block_400520:
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %var_2_15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! %var_2_22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i64 2, i64* %RAX, align 8
Found line to remove! store i8 0, i8* %var_2_15, align 1
Found line to remove! store i8 1, i8* %var_2_22, align 1
Found line to remove! store i8 1, i8* %var_2_30, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Found line to remove! store i64 add (i64 ptrtoint (%seg_400640__rodata_type* @seg_400640__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! store i64 0, i64* %RCX, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_15/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_15/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
