Writing '/tmp/tmpjs5l4cb_.dot'...
Writing '/tmp/tmpjs5l4cb_.dot':Done

Reading LLVM: /tmp/tmp3tknuyc7-query.ll
Extracting function [main] from /tmp/tmp3tknuyc7-query.ll
Dot file generated!
Writing '/tmp/tmph996ocfv.dot'...
Writing '/tmp/tmph996ocfv.dot':Done

Reading LLVM: /tmp/tmplg7vv2g4-target.ll
Extracting function [main] from /tmp/tmplg7vv2g4-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -56
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 48
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %RDI.i45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 49 store i64 10, i64* %RDI.i45, align 8
- 50 %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 51 store i64 20, i64* %RSI.i43, align 8
- 52 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 53 store i64 30, i64* %RDX.i, align 8
- 54 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 55 %RCX.i40 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
- 56 store i64 40, i64* %RCX.i40, align 8
- 57 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 58 store i64 50, i64* %41, align 8
- 59 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
- 60 store i64 60, i64* %42, align 8
- 61 %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 62 %RAX.i36 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
- 63 store i64 70, i64* %RAX.i36, align 8
- 64 %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
- 65 %R10D.i34 = bitcast %union.anon* %44 to i32*
- 66 %45 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
- 67 store i64 80, i64* %45, align 8
- 68 %46 = add i64 %7, -12
- 69 %47 = add i64 %10, 57
- 70 store i64 %47, i64* %3, align 8
- 71 %48 = inttoptr i64 %46 to i32*
- 72 store i32 0, i32* %48, align 4
- 73 %49 = bitcast i64* %6 to i32**
- 74 %50 = load i32*, i32** %49, align 8
- 75 %51 = load i64, i64* %3, align 8
- 76 %52 = add i64 %51, 7
- 77 store i64 %52, i64* %3, align 8
- 78 store i32 70, i32* %50, align 4
- 79 %53 = load i64, i64* %6, align 8
- 80 %54 = add i64 %53, 8
- 81 %55 = load i64, i64* %3, align 8
- 82 %56 = add i64 %55, 8
- 83 store i64 %56, i64* %3, align 8
- 84 %57 = inttoptr i64 %54 to i32*
- 85 store i32 80, i32* %57, align 4
- 86 %58 = load i64, i64* %RBP.i, align 8
- 87 %59 = add i64 %58, -12
- 88 %60 = load i32, i32* %R10D.i34, align 4
- 89 %61 = load i64, i64* %3, align 8
- 90 %62 = add i64 %61, 4
- 91 store i64 %62, i64* %3, align 8
- 92 %63 = inttoptr i64 %59 to i32*
- 93 store i32 %60, i32* %63, align 4
- 94 %EAX.i23 = bitcast %union.anon* %43 to i32*
- 95 %64 = load i64, i64* %RBP.i, align 8
- 96 %65 = add i64 %64, -16
- 97 %66 = load i32, i32* %EAX.i23, align 4
- 98 %67 = load i64, i64* %3, align 8
- 99 %68 = add i64 %67, 3
- 100 store i64 %68, i64* %3, align 8
- 101 %69 = inttoptr i64 %65 to i32*
- 102 store i32 %66, i32* %69, align 4
- 103 %70 = load i64, i64* %3, align 8
- 104 %71 = add i64 %70, -192
- 105 %72 = add i64 %70, 5
- 106 %73 = load i64, i64* %6, align 8
- 107 %74 = add i64 %73, -8
- 108 %75 = inttoptr i64 %74 to i64*
- 109 store i64 %72, i64* %75, align 8
- 110 store i64 %74, i64* %6, align 8
- 111 store i64 %71, i64* %3, align 8
- 112 %call2_4005e0 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %71, %struct.Memory* %2)
- 113 %76 = load i64, i64* %3, align 8
- 114 store i64 ptrtoint (%G__0x400694_type* @G__0x400694 to i64), i64* %RDI.i45, align 8
- 115 %77 = load i64, i64* %RBP.i, align 8
- 116 %78 = add i64 %77, -8
- 117 %79 = load i32, i32* %EAX.i23, align 4
- 118 %80 = add i64 %76, 13
- 119 store i64 %80, i64* %3, align 8
- 120 %81 = inttoptr i64 %78 to i32*
- 121 store i32 %79, i32* %81, align 4
- 122 %82 = load i64, i64* %RBP.i, align 8
- 123 %83 = add i64 %82, -8
- 124 %84 = load i64, i64* %3, align 8
- 125 %85 = add i64 %84, 3
- 126 store i64 %85, i64* %3, align 8
- 127 %86 = inttoptr i64 %83 to i32*
- 128 %87 = load i32, i32* %86, align 4
- 129 %88 = zext i32 %87 to i64
- 130 store i64 %88, i64* %RSI.i43, align 8
- 131 %AL.i = bitcast %union.anon* %43 to i8*
- 132 store i8 0, i8* %AL.i, align 1
- 133 %89 = add i64 %84, -466
- 134 %90 = add i64 %84, 10
- 135 %91 = load i64, i64* %6, align 8
- 136 %92 = add i64 %91, -8
- 137 %93 = inttoptr i64 %92 to i64*
- 138 store i64 %90, i64* %93, align 8
- 139 store i64 %92, i64* %6, align 8
- 140 store i64 %89, i64* %3, align 8
- 141 %94 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005e0)
- 142 %95 = load i64, i64* %RBP.i, align 8
- 143 %96 = add i64 %95, -8
- 144 %97 = load i64, i64* %3, align 8
- 145 %98 = add i64 %97, 3
- 146 store i64 %98, i64* %3, align 8
- 147 %99 = inttoptr i64 %96 to i32*
- 148 %100 = load i32, i32* %99, align 4
- 149 %101 = zext i32 %100 to i64
- 150 store i64 %101, i64* %RCX.i40, align 8
- 151 %102 = add i64 %95, -20
- 152 %103 = load i32, i32* %EAX.i23, align 4
- 153 %104 = add i64 %97, 6
- 154 store i64 %104, i64* %3, align 8
- 155 %105 = inttoptr i64 %102 to i32*
- 156 store i32 %103, i32* %105, align 4
- 157 %ECX.i = bitcast %union.anon* %40 to i32*
- 158 %106 = load i32, i32* %ECX.i, align 4
- 159 %107 = zext i32 %106 to i64
- 160 %108 = load i64, i64* %3, align 8
- 161 store i64 %107, i64* %RAX.i36, align 8
- 162 %109 = load i64, i64* %6, align 8
- 163 %110 = add i64 %109, 48
- 164 store i64 %110, i64* %6, align 8
- 165 %111 = icmp ugt i64 %109, -49
- 166 %112 = zext i1 %111 to i8
- 167 store i8 %112, i8* %14, align 1
- 168 %113 = trunc i64 %110 to i32
- 169 %114 = and i32 %113, 255
- 170 %115 = tail call i32 @llvm.ctpop.i32(i32 %114)
- 171 %116 = trunc i32 %115 to i8
- 172 %117 = and i8 %116, 1
- 173 %118 = xor i8 %117, 1
- 174 store i8 %118, i8* %21, align 1
- 175 %119 = xor i64 %109, 16
- 176 %120 = xor i64 %119, %110
- 177 %121 = lshr i64 %120, 4
- 178 %122 = trunc i64 %121 to i8
- 179 %123 = and i8 %122, 1
- 180 store i8 %123, i8* %27, align 1
- 181 %124 = icmp eq i64 %110, 0
- 182 %125 = zext i1 %124 to i8
- 183 store i8 %125, i8* %30, align 1
- 184 %126 = lshr i64 %110, 63
- 185 %127 = trunc i64 %126 to i8
- 186 store i8 %127, i8* %33, align 1
- 187 %128 = lshr i64 %109, 63
- 188 %129 = xor i64 %126, %128
- 189 %130 = add nuw nsw i64 %129, %126
- 190 %131 = icmp eq i64 %130, 2
- 191 %132 = zext i1 %131 to i8
- 192 store i8 %132, i8* %39, align 1
- 193 %133 = add i64 %108, 7
- 194 store i64 %133, i64* %3, align 8
- 195 %134 = add i64 %109, 56
- 196 %135 = inttoptr i64 %110 to i64*
- 197 %136 = load i64, i64* %135, align 8
- 198 store i64 %136, i64* %RBP.i, align 8
- 199 store i64 %134, i64* %6, align 8
- 200 %137 = add i64 %108, 8
- 201 store i64 %137, i64* %3, align 8
- 202 %138 = inttoptr i64 %134 to i64*
- 203 %139 = load i64, i64* %138, align 8
- 204 store i64 %139, i64* %3, align 8
- 205 %140 = add i64 %109, 64
- 206 store i64 %140, i64* %6, align 8
- 207 ret %struct.Memory* %94
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b9042488>, {0: {0}, 1: {14}, 2: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 3: {16}, 4: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 5: {13}, 6: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 7: {137, 109, 144, 19, 118, 125}, 8: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 9: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 10: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 11: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 12: {24}, 13: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 14: {26}, 15: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 16: {28}, 17: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 18: {33, 168, 41, 171, 50, 178, 185, 30}, 19: {169, 31}, 20: {32, 170, 114, 142}, 21: {33, 168, 41, 171, 50, 178, 185, 30}, 22: {34, 172, 42, 179}, 23: {35, 173}, 24: {36}, 25: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 26: {38, 175}, 27: {176, 188, 54, 39}, 28: {40, 177}, 29: {33, 168, 41, 171, 50, 178, 185, 30}, 30: {34, 172, 42, 179}, 31: {43}, 32: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 33: {45, 181}, 34: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 35: {47}, 36: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 37: {184, 49, 187, 53}, 38: {33, 168, 41, 171, 50, 178, 185, 30}, 39: {51}, 40: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 41: {184, 49, 187, 53}, 42: {176, 188, 54, 39}, 43: {189, 55}, 44: {56, 190}, 45: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 46: {58}, 47: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 48: {12}, 49: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 50: {11}, 51: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 52: {10}, 53: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 54: {4}, 55: {8, 9, 69}, 56: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 57: {64}, 58: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 59: {66}, 60: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 61: {1}, 62: {8, 9, 69}, 63: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 64: {6}, 65: {2, 3, 5, 7, 76}, 66: {8, 9, 69}, 67: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 68: {90, 71}, 69: {72}, 70: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 71: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 72: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 73: {2, 3, 5, 7, 76}, 74: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 75: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 76: {193, 79}, 77: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 78: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 79: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 80: {200, 83, 85}, 81: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 82: {200, 83, 85}, 83: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 84: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 85: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 86: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 87: {90, 71}, 88: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 89: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 90: {93}, 91: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 92: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 93: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 94: {2, 3, 5, 7, 76}, 95: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 96: {98}, 97: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 98: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 99: {146, 101, 127}, 100: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 101: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 102: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 103: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 104: {106}, 105: {107}, 106: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 107: {137, 109, 144, 19, 118, 125}, 108: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 109: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 110: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 111: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 112: {32, 170, 114, 142}, 113: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 114: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 115: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 116: {137, 109, 144, 19, 118, 125}, 117: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 118: {120}, 119: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 120: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 121: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 122: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 123: {137, 109, 144, 19, 118, 125}, 124: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 125: {146, 101, 127}, 126: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 127: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 128: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 129: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 130: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 131: {2, 3, 5, 7, 76}, 132: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 133: {134}, 134: {135}, 135: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 136: {137, 109, 144, 19, 118, 125}, 137: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 138: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 139: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 140: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 141: {32, 170, 114, 142}, 142: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 143: {137, 109, 144, 19, 118, 125}, 144: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 145: {146, 101, 127}, 146: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 147: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 148: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 149: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 150: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 151: {152}, 152: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 153: {154}, 154: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 155: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 156: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 157: {2, 3, 5, 7, 76}, 158: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 159: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 160: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 161: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 162: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 163: {163}, 164: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 165: {165}, 166: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 167: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 168: {33, 168, 41, 171, 50, 178, 185, 30}, 169: {169, 31}, 170: {32, 170, 114, 142}, 171: {33, 168, 41, 171, 50, 178, 185, 30}, 172: {34, 172, 42, 179}, 173: {35, 173}, 174: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 175: {38, 175}, 176: {176, 188, 54, 39}, 177: {40, 177}, 178: {33, 168, 41, 171, 50, 178, 185, 30}, 179: {34, 172, 42, 179}, 180: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 181: {45, 181}, 182: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 183: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 184: {184, 49, 187, 53}, 185: {33, 168, 41, 171, 50, 178, 185, 30}, 186: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 187: {184, 49, 187, 53}, 188: {176, 188, 54, 39}, 189: {189, 55}, 190: {56, 190}, 191: {191, 131, 166, 46, 150, 182, 57, 27, 159}, 192: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 193: {193, 79}, 194: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 195: {195}, 196: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 197: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 198: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 199: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 200: {200, 83, 85}, 201: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 202: {129, 196, 103, 74, 138, 202, 110, 20, 148, 87, 122, 156, 95}, 203: {130, 136, 15, 143, 145, 18, 149, 22, 153, 158, 160, 162, 197, 203, 77, 78, 82, 84, 89, 91, 92, 97, 99, 100, 105, 108, 115, 117, 119, 124, 126}, 204: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 205: {205}, 206: {128, 132, 133, 139, 140, 141, 17, 147, 21, 23, 151, 25, 155, 29, 157, 161, 164, 37, 167, 44, 174, 48, 52, 180, 183, 186, 59, 60, 61, 62, 63, 192, 65, 194, 67, 68, 70, 198, 199, 73, 201, 75, 204, 206, 80, 81, 86, 88, 94, 96, 102, 104, 111, 112, 113, 116, 121, 123}, 207: {207}})
Equivalent! frozenset({116, 60}) {49, 114}
Equivalent! frozenset({193, 79}) {193, 76}
Equivalent! frozenset({80, 194}) {194, 77}
Equivalent! frozenset({200, 85}) {200, 82}
Equivalent! frozenset({201, 86}) {201, 83}
Equivalent! frozenset({145, 100, 126}) {144, 98, 124}
Equivalent! frozenset({146, 101, 127}) {145, 99, 125}
Equivalent! frozenset({128, 147, 102}) {146, 100, 126}
Equivalent! frozenset({136, 108}) {106, 135}
Equivalent! frozenset({137, 109}) {136, 107}
Equivalent! frozenset({112, 140}) {139, 110}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b9042488>, {0: {0}, 1: {14}, 2: {15}, 3: {16}, 4: {17}, 5: {13}, 6: {18}, 7: {19}, 8: {20}, 9: {21}, 10: {22}, 11: {23}, 12: {24}, 13: {25}, 14: {26}, 15: {27}, 16: {28}, 17: {29}, 18: {30}, 19: {31}, 20: {32}, 21: {33}, 22: {34}, 23: {35}, 24: {36}, 25: {37}, 26: {38}, 27: {39}, 28: {40}, 29: {41}, 30: {42}, 31: {43}, 32: {44}, 33: {45}, 34: {46}, 35: {47}, 36: {48}, 37: {49}, 38: {50}, 39: {51}, 40: {52}, 41: {53}, 42: {54}, 43: {55}, 44: {56}, 45: {57}, 46: {58}, 47: {59}, 48: {12}, 49: {116}, 50: {11}, 51: {132, 61}, 52: {10}, 53: {62}, 54: {4}, 55: {9}, 56: {63, 151}, 57: {64}, 58: {65}, 59: {66}, 60: {67}, 61: {1}, 62: {8}, 63: {161, 68}, 64: {6}, 65: {7}, 66: {69}, 67: {70}, 68: {71}, 69: {72}, 70: {73}, 71: {74}, 72: {75}, 73: {76}, 74: {77}, 75: {160, 78}, 76: {79}, 77: {194}, 78: {81}, 79: {82}, 80: {83}, 81: {160, 84}, 82: {85}, 83: {86}, 84: {87}, 85: {88}, 86: {89}, 87: {90}, 88: {91}, 89: {92}, 90: {93}, 91: {94}, 92: {95}, 93: {96}, 94: {3}, 95: {97}, 96: {98}, 97: {99}, 98: {100}, 99: {101}, 100: {147}, 101: {103}, 102: {104}, 103: {105}, 104: {106}, 105: {107}, 106: {136}, 107: {109}, 108: {110}, 109: {111}, 110: {140}, 111: {113}, 112: {114}, 113: {115}, 114: {60}, 115: {117}, 116: {118}, 117: {119}, 118: {120}, 119: {121}, 120: {122}, 121: {123}, 122: {124}, 123: {125}, 124: {126}, 125: {127}, 126: {102}, 127: {129}, 128: {130}, 129: {131}, 130: {132}, 131: {2}, 132: {133}, 133: {134}, 134: {135}, 135: {108}, 136: {137}, 137: {138}, 138: {139}, 139: {112}, 140: {141}, 141: {142}, 142: {143}, 143: {144}, 144: {145}, 145: {146}, 146: {128}, 147: {148}, 148: {149}, 149: {150}, 150: {151}, 151: {152}, 152: {153}, 153: {154}, 154: {155}, 155: {156}, 156: {157}, 157: {5}, 158: {158}, 159: {159}, 160: {160, 84, 78}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {80}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 getelementptr getelementptr
MORE 51 POT: 2
EXACT 52 getelementptr getelementptr
EXACT 53 store store
EXACT 54 getelementptr getelementptr
EXACT 55 getelementptr getelementptr
MORE 56 POT: 2
EXACT 57 getelementptr getelementptr
EXACT 58 store store
EXACT 59 getelementptr getelementptr
EXACT 60 store store
EXACT 61 getelementptr getelementptr
EXACT 62 getelementptr getelementptr
MORE 63 POT: 2
EXACT 64 getelementptr getelementptr
EXACT 65 bitcast bitcast
EXACT 66 getelementptr getelementptr
EXACT 67 store store
EXACT 68 add add
EXACT 69 add add
EXACT 70 store store
EXACT 71 inttoptr inttoptr
EXACT 72 store store
EXACT 73 bitcast bitcast
EXACT 74 load load
MORE 75 POT: 2
EXACT 76 add add
EXACT 77 store store
EXACT 78 store store
EXACT 79 load load
EXACT 80 add add
MORE 81 POT: 2
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 store store
EXACT 86 load load
EXACT 87 add add
EXACT 88 load load
EXACT 89 load load
EXACT 90 add add
EXACT 91 store store
EXACT 92 inttoptr inttoptr
EXACT 93 store store
EXACT 94 bitcast bitcast
EXACT 95 load load
EXACT 96 add add
EXACT 97 load load
EXACT 98 load load
EXACT 99 add add
EXACT 100 store store
EXACT 101 inttoptr inttoptr
EXACT 102 store store
EXACT 103 load load
EXACT 104 add add
EXACT 105 add add
EXACT 106 load load
EXACT 107 add add
EXACT 108 inttoptr inttoptr
EXACT 109 store store
EXACT 110 store store
EXACT 111 store store
EXACT 112 tail tail
EXACT 113 load load
EXACT 114 store store
EXACT 115 load load
EXACT 116 add add
EXACT 117 load load
EXACT 118 add add
EXACT 119 store store
EXACT 120 inttoptr inttoptr
EXACT 121 store store
EXACT 122 load load
EXACT 123 add add
EXACT 124 load load
EXACT 125 add add
EXACT 126 store store
EXACT 127 inttoptr inttoptr
EXACT 128 load load
EXACT 129 zext zext
EXACT 130 store store
EXACT 131 bitcast bitcast
EXACT 132 store store
EXACT 133 add add
EXACT 134 add add
EXACT 135 load load
EXACT 136 add add
EXACT 137 inttoptr inttoptr
EXACT 138 store store
EXACT 139 store store
EXACT 140 store store
EXACT 141 tail tail
EXACT 142 load load
EXACT 143 add add
EXACT 144 load load
EXACT 145 add add
EXACT 146 store store
EXACT 147 inttoptr inttoptr
EXACT 148 load load
EXACT 149 zext zext
EXACT 150 store store
EXACT 151 add add
EXACT 152 load load
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 store store
EXACT 157 bitcast bitcast
EXACT 158 load load
EXACT 159 zext zext
MORE 160 POT: 3
EXACT 161 store store
EXACT 162 load load
EXACT 163 add add
EXACT 164 store store
EXACT 165 icmp icmp
EXACT 166 zext zext
EXACT 167 store store
EXACT 168 trunc trunc
EXACT 169 and and
EXACT 170 tail tail
EXACT 171 trunc trunc
EXACT 172 and and
EXACT 173 xor xor
EXACT 174 store store
EXACT 175 xor xor
EXACT 176 xor xor
EXACT 177 lshr lshr
EXACT 178 trunc trunc
EXACT 179 and and
EXACT 180 store store
EXACT 181 icmp icmp
EXACT 182 zext zext
EXACT 183 store store
EXACT 184 lshr lshr
EXACT 185 trunc trunc
EXACT 186 store store
EXACT 187 lshr lshr
EXACT 188 xor xor
EXACT 189 add add
EXACT 190 icmp icmp
EXACT 191 zext zext
EXACT 192 store store
EXACT 193 add add
EXACT 194 store store
EXACT 195 add add
EXACT 196 inttoptr inttoptr
EXACT 197 load load
EXACT 198 store store
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 store store
EXACT 205 add add
EXACT 206 store store
EXACT 207 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
- 7 %R10D = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 11 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 12 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 13 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 14 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 15 %6 = load i64, i64* %RBP, align 8
- 16 %7 = add i64 %1, 1
- 17 store i64 %7, i64* %PC, align 8
- 18 %8 = load i64, i64* %RSP, align 8
- 19 %9 = add i64 %8, -8
- 20 %10 = inttoptr i64 %9 to i64*
- 21 store i64 %6, i64* %10, align 8
- 22 %11 = load i64, i64* %PC, align 8
- 23 store i64 %9, i64* %RBP, align 8
- 24 %12 = add i64 %8, -56
- 25 store i64 %12, i64* %RSP, align 8
- 26 %13 = icmp ult i64 %9, 48
- 27 %14 = zext i1 %13 to i8
- 28 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 29 store i8 %14, i8* %15, align 1
- 30 %16 = trunc i64 %12 to i32
- 31 %17 = and i32 %16, 255
- 32 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 33 %19 = trunc i32 %18 to i8
- 34 %20 = and i8 %19, 1
- 35 %21 = xor i8 %20, 1
- 36 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 37 store i8 %21, i8* %22, align 1
- 38 %23 = xor i64 %9, 16
- 39 %24 = xor i64 %23, %12
- 40 %25 = lshr i64 %24, 4
- 41 %26 = trunc i64 %25 to i8
- 42 %27 = and i8 %26, 1
- 43 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 44 store i8 %27, i8* %28, align 1
- 45 %29 = icmp eq i64 %12, 0
- 46 %30 = zext i1 %29 to i8
- 47 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 48 store i8 %30, i8* %31, align 1
- 49 %32 = lshr i64 %12, 63
- 50 %33 = trunc i64 %32 to i8
- 51 %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 52 store i8 %33, i8* %34, align 1
- 53 %35 = lshr i64 %9, 63
- 54 %36 = xor i64 %32, %35
- 55 %37 = add nuw nsw i64 %36, %35
- 56 %38 = icmp eq i64 %37, 2
- 57 %39 = zext i1 %38 to i8
- 58 %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 59 store i8 %39, i8* %40, align 1
- 60 store i64 10, i64* %RDI, align 8
- 61 store i64 20, i64* %RSI, align 8
- 62 store i64 30, i64* %RDX, align 8
- 63 store i64 40, i64* %RCX, align 8
- 64 %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
- 65 store i64 50, i64* %41, align 8
- 66 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
- 67 store i64 60, i64* %42, align 8
- 68 store i64 70, i64* %RAX, align 8
- 69 %43 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 70 store i64 80, i64* %43, align 8
- 71 %44 = add i64 %8, -12
- 72 %45 = add i64 %11, 57
- 73 store i64 %45, i64* %PC, align 8
- 74 %46 = inttoptr i64 %44 to i32*
- 75 store i32 0, i32* %46, align 4
- 76 %47 = bitcast i64* %RSP to i32**
- 77 %48 = load i32*, i32** %47, align 8
- 78 %49 = load i64, i64* %PC, align 8
- 79 %50 = add i64 %49, 7
- 80 store i64 %50, i64* %PC, align 8
- 81 store i32 70, i32* %48, align 4
- 82 %51 = load i64, i64* %RSP, align 8
- 83 %52 = add i64 %51, 8
- 84 %53 = load i64, i64* %PC, align 8
- 85 %54 = add i64 %53, 8
- 86 store i64 %54, i64* %PC, align 8
- 87 %55 = inttoptr i64 %52 to i32*
- 88 store i32 80, i32* %55, align 4
- 89 %56 = load i64, i64* %RBP, align 8
- 90 %57 = add i64 %56, -12
- 91 %58 = load i32, i32* %R10D, align 4
- 92 %59 = load i64, i64* %PC, align 8
- 93 %60 = add i64 %59, 4
- 94 store i64 %60, i64* %PC, align 8
- 95 %61 = inttoptr i64 %57 to i32*
- 96 store i32 %58, i32* %61, align 4
- 97 %62 = load i64, i64* %RBP, align 8
- 98 %63 = add i64 %62, -16
- 99 %64 = load i32, i32* %EAX, align 4
- 100 %65 = load i64, i64* %PC, align 8
- 101 %66 = add i64 %65, 3
- 102 store i64 %66, i64* %PC, align 8
- 103 %67 = inttoptr i64 %63 to i32*
- 104 store i32 %64, i32* %67, align 4
- 105 %68 = load i64, i64* %PC, align 8
- 106 %69 = add i64 %68, -192
- 107 %70 = add i64 %68, 5
- 108 %71 = load i64, i64* %RSP, align 8
- 109 %72 = add i64 %71, -8
- 110 %73 = inttoptr i64 %72 to i64*
- 111 store i64 %70, i64* %73, align 8
- 112 store i64 %72, i64* %RSP, align 8
- 113 store i64 %69, i64* %PC, align 8
- 114 %74 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %69, %struct.Memory* %2)
- 115 %75 = load i64, i64* %PC, align 8
- 116 store i64 add (i64 ptrtoint (%seg_400690__rodata_type* @seg_400690__rodata to i64), i64 4), i64* %RDI, align 8
- 117 %76 = load i64, i64* %RBP, align 8
- 118 %77 = add i64 %76, -8
- 119 %78 = load i32, i32* %EAX, align 4
- 120 %79 = add i64 %75, 13
- 121 store i64 %79, i64* %PC, align 8
- 122 %80 = inttoptr i64 %77 to i32*
- 123 store i32 %78, i32* %80, align 4
- 124 %81 = load i64, i64* %RBP, align 8
- 125 %82 = add i64 %81, -8
- 126 %83 = load i64, i64* %PC, align 8
- 127 %84 = add i64 %83, 3
- 128 store i64 %84, i64* %PC, align 8
- 129 %85 = inttoptr i64 %82 to i32*
- 130 %86 = load i32, i32* %85, align 4
- 131 %87 = zext i32 %86 to i64
- 132 store i64 %87, i64* %RSI, align 8
- 133 store i8 0, i8* %AL, align 1
- 134 %88 = add i64 %83, -466
- 135 %89 = add i64 %83, 10
- 136 %90 = load i64, i64* %RSP, align 8
- 137 %91 = add i64 %90, -8
- 138 %92 = inttoptr i64 %91 to i64*
- 139 store i64 %89, i64* %92, align 8
- 140 store i64 %91, i64* %RSP, align 8
- 141 store i64 %88, i64* %PC, align 8
- 142 %93 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %74)
- 143 %94 = load i64, i64* %RBP, align 8
- 144 %95 = add i64 %94, -8
- 145 %96 = load i64, i64* %PC, align 8
- 146 %97 = add i64 %96, 3
- 147 store i64 %97, i64* %PC, align 8
- 148 %98 = inttoptr i64 %95 to i32*
- 149 %99 = load i32, i32* %98, align 4
- 150 %100 = zext i32 %99 to i64
- 151 store i64 %100, i64* %RCX, align 8
- 152 %101 = add i64 %94, -20
- 153 %102 = load i32, i32* %EAX, align 4
- 154 %103 = add i64 %96, 6
- 155 store i64 %103, i64* %PC, align 8
- 156 %104 = inttoptr i64 %101 to i32*
- 157 store i32 %102, i32* %104, align 4
- 158 %105 = load i32, i32* %ECX, align 4
- 159 %106 = zext i32 %105 to i64
- 160 %107 = load i64, i64* %PC, align 8
- 161 store i64 %106, i64* %RAX, align 8
- 162 %108 = load i64, i64* %RSP, align 8
- 163 %109 = add i64 %108, 48
- 164 store i64 %109, i64* %RSP, align 8
- 165 %110 = icmp ugt i64 %108, -49
- 166 %111 = zext i1 %110 to i8
- 167 store i8 %111, i8* %15, align 1
- 168 %112 = trunc i64 %109 to i32
- 169 %113 = and i32 %112, 255
- 170 %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #12
- 171 %115 = trunc i32 %114 to i8
- 172 %116 = and i8 %115, 1
- 173 %117 = xor i8 %116, 1
- 174 store i8 %117, i8* %22, align 1
- 175 %118 = xor i64 %108, 16
- 176 %119 = xor i64 %118, %109
- 177 %120 = lshr i64 %119, 4
- 178 %121 = trunc i64 %120 to i8
- 179 %122 = and i8 %121, 1
- 180 store i8 %122, i8* %28, align 1
- 181 %123 = icmp eq i64 %109, 0
- 182 %124 = zext i1 %123 to i8
- 183 store i8 %124, i8* %31, align 1
- 184 %125 = lshr i64 %109, 63
- 185 %126 = trunc i64 %125 to i8
- 186 store i8 %126, i8* %34, align 1
- 187 %127 = lshr i64 %108, 63
- 188 %128 = xor i64 %125, %127
- 189 %129 = add nuw nsw i64 %128, %125
- 190 %130 = icmp eq i64 %129, 2
- 191 %131 = zext i1 %130 to i8
- 192 store i8 %131, i8* %40, align 1
- 193 %132 = add i64 %107, 7
- 194 store i64 %132, i64* %PC, align 8
- 195 %133 = add i64 %108, 56
- 196 %134 = inttoptr i64 %109 to i64*
- 197 %135 = load i64, i64* %134, align 8
- 198 store i64 %135, i64* %RBP, align 8
- 199 store i64 %133, i64* %RSP, align 8
- 200 %136 = add i64 %107, 8
- 201 store i64 %136, i64* %PC, align 8
- 202 %137 = inttoptr i64 %133 to i64*
- 203 %138 = load i64, i64* %137, align 8
- 204 store i64 %138, i64* %PC, align 8
- 205 %139 = add i64 %108, 64
- 206 store i64 %139, i64* %RSP, align 8
- 207 ret %struct.Memory* %93
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b9042620>, {0: {0}, 1: {61}, 2: {65, 131, 73, 157, 94}, 3: {65, 131, 73, 157, 94}, 4: {54}, 5: {65, 131, 73, 157, 94}, 6: {64}, 7: {65, 131, 73, 157, 94}, 8: {66, 62, 55}, 9: {66, 62, 55}, 10: {52}, 11: {50}, 12: {48}, 13: {5}, 14: {1}, 15: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 16: {3}, 17: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 18: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 19: {7, 136, 107, 143, 116, 123}, 20: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 21: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 22: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 23: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 24: {12}, 25: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 26: {14}, 27: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 28: {16}, 29: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 30: {38, 168, 171, 18, 178, 21, 185, 29}, 31: {169, 19}, 32: {112, 170, 20, 141}, 33: {38, 168, 171, 18, 178, 21, 185, 29}, 34: {179, 172, 22, 30}, 35: {173, 23}, 36: {24}, 37: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 38: {26, 175}, 39: {176, 42, 27, 188}, 40: {177, 28}, 41: {38, 168, 171, 18, 178, 21, 185, 29}, 42: {179, 172, 22, 30}, 43: {31}, 44: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 45: {33, 181}, 46: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 47: {35}, 48: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 49: {184, 41, 187, 37}, 50: {38, 168, 171, 18, 178, 21, 185, 29}, 51: {39}, 52: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 53: {184, 41, 187, 37}, 54: {176, 42, 27, 188}, 55: {43, 189}, 56: {44, 190}, 57: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 58: {46}, 59: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 60: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 61: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 62: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 63: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 64: {57}, 65: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 66: {59}, 67: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 68: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 69: {66, 62, 55}, 70: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 71: {68, 87}, 72: {69}, 73: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 74: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 75: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 76: {65, 131, 73, 157, 94}, 77: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 78: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 79: {193, 76}, 80: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 81: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 82: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 83: {80, 82, 200}, 84: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 85: {80, 82, 200}, 86: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 87: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 88: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 89: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 90: {68, 87}, 91: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 92: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 93: {90}, 94: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 95: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 96: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 97: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 98: {96}, 99: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 100: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 101: {145, 99, 125}, 102: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 103: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 104: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 105: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 106: {104}, 107: {105}, 108: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 109: {7, 136, 107, 143, 116, 123}, 110: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 111: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 112: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 113: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 114: {112, 170, 20, 141}, 115: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 116: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 117: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 118: {7, 136, 107, 143, 116, 123}, 119: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 120: {118}, 121: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 122: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 123: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 124: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 125: {7, 136, 107, 143, 116, 123}, 126: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 127: {145, 99, 125}, 128: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 129: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 130: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 131: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 132: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 133: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 134: {133}, 135: {134}, 136: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 137: {7, 136, 107, 143, 116, 123}, 138: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 139: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 140: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 141: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 142: {112, 170, 20, 141}, 143: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 144: {7, 136, 107, 143, 116, 123}, 145: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 146: {145, 99, 125}, 147: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 148: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 149: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 150: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 151: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 152: {151}, 153: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 154: {153}, 155: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 156: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 157: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 158: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 159: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 160: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 161: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 162: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 163: {163}, 164: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 165: {165}, 166: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 167: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 168: {38, 168, 171, 18, 178, 21, 185, 29}, 169: {169, 19}, 170: {112, 170, 20, 141}, 171: {38, 168, 171, 18, 178, 21, 185, 29}, 172: {179, 172, 22, 30}, 173: {173, 23}, 174: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 175: {26, 175}, 176: {176, 42, 27, 188}, 177: {177, 28}, 178: {38, 168, 171, 18, 178, 21, 185, 29}, 179: {179, 172, 22, 30}, 180: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 181: {33, 181}, 182: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 183: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 184: {184, 41, 187, 37}, 185: {38, 168, 171, 18, 178, 21, 185, 29}, 186: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 187: {184, 41, 187, 37}, 188: {176, 42, 27, 188}, 189: {43, 189}, 190: {44, 190}, 191: {129, 34, 191, 166, 45, 15, 149, 182, 159}, 192: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 193: {193, 76}, 194: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 195: {195}, 196: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 197: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 198: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 199: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 200: {80, 82, 200}, 201: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 202: {196, 101, 71, 8, 137, 202, 108, 147, 84, 120, 155, 92, 127}, 203: {128, 2, 6, 135, 10, 142, 144, 148, 152, 158, 160, 162, 197, 74, 75, 203, 79, 81, 86, 88, 89, 95, 97, 98, 103, 106, 113, 115, 117, 122, 124}, 204: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 205: {205}, 206: {130, 4, 132, 9, 138, 11, 139, 13, 140, 17, 146, 150, 25, 154, 156, 32, 161, 36, 164, 167, 40, 174, 47, 49, 51, 180, 53, 183, 56, 58, 186, 60, 63, 192, 194, 67, 70, 198, 72, 199, 201, 204, 77, 78, 206, 83, 85, 91, 93, 100, 102, 109, 110, 111, 114, 119, 121, 126}, 207: {207}})
Equivalent! frozenset({49, 114}) {116, 60}
Equivalent! frozenset({193, 76}) {193, 79}
Equivalent! frozenset({194, 77}) {80, 194}
Equivalent! frozenset({200, 82}) {200, 85}
Equivalent! frozenset({201, 83}) {201, 86}
Equivalent! frozenset({144, 98, 124}) {145, 100, 126}
Equivalent! frozenset({145, 99, 125}) {146, 101, 127}
Equivalent! frozenset({146, 100, 126}) {128, 147, 102}
Equivalent! frozenset({106, 135}) {136, 108}
Equivalent! frozenset({136, 107}) {137, 109}
Equivalent! frozenset({139, 110}) {112, 140}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b9042620>, {0: {0}, 1: {61}, 2: {131}, 3: {94}, 4: {54}, 5: {157}, 6: {64}, 7: {65}, 8: {62}, 9: {55}, 10: {52}, 11: {50}, 12: {48}, 13: {5}, 14: {1}, 15: {2}, 16: {3}, 17: {4}, 18: {6}, 19: {7}, 20: {8}, 21: {9}, 22: {10}, 23: {11}, 24: {12}, 25: {13}, 26: {14}, 27: {15}, 28: {16}, 29: {17}, 30: {18}, 31: {19}, 32: {20}, 33: {21}, 34: {22}, 35: {23}, 36: {24}, 37: {25}, 38: {26}, 39: {27}, 40: {28}, 41: {29}, 42: {30}, 43: {31}, 44: {32}, 45: {33}, 46: {34}, 47: {35}, 48: {36}, 49: {37}, 50: {38}, 51: {39}, 52: {40}, 53: {41}, 54: {42}, 55: {43}, 56: {44}, 57: {45}, 58: {46}, 59: {47}, 60: {114}, 61: {130, 51}, 62: {53}, 63: {56, 150}, 64: {57}, 65: {58}, 66: {59}, 67: {60}, 68: {161, 63}, 69: {66}, 70: {67}, 71: {68}, 72: {69}, 73: {70}, 74: {71}, 75: {72}, 76: {73}, 77: {74}, 78: {160, 75}, 79: {76}, 80: {194}, 81: {78}, 82: {79}, 83: {80}, 84: {160, 81}, 85: {82}, 86: {83}, 87: {84}, 88: {85}, 89: {86}, 90: {87}, 91: {88}, 92: {89}, 93: {90}, 94: {91}, 95: {92}, 96: {93}, 97: {95}, 98: {96}, 99: {97}, 100: {98}, 101: {99}, 102: {126}, 103: {101}, 104: {102}, 105: {103}, 106: {104}, 107: {105}, 108: {135}, 109: {107}, 110: {108}, 111: {109}, 112: {139}, 113: {111}, 114: {112}, 115: {113}, 116: {49}, 117: {115}, 118: {116}, 119: {117}, 120: {118}, 121: {119}, 122: {120}, 123: {121}, 124: {122}, 125: {123}, 126: {124}, 127: {125}, 128: {146}, 129: {127}, 130: {128}, 131: {129}, 132: {130}, 133: {132}, 134: {133}, 135: {134}, 136: {106}, 137: {136}, 138: {137}, 139: {138}, 140: {110}, 141: {140}, 142: {141}, 143: {142}, 144: {143}, 145: {144}, 146: {145}, 147: {100}, 148: {147}, 149: {148}, 150: {149}, 151: {150}, 152: {151}, 153: {152}, 154: {153}, 155: {154}, 156: {155}, 157: {156}, 158: {158}, 159: {159}, 160: {160, 81, 75}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}, 174: {174}, 175: {175}, 176: {176}, 177: {177}, 178: {178}, 179: {179}, 180: {180}, 181: {181}, 182: {182}, 183: {183}, 184: {184}, 185: {185}, 186: {186}, 187: {187}, 188: {188}, 189: {189}, 190: {190}, 191: {191}, 192: {192}, 193: {193}, 194: {77}, 195: {195}, 196: {196}, 197: {197}, 198: {198}, 199: {199}, 200: {200}, 201: {201}, 202: {202}, 203: {203}, 204: {204}, 205: {205}, 206: {206}, 207: {207}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 getelementptr getelementptr
EXACT 14 getelementptr getelementptr
EXACT 15 load load
EXACT 16 add add
EXACT 17 store store
EXACT 18 load load
EXACT 19 add add
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 load load
EXACT 23 store store
EXACT 24 add add
EXACT 25 store store
EXACT 26 icmp icmp
EXACT 27 zext zext
EXACT 28 getelementptr getelementptr
EXACT 29 store store
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 tail tail
EXACT 33 trunc trunc
EXACT 34 and and
EXACT 35 xor xor
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 xor xor
EXACT 39 xor xor
EXACT 40 lshr lshr
EXACT 41 trunc trunc
EXACT 42 and and
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 icmp icmp
EXACT 46 zext zext
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 trunc trunc
EXACT 51 getelementptr getelementptr
EXACT 52 store store
EXACT 53 lshr lshr
EXACT 54 xor xor
EXACT 55 add add
EXACT 56 icmp icmp
EXACT 57 zext zext
EXACT 58 getelementptr getelementptr
EXACT 59 store store
EXACT 60 store store
MORE 61 POT: 2
EXACT 62 store store
MORE 63 POT: 2
EXACT 64 getelementptr getelementptr
EXACT 65 store store
EXACT 66 getelementptr getelementptr
EXACT 67 store store
MORE 68 POT: 2
EXACT 69 getelementptr getelementptr
EXACT 70 store store
EXACT 71 add add
EXACT 72 add add
EXACT 73 store store
EXACT 74 inttoptr inttoptr
EXACT 75 store store
EXACT 76 bitcast bitcast
EXACT 77 load load
MORE 78 POT: 2
EXACT 79 add add
EXACT 80 store store
EXACT 81 store store
EXACT 82 load load
EXACT 83 add add
MORE 84 POT: 2
EXACT 85 add add
EXACT 86 store store
EXACT 87 inttoptr inttoptr
EXACT 88 store store
EXACT 89 load load
EXACT 90 add add
EXACT 91 load load
EXACT 92 load load
EXACT 93 add add
EXACT 94 store store
EXACT 95 inttoptr inttoptr
EXACT 96 store store
EXACT 97 load load
EXACT 98 add add
EXACT 99 load load
EXACT 100 load load
EXACT 101 add add
EXACT 102 store store
EXACT 103 inttoptr inttoptr
EXACT 104 store store
EXACT 105 load load
EXACT 106 add add
EXACT 107 add add
EXACT 108 load load
EXACT 109 add add
EXACT 110 inttoptr inttoptr
EXACT 111 store store
EXACT 112 store store
EXACT 113 store store
EXACT 114 tail tail
EXACT 115 load load
EXACT 116 store store
EXACT 117 load load
EXACT 118 add add
EXACT 119 load load
EXACT 120 add add
EXACT 121 store store
EXACT 122 inttoptr inttoptr
EXACT 123 store store
EXACT 124 load load
EXACT 125 add add
EXACT 126 load load
EXACT 127 add add
EXACT 128 store store
EXACT 129 inttoptr inttoptr
EXACT 130 load load
EXACT 131 zext zext
EXACT 132 store store
EXACT 133 store store
EXACT 134 add add
EXACT 135 add add
EXACT 136 load load
EXACT 137 add add
EXACT 138 inttoptr inttoptr
EXACT 139 store store
EXACT 140 store store
EXACT 141 store store
EXACT 142 tail tail
EXACT 143 load load
EXACT 144 add add
EXACT 145 load load
EXACT 146 add add
EXACT 147 store store
EXACT 148 inttoptr inttoptr
EXACT 149 load load
EXACT 150 zext zext
EXACT 151 store store
EXACT 152 add add
EXACT 153 load load
EXACT 154 add add
EXACT 155 store store
EXACT 156 inttoptr inttoptr
EXACT 157 store store
EXACT 158 load load
EXACT 159 zext zext
MORE 160 POT: 3
EXACT 161 store store
EXACT 162 load load
EXACT 163 add add
EXACT 164 store store
EXACT 165 icmp icmp
EXACT 166 zext zext
EXACT 167 store store
EXACT 168 trunc trunc
EXACT 169 and and
EXACT 170 tail tail
EXACT 171 trunc trunc
EXACT 172 and and
EXACT 173 xor xor
EXACT 174 store store
EXACT 175 xor xor
EXACT 176 xor xor
EXACT 177 lshr lshr
EXACT 178 trunc trunc
EXACT 179 and and
EXACT 180 store store
EXACT 181 icmp icmp
EXACT 182 zext zext
EXACT 183 store store
EXACT 184 lshr lshr
EXACT 185 trunc trunc
EXACT 186 store store
EXACT 187 lshr lshr
EXACT 188 xor xor
EXACT 189 add add
EXACT 190 icmp icmp
EXACT 191 zext zext
EXACT 192 store store
EXACT 193 add add
EXACT 194 store store
EXACT 195 add add
EXACT 196 inttoptr inttoptr
EXACT 197 load load
EXACT 198 store store
EXACT 199 store store
EXACT 200 add add
EXACT 201 store store
EXACT 202 inttoptr inttoptr
EXACT 203 load load
EXACT 204 store store
EXACT 205 add add
EXACT 206 store store
EXACT 207 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 48', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%RDI.i45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', 'store i64 10, i64* %RDI.i45, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', 'store i64 30, i64* %RDX.i, align 8', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', 'store i64 50, i64* %41, align 8', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0', 'store i64 60, i64* %42, align 8', '%44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0', '%R10D.i34 = bitcast %union.anon* %44 to i32*', '%45 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0', 'store i64 80, i64* %45, align 8', '%46 = add i64 %7, -12', '%47 = add i64 %10, 57', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %46 to i32*', 'store i32 0, i32* %48, align 4', '%49 = bitcast i64* %6 to i32**', '%50 = load i32*, i32** %49, align 8', '%52 = add i64 %51, 7', 'store i64 %52, i64* %3, align 8', 'store i32 70, i32* %50, align 4', '%53 = load i64, i64* %6, align 8', '%54 = add i64 %53, 8', '%56 = add i64 %55, 8', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i32*', 'store i32 80, i32* %57, align 4', '%58 = load i64, i64* %RBP.i, align 8', '%59 = add i64 %58, -12', '%60 = load i32, i32* %R10D.i34, align 4', '%61 = load i64, i64* %3, align 8', '%62 = add i64 %61, 4', 'store i64 %62, i64* %3, align 8', '%63 = inttoptr i64 %59 to i32*', 'store i32 %60, i32* %63, align 4', '%EAX.i23 = bitcast %union.anon* %43 to i32*', '%64 = load i64, i64* %RBP.i, align 8', '%65 = add i64 %64, -16', '%66 = load i32, i32* %EAX.i23, align 4', '%67 = load i64, i64* %3, align 8', '%68 = add i64 %67, 3', 'store i64 %68, i64* %3, align 8', '%69 = inttoptr i64 %65 to i32*', 'store i32 %66, i32* %69, align 4', '%70 = load i64, i64* %3, align 8', '%71 = add i64 %70, -192', '%72 = add i64 %70, 5', '%73 = load i64, i64* %6, align 8', '%74 = add i64 %73, -8', '%75 = inttoptr i64 %74 to i64*', 'store i64 %72, i64* %75, align 8', 'store i64 %74, i64* %6, align 8', 'store i64 %71, i64* %3, align 8', '%call2_4005e0 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %71, %struct.Memory* %2)', '%76 = load i64, i64* %3, align 8', 'store i64 ptrtoint (%G__0x400694_type* @G__0x400694 to i64), i64* %RDI.i45, align 8', '%77 = load i64, i64* %RBP.i, align 8', '%78 = add i64 %77, -8', '%79 = load i32, i32* %EAX.i23, align 4', '%80 = add i64 %76, 13', 'store i64 %80, i64* %3, align 8', '%81 = inttoptr i64 %78 to i32*', 'store i32 %79, i32* %81, align 4', '%82 = load i64, i64* %RBP.i, align 8', '%83 = add i64 %82, -8', '%84 = load i64, i64* %3, align 8', '%85 = add i64 %84, 3', 'store i64 %85, i64* %3, align 8', '%86 = inttoptr i64 %83 to i32*', '%87 = load i32, i32* %86, align 4', '%88 = zext i32 %87 to i64', 'store i64 %88, i64* %RSI.i43, align 8', '%AL.i = bitcast %union.anon* %43 to i8*', 'store i8 0, i8* %AL.i, align 1', '%89 = add i64 %84, -466', '%90 = add i64 %84, 10', '%91 = load i64, i64* %6, align 8', '%92 = add i64 %91, -8', '%93 = inttoptr i64 %92 to i64*', 'store i64 %90, i64* %93, align 8', 'store i64 %92, i64* %6, align 8', 'store i64 %89, i64* %3, align 8', '%94 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005e0)', '%95 = load i64, i64* %RBP.i, align 8', '%96 = add i64 %95, -8', '%97 = load i64, i64* %3, align 8', '%98 = add i64 %97, 3', 'store i64 %98, i64* %3, align 8', '%99 = inttoptr i64 %96 to i32*', '%100 = load i32, i32* %99, align 4', '%101 = zext i32 %100 to i64', 'store i64 %101, i64* %RCX.i40, align 8', '%102 = add i64 %95, -20', '%103 = load i32, i32* %EAX.i23, align 4', '%104 = add i64 %97, 6', 'store i64 %104, i64* %3, align 8', '%105 = inttoptr i64 %102 to i32*', 'store i32 %103, i32* %105, align 4', '%ECX.i = bitcast %union.anon* %40 to i32*', '%106 = load i32, i32* %ECX.i, align 4', '%107 = zext i32 %106 to i64', 'store i64 %107, i64* %RAX.i36, align 8', '%109 = load i64, i64* %6, align 8', '%110 = add i64 %109, 48', 'store i64 %110, i64* %6, align 8', '%111 = icmp ugt i64 %109, -49', '%112 = zext i1 %111 to i8', 'store i8 %112, i8* %14, align 1', '%113 = trunc i64 %110 to i32', '%114 = and i32 %113, 255', '%115 = tail call i32 @llvm.ctpop.i32(i32 %114)', '%116 = trunc i32 %115 to i8', '%117 = and i8 %116, 1', '%118 = xor i8 %117, 1', 'store i8 %118, i8* %21, align 1', '%119 = xor i64 %109, 16', '%120 = xor i64 %119, %110', '%121 = lshr i64 %120, 4', '%122 = trunc i64 %121 to i8', '%123 = and i8 %122, 1', 'store i8 %123, i8* %27, align 1', '%124 = icmp eq i64 %110, 0', '%125 = zext i1 %124 to i8', 'store i8 %125, i8* %30, align 1', '%126 = lshr i64 %110, 63', '%127 = trunc i64 %126 to i8', 'store i8 %127, i8* %33, align 1', '%128 = lshr i64 %109, 63', '%129 = xor i64 %126, %128', '%130 = add nuw nsw i64 %129, %126', '%131 = icmp eq i64 %130, 2', '%132 = zext i1 %131 to i8', 'store i8 %132, i8* %39, align 1', '%133 = add i64 %108, 7', 'store i64 %133, i64* %3, align 8', '%134 = add i64 %109, 56', '%135 = inttoptr i64 %110 to i64*', '%136 = load i64, i64* %135, align 8', 'store i64 %136, i64* %RBP.i, align 8', 'store i64 %134, i64* %6, align 8', '%137 = add i64 %108, 8', 'store i64 %137, i64* %3, align 8', '%138 = inttoptr i64 %134 to i64*', '%139 = load i64, i64* %138, align 8', 'store i64 %139, i64* %3, align 8', '%140 = add i64 %109, 64', 'store i64 %140, i64* %6, align 8', 'ret %struct.Memory* %94'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -56
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 48
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %RDI.i45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! store i64 10, i64* %RDI.i45, align 8
Keep: %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: store i64 20, i64* %RSI.i43, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! store i64 30, i64* %RDX.i, align 8
Keep: %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Keep: %RCX.i40 = getelementptr inbounds %union.anon, %union.anon* %40, i64 0, i32 0
Keep: store i64 40, i64* %RCX.i40, align 8
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! store i64 50, i64* %41, align 8
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
Found line to remove! store i64 60, i64* %42, align 8
Keep: %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %RAX.i36 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
Keep: store i64 70, i64* %RAX.i36, align 8
Found line to remove! %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
Found line to remove! %R10D.i34 = bitcast %union.anon* %44 to i32*
Found line to remove! %45 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
Found line to remove! store i64 80, i64* %45, align 8
Found line to remove! %46 = add i64 %7, -12
Found line to remove! %47 = add i64 %10, 57
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %46 to i32*
Found line to remove! store i32 0, i32* %48, align 4
Found line to remove! %49 = bitcast i64* %6 to i32**
Found line to remove! %50 = load i32*, i32** %49, align 8
Keep: %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 7
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! store i32 70, i32* %50, align 4
Found line to remove! %53 = load i64, i64* %6, align 8
Found line to remove! %54 = add i64 %53, 8
Keep: %55 = load i64, i64* %3, align 8
Found line to remove! %56 = add i64 %55, 8
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = inttoptr i64 %54 to i32*
Found line to remove! store i32 80, i32* %57, align 4
Found line to remove! %58 = load i64, i64* %RBP.i, align 8
Found line to remove! %59 = add i64 %58, -12
Found line to remove! %60 = load i32, i32* %R10D.i34, align 4
Found line to remove! %61 = load i64, i64* %3, align 8
Found line to remove! %62 = add i64 %61, 4
Found line to remove! store i64 %62, i64* %3, align 8
Found line to remove! %63 = inttoptr i64 %59 to i32*
Found line to remove! store i32 %60, i32* %63, align 4
Found line to remove! %EAX.i23 = bitcast %union.anon* %43 to i32*
Found line to remove! %64 = load i64, i64* %RBP.i, align 8
Found line to remove! %65 = add i64 %64, -16
Found line to remove! %66 = load i32, i32* %EAX.i23, align 4
Found line to remove! %67 = load i64, i64* %3, align 8
Found line to remove! %68 = add i64 %67, 3
Found line to remove! store i64 %68, i64* %3, align 8
Found line to remove! %69 = inttoptr i64 %65 to i32*
Found line to remove! store i32 %66, i32* %69, align 4
Found line to remove! %70 = load i64, i64* %3, align 8
Found line to remove! %71 = add i64 %70, -192
Found line to remove! %72 = add i64 %70, 5
Found line to remove! %73 = load i64, i64* %6, align 8
Found line to remove! %74 = add i64 %73, -8
Found line to remove! %75 = inttoptr i64 %74 to i64*
Found line to remove! store i64 %72, i64* %75, align 8
Found line to remove! store i64 %74, i64* %6, align 8
Found line to remove! store i64 %71, i64* %3, align 8
Found line to remove! %call2_4005e0 = tail call %struct.Memory* @sub_400520.foo(%struct.State* %0, i64 %71, %struct.Memory* %2)
Found line to remove! %76 = load i64, i64* %3, align 8
Found line to remove! store i64 ptrtoint (%G__0x400694_type* @G__0x400694 to i64), i64* %RDI.i45, align 8
Found line to remove! %77 = load i64, i64* %RBP.i, align 8
Found line to remove! %78 = add i64 %77, -8
Found line to remove! %79 = load i32, i32* %EAX.i23, align 4
Found line to remove! %80 = add i64 %76, 13
Found line to remove! store i64 %80, i64* %3, align 8
Found line to remove! %81 = inttoptr i64 %78 to i32*
Found line to remove! store i32 %79, i32* %81, align 4
Found line to remove! %82 = load i64, i64* %RBP.i, align 8
Found line to remove! %83 = add i64 %82, -8
Found line to remove! %84 = load i64, i64* %3, align 8
Found line to remove! %85 = add i64 %84, 3
Found line to remove! store i64 %85, i64* %3, align 8
Found line to remove! %86 = inttoptr i64 %83 to i32*
Found line to remove! %87 = load i32, i32* %86, align 4
Found line to remove! %88 = zext i32 %87 to i64
Found line to remove! store i64 %88, i64* %RSI.i43, align 8
Found line to remove! %AL.i = bitcast %union.anon* %43 to i8*
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %89 = add i64 %84, -466
Found line to remove! %90 = add i64 %84, 10
Found line to remove! %91 = load i64, i64* %6, align 8
Found line to remove! %92 = add i64 %91, -8
Found line to remove! %93 = inttoptr i64 %92 to i64*
Found line to remove! store i64 %90, i64* %93, align 8
Found line to remove! store i64 %92, i64* %6, align 8
Found line to remove! store i64 %89, i64* %3, align 8
Found line to remove! %94 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_4005e0)
Found line to remove! %95 = load i64, i64* %RBP.i, align 8
Found line to remove! %96 = add i64 %95, -8
Found line to remove! %97 = load i64, i64* %3, align 8
Found line to remove! %98 = add i64 %97, 3
Found line to remove! store i64 %98, i64* %3, align 8
Found line to remove! %99 = inttoptr i64 %96 to i32*
Found line to remove! %100 = load i32, i32* %99, align 4
Found line to remove! %101 = zext i32 %100 to i64
Found line to remove! store i64 %101, i64* %RCX.i40, align 8
Found line to remove! %102 = add i64 %95, -20
Found line to remove! %103 = load i32, i32* %EAX.i23, align 4
Found line to remove! %104 = add i64 %97, 6
Found line to remove! store i64 %104, i64* %3, align 8
Found line to remove! %105 = inttoptr i64 %102 to i32*
Found line to remove! store i32 %103, i32* %105, align 4
Found line to remove! %ECX.i = bitcast %union.anon* %40 to i32*
Found line to remove! %106 = load i32, i32* %ECX.i, align 4
Found line to remove! %107 = zext i32 %106 to i64
Keep: %108 = load i64, i64* %3, align 8
Found line to remove! store i64 %107, i64* %RAX.i36, align 8
Found line to remove! %109 = load i64, i64* %6, align 8
Found line to remove! %110 = add i64 %109, 48
Found line to remove! store i64 %110, i64* %6, align 8
Found line to remove! %111 = icmp ugt i64 %109, -49
Found line to remove! %112 = zext i1 %111 to i8
Found line to remove! store i8 %112, i8* %14, align 1
Found line to remove! %113 = trunc i64 %110 to i32
Found line to remove! %114 = and i32 %113, 255
Found line to remove! %115 = tail call i32 @llvm.ctpop.i32(i32 %114)
Found line to remove! %116 = trunc i32 %115 to i8
Found line to remove! %117 = and i8 %116, 1
Found line to remove! %118 = xor i8 %117, 1
Found line to remove! store i8 %118, i8* %21, align 1
Found line to remove! %119 = xor i64 %109, 16
Found line to remove! %120 = xor i64 %119, %110
Found line to remove! %121 = lshr i64 %120, 4
Found line to remove! %122 = trunc i64 %121 to i8
Found line to remove! %123 = and i8 %122, 1
Found line to remove! store i8 %123, i8* %27, align 1
Found line to remove! %124 = icmp eq i64 %110, 0
Found line to remove! %125 = zext i1 %124 to i8
Found line to remove! store i8 %125, i8* %30, align 1
Found line to remove! %126 = lshr i64 %110, 63
Found line to remove! %127 = trunc i64 %126 to i8
Found line to remove! store i8 %127, i8* %33, align 1
Found line to remove! %128 = lshr i64 %109, 63
Found line to remove! %129 = xor i64 %126, %128
Found line to remove! %130 = add nuw nsw i64 %129, %126
Found line to remove! %131 = icmp eq i64 %130, 2
Found line to remove! %132 = zext i1 %131 to i8
Found line to remove! store i8 %132, i8* %39, align 1
Found line to remove! %133 = add i64 %108, 7
Found line to remove! store i64 %133, i64* %3, align 8
Found line to remove! %134 = add i64 %109, 56
Found line to remove! %135 = inttoptr i64 %110 to i64*
Found line to remove! %136 = load i64, i64* %135, align 8
Found line to remove! store i64 %136, i64* %RBP.i, align 8
Found line to remove! store i64 %134, i64* %6, align 8
Found line to remove! %137 = add i64 %108, 8
Found line to remove! store i64 %137, i64* %3, align 8
Found line to remove! %138 = inttoptr i64 %134 to i64*
Found line to remove! %139 = load i64, i64* %138, align 8
Found line to remove! store i64 %139, i64* %3, align 8
Found line to remove! %140 = add i64 %109, 64
Found line to remove! store i64 %140, i64* %6, align 8
Found line to remove! ret %struct.Memory* %94
TO REMOVE: dict_keys(['%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ECX = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0', '%R10D = bitcast %union.anon* %5 to i32*', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -56', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 48', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, 16', '%24 = xor i64 %23, %12', '%25 = lshr i64 %24, 4', '%26 = trunc i64 %25 to i8', '%27 = and i8 %26, 1', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %27, i8* %28, align 1', '%29 = icmp eq i64 %12, 0', '%30 = zext i1 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %12, 63', '%33 = trunc i64 %32 to i8', '%34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %33, i8* %34, align 1', '%35 = lshr i64 %9, 63', '%36 = xor i64 %32, %35', '%37 = add nuw nsw i64 %36, %35', '%38 = icmp eq i64 %37, 2', '%39 = zext i1 %38 to i8', '%40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %39, i8* %40, align 1', 'store i64 10, i64* %RDI, align 8', 'store i64 30, i64* %RDX, align 8', '%41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0', 'store i64 50, i64* %41, align 8', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0', 'store i64 60, i64* %42, align 8', '%43 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', 'store i64 80, i64* %43, align 8', '%44 = add i64 %8, -12', '%45 = add i64 %11, 57', 'store i64 %45, i64* %PC, align 8', '%46 = inttoptr i64 %44 to i32*', 'store i32 0, i32* %46, align 4', '%47 = bitcast i64* %RSP to i32**', '%48 = load i32*, i32** %47, align 8', '%50 = add i64 %49, 7', 'store i64 %50, i64* %PC, align 8', 'store i32 70, i32* %48, align 4', '%51 = load i64, i64* %RSP, align 8', '%52 = add i64 %51, 8', '%54 = add i64 %53, 8', 'store i64 %54, i64* %PC, align 8', '%55 = inttoptr i64 %52 to i32*', 'store i32 80, i32* %55, align 4', '%56 = load i64, i64* %RBP, align 8', '%57 = add i64 %56, -12', '%58 = load i32, i32* %R10D, align 4', '%59 = load i64, i64* %PC, align 8', '%60 = add i64 %59, 4', 'store i64 %60, i64* %PC, align 8', '%61 = inttoptr i64 %57 to i32*', 'store i32 %58, i32* %61, align 4', '%62 = load i64, i64* %RBP, align 8', '%63 = add i64 %62, -16', '%64 = load i32, i32* %EAX, align 4', '%65 = load i64, i64* %PC, align 8', '%66 = add i64 %65, 3', 'store i64 %66, i64* %PC, align 8', '%67 = inttoptr i64 %63 to i32*', 'store i32 %64, i32* %67, align 4', '%68 = load i64, i64* %PC, align 8', '%69 = add i64 %68, -192', '%70 = add i64 %68, 5', '%71 = load i64, i64* %RSP, align 8', '%72 = add i64 %71, -8', '%73 = inttoptr i64 %72 to i64*', 'store i64 %70, i64* %73, align 8', 'store i64 %72, i64* %RSP, align 8', 'store i64 %69, i64* %PC, align 8', '%74 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %69, %struct.Memory* %2)', '%75 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_400690__rodata_type* @seg_400690__rodata to i64), i64 4), i64* %RDI, align 8', '%76 = load i64, i64* %RBP, align 8', '%77 = add i64 %76, -8', '%78 = load i32, i32* %EAX, align 4', '%79 = add i64 %75, 13', 'store i64 %79, i64* %PC, align 8', '%80 = inttoptr i64 %77 to i32*', 'store i32 %78, i32* %80, align 4', '%81 = load i64, i64* %RBP, align 8', '%82 = add i64 %81, -8', '%83 = load i64, i64* %PC, align 8', '%84 = add i64 %83, 3', 'store i64 %84, i64* %PC, align 8', '%85 = inttoptr i64 %82 to i32*', '%86 = load i32, i32* %85, align 4', '%87 = zext i32 %86 to i64', 'store i64 %87, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%88 = add i64 %83, -466', '%89 = add i64 %83, 10', '%90 = load i64, i64* %RSP, align 8', '%91 = add i64 %90, -8', '%92 = inttoptr i64 %91 to i64*', 'store i64 %89, i64* %92, align 8', 'store i64 %91, i64* %RSP, align 8', 'store i64 %88, i64* %PC, align 8', '%93 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %74)', '%94 = load i64, i64* %RBP, align 8', '%95 = add i64 %94, -8', '%96 = load i64, i64* %PC, align 8', '%97 = add i64 %96, 3', 'store i64 %97, i64* %PC, align 8', '%98 = inttoptr i64 %95 to i32*', '%99 = load i32, i32* %98, align 4', '%100 = zext i32 %99 to i64', 'store i64 %100, i64* %RCX, align 8', '%101 = add i64 %94, -20', '%102 = load i32, i32* %EAX, align 4', '%103 = add i64 %96, 6', 'store i64 %103, i64* %PC, align 8', '%104 = inttoptr i64 %101 to i32*', 'store i32 %102, i32* %104, align 4', '%105 = load i32, i32* %ECX, align 4', '%106 = zext i32 %105 to i64', 'store i64 %106, i64* %RAX, align 8', '%108 = load i64, i64* %RSP, align 8', '%109 = add i64 %108, 48', 'store i64 %109, i64* %RSP, align 8', '%110 = icmp ugt i64 %108, -49', '%111 = zext i1 %110 to i8', 'store i8 %111, i8* %15, align 1', '%112 = trunc i64 %109 to i32', '%113 = and i32 %112, 255', '%114 = tail call i32 @llvm.ctpop.i32(i32 %113) #12', '%115 = trunc i32 %114 to i8', '%116 = and i8 %115, 1', '%117 = xor i8 %116, 1', 'store i8 %117, i8* %22, align 1', '%118 = xor i64 %108, 16', '%119 = xor i64 %118, %109', '%120 = lshr i64 %119, 4', '%121 = trunc i64 %120 to i8', '%122 = and i8 %121, 1', 'store i8 %122, i8* %28, align 1', '%123 = icmp eq i64 %109, 0', '%124 = zext i1 %123 to i8', 'store i8 %124, i8* %31, align 1', '%125 = lshr i64 %109, 63', '%126 = trunc i64 %125 to i8', 'store i8 %126, i8* %34, align 1', '%127 = lshr i64 %108, 63', '%128 = xor i64 %125, %127', '%129 = add nuw nsw i64 %128, %125', '%130 = icmp eq i64 %129, 2', '%131 = zext i1 %130 to i8', 'store i8 %131, i8* %40, align 1', '%132 = add i64 %107, 7', 'store i64 %132, i64* %PC, align 8', '%133 = add i64 %108, 56', '%134 = inttoptr i64 %109 to i64*', '%135 = load i64, i64* %134, align 8', 'store i64 %135, i64* %RBP, align 8', 'store i64 %133, i64* %RSP, align 8', '%136 = add i64 %107, 8', 'store i64 %136, i64* %PC, align 8', '%137 = inttoptr i64 %133 to i64*', '%138 = load i64, i64* %137, align 8', 'store i64 %138, i64* %PC, align 8', '%139 = add i64 %108, 64', 'store i64 %139, i64* %RSP, align 8', 'ret %struct.Memory* %93'])
Keep: block_400590:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
Found line to remove! %R10D = bitcast %union.anon* %5 to i32*
Keep: %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Keep: %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -56
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 48
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, 16
Found line to remove! %24 = xor i64 %23, %12
Found line to remove! %25 = lshr i64 %24, 4
Found line to remove! %26 = trunc i64 %25 to i8
Found line to remove! %27 = and i8 %26, 1
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = icmp eq i64 %12, 0
Found line to remove! %30 = zext i1 %29 to i8
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %30, i8* %31, align 1
Found line to remove! %32 = lshr i64 %12, 63
Found line to remove! %33 = trunc i64 %32 to i8
Found line to remove! %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %33, i8* %34, align 1
Found line to remove! %35 = lshr i64 %9, 63
Found line to remove! %36 = xor i64 %32, %35
Found line to remove! %37 = add nuw nsw i64 %36, %35
Found line to remove! %38 = icmp eq i64 %37, 2
Found line to remove! %39 = zext i1 %38 to i8
Found line to remove! %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %39, i8* %40, align 1
Found line to remove! store i64 10, i64* %RDI, align 8
Keep: store i64 20, i64* %RSI, align 8
Found line to remove! store i64 30, i64* %RDX, align 8
Keep: store i64 40, i64* %RCX, align 8
Found line to remove! %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
Found line to remove! store i64 50, i64* %41, align 8
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
Found line to remove! store i64 60, i64* %42, align 8
Keep: store i64 70, i64* %RAX, align 8
Found line to remove! %43 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! store i64 80, i64* %43, align 8
Found line to remove! %44 = add i64 %8, -12
Found line to remove! %45 = add i64 %11, 57
Found line to remove! store i64 %45, i64* %PC, align 8
Found line to remove! %46 = inttoptr i64 %44 to i32*
Found line to remove! store i32 0, i32* %46, align 4
Found line to remove! %47 = bitcast i64* %RSP to i32**
Found line to remove! %48 = load i32*, i32** %47, align 8
Keep: %49 = load i64, i64* %PC, align 8
Found line to remove! %50 = add i64 %49, 7
Found line to remove! store i64 %50, i64* %PC, align 8
Found line to remove! store i32 70, i32* %48, align 4
Found line to remove! %51 = load i64, i64* %RSP, align 8
Found line to remove! %52 = add i64 %51, 8
Keep: %53 = load i64, i64* %PC, align 8
Found line to remove! %54 = add i64 %53, 8
Found line to remove! store i64 %54, i64* %PC, align 8
Found line to remove! %55 = inttoptr i64 %52 to i32*
Found line to remove! store i32 80, i32* %55, align 4
Found line to remove! %56 = load i64, i64* %RBP, align 8
Found line to remove! %57 = add i64 %56, -12
Found line to remove! %58 = load i32, i32* %R10D, align 4
Found line to remove! %59 = load i64, i64* %PC, align 8
Found line to remove! %60 = add i64 %59, 4
Found line to remove! store i64 %60, i64* %PC, align 8
Found line to remove! %61 = inttoptr i64 %57 to i32*
Found line to remove! store i32 %58, i32* %61, align 4
Found line to remove! %62 = load i64, i64* %RBP, align 8
Found line to remove! %63 = add i64 %62, -16
Found line to remove! %64 = load i32, i32* %EAX, align 4
Found line to remove! %65 = load i64, i64* %PC, align 8
Found line to remove! %66 = add i64 %65, 3
Found line to remove! store i64 %66, i64* %PC, align 8
Found line to remove! %67 = inttoptr i64 %63 to i32*
Found line to remove! store i32 %64, i32* %67, align 4
Found line to remove! %68 = load i64, i64* %PC, align 8
Found line to remove! %69 = add i64 %68, -192
Found line to remove! %70 = add i64 %68, 5
Found line to remove! %71 = load i64, i64* %RSP, align 8
Found line to remove! %72 = add i64 %71, -8
Found line to remove! %73 = inttoptr i64 %72 to i64*
Found line to remove! store i64 %70, i64* %73, align 8
Found line to remove! store i64 %72, i64* %RSP, align 8
Found line to remove! store i64 %69, i64* %PC, align 8
Found line to remove! %74 = tail call %struct.Memory* @sub_400520_foo_renamed_(%struct.State* nonnull %0, i64 %69, %struct.Memory* %2)
Found line to remove! %75 = load i64, i64* %PC, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_400690__rodata_type* @seg_400690__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %76 = load i64, i64* %RBP, align 8
Found line to remove! %77 = add i64 %76, -8
Found line to remove! %78 = load i32, i32* %EAX, align 4
Found line to remove! %79 = add i64 %75, 13
Found line to remove! store i64 %79, i64* %PC, align 8
Found line to remove! %80 = inttoptr i64 %77 to i32*
Found line to remove! store i32 %78, i32* %80, align 4
Found line to remove! %81 = load i64, i64* %RBP, align 8
Found line to remove! %82 = add i64 %81, -8
Found line to remove! %83 = load i64, i64* %PC, align 8
Found line to remove! %84 = add i64 %83, 3
Found line to remove! store i64 %84, i64* %PC, align 8
Found line to remove! %85 = inttoptr i64 %82 to i32*
Found line to remove! %86 = load i32, i32* %85, align 4
Found line to remove! %87 = zext i32 %86 to i64
Found line to remove! store i64 %87, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %88 = add i64 %83, -466
Found line to remove! %89 = add i64 %83, 10
Found line to remove!Writing '/tmp/tmpzywmz1uh.dot'...
Writing '/tmp/tmpzywmz1uh.dot':Done

Reading LLVM: /tmp/tmp3tknuyc7-query.ll
Extracting function [main] from /tmp/tmp3tknuyc7-query.ll
Dot file generated!
Writing '/tmp/tmp9qq9txqr.dot'...
Writing '/tmp/tmp9qq9txqr.dot':Done

Reading LLVM: /tmp/tmplg7vv2g4-target.ll
Extracting function [main] from /tmp/tmplg7vv2g4-target.ll
Dot file generated!
 %90 = load i64, i64* %RSP, align 8
Found line to remove! %91 = add i64 %90, -8
Found line to remove! %92 = inttoptr i64 %91 to i64*
Found line to remove! store i64 %89, i64* %92, align 8
Found line to remove! store i64 %91, i64* %RSP, align 8
Found line to remove! store i64 %88, i64* %PC, align 8
Found line to remove! %93 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %74)
Found line to remove! %94 = load i64, i64* %RBP, align 8
Found line to remove! %95 = add i64 %94, -8
Found line to remove! %96 = load i64, i64* %PC, align 8
Found line to remove! %97 = add i64 %96, 3
Found line to remove! store i64 %97, i64* %PC, align 8
Found line to remove! %98 = inttoptr i64 %95 to i32*
Found line to remove! %99 = load i32, i32* %98, align 4
Found line to remove! %100 = zext i32 %99 to i64
Found line to remove! store i64 %100, i64* %RCX, align 8
Found line to remove! %101 = add i64 %94, -20
Found line to remove! %102 = load i32, i32* %EAX, align 4
Found line to remove! %103 = add i64 %96, 6
Found line to remove! store i64 %103, i64* %PC, align 8
Found line to remove! %104 = inttoptr i64 %101 to i32*
Found line to remove! store i32 %102, i32* %104, align 4
Found line to remove! %105 = load i32, i32* %ECX, align 4
Found line to remove! %106 = zext i32 %105 to i64
Keep: %107 = load i64, i64* %PC, align 8
Found line to remove! store i64 %106, i64* %RAX, align 8
Found line to remove! %108 = load i64, i64* %RSP, align 8
Found line to remove! %109 = add i64 %108, 48
Found line to remove! store i64 %109, i64* %RSP, align 8
Found line to remove! %110 = icmp ugt i64 %108, -49
Found line to remove! %111 = zext i1 %110 to i8
Found line to remove! store i8 %111, i8* %15, align 1
Found line to remove! %112 = trunc i64 %109 to i32
Found line to remove! %113 = and i32 %112, 255
Found line to remove! %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #12
Found line to remove! %115 = trunc i32 %114 to i8
Found line to remove! %116 = and i8 %115, 1
Found line to remove! %117 = xor i8 %116, 1
Found line to remove! store i8 %117, i8* %22, align 1
Found line to remove! %118 = xor i64 %108, 16
Found line to remove! %119 = xor i64 %118, %109
Found line to remove! %120 = lshr i64 %119, 4
Found line to remove! %121 = trunc i64 %120 to i8
Found line to remove! %122 = and i8 %121, 1
Found line to remove! store i8 %122, i8* %28, align 1
Found line to remove! %123 = icmp eq i64 %109, 0
Found line to remove! %124 = zext i1 %123 to i8
Found line to remove! store i8 %124, i8* %31, align 1
Found line to remove! %125 = lshr i64 %109, 63
Found line to remove! %126 = trunc i64 %125 to i8
Found line to remove! store i8 %126, i8* %34, align 1
Found line to remove! %127 = lshr i64 %108, 63
Found line to remove! %128 = xor i64 %125, %127
Found line to remove! %129 = add nuw nsw i64 %128, %125
Found line to remove! %130 = icmp eq i64 %129, 2
Found line to remove! %131 = zext i1 %130 to i8
Found line to remove! store i8 %131, i8* %40, align 1
Found line to remove! %132 = add i64 %107, 7
Found line to remove! store i64 %132, i64* %PC, align 8
Found line to remove! %133 = add i64 %108, 56
Found line to remove! %134 = inttoptr i64 %109 to i64*
Found line to remove! %135 = load i64, i64* %134, align 8
Found line to remove! store i64 %135, i64* %RBP, align 8
Found line to remove! store i64 %133, i64* %RSP, align 8
Found line to remove! %136 = add i64 %107, 8
Found line to remove! store i64 %136, i64* %PC, align 8
Found line to remove! %137 = inttoptr i64 %133 to i64*
Found line to remove! %138 = load i64, i64* %137, align 8
Found line to remove! store i64 %138, i64* %PC, align 8
Found line to remove! %139 = add i64 %108, 64
Found line to remove! store i64 %139, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %93
================ Starting round 2
MAPPING:
- 0 %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 1 store i64 20, i64* %RSI.i43, align 8
- 2 %RCX.i40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 3 store i64 40, i64* %RCX.i40, align 8
- 4 %RAX.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 5 store i64 70, i64* %RAX.i36, align 8
- 6 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b8b85378>, {0: {2}, 1: {3, 4, 5}, 2: {1}, 3: {3, 4, 5}, 4: {0}, 5: {3, 4, 5}, 6: {6}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b8b85378>, {0: {2}, 1: {3}, 2: {1}, 3: {4}, 4: {0}, 5: {5}, 6: {6}})
EXACT 0 getelementptr getelementptr
EXACT 1 store store
EXACT 2 getelementptr getelementptr
EXACT 3 store store
EXACT 4 getelementptr getelementptr
EXACT 5 store store
EXACT 6 ret ret
================ Starting round 3
MAPPING:
- 0 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 1 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 2 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 3 store i64 20, i64* %RSI, align 8
- 4 store i64 40, i64* %RCX, align 8
- 5 store i64 70, i64* %RAX, align 8
- 6 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b8c34d08>, {0: {4}, 1: {2}, 2: {0}, 3: {1, 3, 5}, 4: {1, 3, 5}, 5: {1, 3, 5}, 6: {6}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f37b8c34d08>, {0: {4}, 1: {2}, 2: {0}, 3: {1}, 4: {3}, 5: {5}, 6: {6}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 store store
EXACT 4 store store
EXACT 5 store store
EXACT 6 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 20, i64* %RSI.i43, align 8', '%RCX.i40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', 'store i64 40, i64* %RCX.i40, align 8', '%RAX.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', 'store i64 70, i64* %RAX.i36, align 8', 'ret %struct.Memory* %2'])
Keep: entry:
Found line to remove! %RSI.i43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 20, i64* %RSI.i43, align 8
Found line to remove! %RCX.i40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! store i64 40, i64* %RCX.i40, align 8
Found line to remove! %RAX.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! store i64 70, i64* %RAX.i36, align 8
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 20, i64* %RSI, align 8', 'store i64 40, i64* %RCX, align 8', 'store i64 70, i64* %RAX, align 8', 'ret %struct.Memory* %2'])
Keep: block_400590:
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! store i64 20, i64* %RSI, align 8
Found line to remove! store i64 40, i64* %RCX, align 8
Found line to remove! store i64 70, i64* %RAX, align 8
Found line to remove! ret %struct.Memory* %2
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_2/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_2/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
