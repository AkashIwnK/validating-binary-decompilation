Matching sub_400550_doWork Vs doWork


[Info] Retrieve Potential Matches...
[0x558788a954f0]: %struct.State* %0 {
	[0x558788aaf9f0]:%struct.State.1* %0
	}

[0x558788a95530]: i64 %1 {
	[0x558788b21c90]:i64 %1
	}

[0x558788a95570]: %struct.Memory* %2 {
	[0x558788ab0fb0]:%struct.Memory.32* %2
	}

[0x558788a95770]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x558788b0c380]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x558788a95860]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x558788b0fdf0]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x558788a95950]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x558788b101b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x558788a95a40]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x558788b10340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x558788a95af0]:   %4 = add i64 %1, 1 {
	[0x558788b15020]:  %5 = add i64 %1, 1
	}

[0x558788a95bc0]:   store i64 %4, i64* %PC, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a95c28]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a95ca0]:   %6 = add i64 %5, -8 {
	[0x558788a854e0]:  %8 = add i64 %7, -8
	[0x558788b21b70]:  %47 = add i64 %46, -8
	}

[0x558788a95d08]:   %7 = inttoptr i64 %6 to i64* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a95d80]:   store i64 %3, i64* %7, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a95de8]:   %8 = load i64, i64* %PC, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a95ef0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a95fb0]:   %9 = add i64 %5, -24 {
	[0x558788aac850]:  %11 = add i64 %7, -24
	}

[0x558788a96030]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a960b0]:   %10 = icmp ult i64 %6, 16 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788a96118]:   %11 = zext i1 %10 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a961c0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x558788bf6b50]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x558788a96250]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a962b8]:   %13 = trunc i64 %9 to i32 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788a96330]:   %14 = and i32 %13, 255 {
	[0x558788ab1ff0]:  %61 = and i32 %60, 255
	[0x558788b1b940]:  %16 = and i32 %15, 255
	}

[0x558788a963f0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x558788aac610]:  %call2_40055f = tail call %struct.Memory.32* @sub_400540.checkFn(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x558788af4a10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x558788b37e10]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x558788a96468]:   %16 = trunc i32 %15 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788a964e0]:   %17 = and i8 %16, 1 {
	[0x558788aae200]:  %26 = and i8 %25, 1
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	[0x558788ab3110]:  %70 = and i8 %69, 1
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788a96560]:   %18 = xor i8 %17, 1 {
	[0x558788aacbe0]:  %20 = xor i8 %19, 1
	[0x558788ab1c60]:  %65 = xor i8 %64, 1
	}

[0x558788a96610]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x558788b55e80]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x558788a966a0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a96720]:   %20 = xor i64 %6, 16 {
	[0x558788aae8b0]:  %22 = xor i64 %8, 16
	[0x558788ab19b0]:  %66 = xor i64 %56, 16
	}

[0x558788a967a0]:   %21 = xor i64 %20, %9 {
	[0x558788aae750]:  %23 = xor i64 %22, %11
	[0x558788ab1860]:  %67 = xor i64 %66, %57
	[0x558788ab4bb0]:  %76 = xor i64 %73, %75
	[0x558788b21730]:  %35 = xor i64 %31, %34
	}

[0x558788a96820]:   %22 = lshr i64 %21, 4 {
	[0x558788ab34e0]:  %68 = lshr i64 %67, 4
	[0x558788b210d0]:  %24 = lshr i64 %23, 4
	}

[0x558788a96888]:   %23 = trunc i64 %22 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788a96900]:   %24 = and i8 %23, 1 {
	[0x558788aae200]:  %26 = and i8 %25, 1
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	[0x558788ab3110]:  %70 = and i8 %69, 1
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788a969b0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x558788ab15e0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x558788a96a40]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a96ac0]:   %26 = icmp eq i64 %9, 0 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788a96b28]:   %27 = zext i1 %26 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a96bd0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x558788ab1370]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x558788a96c60]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a96ce0]:   %29 = lshr i64 %9, 63 {
	[0x558788aaf940]:  %34 = lshr i64 %8, 63
	[0x558788ab2a70]:  %75 = lshr i64 %56, 63
	[0x558788ab2c90]:  %73 = lshr i64 %57, 63
	[0x558788b21950]:  %31 = lshr i64 %11, 63
	}

[0x558788a96d48]:   %30 = trunc i64 %29 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788a96df0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x558788aafe60]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x558788a96e80]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a96f00]:   %32 = lshr i64 %6, 63 {
	[0x558788aaf940]:  %34 = lshr i64 %8, 63
	[0x558788ab2a70]:  %75 = lshr i64 %56, 63
	[0x558788ab2c90]:  %73 = lshr i64 %57, 63
	[0x558788b21950]:  %31 = lshr i64 %11, 63
	}

[0x558788a96f80]:   %33 = xor i64 %29, %32 {
	[0x558788aae750]:  %23 = xor i64 %22, %11
	[0x558788ab1860]:  %67 = xor i64 %66, %57
	[0x558788ab4bb0]:  %76 = xor i64 %73, %75
	[0x558788b21730]:  %35 = xor i64 %31, %34
	}

[0x558788a97000]:   %34 = add nuw nsw i64 %33, %32 {
	[0x558788ab7a00]:  %77 = add nuw nsw i64 %76, %73
	[0x558788b20420]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558788a97080]:   %35 = icmp eq i64 %34, 2 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788a970e8]:   %36 = zext i1 %35 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a97190]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x558788aaccf0]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x558788a97220]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a972a0]:   %38 = add i64 %5, -12 {
	[0x558788aafbf0]:  %40 = add i64 %7, -12
	}

[0x558788a97320]:   %39 = add i64 %8, 14 {
	[0x558788ab0540]:  %41 = add i64 %10, 14
	}

[0x558788a973a0]:   store i64 %39, i64* %PC, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a97408]:   %40 = inttoptr i64 %38 to i32* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a97480]:   store i32 2, i32* %40, align 4 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a974e8]:   %41 = load i64, i64* %PC, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a975a0]:   %42 = add i64 %41, -31 {
	[0x558788ab03e0]:  %44 = add i64 %43, -31
	}

[0x558788a97620]:   %43 = add i64 %41, 5 {
	[0x558788ab0280]:  %45 = add i64 %43, 5
	}

[0x558788a97688]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a97700]:   %45 = add i64 %44, -8 {
	[0x558788a854e0]:  %8 = add i64 %7, -8
	[0x558788b21b70]:  %47 = add i64 %46, -8
	}

[0x558788a97768]:   %46 = inttoptr i64 %45 to i64* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a977e0]:   store i64 %43, i64* %46, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a97860]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a978e0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a97a70]:   %47 = tail call %struct.Memory* @sub_400540_checkFn(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x558788aac610]:  %call2_40055f = tail call %struct.Memory.32* @sub_400540.checkFn(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x558788af4a10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x558788b37e10]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x558788a97b38]:   %48 = load i64, i64* %RBP, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a97bf0]:   %49 = add i64 %48, -4 {
	[0x558788ab0d60]:  %50 = add i64 %49, -4
	}

[0x558788a97c58]:   %50 = load i64, i64* %PC, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a97cd0]:   %51 = add i64 %50, 3 {
	[0x558788ab0c00]:  %52 = add i64 %51, 3
	}

[0x558788a97d50]:   store i64 %51, i64* %PC, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a97db8]:   %52 = inttoptr i64 %49 to i32* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a97e18]:   %53 = load i32, i32* %52, align 4 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a97e78]:   %54 = zext i32 %53 to i64 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a97ef0]:   store i64 %54, i64* %RAX, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a98f90]:   store i8 %64, i8* %19, align 1, !tbaa !1279 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99010]:   %65 = xor i64 %55, 16 {
	[0x558788aae8b0]:  %22 = xor i64 %8, 16
	[0x558788ab19b0]:  %66 = xor i64 %56, 16
	}

[0x558788a99090]:   %66 = xor i64 %65, %56 {
	[0x558788aae750]:  %23 = xor i64 %22, %11
	[0x558788ab1860]:  %67 = xor i64 %66, %57
	[0x558788ab4bb0]:  %76 = xor i64 %73, %75
	[0x558788b21730]:  %35 = xor i64 %31, %34
	}

[0x558788a99110]:   %67 = lshr i64 %66, 4 {
	[0x558788ab34e0]:  %68 = lshr i64 %67, 4
	[0x558788b210d0]:  %24 = lshr i64 %23, 4
	}

[0x558788a99178]:   %68 = trunc i64 %67 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788a991f0]:   %69 = and i8 %68, 1 {
	[0x558788aae200]:  %26 = and i8 %25, 1
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	[0x558788ab3110]:  %70 = and i8 %69, 1
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788a99270]:   store i8 %69, i8* %25, align 1, !tbaa !1280 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a992f0]:   %70 = icmp eq i64 %56, 0 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788a99358]:   %71 = zext i1 %70 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a993d0]:   store i8 %71, i8* %28, align 1, !tbaa !1281 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99450]:   %72 = lshr i64 %56, 63 {
	[0x558788aaf940]:  %34 = lshr i64 %8, 63
	[0x558788ab2a70]:  %75 = lshr i64 %56, 63
	[0x558788ab2c90]:  %73 = lshr i64 %57, 63
	[0x558788b21950]:  %31 = lshr i64 %11, 63
	}

[0x558788a994b8]:   %73 = trunc i64 %72 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788a99530]:   store i8 %73, i8* %31, align 1, !tbaa !1282 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a995b0]:   %74 = lshr i64 %55, 63 {
	[0x558788aaf940]:  %34 = lshr i64 %8, 63
	[0x558788ab2a70]:  %75 = lshr i64 %56, 63
	[0x558788ab2c90]:  %73 = lshr i64 %57, 63
	[0x558788b21950]:  %31 = lshr i64 %11, 63
	}

[0x558788a99630]:   %75 = xor i64 %72, %74 {
	[0x558788aae750]:  %23 = xor i64 %22, %11
	[0x558788ab1860]:  %67 = xor i64 %66, %57
	[0x558788ab4bb0]:  %76 = xor i64 %73, %75
	[0x558788b21730]:  %35 = xor i64 %31, %34
	}

[0x558788a996b0]:   %76 = add nuw nsw i64 %75, %72 {
	[0x558788ab7a00]:  %77 = add nuw nsw i64 %76, %73
	[0x558788b20420]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558788a99730]:   %77 = icmp eq i64 %76, 2 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788a99798]:   %78 = zext i1 %77 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a99810]:   store i8 %78, i8* %37, align 1, !tbaa !1283 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99890]:   %79 = add i64 %50, 8 {
	[0x558788ab75e0]:  %80 = add i64 %51, 8
	}

[0x558788a99910]:   store i64 %79, i64* %PC, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a999d0]:   %80 = add i64 %55, 24 {
	[0x558788ab5370]:  %81 = add i64 %56, 24
	}

[0x558788a99a38]:   %81 = inttoptr i64 %56 to i64* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a99a98]:   %82 = load i64, i64* %81, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a99b10]:   store i64 %82, i64* %RBP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99b90]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99c10]:   %83 = add i64 %50, 9 {
	[0x558788aaf450]:  %84 = add i64 %51, 9
	}

[0x558788a99c90]:   store i64 %83, i64* %PC, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99cf8]:   %84 = inttoptr i64 %80 to i64* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a99d58]:   %85 = load i64, i64* %84, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a99dd0]:   store i64 %85, i64* %PC, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99e50]:   %86 = add i64 %55, 32 {
	[0x558788aaf000]:  %87 = add i64 %56, 32
	}

[0x558788a99ed0]:   store i64 %86, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a99f38]:   ret %struct.Memory* %47 {
	[0x558788b26988]:  ret %struct.Memory.32* %call2_40055f
	}

[0x558788adcc88]:   %3 = load i64, i64* %RBP, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788ae3b28]:   %55 = load i64, i64* %RSP, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788b44100]:   %56 = add i64 %55, 16 {
	[0x558788ab07f0]:  %57 = add i64 %56, 16
	}

[0x558788b44180]:   store i64 %56, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788b44240]:   %57 = icmp ugt i64 %55, -17 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788b442a8]:   %58 = zext i1 %57 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788b44320]:   store i8 %58, i8* %12, align 1, !tbaa !1265 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788b44388]:   %59 = trunc i64 %56 to i32 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788b44400]:   %60 = and i32 %59, 255 {
	[0x558788ab1ff0]:  %61 = and i32 %60, 255
	[0x558788b1b940]:  %16 = and i32 %15, 255
	}

[0x558788b444a0]:   %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9 {
	[0x558788aac610]:  %call2_40055f = tail call %struct.Memory.32* @sub_400540.checkFn(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	[0x558788af4a10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x558788b37e10]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x558788b44568]:   %62 = trunc i32 %61 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788b445e0]:   %63 = and i8 %62, 1 {
	[0x558788aae200]:  %26 = and i8 %25, 1
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	[0x558788ab3110]:  %70 = and i8 %69, 1
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788b44660]:   %64 = xor i8 %63, 1 {
	[0x558788aacbe0]:  %20 = xor i8 %19, 1
	[0x558788ab1c60]:  %65 = xor i8 %64, 1
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x558788b22fd8]:   %49 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x558788adcc88]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x558788a95d80]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x558788a862f0]:   store i64 %4, i64* %9, align 8
[0x558788aac330]:   store i64 %11, i64* %6, align 8
[0x558788aac9a0]:   store i64 %8, i64* %RBP.i, align 8
[0x558788aaef20]:   store i64 %87, i64* %6, align 8
[0x558788aaf1e0]:   store i64 %86, i64* %3, align 8
[0x558788aaf330]:   store i64 %84, i64* %3, align 8
[0x558788aafaa0]:   store i8 %32, i8* %33, align 1
[0x558788aafd50]:   store i64 %45, i64* %48, align 8
[0x558788ab0690]:   store i64 %57, i64* %6, align 8
[0x558788ab0940]:   store i64 %52, i64* %3, align 8
[0x558788ab0f00]:   store i64 %44, i64* %3, align 8
[0x558788ab1b10]:   store i8 %65, i8* %21, align 1
[0x558788ab21f0]:   store i8 %59, i8* %14, align 1
[0x558788ab2b80]:   store i8 %74, i8* %33, align 1
[0x558788ab2ef0]:   store i64 %83, i64* %RBP.i, align 8
[0x558788ab45e0]:   store i8 %72, i8* %30, align 1
[0x558788ab4830]:   store i8 %70, i8* %27, align 1
[0x558788ab5b30]:   store i64 %80, i64* %3, align 8
[0x558788ab7740]:   store i8 %79, i8* %39, align 1
[0x558788ab7be0]:   store i64 %81, i64* %6, align 8
[0x558788b15f10]:   store i64 %5, i64* %3, align 8
[0x558788b1e230]:   store i8 %13, i8* %14, align 1
[0x558788b20220]:   store i8 %38, i8* %39, align 1
[0x558788b20fc0]:   store i8 %26, i8* %27, align 1
[0x558788b21400]:   store i8 %20, i8* %21, align 1
[0x558788b21510]:   store i8 %29, i8* %30, align 1
[0x558788b21d90]:   store i32 2, i32* %42, align 4
[0x558788b21ea0]:   store i64 %41, i64* %3, align 8
[0x558788b21fb0]:   store i64 %47, i64* %6, align 8
[0x558788b221d0]:   store i64 %55, i64* %RAX.i, align 8


Adj: [0x558788ab0d60]:   %50 = add i64 %49, -4


Removing: [0x558788b235c8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x558788a95c28]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x558788a972a0]:   %38 = add i64 %5, -12


Uprime Matches: [0x558788aafbf0]:   %40 = add i64 %7, -12


Adj: [0x558788b21b70]:   %47 = add i64 %46, -8


Removing: [0x558788b26008]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x558788a95c28]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x558788a972a0]:   %38 = add i64 %5, -12


Uprime Matches: [0x558788aafbf0]:   %40 = add i64 %7, -12


Adj: [0x558788aaf000]:   %87 = add i64 %56, 32
[0x558788ab07f0]:   %57 = add i64 %56, 16
[0x558788ab19b0]:   %66 = xor i64 %56, 16
[0x558788ab2a70]:   %75 = lshr i64 %56, 63
[0x558788ab5370]:   %81 = add i64 %56, 24
[0x558788b22100]:   %58 = icmp ugt i64 %56, -17


Removing: [0x558788b228f8]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x558788a95de8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x558788a97320]:   %39 = add i64 %8, 14


Uprime Matches: [0x558788ab0540]:   %41 = add i64 %10, 14


Adj: [0x558788aaf450]:   %84 = add i64 %51, 9
[0x558788ab0c00]:   %52 = add i64 %51, 3
[0x558788ab75e0]:   %80 = add i64 %51, 8


Removing: [0x558788b23a88]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x558788a95de8]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x558788a97320]:   %39 = add i64 %8, 14


Uprime Matches: [0x558788ab0540]:   %41 = add i64 %10, 14


Adj: [0x558788ab0280]:   %45 = add i64 %43, 5
[0x558788ab03e0]:   %44 = add i64 %43, -31


Removing: [0x558788b1c038]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788aafaa0]:   store i8 %32, i8* %33, align 1


Removing: [0x558788b1f228]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788b1b940]:   %16 = and i32 %15, 255


Removing: [0x558788b23ce8]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab2b80]:   store i8 %74, i8* %33, align 1


Removing: [0x558788b24d88]:   %60 = trunc i64 %57 to i32
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab1ff0]:   %61 = and i32 %60, 255


Removing: [0x558788aae200]:   %26 = and i8 %25, 1
From the pot matches of: [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime : [0x558788a96560]:   %18 = xor i8 %17, 1


Uprime Matches: [0x558788aacbe0]:   %20 = xor i8 %19, 1
[0x558788ab1c60]:   %65 = xor i8 %64, 1


Adj: [0x558788b20fc0]:   store i8 %26, i8* %27, align 1


Removing: [0x558788ab3110]:   %70 = and i8 %69, 1
From the pot matches of: [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime : [0x558788a96560]:   %18 = xor i8 %17, 1


Uprime Matches: [0x558788aacbe0]:   %20 = xor i8 %19, 1
[0x558788ab1c60]:   %65 = xor i8 %64, 1


Adj: [0x558788ab4830]:   store i8 %70, i8* %27, align 1


Removing: [0x558788b228f8]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x558788a974e8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x558788a97620]:   %43 = add i64 %41, 5


Uprime Matches: [0x558788ab0280]:   %45 = add i64 %43, 5


Adj: [0x558788aaf450]:   %84 = add i64 %51, 9
[0x558788ab0c00]:   %52 = add i64 %51, 3
[0x558788ab75e0]:   %80 = add i64 %51, 8


Removing: [0x558788b37c58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x558788a974e8]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x558788a97620]:   %43 = add i64 %41, 5


Uprime Matches: [0x558788ab0280]:   %45 = add i64 %43, 5


Adj: [0x558788ab0540]:   %41 = add i64 %10, 14


Removing: [0x558788b26008]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x558788a97688]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x558788a97700]:   %45 = add i64 %44, -8


Uprime Matches: [0x558788a854e0]:   %8 = add i64 %7, -8
[0x558788b21b70]:   %47 = add i64 %46, -8


Adj: [0x558788aaf000]:   %87 = add i64 %56, 32
[0x558788ab07f0]:   %57 = add i64 %56, 16
[0x558788ab19b0]:   %66 = xor i64 %56, 16
[0x558788ab2a70]:   %75 = lshr i64 %56, 63
[0x558788ab5370]:   %81 = add i64 %56, 24
[0x558788b22100]:   %58 = icmp ugt i64 %56, -17


Removing: [0x558788a854e0]:   %8 = add i64 %7, -8
From the pot matches of: [0x558788a97700]:   %45 = add i64 %44, -8


Uprime : [0x558788a97860]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x558788aac330]:   store i64 %11, i64* %6, align 8
[0x558788aaef20]:   store i64 %87, i64* %6, align 8
[0x558788ab0690]:   store i64 %57, i64* %6, align 8
[0x558788ab7be0]:   store i64 %81, i64* %6, align 8
[0x558788b21fb0]:   store i64 %47, i64* %6, align 8


Adj: [0x558788aac9a0]:   store i64 %8, i64* %RBP.i, align 8
[0x558788aae8b0]:   %22 = xor i64 %8, 16
[0x558788aaf940]:   %34 = lshr i64 %8, 63
[0x558788b0cf58]:   %9 = inttoptr i64 %8 to i64*
[0x558788b1fe10]:   %12 = icmp ult i64 %8, 16


Removing: [0x558788b0cbd8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x558788a97b38]:   %48 = load i64, i64* %RBP, align 8


Uprime : [0x558788a97bf0]:   %49 = add i64 %48, -4


Uprime Matches: [0x558788ab0d60]:   %50 = add i64 %49, -4


Adj: [0x558788a862f0]:   store i64 %4, i64* %9, align 8


Removing: [0x558788b23a88]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x558788a97c58]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x558788a99c10]:   %83 = add i64 %50, 9


Uprime Matches: [0x558788aaf450]:   %84 = add i64 %51, 9


Adj: [0x558788ab0280]:   %45 = add i64 %43, 5
[0x558788ab03e0]:   %44 = add i64 %43, -31


Removing: [0x558788b37c58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x558788a97c58]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x558788a99c10]:   %83 = add i64 %50, 9


Uprime Matches: [0x558788aaf450]:   %84 = add i64 %51, 9


Adj: [0x558788ab0540]:   %41 = add i64 %10, 14


Removing: [0x558788b0cd68]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x558788ae3b28]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x558788a99e50]:   %86 = add i64 %55, 32


Uprime Matches: [0x558788aaf000]:   %87 = add i64 %56, 32


Adj: [0x558788a854e0]:   %8 = add i64 %7, -8
[0x558788aac850]:   %11 = add i64 %7, -24
[0x558788aafbf0]:   %40 = add i64 %7, -12


Removing: [0x558788b235c8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x558788ae3b28]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x558788a99e50]:   %86 = add i64 %55, 32


Uprime Matches: [0x558788aaf000]:   %87 = add i64 %56, 32


Adj: [0x558788b21b70]:   %47 = add i64 %46, -8


Removing: [0x558788b1c038]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788aafaa0]:   store i8 %32, i8* %33, align 1


Removing: [0x558788b1f228]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788b1b940]:   %16 = and i32 %15, 255


Removing: [0x558788b23ce8]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab2b80]:   store i8 %74, i8* %33, align 1


Removing: [0x558788b24d88]:   %60 = trunc i64 %57 to i32
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788aae200]:   %26 = and i8 %25, 1
[0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788ab3110]:   %70 = and i8 %69, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab1ff0]:   %61 = and i32 %60, 255


Removing: [0x558788aae200]:   %26 = and i8 %25, 1
From the pot matches of: [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime : [0x558788b44660]:   %64 = xor i8 %63, 1


Uprime Matches: [0x558788aacbe0]:   %20 = xor i8 %19, 1
[0x558788ab1c60]:   %65 = xor i8 %64, 1


Adj: [0x558788b20fc0]:   store i8 %26, i8* %27, align 1


Removing: [0x558788ab3110]:   %70 = and i8 %69, 1
From the pot matches of: [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime : [0x558788b44660]:   %64 = xor i8 %63, 1


Uprime Matches: [0x558788aacbe0]:   %20 = xor i8 %19, 1
[0x558788ab1c60]:   %65 = xor i8 %64, 1


Adj: [0x558788ab4830]:   store i8 %70, i8* %27, align 1

Round: 1

Removing: [0x558788b1e138]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788aae200]:   %26 = and i8 %25, 1


Removing: [0x558788b249f8]:   %69 = trunc i64 %68 to i8
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab3110]:   %70 = and i8 %69, 1


Removing: [0x558788b0cd68]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x558788a97688]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x558788a97700]:   %45 = add i64 %44, -8


Uprime Matches: [0x558788b21b70]:   %47 = add i64 %46, -8


Adj: [0x558788a854e0]:   %8 = add i64 %7, -8
[0x558788aac850]:   %11 = add i64 %7, -24
[0x558788aafbf0]:   %40 = add i64 %7, -12


Removing: [0x558788b1e138]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788aae200]:   %26 = and i8 %25, 1


Removing: [0x558788b249f8]:   %69 = trunc i64 %68 to i8
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788ab1dc0]:   %64 = and i8 %63, 1
[0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab3110]:   %70 = and i8 %69, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x558788a954f0]: %struct.State* %0 {
	[0x558788aaf9f0]:%struct.State.1* %0
	}

[0x558788a95530]: i64 %1 {
	[0x558788b21c90]:i64 %1
	}

[0x558788a95570]: %struct.Memory* %2 {
	[0x558788ab0fb0]:%struct.Memory.32* %2
	}

[0x558788a95770]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x558788b0c380]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x558788a95860]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x558788b0fdf0]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x558788a95950]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x558788b101b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x558788a95a40]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x558788b10340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x558788a95af0]:   %4 = add i64 %1, 1 {
	[0x558788b15020]:  %5 = add i64 %1, 1
	}

[0x558788a95bc0]:   store i64 %4, i64* %PC, align 8 {
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	}

[0x558788a95c28]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	}

[0x558788a95ca0]:   %6 = add i64 %5, -8 {
	[0x558788a854e0]:  %8 = add i64 %7, -8
	}

[0x558788a95d08]:   %7 = inttoptr i64 %6 to i64* {
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	}

[0x558788a95d80]:   store i64 %3, i64* %7, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	}

[0x558788a95de8]:   %8 = load i64, i64* %PC, align 8 {
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a95ef0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x558788a95fb0]:   %9 = add i64 %5, -24 {
	[0x558788aac850]:  %11 = add i64 %7, -24
	}

[0x558788a96030]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	}

[0x558788a960b0]:   %10 = icmp ult i64 %6, 16 {
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	}

[0x558788a96118]:   %11 = zext i1 %10 to i8 {
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	}

[0x558788a961c0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x558788bf6b50]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x558788a96250]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	}

[0x558788a962b8]:   %13 = trunc i64 %9 to i32 {
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	}

[0x558788a96330]:   %14 = and i32 %13, 255 {
	[0x558788b1b940]:  %16 = and i32 %15, 255
	}

[0x558788a963f0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x558788af4a10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x558788a96468]:   %16 = trunc i32 %15 to i8 {
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	}

[0x558788a964e0]:   %17 = and i8 %16, 1 {
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788a96560]:   %18 = xor i8 %17, 1 {
	[0x558788aacbe0]:  %20 = xor i8 %19, 1
	[0x558788ab1c60]:  %65 = xor i8 %64, 1
	}

[0x558788a96610]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x558788b55e80]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x558788a966a0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	}

[0x558788a96720]:   %20 = xor i64 %6, 16 {
	[0x558788aae8b0]:  %22 = xor i64 %8, 16
	}

[0x558788a967a0]:   %21 = xor i64 %20, %9 {
	[0x558788aae750]:  %23 = xor i64 %22, %11
	}

[0x558788a96820]:   %22 = lshr i64 %21, 4 {
	[0x558788b210d0]:  %24 = lshr i64 %23, 4
	}

[0x558788a96888]:   %23 = trunc i64 %22 to i8 {
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	}

[0x558788a96900]:   %24 = and i8 %23, 1 {
	[0x558788aae200]:  %26 = and i8 %25, 1
	}

[0x558788a969b0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x558788ab15e0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x558788a96a40]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	}

[0x558788a96ac0]:   %26 = icmp eq i64 %9, 0 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	}

[0x558788a96b28]:   %27 = zext i1 %26 to i8 {
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	}

[0x558788a96bd0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x558788ab1370]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x558788a96c60]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	}

[0x558788a96ce0]:   %29 = lshr i64 %9, 63 {
	[0x558788b21950]:  %31 = lshr i64 %11, 63
	}

[0x558788a96d48]:   %30 = trunc i64 %29 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	}

[0x558788a96df0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x558788aafe60]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x558788a96e80]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	}

[0x558788a96f00]:   %32 = lshr i64 %6, 63 {
	[0x558788aaf940]:  %34 = lshr i64 %8, 63
	}

[0x558788a96f80]:   %33 = xor i64 %29, %32 {
	[0x558788b21730]:  %35 = xor i64 %31, %34
	}

[0x558788a97000]:   %34 = add nuw nsw i64 %33, %32 {
	[0x558788b20420]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558788a97080]:   %35 = icmp eq i64 %34, 2 {
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	}

[0x558788a970e8]:   %36 = zext i1 %35 to i8 {
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a97190]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x558788aaccf0]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x558788a97220]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	}

[0x558788a972a0]:   %38 = add i64 %5, -12 {
	[0x558788aafbf0]:  %40 = add i64 %7, -12
	}

[0x558788a97320]:   %39 = add i64 %8, 14 {
	[0x558788ab0540]:  %41 = add i64 %10, 14
	}

[0x558788a973a0]:   store i64 %39, i64* %PC, align 8 {
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	}

[0x558788a97408]:   %40 = inttoptr i64 %38 to i32* {
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a97480]:   store i32 2, i32* %40, align 4 {
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	}

[0x558788a974e8]:   %41 = load i64, i64* %PC, align 8 {
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	}

[0x558788a975a0]:   %42 = add i64 %41, -31 {
	[0x558788ab03e0]:  %44 = add i64 %43, -31
	}

[0x558788a97620]:   %43 = add i64 %41, 5 {
	[0x558788ab0280]:  %45 = add i64 %43, 5
	}

[0x558788a97688]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	}

[0x558788a97700]:   %45 = add i64 %44, -8 {
	[0x558788b21b70]:  %47 = add i64 %46, -8
	}

[0x558788a97768]:   %46 = inttoptr i64 %45 to i64* {
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	}

[0x558788a977e0]:   store i64 %43, i64* %46, align 8 {
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	}

[0x558788a97860]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	}

[0x558788a978e0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	}

[0x558788a97a70]:   %47 = tail call %struct.Memory* @sub_400540_checkFn(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x558788aac610]:  %call2_40055f = tail call %struct.Memory.32* @sub_400540.checkFn(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x558788a97b38]:   %48 = load i64, i64* %RBP, align 8 {
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	}

[0x558788a97bf0]:   %49 = add i64 %48, -4 {
	[0x558788ab0d60]:  %50 = add i64 %49, -4
	}

[0x558788a97c58]:   %50 = load i64, i64* %PC, align 8 {
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	}

[0x558788a97cd0]:   %51 = add i64 %50, 3 {
	[0x558788ab0c00]:  %52 = add i64 %51, 3
	}

[0x558788a97d50]:   store i64 %51, i64* %PC, align 8 {
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	}

[0x558788a97db8]:   %52 = inttoptr i64 %49 to i32* {
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	}

[0x558788a97e18]:   %53 = load i32, i32* %52, align 4 {
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	}

[0x558788a97e78]:   %54 = zext i32 %53 to i64 {
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	}

[0x558788a97ef0]:   store i64 %54, i64* %RAX, align 8, !tbaa !1261 {
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a98f90]:   store i8 %64, i8* %19, align 1, !tbaa !1279 {
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	}

[0x558788a99010]:   %65 = xor i64 %55, 16 {
	[0x558788ab19b0]:  %66 = xor i64 %56, 16
	}

[0x558788a99090]:   %66 = xor i64 %65, %56 {
	[0x558788ab1860]:  %67 = xor i64 %66, %57
	}

[0x558788a99110]:   %67 = lshr i64 %66, 4 {
	[0x558788ab34e0]:  %68 = lshr i64 %67, 4
	}

[0x558788a99178]:   %68 = trunc i64 %67 to i8 {
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	}

[0x558788a991f0]:   %69 = and i8 %68, 1 {
	[0x558788ab3110]:  %70 = and i8 %69, 1
	}

[0x558788a99270]:   store i8 %69, i8* %25, align 1, !tbaa !1280 {
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	}

[0x558788a992f0]:   %70 = icmp eq i64 %56, 0 {
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	}

[0x558788a99358]:   %71 = zext i1 %70 to i8 {
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	}

[0x558788a993d0]:   store i8 %71, i8* %28, align 1, !tbaa !1281 {
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	}

[0x558788a99450]:   %72 = lshr i64 %56, 63 {
	[0x558788ab2c90]:  %73 = lshr i64 %57, 63
	}

[0x558788a994b8]:   %73 = trunc i64 %72 to i8 {
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	}

[0x558788a99530]:   store i8 %73, i8* %31, align 1, !tbaa !1282 {
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	}

[0x558788a995b0]:   %74 = lshr i64 %55, 63 {
	[0x558788ab2a70]:  %75 = lshr i64 %56, 63
	}

[0x558788a99630]:   %75 = xor i64 %72, %74 {
	[0x558788ab4bb0]:  %76 = xor i64 %73, %75
	}

[0x558788a996b0]:   %76 = add nuw nsw i64 %75, %72 {
	[0x558788ab7a00]:  %77 = add nuw nsw i64 %76, %73
	}

[0x558788a99730]:   %77 = icmp eq i64 %76, 2 {
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	}

[0x558788a99798]:   %78 = zext i1 %77 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	}

[0x558788a99810]:   store i8 %78, i8* %37, align 1, !tbaa !1283 {
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	}

[0x558788a99890]:   %79 = add i64 %50, 8 {
	[0x558788ab75e0]:  %80 = add i64 %51, 8
	}

[0x558788a99910]:   store i64 %79, i64* %PC, align 8 {
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	}

[0x558788a999d0]:   %80 = add i64 %55, 24 {
	[0x558788ab5370]:  %81 = add i64 %56, 24
	}

[0x558788a99a38]:   %81 = inttoptr i64 %56 to i64* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	}

[0x558788a99a98]:   %82 = load i64, i64* %81, align 8 {
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	}

[0x558788a99b10]:   store i64 %82, i64* %RBP, align 8, !tbaa !1261 {
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	}

[0x558788a99b90]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	}

[0x558788a99c10]:   %83 = add i64 %50, 9 {
	[0x558788aaf450]:  %84 = add i64 %51, 9
	}

[0x558788a99c90]:   store i64 %83, i64* %PC, align 8 {
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	}

[0x558788a99cf8]:   %84 = inttoptr i64 %80 to i64* {
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x558788a99d58]:   %85 = load i64, i64* %84, align 8 {
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	}

[0x558788a99dd0]:   store i64 %85, i64* %PC, align 8, !tbaa !1261 {
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	}

[0x558788a99e50]:   %86 = add i64 %55, 32 {
	[0x558788aaf000]:  %87 = add i64 %56, 32
	}

[0x558788a99ed0]:   store i64 %86, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	}

[0x558788a99f38]:   ret %struct.Memory* %47 {
	[0x558788b26988]:  ret %struct.Memory.32* %call2_40055f
	}

[0x558788adcc88]:   %3 = load i64, i64* %RBP, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x558788ae3b28]:   %55 = load i64, i64* %RSP, align 8 {
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	}

[0x558788b44100]:   %56 = add i64 %55, 16 {
	[0x558788ab07f0]:  %57 = add i64 %56, 16
	}

[0x558788b44180]:   store i64 %56, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	}

[0x558788b44240]:   %57 = icmp ugt i64 %55, -17 {
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788b442a8]:   %58 = zext i1 %57 to i8 {
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	}

[0x558788b44320]:   store i8 %58, i8* %12, align 1, !tbaa !1265 {
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	}

[0x558788b44388]:   %59 = trunc i64 %56 to i32 {
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788b44400]:   %60 = and i32 %59, 255 {
	[0x558788ab1ff0]:  %61 = and i32 %60, 255
	}

[0x558788b444a0]:   %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9 {
	[0x558788b37e10]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x558788b44568]:   %62 = trunc i32 %61 to i8 {
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	}

[0x558788b445e0]:   %63 = and i8 %62, 1 {
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788b44660]:   %64 = xor i8 %63, 1 {
	[0x558788aacbe0]:  %20 = xor i8 %19, 1
	[0x558788ab1c60]:  %65 = xor i8 %64, 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x558788a955b0]: block_400550 {
	[0x558788aaaad0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x558788ab1c60]:   %65 = xor i8 %64, 1
From the pot matches of: [0x558788a96560]:   %18 = xor i8 %17, 1


Uprime : [0x558788a966a0]:   store i8 %18, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x558788b21400]:   store i8 %20, i8* %21, align 1


Adj: [0x558788ab1b10]:   store i8 %65, i8* %21, align 1


Removing: [0x558788aacbe0]:   %20 = xor i8 %19, 1
From the pot matches of: [0x558788b44660]:   %64 = xor i8 %63, 1


Uprime : [0x558788a98f90]:   store i8 %64, i8* %19, align 1, !tbaa !1279


Uprime Matches: [0x558788ab1b10]:   store i8 %65, i8* %21, align 1


Adj: [0x558788b21400]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x558788ab1dc0]:   %64 = and i8 %63, 1
From the pot matches of: [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime : [0x558788a96560]:   %18 = xor i8 %17, 1


Uprime Matches: [0x558788aacbe0]:   %20 = xor i8 %19, 1


Adj: [0x558788ab1c60]:   %65 = xor i8 %64, 1


Removing: [0x558788b69720]:   %19 = and i8 %18, 1
From the pot matches of: [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime : [0x558788b44660]:   %64 = xor i8 %63, 1


Uprime Matches: [0x558788ab1c60]:   %65 = xor i8 %64, 1


Adj: [0x558788aacbe0]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x558788b24b28]:   %63 = trunc i32 %62 to i8
From the pot matches of: [0x558788a96468]:   %16 = trunc i32 %15 to i8


Uprime : [0x558788a964e0]:   %17 = and i8 %16, 1


Uprime Matches: [0x558788b69720]:   %19 = and i8 %18, 1


Adj: [0x558788ab1dc0]:   %64 = and i8 %63, 1


Removing: [0x558788b1de68]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x558788b44568]:   %62 = trunc i32 %61 to i8


Uprime : [0x558788b445e0]:   %63 = and i8 %62, 1


Uprime Matches: [0x558788ab1dc0]:   %64 = and i8 %63, 1


Adj: [0x558788b69720]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x558788a954f0]: %struct.State* %0 {
	[0x558788aaf9f0]:%struct.State.1* %0
	}

[0x558788a95530]: i64 %1 {
	[0x558788b21c90]:i64 %1
	}

[0x558788a95570]: %struct.Memory* %2 {
	[0x558788ab0fb0]:%struct.Memory.32* %2
	}

[0x558788a95770]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x558788b0c380]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x558788a95860]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x558788b0fdf0]:  %RAX.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x558788a95950]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x558788b101b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x558788a95a40]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x558788b10340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x558788a95af0]:   %4 = add i64 %1, 1 {
	[0x558788b15020]:  %5 = add i64 %1, 1
	}

[0x558788a95bc0]:   store i64 %4, i64* %PC, align 8 {
	[0x558788b15f10]:  store i64 %5, i64* %3, align 8
	}

[0x558788a95c28]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b0cd68]:  %7 = load i64, i64* %6, align 8
	}

[0x558788a95ca0]:   %6 = add i64 %5, -8 {
	[0x558788a854e0]:  %8 = add i64 %7, -8
	}

[0x558788a95d08]:   %7 = inttoptr i64 %6 to i64* {
	[0x558788b0cf58]:  %9 = inttoptr i64 %8 to i64*
	}

[0x558788a95d80]:   store i64 %3, i64* %7, align 8 {
	[0x558788a862f0]:  store i64 %4, i64* %9, align 8
	}

[0x558788a95de8]:   %8 = load i64, i64* %PC, align 8 {
	[0x558788b37c58]:  %10 = load i64, i64* %3, align 8
	}

[0x558788a95ef0]:   store i64 %6, i64* %RBP, align 8, !tbaa !1261 {
	[0x558788aac9a0]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x558788a95fb0]:   %9 = add i64 %5, -24 {
	[0x558788aac850]:  %11 = add i64 %7, -24
	}

[0x558788a96030]:   store i64 %9, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788aac330]:  store i64 %11, i64* %6, align 8
	}

[0x558788a960b0]:   %10 = icmp ult i64 %6, 16 {
	[0x558788b1fe10]:  %12 = icmp ult i64 %8, 16
	}

[0x558788a96118]:   %11 = zext i1 %10 to i8 {
	[0x558788b1d678]:  %13 = zext i1 %12 to i8
	}

[0x558788a961c0]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x558788bf6b50]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x558788a96250]:   store i8 %11, i8* %12, align 1, !tbaa !1265 {
	[0x558788b1e230]:  store i8 %13, i8* %14, align 1
	}

[0x558788a962b8]:   %13 = trunc i64 %9 to i32 {
	[0x558788b1f228]:  %15 = trunc i64 %11 to i32
	}

[0x558788a96330]:   %14 = and i32 %13, 255 {
	[0x558788b1b940]:  %16 = and i32 %15, 255
	}

[0x558788a963f0]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x558788af4a10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x558788a96468]:   %16 = trunc i32 %15 to i8 {
	[0x558788b1de68]:  %18 = trunc i32 %17 to i8
	}

[0x558788a964e0]:   %17 = and i8 %16, 1 {
	[0x558788b69720]:  %19 = and i8 %18, 1
	}

[0x558788a96560]:   %18 = xor i8 %17, 1 {
	[0x558788aacbe0]:  %20 = xor i8 %19, 1
	}

[0x558788a96610]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x558788b55e80]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x558788a966a0]:   store i8 %18, i8* %19, align 1, !tbaa !1279 {
	[0x558788b21400]:  store i8 %20, i8* %21, align 1
	}

[0x558788a96720]:   %20 = xor i64 %6, 16 {
	[0x558788aae8b0]:  %22 = xor i64 %8, 16
	}

[0x558788a967a0]:   %21 = xor i64 %20, %9 {
	[0x558788aae750]:  %23 = xor i64 %22, %11
	}

[0x558788a96820]:   %22 = lshr i64 %21, 4 {
	[0x558788b210d0]:  %24 = lshr i64 %23, 4
	}

[0x558788a96888]:   %23 = trunc i64 %22 to i8 {
	[0x558788b1e138]:  %25 = trunc i64 %24 to i8
	}

[0x558788a96900]:   %24 = and i8 %23, 1 {
	[0x558788aae200]:  %26 = and i8 %25, 1
	}

[0x558788a969b0]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x558788ab15e0]:  %27 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x558788a96a40]:   store i8 %24, i8* %25, align 1, !tbaa !1280 {
	[0x558788b20fc0]:  store i8 %26, i8* %27, align 1
	}

[0x558788a96ac0]:   %26 = icmp eq i64 %9, 0 {
	[0x558788aae0b0]:  %28 = icmp eq i64 %11, 0
	}

[0x558788a96b28]:   %27 = zext i1 %26 to i8 {
	[0x558788b1c468]:  %29 = zext i1 %28 to i8
	}

[0x558788a96bd0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x558788ab1370]:  %30 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x558788a96c60]:   store i8 %27, i8* %28, align 1, !tbaa !1281 {
	[0x558788b21510]:  store i8 %29, i8* %30, align 1
	}

[0x558788a96ce0]:   %29 = lshr i64 %9, 63 {
	[0x558788b21950]:  %31 = lshr i64 %11, 63
	}

[0x558788a96d48]:   %30 = trunc i64 %29 to i8 {
	[0x558788b1c038]:  %32 = trunc i64 %31 to i8
	}

[0x558788a96df0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x558788aafe60]:  %33 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x558788a96e80]:   store i8 %30, i8* %31, align 1, !tbaa !1282 {
	[0x558788aafaa0]:  store i8 %32, i8* %33, align 1
	}

[0x558788a96f00]:   %32 = lshr i64 %6, 63 {
	[0x558788aaf940]:  %34 = lshr i64 %8, 63
	}

[0x558788a96f80]:   %33 = xor i64 %29, %32 {
	[0x558788b21730]:  %35 = xor i64 %31, %34
	}

[0x558788a97000]:   %34 = add nuw nsw i64 %33, %32 {
	[0x558788b20420]:  %36 = add nuw nsw i64 %35, %34
	}

[0x558788a97080]:   %35 = icmp eq i64 %34, 2 {
	[0x558788aaeb30]:  %37 = icmp eq i64 %36, 2
	}

[0x558788a970e8]:   %36 = zext i1 %35 to i8 {
	[0x558788b51478]:  %38 = zext i1 %37 to i8
	}

[0x558788a97190]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x558788aaccf0]:  %39 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x558788a97220]:   store i8 %36, i8* %37, align 1, !tbaa !1283 {
	[0x558788b20220]:  store i8 %38, i8* %39, align 1
	}

[0x558788a972a0]:   %38 = add i64 %5, -12 {
	[0x558788aafbf0]:  %40 = add i64 %7, -12
	}

[0x558788a97320]:   %39 = add i64 %8, 14 {
	[0x558788ab0540]:  %41 = add i64 %10, 14
	}

[0x558788a973a0]:   store i64 %39, i64* %PC, align 8 {
	[0x558788b21ea0]:  store i64 %41, i64* %3, align 8
	}

[0x558788a97408]:   %40 = inttoptr i64 %38 to i32* {
	[0x558788b35178]:  %42 = inttoptr i64 %40 to i32*
	}

[0x558788a97480]:   store i32 2, i32* %40, align 4 {
	[0x558788b21d90]:  store i32 2, i32* %42, align 4
	}

[0x558788a974e8]:   %41 = load i64, i64* %PC, align 8 {
	[0x558788b23a88]:  %43 = load i64, i64* %3, align 8
	}

[0x558788a975a0]:   %42 = add i64 %41, -31 {
	[0x558788ab03e0]:  %44 = add i64 %43, -31
	}

[0x558788a97620]:   %43 = add i64 %41, 5 {
	[0x558788ab0280]:  %45 = add i64 %43, 5
	}

[0x558788a97688]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b235c8]:  %46 = load i64, i64* %6, align 8
	}

[0x558788a97700]:   %45 = add i64 %44, -8 {
	[0x558788b21b70]:  %47 = add i64 %46, -8
	}

[0x558788a97768]:   %46 = inttoptr i64 %45 to i64* {
	[0x558788b23238]:  %48 = inttoptr i64 %47 to i64*
	}

[0x558788a977e0]:   store i64 %43, i64* %46, align 8 {
	[0x558788aafd50]:  store i64 %45, i64* %48, align 8
	}

[0x558788a97860]:   store i64 %45, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788b21fb0]:  store i64 %47, i64* %6, align 8
	}

[0x558788a978e0]:   store i64 %42, i64* %PC, align 8, !tbaa !1261 {
	[0x558788ab0f00]:  store i64 %44, i64* %3, align 8
	}

[0x558788a97a70]:   %47 = tail call %struct.Memory* @sub_400540_checkFn(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x558788aac610]:  %call2_40055f = tail call %struct.Memory.32* @sub_400540.checkFn(%struct.State.1* %0, i64 %44, %struct.Memory.32* %2)
	}

[0x558788a97b38]:   %48 = load i64, i64* %RBP, align 8 {
	[0x558788b22fd8]:  %49 = load i64, i64* %RBP.i, align 8
	}

[0x558788a97bf0]:   %49 = add i64 %48, -4 {
	[0x558788ab0d60]:  %50 = add i64 %49, -4
	}

[0x558788a97c58]:   %50 = load i64, i64* %PC, align 8 {
	[0x558788b228f8]:  %51 = load i64, i64* %3, align 8
	}

[0x558788a97cd0]:   %51 = add i64 %50, 3 {
	[0x558788ab0c00]:  %52 = add i64 %51, 3
	}

[0x558788a97d50]:   store i64 %51, i64* %PC, align 8 {
	[0x558788ab0940]:  store i64 %52, i64* %3, align 8
	}

[0x558788a97db8]:   %52 = inttoptr i64 %49 to i32* {
	[0x558788b22568]:  %53 = inttoptr i64 %50 to i32*
	}

[0x558788a97e18]:   %53 = load i32, i32* %52, align 4 {
	[0x558788b22438]:  %54 = load i32, i32* %53, align 4
	}

[0x558788a97e78]:   %54 = zext i32 %53 to i64 {
	[0x558788b23bb8]:  %55 = zext i32 %54 to i64
	}

[0x558788a97ef0]:   store i64 %54, i64* %RAX, align 8, !tbaa !1261 {
	[0x558788b221d0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x558788a98f90]:   store i8 %64, i8* %19, align 1, !tbaa !1279 {
	[0x558788ab1b10]:  store i8 %65, i8* %21, align 1
	}

[0x558788a99010]:   %65 = xor i64 %55, 16 {
	[0x558788ab19b0]:  %66 = xor i64 %56, 16
	}

[0x558788a99090]:   %66 = xor i64 %65, %56 {
	[0x558788ab1860]:  %67 = xor i64 %66, %57
	}

[0x558788a99110]:   %67 = lshr i64 %66, 4 {
	[0x558788ab34e0]:  %68 = lshr i64 %67, 4
	}

[0x558788a99178]:   %68 = trunc i64 %67 to i8 {
	[0x558788b249f8]:  %69 = trunc i64 %68 to i8
	}

[0x558788a991f0]:   %69 = and i8 %68, 1 {
	[0x558788ab3110]:  %70 = and i8 %69, 1
	}

[0x558788a99270]:   store i8 %69, i8* %25, align 1, !tbaa !1280 {
	[0x558788ab4830]:  store i8 %70, i8* %27, align 1
	}

[0x558788a992f0]:   %70 = icmp eq i64 %56, 0 {
	[0x558788ab2fc0]:  %71 = icmp eq i64 %57, 0
	}

[0x558788a99358]:   %71 = zext i1 %70 to i8 {
	[0x558788b24798]:  %72 = zext i1 %71 to i8
	}

[0x558788a993d0]:   store i8 %71, i8* %28, align 1, !tbaa !1281 {
	[0x558788ab45e0]:  store i8 %72, i8* %30, align 1
	}

[0x558788a99450]:   %72 = lshr i64 %56, 63 {
	[0x558788ab2c90]:  %73 = lshr i64 %57, 63
	}

[0x558788a994b8]:   %73 = trunc i64 %72 to i8 {
	[0x558788b23ce8]:  %74 = trunc i64 %73 to i8
	}

[0x558788a99530]:   store i8 %73, i8* %31, align 1, !tbaa !1282 {
	[0x558788ab2b80]:  store i8 %74, i8* %33, align 1
	}

[0x558788a995b0]:   %74 = lshr i64 %55, 63 {
	[0x558788ab2a70]:  %75 = lshr i64 %56, 63
	}

[0x558788a99630]:   %75 = xor i64 %72, %74 {
	[0x558788ab4bb0]:  %76 = xor i64 %73, %75
	}

[0x558788a996b0]:   %76 = add nuw nsw i64 %75, %72 {
	[0x558788ab7a00]:  %77 = add nuw nsw i64 %76, %73
	}

[0x558788a99730]:   %77 = icmp eq i64 %76, 2 {
	[0x558788ab78a0]:  %78 = icmp eq i64 %77, 2
	}

[0x558788a99798]:   %78 = zext i1 %77 to i8 {
	[0x558788aaf858]:  %79 = zext i1 %78 to i8
	}

[0x558788a99810]:   store i8 %78, i8* %37, align 1, !tbaa !1283 {
	[0x558788ab7740]:  store i8 %79, i8* %39, align 1
	}

[0x558788a99890]:   %79 = add i64 %50, 8 {
	[0x558788ab75e0]:  %80 = add i64 %51, 8
	}

[0x558788a99910]:   store i64 %79, i64* %PC, align 8 {
	[0x558788ab5b30]:  store i64 %80, i64* %3, align 8
	}

[0x558788a999d0]:   %80 = add i64 %55, 24 {
	[0x558788ab5370]:  %81 = add i64 %56, 24
	}

[0x558788a99a38]:   %81 = inttoptr i64 %56 to i64* {
	[0x558788abaf18]:  %82 = inttoptr i64 %57 to i64*
	}

[0x558788a99a98]:   %82 = load i64, i64* %81, align 8 {
	[0x558788b26f78]:  %83 = load i64, i64* %82, align 8
	}

[0x558788a99b10]:   store i64 %82, i64* %RBP, align 8, !tbaa !1261 {
	[0x558788ab2ef0]:  store i64 %83, i64* %RBP.i, align 8
	}

[0x558788a99b90]:   store i64 %80, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788ab7be0]:  store i64 %81, i64* %6, align 8
	}

[0x558788a99c10]:   %83 = add i64 %50, 9 {
	[0x558788aaf450]:  %84 = add i64 %51, 9
	}

[0x558788a99c90]:   store i64 %83, i64* %PC, align 8 {
	[0x558788aaf330]:  store i64 %84, i64* %3, align 8
	}

[0x558788a99cf8]:   %84 = inttoptr i64 %80 to i64* {
	[0x558788b26be8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x558788a99d58]:   %85 = load i64, i64* %84, align 8 {
	[0x558788b26ab8]:  %86 = load i64, i64* %85, align 8
	}

[0x558788a99dd0]:   store i64 %85, i64* %PC, align 8, !tbaa !1261 {
	[0x558788aaf1e0]:  store i64 %86, i64* %3, align 8
	}

[0x558788a99e50]:   %86 = add i64 %55, 32 {
	[0x558788aaf000]:  %87 = add i64 %56, 32
	}

[0x558788a99ed0]:   store i64 %86, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788aaef20]:  store i64 %87, i64* %6, align 8
	}

[0x558788a99f38]:   ret %struct.Memory* %47 {
	[0x558788b26988]:  ret %struct.Memory.32* %call2_40055f
	}

[0x558788adcc88]:   %3 = load i64, i64* %RBP, align 8 {
	[0x558788b0cbd8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x558788ae3b28]:   %55 = load i64, i64* %RSP, align 8 {
	[0x558788b26008]:  %56 = load i64, i64* %6, align 8
	}

[0x558788b44100]:   %56 = add i64 %55, 16 {
	[0x558788ab07f0]:  %57 = add i64 %56, 16
	}

[0x558788b44180]:   store i64 %56, i64* %RSP, align 8, !tbaa !1261 {
	[0x558788ab0690]:  store i64 %57, i64* %6, align 8
	}

[0x558788b44240]:   %57 = icmp ugt i64 %55, -17 {
	[0x558788b22100]:  %58 = icmp ugt i64 %56, -17
	}

[0x558788b442a8]:   %58 = zext i1 %57 to i8 {
	[0x558788b24eb8]:  %59 = zext i1 %58 to i8
	}

[0x558788b44320]:   store i8 %58, i8* %12, align 1, !tbaa !1265 {
	[0x558788ab21f0]:  store i8 %59, i8* %14, align 1
	}

[0x558788b44388]:   %59 = trunc i64 %56 to i32 {
	[0x558788b24d88]:  %60 = trunc i64 %57 to i32
	}

[0x558788b44400]:   %60 = and i32 %59, 255 {
	[0x558788ab1ff0]:  %61 = and i32 %60, 255
	}

[0x558788b444a0]:   %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9 {
	[0x558788b37e10]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x558788b44568]:   %62 = trunc i32 %61 to i8 {
	[0x558788b24b28]:  %63 = trunc i32 %62 to i8
	}

[0x558788b445e0]:   %63 = and i8 %62, 1 {
	[0x558788ab1dc0]:  %64 = and i8 %63, 1
	}

[0x558788b44660]:   %64 = xor i8 %63, 1 {
	[0x558788ab1c60]:  %65 = xor i8 %64, 1
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x558788a955b0]: block_400550 {
	[0x558788aaaad0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [doWork] from mcsema/test.opt.ll
Extracting function [doWork] from mcsema/test.proposed.opt.ll
Matcher Done...
