Writing '/tmp/tmpf0bglkdm.dot'...
Writing '/tmp/tmpf0bglkdm.dot':Done

Reading LLVM: /tmp/tmp6mvfd50h-query.ll
Extracting function [doWork] from /tmp/tmp6mvfd50h-query.ll
Dot file generated!
Writing '/tmp/tmp9yk0vl1h.dot'...
Writing '/tmp/tmp9yk0vl1h.dot':Done

Reading LLVM: /tmp/tmpp1r9bmrx-target.ll
Extracting function [doWork] from /tmp/tmpp1r9bmrx-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -24
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 16
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %40 = add i64 %7, -12
- 49 %41 = add i64 %10, 14
- 50 store i64 %41, i64* %3, align 8
- 51 %42 = inttoptr i64 %40 to i32*
- 52 store i32 2, i32* %42, align 4
- 53 %43 = load i64, i64* %3, align 8
- 54 %44 = add i64 %43, -31
- 55 %45 = add i64 %43, 5
- 56 %46 = load i64, i64* %6, align 8
- 57 %47 = add i64 %46, -8
- 58 %48 = inttoptr i64 %47 to i64*
- 59 store i64 %45, i64* %48, align 8
- 60 store i64 %47, i64* %6, align 8
- 61 store i64 %44, i64* %3, align 8
- 62 %call2_40057f = tail call %struct.Memory* @sub_400560.checkFn(%struct.State* %0, i64 %44, %struct.Memory* %2)
- 63 %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 64 %49 = load i64, i64* %RBP.i, align 8
- 65 %50 = add i64 %49, -4
- 66 %51 = load i64, i64* %3, align 8
- 67 %52 = add i64 %51, 3
- 68 store i64 %52, i64* %3, align 8
- 69 %53 = inttoptr i64 %50 to i32*
- 70 %54 = load i32, i32* %53, align 4
- 71 %55 = zext i32 %54 to i64
- 72 store i64 %55, i64* %RAX.i, align 8
- 73 %56 = load i64, i64* %6, align 8
- 74 %57 = add i64 %56, 16
- 75 store i64 %57, i64* %6, align 8
- 76 %58 = icmp ugt i64 %56, -17
- 77 %59 = zext i1 %58 to i8
- 78 store i8 %59, i8* %14, align 1
- 79 %60 = trunc i64 %57 to i32
- 80 %61 = and i32 %60, 255
- 81 %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
- 82 %63 = trunc i32 %62 to i8
- 83 %64 = and i8 %63, 1
- 84 %65 = xor i8 %64, 1
- 85 store i8 %65, i8* %21, align 1
- 86 %66 = xor i64 %56, 16
- 87 %67 = xor i64 %66, %57
- 88 %68 = lshr i64 %67, 4
- 89 %69 = trunc i64 %68 to i8
- 90 %70 = and i8 %69, 1
- 91 store i8 %70, i8* %27, align 1
- 92 %71 = icmp eq i64 %57, 0
- 93 %72 = zext i1 %71 to i8
- 94 store i8 %72, i8* %30, align 1
- 95 %73 = lshr i64 %57, 63
- 96 %74 = trunc i64 %73 to i8
- 97 store i8 %74, i8* %33, align 1
- 98 %75 = lshr i64 %56, 63
- 99 %76 = xor i64 %73, %75
- 100 %77 = add nuw nsw i64 %76, %73
- 101 %78 = icmp eq i64 %77, 2
- 102 %79 = zext i1 %78 to i8
- 103 store i8 %79, i8* %39, align 1
- 104 %80 = add i64 %51, 8
- 105 store i64 %80, i64* %3, align 8
- 106 %81 = add i64 %56, 24
- 107 %82 = inttoptr i64 %57 to i64*
- 108 %83 = load i64, i64* %82, align 8
- 109 store i64 %83, i64* %RBP.i, align 8
- 110 store i64 %81, i64* %6, align 8
- 111 %84 = add i64 %51, 9
- 112 store i64 %84, i64* %3, align 8
- 113 %85 = inttoptr i64 %81 to i64*
- 114 %86 = load i64, i64* %85, align 8
- 115 store i64 %86, i64* %3, align 8
- 116 %87 = add i64 %56, 32
- 117 store i64 %87, i64* %6, align 8
- 118 ret %struct.Memory* %call2_40057f
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1520dfc598>, {0: {0}, 1: {3}, 2: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 3: {5}, 4: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 5: {2}, 6: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 7: {8, 58}, 8: {69, 9, 107, 113, 52, 59}, 9: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 10: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 11: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 12: {13}, 13: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 14: {15}, 15: {35, 102, 71, 77, 46, 16, 93}, 16: {17}, 17: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 18: {96, 39, 79, 82, 19, 22, 89, 30}, 19: {80, 20}, 20: {81, 21, 63}, 21: {96, 39, 79, 82, 19, 22, 89, 30}, 22: {90, 83, 31, 23}, 23: {24, 84}, 24: {25}, 25: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 26: {27, 86}, 27: {99, 43, 28, 87}, 28: {88, 29}, 29: {96, 39, 79, 82, 19, 22, 89, 30}, 30: {90, 83, 31, 23}, 31: {32}, 32: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 33: {34, 92}, 34: {35, 102, 71, 77, 46, 16, 93}, 35: {36}, 36: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 37: {42, 98, 38, 95}, 38: {96, 39, 79, 82, 19, 22, 89, 30}, 39: {40}, 40: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 41: {42, 98, 38, 95}, 42: {99, 43, 28, 87}, 43: {100, 44}, 44: {101, 45}, 45: {35, 102, 71, 77, 46, 16, 93}, 46: {47}, 47: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 48: {49}, 49: {50}, 50: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 51: {69, 9, 107, 113, 52, 59}, 52: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 53: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 54: {55}, 55: {56}, 56: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 57: {8, 58}, 58: {69, 9, 107, 113, 52, 59}, 59: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 60: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 61: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 62: {81, 21, 63}, 63: {1}, 64: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 65: {65}, 66: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 67: {67}, 68: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 69: {69, 9, 107, 113, 52, 59}, 70: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 71: {35, 102, 71, 77, 46, 16, 93}, 72: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 73: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 74: {74}, 75: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 76: {76}, 77: {35, 102, 71, 77, 46, 16, 93}, 78: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 79: {96, 39, 79, 82, 19, 22, 89, 30}, 80: {80, 20}, 81: {81, 21, 63}, 82: {96, 39, 79, 82, 19, 22, 89, 30}, 83: {90, 83, 31, 23}, 84: {24, 84}, 85: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 86: {27, 86}, 87: {99, 43, 28, 87}, 88: {88, 29}, 89: {96, 39, 79, 82, 19, 22, 89, 30}, 90: {90, 83, 31, 23}, 91: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 92: {34, 92}, 93: {35, 102, 71, 77, 46, 16, 93}, 94: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 95: {42, 98, 38, 95}, 96: {96, 39, 79, 82, 19, 22, 89, 30}, 97: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 98: {42, 98, 38, 95}, 99: {99, 43, 28, 87}, 100: {100, 44}, 101: {101, 45}, 102: {35, 102, 71, 77, 46, 16, 93}, 103: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 104: {104}, 105: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 106: {106}, 107: {69, 9, 107, 113, 52, 59}, 108: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 109: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 110: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 111: {111}, 112: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 113: {69, 9, 107, 113, 52, 59}, 114: {64, 66, 4, 70, 7, 73, 11, 108, 114, 54, 57}, 115: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 116: {116}, 117: {6, 10, 12, 14, 18, 26, 33, 37, 41, 48, 51, 53, 60, 61, 62, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 118: {118}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1520dfc598>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: {6}, 5: {2}, 6: {7}, 7: {8}, 8: {9}, 9: {10}, 10: {11}, 11: {12}, 12: {13}, 13: {14}, 14: {15}, 15: {16}, 16: {17}, 17: {18}, 18: {19}, 19: {20}, 20: {21}, 21: {22}, 22: {23}, 23: {24}, 24: {25}, 25: {26}, 26: {27}, 27: {28}, 28: {29}, 29: {30}, 30: {31}, 31: {32}, 32: {33}, 33: {34}, 34: {35}, 35: {36}, 36: {37}, 37: {38}, 38: {39}, 39: {40}, 40: {41}, 41: {42}, 42: {43}, 43: {44}, 44: {45}, 45: {46}, 46: {47}, 47: {48}, 48: {49}, 49: {50}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {56}, 56: {57}, 57: {58}, 58: {59}, 59: {60}, 60: {61}, 61: {62}, 62: {63}, 63: {1}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 add add
EXACT 49 add add
EXACT 50 store store
EXACT 51 inttoptr inttoptr
EXACT 52 store store
EXACT 53 load load
EXACT 54 add add
EXACT 55 add add
EXACT 56 load load
EXACT 57 add add
EXACT 58 inttoptr inttoptr
EXACT 59 store store
EXACT 60 store store
EXACT 61 store store
EXACT 62 tail tail
EXACT 63 getelementptr getelementptr
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 load load
EXACT 71 zext zext
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
EXACT 76 icmp icmp
EXACT 77 zext zext
EXACT 78 store store
EXACT 79 trunc trunc
EXACT 80 and and
EXACT 81 tail tail
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 xor xor
EXACT 85 store store
EXACT 86 xor xor
EXACT 87 xor xor
EXACT 88 lshr lshr
EXACT 89 trunc trunc
EXACT 90 and and
EXACT 91 store store
EXACT 92 icmp icmp
EXACT 93 zext zext
EXACT 94 store store
EXACT 95 lshr lshr
EXACT 96 trunc trunc
EXACT 97 store store
EXACT 98 lshr lshr
EXACT 99 xor xor
EXACT 100 add add
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 add add
EXACT 105 store store
EXACT 106 add add
EXACT 107 inttoptr inttoptr
EXACT 108 load load
EXACT 109 store store
EXACT 110 store store
EXACT 111 add add
EXACT 112 store store
EXACT 113 inttoptr inttoptr
EXACT 114 load load
EXACT 115 store store
EXACT 116 add add
EXACT 117 store store
EXACT 118 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 3 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 4 %3 = load i64, i64* %RBP, align 8
- 5 %4 = add i64 %1, 1
- 6 store i64 %4, i64* %PC, align 8
- 7 %5 = load i64, i64* %RSP, align 8
- 8 %6 = add i64 %5, -8
- 9 %7 = inttoptr i64 %6 to i64*
- 10 store i64 %3, i64* %7, align 8
- 11 %8 = load i64, i64* %PC, align 8
- 12 store i64 %6, i64* %RBP, align 8
- 13 %9 = add i64 %5, -24
- 14 store i64 %9, i64* %RSP, align 8
- 15 %10 = icmp ult i64 %6, 16
- 16 %11 = zext i1 %10 to i8
- 17 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 18 store i8 %11, i8* %12, align 1
- 19 %13 = trunc i64 %9 to i32
- 20 %14 = and i32 %13, 255
- 21 %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
- 22 %16 = trunc i32 %15 to i8
- 23 %17 = and i8 %16, 1
- 24 %18 = xor i8 %17, 1
- 25 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 26 store i8 %18, i8* %19, align 1
- 27 %20 = xor i64 %6, 16
- 28 %21 = xor i64 %20, %9
- 29 %22 = lshr i64 %21, 4
- 30 %23 = trunc i64 %22 to i8
- 31 %24 = and i8 %23, 1
- 32 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 33 store i8 %24, i8* %25, align 1
- 34 %26 = icmp eq i64 %9, 0
- 35 %27 = zext i1 %26 to i8
- 36 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 37 store i8 %27, i8* %28, align 1
- 38 %29 = lshr i64 %9, 63
- 39 %30 = trunc i64 %29 to i8
- 40 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 41 store i8 %30, i8* %31, align 1
- 42 %32 = lshr i64 %6, 63
- 43 %33 = xor i64 %29, %32
- 44 %34 = add nuw nsw i64 %33, %32
- 45 %35 = icmp eq i64 %34, 2
- 46 %36 = zext i1 %35 to i8
- 47 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 48 store i8 %36, i8* %37, align 1
- 49 %38 = add i64 %5, -12
- 50 %39 = add i64 %8, 14
- 51 store i64 %39, i64* %PC, align 8
- 52 %40 = inttoptr i64 %38 to i32*
- 53 store i32 2, i32* %40, align 4
- 54 %41 = load i64, i64* %PC, align 8
- 55 %42 = add i64 %41, -31
- 56 %43 = add i64 %41, 5
- 57 %44 = load i64, i64* %RSP, align 8
- 58 %45 = add i64 %44, -8
- 59 %46 = inttoptr i64 %45 to i64*
- 60 store i64 %43, i64* %46, align 8
- 61 store i64 %45, i64* %RSP, align 8
- 62 store i64 %42, i64* %PC, align 8
- 63 %47 = tail call %struct.Memory* @sub_400560_checkFn_renamed_(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2)
- 64 %48 = load i64, i64* %RBP, align 8
- 65 %49 = add i64 %48, -4
- 66 %50 = load i64, i64* %PC, align 8
- 67 %51 = add i64 %50, 3
- 68 store i64 %51, i64* %PC, align 8
- 69 %52 = inttoptr i64 %49 to i32*
- 70 %53 = load i32, i32* %52, align 4
- 71 %54 = zext i32 %53 to i64
- 72 store i64 %54, i64* %RAX, align 8
- 73 %55 = load i64, i64* %RSP, align 8
- 74 %56 = add i64 %55, 16
- 75 store i64 %56, i64* %RSP, align 8
- 76 %57 = icmp ugt i64 %55, -17
- 77 %58 = zext i1 %57 to i8
- 78 store i8 %58, i8* %12, align 1
- 79 %59 = trunc i64 %56 to i32
- 80 %60 = and i32 %59, 255
- 81 %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
- 82 %62 = trunc i32 %61 to i8
- 83 %63 = and i8 %62, 1
- 84 %64 = xor i8 %63, 1
- 85 store i8 %64, i8* %19, align 1
- 86 %65 = xor i64 %55, 16
- 87 %66 = xor i64 %65, %56
- 88 %67 = lshr i64 %66, 4
- 89 %68 = trunc i64 %67 to i8
- 90 %69 = and i8 %68, 1
- 91 store i8 %69, i8* %25, align 1
- 92 %70 = icmp eq i64 %56, 0
- 93 %71 = zext i1 %70 to i8
- 94 store i8 %71, i8* %28, align 1
- 95 %72 = lshr i64 %56, 63
- 96 %73 = trunc i64 %72 to i8
- 97 store i8 %73, i8* %31, align 1
- 98 %74 = lshr i64 %55, 63
- 99 %75 = xor i64 %72, %74
- 100 %76 = add nuw nsw i64 %75, %72
- 101 %77 = icmp eq i64 %76, 2
- 102 %78 = zext i1 %77 to i8
- 103 store i8 %78, i8* %37, align 1
- 104 %79 = add i64 %50, 8
- 105 store i64 %79, i64* %PC, align 8
- 106 %80 = add i64 %55, 24
- 107 %81 = inttoptr i64 %56 to i64*
- 108 %82 = load i64, i64* %81, align 8
- 109 store i64 %82, i64* %RBP, align 8
- 110 store i64 %80, i64* %RSP, align 8
- 111 %83 = add i64 %50, 9
- 112 store i64 %83, i64* %PC, align 8
- 113 %84 = inttoptr i64 %80 to i64*
- 114 %85 = load i64, i64* %84, align 8
- 115 store i64 %85, i64* %PC, align 8
- 116 %86 = add i64 %55, 32
- 117 store i64 %86, i64* %RSP, align 8
- 118 ret %struct.Memory* %47
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1520dfc730>, {0: {0}, 1: {63}, 2: {5}, 3: {1}, 4: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 5: {3}, 6: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 7: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 8: {57, 7}, 9: {69, 8, 107, 113, 51, 58}, 10: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 11: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 12: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 13: {12}, 14: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 15: {14}, 16: {34, 102, 71, 77, 45, 15, 93}, 17: {16}, 18: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 19: {96, 38, 79, 18, 82, 21, 89, 29}, 20: {80, 19}, 21: {81, 20, 62}, 22: {96, 38, 79, 18, 82, 21, 89, 29}, 23: {90, 83, 22, 30}, 24: {84, 23}, 25: {24}, 26: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 27: {26, 86}, 28: {99, 42, 27, 87}, 29: {88, 28}, 30: {96, 38, 79, 18, 82, 21, 89, 29}, 31: {90, 83, 22, 30}, 32: {31}, 33: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 34: {33, 92}, 35: {34, 102, 71, 77, 45, 15, 93}, 36: {35}, 37: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 38: {41, 98, 37, 95}, 39: {96, 38, 79, 18, 82, 21, 89, 29}, 40: {39}, 41: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 42: {41, 98, 37, 95}, 43: {99, 42, 27, 87}, 44: {43, 100}, 45: {44, 101}, 46: {34, 102, 71, 77, 45, 15, 93}, 47: {46}, 48: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 49: {48}, 50: {49}, 51: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 52: {69, 8, 107, 113, 51, 58}, 53: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 54: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 55: {54}, 56: {55}, 57: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 58: {57, 7}, 59: {69, 8, 107, 113, 51, 58}, 60: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 61: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 62: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 63: {81, 20, 62}, 64: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 65: {65}, 66: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 67: {67}, 68: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 69: {69, 8, 107, 113, 51, 58}, 70: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 71: {34, 102, 71, 77, 45, 15, 93}, 72: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 73: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 74: {74}, 75: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 76: {76}, 77: {34, 102, 71, 77, 45, 15, 93}, 78: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 79: {96, 38, 79, 18, 82, 21, 89, 29}, 80: {80, 19}, 81: {81, 20, 62}, 82: {96, 38, 79, 18, 82, 21, 89, 29}, 83: {90, 83, 22, 30}, 84: {84, 23}, 85: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 86: {26, 86}, 87: {99, 42, 27, 87}, 88: {88, 28}, 89: {96, 38, 79, 18, 82, 21, 89, 29}, 90: {90, 83, 22, 30}, 91: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 92: {33, 92}, 93: {34, 102, 71, 77, 45, 15, 93}, 94: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 95: {41, 98, 37, 95}, 96: {96, 38, 79, 18, 82, 21, 89, 29}, 97: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 98: {41, 98, 37, 95}, 99: {99, 42, 27, 87}, 100: {43, 100}, 101: {44, 101}, 102: {34, 102, 71, 77, 45, 15, 93}, 103: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 104: {104}, 105: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 106: {106}, 107: {69, 8, 107, 113, 51, 58}, 108: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 109: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 110: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 111: {111}, 112: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 113: {69, 8, 107, 113, 51, 58}, 114: {64, 2, 66, 6, 70, 73, 10, 108, 114, 53, 56}, 115: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 116: {116}, 117: {4, 9, 11, 13, 17, 25, 32, 36, 40, 47, 50, 52, 59, 60, 61, 68, 72, 75, 78, 85, 91, 94, 97, 103, 105, 109, 110, 112, 115, 117}, 118: {118}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1520dfc730>, {0: {0}, 1: {63}, 2: {5}, 3: {1}, 4: {2}, 5: {3}, 6: {4}, 7: {6}, 8: {7}, 9: {8}, 10: {9}, 11: {10}, 12: {11}, 13: {12}, 14: {13}, 15: {14}, 16: {15}, 17: {16}, 18: {17}, 19: {18}, 20: {19}, 21: {20}, 22: {21}, 23: {22}, 24: {23}, 25: {24}, 26: {25}, 27: {26}, 28: {27}, 29: {28}, 30: {29}, 31: {30}, 32: {31}, 33: {32}, 34: {33}, 35: {34}, 36: {35}, 37: {36}, 38: {37}, 39: {38}, 40: {39}, 41: {40}, 42: {41}, 43: {42}, 44: {43}, 45: {44}, 46: {45}, 47: {46}, 48: {47}, 49: {48}, 50: {49}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {55}, 57: {56}, 58: {57}, 59: {58}, 60: {59}, 61: {60}, 62: {61}, 63: {62}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 store store
EXACT 7 load load
EXACT 8 add add
EXACT 9 inttoptr inttoptr
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 add add
EXACT 14 store store
EXACT 15 icmp icmp
EXACT 16 zext zext
EXACT 17 getelementptr getelementptr
EXACT 18 store store
EXACT 19 trunc trunc
EXACT 20 and and
EXACT 21 tail tail
EXACT 22 trunc trunc
EXACT 23 and and
EXACT 24 xor xor
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 xor xor
EXACT 28 xor xor
EXACT 29 lshr lshr
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 getelementptr getelementptr
EXACT 33 store store
EXACT 34 icmp icmp
EXACT 35 zext zext
EXACT 36 getelementptr getelementptr
EXACT 37 store store
EXACT 38 lshr lshr
EXACT 39 trunc trunc
EXACT 40 getelementptr getelementptr
EXACT 41 store store
EXACT 42 lshr lshr
EXACT 43 xor xor
EXACT 44 add add
EXACT 45 icmp icmp
EXACT 46 zext zext
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 add add
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
EXACT 54 load load
EXACT 55 add add
EXACT 56 add add
EXACT 57 load load
EXACT 58 add add
EXACT 59 inttoptr inttoptr
EXACT 60 store store
EXACT 61 store store
EXACT 62 store store
EXACT 63 tail tail
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 inttoptr inttoptr
EXACT 70 load load
EXACT 71 zext zext
EXACT 72 store store
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
EXACT 76 icmp icmp
EXACT 77 zext zext
EXACT 78 store store
EXACT 79 trunc trunc
EXACT 80 and and
EXACT 81 tail tail
EXACT 82 trunc trunc
EXACT 83 and and
EXACT 84 xor xor
EXACT 85 store store
EXACT 86 xor xor
EXACT 87 xor xor
EXACT 88 lshr lshr
EXACT 89 trunc trunc
EXACT 90 and and
EXACT 91 store store
EXACT 92 icmp icmp
EXACT 93 zext zext
EXACT 94 store store
EXACT 95 lshr lshr
EXACT 96 trunc trunc
EXACT 97 store store
EXACT 98 lshr lshr
EXACT 99 xor xor
EXACT 100 add add
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 add add
EXACT 105 store store
EXACT 106 add add
EXACT 107 inttoptr inttoptr
EXACT 108 load load
EXACT 109 store store
EXACT 110 store store
EXACT 111 add add
EXACT 112 store store
EXACT 113 inttoptr inttoptr
EXACT 114 load load
EXACT 115 store store
EXACT 116 add add
EXACT 117 store store
EXACT 118 ret ret
FP: 63 1.0 True
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -24', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 16', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %7, -12', '%41 = add i64 %10, 14', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 2, i32* %42, align 4', '%43 = load i64, i64* %3, align 8', '%44 = add i64 %43, -31', '%45 = add i64 %43, 5', '%46 = load i64, i64* %6, align 8', '%47 = add i64 %46, -8', '%48 = inttoptr i64 %47 to i64*', 'store i64 %45, i64* %48, align 8', 'store i64 %47, i64* %6, align 8', 'store i64 %44, i64* %3, align 8', '%call2_40057f = tail call %struct.Memory* @sub_400560.checkFn(%struct.State* %0, i64 %44, %struct.Memory* %2)', '%RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -4', '%51 = load i64, i64* %3, align 8', '%52 = add i64 %51, 3', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i32*', '%54 = load i32, i32* %53, align 4', '%55 = zext i32 %54 to i64', 'store i64 %55, i64* %RAX.i, align 8', '%56 = load i64, i64* %6, align 8', '%57 = add i64 %56, 16', 'store i64 %57, i64* %6, align 8', '%58 = icmp ugt i64 %56, -17', '%59 = zext i1 %58 to i8', 'store i8 %59, i8* %14, align 1', '%60 = trunc i64 %57 to i32', '%61 = and i32 %60, 255', '%62 = tail call i32 @llvm.ctpop.i32(i32 %61)', '%63 = trunc i32 %62 to i8', '%64 = and i8 %63, 1', '%65 = xor i8 %64, 1', 'store i8 %65, i8* %21, align 1', '%66 = xor i64 %56, 16', '%67 = xor i64 %66, %57', '%68 = lshr i64 %67, 4', '%69 = trunc i64 %68 to i8', '%70 = and i8 %69, 1', 'store i8 %70, i8* %27, align 1', '%71 = icmp eq i64 %57, 0', '%72 = zext i1 %71 to i8', 'store i8 %72, i8* %30, align 1', '%73 = lshr i64 %57, 63', '%74 = trunc i64 %73 to i8', 'store i8 %74, i8* %33, align 1', '%75 = lshr i64 %56, 63', '%76 = xor i64 %73, %75', '%77 = add nuw nsw i64 %76, %73', '%78 = icmp eq i64 %77, 2', '%79 = zext i1 %78 to i8', 'store i8 %79, i8* %39, align 1', '%80 = add i64 %51, 8', 'store i64 %80, i64* %3, align 8', '%81 = add i64 %56, 24', '%82 = inttoptr i64 %57 to i64*', '%83 = load i64, i64* %82, align 8', 'store i64 %83, i64* %RBP.i, align 8', 'store i64 %81, i64* %6, align 8', '%84 = add i64 %51, 9', 'store i64 %84, i64* %3, align 8', '%85 = inttoptr i64 %81 to i64*', '%86 = load i64, i64* %85, align 8', 'store i64 %86, i64* %3, align 8', '%87 = add i64 %56, 32', 'store i64 %87, i64* %6, align 8', 'ret %struct.Memory* %call2_40057f'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -24
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 16
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %7, -12
Found line to remove! %41 = add i64 %10, 14
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 2, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %3, align 8
Found line to remove! %44 = add i64 %43, -31
Found line to remove! %45 = add i64 %43, 5
Found line to remove! %46 = load i64, i64* %6, align 8
Found line to remove! %47 = add i64 %46, -8
Found line to remove! %48 = inttoptr i64 %47 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! store i64 %47, i64* %6, align 8
Found line to remove! store i64 %44, i64* %3, align 8
Found line to remove! %call2_40057f = tail call %struct.Memory* @sub_400560.checkFn(%struct.State* %0, i64 %44, %struct.Memory* %2)
Found line to remove! %RAX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -4
Found line to remove! %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 3
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %53 = inttoptr i64 %50 to i32*
Found line to remove! %54 = load i32, i32* %53, align 4
Found line to remove! %55 = zext i32 %54 to i64
Found line to remove! store i64 %55, i64* %RAX.i, align 8
Found line to remove! %56 = load i64, i64* %6, align 8
Found line to remove! %57 = add i64 %56, 16
Found line to remove! store i64 %57, i64* %6, align 8
Found line to remove! %58 = icmp ugt i64 %56, -17
Found line to remove! %59 = zext i1 %58 to i8
Found line to remove! store i8 %59, i8* %14, align 1
Found line to remove! %60 = trunc i64 %57 to i32
Found line to remove! %61 = and i32 %60, 255
Found line to remove! %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
Found line to remove! %63 = trunc i32 %62 to i8
Found line to remove! %64 = and i8 %63, 1
Found line to remove! %65 = xor i8 %64, 1
Found line to remove! store i8 %65, i8* %21, align 1
Found line to remove! %66 = xor i64 %56, 16
Found line to remove! %67 = xor i64 %66, %57
Found line to remove! %68 = lshr i64 %67, 4
Found line to remove! %69 = trunc i64 %68 to i8
Found line to remove! %70 = and i8 %69, 1
Found line to remove! store i8 %70, i8* %27, align 1
Found line to remove! %71 = icmp eq i64 %57, 0
Found line to remove! %72 = zext i1 %71 to i8
Found line to remove! store i8 %72, i8* %30, align 1
Found line to remove! %73 = lshr i64 %57, 63
Found line to remove! %74 = trunc i64 %73 to i8
Found line to remove! store i8 %74, i8* %33, align 1
Found line to remove! %75 = lshr i64 %56, 63
Found line to remove! %76 = xor i64 %73, %75
Found line to remove! %77 = add nuw nsw i64 %76, %73
Found line to remove! %78 = icmp eq i64 %77, 2
Found line to remove! %79 = zext i1 %78 to i8
Found line to remove! store i8 %79, i8* %39, align 1
Found line to remove! %80 = add i64 %51, 8
Found line to remove! store i64 %80, i64* %3, align 8
Found line to remove! %81 = add i64 %56, 24
Found line to remove! %82 = inttoptr i64 %57 to i64*
Found line to remove! %83 = load i64, i64* %82, align 8
Found line to remove! store i64 %83, i64* %RBP.i, align 8
Found line to remove! store i64 %81, i64* %6, align 8
Found line to remove! %84 = add i64 %51, 9
Found line to remove! store i64 %84, i64* %3, align 8
Found line to remove! %85 = inttoptr i64 %81 to i64*
Found line to remove! %86 = load i64, i64* %85, align 8
Found line to remove! store i64 %86, i64* %3, align 8
Found line to remove! %87 = add i64 %56, 32
Found line to remove! store i64 %87, i64* %6, align 8
Found line to remove! ret %struct.Memory* %call2_40057f
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = load i64, i64* %RSP, align 8', '%6 = add i64 %5, -8', '%7 = inttoptr i64 %6 to i64*', 'store i64 %3, i64* %7, align 8', '%8 = load i64, i64* %PC, align 8', 'store i64 %6, i64* %RBP, align 8', '%9 = add i64 %5, -24', 'store i64 %9, i64* %RSP, align 8', '%10 = icmp ult i64 %6, 16', '%11 = zext i1 %10 to i8', '%12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %11, i8* %12, align 1', '%13 = trunc i64 %9 to i32', '%14 = and i32 %13, 255', '%15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12', '%16 = trunc i32 %15 to i8', '%17 = and i8 %16, 1', '%18 = xor i8 %17, 1', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %18, i8* %19, align 1', '%20 = xor i64 %6, 16', '%21 = xor i64 %20, %9', '%22 = lshr i64 %21, 4', '%23 = trunc i64 %22 to i8', '%24 = and i8 %23, 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %24, i8* %25, align 1', '%26 = icmp eq i64 %9, 0', '%27 = zext i1 %26 to i8', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %27, i8* %28, align 1', '%29 = lshr i64 %9, 63', '%30 = trunc i64 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %6, 63', '%33 = xor i64 %29, %32', '%34 = add nuw nsw i64 %33, %32', '%35 = icmp eq i64 %34, 2', '%36 = zext i1 %35 to i8', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %36, i8* %37, align 1', '%38 = add i64 %5, -12', '%39 = add i64 %8, 14', 'store i64 %39, i64* %PC, align 8', '%40 = inttoptr i64 %38 to i32*', 'store i32 2, i32* %40, align 4', '%41 = load i64, i64* %PC, align 8', '%42 = add i64 %41, -31', '%43 = add i64 %41, 5', '%44 = load i64, i64* %RSP, align 8', '%45 = add i64 %44, -8', '%46 = inttoptr i64 %45 to i64*', 'store i64 %43, i64* %46, align 8', 'store i64 %45, i64* %RSP, align 8', 'store i64 %42, i64* %PC, align 8', '%47 = tail call %struct.Memory* @sub_400560_checkFn_renamed_(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2)', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -4', '%50 = load i64, i64* %PC, align 8', '%51 = add i64 %50, 3', 'store i64 %51, i64* %PC, align 8', '%52 = inttoptr i64 %49 to i32*', '%53 = load i32, i32* %52, align 4', '%54 = zext i32 %53 to i64', 'store i64 %54, i64* %RAX, align 8', '%55 = load i64, i64* %RSP, align 8', '%56 = add i64 %55, 16', 'store i64 %56, i64* %RSP, align 8', '%57 = icmp ugt i64 %55, -17', '%58 = zext i1 %57 to i8', 'store i8 %58, i8* %12, align 1', '%59 = trunc i64 %56 to i32', '%60 = and i32 %59, 255', '%61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12', '%62 = trunc i32 %61 to i8', '%63 = and i8 %62, 1', '%64 = xor i8 %63, 1', 'store i8 %64, i8* %19, align 1', '%65 = xor i64 %55, 16', '%66 = xor i64 %65, %56', '%67 = lshr i64 %66, 4', '%68 = trunc i64 %67 to i8', '%69 = and i8 %68, 1', 'store i8 %69, i8* %25, align 1', '%70 = icmp eq i64 %56, 0', '%71 = zext i1 %70 to i8', 'store i8 %71, i8* %28, align 1', '%72 = lshr i64 %56, 63', '%73 = trunc i64 %72 to i8', 'store i8 %73, i8* %31, align 1', '%74 = lshr i64 %55, 63', '%75 = xor i64 %72, %74', '%76 = add nuw nsw i64 %75, %72', '%77 = icmp eq i64 %76, 2', '%78 = zext i1 %77 to i8', 'store i8 %78, i8* %37, align 1', '%79 = add i64 %50, 8', 'store i64 %79, i64* %PC, align 8', '%80 = add i64 %55, 24', '%81 = inttoptr i64 %56 to i64*', '%82 = load i64, i64* %81, align 8', 'store i64 %82, i64* %RBP, align 8', 'store i64 %80, i64* %RSP, align 8', '%83 = add i64 %50, 9', 'store i64 %83, i64* %PC, align 8', '%84 = inttoptr i64 %80 to i64*', '%85 = load i64, i64* %84, align 8', 'store i64 %85, i64* %PC, align 8', '%86 = add i64 %55, 32', 'store i64 %86, i64* %RSP, align 8', 'ret %struct.Memory* %47'])
Keep: block_400570:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = load i64, i64* %RSP, align 8
Found line to remove! %6 = add i64 %5, -8
Found line to remove! %7 = inttoptr i64 %6 to i64*
Found line to remove! store i64 %3, i64* %7, align 8
Found line to remove! %8 = load i64, i64* %PC, align 8
Found line to remove! store i64 %6, i64* %RBP, align 8
Found line to remove! %9 = add i64 %5, -24
Found line to remove! store i64 %9, i64* %RSP, align 8
Found line to remove! %10 = icmp ult i64 %6, 16
Found line to remove! %11 = zext i1 %10 to i8
Found line to remove! %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %11, i8* %12, align 1
Found line to remove! %13 = trunc i64 %9 to i32
Found line to remove! %14 = and i32 %13, 255
Found line to remove! %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
Found line to remove! %16 = trunc i32 %15 to i8
Found line to remove! %17 = and i8 %16, 1
Found line to remove! %18 = xor i8 %17, 1
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %18, i8* %19, align 1
Found line to remove! %20 = xor i64 %6, 16
Found line to remove! %21 = xor i64 %20, %9
Found line to remove! %22 = lshr i64 %21, 4
Found line to remove! %23 = trunc i64 %22 to i8
Found line to remove! %24 = and i8 %23, 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %24, i8* %25, align 1
Found line to remove! %26 = icmp eq i64 %9, 0
Found line to remove! %27 = zext i1 %26 to i8
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = lshr i64 %9, 63
Found line to remove! %30 = trunc i64 %29 to i8
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %30, i8* %31, align 1
Found line to remove! %32 = lshr i64 %6, 63
Found line to remove! %33 = xor i64 %29, %32
Found line to remove! %34 = add nuw nsw i64 %33, %32
Found line to remove! %35 = icmp eq i64 %34, 2
Found line to remove! %36 = zext i1 %35 to i8
Found line to remove! %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %36, i8* %37, align 1
Found line to remove! %38 = add i64 %5, -12
Found line to remove! %39 = add i64 %8, 14
Found line to remove! store i64 %39, i64* %PC, align 8
Found line to remove! %40 = inttoptr i64 %38 to i32*
Found line to remove! store i32 2, i32* %40, align 4
Found line to remove! %41 = load i64, i64* %PC, align 8
Found line to remove! %42 = add i64 %41, -31
Found line to remove! %43 = add i64 %41, 5
Found line to remove! %44 = load i64, i64* %RSP, align 8
Found line to remove! %45 = add i64 %44, -8
Found line to remove! %46 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %43, i64* %46, align 8
Found line to remove! store i64 %45, i64* %RSP, align 8
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %47 = tail call %struct.Memory* @sub_400560_checkFn_renamed_(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2)
Found line to remove! %48 = load i64, i64* %RBP, align 8
Found line to remove! %49 = add i64 %48, -4
Found line to remove! %50 = load i64, i64* %PC, align 8
Found line to remove! %51 = add i64 %50, 3
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = inttoptr i64 %49 to i32*
Found line to remove! %53 = load i32, i32* %52, align 4
Found line to remove! %54 = zext i32 %53 to i64
Found line to remove! store i64 %54, i64* %RAX, align 8
Found line to remove! %55 = load i64, i64* %RSP, align 8
Found line to remove! %56 = add i64 %55, 16
Found line to remove! store i64 %56, i64* %RSP, align 8
Found line to remove! %57 = icmp ugt i64 %55, -17
Found line to remove! %58 = zext i1 %57 to i8
Found line to remove! store i8 %58, i8* %12, align 1
Found line to remove! %59 = trunc i64 %56 to i32
Found line to remove! %60 = and i32 %59, 255
Found line to remove! %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
Found line to remove! %62 = trunc i32 %61 to i8
Found line to remove! %63 = and i8 %62, 1
Found line to remove! %64 = xor i8 %63, 1
Found line to remove! store i8 %64, i8* %19, align 1
Found line to remove! %65 = xor i64 %55, 16
Found line to remove! %66 = xor i64 %65, %56
Found line to remove! %67 = lshr i64 %66, 4
Found line to remove! %68 = trunc i64 %67 to i8
Found line to remove! %69 = and i8 %68, 1
Found line to remove! store i8 %69, i8* %25, align 1
Found line to remove! %70 = icmp eq i64 %56, 0
Found line to remove! %71 = zext i1 %70 to i8
Found line to remove! store i8 %71, i8* %28, align 1
Found line to remove! %72 = lshr i64 %56, 63
Found line to remove! %73 = trunc i64 %72 to i8
Found line to remove! store i8 %73, i8* %31, align 1
Found line to remove! %74 = lshr i64 %55, 63
Found line to remove! %75 = xor i64 %72, %74
Found line to remove! %76 = add nuw nsw i64 %75, %72
Found line to remove! %77 = icmp eq i64 %76, 2
Found line to remove! %78 = zext i1 %77 to i8
Found line to remove! store i8 %78, i8* %37, align 1
Found line to remove! %79 = add i64 %50, 8
Found line to remove! store i64 %79, i64* %PC, align 8
Found line to remove! %80 = add i64 %55, 24
Found line to remove! %81 = inttoptr i64 %56 to i64*
Found line to remove! %82 = load i64, i64* %81, align 8
Found line to remove! store i64 %82, i64* %RBP, align 8
Found line to remove! store i64 %80, i64* %RSP, align 8
Found line to remove! %83 = add i64 %50, 9
Found line to remove! store i64 %83, i64* %PC, align 8
Found line to remove! %84 = inttoptr i64 %80 to i64*
Found line to remove! %85 = load i64, i64* %84, align 8
Found line to remove! store i64 %85, i64* %PC, align 8
Found line to remove! %86 = add i64 %55, 32
Found line to remove! store i64 %86, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %47
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_13_1/doWork/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_13_1/binary/test.mcsema.calls_renamed.ll doWork
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
