Matching sub_400510_doWork Vs doWork


[Info] Retrieve Potential Matches...
[0x5575d6609a08]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d66103b0]:   %32 = lshr i64 %6, 63 {
	[0x5575d6664600]:  %31 = lshr i64 %11, 63
	[0x5575d6665e40]:  %34 = lshr i64 %8, 63
	[0x5575d6668040]:  %73 = lshr i64 %57, 63
	[0x5575d666aef0]:  %75 = lshr i64 %56, 63
	}

[0x5575d6610430]:   %65 = xor i64 %55, 16 {
	[0x5575d6642560]:  %22 = xor i64 %8, 16
	[0x5575d6664a60]:  %66 = xor i64 %56, 16
	}

[0x5575d66104b0]:   %66 = xor i64 %65, %56 {
	[0x5575d6642740]:  %23 = xor i64 %22, %11
	[0x5575d6664bb0]:  %67 = xor i64 %66, %57
	[0x5575d6666280]:  %35 = xor i64 %31, %34
	[0x5575d666b540]:  %76 = xor i64 %73, %75
	}

[0x5575d6610530]:   %67 = lshr i64 %66, 4 {
	[0x5575d6661df0]:  %24 = lshr i64 %23, 4
	[0x5575d6666e30]:  %68 = lshr i64 %67, 4
	}

[0x5575d6610598]:   %68 = trunc i64 %67 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d6610640]:   %35 = icmp eq i64 %34, 2 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d66106a8]:   %36 = zext i1 %35 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d6610720]:   store i8 %64, i8* %19, align 1, !tbaa !1275 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661a010]: %struct.State* %0 {
	[0x5575d66693f0]:%struct.State.0* %0
	}

[0x5575d661a050]: i64 %1 {
	[0x5575d66625a0]:i64 %1
	}

[0x5575d661a090]: %struct.Memory* %2 {
	[0x5575d666dc70]:%struct.Memory.31* %2
	}

[0x5575d661a138]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661b360]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5575d65e4e80]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5575d661b450]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5575d65e6df0]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5575d661b540]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5575d65e66d0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5575d661b630]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5575d65e6140]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5575d661b6e0]:   %4 = add i64 %1, 1 {
	[0x5575d65b03d0]:  %5 = add i64 %1, 1
	}

[0x5575d661b7b0]:   store i64 %4, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661b830]:   %6 = add i64 %5, -8 {
	[0x5575d6599730]:  %8 = add i64 %7, -8
	[0x5575d66fb6a0]:  %47 = add i64 %46, -8
	}

[0x5575d661b898]:   %7 = inttoptr i64 %6 to i64* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661b910]:   store i64 %3, i64* %7, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661b978]:   %8 = load i64, i64* %PC, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661b9f0]:   %17 = and i8 %16, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	[0x5575d6642bc0]:  %26 = and i8 %25, 1
	[0x5575d6664130]:  %64 = and i8 %63, 1
	[0x5575d6664f60]:  %70 = and i8 %69, 1
	}

[0x5575d661ba80]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661bb00]:   %9 = add i64 %5, -24 {
	[0x5575d6640e10]:  %11 = add i64 %7, -24
	}

[0x5575d661bb80]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661bc00]:   %10 = icmp ult i64 %6, 16 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661bc68]:   %11 = zext i1 %10 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661bd10]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5575d663f9a0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5575d661bda0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661be08]:   %13 = trunc i64 %9 to i32 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661be80]:   %14 = and i32 %13, 255 {
	[0x5575d65a8800]:  %61 = and i32 %60, 255
	[0x5575d66420e0]:  %16 = and i32 %15, 255
	}

[0x5575d661bf40]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5575d664b2e0]:  %call2_40051f = tail call %struct.Memory.31* @sub_400500.checkFn(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x5575d6663c40]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5575d6663d40]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x5575d661bfb8]:   %16 = trunc i32 %15 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661c030]:   %33 = xor i64 %29, %32 {
	[0x5575d6642740]:  %23 = xor i64 %22, %11
	[0x5575d6664bb0]:  %67 = xor i64 %66, %57
	[0x5575d6666280]:  %35 = xor i64 %31, %34
	[0x5575d666b540]:  %76 = xor i64 %73, %75
	}

[0x5575d661c0b0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5575d6662970]:  %36 = add nuw nsw i64 %35, %34
	[0x5575d666b630]:  %77 = add nuw nsw i64 %76, %73
	}

[0x5575d661c140]:   %18 = xor i8 %17, 1 {
	[0x5575d6642300]:  %20 = xor i8 %19, 1
	[0x5575d6664860]:  %65 = xor i8 %64, 1
	}

[0x5575d661c1f0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5575d6642660]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5575d661c280]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661c300]:   %20 = xor i64 %6, 16 {
	[0x5575d6642560]:  %22 = xor i64 %8, 16
	[0x5575d6664a60]:  %66 = xor i64 %56, 16
	}

[0x5575d661c380]:   %21 = xor i64 %20, %9 {
	[0x5575d6642740]:  %23 = xor i64 %22, %11
	[0x5575d6664bb0]:  %67 = xor i64 %66, %57
	[0x5575d6666280]:  %35 = xor i64 %31, %34
	[0x5575d666b540]:  %76 = xor i64 %73, %75
	}

[0x5575d661c400]:   %22 = lshr i64 %21, 4 {
	[0x5575d6661df0]:  %24 = lshr i64 %23, 4
	[0x5575d6666e30]:  %68 = lshr i64 %67, 4
	}

[0x5575d661c468]:   %23 = trunc i64 %22 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661c4e0]:   %24 = and i8 %23, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	[0x5575d6642bc0]:  %26 = and i8 %25, 1
	[0x5575d6664130]:  %64 = and i8 %63, 1
	[0x5575d6664f60]:  %70 = and i8 %69, 1
	}

[0x5575d661c590]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5575d6643ef0]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5575d661c620]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661c6a0]:   %26 = icmp eq i64 %9, 0 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661c708]:   %27 = zext i1 %26 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661c7b0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5575d664acf0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5575d661c840]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661c8c0]:   %29 = lshr i64 %9, 63 {
	[0x5575d6664600]:  %31 = lshr i64 %11, 63
	[0x5575d6665e40]:  %34 = lshr i64 %8, 63
	[0x5575d6668040]:  %73 = lshr i64 %57, 63
	[0x5575d666aef0]:  %75 = lshr i64 %56, 63
	}

[0x5575d661c928]:   %30 = trunc i64 %29 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661c9d0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5575d664af50]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5575d661ca60]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661d330]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5575d664b080]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5575d661d3c0]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661d440]:   %38 = add i64 %5, -12 {
	[0x5575d664d290]:  %40 = add i64 %7, -12
	}

[0x5575d661d4c0]:   %39 = add i64 %8, 14 {
	[0x5575d664d3c0]:  %41 = add i64 %10, 14
	}

[0x5575d661d540]:   store i64 %39, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661d5a8]:   %40 = inttoptr i64 %38 to i32* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661d620]:   store i32 2, i32* %40, align 4 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661d688]:   %41 = load i64, i64* %PC, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661d740]:   %42 = add i64 %41, -31 {
	[0x5575d6683200]:  %44 = add i64 %43, -31
	}

[0x5575d661d7c0]:   %43 = add i64 %41, 5 {
	[0x5575d66f8e80]:  %45 = add i64 %43, 5
	}

[0x5575d661d828]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661d8a0]:   %45 = add i64 %44, -8 {
	[0x5575d6599730]:  %8 = add i64 %7, -8
	[0x5575d66fb6a0]:  %47 = add i64 %46, -8
	}

[0x5575d661d908]:   %46 = inttoptr i64 %45 to i64* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661d980]:   store i64 %43, i64* %46, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661da00]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661da80]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661db80]:   %47 = tail call %struct.Memory* @sub_400500_checkFn(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5575d664b2e0]:  %call2_40051f = tail call %struct.Memory.31* @sub_400500.checkFn(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x5575d6663c40]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5575d6663d40]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x5575d661dc48]:   %48 = load i64, i64* %RBP, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661dd00]:   %49 = add i64 %48, -4 {
	[0x5575d6702380]:  %50 = add i64 %49, -4
	}

[0x5575d661dd68]:   %50 = load i64, i64* %PC, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661dde0]:   %51 = add i64 %50, 3 {
	[0x5575d6704b70]:  %52 = add i64 %51, 3
	}

[0x5575d661de60]:   store i64 %51, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661dec8]:   %52 = inttoptr i64 %49 to i32* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661df28]:   %53 = load i32, i32* %52, align 4 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661df88]:   %54 = zext i32 %53 to i64 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661e000]:   store i64 %54, i64* %RAX, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661e068]:   %55 = load i64, i64* %RSP, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661e0e0]:   %56 = add i64 %55, 16 {
	[0x5575d670aa70]:  %57 = add i64 %56, 16
	}

[0x5575d661e160]:   store i64 %56, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661e220]:   %57 = icmp ugt i64 %55, -17 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661e288]:   %58 = zext i1 %57 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661e300]:   store i8 %58, i8* %12, align 1, !tbaa !1261 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661e368]:   %59 = trunc i64 %56 to i32 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661e3e0]:   %60 = and i32 %59, 255 {
	[0x5575d65a8800]:  %61 = and i32 %60, 255
	[0x5575d66420e0]:  %16 = and i32 %15, 255
	}

[0x5575d661e460]:   %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9 {
	[0x5575d664b2e0]:  %call2_40051f = tail call %struct.Memory.31* @sub_400500.checkFn(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	[0x5575d6663c40]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x5575d6663d40]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x5575d661e528]:   %62 = trunc i32 %61 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661e5a0]:   %63 = and i8 %62, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	[0x5575d6642bc0]:  %26 = and i8 %25, 1
	[0x5575d6664130]:  %64 = and i8 %63, 1
	[0x5575d6664f60]:  %70 = and i8 %69, 1
	}

[0x5575d661e620]:   %64 = xor i8 %63, 1 {
	[0x5575d6642300]:  %20 = xor i8 %19, 1
	[0x5575d6664860]:  %65 = xor i8 %64, 1
	}

[0x5575d661eab0]:   %69 = and i8 %68, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	[0x5575d6642bc0]:  %26 = and i8 %25, 1
	[0x5575d6664130]:  %64 = and i8 %63, 1
	[0x5575d6664f60]:  %70 = and i8 %69, 1
	}

[0x5575d661eb30]:   store i8 %69, i8* %25, align 1, !tbaa !1276 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661ebb0]:   %70 = icmp eq i64 %56, 0 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661ec18]:   %71 = zext i1 %70 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661ec90]:   store i8 %71, i8* %28, align 1, !tbaa !1277 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661ed10]:   %72 = lshr i64 %56, 63 {
	[0x5575d6664600]:  %31 = lshr i64 %11, 63
	[0x5575d6665e40]:  %34 = lshr i64 %8, 63
	[0x5575d6668040]:  %73 = lshr i64 %57, 63
	[0x5575d666aef0]:  %75 = lshr i64 %56, 63
	}

[0x5575d661ed78]:   %73 = trunc i64 %72 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661edf0]:   store i8 %73, i8* %31, align 1, !tbaa !1278 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661ee70]:   %74 = lshr i64 %55, 63 {
	[0x5575d6664600]:  %31 = lshr i64 %11, 63
	[0x5575d6665e40]:  %34 = lshr i64 %8, 63
	[0x5575d6668040]:  %73 = lshr i64 %57, 63
	[0x5575d666aef0]:  %75 = lshr i64 %56, 63
	}

[0x5575d661eef0]:   %75 = xor i64 %72, %74 {
	[0x5575d6642740]:  %23 = xor i64 %22, %11
	[0x5575d6664bb0]:  %67 = xor i64 %66, %57
	[0x5575d6666280]:  %35 = xor i64 %31, %34
	[0x5575d666b540]:  %76 = xor i64 %73, %75
	}

[0x5575d661ef70]:   %76 = add nuw nsw i64 %75, %72 {
	[0x5575d6662970]:  %36 = add nuw nsw i64 %35, %34
	[0x5575d666b630]:  %77 = add nuw nsw i64 %76, %73
	}

[0x5575d661eff0]:   %77 = icmp eq i64 %76, 2 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661f058]:   %78 = zext i1 %77 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661f0d0]:   store i8 %78, i8* %37, align 1, !tbaa !1279 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f150]:   %79 = add i64 %50, 8 {
	[0x5575d66622d0]:  %80 = add i64 %51, 8
	}

[0x5575d661f1d0]:   store i64 %79, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f290]:   %80 = add i64 %55, 24 {
	[0x5575d666da30]:  %81 = add i64 %56, 24
	}

[0x5575d661f2f8]:   %81 = inttoptr i64 %56 to i64* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661f358]:   %82 = load i64, i64* %81, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661f3d0]:   store i64 %82, i64* %RBP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f450]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f4d0]:   %83 = add i64 %50, 9 {
	[0x5575d666d630]:  %84 = add i64 %51, 9
	}

[0x5575d661f550]:   store i64 %83, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f5b8]:   %84 = inttoptr i64 %80 to i64* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661f618]:   %85 = load i64, i64* %84, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661f690]:   store i64 %85, i64* %PC, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f710]:   %86 = add i64 %55, 32 {
	[0x5575d6670cc0]:  %87 = add i64 %56, 32
	}

[0x5575d661f790]:   store i64 %86, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661f7f8]:   ret %struct.Memory* %47 {
	[0x5575d664a718]:  ret %struct.Memory.31* %call2_40051f
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x5575d6645058]:   %49 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5575d6609a08]:   %3 = load i64, i64* %RBP, align 8


Uprime : [0x5575d661b910]:   store i64 %3, i64* %7, align 8


Uprime Matches: [0x5575d659a010]:   store i64 %5, i64* %3, align 8
[0x5575d65fd3e0]:   store i8 %59, i8* %14, align 1
[0x5575d663f3a0]:   store i64 %11, i64* %6, align 8
[0x5575d663fd40]:   store i64 %4, i64* %9, align 8
[0x5575d663fe50]:   store i64 %8, i64* %RBP.i, align 8
[0x5575d66411e0]:   store i8 %29, i8* %30, align 1
[0x5575d6641fd0]:   store i8 %13, i8* %14, align 1
[0x5575d6642c90]:   store i8 %26, i8* %27, align 1
[0x5575d664d160]:   store i8 %38, i8* %39, align 1
[0x5575d664d4f0]:   store i64 %41, i64* %3, align 8
[0x5575d6661570]:   store i8 %20, i8* %21, align 1
[0x5575d6662150]:   store i8 %79, i8* %39, align 1
[0x5575d6664d80]:   store i8 %65, i8* %21, align 1
[0x5575d6664ea0]:   store i8 %32, i8* %33, align 1
[0x5575d6665300]:   store i64 %80, i64* %3, align 8
[0x5575d6667340]:   store i64 %84, i64* %3, align 8
[0x5575d66677b0]:   store i8 %70, i8* %27, align 1
[0x5575d6667d30]:   store i8 %72, i8* %30, align 1
[0x5575d666a9e0]:   store i8 %74, i8* %33, align 1
[0x5575d666ddc0]:   store i64 %81, i64* %6, align 8
[0x5575d666e030]:   store i64 %83, i64* %RBP.i, align 8
[0x5575d6670930]:   store i64 %86, i64* %3, align 8
[0x5575d6670e40]:   store i64 %87, i64* %6, align 8
[0x5575d6681320]:   store i32 2, i32* %42, align 4
[0x5575d66fa190]:   store i64 %45, i64* %48, align 8
[0x5575d66ffe10]:   store i64 %44, i64* %3, align 8
[0x5575d6700be0]:   store i64 %47, i64* %6, align 8
[0x5575d67036d0]:   store i64 %52, i64* %3, align 8
[0x5575d67066a0]:   store i64 %55, i64* %RAX.i, align 8
[0x5575d67151b0]:   store i64 %57, i64* %6, align 8


Adj: [0x5575d6702380]:   %50 = add i64 %49, -4


Removing: [0x5575d6644cc8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x5575d661a138]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5575d661d440]:   %38 = add i64 %5, -12


Uprime Matches: [0x5575d664d290]:   %40 = add i64 %7, -12


Adj: [0x5575d66fb6a0]:   %47 = add i64 %46, -8


Removing: [0x5575d6646f48]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x5575d661a138]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5575d661d440]:   %38 = add i64 %5, -12


Uprime Matches: [0x5575d664d290]:   %40 = add i64 %7, -12


Adj: [0x5575d65fd840]:   %58 = icmp ugt i64 %56, -17
[0x5575d6664a60]:   %66 = xor i64 %56, 16
[0x5575d666aef0]:   %75 = lshr i64 %56, 63
[0x5575d666da30]:   %81 = add i64 %56, 24
[0x5575d6670cc0]:   %87 = add i64 %56, 32
[0x5575d670aa70]:   %57 = add i64 %56, 16


Removing: [0x5575d6644b98]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x5575d661b978]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x5575d661d4c0]:   %39 = add i64 %8, 14


Uprime Matches: [0x5575d664d3c0]:   %41 = add i64 %10, 14


Adj: [0x5575d6683200]:   %44 = add i64 %43, -31
[0x5575d66f8e80]:   %45 = add i64 %43, 5


Removing: [0x5575d66452b8]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x5575d661b978]:   %8 = load i64, i64* %PC, align 8


Uprime : [0x5575d661d4c0]:   %39 = add i64 %8, 14


Uprime Matches: [0x5575d664d3c0]:   %41 = add i64 %10, 14


Adj: [0x5575d66622d0]:   %80 = add i64 %51, 8
[0x5575d666d630]:   %84 = add i64 %51, 9
[0x5575d6704b70]:   %52 = add i64 %51, 3


Removing: [0x5575d663f2e8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d66420e0]:   %16 = and i32 %15, 255


Removing: [0x5575d6644348]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d6664ea0]:   store i8 %32, i8* %33, align 1


Removing: [0x5575d66471a8]:   %60 = trunc i64 %57 to i32
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d65a8800]:   %61 = and i32 %60, 255


Removing: [0x5575d6648968]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d666a9e0]:   store i8 %74, i8* %33, align 1


Removing: [0x5575d6642bc0]:   %26 = and i8 %25, 1
From the pot matches of: [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime : [0x5575d661c140]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5575d6642300]:   %20 = xor i8 %19, 1
[0x5575d6664860]:   %65 = xor i8 %64, 1


Adj: [0x5575d6642c90]:   store i8 %26, i8* %27, align 1


Removing: [0x5575d6664f60]:   %70 = and i8 %69, 1
From the pot matches of: [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime : [0x5575d661c140]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5575d6642300]:   %20 = xor i8 %19, 1
[0x5575d6664860]:   %65 = xor i8 %64, 1


Adj: [0x5575d66677b0]:   store i8 %70, i8* %27, align 1


Removing: [0x5575d663d018]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5575d661d688]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x5575d661d7c0]:   %43 = add i64 %41, 5


Uprime Matches: [0x5575d66f8e80]:   %45 = add i64 %43, 5


Adj: [0x5575d664d3c0]:   %41 = add i64 %10, 14


Removing: [0x5575d66452b8]:   %51 = load i64, i64* %3, align 8
From the pot matches of: [0x5575d661d688]:   %41 = load i64, i64* %PC, align 8


Uprime : [0x5575d661d7c0]:   %43 = add i64 %41, 5


Uprime Matches: [0x5575d66f8e80]:   %45 = add i64 %43, 5


Adj: [0x5575d66622d0]:   %80 = add i64 %51, 8
[0x5575d666d630]:   %84 = add i64 %51, 9
[0x5575d6704b70]:   %52 = add i64 %51, 3


Removing: [0x5575d6646f48]:   %56 = load i64, i64* %6, align 8
From the pot matches of: [0x5575d661d828]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5575d661d8a0]:   %45 = add i64 %44, -8


Uprime Matches: [0x5575d6599730]:   %8 = add i64 %7, -8
[0x5575d66fb6a0]:   %47 = add i64 %46, -8


Adj: [0x5575d65fd840]:   %58 = icmp ugt i64 %56, -17
[0x5575d6664a60]:   %66 = xor i64 %56, 16
[0x5575d666aef0]:   %75 = lshr i64 %56, 63
[0x5575d666da30]:   %81 = add i64 %56, 24
[0x5575d6670cc0]:   %87 = add i64 %56, 32
[0x5575d670aa70]:   %57 = add i64 %56, 16


Removing: [0x5575d6599730]:   %8 = add i64 %7, -8
From the pot matches of: [0x5575d661d8a0]:   %45 = add i64 %44, -8


Uprime : [0x5575d661da00]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x5575d663f3a0]:   store i64 %11, i64* %6, align 8
[0x5575d666ddc0]:   store i64 %81, i64* %6, align 8
[0x5575d6670e40]:   store i64 %87, i64* %6, align 8
[0x5575d6700be0]:   store i64 %47, i64* %6, align 8
[0x5575d67151b0]:   store i64 %57, i64* %6, align 8


Adj: [0x5575d6631358]:   %9 = inttoptr i64 %8 to i64*
[0x5575d663fe50]:   store i64 %8, i64* %RBP.i, align 8
[0x5575d6641bd0]:   %12 = icmp ult i64 %8, 16
[0x5575d6642560]:   %22 = xor i64 %8, 16
[0x5575d6665e40]:   %34 = lshr i64 %8, 63


Removing: [0x5575d65adc38]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x5575d661dc48]:   %48 = load i64, i64* %RBP, align 8


Uprime : [0x5575d661dd00]:   %49 = add i64 %48, -4


Uprime Matches: [0x5575d6702380]:   %50 = add i64 %49, -4


Adj: [0x5575d663fd40]:   store i64 %4, i64* %9, align 8


Removing: [0x5575d663d018]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x5575d661dd68]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x5575d661f4d0]:   %83 = add i64 %50, 9


Uprime Matches: [0x5575d666d630]:   %84 = add i64 %51, 9


Adj: [0x5575d664d3c0]:   %41 = add i64 %10, 14


Removing: [0x5575d6644b98]:   %43 = load i64, i64* %3, align 8
From the pot matches of: [0x5575d661dd68]:   %50 = load i64, i64* %PC, align 8


Uprime : [0x5575d661f4d0]:   %83 = add i64 %50, 9


Uprime Matches: [0x5575d666d630]:   %84 = add i64 %51, 9


Adj: [0x5575d6683200]:   %44 = add i64 %43, -31
[0x5575d66f8e80]:   %45 = add i64 %43, 5


Removing: [0x5575d6608d38]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5575d661e068]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x5575d661f710]:   %86 = add i64 %55, 32


Uprime Matches: [0x5575d6670cc0]:   %87 = add i64 %56, 32


Adj: [0x5575d6599730]:   %8 = add i64 %7, -8
[0x5575d6640e10]:   %11 = add i64 %7, -24
[0x5575d664d290]:   %40 = add i64 %7, -12


Removing: [0x5575d6644cc8]:   %46 = load i64, i64* %6, align 8
From the pot matches of: [0x5575d661e068]:   %55 = load i64, i64* %RSP, align 8


Uprime : [0x5575d661f710]:   %86 = add i64 %55, 32


Uprime Matches: [0x5575d6670cc0]:   %87 = add i64 %56, 32


Adj: [0x5575d66fb6a0]:   %47 = add i64 %46, -8


Removing: [0x5575d663f2e8]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d66420e0]:   %16 = and i32 %15, 255


Removing: [0x5575d6644348]:   %32 = trunc i64 %31 to i8
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d6664ea0]:   store i8 %32, i8* %33, align 1


Removing: [0x5575d66471a8]:   %60 = trunc i64 %57 to i32
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d65a8800]:   %61 = and i32 %60, 255


Removing: [0x5575d6648968]:   %74 = trunc i64 %73 to i8
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6642bc0]:   %26 = and i8 %25, 1
[0x5575d6664130]:   %64 = and i8 %63, 1
[0x5575d6664f60]:   %70 = and i8 %69, 1


Adj: [0x5575d666a9e0]:   store i8 %74, i8* %33, align 1


Removing: [0x5575d6642bc0]:   %26 = and i8 %25, 1
From the pot matches of: [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime : [0x5575d661e620]:   %64 = xor i8 %63, 1


Uprime Matches: [0x5575d6642300]:   %20 = xor i8 %19, 1
[0x5575d6664860]:   %65 = xor i8 %64, 1


Adj: [0x5575d6642c90]:   store i8 %26, i8* %27, align 1


Removing: [0x5575d6664f60]:   %70 = and i8 %69, 1
From the pot matches of: [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime : [0x5575d661e620]:   %64 = xor i8 %63, 1


Uprime Matches: [0x5575d6642300]:   %20 = xor i8 %19, 1
[0x5575d6664860]:   %65 = xor i8 %64, 1


Adj: [0x5575d66677b0]:   store i8 %70, i8* %27, align 1

Round: 1

Removing: [0x5575d6643ca8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6664130]:   %64 = and i8 %63, 1


Adj: [0x5575d6642bc0]:   %26 = and i8 %25, 1


Removing: [0x5575d6647668]:   %69 = trunc i64 %68 to i8
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6664130]:   %64 = and i8 %63, 1


Adj: [0x5575d6664f60]:   %70 = and i8 %69, 1


Removing: [0x5575d6608d38]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x5575d661d828]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x5575d661d8a0]:   %45 = add i64 %44, -8


Uprime Matches: [0x5575d66fb6a0]:   %47 = add i64 %46, -8


Adj: [0x5575d6599730]:   %8 = add i64 %7, -8
[0x5575d6640e10]:   %11 = add i64 %7, -24
[0x5575d664d290]:   %40 = add i64 %7, -12


Removing: [0x5575d6643ca8]:   %25 = trunc i64 %24 to i8
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6664130]:   %64 = and i8 %63, 1


Adj: [0x5575d6642bc0]:   %26 = and i8 %25, 1


Removing: [0x5575d6647668]:   %69 = trunc i64 %68 to i8
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1
[0x5575d6664130]:   %64 = and i8 %63, 1


Adj: [0x5575d6664f60]:   %70 = and i8 %69, 1

Round: 2


[Info] After Dual Simulation: Round: 0
[0x5575d6609a08]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5575d66103b0]:   %32 = lshr i64 %6, 63 {
	[0x5575d6665e40]:  %34 = lshr i64 %8, 63
	}

[0x5575d6610430]:   %65 = xor i64 %55, 16 {
	[0x5575d6664a60]:  %66 = xor i64 %56, 16
	}

[0x5575d66104b0]:   %66 = xor i64 %65, %56 {
	[0x5575d6664bb0]:  %67 = xor i64 %66, %57
	}

[0x5575d6610530]:   %67 = lshr i64 %66, 4 {
	[0x5575d6666e30]:  %68 = lshr i64 %67, 4
	}

[0x5575d6610598]:   %68 = trunc i64 %67 to i8 {
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	}

[0x5575d6610640]:   %35 = icmp eq i64 %34, 2 {
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	}

[0x5575d66106a8]:   %36 = zext i1 %35 to i8 {
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	}

[0x5575d6610720]:   store i8 %64, i8* %19, align 1, !tbaa !1275 {
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	}

[0x5575d661a010]: %struct.State* %0 {
	[0x5575d66693f0]:%struct.State.0* %0
	}

[0x5575d661a050]: i64 %1 {
	[0x5575d66625a0]:i64 %1
	}

[0x5575d661a090]: %struct.Memory* %2 {
	[0x5575d666dc70]:%struct.Memory.31* %2
	}

[0x5575d661a138]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	}

[0x5575d661b360]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5575d65e4e80]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5575d661b450]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5575d65e6df0]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5575d661b540]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5575d65e66d0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5575d661b630]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5575d65e6140]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5575d661b6e0]:   %4 = add i64 %1, 1 {
	[0x5575d65b03d0]:  %5 = add i64 %1, 1
	}

[0x5575d661b7b0]:   store i64 %4, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	}

[0x5575d661b830]:   %6 = add i64 %5, -8 {
	[0x5575d6599730]:  %8 = add i64 %7, -8
	}

[0x5575d661b898]:   %7 = inttoptr i64 %6 to i64* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5575d661b910]:   store i64 %3, i64* %7, align 8 {
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	}

[0x5575d661b978]:   %8 = load i64, i64* %PC, align 8 {
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	}

[0x5575d661b9f0]:   %17 = and i8 %16, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	[0x5575d6664130]:  %64 = and i8 %63, 1
	}

[0x5575d661ba80]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5575d661bb00]:   %9 = add i64 %5, -24 {
	[0x5575d6640e10]:  %11 = add i64 %7, -24
	}

[0x5575d661bb80]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	}

[0x5575d661bc00]:   %10 = icmp ult i64 %6, 16 {
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	}

[0x5575d661bc68]:   %11 = zext i1 %10 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	}

[0x5575d661bd10]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5575d663f9a0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5575d661bda0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	}

[0x5575d661be08]:   %13 = trunc i64 %9 to i32 {
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	}

[0x5575d661be80]:   %14 = and i32 %13, 255 {
	[0x5575d66420e0]:  %16 = and i32 %15, 255
	}

[0x5575d661bf40]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5575d6663c40]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5575d661bfb8]:   %16 = trunc i32 %15 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	}

[0x5575d661c030]:   %33 = xor i64 %29, %32 {
	[0x5575d6666280]:  %35 = xor i64 %31, %34
	}

[0x5575d661c0b0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5575d6662970]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5575d661c140]:   %18 = xor i8 %17, 1 {
	[0x5575d6642300]:  %20 = xor i8 %19, 1
	[0x5575d6664860]:  %65 = xor i8 %64, 1
	}

[0x5575d661c1f0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5575d6642660]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5575d661c280]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	}

[0x5575d661c300]:   %20 = xor i64 %6, 16 {
	[0x5575d6642560]:  %22 = xor i64 %8, 16
	}

[0x5575d661c380]:   %21 = xor i64 %20, %9 {
	[0x5575d6642740]:  %23 = xor i64 %22, %11
	}

[0x5575d661c400]:   %22 = lshr i64 %21, 4 {
	[0x5575d6661df0]:  %24 = lshr i64 %23, 4
	}

[0x5575d661c468]:   %23 = trunc i64 %22 to i8 {
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	}

[0x5575d661c4e0]:   %24 = and i8 %23, 1 {
	[0x5575d6642bc0]:  %26 = and i8 %25, 1
	}

[0x5575d661c590]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5575d6643ef0]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5575d661c620]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	}

[0x5575d661c6a0]:   %26 = icmp eq i64 %9, 0 {
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	}

[0x5575d661c708]:   %27 = zext i1 %26 to i8 {
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	}

[0x5575d661c7b0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5575d664acf0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5575d661c840]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	}

[0x5575d661c8c0]:   %29 = lshr i64 %9, 63 {
	[0x5575d6664600]:  %31 = lshr i64 %11, 63
	}

[0x5575d661c928]:   %30 = trunc i64 %29 to i8 {
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	}

[0x5575d661c9d0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5575d664af50]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5575d661ca60]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	}

[0x5575d661d330]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5575d664b080]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5575d661d3c0]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	}

[0x5575d661d440]:   %38 = add i64 %5, -12 {
	[0x5575d664d290]:  %40 = add i64 %7, -12
	}

[0x5575d661d4c0]:   %39 = add i64 %8, 14 {
	[0x5575d664d3c0]:  %41 = add i64 %10, 14
	}

[0x5575d661d540]:   store i64 %39, i64* %PC, align 8 {
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	}

[0x5575d661d5a8]:   %40 = inttoptr i64 %38 to i32* {
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	}

[0x5575d661d620]:   store i32 2, i32* %40, align 4 {
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	}

[0x5575d661d688]:   %41 = load i64, i64* %PC, align 8 {
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	}

[0x5575d661d740]:   %42 = add i64 %41, -31 {
	[0x5575d6683200]:  %44 = add i64 %43, -31
	}

[0x5575d661d7c0]:   %43 = add i64 %41, 5 {
	[0x5575d66f8e80]:  %45 = add i64 %43, 5
	}

[0x5575d661d828]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	}

[0x5575d661d8a0]:   %45 = add i64 %44, -8 {
	[0x5575d66fb6a0]:  %47 = add i64 %46, -8
	}

[0x5575d661d908]:   %46 = inttoptr i64 %45 to i64* {
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5575d661d980]:   store i64 %43, i64* %46, align 8 {
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	}

[0x5575d661da00]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	}

[0x5575d661da80]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	}

[0x5575d661db80]:   %47 = tail call %struct.Memory* @sub_400500_checkFn(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5575d664b2e0]:  %call2_40051f = tail call %struct.Memory.31* @sub_400500.checkFn(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x5575d661dc48]:   %48 = load i64, i64* %RBP, align 8 {
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	}

[0x5575d661dd00]:   %49 = add i64 %48, -4 {
	[0x5575d6702380]:  %50 = add i64 %49, -4
	}

[0x5575d661dd68]:   %50 = load i64, i64* %PC, align 8 {
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	}

[0x5575d661dde0]:   %51 = add i64 %50, 3 {
	[0x5575d6704b70]:  %52 = add i64 %51, 3
	}

[0x5575d661de60]:   store i64 %51, i64* %PC, align 8 {
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	}

[0x5575d661dec8]:   %52 = inttoptr i64 %49 to i32* {
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	}

[0x5575d661df28]:   %53 = load i32, i32* %52, align 4 {
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	}

[0x5575d661df88]:   %54 = zext i32 %53 to i64 {
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	}

[0x5575d661e000]:   store i64 %54, i64* %RAX, align 8, !tbaa !1257 {
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x5575d661e068]:   %55 = load i64, i64* %RSP, align 8 {
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	}

[0x5575d661e0e0]:   %56 = add i64 %55, 16 {
	[0x5575d670aa70]:  %57 = add i64 %56, 16
	}

[0x5575d661e160]:   store i64 %56, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661e220]:   %57 = icmp ugt i64 %55, -17 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	}

[0x5575d661e288]:   %58 = zext i1 %57 to i8 {
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	}

[0x5575d661e300]:   store i8 %58, i8* %12, align 1, !tbaa !1261 {
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	}

[0x5575d661e368]:   %59 = trunc i64 %56 to i32 {
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	}

[0x5575d661e3e0]:   %60 = and i32 %59, 255 {
	[0x5575d65a8800]:  %61 = and i32 %60, 255
	}

[0x5575d661e460]:   %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9 {
	[0x5575d6663d40]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x5575d661e528]:   %62 = trunc i32 %61 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	}

[0x5575d661e5a0]:   %63 = and i8 %62, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	[0x5575d6664130]:  %64 = and i8 %63, 1
	}

[0x5575d661e620]:   %64 = xor i8 %63, 1 {
	[0x5575d6642300]:  %20 = xor i8 %19, 1
	[0x5575d6664860]:  %65 = xor i8 %64, 1
	}

[0x5575d661eab0]:   %69 = and i8 %68, 1 {
	[0x5575d6664f60]:  %70 = and i8 %69, 1
	}

[0x5575d661eb30]:   store i8 %69, i8* %25, align 1, !tbaa !1276 {
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	}

[0x5575d661ebb0]:   %70 = icmp eq i64 %56, 0 {
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661ec18]:   %71 = zext i1 %70 to i8 {
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	}

[0x5575d661ec90]:   store i8 %71, i8* %28, align 1, !tbaa !1277 {
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	}

[0x5575d661ed10]:   %72 = lshr i64 %56, 63 {
	[0x5575d6668040]:  %73 = lshr i64 %57, 63
	}

[0x5575d661ed78]:   %73 = trunc i64 %72 to i8 {
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661edf0]:   store i8 %73, i8* %31, align 1, !tbaa !1278 {
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	}

[0x5575d661ee70]:   %74 = lshr i64 %55, 63 {
	[0x5575d666aef0]:  %75 = lshr i64 %56, 63
	}

[0x5575d661eef0]:   %75 = xor i64 %72, %74 {
	[0x5575d666b540]:  %76 = xor i64 %73, %75
	}

[0x5575d661ef70]:   %76 = add nuw nsw i64 %75, %72 {
	[0x5575d666b630]:  %77 = add nuw nsw i64 %76, %73
	}

[0x5575d661eff0]:   %77 = icmp eq i64 %76, 2 {
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	}

[0x5575d661f058]:   %78 = zext i1 %77 to i8 {
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661f0d0]:   store i8 %78, i8* %37, align 1, !tbaa !1279 {
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	}

[0x5575d661f150]:   %79 = add i64 %50, 8 {
	[0x5575d66622d0]:  %80 = add i64 %51, 8
	}

[0x5575d661f1d0]:   store i64 %79, i64* %PC, align 8 {
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	}

[0x5575d661f290]:   %80 = add i64 %55, 24 {
	[0x5575d666da30]:  %81 = add i64 %56, 24
	}

[0x5575d661f2f8]:   %81 = inttoptr i64 %56 to i64* {
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	}

[0x5575d661f358]:   %82 = load i64, i64* %81, align 8 {
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	}

[0x5575d661f3d0]:   store i64 %82, i64* %RBP, align 8, !tbaa !1257 {
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	}

[0x5575d661f450]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	}

[0x5575d661f4d0]:   %83 = add i64 %50, 9 {
	[0x5575d666d630]:  %84 = add i64 %51, 9
	}

[0x5575d661f550]:   store i64 %83, i64* %PC, align 8 {
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	}

[0x5575d661f5b8]:   %84 = inttoptr i64 %80 to i64* {
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661f618]:   %85 = load i64, i64* %84, align 8 {
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661f690]:   store i64 %85, i64* %PC, align 8, !tbaa !1257 {
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	}

[0x5575d661f710]:   %86 = add i64 %55, 32 {
	[0x5575d6670cc0]:  %87 = add i64 %56, 32
	}

[0x5575d661f790]:   store i64 %86, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	}

[0x5575d661f7f8]:   ret %struct.Memory* %47 {
	[0x5575d664a718]:  ret %struct.Memory.31* %call2_40051f
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x5575d661a0d0]: block_400510 {
	[0x5575d665fbc0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x5575d6664860]:   %65 = xor i8 %64, 1
From the pot matches of: [0x5575d661c140]:   %18 = xor i8 %17, 1


Uprime : [0x5575d661c280]:   store i8 %18, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x5575d6661570]:   store i8 %20, i8* %21, align 1


Adj: [0x5575d6664d80]:   store i8 %65, i8* %21, align 1


Removing: [0x5575d6642300]:   %20 = xor i8 %19, 1
From the pot matches of: [0x5575d661e620]:   %64 = xor i8 %63, 1


Uprime : [0x5575d6610720]:   store i8 %64, i8* %19, align 1, !tbaa !1275


Uprime Matches: [0x5575d6664d80]:   store i8 %65, i8* %21, align 1


Adj: [0x5575d6661570]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x5575d6664130]:   %64 = and i8 %63, 1
From the pot matches of: [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime : [0x5575d661c140]:   %18 = xor i8 %17, 1


Uprime Matches: [0x5575d6642300]:   %20 = xor i8 %19, 1


Adj: [0x5575d6664860]:   %65 = xor i8 %64, 1


Removing: [0x5575d66421f0]:   %19 = and i8 %18, 1
From the pot matches of: [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime : [0x5575d661e620]:   %64 = xor i8 %63, 1


Uprime Matches: [0x5575d6664860]:   %65 = xor i8 %64, 1


Adj: [0x5575d6642300]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x5575d6647538]:   %63 = trunc i32 %62 to i8
From the pot matches of: [0x5575d661bfb8]:   %16 = trunc i32 %15 to i8


Uprime : [0x5575d661b9f0]:   %17 = and i8 %16, 1


Uprime Matches: [0x5575d66421f0]:   %19 = and i8 %18, 1


Adj: [0x5575d6664130]:   %64 = and i8 %63, 1


Removing: [0x5575d663ea48]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x5575d661e528]:   %62 = trunc i32 %61 to i8


Uprime : [0x5575d661e5a0]:   %63 = and i8 %62, 1


Uprime Matches: [0x5575d6664130]:   %64 = and i8 %63, 1


Adj: [0x5575d66421f0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x5575d6609a08]:   %3 = load i64, i64* %RBP, align 8 {
	[0x5575d65adc38]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x5575d66103b0]:   %32 = lshr i64 %6, 63 {
	[0x5575d6665e40]:  %34 = lshr i64 %8, 63
	}

[0x5575d6610430]:   %65 = xor i64 %55, 16 {
	[0x5575d6664a60]:  %66 = xor i64 %56, 16
	}

[0x5575d66104b0]:   %66 = xor i64 %65, %56 {
	[0x5575d6664bb0]:  %67 = xor i64 %66, %57
	}

[0x5575d6610530]:   %67 = lshr i64 %66, 4 {
	[0x5575d6666e30]:  %68 = lshr i64 %67, 4
	}

[0x5575d6610598]:   %68 = trunc i64 %67 to i8 {
	[0x5575d6647668]:  %69 = trunc i64 %68 to i8
	}

[0x5575d6610640]:   %35 = icmp eq i64 %34, 2 {
	[0x5575d6646940]:  %37 = icmp eq i64 %36, 2
	}

[0x5575d66106a8]:   %36 = zext i1 %35 to i8 {
	[0x5575d6644938]:  %38 = zext i1 %37 to i8
	}

[0x5575d6610720]:   store i8 %64, i8* %19, align 1, !tbaa !1275 {
	[0x5575d6664d80]:  store i8 %65, i8* %21, align 1
	}

[0x5575d661a010]: %struct.State* %0 {
	[0x5575d66693f0]:%struct.State.0* %0
	}

[0x5575d661a050]: i64 %1 {
	[0x5575d66625a0]:i64 %1
	}

[0x5575d661a090]: %struct.Memory* %2 {
	[0x5575d666dc70]:%struct.Memory.31* %2
	}

[0x5575d661a138]:   %5 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6608d38]:  %7 = load i64, i64* %6, align 8
	}

[0x5575d661b360]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x5575d65e4e80]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x5575d661b450]:   %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0 {
	[0x5575d65e6df0]:  %RAX.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0, i32 0
	}

[0x5575d661b540]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x5575d65e66d0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x5575d661b630]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x5575d65e6140]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x5575d661b6e0]:   %4 = add i64 %1, 1 {
	[0x5575d65b03d0]:  %5 = add i64 %1, 1
	}

[0x5575d661b7b0]:   store i64 %4, i64* %PC, align 8 {
	[0x5575d659a010]:  store i64 %5, i64* %3, align 8
	}

[0x5575d661b830]:   %6 = add i64 %5, -8 {
	[0x5575d6599730]:  %8 = add i64 %7, -8
	}

[0x5575d661b898]:   %7 = inttoptr i64 %6 to i64* {
	[0x5575d6631358]:  %9 = inttoptr i64 %8 to i64*
	}

[0x5575d661b910]:   store i64 %3, i64* %7, align 8 {
	[0x5575d663fd40]:  store i64 %4, i64* %9, align 8
	}

[0x5575d661b978]:   %8 = load i64, i64* %PC, align 8 {
	[0x5575d663d018]:  %10 = load i64, i64* %3, align 8
	}

[0x5575d661b9f0]:   %17 = and i8 %16, 1 {
	[0x5575d66421f0]:  %19 = and i8 %18, 1
	}

[0x5575d661ba80]:   store i64 %6, i64* %RBP, align 8, !tbaa !1257 {
	[0x5575d663fe50]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x5575d661bb00]:   %9 = add i64 %5, -24 {
	[0x5575d6640e10]:  %11 = add i64 %7, -24
	}

[0x5575d661bb80]:   store i64 %9, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d663f3a0]:  store i64 %11, i64* %6, align 8
	}

[0x5575d661bc00]:   %10 = icmp ult i64 %6, 16 {
	[0x5575d6641bd0]:  %12 = icmp ult i64 %8, 16
	}

[0x5575d661bc68]:   %11 = zext i1 %10 to i8 {
	[0x5575d663d0a8]:  %13 = zext i1 %12 to i8
	}

[0x5575d661bd10]:   %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x5575d663f9a0]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x5575d661bda0]:   store i8 %11, i8* %12, align 1, !tbaa !1261 {
	[0x5575d6641fd0]:  store i8 %13, i8* %14, align 1
	}

[0x5575d661be08]:   %13 = trunc i64 %9 to i32 {
	[0x5575d663f2e8]:  %15 = trunc i64 %11 to i32
	}

[0x5575d661be80]:   %14 = and i32 %13, 255 {
	[0x5575d66420e0]:  %16 = and i32 %15, 255
	}

[0x5575d661bf40]:   %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9 {
	[0x5575d6663c40]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x5575d661bfb8]:   %16 = trunc i32 %15 to i8 {
	[0x5575d663ea48]:  %18 = trunc i32 %17 to i8
	}

[0x5575d661c030]:   %33 = xor i64 %29, %32 {
	[0x5575d6666280]:  %35 = xor i64 %31, %34
	}

[0x5575d661c0b0]:   %34 = add nuw nsw i64 %33, %32 {
	[0x5575d6662970]:  %36 = add nuw nsw i64 %35, %34
	}

[0x5575d661c140]:   %18 = xor i8 %17, 1 {
	[0x5575d6642300]:  %20 = xor i8 %19, 1
	}

[0x5575d661c1f0]:   %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x5575d6642660]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x5575d661c280]:   store i8 %18, i8* %19, align 1, !tbaa !1275 {
	[0x5575d6661570]:  store i8 %20, i8* %21, align 1
	}

[0x5575d661c300]:   %20 = xor i64 %6, 16 {
	[0x5575d6642560]:  %22 = xor i64 %8, 16
	}

[0x5575d661c380]:   %21 = xor i64 %20, %9 {
	[0x5575d6642740]:  %23 = xor i64 %22, %11
	}

[0x5575d661c400]:   %22 = lshr i64 %21, 4 {
	[0x5575d6661df0]:  %24 = lshr i64 %23, 4
	}

[0x5575d661c468]:   %23 = trunc i64 %22 to i8 {
	[0x5575d6643ca8]:  %25 = trunc i64 %24 to i8
	}

[0x5575d661c4e0]:   %24 = and i8 %23, 1 {
	[0x5575d6642bc0]:  %26 = and i8 %25, 1
	}

[0x5575d661c590]:   %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x5575d6643ef0]:  %27 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x5575d661c620]:   store i8 %24, i8* %25, align 1, !tbaa !1276 {
	[0x5575d6642c90]:  store i8 %26, i8* %27, align 1
	}

[0x5575d661c6a0]:   %26 = icmp eq i64 %9, 0 {
	[0x5575d6643950]:  %28 = icmp eq i64 %11, 0
	}

[0x5575d661c708]:   %27 = zext i1 %26 to i8 {
	[0x5575d66440e8]:  %29 = zext i1 %28 to i8
	}

[0x5575d661c7b0]:   %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x5575d664acf0]:  %30 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x5575d661c840]:   store i8 %27, i8* %28, align 1, !tbaa !1277 {
	[0x5575d66411e0]:  store i8 %29, i8* %30, align 1
	}

[0x5575d661c8c0]:   %29 = lshr i64 %9, 63 {
	[0x5575d6664600]:  %31 = lshr i64 %11, 63
	}

[0x5575d661c928]:   %30 = trunc i64 %29 to i8 {
	[0x5575d6644348]:  %32 = trunc i64 %31 to i8
	}

[0x5575d661c9d0]:   %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x5575d664af50]:  %33 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x5575d661ca60]:   store i8 %30, i8* %31, align 1, !tbaa !1278 {
	[0x5575d6664ea0]:  store i8 %32, i8* %33, align 1
	}

[0x5575d661d330]:   %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x5575d664b080]:  %39 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x5575d661d3c0]:   store i8 %36, i8* %37, align 1, !tbaa !1279 {
	[0x5575d664d160]:  store i8 %38, i8* %39, align 1
	}

[0x5575d661d440]:   %38 = add i64 %5, -12 {
	[0x5575d664d290]:  %40 = add i64 %7, -12
	}

[0x5575d661d4c0]:   %39 = add i64 %8, 14 {
	[0x5575d664d3c0]:  %41 = add i64 %10, 14
	}

[0x5575d661d540]:   store i64 %39, i64* %PC, align 8 {
	[0x5575d664d4f0]:  store i64 %41, i64* %3, align 8
	}

[0x5575d661d5a8]:   %40 = inttoptr i64 %38 to i32* {
	[0x5575d6644a68]:  %42 = inttoptr i64 %40 to i32*
	}

[0x5575d661d620]:   store i32 2, i32* %40, align 4 {
	[0x5575d6681320]:  store i32 2, i32* %42, align 4
	}

[0x5575d661d688]:   %41 = load i64, i64* %PC, align 8 {
	[0x5575d6644b98]:  %43 = load i64, i64* %3, align 8
	}

[0x5575d661d740]:   %42 = add i64 %41, -31 {
	[0x5575d6683200]:  %44 = add i64 %43, -31
	}

[0x5575d661d7c0]:   %43 = add i64 %41, 5 {
	[0x5575d66f8e80]:  %45 = add i64 %43, 5
	}

[0x5575d661d828]:   %44 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6644cc8]:  %46 = load i64, i64* %6, align 8
	}

[0x5575d661d8a0]:   %45 = add i64 %44, -8 {
	[0x5575d66fb6a0]:  %47 = add i64 %46, -8
	}

[0x5575d661d908]:   %46 = inttoptr i64 %45 to i64* {
	[0x5575d6644df8]:  %48 = inttoptr i64 %47 to i64*
	}

[0x5575d661d980]:   store i64 %43, i64* %46, align 8 {
	[0x5575d66fa190]:  store i64 %45, i64* %48, align 8
	}

[0x5575d661da00]:   store i64 %45, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6700be0]:  store i64 %47, i64* %6, align 8
	}

[0x5575d661da80]:   store i64 %42, i64* %PC, align 8, !tbaa !1257 {
	[0x5575d66ffe10]:  store i64 %44, i64* %3, align 8
	}

[0x5575d661db80]:   %47 = tail call %struct.Memory* @sub_400500_checkFn(%struct.State* nonnull %0, i64 %42, %struct.Memory* %2) {
	[0x5575d664b2e0]:  %call2_40051f = tail call %struct.Memory.31* @sub_400500.checkFn(%struct.State.0* %0, i64 %44, %struct.Memory.31* %2)
	}

[0x5575d661dc48]:   %48 = load i64, i64* %RBP, align 8 {
	[0x5575d6645058]:  %49 = load i64, i64* %RBP.i, align 8
	}

[0x5575d661dd00]:   %49 = add i64 %48, -4 {
	[0x5575d6702380]:  %50 = add i64 %49, -4
	}

[0x5575d661dd68]:   %50 = load i64, i64* %PC, align 8 {
	[0x5575d66452b8]:  %51 = load i64, i64* %3, align 8
	}

[0x5575d661dde0]:   %51 = add i64 %50, 3 {
	[0x5575d6704b70]:  %52 = add i64 %51, 3
	}

[0x5575d661de60]:   store i64 %51, i64* %PC, align 8 {
	[0x5575d67036d0]:  store i64 %52, i64* %3, align 8
	}

[0x5575d661dec8]:   %52 = inttoptr i64 %49 to i32* {
	[0x5575d6645e98]:  %53 = inttoptr i64 %50 to i32*
	}

[0x5575d661df28]:   %53 = load i32, i32* %52, align 4 {
	[0x5575d6645fc8]:  %54 = load i32, i32* %53, align 4
	}

[0x5575d661df88]:   %54 = zext i32 %53 to i64 {
	[0x5575d6643dd8]:  %55 = zext i32 %54 to i64
	}

[0x5575d661e000]:   store i64 %54, i64* %RAX, align 8, !tbaa !1257 {
	[0x5575d67066a0]:  store i64 %55, i64* %RAX.i, align 8
	}

[0x5575d661e068]:   %55 = load i64, i64* %RSP, align 8 {
	[0x5575d6646f48]:  %56 = load i64, i64* %6, align 8
	}

[0x5575d661e0e0]:   %56 = add i64 %55, 16 {
	[0x5575d670aa70]:  %57 = add i64 %56, 16
	}

[0x5575d661e160]:   store i64 %56, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d67151b0]:  store i64 %57, i64* %6, align 8
	}

[0x5575d661e220]:   %57 = icmp ugt i64 %55, -17 {
	[0x5575d65fd840]:  %58 = icmp ugt i64 %56, -17
	}

[0x5575d661e288]:   %58 = zext i1 %57 to i8 {
	[0x5575d6647078]:  %59 = zext i1 %58 to i8
	}

[0x5575d661e300]:   store i8 %58, i8* %12, align 1, !tbaa !1261 {
	[0x5575d65fd3e0]:  store i8 %59, i8* %14, align 1
	}

[0x5575d661e368]:   %59 = trunc i64 %56 to i32 {
	[0x5575d66471a8]:  %60 = trunc i64 %57 to i32
	}

[0x5575d661e3e0]:   %60 = and i32 %59, 255 {
	[0x5575d65a8800]:  %61 = and i32 %60, 255
	}

[0x5575d661e460]:   %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9 {
	[0x5575d6663d40]:  %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
	}

[0x5575d661e528]:   %62 = trunc i32 %61 to i8 {
	[0x5575d6647538]:  %63 = trunc i32 %62 to i8
	}

[0x5575d661e5a0]:   %63 = and i8 %62, 1 {
	[0x5575d6664130]:  %64 = and i8 %63, 1
	}

[0x5575d661e620]:   %64 = xor i8 %63, 1 {
	[0x5575d6664860]:  %65 = xor i8 %64, 1
	}

[0x5575d661eab0]:   %69 = and i8 %68, 1 {
	[0x5575d6664f60]:  %70 = and i8 %69, 1
	}

[0x5575d661eb30]:   store i8 %69, i8* %25, align 1, !tbaa !1276 {
	[0x5575d66677b0]:  store i8 %70, i8* %27, align 1
	}

[0x5575d661ebb0]:   %70 = icmp eq i64 %56, 0 {
	[0x5575d6666870]:  %71 = icmp eq i64 %57, 0
	}

[0x5575d661ec18]:   %71 = zext i1 %70 to i8 {
	[0x5575d6648248]:  %72 = zext i1 %71 to i8
	}

[0x5575d661ec90]:   store i8 %71, i8* %28, align 1, !tbaa !1277 {
	[0x5575d6667d30]:  store i8 %72, i8* %30, align 1
	}

[0x5575d661ed10]:   %72 = lshr i64 %56, 63 {
	[0x5575d6668040]:  %73 = lshr i64 %57, 63
	}

[0x5575d661ed78]:   %73 = trunc i64 %72 to i8 {
	[0x5575d6648968]:  %74 = trunc i64 %73 to i8
	}

[0x5575d661edf0]:   store i8 %73, i8* %31, align 1, !tbaa !1278 {
	[0x5575d666a9e0]:  store i8 %74, i8* %33, align 1
	}

[0x5575d661ee70]:   %74 = lshr i64 %55, 63 {
	[0x5575d666aef0]:  %75 = lshr i64 %56, 63
	}

[0x5575d661eef0]:   %75 = xor i64 %72, %74 {
	[0x5575d666b540]:  %76 = xor i64 %73, %75
	}

[0x5575d661ef70]:   %76 = add nuw nsw i64 %75, %72 {
	[0x5575d666b630]:  %77 = add nuw nsw i64 %76, %73
	}

[0x5575d661eff0]:   %77 = icmp eq i64 %76, 2 {
	[0x5575d6661fd0]:  %78 = icmp eq i64 %77, 2
	}

[0x5575d661f058]:   %78 = zext i1 %77 to i8 {
	[0x5575d6649548]:  %79 = zext i1 %78 to i8
	}

[0x5575d661f0d0]:   store i8 %78, i8* %37, align 1, !tbaa !1279 {
	[0x5575d6662150]:  store i8 %79, i8* %39, align 1
	}

[0x5575d661f150]:   %79 = add i64 %50, 8 {
	[0x5575d66622d0]:  %80 = add i64 %51, 8
	}

[0x5575d661f1d0]:   store i64 %79, i64* %PC, align 8 {
	[0x5575d6665300]:  store i64 %80, i64* %3, align 8
	}

[0x5575d661f290]:   %80 = add i64 %55, 24 {
	[0x5575d666da30]:  %81 = add i64 %56, 24
	}

[0x5575d661f2f8]:   %81 = inttoptr i64 %56 to i64* {
	[0x5575d664a128]:  %82 = inttoptr i64 %57 to i64*
	}

[0x5575d661f358]:   %82 = load i64, i64* %81, align 8 {
	[0x5575d664a388]:  %83 = load i64, i64* %82, align 8
	}

[0x5575d661f3d0]:   store i64 %82, i64* %RBP, align 8, !tbaa !1257 {
	[0x5575d666e030]:  store i64 %83, i64* %RBP.i, align 8
	}

[0x5575d661f450]:   store i64 %80, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d666ddc0]:  store i64 %81, i64* %6, align 8
	}

[0x5575d661f4d0]:   %83 = add i64 %50, 9 {
	[0x5575d666d630]:  %84 = add i64 %51, 9
	}

[0x5575d661f550]:   store i64 %83, i64* %PC, align 8 {
	[0x5575d6667340]:  store i64 %84, i64* %3, align 8
	}

[0x5575d661f5b8]:   %84 = inttoptr i64 %80 to i64* {
	[0x5575d664a4b8]:  %85 = inttoptr i64 %81 to i64*
	}

[0x5575d661f618]:   %85 = load i64, i64* %84, align 8 {
	[0x5575d664a5e8]:  %86 = load i64, i64* %85, align 8
	}

[0x5575d661f690]:   store i64 %85, i64* %PC, align 8, !tbaa !1257 {
	[0x5575d6670930]:  store i64 %86, i64* %3, align 8
	}

[0x5575d661f710]:   %86 = add i64 %55, 32 {
	[0x5575d6670cc0]:  %87 = add i64 %56, 32
	}

[0x5575d661f790]:   store i64 %86, i64* %RSP, align 8, !tbaa !1257 {
	[0x5575d6670e40]:  store i64 %87, i64* %6, align 8
	}

[0x5575d661f7f8]:   ret %struct.Memory* %47 {
	[0x5575d664a718]:  ret %struct.Memory.31* %call2_40051f
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x5575d661a0d0]: block_400510 {
	[0x5575d665fbc0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Iso Match Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [doWork] from mcsema/test.opt.ll
Extracting function [doWork] from mcsema/test.proposed.opt.ll
Matcher Done...
