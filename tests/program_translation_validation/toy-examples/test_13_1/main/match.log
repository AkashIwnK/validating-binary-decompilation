Matching sub_4004c0_main Vs main


[Info] Retrieve Potential Matches...
[0x560c7fa7cc20]:   %40 = add i64 %8, -12 {
	[0x560c7fb2d150]:  %39 = add i64 %7, -12
	}

[0x560c7fa7cca0]:   %41 = add i64 %11, 14 {
	[0x560c7fb2d280]:  %40 = add i64 %10, 14
	}

[0x560c7fa7cd20]:   store i64 %41, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fa7cd88]:   %42 = inttoptr i64 %40 to i32* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fa7ce00]:   store i32 0, i32* %42, align 4 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fa7ce68]:   %43 = load i64, i64* %RBP, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fa7cee0]:   %44 = add i64 %43, -8 {
	[0x560c7fb1fd30]:  %8 = add i64 %7, -8
	[0x560c7fb44d60]:  %69 = add i64 %68, -8
	[0x560c7fb63230]:  %44 = add i64 %43, -8
	[0x560c7fbf5210]:  %61 = add i64 %60, -8
	}

[0x560c7fa7cf48]:   %45 = load i32, i32* %EDI, align 4 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fa7d020]:   %47 = add i64 %46, 3 {
	[0x560c7fbd8f90]:  %47 = add i64 %46, 3
	}

[0x560c7fa7d0a0]:   store i64 %47, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fa7d108]:   %48 = inttoptr i64 %44 to i32* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fa7d180]:   store i32 %45, i32* %48, align 4 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fade9c0]:   store i64 %104, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fadea40]:   %107 = add i64 %79, 8 {
	[0x560c7fb562a0]:  %107 = add i64 %79, 8
	}

[0x560c7fadeac0]:   store i64 %107, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fadeb28]:   %108 = inttoptr i64 %104 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fadeb88]:   %109 = load i64, i64* %108, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fadec00]:   store i64 %109, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fadecc0]:   %110 = add i64 %80, 48 {
	[0x560c7fb50310]:  %110 = add i64 %80, 48
	}

[0x560c7faded40]:   store i64 %110, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fadeda8]:   ret %struct.Memory* %70 {
	[0x560c7fb32218]:  ret %struct.Memory.31* %call2_4004eb
	}

[0x560c7fae38c0]: %struct.State* %0 {
	[0x560c7fb50b80]:%struct.State.0* %0
	}

[0x560c7fae3900]: i64 %1 {
	[0x560c7fb2cca0]:i64 %1
	}

[0x560c7fae3940]: %struct.Memory* %2 {
	[0x560c7fb2cd70]:%struct.Memory.31* %2
	}

[0x560c7fae3af8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x560c7fb24928]:  %EDI.i = bitcast %union.anon.4* %42 to i32*
	[0x560c7fb28368]:  %AL.i18 = bitcast %union.anon.4* %56 to i8*
	[0x560c7fb2a118]:  %EAX.i13 = bitcast %union.anon.4* %56 to i32*
	[0x560c7fb2a968]:  %ESI.i9 = bitcast %union.anon.4* %49 to i32*
	}

[0x560c7fae3bd0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x560c7fa846a0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x560c7fae3ca8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x560c7fa85f08]:  %56 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x560c7fae3d18]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x560c7fb24928]:  %EDI.i = bitcast %union.anon.4* %42 to i32*
	[0x560c7fb28368]:  %AL.i18 = bitcast %union.anon.4* %56 to i8*
	[0x560c7fb2a118]:  %EAX.i13 = bitcast %union.anon.4* %56 to i32*
	[0x560c7fb2a968]:  %ESI.i9 = bitcast %union.anon.4* %49 to i32*
	}

[0x560c7fae3df8]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x560c7fa856c8]:  %49 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x560c7fae3eb8]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x560c7fb24928]:  %EDI.i = bitcast %union.anon.4* %42 to i32*
	[0x560c7fb28368]:  %AL.i18 = bitcast %union.anon.4* %56 to i8*
	[0x560c7fb2a118]:  %EAX.i13 = bitcast %union.anon.4* %56 to i32*
	[0x560c7fb2a968]:  %ESI.i9 = bitcast %union.anon.4* %49 to i32*
	}

[0x560c7fae3f98]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x560c7fa85298]:  %42 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x560c7fae4008]:   %EDI = bitcast %union.anon* %5 to i32* {
	[0x560c7fb24928]:  %EDI.i = bitcast %union.anon.4* %42 to i32*
	[0x560c7fb28368]:  %AL.i18 = bitcast %union.anon.4* %56 to i8*
	[0x560c7fb2a118]:  %EAX.i13 = bitcast %union.anon.4* %56 to i32*
	[0x560c7fb2a968]:  %ESI.i9 = bitcast %union.anon.4* %49 to i32*
	}

[0x560c7fae40b8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x560c7fa90308]:  %RSI.i20 = getelementptr inbounds %union.anon.4, %union.anon.4* %49, i64 0, i32 0
	[0x560c7fb201c8]:  %RDI.i = getelementptr inbounds %union.anon.4, %union.anon.4* %42, i64 0, i32 0
	[0x560c7fb202f8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %56, i64 0, i32 0
	}

[0x560c7fae4178]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x560c7fa90308]:  %RSI.i20 = getelementptr inbounds %union.anon.4, %union.anon.4* %49, i64 0, i32 0
	[0x560c7fb201c8]:  %RDI.i = getelementptr inbounds %union.anon.4, %union.anon.4* %42, i64 0, i32 0
	[0x560c7fb202f8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %56, i64 0, i32 0
	}

[0x560c7fae4238]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0 {
	[0x560c7fa90308]:  %RSI.i20 = getelementptr inbounds %union.anon.4, %union.anon.4* %49, i64 0, i32 0
	[0x560c7fb201c8]:  %RDI.i = getelementptr inbounds %union.anon.4, %union.anon.4* %42, i64 0, i32 0
	[0x560c7fb202f8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %56, i64 0, i32 0
	}

[0x560c7fae4340]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560c7fac4af0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x560c7fae4450]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560c7fac3830]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x560c7fae44e8]:   %6 = load i64, i64* %RBP, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae4560]:   %7 = add i64 %1, 1 {
	[0x560c7fa7a000]:  %5 = add i64 %1, 1
	}

[0x560c7fae45e0]:   store i64 %7, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae4648]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae46c0]:   %17 = and i32 %16, 255 {
	[0x560c7fb221e0]:  %16 = and i32 %15, 255
	[0x560c7fb4d780]:  %85 = and i32 %84, 255
	}

[0x560c7fae4750]:   %9 = add i64 %8, -8 {
	[0x560c7fb1fd30]:  %8 = add i64 %7, -8
	[0x560c7fb44d60]:  %69 = add i64 %68, -8
	[0x560c7fb63230]:  %44 = add i64 %43, -8
	[0x560c7fbf5210]:  %61 = add i64 %60, -8
	}

[0x560c7fae47b8]:   %10 = inttoptr i64 %9 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fae4830]:   store i64 %6, i64* %10, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae4910]:   store i64 %9, i64* %RBP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae49d0]:   %12 = add i64 %8, -40 {
	[0x560c7fb1f390]:  %11 = add i64 %7, -40
	}

[0x560c7fae4a50]:   store i64 %12, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae4b10]:   %13 = icmp ult i64 %9, 32 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7fae4b78]:   %14 = zext i1 %13 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7fae4c20]:   %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x560c7fb1f990]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x560c7fae4cb0]:   store i8 %14, i8* %15, align 1, !tbaa !1261 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae5328]:   %16 = trunc i64 %12 to i32 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7fae53d0]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x560c7fb26df0]:  %32 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x560c7fae54b0]:   %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9 {
	[0x560c7fb1e5a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	[0x560c7fb2b070]:  %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
	[0x560c7fb4da20]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x560c7fae5578]:   %19 = trunc i32 %18 to i8 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7fae55f0]:   %20 = and i8 %19, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	[0x560c7fb22bb0]:  %25 = and i8 %24, 1
	[0x560c7fb47340]:  %93 = and i8 %92, 1
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7fae5670]:   %21 = xor i8 %20, 1 {
	[0x560c7fb41560]:  %20 = xor i8 %19, 1
	[0x560c7fb4e430]:  %89 = xor i8 %88, 1
	}

[0x560c7fae5720]:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x560c7fb22650]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x560c7fae57b0]:   store i8 %21, i8* %22, align 1, !tbaa !1275 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae5e40]:   %23 = xor i64 %9, %12 {
	[0x560c7fb22730]:  %22 = xor i64 %8, %11
	[0x560c7fb36240]:  %34 = xor i64 %30, %33
	[0x560c7fb4d500]:  %90 = xor i64 %81, %80
	[0x560c7fb51240]:  %99 = xor i64 %96, %98
	}

[0x560c7fae5ec0]:   %24 = lshr i64 %23, 4 {
	[0x560c7fb41de0]:  %23 = lshr i64 %22, 4
	[0x560c7fb4d5f0]:  %91 = lshr i64 %90, 4
	}

[0x560c7fae5f28]:   %25 = trunc i64 %24 to i8 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7fae5fa0]:   %26 = and i8 %25, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	[0x560c7fb22bb0]:  %25 = and i8 %24, 1
	[0x560c7fb47340]:  %93 = and i8 %92, 1
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7fae6050]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560c7fb44f10]:  %26 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x560c7fae60e0]:   store i8 %26, i8* %27, align 1, !tbaa !1276 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae6770]:   %28 = icmp eq i64 %12, 0 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7fae67d8]:   %29 = zext i1 %28 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7fae6880]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x560c7fb36380]:  %29 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x560c7fae6910]:   store i8 %29, i8* %30, align 1, !tbaa !1277 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae6fa0]:   %31 = lshr i64 %12, 63 {
	[0x560c7fb211d0]:  %30 = lshr i64 %11, 63
	[0x560c7fb2cfb0]:  %98 = lshr i64 %80, 63
	[0x560c7fb45060]:  %33 = lshr i64 %8, 63
	[0x560c7fb50cd0]:  %96 = lshr i64 %81, 63
	}

[0x560c7fae7008]:   %32 = trunc i64 %31 to i8 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7fae7080]:   store i64 %64, i64* %RSI, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae7100]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae71c0]:   %65 = add i64 %62, -269 {
	[0x560c7fb43d30]:  %66 = add i64 %63, -269
	}

[0x560c7fae7290]:   store i8 %32, i8* %33, align 1, !tbaa !1278 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae7920]:   %34 = lshr i64 %9, 63 {
	[0x560c7fb211d0]:  %30 = lshr i64 %11, 63
	[0x560c7fb2cfb0]:  %98 = lshr i64 %80, 63
	[0x560c7fb45060]:  %33 = lshr i64 %8, 63
	[0x560c7fb50cd0]:  %96 = lshr i64 %81, 63
	}

[0x560c7fae79a0]:   %35 = xor i64 %31, %34 {
	[0x560c7fb22730]:  %22 = xor i64 %8, %11
	[0x560c7fb36240]:  %34 = xor i64 %30, %33
	[0x560c7fb4d500]:  %90 = xor i64 %81, %80
	[0x560c7fb51240]:  %99 = xor i64 %96, %98
	}

[0x560c7fae7a20]:   %36 = add nuw nsw i64 %35, %34 {
	[0x560c7fb23dc0]:  %35 = add nuw nsw i64 %34, %33
	[0x560c7fb48e40]:  %100 = add nuw nsw i64 %99, %96
	}

[0x560c7fae7aa0]:   %37 = icmp eq i64 %36, 2 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7fae7b08]:   %38 = zext i1 %37 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7fae7bb0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x560c7fb2ace0]:  %38 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x560c7fae7c40]:   store i8 %38, i8* %39, align 1, !tbaa !1279 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae8ec8]:   %49 = load i64, i64* %RBP, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae8f80]:   %50 = add i64 %49, -16 {
	[0x560c7fbe0cc0]:  %51 = add i64 %50, -16
	}

[0x560c7fae8fe8]:   %51 = load i64, i64* %RSI, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae90c0]:   %53 = add i64 %52, 4 {
	[0x560c7fbdfef0]:  %54 = add i64 %53, 4
	}

[0x560c7fae9140]:   store i64 %53, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae91a8]:   %54 = inttoptr i64 %50 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fae9220]:   store i64 %51, i64* %54, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae9300]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae94f0]:   %56 = add i64 %55, 58 {
	[0x560c7fbe6780]:  %58 = add i64 %57, 58
	}

[0x560c7fae9570]:   %57 = add i64 %55, 7 {
	[0x560c7fb541f0]:  %103 = add i64 %79, 7
	[0x560c7fbeab50]:  %59 = add i64 %57, 7
	}

[0x560c7fae95d8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae9650]:   %59 = add i64 %58, -8 {
	[0x560c7fb1fd30]:  %8 = add i64 %7, -8
	[0x560c7fb44d60]:  %69 = add i64 %68, -8
	[0x560c7fb63230]:  %44 = add i64 %43, -8
	[0x560c7fbf5210]:  %61 = add i64 %60, -8
	}

[0x560c7fae96b8]:   %60 = inttoptr i64 %59 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fae9730]:   store i64 %57, i64* %60, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae97b0]:   store i64 %59, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae9830]:   store i64 %56, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae9aa0]:   %61 = tail call %struct.Memory* @sub_400510_doWork(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x560c7fb1e5a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	[0x560c7fb2b070]:  %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
	[0x560c7fb4da20]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae9c80]:   store i64 add (i64 ptrtoint (%seg_4005b0__rodata_type* @seg_4005b0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae9ce8]:   %63 = load i32, i32* %EAX, align 4 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fae9d48]:   %64 = zext i32 %63 to i64 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faea7e0]:   %66 = add i64 %62, 19 {
	[0x560c7fb44120]:  %67 = add i64 %63, 19
	}

[0x560c7faea848]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faea8c0]:   %68 = add i64 %67, -8 {
	[0x560c7fb1fd30]:  %8 = add i64 %7, -8
	[0x560c7fb44d60]:  %69 = add i64 %68, -8
	[0x560c7fb63230]:  %44 = add i64 %43, -8
	[0x560c7fbf5210]:  %61 = add i64 %60, -8
	}

[0x560c7faea928]:   %69 = inttoptr i64 %68 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7faea9a0]:   store i64 %66, i64* %69, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeaa20]:   store i64 %68, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeaaa0]:   store i64 %65, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeaca8]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61) {
	[0x560c7fb1e5a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	[0x560c7fb2b070]:  %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
	[0x560c7fb4da20]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x560c7faead68]:   %71 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faeade0]:   store i64 0, i64* %RSI, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeae48]:   %72 = load i64, i64* %RBP, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faeaf00]:   %73 = add i64 %72, -20 {
	[0x560c7fb47d30]:  %73 = add i64 %72, -20
	}

[0x560c7faeaf68]:   %74 = load i32, i32* %EAX, align 4 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faeafe0]:   %75 = add i64 %71, 5 {
	[0x560c7fb48040]:  %75 = add i64 %71, 5
	}

[0x560c7faeb060]:   store i64 %75, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeb0c8]:   %76 = inttoptr i64 %73 to i32* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7faeb140]:   store i32 %74, i32* %76, align 4 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeb1a8]:   %77 = load i32, i32* %ESI, align 4 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faeb208]:   %78 = zext i32 %77 to i64 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faeb2e0]:   store i64 %78, i64* %RAX, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeb348]:   %80 = load i64, i64* %RSP, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faeb3c0]:   %81 = add i64 %80, 32 {
	[0x560c7fb4ba50]:  %81 = add i64 %80, 32
	}

[0x560c7faeb440]:   store i64 %81, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeb500]:   %82 = icmp ugt i64 %80, -33 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7faeb568]:   %83 = zext i1 %82 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faeb5e0]:   store i8 %83, i8* %15, align 1, !tbaa !1261 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeb648]:   %84 = trunc i64 %81 to i32 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7faeb6c0]:   %85 = and i32 %84, 255 {
	[0x560c7fb221e0]:  %16 = and i32 %15, 255
	[0x560c7fb4d780]:  %85 = and i32 %84, 255
	}

[0x560c7faeb760]:   %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9 {
	[0x560c7fb1e5a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	[0x560c7fb2b070]:  %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
	[0x560c7fb4da20]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x560c7faeb828]:   %87 = trunc i32 %86 to i8 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7faeb8a0]:   %88 = and i8 %87, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	[0x560c7fb22bb0]:  %25 = and i8 %24, 1
	[0x560c7fb47340]:  %93 = and i8 %92, 1
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7faeb920]:   %89 = xor i8 %88, 1 {
	[0x560c7fb41560]:  %20 = xor i8 %19, 1
	[0x560c7fb4e430]:  %89 = xor i8 %88, 1
	}

[0x560c7faeb9a0]:   store i8 %89, i8* %22, align 1, !tbaa !1275 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faeba20]:   %90 = xor i64 %81, %80 {
	[0x560c7fb22730]:  %22 = xor i64 %8, %11
	[0x560c7fb36240]:  %34 = xor i64 %30, %33
	[0x560c7fb4d500]:  %90 = xor i64 %81, %80
	[0x560c7fb51240]:  %99 = xor i64 %96, %98
	}

[0x560c7faebaa0]:   %91 = lshr i64 %90, 4 {
	[0x560c7fb41de0]:  %23 = lshr i64 %22, 4
	[0x560c7fb4d5f0]:  %91 = lshr i64 %90, 4
	}

[0x560c7faebb08]:   %92 = trunc i64 %91 to i8 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7faebb80]:   %93 = and i8 %92, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	[0x560c7fb22bb0]:  %25 = and i8 %24, 1
	[0x560c7fb47340]:  %93 = and i8 %92, 1
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7faebc00]:   store i8 %93, i8* %27, align 1, !tbaa !1276 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faebc80]:   %94 = icmp eq i64 %81, 0 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7faebce8]:   %95 = zext i1 %94 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faebd60]:   store i8 %95, i8* %30, align 1, !tbaa !1277 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faebde0]:   %96 = lshr i64 %81, 63 {
	[0x560c7fb211d0]:  %30 = lshr i64 %11, 63
	[0x560c7fb2cfb0]:  %98 = lshr i64 %80, 63
	[0x560c7fb45060]:  %33 = lshr i64 %8, 63
	[0x560c7fb50cd0]:  %96 = lshr i64 %81, 63
	}

[0x560c7faebe48]:   %97 = trunc i64 %96 to i8 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7faebec0]:   store i8 %97, i8* %33, align 1, !tbaa !1278 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faebf40]:   %98 = lshr i64 %80, 63 {
	[0x560c7fb211d0]:  %30 = lshr i64 %11, 63
	[0x560c7fb2cfb0]:  %98 = lshr i64 %80, 63
	[0x560c7fb45060]:  %33 = lshr i64 %8, 63
	[0x560c7fb50cd0]:  %96 = lshr i64 %81, 63
	}

[0x560c7faebfc0]:   %99 = xor i64 %96, %98 {
	[0x560c7fb22730]:  %22 = xor i64 %8, %11
	[0x560c7fb36240]:  %34 = xor i64 %30, %33
	[0x560c7fb4d500]:  %90 = xor i64 %81, %80
	[0x560c7fb51240]:  %99 = xor i64 %96, %98
	}

[0x560c7faec040]:   %100 = add nuw nsw i64 %99, %96 {
	[0x560c7fb23dc0]:  %35 = add nuw nsw i64 %34, %33
	[0x560c7fb48e40]:  %100 = add nuw nsw i64 %99, %96
	}

[0x560c7faec0c0]:   %101 = icmp eq i64 %100, 2 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7faec128]:   %102 = zext i1 %101 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faec1a0]:   store i8 %102, i8* %39, align 1, !tbaa !1279 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faec220]:   %103 = add i64 %79, 7 {
	[0x560c7fb541f0]:  %103 = add i64 %79, 7
	[0x560c7fbeab50]:  %59 = add i64 %57, 7
	}

[0x560c7faec2a0]:   store i64 %103, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7faec360]:   %104 = add i64 %80, 40 {
	[0x560c7fb54d00]:  %104 = add i64 %80, 40
	}

[0x560c7faec3c8]:   %105 = inttoptr i64 %81 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7faec428]:   %106 = load i64, i64* %105, align 8 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7faec4a0]:   store i64 %106, i64* %RBP, align 8, !tbaa !1257 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x560c7fb2a118]:   %EAX.i13 = bitcast %union.anon.4* %56 to i32*
From the pot matches of: [0x560c7fae3af8]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x560c7fae7100]:   store i8 0, i8* %AL, align 1, !tbaa !1280


Uprime Matches: [0x560c7fa79720]:   store i64 %5, i64* %3, align 8
[0x560c7fa8ce10]:   store i64 %58, i64* %3, align 8
[0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fadda60]:   store i64 %59, i64* %62, align 8
[0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb220d0]:   store i8 %13, i8* %14, align 1
[0x560c7fb22550]:   store i8 %20, i8* %21, align 1
[0x560c7fb22c80]:   store i8 %25, i8* %26, align 1
[0x560c7fb23940]:   store i8 %28, i8* %29, align 1
[0x560c7fb26930]:   store i8 %37, i8* %38, align 1
[0x560c7fb2d3b0]:   store i64 %40, i64* %3, align 8
[0x560c7fb2d4e0]:   store i32 0, i32* %41, align 4
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb42df0]:   store i64 4195764, i64* %RDI.i, align 8
[0x560c7fb43860]:   store i64 %65, i64* %RSI.i20, align 8
[0x560c7fb43c30]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fb445f0]:   store i8 %31, i8* %32, align 1
[0x560c7fb44850]:   store i64 %67, i64* %70, align 8
[0x560c7fb454c0]:   store i8 %83, i8* %14, align 1
[0x560c7fb468a0]:   store i64 0, i64* %RSI.i20, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb477b0]:   store i64 %66, i64* %3, align 8
[0x560c7fb4a9e0]:   store i64 %75, i64* %3, align 8
[0x560c7fb4aef0]:   store i32 %74, i32* %76, align 4
[0x560c7fb4b3c0]:   store i64 %78, i64* %RAX.i, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4e560]:   store i8 %89, i8* %21, align 1
[0x560c7fb4f5a0]:   store i64 %106, i64* %RBP.i, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8
[0x560c7fb50430]:   store i8 %93, i8* %26, align 1
[0x560c7fb50940]:   store i8 %95, i8* %29, align 1
[0x560c7fb50e50]:   store i8 %97, i8* %32, align 1
[0x560c7fb54070]:   store i8 %102, i8* %38, align 1
[0x560c7fb544f0]:   store i64 %103, i64* %3, align 8
[0x560c7fb56420]:   store i64 %107, i64* %3, align 8
[0x560c7fb56ab0]:   store i64 %109, i64* %3, align 8
[0x560c7fbda2a0]:   store i32 %45, i32* %48, align 4
[0x560c7fbdb780]:   store i64 %47, i64* %3, align 8
[0x560c7fbe2460]:   store i64 %54, i64* %3, align 8
[0x560c7fbe37b0]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fbe4c50]:   store i64 %52, i64* %55, align 8


Adj: [0x560c7fb2a378]:   %64 = load i32, i32* %EAX.i13, align 4
[0x560c7fb2ae28]:   %74 = load i32, i32* %EAX.i13, align 4


Removing: [0x560c7fb28368]:   %AL.i18 = bitcast %union.anon.4* %56 to i8*
From the pot matches of: [0x560c7fae3d18]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x560c7faeaf68]:   %74 = load i32, i32* %EAX, align 4


Uprime Matches: [0x560c7fae8d28]:   %7 = load i64, i64* %6, align 8
[0x560c7fae8e68]:   %4 = load i64, i64* %RBP.i, align 8
[0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
[0x560c7fb24a58]:   %43 = load i64, i64* %RBP.i, align 8
[0x560c7fb24b88]:   %45 = load i32, i32* %EDI.i, align 4
[0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
[0x560c7fb252a8]:   %50 = load i64, i64* %RBP.i, align 8
[0x560c7fb25e88]:   %52 = load i64, i64* %RSI.i20, align 8
[0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
[0x560c7fb26a28]:   %77 = load i32, i32* %ESI.i9, align 4
[0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
[0x560c7fb28958]:   %60 = load i64, i64* %6, align 8
[0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
[0x560c7fb2a378]:   %64 = load i32, i32* %EAX.i13, align 4
[0x560c7fb2a5d8]:   %68 = load i64, i64* %6, align 8
[0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
[0x560c7fb2abc8]:   %72 = load i64, i64* %RBP.i, align 8
[0x560c7fb2ae28]:   %74 = load i32, i32* %EAX.i13, align 4
[0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
[0x560c7fb2cc38]:   %80 = load i64, i64* %6, align 8
[0x560c7fb319c8]:   %106 = load i64, i64* %105, align 8
[0x560c7fb320e8]:   %109 = load i64, i64* %108, align 8


Adj: [0x560c7fb43c30]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fbe37b0]:   store i8 0, i8* %AL.i18, align 1


Removing: [0x560c7fb24a58]:   %43 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fae44e8]:   %6 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fae4830]:   store i64 %6, i64* %10, align 8


Uprime Matches: [0x560c7fa79720]:   store i64 %5, i64* %3, align 8
[0x560c7fa8ce10]:   store i64 %58, i64* %3, align 8
[0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fadda60]:   store i64 %59, i64* %62, align 8
[0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb220d0]:   store i8 %13, i8* %14, align 1
[0x560c7fb22550]:   store i8 %20, i8* %21, align 1
[0x560c7fb22c80]:   store i8 %25, i8* %26, align 1
[0x560c7fb23940]:   store i8 %28, i8* %29, align 1
[0x560c7fb26930]:   store i8 %37, i8* %38, align 1
[0x560c7fb2d3b0]:   store i64 %40, i64* %3, align 8
[0x560c7fb2d4e0]:   store i32 0, i32* %41, align 4
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb42df0]:   store i64 4195764, i64* %RDI.i, align 8
[0x560c7fb43860]:   store i64 %65, i64* %RSI.i20, align 8
[0x560c7fb43c30]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fb445f0]:   store i8 %31, i8* %32, align 1
[0x560c7fb44850]:   store i64 %67, i64* %70, align 8
[0x560c7fb454c0]:   store i8 %83, i8* %14, align 1
[0x560c7fb468a0]:   store i64 0, i64* %RSI.i20, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb477b0]:   store i64 %66, i64* %3, align 8
[0x560c7fb4a9e0]:   store i64 %75, i64* %3, align 8
[0x560c7fb4aef0]:   store i32 %74, i32* %76, align 4
[0x560c7fb4b3c0]:   store i64 %78, i64* %RAX.i, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4e560]:   store i8 %89, i8* %21, align 1
[0x560c7fb4f5a0]:   store i64 %106, i64* %RBP.i, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8
[0x560c7fb50430]:   store i8 %93, i8* %26, align 1
[0x560c7fb50940]:   store i8 %95, i8* %29, align 1
[0x560c7fb50e50]:   store i8 %97, i8* %32, align 1
[0x560c7fb54070]:   store i8 %102, i8* %38, align 1
[0x560c7fb544f0]:   store i64 %103, i64* %3, align 8
[0x560c7fb56420]:   store i64 %107, i64* %3, align 8
[0x560c7fb56ab0]:   store i64 %109, i64* %3, align 8
[0x560c7fbda2a0]:   store i32 %45, i32* %48, align 4
[0x560c7fbdb780]:   store i64 %47, i64* %3, align 8
[0x560c7fbe2460]:   store i64 %54, i64* %3, align 8
[0x560c7fbe37b0]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fbe4c50]:   store i64 %52, i64* %55, align 8


Adj: [0x560c7fb63230]:   %44 = add i64 %43, -8


Removing: [0x560c7fb252a8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fae44e8]:   %6 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fae4830]:   store i64 %6, i64* %10, align 8


Uprime Matches: [0x560c7fa79720]:   store i64 %5, i64* %3, align 8
[0x560c7fa8ce10]:   store i64 %58, i64* %3, align 8
[0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fadda60]:   store i64 %59, i64* %62, align 8
[0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb220d0]:   store i8 %13, i8* %14, align 1
[0x560c7fb22550]:   store i8 %20, i8* %21, align 1
[0x560c7fb22c80]:   store i8 %25, i8* %26, align 1
[0x560c7fb23940]:   store i8 %28, i8* %29, align 1
[0x560c7fb26930]:   store i8 %37, i8* %38, align 1
[0x560c7fb2d3b0]:   store i64 %40, i64* %3, align 8
[0x560c7fb2d4e0]:   store i32 0, i32* %41, align 4
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb42df0]:   store i64 4195764, i64* %RDI.i, align 8
[0x560c7fb43860]:   store i64 %65, i64* %RSI.i20, align 8
[0x560c7fb43c30]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fb445f0]:   store i8 %31, i8* %32, align 1
[0x560c7fb44850]:   store i64 %67, i64* %70, align 8
[0x560c7fb454c0]:   store i8 %83, i8* %14, align 1
[0x560c7fb468a0]:   store i64 0, i64* %RSI.i20, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb477b0]:   store i64 %66, i64* %3, align 8
[0x560c7fb4a9e0]:   store i64 %75, i64* %3, align 8
[0x560c7fb4aef0]:   store i32 %74, i32* %76, align 4
[0x560c7fb4b3c0]:   store i64 %78, i64* %RAX.i, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4e560]:   store i8 %89, i8* %21, align 1
[0x560c7fb4f5a0]:   store i64 %106, i64* %RBP.i, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8
[0x560c7fb50430]:   store i8 %93, i8* %26, align 1
[0x560c7fb50940]:   store i8 %95, i8* %29, align 1
[0x560c7fb50e50]:   store i8 %97, i8* %32, align 1
[0x560c7fb54070]:   store i8 %102, i8* %38, align 1
[0x560c7fb544f0]:   store i64 %103, i64* %3, align 8
[0x560c7fb56420]:   store i64 %107, i64* %3, align 8
[0x560c7fb56ab0]:   store i64 %109, i64* %3, align 8
[0x560c7fbda2a0]:   store i32 %45, i32* %48, align 4
[0x560c7fbdb780]:   store i64 %47, i64* %3, align 8
[0x560c7fbe2460]:   store i64 %54, i64* %3, align 8
[0x560c7fbe37b0]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fbe4c50]:   store i64 %52, i64* %55, align 8


Adj: [0x560c7fbe0cc0]:   %51 = add i64 %50, -16


Removing: [0x560c7fb2abc8]:   %72 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fae44e8]:   %6 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fae4830]:   store i64 %6, i64* %10, align 8


Uprime Matches: [0x560c7fa79720]:   store i64 %5, i64* %3, align 8
[0x560c7fa8ce10]:   store i64 %58, i64* %3, align 8
[0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fadda60]:   store i64 %59, i64* %62, align 8
[0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb220d0]:   store i8 %13, i8* %14, align 1
[0x560c7fb22550]:   store i8 %20, i8* %21, align 1
[0x560c7fb22c80]:   store i8 %25, i8* %26, align 1
[0x560c7fb23940]:   store i8 %28, i8* %29, align 1
[0x560c7fb26930]:   store i8 %37, i8* %38, align 1
[0x560c7fb2d3b0]:   store i64 %40, i64* %3, align 8
[0x560c7fb2d4e0]:   store i32 0, i32* %41, align 4
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb42df0]:   store i64 4195764, i64* %RDI.i, align 8
[0x560c7fb43860]:   store i64 %65, i64* %RSI.i20, align 8
[0x560c7fb43c30]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fb445f0]:   store i8 %31, i8* %32, align 1
[0x560c7fb44850]:   store i64 %67, i64* %70, align 8
[0x560c7fb454c0]:   store i8 %83, i8* %14, align 1
[0x560c7fb468a0]:   store i64 0, i64* %RSI.i20, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb477b0]:   store i64 %66, i64* %3, align 8
[0x560c7fb4a9e0]:   store i64 %75, i64* %3, align 8
[0x560c7fb4aef0]:   store i32 %74, i32* %76, align 4
[0x560c7fb4b3c0]:   store i64 %78, i64* %RAX.i, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4e560]:   store i8 %89, i8* %21, align 1
[0x560c7fb4f5a0]:   store i64 %106, i64* %RBP.i, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8
[0x560c7fb50430]:   store i8 %93, i8* %26, align 1
[0x560c7fb50940]:   store i8 %95, i8* %29, align 1
[0x560c7fb50e50]:   store i8 %97, i8* %32, align 1
[0x560c7fb54070]:   store i8 %102, i8* %38, align 1
[0x560c7fb544f0]:   store i64 %103, i64* %3, align 8
[0x560c7fb56420]:   store i64 %107, i64* %3, align 8
[0x560c7fb56ab0]:   store i64 %109, i64* %3, align 8
[0x560c7fbda2a0]:   store i32 %45, i32* %48, align 4
[0x560c7fbdb780]:   store i64 %47, i64* %3, align 8
[0x560c7fbe2460]:   store i64 %54, i64* %3, align 8
[0x560c7fbe37b0]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fbe4c50]:   store i64 %52, i64* %55, align 8


Adj: [0x560c7fb47d30]:   %73 = add i64 %72, -20


Removing: [0x560c7fb28958]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7fae4648]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7fa7cc20]:   %40 = add i64 %8, -12


Uprime Matches: [0x560c7fb2d150]:   %39 = add i64 %7, -12


Adj: [0x560c7fbf5210]:   %61 = add i64 %60, -8


Removing: [0x560c7fb2a5d8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7fae4648]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7fa7cc20]:   %40 = add i64 %8, -12


Uprime Matches: [0x560c7fb2d150]:   %39 = add i64 %7, -12


Adj: [0x560c7fb44d60]:   %69 = add i64 %68, -8


Removing: [0x560c7fb2cc38]:   %80 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7fae4648]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7fa7cc20]:   %40 = add i64 %8, -12


Uprime Matches: [0x560c7fb2d150]:   %39 = add i64 %7, -12


Adj: [0x560c7fb2cfb0]:   %98 = lshr i64 %80, 63
[0x560c7fb42720]:   %82 = icmp ugt i64 %80, -33
[0x560c7fb4ba50]:   %81 = add i64 %80, 32
[0x560c7fb4d500]:   %90 = xor i64 %81, %80
[0x560c7fb50310]:   %110 = add i64 %80, 48
[0x560c7fb54d00]:   %104 = add i64 %80, 40


Removing: [0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7cca0]:   %41 = add i64 %11, 14


Uprime Matches: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Adj: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Removing: [0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7cca0]:   %41 = add i64 %11, 14


Uprime Matches: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Adj: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Removing: [0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7cca0]:   %41 = add i64 %11, 14


Uprime Matches: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Adj: [0x560c7fbe6780]:   %58 = add i64 %57, 58
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Removing: [0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7cca0]:   %41 = add i64 %11, 14


Uprime Matches: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Adj: [0x560c7fb43d30]:   %66 = add i64 %63, -269
[0x560c7fb44120]:   %67 = add i64 %63, 19


Removing: [0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7cca0]:   %41 = add i64 %11, 14


Uprime Matches: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Adj: [0x560c7fb48040]:   %75 = add i64 %71, 5


Removing: [0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7cca0]:   %41 = add i64 %11, 14


Uprime Matches: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Adj: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fb562a0]:   %107 = add i64 %79, 8


Removing: [0x560c7fb1d098]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb221e0]:   %16 = and i32 %15, 255


Removing: [0x560c7fb22af8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb445f0]:   store i8 %31, i8* %32, align 1


Removing: [0x560c7fb2e918]:   %84 = trunc i64 %81 to i32
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb4d780]:   %85 = and i32 %84, 255


Removing: [0x560c7fb30cb8]:   %97 = trunc i64 %96 to i8
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb50e50]:   store i8 %97, i8* %32, align 1


Removing: [0x560c7fb22bb0]:   %25 = and i8 %24, 1
From the pot matches of: [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime : [0x560c7fae5670]:   %21 = xor i8 %20, 1


Uprime Matches: [0x560c7fb41560]:   %20 = xor i8 %19, 1
[0x560c7fb4e430]:   %89 = xor i8 %88, 1


Adj: [0x560c7fb22c80]:   store i8 %25, i8* %26, align 1


Removing: [0x560c7fb47340]:   %93 = and i8 %92, 1
From the pot matches of: [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime : [0x560c7fae5670]:   %21 = xor i8 %20, 1


Uprime Matches: [0x560c7fb41560]:   %20 = xor i8 %19, 1
[0x560c7fb4e430]:   %89 = xor i8 %88, 1


Adj: [0x560c7fb50430]:   store i8 %93, i8* %26, align 1


Removing: [0x560c7fae8e68]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fa7ce68]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fa7cee0]:   %44 = add i64 %43, -8


Uprime Matches: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fb63230]:   %44 = add i64 %43, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8


Removing: [0x560c7fb252a8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fa7ce68]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fa7cee0]:   %44 = add i64 %43, -8


Uprime Matches: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fb63230]:   %44 = add i64 %43, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fbe0cc0]:   %51 = add i64 %50, -16


Removing: [0x560c7fb2abc8]:   %72 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fa7ce68]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fa7cee0]:   %44 = add i64 %43, -8


Uprime Matches: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fb63230]:   %44 = add i64 %43, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb47d30]:   %73 = add i64 %72, -20


Removing: [0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7d020]:   %47 = add i64 %46, 3


Uprime Matches: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Adj: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Removing: [0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7d020]:   %47 = add i64 %46, 3


Uprime Matches: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Adj: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Removing: [0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7d020]:   %47 = add i64 %46, 3


Uprime Matches: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Adj: [0x560c7fbe6780]:   %58 = add i64 %57, 58
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Removing: [0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7d020]:   %47 = add i64 %46, 3


Uprime Matches: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Adj: [0x560c7fb43d30]:   %66 = add i64 %63, -269
[0x560c7fb44120]:   %67 = add i64 %63, 19


Removing: [0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7d020]:   %47 = add i64 %46, 3


Uprime Matches: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Adj: [0x560c7fb48040]:   %75 = add i64 %71, 5


Removing: [0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x560c7fa7d020]:   %47 = add i64 %46, 3


Uprime Matches: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Adj: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fb562a0]:   %107 = add i64 %79, 8


Removing: [0x560c7fae8e68]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fae8ec8]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fae8f80]:   %50 = add i64 %49, -16


Uprime Matches: [0x560c7fbe0cc0]:   %51 = add i64 %50, -16


Adj: [0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8


Removing: [0x560c7fb24a58]:   %43 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fae8ec8]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fae8f80]:   %50 = add i64 %49, -16


Uprime Matches: [0x560c7fbe0cc0]:   %51 = add i64 %50, -16


Adj: [0x560c7fb63230]:   %44 = add i64 %43, -8


Removing: [0x560c7fb2abc8]:   %72 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7fae8ec8]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x560c7fae8f80]:   %50 = add i64 %49, -16


Uprime Matches: [0x560c7fbe0cc0]:   %51 = add i64 %50, -16


Adj: [0x560c7fb47d30]:   %73 = add i64 %72, -20


Removing: [0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae90c0]:   %53 = add i64 %52, 4


Uprime Matches: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Adj: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Removing: [0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae90c0]:   %53 = add i64 %52, 4


Uprime Matches: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Adj: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Removing: [0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae90c0]:   %53 = add i64 %52, 4


Uprime Matches: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Adj: [0x560c7fbe6780]:   %58 = add i64 %57, 58
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Removing: [0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae90c0]:   %53 = add i64 %52, 4


Uprime Matches: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Adj: [0x560c7fb43d30]:   %66 = add i64 %63, -269
[0x560c7fb44120]:   %67 = add i64 %63, 19


Removing: [0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae90c0]:   %53 = add i64 %52, 4


Uprime Matches: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Adj: [0x560c7fb48040]:   %75 = add i64 %71, 5


Removing: [0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae90c0]:   %53 = add i64 %52, 4


Uprime Matches: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Adj: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fb562a0]:   %107 = add i64 %79, 8


Removing: [0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae9570]:   %57 = add i64 %55, 7


Uprime Matches: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Adj: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Removing: [0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae9570]:   %57 = add i64 %55, 7


Uprime Matches: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Adj: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Removing: [0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae9570]:   %57 = add i64 %55, 7


Uprime Matches: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Adj: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Removing: [0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae9570]:   %57 = add i64 %55, 7


Uprime Matches: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Adj: [0x560c7fb43d30]:   %66 = add i64 %63, -269
[0x560c7fb44120]:   %67 = add i64 %63, 19


Removing: [0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae9570]:   %57 = add i64 %55, 7


Uprime Matches: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Adj: [0x560c7fb48040]:   %75 = add i64 %71, 5


Removing: [0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x560c7fae94f0]:   %56 = add i64 %55, 58


Uprime Matches: [0x560c7fbe6780]:   %58 = add i64 %57, 58


Adj: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fb562a0]:   %107 = add i64 %79, 8


Removing: [0x560c7fb2cc38]:   %80 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7fae95d8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7fae9650]:   %59 = add i64 %58, -8


Uprime Matches: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fb63230]:   %44 = add i64 %43, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb2cfb0]:   %98 = lshr i64 %80, 63
[0x560c7fb42720]:   %82 = icmp ugt i64 %80, -33
[0x560c7fb4ba50]:   %81 = add i64 %80, 32
[0x560c7fb4d500]:   %90 = xor i64 %81, %80
[0x560c7fb50310]:   %110 = add i64 %80, 48
[0x560c7fb54d00]:   %104 = add i64 %80, 40


Removing: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
From the pot matches of: [0x560c7fae9650]:   %59 = add i64 %58, -8


Uprime : [0x560c7fae97b0]:   store i64 %59, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8


Adj: [0x560c7fa8da58]:   %9 = inttoptr i64 %8 to i64*
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21fc0]:   %12 = icmp ult i64 %8, 32
[0x560c7fb22730]:   %22 = xor i64 %8, %11
[0x560c7fb45060]:   %33 = lshr i64 %8, 63


Removing: [0x560c7fb2a708]:   %70 = inttoptr i64 %69 to i64*
From the pot matches of: [0x560c7fae96b8]:   %60 = inttoptr i64 %59 to i64*


Uprime : [0x560c7fae9730]:   store i64 %57, i64* %60, align 8


Uprime Matches: [0x560c7fadda60]:   store i64 %59, i64* %62, align 8
[0x560c7fb544f0]:   store i64 %103, i64* %3, align 8


Adj: [0x560c7fb44850]:   store i64 %67, i64* %70, align 8


Removing: [0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x560c7faea7e0]:   %66 = add i64 %62, 19


Uprime Matches: [0x560c7fb44120]:   %67 = add i64 %63, 19


Adj: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Removing: [0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x560c7faea7e0]:   %66 = add i64 %62, 19


Uprime Matches: [0x560c7fb44120]:   %67 = add i64 %63, 19


Adj: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Removing: [0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x560c7faea7e0]:   %66 = add i64 %62, 19


Uprime Matches: [0x560c7fb44120]:   %67 = add i64 %63, 19


Adj: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Removing: [0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x560c7faea7e0]:   %66 = add i64 %62, 19


Uprime Matches: [0x560c7fb44120]:   %67 = add i64 %63, 19


Adj: [0x560c7fbe6780]:   %58 = add i64 %57, 58
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Removing: [0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x560c7faea7e0]:   %66 = add i64 %62, 19


Uprime Matches: [0x560c7fb44120]:   %67 = add i64 %63, 19


Adj: [0x560c7fb48040]:   %75 = add i64 %71, 5


Removing: [0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x560c7faea7e0]:   %66 = add i64 %62, 19


Uprime Matches: [0x560c7fb44120]:   %67 = add i64 %63, 19


Adj: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fb562a0]:   %107 = add i64 %79, 8


Removing: [0x560c7fb2ae28]:   %74 = load i32, i32* %EAX.i13, align 4
From the pot matches of: [0x560c7fae9ce8]:   %63 = load i32, i32* %EAX, align 4


Uprime : [0x560c7fae9d48]:   %64 = zext i32 %63 to i64


Uprime Matches: [0x560c7fb1d008]:   %13 = zext i1 %12 to i8
[0x560c7fb23c98]:   %28 = zext i1 %27 to i8
[0x560c7fb24338]:   %37 = zext i1 %36 to i8
[0x560c7fb2a4a8]:   %65 = zext i32 %64 to i64
[0x560c7fb2c318]:   %78 = zext i32 %77 to i64
[0x560c7fb2dad8]:   %83 = zext i1 %82 to i8
[0x560c7fb306c8]:   %95 = zext i1 %94 to i8
[0x560c7fb312a8]:   %102 = zext i1 %101 to i8


Adj: [0x560c7fb4aef0]:   store i32 %74, i32* %76, align 4


Removing: [0x560c7fb2cc38]:   %80 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7faea848]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7faea8c0]:   %68 = add i64 %67, -8


Uprime Matches: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fb63230]:   %44 = add i64 %43, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb2cfb0]:   %98 = lshr i64 %80, 63
[0x560c7fb42720]:   %82 = icmp ugt i64 %80, -33
[0x560c7fb4ba50]:   %81 = add i64 %80, 32
[0x560c7fb4d500]:   %90 = xor i64 %81, %80
[0x560c7fb50310]:   %110 = add i64 %80, 48
[0x560c7fb54d00]:   %104 = add i64 %80, 40


Removing: [0x560c7fb1fd30]:   %8 = add i64 %7, -8
From the pot matches of: [0x560c7faea8c0]:   %68 = add i64 %67, -8


Uprime : [0x560c7faeaa20]:   store i64 %68, i64* %RSP, align 8, !tbaa !1257


Uprime Matches: [0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8


Adj: [0x560c7fa8da58]:   %9 = inttoptr i64 %8 to i64*
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21fc0]:   %12 = icmp ult i64 %8, 32
[0x560c7fb22730]:   %22 = xor i64 %8, %11
[0x560c7fb45060]:   %33 = lshr i64 %8, 63


Removing: [0x560c7fb29408]:   %62 = inttoptr i64 %61 to i64*
From the pot matches of: [0x560c7faea928]:   %69 = inttoptr i64 %68 to i64*


Uprime : [0x560c7faea9a0]:   store i64 %66, i64* %69, align 8


Uprime Matches: [0x560c7fb44850]:   store i64 %67, i64* %70, align 8


Adj: [0x560c7fadda60]:   store i64 %59, i64* %62, align 8


Removing: [0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faead68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x560c7faeafe0]:   %75 = add i64 %71, 5


Uprime Matches: [0x560c7fb48040]:   %75 = add i64 %71, 5


Adj: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Removing: [0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faead68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x560c7faeafe0]:   %75 = add i64 %71, 5


Uprime Matches: [0x560c7fb48040]:   %75 = add i64 %71, 5


Adj: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Removing: [0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faead68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x560c7faeafe0]:   %75 = add i64 %71, 5


Uprime Matches: [0x560c7fb48040]:   %75 = add i64 %71, 5


Adj: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Removing: [0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faead68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x560c7faeafe0]:   %75 = add i64 %71, 5


Uprime Matches: [0x560c7fb48040]:   %75 = add i64 %71, 5


Adj: [0x560c7fbe6780]:   %58 = add i64 %57, 58
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Removing: [0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faead68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x560c7faeafe0]:   %75 = add i64 %71, 5


Uprime Matches: [0x560c7fb48040]:   %75 = add i64 %71, 5


Adj: [0x560c7fb43d30]:   %66 = add i64 %63, -269
[0x560c7fb44120]:   %67 = add i64 %63, 19


Removing: [0x560c7fb2cb08]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faead68]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x560c7faeafe0]:   %75 = add i64 %71, 5


Uprime Matches: [0x560c7fb48040]:   %75 = add i64 %71, 5


Adj: [0x560c7fb541f0]:   %103 = add i64 %79, 7
[0x560c7fb562a0]:   %107 = add i64 %79, 8


Removing: [0x560c7fae8e68]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7faeae48]:   %72 = load i64, i64* %RBP, align 8


Uprime : [0x560c7faeaf00]:   %73 = add i64 %72, -20


Uprime Matches: [0x560c7fb47d30]:   %73 = add i64 %72, -20


Adj: [0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8


Removing: [0x560c7fb24a58]:   %43 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7faeae48]:   %72 = load i64, i64* %RBP, align 8


Uprime : [0x560c7faeaf00]:   %73 = add i64 %72, -20


Uprime Matches: [0x560c7fb47d30]:   %73 = add i64 %72, -20


Adj: [0x560c7fb63230]:   %44 = add i64 %43, -8


Removing: [0x560c7fb252a8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x560c7faeae48]:   %72 = load i64, i64* %RBP, align 8


Uprime : [0x560c7faeaf00]:   %73 = add i64 %72, -20


Uprime Matches: [0x560c7fb47d30]:   %73 = add i64 %72, -20


Adj: [0x560c7fbe0cc0]:   %51 = add i64 %50, -16


Removing: [0x560c7fb2a378]:   %64 = load i32, i32* %EAX.i13, align 4
From the pot matches of: [0x560c7faeaf68]:   %74 = load i32, i32* %EAX, align 4


Uprime : [0x560c7faeb140]:   store i32 %74, i32* %76, align 4


Uprime Matches: [0x560c7fa79720]:   store i64 %5, i64* %3, align 8
[0x560c7fa8ce10]:   store i64 %58, i64* %3, align 8
[0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fadda60]:   store i64 %59, i64* %62, align 8
[0x560c7fb1fe40]:   store i64 %4, i64* %9, align 8
[0x560c7fb20e00]:   store i64 %8, i64* %RBP.i, align 8
[0x560c7fb21bc0]:   store i64 %11, i64* %6, align 8
[0x560c7fb220d0]:   store i8 %13, i8* %14, align 1
[0x560c7fb22550]:   store i8 %20, i8* %21, align 1
[0x560c7fb22c80]:   store i8 %25, i8* %26, align 1
[0x560c7fb23940]:   store i8 %28, i8* %29, align 1
[0x560c7fb26930]:   store i8 %37, i8* %38, align 1
[0x560c7fb2d3b0]:   store i64 %40, i64* %3, align 8
[0x560c7fb2d4e0]:   store i32 0, i32* %41, align 4
[0x560c7fb42050]:   store i64 %81, i64* %6, align 8
[0x560c7fb42df0]:   store i64 4195764, i64* %RDI.i, align 8
[0x560c7fb43860]:   store i64 %65, i64* %RSI.i20, align 8
[0x560c7fb43c30]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fb445f0]:   store i8 %31, i8* %32, align 1
[0x560c7fb44850]:   store i64 %67, i64* %70, align 8
[0x560c7fb454c0]:   store i8 %83, i8* %14, align 1
[0x560c7fb468a0]:   store i64 0, i64* %RSI.i20, align 8
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8
[0x560c7fb477b0]:   store i64 %66, i64* %3, align 8
[0x560c7fb4a9e0]:   store i64 %75, i64* %3, align 8
[0x560c7fb4aef0]:   store i32 %74, i32* %76, align 4
[0x560c7fb4b3c0]:   store i64 %78, i64* %RAX.i, align 8
[0x560c7fb4cca0]:   store i64 %110, i64* %6, align 8
[0x560c7fb4e560]:   store i8 %89, i8* %21, align 1
[0x560c7fb4f5a0]:   store i64 %106, i64* %RBP.i, align 8
[0x560c7fb4fb40]:   store i64 %104, i64* %6, align 8
[0x560c7fb50430]:   store i8 %93, i8* %26, align 1
[0x560c7fb50940]:   store i8 %95, i8* %29, align 1
[0x560c7fb50e50]:   store i8 %97, i8* %32, align 1
[0x560c7fb54070]:   store i8 %102, i8* %38, align 1
[0x560c7fb544f0]:   store i64 %103, i64* %3, align 8
[0x560c7fb56420]:   store i64 %107, i64* %3, align 8
[0x560c7fb56ab0]:   store i64 %109, i64* %3, align 8
[0x560c7fbda2a0]:   store i32 %45, i32* %48, align 4
[0x560c7fbdb780]:   store i64 %47, i64* %3, align 8
[0x560c7fbe2460]:   store i64 %54, i64* %3, align 8
[0x560c7fbe37b0]:   store i8 0, i8* %AL.i18, align 1
[0x560c7fbe4c50]:   store i64 %52, i64* %55, align 8


Adj: [0x560c7fb2a4a8]:   %65 = zext i32 %64 to i64


Removing: [0x560c7fb11348]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x560c7fadea40]:   %107 = add i64 %79, 8


Uprime Matches: [0x560c7fb562a0]:   %107 = add i64 %79, 8


Adj: [0x560c7fb2d280]:   %40 = add i64 %10, 14


Removing: [0x560c7fb24cb8]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x560c7fadea40]:   %107 = add i64 %79, 8


Uprime Matches: [0x560c7fb562a0]:   %107 = add i64 %79, 8


Adj: [0x560c7fbd8f90]:   %47 = add i64 %46, 3


Removing: [0x560c7fb25fb8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x560c7fadea40]:   %107 = add i64 %79, 8


Uprime Matches: [0x560c7fb562a0]:   %107 = add i64 %79, 8


Adj: [0x560c7fbdfef0]:   %54 = add i64 %53, 4


Removing: [0x560c7fb28828]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x560c7fadea40]:   %107 = add i64 %79, 8


Uprime Matches: [0x560c7fb562a0]:   %107 = add i64 %79, 8


Adj: [0x560c7fbe6780]:   %58 = add i64 %57, 58
[0x560c7fbeab50]:   %59 = add i64 %57, 7


Removing: [0x560c7fb29538]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x560c7fadea40]:   %107 = add i64 %79, 8


Uprime Matches: [0x560c7fb562a0]:   %107 = add i64 %79, 8


Adj: [0x560c7fb43d30]:   %66 = add i64 %63, -269
[0x560c7fb44120]:   %67 = add i64 %63, 19


Removing: [0x560c7fb2aa98]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x560c7fadea40]:   %107 = add i64 %79, 8


Uprime Matches: [0x560c7fb562a0]:   %107 = add i64 %79, 8


Adj: [0x560c7fb48040]:   %75 = add i64 %71, 5


Removing: [0x560c7fae8d28]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7faeb348]:   %80 = load i64, i64* %RSP, align 8


Uprime : [0x560c7fadecc0]:   %110 = add i64 %80, 48


Uprime Matches: [0x560c7fb50310]:   %110 = add i64 %80, 48


Adj: [0x560c7fb1f390]:   %11 = add i64 %7, -40
[0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb2d150]:   %39 = add i64 %7, -12


Removing: [0x560c7fb28958]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7faeb348]:   %80 = load i64, i64* %RSP, align 8


Uprime : [0x560c7fadecc0]:   %110 = add i64 %80, 48


Uprime Matches: [0x560c7fb50310]:   %110 = add i64 %80, 48


Adj: [0x560c7fbf5210]:   %61 = add i64 %60, -8


Removing: [0x560c7fb2a5d8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7faeb348]:   %80 = load i64, i64* %RSP, align 8


Uprime : [0x560c7fadecc0]:   %110 = add i64 %80, 48


Uprime Matches: [0x560c7fb50310]:   %110 = add i64 %80, 48


Adj: [0x560c7fb44d60]:   %69 = add i64 %68, -8


Removing: [0x560c7fb1d098]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb221e0]:   %16 = and i32 %15, 255


Removing: [0x560c7fb22af8]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb445f0]:   store i8 %31, i8* %32, align 1


Removing: [0x560c7fb2e918]:   %84 = trunc i64 %81 to i32
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb4d780]:   %85 = and i32 %84, 255


Removing: [0x560c7fb30cb8]:   %97 = trunc i64 %96 to i8
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb22bb0]:   %25 = and i8 %24, 1
[0x560c7fb47340]:   %93 = and i8 %92, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb50e50]:   store i8 %97, i8* %32, align 1


Removing: [0x560c7fb22bb0]:   %25 = and i8 %24, 1
From the pot matches of: [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime : [0x560c7faeb920]:   %89 = xor i8 %88, 1


Uprime Matches: [0x560c7fb41560]:   %20 = xor i8 %19, 1
[0x560c7fb4e430]:   %89 = xor i8 %88, 1


Adj: [0x560c7fb22c80]:   store i8 %25, i8* %26, align 1


Removing: [0x560c7fb47340]:   %93 = and i8 %92, 1
From the pot matches of: [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime : [0x560c7faeb920]:   %89 = xor i8 %88, 1


Uprime Matches: [0x560c7fb41560]:   %20 = xor i8 %19, 1
[0x560c7fb4e430]:   %89 = xor i8 %88, 1


Adj: [0x560c7fb50430]:   store i8 %93, i8* %26, align 1

Round: 1

Removing: [0x560c7fb1ea38]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb22bb0]:   %25 = and i8 %24, 1


Removing: [0x560c7fb300d8]:   %92 = trunc i64 %91 to i8
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb47340]:   %93 = and i8 %92, 1


Removing: [0x560c7fae8d28]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7fae95d8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7fae9650]:   %59 = add i64 %58, -8


Uprime Matches: [0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb1f390]:   %11 = add i64 %7, -40
[0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb2d150]:   %39 = add i64 %7, -12


Removing: [0x560c7fb44d60]:   %69 = add i64 %68, -8
From the pot matches of: [0x560c7fae9650]:   %59 = add i64 %58, -8


Uprime : [0x560c7fae96b8]:   %60 = inttoptr i64 %59 to i64*


Uprime Matches: [0x560c7fb29408]:   %62 = inttoptr i64 %61 to i64*


Adj: [0x560c7fb2a708]:   %70 = inttoptr i64 %69 to i64*
[0x560c7fb46e80]:   store i64 %69, i64* %6, align 8


Removing: [0x560c7fae8d28]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7faea848]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7faea8c0]:   %68 = add i64 %67, -8


Uprime Matches: [0x560c7fb44d60]:   %69 = add i64 %68, -8
[0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb1f390]:   %11 = add i64 %7, -40
[0x560c7fb1fd30]:   %8 = add i64 %7, -8
[0x560c7fb2d150]:   %39 = add i64 %7, -12


Removing: [0x560c7fbf5210]:   %61 = add i64 %60, -8
From the pot matches of: [0x560c7faea8c0]:   %68 = add i64 %67, -8


Uprime : [0x560c7faea928]:   %69 = inttoptr i64 %68 to i64*


Uprime Matches: [0x560c7fb2a708]:   %70 = inttoptr i64 %69 to i64*


Adj: [0x560c7fadd600]:   store i64 %61, i64* %6, align 8
[0x560c7fb29408]:   %62 = inttoptr i64 %61 to i64*


Removing: [0x560c7fb1ea38]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb22bb0]:   %25 = and i8 %24, 1


Removing: [0x560c7fb300d8]:   %92 = trunc i64 %91 to i8
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1
[0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb47340]:   %93 = and i8 %92, 1

Round: 2

Removing: [0x560c7fb2a5d8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7fae95d8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7fae9650]:   %59 = add i64 %58, -8


Uprime Matches: [0x560c7fbf5210]:   %61 = add i64 %60, -8


Adj: [0x560c7fb44d60]:   %69 = add i64 %68, -8


Removing: [0x560c7fb28958]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x560c7faea848]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1257


Uprime : [0x560c7faea8c0]:   %68 = add i64 %67, -8


Uprime Matches: [0x560c7fb44d60]:   %69 = add i64 %68, -8


Adj: [0x560c7fbf5210]:   %61 = add i64 %60, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x560c7fa7cc20]:   %40 = add i64 %8, -12 {
	[0x560c7fb2d150]:  %39 = add i64 %7, -12
	}

[0x560c7fa7cca0]:   %41 = add i64 %11, 14 {
	[0x560c7fb2d280]:  %40 = add i64 %10, 14
	}

[0x560c7fa7cd20]:   store i64 %41, i64* %PC, align 8 {
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	}

[0x560c7fa7cd88]:   %42 = inttoptr i64 %40 to i32* {
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	}

[0x560c7fa7ce00]:   store i32 0, i32* %42, align 4 {
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	}

[0x560c7fa7ce68]:   %43 = load i64, i64* %RBP, align 8 {
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	}

[0x560c7fa7cee0]:   %44 = add i64 %43, -8 {
	[0x560c7fb63230]:  %44 = add i64 %43, -8
	}

[0x560c7fa7cf48]:   %45 = load i32, i32* %EDI, align 4 {
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	}

[0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8 {
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	}

[0x560c7fa7d020]:   %47 = add i64 %46, 3 {
	[0x560c7fbd8f90]:  %47 = add i64 %46, 3
	}

[0x560c7fa7d0a0]:   store i64 %47, i64* %PC, align 8 {
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	}

[0x560c7fa7d108]:   %48 = inttoptr i64 %44 to i32* {
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	}

[0x560c7fa7d180]:   store i32 %45, i32* %48, align 4 {
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	}

[0x560c7fade9c0]:   store i64 %104, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	}

[0x560c7fadea40]:   %107 = add i64 %79, 8 {
	[0x560c7fb562a0]:  %107 = add i64 %79, 8
	}

[0x560c7fadeac0]:   store i64 %107, i64* %PC, align 8 {
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	}

[0x560c7fadeb28]:   %108 = inttoptr i64 %104 to i64* {
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fadeb88]:   %109 = load i64, i64* %108, align 8 {
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fadec00]:   store i64 %109, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	}

[0x560c7fadecc0]:   %110 = add i64 %80, 48 {
	[0x560c7fb50310]:  %110 = add i64 %80, 48
	}

[0x560c7faded40]:   store i64 %110, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	}

[0x560c7fadeda8]:   ret %struct.Memory* %70 {
	[0x560c7fb32218]:  ret %struct.Memory.31* %call2_4004eb
	}

[0x560c7fae38c0]: %struct.State* %0 {
	[0x560c7fb50b80]:%struct.State.0* %0
	}

[0x560c7fae3900]: i64 %1 {
	[0x560c7fb2cca0]:i64 %1
	}

[0x560c7fae3940]: %struct.Memory* %2 {
	[0x560c7fb2cd70]:%struct.Memory.31* %2
	}

[0x560c7fae3af8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x560c7fb28368]:  %AL.i18 = bitcast %union.anon.4* %56 to i8*
	}

[0x560c7fae3bd0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x560c7fa846a0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x560c7fae3ca8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x560c7fa85f08]:  %56 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x560c7fae3d18]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x560c7fb2a118]:  %EAX.i13 = bitcast %union.anon.4* %56 to i32*
	}

[0x560c7fae3df8]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x560c7fa856c8]:  %49 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x560c7fae3eb8]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x560c7fb2a968]:  %ESI.i9 = bitcast %union.anon.4* %49 to i32*
	}

[0x560c7fae3f98]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x560c7fa85298]:  %42 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x560c7fae4008]:   %EDI = bitcast %union.anon* %5 to i32* {
	[0x560c7fb24928]:  %EDI.i = bitcast %union.anon.4* %42 to i32*
	}

[0x560c7fae40b8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x560c7fb202f8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %56, i64 0, i32 0
	}

[0x560c7fae4178]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x560c7fa90308]:  %RSI.i20 = getelementptr inbounds %union.anon.4, %union.anon.4* %49, i64 0, i32 0
	}

[0x560c7fae4238]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0 {
	[0x560c7fb201c8]:  %RDI.i = getelementptr inbounds %union.anon.4, %union.anon.4* %42, i64 0, i32 0
	}

[0x560c7fae4340]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560c7fac4af0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x560c7fae4450]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560c7fac3830]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x560c7fae44e8]:   %6 = load i64, i64* %RBP, align 8 {
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x560c7fae4560]:   %7 = add i64 %1, 1 {
	[0x560c7fa7a000]:  %5 = add i64 %1, 1
	}

[0x560c7fae45e0]:   store i64 %7, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	}

[0x560c7fae4648]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	}

[0x560c7fae46c0]:   %17 = and i32 %16, 255 {
	[0x560c7fb221e0]:  %16 = and i32 %15, 255
	}

[0x560c7fae4750]:   %9 = add i64 %8, -8 {
	[0x560c7fb1fd30]:  %8 = add i64 %7, -8
	}

[0x560c7fae47b8]:   %10 = inttoptr i64 %9 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	}

[0x560c7fae4830]:   store i64 %6, i64* %10, align 8 {
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	}

[0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8 {
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	}

[0x560c7fae4910]:   store i64 %9, i64* %RBP, align 8, !tbaa !1257 {
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x560c7fae49d0]:   %12 = add i64 %8, -40 {
	[0x560c7fb1f390]:  %11 = add i64 %7, -40
	}

[0x560c7fae4a50]:   store i64 %12, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	}

[0x560c7fae4b10]:   %13 = icmp ult i64 %9, 32 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	}

[0x560c7fae4b78]:   %14 = zext i1 %13 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	}

[0x560c7fae4c20]:   %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x560c7fb1f990]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x560c7fae4cb0]:   store i8 %14, i8* %15, align 1, !tbaa !1261 {
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	}

[0x560c7fae5328]:   %16 = trunc i64 %12 to i32 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	}

[0x560c7fae53d0]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x560c7fb26df0]:  %32 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x560c7fae54b0]:   %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9 {
	[0x560c7fb1e5a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x560c7fae5578]:   %19 = trunc i32 %18 to i8 {
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	}

[0x560c7fae55f0]:   %20 = and i8 %19, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7fae5670]:   %21 = xor i8 %20, 1 {
	[0x560c7fb41560]:  %20 = xor i8 %19, 1
	[0x560c7fb4e430]:  %89 = xor i8 %88, 1
	}

[0x560c7fae5720]:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x560c7fb22650]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x560c7fae57b0]:   store i8 %21, i8* %22, align 1, !tbaa !1275 {
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	}

[0x560c7fae5e40]:   %23 = xor i64 %9, %12 {
	[0x560c7fb22730]:  %22 = xor i64 %8, %11
	}

[0x560c7fae5ec0]:   %24 = lshr i64 %23, 4 {
	[0x560c7fb41de0]:  %23 = lshr i64 %22, 4
	}

[0x560c7fae5f28]:   %25 = trunc i64 %24 to i8 {
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	}

[0x560c7fae5fa0]:   %26 = and i8 %25, 1 {
	[0x560c7fb22bb0]:  %25 = and i8 %24, 1
	}

[0x560c7fae6050]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560c7fb44f10]:  %26 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x560c7fae60e0]:   store i8 %26, i8* %27, align 1, !tbaa !1276 {
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	}

[0x560c7fae6770]:   %28 = icmp eq i64 %12, 0 {
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	}

[0x560c7fae67d8]:   %29 = zext i1 %28 to i8 {
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	}

[0x560c7fae6880]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x560c7fb36380]:  %29 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x560c7fae6910]:   store i8 %29, i8* %30, align 1, !tbaa !1277 {
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	}

[0x560c7fae6fa0]:   %31 = lshr i64 %12, 63 {
	[0x560c7fb211d0]:  %30 = lshr i64 %11, 63
	}

[0x560c7fae7008]:   %32 = trunc i64 %31 to i8 {
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	}

[0x560c7fae7080]:   store i64 %64, i64* %RSI, align 8, !tbaa !1257 {
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	}

[0x560c7fae7100]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	}

[0x560c7fae71c0]:   %65 = add i64 %62, -269 {
	[0x560c7fb43d30]:  %66 = add i64 %63, -269
	}

[0x560c7fae7290]:   store i8 %32, i8* %33, align 1, !tbaa !1278 {
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	}

[0x560c7fae7920]:   %34 = lshr i64 %9, 63 {
	[0x560c7fb45060]:  %33 = lshr i64 %8, 63
	}

[0x560c7fae79a0]:   %35 = xor i64 %31, %34 {
	[0x560c7fb36240]:  %34 = xor i64 %30, %33
	}

[0x560c7fae7a20]:   %36 = add nuw nsw i64 %35, %34 {
	[0x560c7fb23dc0]:  %35 = add nuw nsw i64 %34, %33
	}

[0x560c7fae7aa0]:   %37 = icmp eq i64 %36, 2 {
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	}

[0x560c7fae7b08]:   %38 = zext i1 %37 to i8 {
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	}

[0x560c7fae7bb0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x560c7fb2ace0]:  %38 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x560c7fae7c40]:   store i8 %38, i8* %39, align 1, !tbaa !1279 {
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	}

[0x560c7fae8ec8]:   %49 = load i64, i64* %RBP, align 8 {
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x560c7fae8f80]:   %50 = add i64 %49, -16 {
	[0x560c7fbe0cc0]:  %51 = add i64 %50, -16
	}

[0x560c7fae8fe8]:   %51 = load i64, i64* %RSI, align 8 {
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	}

[0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8 {
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	}

[0x560c7fae90c0]:   %53 = add i64 %52, 4 {
	[0x560c7fbdfef0]:  %54 = add i64 %53, 4
	}

[0x560c7fae9140]:   store i64 %53, i64* %PC, align 8 {
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	}

[0x560c7fae91a8]:   %54 = inttoptr i64 %50 to i64* {
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	}

[0x560c7fae9220]:   store i64 %51, i64* %54, align 8 {
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8 {
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	}

[0x560c7fae9300]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	}

[0x560c7fae94f0]:   %56 = add i64 %55, 58 {
	[0x560c7fbe6780]:  %58 = add i64 %57, 58
	}

[0x560c7fae9570]:   %57 = add i64 %55, 7 {
	[0x560c7fbeab50]:  %59 = add i64 %57, 7
	}

[0x560c7fae95d8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	}

[0x560c7fae9650]:   %59 = add i64 %58, -8 {
	[0x560c7fbf5210]:  %61 = add i64 %60, -8
	}

[0x560c7fae96b8]:   %60 = inttoptr i64 %59 to i64* {
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	}

[0x560c7fae9730]:   store i64 %57, i64* %60, align 8 {
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	}

[0x560c7fae97b0]:   store i64 %59, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	}

[0x560c7fae9830]:   store i64 %56, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	}

[0x560c7fae9aa0]:   %61 = tail call %struct.Memory* @sub_400510_doWork(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	}

[0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8 {
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	}

[0x560c7fae9c80]:   store i64 add (i64 ptrtoint (%seg_4005b0__rodata_type* @seg_4005b0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1257 {
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	}

[0x560c7fae9ce8]:   %63 = load i32, i32* %EAX, align 4 {
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	}

[0x560c7fae9d48]:   %64 = zext i32 %63 to i64 {
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	}

[0x560c7faea7e0]:   %66 = add i64 %62, 19 {
	[0x560c7fb44120]:  %67 = add i64 %63, 19
	}

[0x560c7faea848]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	}

[0x560c7faea8c0]:   %68 = add i64 %67, -8 {
	[0x560c7fb44d60]:  %69 = add i64 %68, -8
	}

[0x560c7faea928]:   %69 = inttoptr i64 %68 to i64* {
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	}

[0x560c7faea9a0]:   store i64 %66, i64* %69, align 8 {
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	}

[0x560c7faeaa20]:   store i64 %68, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	}

[0x560c7faeaaa0]:   store i64 %65, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	}

[0x560c7faeaca8]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61) {
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	[0x560c7fb2b070]:  %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
	}

[0x560c7faead68]:   %71 = load i64, i64* %PC, align 8 {
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	}

[0x560c7faeade0]:   store i64 0, i64* %RSI, align 8, !tbaa !1257 {
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	}

[0x560c7faeae48]:   %72 = load i64, i64* %RBP, align 8 {
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	}

[0x560c7faeaf00]:   %73 = add i64 %72, -20 {
	[0x560c7fb47d30]:  %73 = add i64 %72, -20
	}

[0x560c7faeaf68]:   %74 = load i32, i32* %EAX, align 4 {
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	}

[0x560c7faeafe0]:   %75 = add i64 %71, 5 {
	[0x560c7fb48040]:  %75 = add i64 %71, 5
	}

[0x560c7faeb060]:   store i64 %75, i64* %PC, align 8 {
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	}

[0x560c7faeb0c8]:   %76 = inttoptr i64 %73 to i32* {
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	}

[0x560c7faeb140]:   store i32 %74, i32* %76, align 4 {
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	}

[0x560c7faeb1a8]:   %77 = load i32, i32* %ESI, align 4 {
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	}

[0x560c7faeb208]:   %78 = zext i32 %77 to i64 {
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	}

[0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8 {
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	}

[0x560c7faeb2e0]:   store i64 %78, i64* %RAX, align 8, !tbaa !1257 {
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	}

[0x560c7faeb348]:   %80 = load i64, i64* %RSP, align 8 {
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	}

[0x560c7faeb3c0]:   %81 = add i64 %80, 32 {
	[0x560c7fb4ba50]:  %81 = add i64 %80, 32
	}

[0x560c7faeb440]:   store i64 %81, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	}

[0x560c7faeb500]:   %82 = icmp ugt i64 %80, -33 {
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	}

[0x560c7faeb568]:   %83 = zext i1 %82 to i8 {
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	}

[0x560c7faeb5e0]:   store i8 %83, i8* %15, align 1, !tbaa !1261 {
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	}

[0x560c7faeb648]:   %84 = trunc i64 %81 to i32 {
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	}

[0x560c7faeb6c0]:   %85 = and i32 %84, 255 {
	[0x560c7fb4d780]:  %85 = and i32 %84, 255
	}

[0x560c7faeb760]:   %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9 {
	[0x560c7fb4da20]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x560c7faeb828]:   %87 = trunc i32 %86 to i8 {
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	}

[0x560c7faeb8a0]:   %88 = and i8 %87, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7faeb920]:   %89 = xor i8 %88, 1 {
	[0x560c7fb41560]:  %20 = xor i8 %19, 1
	[0x560c7fb4e430]:  %89 = xor i8 %88, 1
	}

[0x560c7faeb9a0]:   store i8 %89, i8* %22, align 1, !tbaa !1275 {
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	}

[0x560c7faeba20]:   %90 = xor i64 %81, %80 {
	[0x560c7fb4d500]:  %90 = xor i64 %81, %80
	}

[0x560c7faebaa0]:   %91 = lshr i64 %90, 4 {
	[0x560c7fb4d5f0]:  %91 = lshr i64 %90, 4
	}

[0x560c7faebb08]:   %92 = trunc i64 %91 to i8 {
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	}

[0x560c7faebb80]:   %93 = and i8 %92, 1 {
	[0x560c7fb47340]:  %93 = and i8 %92, 1
	}

[0x560c7faebc00]:   store i8 %93, i8* %27, align 1, !tbaa !1276 {
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	}

[0x560c7faebc80]:   %94 = icmp eq i64 %81, 0 {
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	}

[0x560c7faebce8]:   %95 = zext i1 %94 to i8 {
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	}

[0x560c7faebd60]:   store i8 %95, i8* %30, align 1, !tbaa !1277 {
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	}

[0x560c7faebde0]:   %96 = lshr i64 %81, 63 {
	[0x560c7fb50cd0]:  %96 = lshr i64 %81, 63
	}

[0x560c7faebe48]:   %97 = trunc i64 %96 to i8 {
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7faebec0]:   store i8 %97, i8* %33, align 1, !tbaa !1278 {
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	}

[0x560c7faebf40]:   %98 = lshr i64 %80, 63 {
	[0x560c7fb2cfb0]:  %98 = lshr i64 %80, 63
	}

[0x560c7faebfc0]:   %99 = xor i64 %96, %98 {
	[0x560c7fb51240]:  %99 = xor i64 %96, %98
	}

[0x560c7faec040]:   %100 = add nuw nsw i64 %99, %96 {
	[0x560c7fb48e40]:  %100 = add nuw nsw i64 %99, %96
	}

[0x560c7faec0c0]:   %101 = icmp eq i64 %100, 2 {
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7faec128]:   %102 = zext i1 %101 to i8 {
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faec1a0]:   store i8 %102, i8* %39, align 1, !tbaa !1279 {
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	}

[0x560c7faec220]:   %103 = add i64 %79, 7 {
	[0x560c7fb541f0]:  %103 = add i64 %79, 7
	}

[0x560c7faec2a0]:   store i64 %103, i64* %PC, align 8 {
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	}

[0x560c7faec360]:   %104 = add i64 %80, 40 {
	[0x560c7fb54d00]:  %104 = add i64 %80, 40
	}

[0x560c7faec3c8]:   %105 = inttoptr i64 %81 to i64* {
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	}

[0x560c7faec428]:   %106 = load i64, i64* %105, align 8 {
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	}

[0x560c7faec4a0]:   store i64 %106, i64* %RBP, align 8, !tbaa !1257 {
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x560c7fae3980]: block_4004c0 {
	[0x560c7fb40090]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x560c7fb4e430]:   %89 = xor i8 %88, 1
From the pot matches of: [0x560c7fae5670]:   %21 = xor i8 %20, 1


Uprime : [0x560c7fae57b0]:   store i8 %21, i8* %22, align 1, !tbaa !1275


Uprime Matches: [0x560c7fb22550]:   store i8 %20, i8* %21, align 1


Adj: [0x560c7fb4e560]:   store i8 %89, i8* %21, align 1


Removing: [0x560c7fb41560]:   %20 = xor i8 %19, 1
From the pot matches of: [0x560c7faeb920]:   %89 = xor i8 %88, 1


Uprime : [0x560c7faeb9a0]:   store i8 %89, i8* %22, align 1, !tbaa !1275


Uprime Matches: [0x560c7fb4e560]:   store i8 %89, i8* %21, align 1


Adj: [0x560c7fb22550]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x560c7fb4e020]:   %88 = and i8 %87, 1
From the pot matches of: [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime : [0x560c7fae5670]:   %21 = xor i8 %20, 1


Uprime Matches: [0x560c7fb41560]:   %20 = xor i8 %19, 1


Adj: [0x560c7fb4e430]:   %89 = xor i8 %88, 1


Removing: [0x560c7fb222f0]:   %19 = and i8 %18, 1
From the pot matches of: [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime : [0x560c7faeb920]:   %89 = xor i8 %88, 1


Uprime Matches: [0x560c7fb4e430]:   %89 = xor i8 %88, 1


Adj: [0x560c7fb41560]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x560c7fb2f3c8]:   %87 = trunc i32 %86 to i8
From the pot matches of: [0x560c7fae5578]:   %19 = trunc i32 %18 to i8


Uprime : [0x560c7fae55f0]:   %20 = and i8 %19, 1


Uprime Matches: [0x560c7fb222f0]:   %19 = and i8 %18, 1


Adj: [0x560c7fb4e020]:   %88 = and i8 %87, 1


Removing: [0x560c7fb1f2d8]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x560c7faeb828]:   %87 = trunc i32 %86 to i8


Uprime : [0x560c7faeb8a0]:   %88 = and i8 %87, 1


Uprime Matches: [0x560c7fb4e020]:   %88 = and i8 %87, 1


Adj: [0x560c7fb222f0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x560c7fa7cc20]:   %40 = add i64 %8, -12 {
	[0x560c7fb2d150]:  %39 = add i64 %7, -12
	}

[0x560c7fa7cca0]:   %41 = add i64 %11, 14 {
	[0x560c7fb2d280]:  %40 = add i64 %10, 14
	}

[0x560c7fa7cd20]:   store i64 %41, i64* %PC, align 8 {
	[0x560c7fb2d3b0]:  store i64 %40, i64* %3, align 8
	}

[0x560c7fa7cd88]:   %42 = inttoptr i64 %40 to i32* {
	[0x560c7fb246c8]:  %41 = inttoptr i64 %39 to i32*
	}

[0x560c7fa7ce00]:   store i32 0, i32* %42, align 4 {
	[0x560c7fb2d4e0]:  store i32 0, i32* %41, align 4
	}

[0x560c7fa7ce68]:   %43 = load i64, i64* %RBP, align 8 {
	[0x560c7fb24a58]:  %43 = load i64, i64* %RBP.i, align 8
	}

[0x560c7fa7cee0]:   %44 = add i64 %43, -8 {
	[0x560c7fb63230]:  %44 = add i64 %43, -8
	}

[0x560c7fa7cf48]:   %45 = load i32, i32* %EDI, align 4 {
	[0x560c7fb24b88]:  %45 = load i32, i32* %EDI.i, align 4
	}

[0x560c7fa7cfa8]:   %46 = load i64, i64* %PC, align 8 {
	[0x560c7fb24cb8]:  %46 = load i64, i64* %3, align 8
	}

[0x560c7fa7d020]:   %47 = add i64 %46, 3 {
	[0x560c7fbd8f90]:  %47 = add i64 %46, 3
	}

[0x560c7fa7d0a0]:   store i64 %47, i64* %PC, align 8 {
	[0x560c7fbdb780]:  store i64 %47, i64* %3, align 8
	}

[0x560c7fa7d108]:   %48 = inttoptr i64 %44 to i32* {
	[0x560c7fb25178]:  %48 = inttoptr i64 %44 to i32*
	}

[0x560c7fa7d180]:   store i32 %45, i32* %48, align 4 {
	[0x560c7fbda2a0]:  store i32 %45, i32* %48, align 4
	}

[0x560c7fade9c0]:   store i64 %104, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb4fb40]:  store i64 %104, i64* %6, align 8
	}

[0x560c7fadea40]:   %107 = add i64 %79, 8 {
	[0x560c7fb562a0]:  %107 = add i64 %79, 8
	}

[0x560c7fadeac0]:   store i64 %107, i64* %PC, align 8 {
	[0x560c7fb56420]:  store i64 %107, i64* %3, align 8
	}

[0x560c7fadeb28]:   %108 = inttoptr i64 %104 to i64* {
	[0x560c7fb31af8]:  %108 = inttoptr i64 %104 to i64*
	}

[0x560c7fadeb88]:   %109 = load i64, i64* %108, align 8 {
	[0x560c7fb320e8]:  %109 = load i64, i64* %108, align 8
	}

[0x560c7fadec00]:   store i64 %109, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fb56ab0]:  store i64 %109, i64* %3, align 8
	}

[0x560c7fadecc0]:   %110 = add i64 %80, 48 {
	[0x560c7fb50310]:  %110 = add i64 %80, 48
	}

[0x560c7faded40]:   store i64 %110, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb4cca0]:  store i64 %110, i64* %6, align 8
	}

[0x560c7fadeda8]:   ret %struct.Memory* %70 {
	[0x560c7fb32218]:  ret %struct.Memory.31* %call2_4004eb
	}

[0x560c7fae38c0]: %struct.State* %0 {
	[0x560c7fb50b80]:%struct.State.0* %0
	}

[0x560c7fae3900]: i64 %1 {
	[0x560c7fb2cca0]:i64 %1
	}

[0x560c7fae3940]: %struct.Memory* %2 {
	[0x560c7fb2cd70]:%struct.Memory.31* %2
	}

[0x560c7fae3af8]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x560c7fb28368]:  %AL.i18 = bitcast %union.anon.4* %56 to i8*
	}

[0x560c7fae3bd0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x560c7fa846a0]:  %3 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x560c7fae3ca8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x560c7fa85f08]:  %56 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x560c7fae3d18]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x560c7fb2a118]:  %EAX.i13 = bitcast %union.anon.4* %56 to i32*
	}

[0x560c7fae3df8]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x560c7fa856c8]:  %49 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x560c7fae3eb8]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x560c7fb2a968]:  %ESI.i9 = bitcast %union.anon.4* %49 to i32*
	}

[0x560c7fae3f98]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x560c7fa85298]:  %42 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 11, i32 0
	}

[0x560c7fae4008]:   %EDI = bitcast %union.anon* %5 to i32* {
	[0x560c7fb24928]:  %EDI.i = bitcast %union.anon.4* %42 to i32*
	}

[0x560c7fae40b8]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x560c7fb202f8]:  %RAX.i = getelementptr inbounds %union.anon.4, %union.anon.4* %56, i64 0, i32 0
	}

[0x560c7fae4178]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x560c7fa90308]:  %RSI.i20 = getelementptr inbounds %union.anon.4, %union.anon.4* %49, i64 0, i32 0
	}

[0x560c7fae4238]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0 {
	[0x560c7fb201c8]:  %RDI.i = getelementptr inbounds %union.anon.4, %union.anon.4* %42, i64 0, i32 0
	}

[0x560c7fae4340]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x560c7fac4af0]:  %6 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x560c7fae4450]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x560c7fac3830]:  %RBP.i = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x560c7fae44e8]:   %6 = load i64, i64* %RBP, align 8 {
	[0x560c7fae8e68]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x560c7fae4560]:   %7 = add i64 %1, 1 {
	[0x560c7fa7a000]:  %5 = add i64 %1, 1
	}

[0x560c7fae45e0]:   store i64 %7, i64* %PC, align 8 {
	[0x560c7fa79720]:  store i64 %5, i64* %3, align 8
	}

[0x560c7fae4648]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fae8d28]:  %7 = load i64, i64* %6, align 8
	}

[0x560c7fae46c0]:   %17 = and i32 %16, 255 {
	[0x560c7fb221e0]:  %16 = and i32 %15, 255
	}

[0x560c7fae4750]:   %9 = add i64 %8, -8 {
	[0x560c7fb1fd30]:  %8 = add i64 %7, -8
	}

[0x560c7fae47b8]:   %10 = inttoptr i64 %9 to i64* {
	[0x560c7fa8da58]:  %9 = inttoptr i64 %8 to i64*
	}

[0x560c7fae4830]:   store i64 %6, i64* %10, align 8 {
	[0x560c7fb1fe40]:  store i64 %4, i64* %9, align 8
	}

[0x560c7fae4898]:   %11 = load i64, i64* %PC, align 8 {
	[0x560c7fb11348]:  %10 = load i64, i64* %3, align 8
	}

[0x560c7fae4910]:   store i64 %9, i64* %RBP, align 8, !tbaa !1257 {
	[0x560c7fb20e00]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x560c7fae49d0]:   %12 = add i64 %8, -40 {
	[0x560c7fb1f390]:  %11 = add i64 %7, -40
	}

[0x560c7fae4a50]:   store i64 %12, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb21bc0]:  store i64 %11, i64* %6, align 8
	}

[0x560c7fae4b10]:   %13 = icmp ult i64 %9, 32 {
	[0x560c7fb21fc0]:  %12 = icmp ult i64 %8, 32
	}

[0x560c7fae4b78]:   %14 = zext i1 %13 to i8 {
	[0x560c7fb1d008]:  %13 = zext i1 %12 to i8
	}

[0x560c7fae4c20]:   %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x560c7fb1f990]:  %14 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 1
	}

[0x560c7fae4cb0]:   store i8 %14, i8* %15, align 1, !tbaa !1261 {
	[0x560c7fb220d0]:  store i8 %13, i8* %14, align 1
	}

[0x560c7fae5328]:   %16 = trunc i64 %12 to i32 {
	[0x560c7fb1d098]:  %15 = trunc i64 %11 to i32
	}

[0x560c7fae53d0]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x560c7fb26df0]:  %32 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 9
	}

[0x560c7fae54b0]:   %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9 {
	[0x560c7fb1e5a0]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x560c7fae5578]:   %19 = trunc i32 %18 to i8 {
	[0x560c7fb1f2d8]:  %18 = trunc i32 %17 to i8
	}

[0x560c7fae55f0]:   %20 = and i8 %19, 1 {
	[0x560c7fb222f0]:  %19 = and i8 %18, 1
	}

[0x560c7fae5670]:   %21 = xor i8 %20, 1 {
	[0x560c7fb41560]:  %20 = xor i8 %19, 1
	}

[0x560c7fae5720]:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x560c7fb22650]:  %21 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 3
	}

[0x560c7fae57b0]:   store i8 %21, i8* %22, align 1, !tbaa !1275 {
	[0x560c7fb22550]:  store i8 %20, i8* %21, align 1
	}

[0x560c7fae5e40]:   %23 = xor i64 %9, %12 {
	[0x560c7fb22730]:  %22 = xor i64 %8, %11
	}

[0x560c7fae5ec0]:   %24 = lshr i64 %23, 4 {
	[0x560c7fb41de0]:  %23 = lshr i64 %22, 4
	}

[0x560c7fae5f28]:   %25 = trunc i64 %24 to i8 {
	[0x560c7fb1ea38]:  %24 = trunc i64 %23 to i8
	}

[0x560c7fae5fa0]:   %26 = and i8 %25, 1 {
	[0x560c7fb22bb0]:  %25 = and i8 %24, 1
	}

[0x560c7fae6050]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x560c7fb44f10]:  %26 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 5
	}

[0x560c7fae60e0]:   store i8 %26, i8* %27, align 1, !tbaa !1276 {
	[0x560c7fb22c80]:  store i8 %25, i8* %26, align 1
	}

[0x560c7fae6770]:   %28 = icmp eq i64 %12, 0 {
	[0x560c7fb22dd0]:  %27 = icmp eq i64 %11, 0
	}

[0x560c7fae67d8]:   %29 = zext i1 %28 to i8 {
	[0x560c7fb23c98]:  %28 = zext i1 %27 to i8
	}

[0x560c7fae6880]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x560c7fb36380]:  %29 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 7
	}

[0x560c7fae6910]:   store i8 %29, i8* %30, align 1, !tbaa !1277 {
	[0x560c7fb23940]:  store i8 %28, i8* %29, align 1
	}

[0x560c7fae6fa0]:   %31 = lshr i64 %12, 63 {
	[0x560c7fb211d0]:  %30 = lshr i64 %11, 63
	}

[0x560c7fae7008]:   %32 = trunc i64 %31 to i8 {
	[0x560c7fb22af8]:  %31 = trunc i64 %30 to i8
	}

[0x560c7fae7080]:   store i64 %64, i64* %RSI, align 8, !tbaa !1257 {
	[0x560c7fb43860]:  store i64 %65, i64* %RSI.i20, align 8
	}

[0x560c7fae7100]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x560c7fb43c30]:  store i8 0, i8* %AL.i18, align 1
	}

[0x560c7fae71c0]:   %65 = add i64 %62, -269 {
	[0x560c7fb43d30]:  %66 = add i64 %63, -269
	}

[0x560c7fae7290]:   store i8 %32, i8* %33, align 1, !tbaa !1278 {
	[0x560c7fb445f0]:  store i8 %31, i8* %32, align 1
	}

[0x560c7fae7920]:   %34 = lshr i64 %9, 63 {
	[0x560c7fb45060]:  %33 = lshr i64 %8, 63
	}

[0x560c7fae79a0]:   %35 = xor i64 %31, %34 {
	[0x560c7fb36240]:  %34 = xor i64 %30, %33
	}

[0x560c7fae7a20]:   %36 = add nuw nsw i64 %35, %34 {
	[0x560c7fb23dc0]:  %35 = add nuw nsw i64 %34, %33
	}

[0x560c7fae7aa0]:   %37 = icmp eq i64 %36, 2 {
	[0x560c7fb42b00]:  %36 = icmp eq i64 %35, 2
	}

[0x560c7fae7b08]:   %38 = zext i1 %37 to i8 {
	[0x560c7fb24338]:  %37 = zext i1 %36 to i8
	}

[0x560c7fae7bb0]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x560c7fb2ace0]:  %38 = getelementptr inbounds %struct.State.0, %struct.State.0* %0, i64 0, i32 2, i32 13
	}

[0x560c7fae7c40]:   store i8 %38, i8* %39, align 1, !tbaa !1279 {
	[0x560c7fb26930]:  store i8 %37, i8* %38, align 1
	}

[0x560c7fae8ec8]:   %49 = load i64, i64* %RBP, align 8 {
	[0x560c7fb252a8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x560c7fae8f80]:   %50 = add i64 %49, -16 {
	[0x560c7fbe0cc0]:  %51 = add i64 %50, -16
	}

[0x560c7fae8fe8]:   %51 = load i64, i64* %RSI, align 8 {
	[0x560c7fb25e88]:  %52 = load i64, i64* %RSI.i20, align 8
	}

[0x560c7fae9048]:   %52 = load i64, i64* %PC, align 8 {
	[0x560c7fb25fb8]:  %53 = load i64, i64* %3, align 8
	}

[0x560c7fae90c0]:   %53 = add i64 %52, 4 {
	[0x560c7fbdfef0]:  %54 = add i64 %53, 4
	}

[0x560c7fae9140]:   store i64 %53, i64* %PC, align 8 {
	[0x560c7fbe2460]:  store i64 %54, i64* %3, align 8
	}

[0x560c7fae91a8]:   %54 = inttoptr i64 %50 to i64* {
	[0x560c7fb28238]:  %55 = inttoptr i64 %51 to i64*
	}

[0x560c7fae9220]:   store i64 %51, i64* %54, align 8 {
	[0x560c7fbe4c50]:  store i64 %52, i64* %55, align 8
	}

[0x560c7fae9288]:   %55 = load i64, i64* %PC, align 8 {
	[0x560c7fb28828]:  %57 = load i64, i64* %3, align 8
	}

[0x560c7fae9300]:   store i8 0, i8* %AL, align 1, !tbaa !1280 {
	[0x560c7fbe37b0]:  store i8 0, i8* %AL.i18, align 1
	}

[0x560c7fae94f0]:   %56 = add i64 %55, 58 {
	[0x560c7fbe6780]:  %58 = add i64 %57, 58
	}

[0x560c7fae9570]:   %57 = add i64 %55, 7 {
	[0x560c7fbeab50]:  %59 = add i64 %57, 7
	}

[0x560c7fae95d8]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb28958]:  %60 = load i64, i64* %6, align 8
	}

[0x560c7fae9650]:   %59 = add i64 %58, -8 {
	[0x560c7fbf5210]:  %61 = add i64 %60, -8
	}

[0x560c7fae96b8]:   %60 = inttoptr i64 %59 to i64* {
	[0x560c7fb29408]:  %62 = inttoptr i64 %61 to i64*
	}

[0x560c7fae9730]:   store i64 %57, i64* %60, align 8 {
	[0x560c7fadda60]:  store i64 %59, i64* %62, align 8
	}

[0x560c7fae97b0]:   store i64 %59, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fadd600]:  store i64 %61, i64* %6, align 8
	}

[0x560c7fae9830]:   store i64 %56, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fa8ce10]:  store i64 %58, i64* %3, align 8
	}

[0x560c7fae9aa0]:   %61 = tail call %struct.Memory* @sub_400510_doWork(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	}

[0x560c7fae9b68]:   %62 = load i64, i64* %PC, align 8 {
	[0x560c7fb29538]:  %63 = load i64, i64* %3, align 8
	}

[0x560c7fae9c80]:   store i64 add (i64 ptrtoint (%seg_4005b0__rodata_type* @seg_4005b0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1257 {
	[0x560c7fb42df0]:  store i64 4195764, i64* %RDI.i, align 8
	}

[0x560c7fae9ce8]:   %63 = load i32, i32* %EAX, align 4 {
	[0x560c7fb2a378]:  %64 = load i32, i32* %EAX.i13, align 4
	}

[0x560c7fae9d48]:   %64 = zext i32 %63 to i64 {
	[0x560c7fb2a4a8]:  %65 = zext i32 %64 to i64
	}

[0x560c7faea7e0]:   %66 = add i64 %62, 19 {
	[0x560c7fb44120]:  %67 = add i64 %63, 19
	}

[0x560c7faea848]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb2a5d8]:  %68 = load i64, i64* %6, align 8
	}

[0x560c7faea8c0]:   %68 = add i64 %67, -8 {
	[0x560c7fb44d60]:  %69 = add i64 %68, -8
	}

[0x560c7faea928]:   %69 = inttoptr i64 %68 to i64* {
	[0x560c7fb2a708]:  %70 = inttoptr i64 %69 to i64*
	}

[0x560c7faea9a0]:   store i64 %66, i64* %69, align 8 {
	[0x560c7fb44850]:  store i64 %67, i64* %70, align 8
	}

[0x560c7faeaa20]:   store i64 %68, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb46e80]:  store i64 %69, i64* %6, align 8
	}

[0x560c7faeaaa0]:   store i64 %65, i64* %PC, align 8, !tbaa !1257 {
	[0x560c7fb477b0]:  store i64 %66, i64* %3, align 8
	}

[0x560c7faeaca8]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61) {
	[0x560c7fb2af40]:  %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
	[0x560c7fb2b070]:  %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
	}

[0x560c7faead68]:   %71 = load i64, i64* %PC, align 8 {
	[0x560c7fb2aa98]:  %71 = load i64, i64* %3, align 8
	}

[0x560c7faeade0]:   store i64 0, i64* %RSI, align 8, !tbaa !1257 {
	[0x560c7fb468a0]:  store i64 0, i64* %RSI.i20, align 8
	}

[0x560c7faeae48]:   %72 = load i64, i64* %RBP, align 8 {
	[0x560c7fb2abc8]:  %72 = load i64, i64* %RBP.i, align 8
	}

[0x560c7faeaf00]:   %73 = add i64 %72, -20 {
	[0x560c7fb47d30]:  %73 = add i64 %72, -20
	}

[0x560c7faeaf68]:   %74 = load i32, i32* %EAX, align 4 {
	[0x560c7fb2ae28]:  %74 = load i32, i32* %EAX.i13, align 4
	}

[0x560c7faeafe0]:   %75 = add i64 %71, 5 {
	[0x560c7fb48040]:  %75 = add i64 %71, 5
	}

[0x560c7faeb060]:   store i64 %75, i64* %PC, align 8 {
	[0x560c7fb4a9e0]:  store i64 %75, i64* %3, align 8
	}

[0x560c7faeb0c8]:   %76 = inttoptr i64 %73 to i32* {
	[0x560c7fb26698]:  %76 = inttoptr i64 %73 to i32*
	}

[0x560c7faeb140]:   store i32 %74, i32* %76, align 4 {
	[0x560c7fb4aef0]:  store i32 %74, i32* %76, align 4
	}

[0x560c7faeb1a8]:   %77 = load i32, i32* %ESI, align 4 {
	[0x560c7fb26a28]:  %77 = load i32, i32* %ESI.i9, align 4
	}

[0x560c7faeb208]:   %78 = zext i32 %77 to i64 {
	[0x560c7fb2c318]:  %78 = zext i32 %77 to i64
	}

[0x560c7faeb268]:   %79 = load i64, i64* %PC, align 8 {
	[0x560c7fb2cb08]:  %79 = load i64, i64* %3, align 8
	}

[0x560c7faeb2e0]:   store i64 %78, i64* %RAX, align 8, !tbaa !1257 {
	[0x560c7fb4b3c0]:  store i64 %78, i64* %RAX.i, align 8
	}

[0x560c7faeb348]:   %80 = load i64, i64* %RSP, align 8 {
	[0x560c7fb2cc38]:  %80 = load i64, i64* %6, align 8
	}

[0x560c7faeb3c0]:   %81 = add i64 %80, 32 {
	[0x560c7fb4ba50]:  %81 = add i64 %80, 32
	}

[0x560c7faeb440]:   store i64 %81, i64* %RSP, align 8, !tbaa !1257 {
	[0x560c7fb42050]:  store i64 %81, i64* %6, align 8
	}

[0x560c7faeb500]:   %82 = icmp ugt i64 %80, -33 {
	[0x560c7fb42720]:  %82 = icmp ugt i64 %80, -33
	}

[0x560c7faeb568]:   %83 = zext i1 %82 to i8 {
	[0x560c7fb2dad8]:  %83 = zext i1 %82 to i8
	}

[0x560c7faeb5e0]:   store i8 %83, i8* %15, align 1, !tbaa !1261 {
	[0x560c7fb454c0]:  store i8 %83, i8* %14, align 1
	}

[0x560c7faeb648]:   %84 = trunc i64 %81 to i32 {
	[0x560c7fb2e918]:  %84 = trunc i64 %81 to i32
	}

[0x560c7faeb6c0]:   %85 = and i32 %84, 255 {
	[0x560c7fb4d780]:  %85 = and i32 %84, 255
	}

[0x560c7faeb760]:   %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9 {
	[0x560c7fb4da20]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x560c7faeb828]:   %87 = trunc i32 %86 to i8 {
	[0x560c7fb2f3c8]:  %87 = trunc i32 %86 to i8
	}

[0x560c7faeb8a0]:   %88 = and i8 %87, 1 {
	[0x560c7fb4e020]:  %88 = and i8 %87, 1
	}

[0x560c7faeb920]:   %89 = xor i8 %88, 1 {
	[0x560c7fb4e430]:  %89 = xor i8 %88, 1
	}

[0x560c7faeb9a0]:   store i8 %89, i8* %22, align 1, !tbaa !1275 {
	[0x560c7fb4e560]:  store i8 %89, i8* %21, align 1
	}

[0x560c7faeba20]:   %90 = xor i64 %81, %80 {
	[0x560c7fb4d500]:  %90 = xor i64 %81, %80
	}

[0x560c7faebaa0]:   %91 = lshr i64 %90, 4 {
	[0x560c7fb4d5f0]:  %91 = lshr i64 %90, 4
	}

[0x560c7faebb08]:   %92 = trunc i64 %91 to i8 {
	[0x560c7fb300d8]:  %92 = trunc i64 %91 to i8
	}

[0x560c7faebb80]:   %93 = and i8 %92, 1 {
	[0x560c7fb47340]:  %93 = and i8 %92, 1
	}

[0x560c7faebc00]:   store i8 %93, i8* %27, align 1, !tbaa !1276 {
	[0x560c7fb50430]:  store i8 %93, i8* %26, align 1
	}

[0x560c7faebc80]:   %94 = icmp eq i64 %81, 0 {
	[0x560c7fb505b0]:  %94 = icmp eq i64 %81, 0
	}

[0x560c7faebce8]:   %95 = zext i1 %94 to i8 {
	[0x560c7fb306c8]:  %95 = zext i1 %94 to i8
	}

[0x560c7faebd60]:   store i8 %95, i8* %30, align 1, !tbaa !1277 {
	[0x560c7fb50940]:  store i8 %95, i8* %29, align 1
	}

[0x560c7faebde0]:   %96 = lshr i64 %81, 63 {
	[0x560c7fb50cd0]:  %96 = lshr i64 %81, 63
	}

[0x560c7faebe48]:   %97 = trunc i64 %96 to i8 {
	[0x560c7fb30cb8]:  %97 = trunc i64 %96 to i8
	}

[0x560c7faebec0]:   store i8 %97, i8* %33, align 1, !tbaa !1278 {
	[0x560c7fb50e50]:  store i8 %97, i8* %32, align 1
	}

[0x560c7faebf40]:   %98 = lshr i64 %80, 63 {
	[0x560c7fb2cfb0]:  %98 = lshr i64 %80, 63
	}

[0x560c7faebfc0]:   %99 = xor i64 %96, %98 {
	[0x560c7fb51240]:  %99 = xor i64 %96, %98
	}

[0x560c7faec040]:   %100 = add nuw nsw i64 %99, %96 {
	[0x560c7fb48e40]:  %100 = add nuw nsw i64 %99, %96
	}

[0x560c7faec0c0]:   %101 = icmp eq i64 %100, 2 {
	[0x560c7fb53e80]:  %101 = icmp eq i64 %100, 2
	}

[0x560c7faec128]:   %102 = zext i1 %101 to i8 {
	[0x560c7fb312a8]:  %102 = zext i1 %101 to i8
	}

[0x560c7faec1a0]:   store i8 %102, i8* %39, align 1, !tbaa !1279 {
	[0x560c7fb54070]:  store i8 %102, i8* %38, align 1
	}

[0x560c7faec220]:   %103 = add i64 %79, 7 {
	[0x560c7fb541f0]:  %103 = add i64 %79, 7
	}

[0x560c7faec2a0]:   store i64 %103, i64* %PC, align 8 {
	[0x560c7fb544f0]:  store i64 %103, i64* %3, align 8
	}

[0x560c7faec360]:   %104 = add i64 %80, 40 {
	[0x560c7fb54d00]:  %104 = add i64 %80, 40
	}

[0x560c7faec3c8]:   %105 = inttoptr i64 %81 to i64* {
	[0x560c7fb313d8]:  %105 = inttoptr i64 %81 to i64*
	}

[0x560c7faec428]:   %106 = load i64, i64* %105, align 8 {
	[0x560c7fb319c8]:  %106 = load i64, i64* %105, align 8
	}

[0x560c7faec4a0]:   store i64 %106, i64* %RBP, align 8, !tbaa !1257 {
	[0x560c7fb4f5a0]:  store i64 %106, i64* %RBP.i, align 8
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x560c7fae3980]: block_4004c0 {
	[0x560c7fb40090]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Multiple matches exist for [0x560c7faeaca8]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61)
[0x560c7fb2af40]:   %call2_4004d8 = tail call %struct.Memory.31* @sub_400510.doWork(%struct.State.0* %0, i64 %58, %struct.Memory.31* %2)
[0x560c7fb2b070]:   %call2_4004eb = tail call %struct.Memory.31* @sub_4003d0.printf_plt(%struct.State.0* %0, i64 %66, %struct.Memory.31* %call2_4004d8)
Iso Match NOT Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
