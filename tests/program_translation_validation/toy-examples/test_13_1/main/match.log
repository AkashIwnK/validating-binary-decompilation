Writing '/tmp/tmpo5qh1xgf.dot'...
Writing '/tmp/tmpo5qh1xgf.dot':Done

Reading LLVM: /tmp/tmp2ohdwsh0-query.ll
Extracting function [main] from /tmp/tmp2ohdwsh0-query.ll
Dot file generated!
Writing '/tmp/tmp2nkunuh0.dot'...
Writing '/tmp/tmp2nkunuh0.dot':Done

Reading LLVM: /tmp/tmprk1_nsbj-target.ll
Extracting function [main] from /tmp/tmprk1_nsbj-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %39 = add i64 %7, -12
- 48 %40 = add i64 %10, 14
- 49 store i64 %40, i64* %3, align 8
- 50 %41 = inttoptr i64 %39 to i32*
- 51 store i32 0, i32* %41, align 4
- 52 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 53 %EDI.i = bitcast %union.anon* %42 to i32*
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -8
- 56 %45 = load i32, i32* %EDI.i, align 4
- 57 %46 = load i64, i64* %3, align 8
- 58 %47 = add i64 %46, 3
- 59 store i64 %47, i64* %3, align 8
- 60 %48 = inttoptr i64 %44 to i32*
- 61 store i32 %45, i32* %48, align 4
- 62 %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 63 %RSI.i23 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
- 64 %50 = load i64, i64* %RBP.i, align 8
- 65 %51 = add i64 %50, -16
- 66 %52 = load i64, i64* %RSI.i23, align 8
- 67 %53 = load i64, i64* %3, align 8
- 68 %54 = add i64 %53, 4
- 69 store i64 %54, i64* %3, align 8
- 70 %55 = inttoptr i64 %51 to i64*
- 71 store i64 %52, i64* %55, align 8
- 72 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 73 %AL.i21 = bitcast %union.anon* %56 to i8*
- 74 %57 = load i64, i64* %3, align 8
- 75 store i8 0, i8* %AL.i21, align 1
- 76 %58 = add i64 %57, 58
- 77 %59 = add i64 %57, 7
- 78 %60 = load i64, i64* %6, align 8
- 79 %61 = add i64 %60, -8
- 80 %62 = inttoptr i64 %61 to i64*
- 81 store i64 %59, i64* %62, align 8
- 82 store i64 %61, i64* %6, align 8
- 83 store i64 %58, i64* %3, align 8
- 84 %call2_400538 = tail call %struct.Memory* @sub_400570.doWork(%struct.State* %0, i64 %58, %struct.Memory* %2)
- 85 %RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
- 86 %63 = load i64, i64* %3, align 8
- 87 store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i, align 8
- 88 %EAX.i16 = bitcast %union.anon* %56 to i32*
- 89 %64 = load i32, i32* %EAX.i16, align 4
- 90 %65 = zext i32 %64 to i64
- 91 store i64 %65, i64* %RSI.i23, align 8
- 92 store i8 0, i8* %AL.i21, align 1
- 93 %66 = add i64 %63, -285
- 94 %67 = add i64 %63, 19
- 95 %68 = load i64, i64* %6, align 8
- 96 %69 = add i64 %68, -8
- 97 %70 = inttoptr i64 %69 to i64*
- 98 store i64 %67, i64* %70, align 8
- 99 store i64 %69, i64* %6, align 8
- 100 store i64 %66, i64* %3, align 8
- 101 %71 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400538)
- 102 %ESI.i9 = bitcast %union.anon* %49 to i32*
- 103 %72 = load i64, i64* %3, align 8
- 104 store i64 0, i64* %RSI.i23, align 8
- 105 %73 = load i64, i64* %RBP.i, align 8
- 106 %74 = add i64 %73, -20
- 107 %75 = load i32, i32* %EAX.i16, align 4
- 108 %76 = add i64 %72, 5
- 109 store i64 %76, i64* %3, align 8
- 110 %77 = inttoptr i64 %74 to i32*
- 111 store i32 %75, i32* %77, align 4
- 112 %RAX.i = getelementptr inbounds %union.anon, %union.anon* %56, i64 0, i32 0
- 113 %78 = load i32, i32* %ESI.i9, align 4
- 114 %79 = zext i32 %78 to i64
- 115 %80 = load i64, i64* %3, align 8
- 116 store i64 %79, i64* %RAX.i, align 8
- 117 %81 = load i64, i64* %6, align 8
- 118 %82 = add i64 %81, 32
- 119 store i64 %82, i64* %6, align 8
- 120 %83 = icmp ugt i64 %81, -33
- 121 %84 = zext i1 %83 to i8
- 122 store i8 %84, i8* %14, align 1
- 123 %85 = trunc i64 %82 to i32
- 124 %86 = and i32 %85, 255
- 125 %87 = tail call i32 @llvm.ctpop.i32(i32 %86)
- 126 %88 = trunc i32 %87 to i8
- 127 %89 = and i8 %88, 1
- 128 %90 = xor i8 %89, 1
- 129 store i8 %90, i8* %21, align 1
- 130 %91 = xor i64 %82, %81
- 131 %92 = lshr i64 %91, 4
- 132 %93 = trunc i64 %92 to i8
- 133 %94 = and i8 %93, 1
- 134 store i8 %94, i8* %26, align 1
- 135 %95 = icmp eq i64 %82, 0
- 136 %96 = zext i1 %95 to i8
- 137 store i8 %96, i8* %29, align 1
- 138 %97 = lshr i64 %82, 63
- 139 %98 = trunc i64 %97 to i8
- 140 store i8 %98, i8* %32, align 1
- 141 %99 = lshr i64 %81, 63
- 142 %100 = xor i64 %97, %99
- 143 %101 = add nuw nsw i64 %100, %97
- 144 %102 = icmp eq i64 %101, 2
- 145 %103 = zext i1 %102 to i8
- 146 store i8 %103, i8* %38, align 1
- 147 %104 = add i64 %80, 7
- 148 store i64 %104, i64* %3, align 8
- 149 %105 = add i64 %81, 40
- 150 %106 = inttoptr i64 %82 to i64*
- 151 %107 = load i64, i64* %106, align 8
- 152 store i64 %107, i64* %RBP.i, align 8
- 153 store i64 %105, i64* %6, align 8
- 154 %108 = add i64 %80, 8
- 155 store i64 %108, i64* %3, align 8
- 156 %109 = inttoptr i64 %105 to i64*
- 157 %110 = load i64, i64* %109, align 8
- 158 store i64 %110, i64* %3, align 8
- 159 %111 = add i64 %81, 48
- 160 store i64 %111, i64* %6, align 8
- 161 \<badref\> = ret %struct.Memory* %71
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1cab0c5400>, {0: {0}, 1: {12}, 2: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 3: {14}, 4: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 5: {11}, 6: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 7: {17, 98, 83, 63}, 8: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 9: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 10: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 11: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 12: {22}, 13: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 14: {24}, 15: {121, 136, 43, 145, 114, 54, 25, 92}, 16: {26}, 17: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 18: {132, 38, 139, 47, 123, 28, 126, 31}, 19: {124, 29}, 20: {88, 125, 30, 103}, 21: {132, 38, 139, 47, 123, 28, 126, 31}, 22: {32, 127, 133, 39}, 23: {128, 33}, 24: {34}, 25: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 26: {130, 51, 36, 142}, 27: {131, 37}, 28: {132, 38, 139, 47, 123, 28, 126, 31}, 29: {32, 127, 133, 39}, 30: {40}, 31: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 32: {42, 135}, 33: {121, 136, 43, 145, 114, 54, 25, 92}, 34: {44}, 35: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 36: {50, 141, 46, 138}, 37: {132, 38, 139, 47, 123, 28, 126, 31}, 38: {48}, 39: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 40: {50, 141, 46, 138}, 41: {130, 51, 36, 142}, 42: {52, 143}, 43: {144, 53}, 44: {121, 136, 43, 145, 114, 54, 25, 92}, 45: {55}, 46: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 47: {57}, 48: {58}, 49: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 50: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 51: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 52: {6}, 53: {2, 3, 5, 7}, 54: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 55: {17, 98, 83, 63}, 56: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 57: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 58: {66}, 59: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 60: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 61: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 62: {4}, 63: {8, 9, 10}, 64: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 65: {71}, 66: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 67: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 68: {74}, 69: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 70: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 71: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 72: {1}, 73: {2, 3, 5, 7}, 74: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 75: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 76: {80}, 77: {81, 147}, 78: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 79: {17, 98, 83, 63}, 80: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 81: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 82: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 83: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 84: {88, 125, 30, 103}, 85: {8, 9, 10}, 86: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 87: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 88: {2, 3, 5, 7}, 89: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 90: {121, 136, 43, 145, 114, 54, 25, 92}, 91: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 92: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 93: {95}, 94: {96}, 95: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 96: {17, 98, 83, 63}, 97: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 98: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 99: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 100: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 101: {88, 125, 30, 103}, 102: {2, 3, 5, 7}, 103: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 104: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 105: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 106: {107}, 107: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 108: {109}, 109: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 110: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 111: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 112: {8, 9, 10}, 113: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 114: {121, 136, 43, 145, 114, 54, 25, 92}, 115: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 116: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 117: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 118: {118}, 119: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 120: {120}, 121: {121, 136, 43, 145, 114, 54, 25, 92}, 122: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 123: {132, 38, 139, 47, 123, 28, 126, 31}, 124: {124, 29}, 125: {88, 125, 30, 103}, 126: {132, 38, 139, 47, 123, 28, 126, 31}, 127: {32, 127, 133, 39}, 128: {128, 33}, 129: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 130: {130, 51, 36, 142}, 131: {131, 37}, 132: {132, 38, 139, 47, 123, 28, 126, 31}, 133: {32, 127, 133, 39}, 134: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 135: {42, 135}, 136: {121, 136, 43, 145, 114, 54, 25, 92}, 137: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 138: {50, 141, 46, 138}, 139: {132, 38, 139, 47, 123, 28, 126, 31}, 140: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 141: {50, 141, 46, 138}, 142: {130, 51, 36, 142}, 143: {52, 143}, 144: {144, 53}, 145: {121, 136, 43, 145, 114, 54, 25, 92}, 146: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 147: {81, 147}, 148: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 149: {149}, 150: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 151: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 152: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 153: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 154: {154}, 155: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 156: {99, 68, 76, 111, 156, 18, 84, 150, 60}, 157: {13, 16, 20, 151, 157, 62, 64, 65, 70, 72, 73, 78, 82, 89, 91, 97, 104, 106, 108, 113, 115, 117}, 158: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 159: {159}, 160: {129, 134, 137, 140, 15, 146, 19, 148, 21, 23, 152, 153, 27, 155, 158, 160, 35, 41, 45, 49, 56, 59, 61, 67, 69, 75, 77, 79, 85, 86, 87, 90, 93, 94, 100, 101, 102, 105, 110, 112, 116, 119, 122}, 161: {161}})
Equivalent! frozenset({94, 79}) {75, 92}
Equivalent! frozenset({97, 82}) {78, 95}
Equivalent! frozenset({98, 83}) {96, 79}
Equivalent! frozenset({101, 86}) {82, 99}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1cab0c5400>, {0: {0}, 1: {12}, 2: {13}, 3: {14}, 4: {15}, 5: {11}, 6: {16}, 7: {17}, 8: {18}, 9: {19}, 10: {20}, 11: {21}, 12: {22}, 13: {23}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {30}, 21: {31}, 22: {32}, 23: {33}, 24: {34}, 25: {35}, 26: {36}, 27: {37}, 28: {38}, 29: {39}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {46}, 37: {47}, 38: {48}, 39: {49}, 40: {50}, 41: {51}, 42: {52}, 43: {53}, 44: {54}, 45: {55}, 46: {56}, 47: {57}, 48: {58}, 49: {59}, 50: {60}, 51: {61}, 52: {6}, 53: {7}, 54: {62}, 55: {63}, 56: {64}, 57: {65}, 58: {66}, 59: {67}, 60: {68}, 61: {69}, 62: {4}, 63: {9}, 64: {70}, 65: {71}, 66: {72}, 67: {73}, 68: {74}, 69: {75}, 70: {76}, 71: {77}, 72: {1}, 73: {2}, 74: {78}, 75: {94}, 76: {80}, 77: {81}, 78: {97}, 79: {83}, 80: {84}, 81: {85}, 82: {101}, 83: {87}, 84: {88}, 85: {10}, 86: {89}, 87: {90}, 88: {3}, 89: {91}, 90: {92}, 91: {93}, 92: {79}, 93: {95}, 94: {96}, 95: {82}, 96: {98}, 97: {99}, 98: {100}, 99: {86}, 100: {102}, 101: {103}, 102: {5}, 103: {104}, 104: {105, 93}, 105: {106}, 106: {107}, 107: {108}, 108: {109}, 109: {110}, 110: {111}, 111: {112}, 112: {8}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 add add
EXACT 48 add add
EXACT 49 store store
EXACT 50 inttoptr inttoptr
EXACT 51 store store
EXACT 52 getelementptr getelementptr
EXACT 53 bitcast bitcast
EXACT 54 load load
EXACT 55 add add
EXACT 56 load load
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 getelementptr getelementptr
EXACT 63 getelementptr getelementptr
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 load load
EXACT 68 add add
EXACT 69 store store
EXACT 70 inttoptr inttoptr
EXACT 71 store store
EXACT 72 getelementptr getelementptr
EXACT 73 bitcast bitcast
EXACT 74 load load
EXACT 75 store store
EXACT 76 add add
EXACT 77 add add
EXACT 78 load load
EXACT 79 add add
EXACT 80 inttoptr inttoptr
EXACT 81 store store
EXACT 82 store store
EXACT 83 store store
EXACT 84 tail tail
EXACT 85 getelementptr getelementptr
EXACT 86 load load
EXACT 87 store store
EXACT 88 bitcast bitcast
EXACT 89 load load
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 store store
EXACT 93 add add
EXACT 94 add add
EXACT 95 load load
EXACT 96 add add
EXACT 97 inttoptr inttoptr
EXACT 98 store store
EXACT 99 store store
EXACT 100 store store
EXACT 101 tail tail
EXACT 102 bitcast bitcast
EXACT 103 load load
MORE 104 POT: 2
EXACT 105 load load
EXACT 106 add add
EXACT 107 load load
EXACT 108 add add
EXACT 109 store store
EXACT 110 inttoptr inttoptr
EXACT 111 store store
EXACT 112 getelementptr getelementptr
EXACT 113 load load
EXACT 114 zext zext
EXACT 115 load load
EXACT 116 store store
EXACT 117 load load
EXACT 118 add add
EXACT 119 store store
EXACT 120 icmp icmp
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 trunc trunc
EXACT 124 and and
EXACT 125 tail tail
EXACT 126 trunc trunc
EXACT 127 and and
EXACT 128 xor xor
EXACT 129 store store
EXACT 130 xor xor
EXACT 131 lshr lshr
EXACT 132 trunc trunc
EXACT 133 and and
EXACT 134 store store
EXACT 135 icmp icmp
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 lshr lshr
EXACT 139 trunc trunc
EXACT 140 store store
EXACT 141 lshr lshr
EXACT 142 xor xor
EXACT 143 add add
EXACT 144 icmp icmp
EXACT 145 zext zext
EXACT 146 store store
EXACT 147 add add
EXACT 148 store store
EXACT 149 add add
EXACT 150 inttoptr inttoptr
EXACT 151 load load
EXACT 152 store store
EXACT 153 store store
EXACT 154 add add
EXACT 155 store store
EXACT 156 inttoptr inttoptr
EXACT 157 load load
EXACT 158 store store
EXACT 159 add add
EXACT 160 store store
EXACT 161 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
- 5 %ESI = bitcast %union.anon* %4 to i32*
- 6 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
- 7 %EDI = bitcast %union.anon* %5 to i32*
- 8 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 9 %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 10 %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %6 = load i64, i64* %RBP, align 8
- 14 %7 = add i64 %1, 1
- 15 store i64 %7, i64* %PC, align 8
- 16 %8 = load i64, i64* %RSP, align 8
- 17 %9 = add i64 %8, -8
- 18 %10 = inttoptr i64 %9 to i64*
- 19 store i64 %6, i64* %10, align 8
- 20 %11 = load i64, i64* %PC, align 8
- 21 store i64 %9, i64* %RBP, align 8
- 22 %12 = add i64 %8, -40
- 23 store i64 %12, i64* %RSP, align 8
- 24 %13 = icmp ult i64 %9, 32
- 25 %14 = zext i1 %13 to i8
- 26 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 27 store i8 %14, i8* %15, align 1
- 28 %16 = trunc i64 %12 to i32
- 29 %17 = and i32 %16, 255
- 30 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 31 %19 = trunc i32 %18 to i8
- 32 %20 = and i8 %19, 1
- 33 %21 = xor i8 %20, 1
- 34 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 35 store i8 %21, i8* %22, align 1
- 36 %23 = xor i64 %9, %12
- 37 %24 = lshr i64 %23, 4
- 38 %25 = trunc i64 %24 to i8
- 39 %26 = and i8 %25, 1
- 40 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 41 store i8 %26, i8* %27, align 1
- 42 %28 = icmp eq i64 %12, 0
- 43 %29 = zext i1 %28 to i8
- 44 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 45 store i8 %29, i8* %30, align 1
- 46 %31 = lshr i64 %12, 63
- 47 %32 = trunc i64 %31 to i8
- 48 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 49 store i8 %32, i8* %33, align 1
- 50 %34 = lshr i64 %9, 63
- 51 %35 = xor i64 %31, %34
- 52 %36 = add nuw nsw i64 %35, %34
- 53 %37 = icmp eq i64 %36, 2
- 54 %38 = zext i1 %37 to i8
- 55 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 56 store i8 %38, i8* %39, align 1
- 57 %40 = add i64 %8, -12
- 58 %41 = add i64 %11, 14
- 59 store i64 %41, i64* %PC, align 8
- 60 %42 = inttoptr i64 %40 to i32*
- 61 store i32 0, i32* %42, align 4
- 62 %43 = load i64, i64* %RBP, align 8
- 63 %44 = add i64 %43, -8
- 64 %45 = load i32, i32* %EDI, align 4
- 65 %46 = load i64, i64* %PC, align 8
- 66 %47 = add i64 %46, 3
- 67 store i64 %47, i64* %PC, align 8
- 68 %48 = inttoptr i64 %44 to i32*
- 69 store i32 %45, i32* %48, align 4
- 70 %49 = load i64, i64* %RBP, align 8
- 71 %50 = add i64 %49, -16
- 72 %51 = load i64, i64* %RSI, align 8
- 73 %52 = load i64, i64* %PC, align 8
- 74 %53 = add i64 %52, 4
- 75 store i64 %53, i64* %PC, align 8
- 76 %54 = inttoptr i64 %50 to i64*
- 77 store i64 %51, i64* %54, align 8
- 78 %55 = load i64, i64* %PC, align 8
- 79 store i8 0, i8* %AL, align 1
- 80 %56 = add i64 %55, 58
- 81 %57 = add i64 %55, 7
- 82 %58 = load i64, i64* %RSP, align 8
- 83 %59 = add i64 %58, -8
- 84 %60 = inttoptr i64 %59 to i64*
- 85 store i64 %57, i64* %60, align 8
- 86 store i64 %59, i64* %RSP, align 8
- 87 store i64 %56, i64* %PC, align 8
- 88 %61 = tail call %struct.Memory* @sub_400570_doWork_renamed_(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2)
- 89 %62 = load i64, i64* %PC, align 8
- 90 store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8
- 91 %63 = load i32, i32* %EAX, align 4
- 92 %64 = zext i32 %63 to i64
- 93 store i64 %64, i64* %RSI, align 8
- 94 store i8 0, i8* %AL, align 1
- 95 %65 = add i64 %62, -285
- 96 %66 = add i64 %62, 19
- 97 %67 = load i64, i64* %RSP, align 8
- 98 %68 = add i64 %67, -8
- 99 %69 = inttoptr i64 %68 to i64*
- 100 store i64 %66, i64* %69, align 8
- 101 store i64 %68, i64* %RSP, align 8
- 102 store i64 %65, i64* %PC, align 8
- 103 %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61)
- 104 %71 = load i64, i64* %PC, align 8
- 105 store i64 0, i64* %RSI, align 8
- 106 %72 = load i64, i64* %RBP, align 8
- 107 %73 = add i64 %72, -20
- 108 %74 = load i32, i32* %EAX, align 4
- 109 %75 = add i64 %71, 5
- 110 store i64 %75, i64* %PC, align 8
- 111 %76 = inttoptr i64 %73 to i32*
- 112 store i32 %74, i32* %76, align 4
- 113 %77 = load i32, i32* %ESI, align 4
- 114 %78 = zext i32 %77 to i64
- 115 %79 = load i64, i64* %PC, align 8
- 116 store i64 %78, i64* %RAX, align 8
- 117 %80 = load i64, i64* %RSP, align 8
- 118 %81 = add i64 %80, 32
- 119 store i64 %81, i64* %RSP, align 8
- 120 %82 = icmp ugt i64 %80, -33
- 121 %83 = zext i1 %82 to i8
- 122 store i8 %83, i8* %15, align 1
- 123 %84 = trunc i64 %81 to i32
- 124 %85 = and i32 %84, 255
- 125 %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #12
- 126 %87 = trunc i32 %86 to i8
- 127 %88 = and i8 %87, 1
- 128 %89 = xor i8 %88, 1
- 129 store i8 %89, i8* %22, align 1
- 130 %90 = xor i64 %81, %80
- 131 %91 = lshr i64 %90, 4
- 132 %92 = trunc i64 %91 to i8
- 133 %93 = and i8 %92, 1
- 134 store i8 %93, i8* %27, align 1
- 135 %94 = icmp eq i64 %81, 0
- 136 %95 = zext i1 %94 to i8
- 137 store i8 %95, i8* %30, align 1
- 138 %96 = lshr i64 %81, 63
- 139 %97 = trunc i64 %96 to i8
- 140 store i8 %97, i8* %33, align 1
- 141 %98 = lshr i64 %80, 63
- 142 %99 = xor i64 %96, %98
- 143 %100 = add nuw nsw i64 %99, %96
- 144 %101 = icmp eq i64 %100, 2
- 145 %102 = zext i1 %101 to i8
- 146 store i8 %102, i8* %39, align 1
- 147 %103 = add i64 %79, 7
- 148 store i64 %103, i64* %PC, align 8
- 149 %104 = add i64 %80, 40
- 150 %105 = inttoptr i64 %81 to i64*
- 151 %106 = load i64, i64* %105, align 8
- 152 store i64 %106, i64* %RBP, align 8
- 153 store i64 %104, i64* %RSP, align 8
- 154 %107 = add i64 %79, 8
- 155 store i64 %107, i64* %PC, align 8
- 156 %108 = inttoptr i64 %104 to i64*
- 157 %109 = load i64, i64* %108, align 8
- 158 store i64 %109, i64* %PC, align 8
- 159 %110 = add i64 %80, 48
- 160 store i64 %110, i64* %RSP, align 8
- 161 \<badref\> = ret %struct.Memory* %70
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1cab0c5598>, {0: {0}, 1: {72}, 2: {88, 73, 53, 102}, 3: {88, 73, 53, 102}, 4: {62}, 5: {88, 73, 53, 102}, 6: {52}, 7: {88, 73, 53, 102}, 8: {112, 85, 63}, 9: {112, 85, 63}, 10: {112, 85, 63}, 11: {5}, 12: {1}, 13: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 14: {3}, 15: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 16: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 17: {96, 55, 79, 7}, 18: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 19: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 20: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 21: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 22: {12}, 23: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 24: {14}, 25: {33, 136, 44, 15, 145, 114, 121, 90}, 26: {16}, 27: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 28: {132, 37, 139, 18, 21, 123, 28, 126}, 29: {19, 124}, 30: {125, 20, 101, 84}, 31: {132, 37, 139, 18, 21, 123, 28, 126}, 32: {133, 29, 22, 127}, 33: {128, 23}, 34: {24}, 35: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 36: {41, 26, 142, 130}, 37: {27, 131}, 38: {132, 37, 139, 18, 21, 123, 28, 126}, 39: {133, 29, 22, 127}, 40: {30}, 41: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 42: {32, 135}, 43: {33, 136, 44, 15, 145, 114, 121, 90}, 44: {34}, 45: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 46: {40, 138, 36, 141}, 47: {132, 37, 139, 18, 21, 123, 28, 126}, 48: {38}, 49: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 50: {40, 138, 36, 141}, 51: {41, 26, 142, 130}, 52: {42, 143}, 53: {144, 43}, 54: {33, 136, 44, 15, 145, 114, 121, 90}, 55: {45}, 56: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 57: {47}, 58: {48}, 59: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 60: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 61: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 62: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 63: {96, 55, 79, 7}, 64: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 65: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 66: {58}, 67: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 68: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 69: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 70: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 71: {65}, 72: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 73: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 74: {68}, 75: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 76: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 77: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 78: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 79: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 80: {76}, 81: {147, 77}, 82: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 83: {96, 55, 79, 7}, 84: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 85: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 86: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 87: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 88: {125, 20, 101, 84}, 89: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 90: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 91: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 92: {33, 136, 44, 15, 145, 114, 121, 90}, 93: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 94: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 95: {93}, 96: {94}, 97: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 98: {96, 55, 79, 7}, 99: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 100: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 101: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 102: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 103: {125, 20, 101, 84}, 104: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 105: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 106: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 107: {106}, 108: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 109: {108}, 110: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 111: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 112: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 113: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 114: {33, 136, 44, 15, 145, 114, 121, 90}, 115: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 116: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 117: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 118: {118}, 119: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 120: {120}, 121: {33, 136, 44, 15, 145, 114, 121, 90}, 122: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 123: {132, 37, 139, 18, 21, 123, 28, 126}, 124: {19, 124}, 125: {125, 20, 101, 84}, 126: {132, 37, 139, 18, 21, 123, 28, 126}, 127: {133, 29, 22, 127}, 128: {128, 23}, 129: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 130: {41, 26, 142, 130}, 131: {27, 131}, 132: {132, 37, 139, 18, 21, 123, 28, 126}, 133: {133, 29, 22, 127}, 134: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 135: {32, 135}, 136: {33, 136, 44, 15, 145, 114, 121, 90}, 137: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 138: {40, 138, 36, 141}, 139: {132, 37, 139, 18, 21, 123, 28, 126}, 140: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 141: {40, 138, 36, 141}, 142: {41, 26, 142, 130}, 143: {42, 143}, 144: {144, 43}, 145: {33, 136, 44, 15, 145, 114, 121, 90}, 146: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 147: {147, 77}, 148: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 149: {149}, 150: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 151: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 152: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 153: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 154: {154}, 155: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 156: {97, 70, 8, 110, 80, 156, 50, 150, 60}, 157: {2, 6, 10, 151, 157, 54, 56, 57, 64, 66, 67, 74, 78, 86, 89, 95, 103, 105, 107, 113, 115, 117}, 158: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 159: {159}, 160: {129, 4, 134, 9, 137, 11, 140, 13, 17, 146, 148, 152, 25, 153, 155, 158, 31, 160, 35, 39, 46, 49, 51, 59, 61, 69, 71, 75, 81, 82, 83, 87, 91, 92, 98, 99, 100, 104, 109, 111, 116, 119, 122}, 161: {161}})
Equivalent! frozenset({75, 92}) {94, 79}
Equivalent! frozenset({78, 95}) {97, 82}
Equivalent! frozenset({96, 79}) {98, 83}
Equivalent! frozenset({82, 99}) {101, 86}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1cab0c5598>, {0: {0}, 1: {72}, 2: {73}, 3: {88}, 4: {62}, 5: {102}, 6: {52}, 7: {53}, 8: {112}, 9: {63}, 10: {85}, 11: {5}, 12: {1}, 13: {2}, 14: {3}, 15: {4}, 16: {6}, 17: {7}, 18: {8}, 19: {9}, 20: {10}, 21: {11}, 22: {12}, 23: {13}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {20}, 31: {21}, 32: {22}, 33: {23}, 34: {24}, 35: {25}, 36: {26}, 37: {27}, 38: {28}, 39: {29}, 40: {30}, 41: {31}, 42: {32}, 43: {33}, 44: {34}, 45: {35}, 46: {36}, 47: {37}, 48: {38}, 49: {39}, 50: {40}, 51: {41}, 52: {42}, 53: {43}, 54: {44}, 55: {45}, 56: {46}, 57: {47}, 58: {48}, 59: {49}, 60: {50}, 61: {51}, 62: {54}, 63: {55}, 64: {56}, 65: {57}, 66: {58}, 67: {59}, 68: {60}, 69: {61}, 70: {64}, 71: {65}, 72: {66}, 73: {67}, 74: {68}, 75: {69}, 76: {70}, 77: {71}, 78: {74}, 79: {92}, 80: {76}, 81: {77}, 82: {95}, 83: {79}, 84: {80}, 85: {81}, 86: {99}, 87: {83}, 88: {84}, 89: {86}, 90: {87}, 91: {89}, 92: {90}, 93: {91}, 94: {75}, 95: {93}, 96: {94}, 97: {78}, 98: {96}, 99: {97}, 100: {98}, 101: {82}, 102: {100}, 103: {101}, 104: {103}, 105: {104, 91}, 106: {105}, 107: {106}, 108: {107}, 109: {108}, 110: {109}, 111: {110}, 112: {111}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 bitcast bitcast
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 load load
EXACT 14 add add
EXACT 15 store store
EXACT 16 load load
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 store store
EXACT 22 add add
EXACT 23 store store
EXACT 24 icmp icmp
EXACT 25 zext zext
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 tail tail
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 xor xor
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 xor xor
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 and and
EXACT 40 getelementptr getelementptr
EXACT 41 store store
EXACT 42 icmp icmp
EXACT 43 zext zext
EXACT 44 getelementptr getelementptr
EXACT 45 store store
EXACT 46 lshr lshr
EXACT 47 trunc trunc
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 lshr lshr
EXACT 51 xor xor
EXACT 52 add add
EXACT 53 icmp icmp
EXACT 54 zext zext
EXACT 55 getelementptr getelementptr
EXACT 56 store store
EXACT 57 add add
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 load load
EXACT 63 add add
EXACT 64 load load
EXACT 65 load load
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 store store
EXACT 70 load load
EXACT 71 add add
EXACT 72 load load
EXACT 73 load load
EXACT 74 add add
EXACT 75 store store
EXACT 76 inttoptr inttoptr
EXACT 77 store store
EXACT 78 load load
EXACT 79 store store
EXACT 80 add add
EXACT 81 add add
EXACT 82 load load
EXACT 83 add add
EXACT 84 inttoptr inttoptr
EXACT 85 store store
EXACT 86 store store
EXACT 87 store store
EXACT 88 tail tail
EXACT 89 load load
EXACT 90 store store
EXACT 91 load load
EXACT 92 zext zext
EXACT 93 store store
EXACT 94 store store
EXACT 95 add add
EXACT 96 add add
EXACT 97 load load
EXACT 98 add add
EXACT 99 inttoptr inttoptr
EXACT 100 store store
EXACT 101 store store
EXACT 102 store store
EXACT 103 tail tail
EXACT 104 load load
MORE 105 POT: 2
EXACT 106 load load
EXACT 107 add add
EXACT 108 load load
EXACT 109 add add
EXACT 110 store store
EXACT 111 inttoptr inttoptr
EXACT 112 store store
EXACT 113 load load
EXACT 114 zext zext
EXACT 115 load load
EXACT 116 store store
EXACT 117 load load
EXACT 118 add add
EXACT 119 store store
EXACT 120 icmp icmp
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 trunc trunc
EXACT 124 and and
EXACT 125 tail tail
EXACT 126 trunc trunc
EXACT 127 and and
EXACT 128 xor xor
EXACT 129 store store
EXACT 130 xor xor
EXACT 131 lshr lshr
EXACT 132 trunc trunc
EXACT 133 and and
EXACT 134 store store
EXACT 135 icmp icmp
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 lshr lshr
EXACT 139 trunc trunc
EXACT 140 store store
EXACT 141 lshr lshr
EXACT 142 xor xor
EXACT 143 add add
EXACT 144 icmp icmp
EXACT 145 zext zext
EXACT 146 store store
EXACT 147 add add
EXACT 148 store store
EXACT 149 add add
EXACT 150 inttoptr inttoptr
EXACT 151 load load
EXACT 152 store store
EXACT 153 store store
EXACT 154 add add
EXACT 155 store store
EXACT 156 inttoptr inttoptr
EXACT 157 load load
EXACT 158 store store
EXACT 159 add add
EXACT 160 store store
EXACT 161 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i23, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i21 = bitcast %union.anon* %56 to i8*', 'store i8 0, i8* %AL.i21, align 1', '%59 = add i64 %57, 7', '%60 = load i64, i64* %6, align 8', '%61 = add i64 %60, -8', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %6, align 8', 'store i64 %58, i64* %3, align 8', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0', '%63 = load i64, i64* %3, align 8', 'store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i, align 8', '%EAX.i16 = bitcast %union.anon* %56 to i32*', '%64 = load i32, i32* %EAX.i16, align 4', '%65 = zext i32 %64 to i64', 'store i64 %65, i64* %RSI.i23, align 8', '%66 = add i64 %63, -285', '%67 = add i64 %63, 19', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, -8', '%70 = inttoptr i64 %69 to i64*', 'store i64 %67, i64* %70, align 8', 'store i64 %69, i64* %6, align 8', 'store i64 %66, i64* %3, align 8', '%ESI.i9 = bitcast %union.anon* %49 to i32*', '%72 = load i64, i64* %3, align 8', '%73 = load i64, i64* %RBP.i, align 8', '%74 = add i64 %73, -20', '%75 = load i32, i32* %EAX.i16, align 4', '%76 = add i64 %72, 5', 'store i64 %76, i64* %3, align 8', '%77 = inttoptr i64 %74 to i32*', 'store i32 %75, i32* %77, align 4', '%RAX.i = getelementptr inbounds %union.anon, %union.anon* %56, i64 0, i32 0', '%78 = load i32, i32* %ESI.i9, align 4', '%79 = zext i32 %78 to i64', '%80 = load i64, i64* %3, align 8', 'store i64 %79, i64* %RAX.i, align 8', '%81 = load i64, i64* %6, align 8', '%82 = add i64 %81, 32', 'store i64 %82, i64* %6, align 8', '%83 = icmp ugt i64 %81, -33', '%84 = zext i1 %83 to i8', 'store i8 %84, i8* %14, align 1', '%85 = trunc i64 %82 to i32', '%86 = and i32 %85, 255', '%87 = tail call i32 @llvm.ctpop.i32(i32 %86)', '%88 = trunc i32 %87 to i8', '%89 = and i8 %88, 1', '%90 = xor i8 %89, 1', 'store i8 %90, i8* %21, align 1', '%91 = xor i64 %82, %81', '%92 = lshr i64 %91, 4', '%93 = trunc i64 %92 to i8', '%94 = and i8 %93, 1', 'store i8 %94, i8* %26, align 1', '%95 = icmp eq i64 %82, 0', '%96 = zext i1 %95 to i8', 'store i8 %96, i8* %29, align 1', '%97 = lshr i64 %82, 63', '%98 = trunc i64 %97 to i8', 'store i8 %98, i8* %32, align 1', '%99 = lshr i64 %81, 63', '%100 = xor i64 %97, %99', '%101 = add nuw nsw i64 %100, %97', '%102 = icmp eq i64 %101, 2', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %38, align 1', '%104 = add i64 %80, 7', 'store i64 %104, i64* %3, align 8', '%105 = add i64 %81, 40', '%106 = inttoptr i64 %82 to i64*', '%107 = load i64, i64* %106, align 8', 'store i64 %107, i64* %RBP.i, align 8', 'store i64 %105, i64* %6, align 8', '%108 = add i64 %80, 8', 'store i64 %108, i64* %3, align 8', '%109 = inttoptr i64 %105 to i64*', '%110 = load i64, i64* %109, align 8', 'store i64 %110, i64* %3, align 8', '%111 = add i64 %81, 48', 'store i64 %111, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -12
Found line to remove! %40 = add i64 %10, 14
Found line to remove! store i64 %40, i64* %3, align 8
Found line to remove! %41 = inttoptr i64 %39 to i32*
Found line to remove! store i32 0, i32* %41, align 4
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI.i = bitcast %union.anon* %42 to i32*
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI.i, align 4
Found line to remove! %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Keep: %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Keep: %RSI.i23 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -16
Found line to remove! %52 = load i64, i64* %RSI.i23, align 8
Found line to remove! %53 = load i64, i64* %3, align 8
Found line to remove! %54 = add i64 %53, 4
Found line to remove! store i64 %54, i64* %3, align 8
Found line to remove! %55 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %52, i64* %55, align 8
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL.i21 = bitcast %union.anon* %56 to i8*
Keep: %57 = load i64, i64* %3, align 8
Found line to remove! store i8 0, i8* %AL.i21, align 1
Keep: %58 = add i64 %57, 58
Found line to remove! %59 = add i64 %57, 7
Found line to remove! %60 = load i64, i64* %6, align 8
Found line to remove! %61 = add i64 %60, -8
Found line to remove! %62 = inttoptr i64 %61 to i64*
Found line to remove! store i64 %59, i64* %62, align 8
Found line to remove! store i64 %61, i64* %6, align 8
Found line to remove! store i64 %58, i64* %3, align 8
Keep: %call2_400538 = tail call %struct.Memory* @sub_400570.doWork(%struct.State* %0, i64 %58, %struct.Memory* %2)
Found line to remove! %RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0
Found line to remove! %63 = load i64, i64* %3, align 8
Found line to remove! store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i, align 8
Found line to remove! %EAX.i16 = bitcast %union.anon* %56 to i32*
Found line to remove! %64 = load i32, i32* %EAX.i16, align 4
Found line to remove! %65 = zext i32 %64 to i64
Found line to remove! store i64 %65, i64* %RSI.i23, align 8
Found line to remove! store i8 0, i8* %AL.i21, align 1
Found line to remove! %66 = add i64 %63, -285
Found line to remove! %67 = add i64 %63, 19
Found line to remove! %68 = load i64, i64* %6, align 8
Found line to remove! %69 = add i64 %68, -8
Found line to remove! %70 = inttoptr i64 %69 to i64*
Found line to remove! store i64 %67, i64* %70, align 8
Found line to remove! store i64 %69, i64* %6, align 8
Found line to remove! store i64 %66, i64* %3, align 8
Keep: %71 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400538)
Found line to remove! %ESI.i9 = bitcast %union.anon* %49 to i32*
Found line to remove! %72 = load i64, i64* %3, align 8
Keep: store i64 0, i64* %RSI.i23, align 8
Found line to remove! %73 = load i64, i64* %RBP.i, align 8
Found line to remove! %74 = add i64 %73, -20
Found line to remove! %75 = load i32, i32* %EAX.i16, align 4
Found line to remove! %76 = add i64 %72, 5
Found line to remove! store i64 %76, i64* %3, align 8
Found line to remove! %77 = inttoptr i64 %74 to i32*
Found line to remove! store i32 %75, i32* %77, align 4
Found line to remove! %RAX.i = getelementptr inbounds %union.anon, %union.anon* %56, i64 0, i32 0
Found line to remove! %78 = load i32, i32* %ESI.i9, align 4
Found line to remove! %79 = zext i32 %78 to i64
Found line to remove! %80 = load i64, i64* %3, align 8
Found line to remove! store i64 %79, i64* %RAX.i, align 8
Found line to remove! %81 = load i64, i64* %6, align 8
Found line to remove! %82 = add i64 %81, 32
Found line to remove! store i64 %82, i64* %6, align 8
Found line to remove! %83 = icmp ugt i64 %81, -33
Found line to remove! %84 = zext i1 %83 to i8
Found line to remove! store i8 %84, i8* %14, align 1
Found line to remove! %85 = trunc i64 %82 to i32
Found line to remove! %86 = and i32 %85, 255
Found line to remove! %87 = tail call i32 @llvm.ctpop.i32(i32 %86)
Found line to remove! %88 = trunc i32 %87 to i8
Found line to remove! %89 = and i8 %88, 1
Found line to remove! %90 = xor i8 %89, 1
Found line to remove! store i8 %90, i8* %21, align 1
Found line to remove! %91 = xor i64 %82, %81
Found line to remove! %92 = lshr i64 %91, 4
Found line to remove! %93 = trunc i64 %92 to i8
Found line to remove! %94 = and i8 %93, 1
Found line to remove! store i8 %94, i8* %26, align 1
Found line to remove! %95 = icmp eq i64 %82, 0
Found line to remove! %96 = zext i1 %95 to i8
Found line to remove! store i8 %96, i8* %29, align 1
Found line to remove! %97 = lshr i64 %82, 63
Found line to remove! %98 = trunc i64 %97 to i8
Found line to remove! store i8 %98, i8* %32, align 1
Found line to remove! %99 = lshr i64 %81, 63
Found line to remove! %100 = xor i64 %97, %99
Found line to remove! %101 = add nuw nsw i64 %100, %97
Found line to remove! %102 = icmp eq i64 %101, 2
Found line to remove! %103 = zext i1 %102 to i8
Found line to remove! store i8 %103, i8* %38, align 1
Found line to remove! %104 = add i64 %80, 7
Found line to remove! store i64 %104, i64* %3, align 8
Found line to remove! %105 = add i64 %81, 40
Found line to remove! %106 = inttoptr i64 %82 to i64*
Found line to remove! %107 = load i64, i64* %106, align 8
Found line to remove! store i64 %107, i64* %RBP.i, align 8
Found line to remove! store i64 %105, i64* %6, align 8
Found line to remove! %108 = add i64 %80, 8
Found line to remove! store i64 %108, i64* %3, align 8
Found line to remove! %109 = inttoptr i64 %105 to i64*
Found line to remove! %110 = load i64, i64* %109, align 8
Found line to remove! store i64 %110, i64* %3, align 8
Found line to remove! %111 = add i64 %81, 48
Found line to remove! store i64 %111, i64* %6, align 8
Keep: ret %struct.Memory* %71
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -12', '%40 = add i64 %10, 14', 'store i64 %40, i64* %3, align 8', '%41 = inttoptr i64 %39 to i32*', 'store i32 0, i32* %41, align 4', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI.i = bitcast %union.anon* %42 to i32*', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI.i, align 4', '%46 = load i64, i64* %3, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -16', '%52 = load i64, i64* %RSI.i23, align 8', '%53 = load i64, i64* %3, align 8', '%54 = add i64 %53, 4', 'store i64 %54, i64* %3, align 8', '%55 = inttoptr i64 %51 to i64*', 'store i64 %52, i64* %55, align 8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL.i21 = bitcast %union.anon* %56 to i8*', 'store i8 0, i8* %AL.i21, align 1', '%59 = add i64 %57, 7', '%60 = load i64, i64* %6, align 8', '%61 = add i64 %60, -8', '%62 = inttoptr i64 %61 to i64*', 'store i64 %59, i64* %62, align 8', 'store i64 %61, i64* %6, align 8', 'store i64 %58, i64* %3, align 8', '%RDI.i = getelementptr inbounds %union.anon, %union.anon* %42, i64 0, i32 0', '%63 = load i64, i64* %3, align 8', 'store i64 add (i64 ptrtoint (%G__0x400614_type* @G__0x400614 to i64), i64 188), i64* %RDI.i, align 8', '%EAX.i16 = bitcast %union.anon* %56 to i32*', '%64 = load i32, i32* %EAX.i16, align 4', '%65 = zext i32 %64 to i64', 'store i64 %65, i64* %RSI.i23, align 8', '%66 = add i64 %63, -285', '%67 = add i64 %63, 19', '%68 = load i64, i64* %6, align 8', '%69 = add i64 %68, -8', '%70 = inttoptr i64 %69 to i64*', 'store i64 %67, i64* %70, align 8', 'store i64 %69, i64* %6, align 8', 'store i64 %66, i64* %3, align 8', '%ESI.i9 = bitcast %union.anon* %49 to i32*', '%72 = load i64, i64* %3, align 8', '%73 = load i64, i64* %RBP.i, align 8', '%74 = add i64 %73, -20', '%75 = load i32, i32* %EAX.i16, align 4', '%76 = add i64 %72, 5', 'store i64 %76, i64* %3, align 8', '%77 = inttoptr i64 %74 to i32*', 'store i32 %75, i32* %77, align 4', '%RAX.i = getelementptr inbounds %union.anon, %union.anon* %56, i64 0, i32 0', '%78 = load i32, i32* %ESI.i9, align 4', '%79 = zext i32 %78 to i64', '%80 = load i64, i64* %3, align 8', 'store i64 %79, i64* %RAX.i, align 8', '%81 = load i64, i64* %6, align 8', '%82 = add i64 %81, 32', 'store i64 %82, i64* %6, align 8', '%83 = icmp ugt i64 %81, -33', '%84 = zext i1 %83 to i8', 'store i8 %84, i8* %14, align 1', '%85 = trunc i64 %82 to i32', '%86 = and i32 %85, 255', '%87 = tail call i32 @llvm.ctpop.i32(i32 %86)', '%88 = trunc i32 %87 to i8', '%89 = and i8 %88, 1', '%90 = xor i8 %89, 1', 'store i8 %90, i8* %21, align 1', '%91 = xor i64 %82, %81', '%92 = lshr i64 %91, 4', '%93 = trunc i64 %92 to i8', '%94 = and i8 %93, 1', 'store i8 %94, i8* %26, align 1', '%95 = icmp eq i64 %82, 0', '%96 = zext i1 %95 to i8', 'store i8 %96, i8* %29, align 1', '%97 = lshr i64 %82, 63', '%98 = trunc i64 %97 to i8', 'store i8 %98, i8* %32, align 1', '%99 = lshr i64 %81, 63', '%100 = xor i64 %97, %99', '%101 = add nuw nsw i64 %100, %97', '%102 = icmp eq i64 %101, 2', '%103 = zext i1 %102 to i8', 'store i8 %103, i8* %38, align 1', '%104 = add i64 %80, 7', 'store i64 %104, i64* %3, align 8', '%105 = add i64 %81, 40', '%106 = inttoptr i64 %82 to i64*', '%107 = load i64, i64* %106, align 8', 'store i64 %107, i64* %RBP.i, align 8', 'store i64 %105, i64* %6, align 8', '%108 = add i64 %80, 8', 'store i64 %108, i64* %3, align 8', '%109 = inttoptr i64 %105 to i64*', '%110 = load i64, i64* %109, align 8', 'store i64 %110, i64* %3, align 8', '%111 = add i64 %81, 48', 'store i64 %111, i64* %6, align 8'])
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ESI = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %5 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', 'store i8 0, i8* %AL, align 1', '%57 = add i64 %55, 7', '%58 = load i64, i64* %RSP, align 8', '%59 = add i64 %58, -8', '%60 = inttoptr i64 %59 to i64*', 'store i64 %57, i64* %60, align 8', 'store i64 %59, i64* %RSP, align 8', 'store i64 %56, i64* %PC, align 8', '%62 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8', '%63 = load i32, i32* %EAX, align 4', '%64 = zext i32 %63 to i64', 'store i64 %64, i64* %RSI, align 8', '%65 = add i64 %62, -285', '%66 = add i64 %62, 19', '%67 = load i64, i64* %RSP, align 8', '%68 = add i64 %67, -8', '%69 = inttoptr i64 %68 to i64*', 'store i64 %66, i64* %69, align 8', 'store i64 %68, i64* %RSP, align 8', 'store i64 %65, i64* %PC, align 8', '%71 = load i64, i64* %PC, align 8', '%72 = load i64, i64* %RBP, align 8', '%73 = add i64 %72, -20', '%74 = load i32, i32* %EAX, align 4', '%75 = add i64 %71, 5', 'store i64 %75, i64* %PC, align 8', '%76 = inttoptr i64 %73 to i32*', 'store i32 %74, i32* %76, align 4', '%77 = load i32, i32* %ESI, align 4', '%78 = zext i32 %77 to i64', '%79 = load i64, i64* %PC, align 8', 'store i64 %78, i64* %RAX, align 8', '%80 = load i64, i64* %RSP, align 8', '%81 = add i64 %80, 32', 'store i64 %81, i64* %RSP, align 8', '%82 = icmp ugt i64 %80, -33', '%83 = zext i1 %82 to i8', 'store i8 %83, i8* %15, align 1', '%84 = trunc i64 %81 to i32', '%85 = and i32 %84, 255', '%86 = tail call i32 @llvm.ctpop.i32(i32 %85) #12', '%87 = trunc i32 %86 to i8', '%88 = and i8 %87, 1', '%89 = xor i8 %88, 1', 'store i8 %89, i8* %22, align 1', '%90 = xor i64 %81, %80', '%91 = lshr i64 %90, 4', '%92 = trunc i64 %91 to i8', '%93 = and i8 %92, 1', 'store i8 %93, i8* %27, align 1', '%94 = icmp eq i64 %81, 0', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %30, align 1', '%96 = lshr i64 %81, 63', '%97 = trunc i64 %96 to i8', 'store i8 %97, i8* %33, align 1', '%98 = lshr i64 %80, 63', '%99 = xor i64 %96, %98', '%100 = add nuw nsw i64 %99, %96', '%101 = icmp eq i64 %100, 2', '%102 = zext i1 %101 to i8', 'store i8 %102, i8* %39, align 1', '%103 = add i64 %79, 7', 'store i64 %103, i64* %PC, align 8', '%104 = add i64 %80, 40', '%105 = inttoptr i64 %81 to i64*', '%106 = load i64, i64* %105, align 8', 'store i64 %106, i64* %RBP, align 8', 'store i64 %104, i64* %RSP, align 8', '%107 = add i64 %79, 8', 'store i64 %107, i64* %PC, align 8', '%108 = inttoptr i64 %104 to i64*', '%109 = load i64, i64* %108, align 8', 'store i64 %109, i64* %PC, align 8', '%110 = add i64 %80, 48', 'store i64 %110, i64* %RSP, align 8'])
Keep: block_400520:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Keep: %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
Found line to remove! %ESI = bitcast %union.anon* %4 to i32*
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
Found line to remove! %EDI = bitcast %union.anon* %5 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Keep: %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -12
Found line to remove! %41 = add i64 %11, 14
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %40 to i32*
Found line to remove! store i32 0, i32* %42, align 4
Found line to remove! %43 = load i64, i64* %RBP, align 8
Found line to remove! %44 = add i64 %43, -8
Found line to remove! %45 = load i32, i32* %EDI, align 4
Found line to remove! %46 = load i64, i64* %PC, align 8
Found line to remove! %47 = add i64 %46, 3
Found line to remove! store i64 %47, i64* %PC, align 8
Found line to remove! %48 = inttoptr i64 %44 to i32*
Found line to remove! store i32 %45, i32* %48, align 4
Found line to remove! %49 = load i64, i64* %RBP, align 8
Found line to remove! %50 = add i64 %49, -16
Found line to remove! %51 = load i64, i64* %RSI, align 8
Found line to remove! %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %50 to i64*
Found line to remove! store i64 %51, i64* %54, align 8
Keep: %55 = load i64, i64* %PC, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Keep: %56 = add i64 %55, 58
Found line to remove! %57 = add i64 %55, 7
Found line to remove! %58 = load i64, i64* %RSP, align 8
Found line to remove! %59 = add i64 %58, -8
Found line to remove! %60 = inttoptr i64 %59 to i64*
Found line to remove! store i64 %57, i64* %60, align 8
Found line to remove! store i64 %59, i64* %RSP, align 8
Found line to remove! store i64 %56, i64* %PC, align 8
Keep: %61 = tail call %struct.Memory* @sub_400570_doWork_renamed_(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2)
Found line to remove! %62 = load i64, i64* %PC, align 8
Found line to remove! store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %63 = load i32, i32* %EAX, align 4
Found line to remove! %64 = zext i32 %63 to i64
Found line to remove! store i64 %64, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %65 = add i64 %62, -285
Found line to remove! %66 = add i64 %62, 19
Found line to remove! %67 = load i64, i64* %RSP, align 8
Found line to remove! %68 = add i64 %67, -8
Found line to remove! %69 = inttoptr i64 %68 to i64*
Found line to remove! store i64 %66, i64* %69, align 8
Found line to remove! store i64 %68, i64* %RSP, align 8
Found line to remove! store i64 %65, i64* %PC, align 8
Keep: %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61)
Found line to remove! %71 = load i64, i64* %PC, align 8
Keep: store i64 0, i64* %RSI, align 8
Found line to remove! %72 = load i64, i64* %RBP, align 8
Found line to remove! %73 = add i64 %72, -20
Found line to remove! %74 = load i32, i32* %EAX, align 4
Found line to remove! %75 = add i64 %71, 5
Found line to remove! store i64 %75, i64* %PC, align 8
Found line to remove! %76 = inttoptr i64 %73 to i32*
Found line to remove! store i32 %74, i32* %76, align 4
Found line to remove! %77 = load i32, i32* %ESI, align 4
Found line to remove! %78 = zext i32 %77 to i64
Found line to remove! %79 = load i64, i64* %PC, align 8
Found line to remove! store i64 %78, i64* %RAX, align 8
Found line to remove! %80 = load i64, i64* %RSP, align 8
Found line to remove! %81 = add i64 %80, 32
Found line to remove! store i64 %81, i64* %RSP, align 8
Found line to remove! %82 = icmp ugt i64 %80, -33
Found line to remove! %83 = zext i1 %82 to i8
Found line to remove! store i8 %83, i8* %15, align 1
Found line to remove! %84 = trunc i64 %81 to i32
Found line to remove! %85 = and i32 %84, 255
Found line to remove! %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #12
Found line to remove! %87 = trunc i32 %86 to i8
Found line to remove! %88 = and i8 %87, 1
Found line to remove! %89 = xor i8 %88, 1
Found line to remove! store i8 %89, i8* %22, align 1
Found line to remove! %90 = xor i64 %81, %80
Found line to remove! %91 = lshr i64 %90, 4
Found line to remove! %92 = trunc i64 %91 to i8
Found line to remove! %93 = and i8 %92, 1
Found line to remove! store i8 %93, i8* %27, align 1
Found line to remove! %94 = icmp eq i64 %81, 0
Found line to remove! %95 = zext i1 %94 to i8
Found line to remove! store i8 %95, i8* %30, align 1
Found line to remove! %96 = lshr i64 %81, 63
Found line to remove! %97 = trunc i64 %96 to i8
Found line to remove! store i8 %97, i8* %33, align 1
Found line to remove!Writing '/tmp/tmpent_14cp.dot'...
Writing '/tmp/tmpent_14cp.dot':Done

Reading LLVM: /tmp/tmp2ohdwsh0-query.ll
Extracting function [main] from /tmp/tmp2ohdwsh0-query.ll
Dot file generated!
Writing '/tmp/tmpi5kwhm6x.dot'...
Writing '/tmp/tmpi5kwhm6x.dot':Done

Reading LLVM: /tmp/tmprk1_nsbj-target.ll
Extracting function [main] from /tmp/tmprk1_nsbj-target.ll
Dot file generated!
 %98 = lshr i64 %80, 63
Found line to remove! %99 = xor i64 %96, %98
Found line to remove! %100 = add nuw nsw i64 %99, %96
Found line to remove! %101 = icmp eq i64 %100, 2
Found line to remove! %102 = zext i1 %101 to i8
Found line to remove! store i8 %102, i8* %39, align 1
Found line to remove! %103 = add i64 %79, 7
Found line to remove! store i64 %103, i64* %PC, align 8
Found line to remove! %104 = add i64 %80, 40
Found line to remove! %105 = inttoptr i64 %81 to i64*
Found line to remove! %106 = load i64, i64* %105, align 8
Found line to remove! store i64 %106, i64* %RBP, align 8
Found line to remove! store i64 %104, i64* %RSP, align 8
Found line to remove! %107 = add i64 %79, 8
Found line to remove! store i64 %107, i64* %PC, align 8
Found line to remove! %108 = inttoptr i64 %104 to i64*
Found line to remove! %109 = load i64, i64* %108, align 8
Found line to remove! store i64 %109, i64* %PC, align 8
Found line to remove! %110 = add i64 %80, 48
Found line to remove! store i64 %110, i64* %RSP, align 8
Keep: ret %struct.Memory* %70
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%ESI = bitcast %union.anon* %4 to i32*', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0', '%EDI = bitcast %union.anon* %5 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -12', '%41 = add i64 %11, 14', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %40 to i32*', 'store i32 0, i32* %42, align 4', '%43 = load i64, i64* %RBP, align 8', '%44 = add i64 %43, -8', '%45 = load i32, i32* %EDI, align 4', '%46 = load i64, i64* %PC, align 8', '%47 = add i64 %46, 3', 'store i64 %47, i64* %PC, align 8', '%48 = inttoptr i64 %44 to i32*', 'store i32 %45, i32* %48, align 4', '%49 = load i64, i64* %RBP, align 8', '%50 = add i64 %49, -16', '%51 = load i64, i64* %RSI, align 8', '%52 = load i64, i64* %PC, align 8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %50 to i64*', 'store i64 %51, i64* %54, align 8', 'store i8 0, i8* %AL, align 1', '%57 = add i64 %55, 7', '%58 = load i64, i64* %RSP, align 8', '%59 = add i64 %58, -8', '%60 = inttoptr i64 %59 to i64*', 'store i64 %57, i64* %60, align 8', 'store i64 %59, i64* %RSP, align 8', 'store i64 %56, i64* %PC, align 8', '%62 = load i64, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_400610__rodata_type* @seg_400610__rodata to i64), i64 4), i64* %RDI, align 8', '%63 = load i32, i32* %EAX, align 4', '%64 = zext i32 %63 to i64', 'store i64 %64, i64* %RSI, align 8', '%65 = add i64 %62, -285', '%66 = add i64 %62, 19', '%67 = load i64, i64* %RSP, align 8', '%68 = add i64 %67, -8', '%69 = inttoptr i64 %68 to i64*', 'store i64 %66, i64* %69, align 8', 'store i64 %68, i64* %RSP, align 8', 'store i64 %65, i64* %PC, align 8', '%71 = load i64, i64* %PC, align 8', '%72 = load i64, i64* %RBP, align 8', '%73 = add i64 %72, -20', '%74 = load i32, i32* %EAX, align 4', '%75 = add i64 %71, 5', 'store i64 %75, i64* %PC, align 8', '%76 = inttoptr i64 %73 to i32*', 'store i32 %74, i32* %76, align 4', '%77 = load i32, i32* %ESI, align 4', '%78 = zext i32 %77 to i64', '%79 = load i64, i64* %PC, align 8', 'store i64 %78, i64* %RAX, align 8', '%80 = load i64, i64* %RSP, align 8', '%81 = add i64 %80, 32', 'store i64 %81, i64* %RSP, align 8', '%82 = icmp ugt i64 %80, -33', '%83 = zext i1 %82 to i8', 'store i8 %83, i8* %15, align 1', '%84 = trunc i64 %81 to i32', '%85 = and i32 %84, 255', '%86 = tail call i32 @llvm.ctpop.i32(i32 %85) #12', '%87 = trunc i32 %86 to i8', '%88 = and i8 %87, 1', '%89 = xor i8 %88, 1', 'store i8 %89, i8* %22, align 1', '%90 = xor i64 %81, %80', '%91 = lshr i64 %90, 4', '%92 = trunc i64 %91 to i8', '%93 = and i8 %92, 1', 'store i8 %93, i8* %27, align 1', '%94 = icmp eq i64 %81, 0', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %30, align 1', '%96 = lshr i64 %81, 63', '%97 = trunc i64 %96 to i8', 'store i8 %97, i8* %33, align 1', '%98 = lshr i64 %80, 63', '%99 = xor i64 %96, %98', '%100 = add nuw nsw i64 %99, %96', '%101 = icmp eq i64 %100, 2', '%102 = zext i1 %101 to i8', 'store i8 %102, i8* %39, align 1', '%103 = add i64 %79, 7', 'store i64 %103, i64* %PC, align 8', '%104 = add i64 %80, 40', '%105 = inttoptr i64 %81 to i64*', '%106 = load i64, i64* %105, align 8', 'store i64 %106, i64* %RBP, align 8', 'store i64 %104, i64* %RSP, align 8', '%107 = add i64 %79, 8', 'store i64 %107, i64* %PC, align 8', '%108 = inttoptr i64 %104 to i64*', '%109 = load i64, i64* %108, align 8', 'store i64 %109, i64* %PC, align 8', '%110 = add i64 %80, 48', 'store i64 %110, i64* %RSP, align 8'])
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 2 %var_2_57 = load i64, i64* %var_2_3, align 8
- 3 %var_2_58 = add i64 %var_2_57, 58
- 4 %call2_400538 = tail call %struct.Memory* @sub_400570.doWork(%struct.State* %0, i64 %var_2_58, %struct.Memory* %2)
- 5 %var_2_71 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400538)
- 6 store i64 0, i64* %RSI.i23, align 8
- 7 \<badref\> = ret %struct.Memory* %var_2_71
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1caad04ea0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4, 5}, 5: {4, 5}, 6: {6}, 7: {7}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1caad04ea0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 tail tail
EXACT 5 tail tail
EXACT 6 store store
EXACT 7 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 2 %var_2_55 = load i64, i64* %PC, align 8
- 3 %var_2_56 = add i64 %var_2_55, 58
- 4 %var_2_61 = tail call %struct.Memory* @sub_400570_doWork_renamed_(%struct.State* nonnull %0, i64 %var_2_56, %struct.Memory* %2)
- 5 %var_2_70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_61)
- 6 store i64 0, i64* %RSI, align 8
- 7 \<badref\> = ret %struct.Memory* %var_2_70
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1caaef31e0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4, 5}, 5: {4, 5}, 6: {6}, 7: {7}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f1caaef31e0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 tail tail
EXACT 5 tail tail
EXACT 6 store store
EXACT 7 ret ret
FP: 63 2.0 True
TO REMOVE: dict_keys(['%RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 0, i64* %RSI.i23, align 8'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %var_2_57 = load i64, i64* %var_2_3, align 8
Keep: %var_2_58 = add i64 %var_2_57, 58
Keep: %call2_400538 = tail call %struct.Memory* @sub_400570.doWork(%struct.State* %0, i64 %var_2_58, %struct.Memory* %2)
Keep: %var_2_71 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %call2_400538)
Found line to remove! store i64 0, i64* %RSI.i23, align 8
Keep: ret %struct.Memory* %var_2_71
Missed: dict_keys(['%RSI.i23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 0, i64* %RSI.i23, align 8'])
TO REMOVE: dict_keys(['%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 0, i64* %RSI, align 8'])
Keep: block_400520:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Keep: %var_2_55 = load i64, i64* %PC, align 8
Keep: %var_2_56 = add i64 %var_2_55, 58
Keep: %var_2_61 = tail call %struct.Memory* @sub_400570_doWork_renamed_(%struct.State* nonnull %0, i64 %var_2_56, %struct.Memory* %2)
Keep: %var_2_70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %var_2_61)
Found line to remove! store i64 0, i64* %RSI, align 8
Keep: ret %struct.Memory* %var_2_70
Missed: dict_keys(['%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', 'store i64 0, i64* %RSI, align 8'])
[*] Found exact, syntactic match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_13_1/main/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/toy-examples/test_13_1/binary/test.mcsema.calls_renamed.ll main
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
