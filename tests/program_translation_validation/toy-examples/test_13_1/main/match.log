Matching sub_400500_main Vs main


[Info] Retrieve Potential Matches...
[0x56121b5d70d0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56121b64f380]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56121b611b10]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x56121b6531b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56121b61c410]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x56121b5f45e0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x56121b61c4a0]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61cb30]:   %28 = icmp eq i64 %12, 0 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b61cb98]:   %29 = zext i1 %28 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b61cc40]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56121b5f4370]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x56121b61ccd0]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61d360]:   %31 = lshr i64 %12, 63 {
	[0x56121b5f2710]:  %96 = lshr i64 %81, 63
	[0x56121b5f29e0]:  %30 = lshr i64 %11, 63
	[0x56121b5fdae0]:  %98 = lshr i64 %80, 63
	[0x56121b663360]:  %33 = lshr i64 %8, 63
	}

[0x56121b61d3c8]:   %32 = trunc i64 %31 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b61d470]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56121b5f2c50]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x56121b61d500]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61db90]:   %34 = lshr i64 %9, 63 {
	[0x56121b5f2710]:  %96 = lshr i64 %81, 63
	[0x56121b5f29e0]:  %30 = lshr i64 %11, 63
	[0x56121b5fdae0]:  %98 = lshr i64 %80, 63
	[0x56121b663360]:  %33 = lshr i64 %8, 63
	}

[0x56121b61dc10]:   %35 = xor i64 %31, %34 {
	[0x56121b5f1750]:  %22 = xor i64 %8, %11
	[0x56121b5f2450]:  %90 = xor i64 %81, %80
	[0x56121b5fd900]:  %99 = xor i64 %96, %98
	[0x56121b664730]:  %34 = xor i64 %30, %33
	}

[0x56121b61dc90]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56121b5fd7a0]:  %100 = add nuw nsw i64 %99, %96
	[0x56121b663210]:  %35 = add nuw nsw i64 %34, %33
	}

[0x56121b61dd10]:   %37 = icmp eq i64 %36, 2 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b61dd78]:   %38 = zext i1 %37 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b61de20]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56121b5efcf0]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x56121b61deb0]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61f138]:   %49 = load i64, i64* %RBP, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61f1f0]:   %50 = add i64 %49, -16 {
	[0x56121b5f3690]:  %51 = add i64 %50, -16
	}

[0x56121b61f258]:   %51 = load i64, i64* %RSI, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61f330]:   %53 = add i64 %52, 4 {
	[0x56121b665100]:  %54 = add i64 %53, 4
	}

[0x56121b61f3b0]:   store i64 %53, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61f418]:   %54 = inttoptr i64 %50 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b61f490]:   store i64 %51, i64* %54, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61f570]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61f740]:   %56 = add i64 %55, 58 {
	[0x56121b5f3940]:  %58 = add i64 %57, 58
	}

[0x56121b61f7c0]:   %57 = add i64 %55, 7 {
	[0x56121b5fd340]:  %103 = add i64 %79, 7
	[0x56121b6651d0]:  %59 = add i64 %57, 7
	}

[0x56121b61f828]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61f8a0]:   %59 = add i64 %58, -8 {
	[0x56121b5c92f0]:  %8 = add i64 %7, -8
	[0x56121b5f37f0]:  %61 = add i64 %60, -8
	[0x56121b5f5a70]:  %69 = add i64 %68, -8
	[0x56121b664d90]:  %44 = add i64 %43, -8
	}

[0x56121b61f908]:   %60 = inttoptr i64 %59 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b61f980]:   store i64 %57, i64* %60, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61fa00]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61fa80]:   store i64 %56, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61fd30]:   %61 = tail call %struct.Memory* @sub_400550_doWork(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x56121b678b00]:  %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
	[0x56121b67a5d0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x56121b67ae10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61ff10]:   store i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b61ff78]:   %63 = load i32, i32* %EAX, align 4 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b61ffd8]:   %64 = zext i32 %63 to i64 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b620050]:   store i64 %64, i64* %RSI, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6200d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6207a0]:   %65 = add i64 %62, -285 {
	[0x56121b5f4b10]:  %66 = add i64 %63, -285
	}

[0x56121b620860]:   %66 = add i64 %62, 19 {
	[0x56121b5f49b0]:  %67 = add i64 %63, 19
	}

[0x56121b6208c8]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b620940]:   %68 = add i64 %67, -8 {
	[0x56121b5c92f0]:  %8 = add i64 %7, -8
	[0x56121b5f37f0]:  %61 = add i64 %60, -8
	[0x56121b5f5a70]:  %69 = add i64 %68, -8
	[0x56121b664d90]:  %44 = add i64 %43, -8
	}

[0x56121b6209a8]:   %69 = inttoptr i64 %68 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b620a20]:   store i64 %66, i64* %69, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b620aa0]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b620b20]:   store i64 %65, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b620d28]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61) {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x56121b678b00]:  %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
	[0x56121b67a5d0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x56121b67ae10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56121b620de8]:   %71 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b620e60]:   store i64 0, i64* %RSI, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b620ec8]:   %72 = load i64, i64* %RBP, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b620f80]:   %73 = add i64 %72, -20 {
	[0x56121b5f75e0]:  %73 = add i64 %72, -20
	}

[0x56121b620fe8]:   %74 = load i32, i32* %EAX, align 4 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b621060]:   %75 = add i64 %71, 5 {
	[0x56121b5f5c90]:  %75 = add i64 %71, 5
	}

[0x56121b6210e0]:   store i64 %75, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621148]:   %76 = inttoptr i64 %73 to i32* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b6211c0]:   store i32 %74, i32* %76, align 4 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621228]:   %77 = load i32, i32* %ESI, align 4 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b621288]:   %78 = zext i32 %77 to i64 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b621360]:   store i64 %78, i64* %RAX, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6213c8]:   %80 = load i64, i64* %RSP, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b621440]:   %81 = add i64 %80, 32 {
	[0x56121b5faa00]:  %81 = add i64 %80, 32
	}

[0x56121b6214c0]:   store i64 %81, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621580]:   %82 = icmp ugt i64 %80, -33 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b6215e8]:   %83 = zext i1 %82 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b621660]:   store i8 %83, i8* %15, align 1, !tbaa !1265 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6216c8]:   %84 = trunc i64 %81 to i32 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b621740]:   %85 = and i32 %84, 255 {
	[0x56121b5f8b30]:  %85 = and i32 %84, 255
	[0x56121b6ac720]:  %16 = and i32 %15, 255
	}

[0x56121b6217e0]:   %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9 {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x56121b678b00]:  %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
	[0x56121b67a5d0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x56121b67ae10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56121b6218a8]:   %87 = trunc i32 %86 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b621920]:   %88 = and i8 %87, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	[0x56121b5f1200]:  %25 = and i8 %24, 1
	[0x56121b5f21e0]:  %93 = and i8 %92, 1
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b6219a0]:   %89 = xor i8 %88, 1 {
	[0x56121b5fad30]:  %89 = xor i8 %88, 1
	[0x56121b664400]:  %20 = xor i8 %19, 1
	}

[0x56121b621a20]:   store i8 %89, i8* %22, align 1, !tbaa !1279 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621aa0]:   %90 = xor i64 %81, %80 {
	[0x56121b5f1750]:  %22 = xor i64 %8, %11
	[0x56121b5f2450]:  %90 = xor i64 %81, %80
	[0x56121b5fd900]:  %99 = xor i64 %96, %98
	[0x56121b664730]:  %34 = xor i64 %30, %33
	}

[0x56121b621b20]:   %91 = lshr i64 %90, 4 {
	[0x56121b5f2330]:  %91 = lshr i64 %90, 4
	[0x56121b6640d0]:  %23 = lshr i64 %22, 4
	}

[0x56121b621b88]:   %92 = trunc i64 %91 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b621c00]:   %93 = and i8 %92, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	[0x56121b5f1200]:  %25 = and i8 %24, 1
	[0x56121b5f21e0]:  %93 = and i8 %92, 1
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b621c80]:   store i8 %93, i8* %27, align 1, !tbaa !1280 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621d00]:   %94 = icmp eq i64 %81, 0 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b621d68]:   %95 = zext i1 %94 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b621de0]:   store i8 %95, i8* %30, align 1, !tbaa !1281 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621e60]:   %96 = lshr i64 %81, 63 {
	[0x56121b5f2710]:  %96 = lshr i64 %81, 63
	[0x56121b5f29e0]:  %30 = lshr i64 %11, 63
	[0x56121b5fdae0]:  %98 = lshr i64 %80, 63
	[0x56121b663360]:  %33 = lshr i64 %8, 63
	}

[0x56121b621ec8]:   %97 = trunc i64 %96 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b621f40]:   store i8 %97, i8* %33, align 1, !tbaa !1282 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b621fc0]:   %98 = lshr i64 %80, 63 {
	[0x56121b5f2710]:  %96 = lshr i64 %81, 63
	[0x56121b5f29e0]:  %30 = lshr i64 %11, 63
	[0x56121b5fdae0]:  %98 = lshr i64 %80, 63
	[0x56121b663360]:  %33 = lshr i64 %8, 63
	}

[0x56121b622040]:   %99 = xor i64 %96, %98 {
	[0x56121b5f1750]:  %22 = xor i64 %8, %11
	[0x56121b5f2450]:  %90 = xor i64 %81, %80
	[0x56121b5fd900]:  %99 = xor i64 %96, %98
	[0x56121b664730]:  %34 = xor i64 %30, %33
	}

[0x56121b6220c0]:   %100 = add nuw nsw i64 %99, %96 {
	[0x56121b5fd7a0]:  %100 = add nuw nsw i64 %99, %96
	[0x56121b663210]:  %35 = add nuw nsw i64 %34, %33
	}

[0x56121b622140]:   %101 = icmp eq i64 %100, 2 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b6221a8]:   %102 = zext i1 %101 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b622220]:   store i8 %102, i8* %39, align 1, !tbaa !1283 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6222a0]:   %103 = add i64 %79, 7 {
	[0x56121b5fd340]:  %103 = add i64 %79, 7
	[0x56121b6651d0]:  %59 = add i64 %57, 7
	}

[0x56121b622320]:   store i64 %103, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6223e0]:   %104 = add i64 %80, 40 {
	[0x56121b6007a0]:  %104 = add i64 %80, 40
	}

[0x56121b622448]:   %105 = inttoptr i64 %81 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b6224a8]:   %106 = load i64, i64* %105, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b622520]:   store i64 %106, i64* %RBP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6225a0]:   store i64 %104, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b622620]:   %107 = add i64 %79, 8 {
	[0x56121b5fef40]:  %107 = add i64 %79, 8
	}

[0x56121b6226a0]:   store i64 %107, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b622708]:   %108 = inttoptr i64 %104 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b622768]:   %109 = load i64, i64* %108, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b6227e0]:   store i64 %109, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6228a0]:   %110 = add i64 %80, 48 {
	[0x56121b5fe1b0]:  %110 = add i64 %80, 48
	}

[0x56121b622920]:   store i64 %110, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b622988]:   ret %struct.Memory* %70 {
	[0x56121b671498]:  ret %struct.Memory.32* %call2_40052b
	}

[0x56121b626c10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x56121b653340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56121b67d4e0]:   %40 = add i64 %8, -12 {
	[0x56121b5f2b40]:  %39 = add i64 %7, -12
	}

[0x56121b67d560]:   %41 = add i64 %11, 14 {
	[0x56121b664fb0]:  %40 = add i64 %10, 14
	}

[0x56121b67d5e0]:   store i64 %41, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b67d648]:   %42 = inttoptr i64 %40 to i32* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b67d6c0]:   store i32 0, i32* %42, align 4 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b67d728]:   %43 = load i64, i64* %RBP, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b67d7a0]:   %44 = add i64 %43, -8 {
	[0x56121b5c92f0]:  %8 = add i64 %7, -8
	[0x56121b5f37f0]:  %61 = add i64 %60, -8
	[0x56121b5f5a70]:  %69 = add i64 %68, -8
	[0x56121b664d90]:  %44 = add i64 %43, -8
	}

[0x56121b67d808]:   %45 = load i32, i32* %EDI, align 4 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b67d868]:   %46 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b67d8e0]:   %47 = add i64 %46, 3 {
	[0x56121b5f33e0]:  %47 = add i64 %46, 3
	}

[0x56121b67d960]:   store i64 %47, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b67d9c8]:   %48 = inttoptr i64 %44 to i32* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b67da40]:   store i32 %45, i32* %48, align 4 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6879e0]: %struct.State* %0 {
	[0x56121b5f3740]:%struct.State.1* %0
	}

[0x56121b687a20]: i64 %1 {
	[0x56121b5f3fb0]:i64 %1
	}

[0x56121b687a60]: %struct.Memory* %2 {
	[0x56121b5f4d10]:%struct.Memory.32* %2
	}

[0x56121b687c18]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x56121b666238]:  %EDI.i = bitcast %union.anon.5* %42 to i32*
	[0x56121b667b28]:  %AL.i18 = bitcast %union.anon.5* %56 to i8*
	[0x56121b667eb8]:  %EAX.i13 = bitcast %union.anon.5* %56 to i32*
	[0x56121b669728]:  %ESI.i9 = bitcast %union.anon.5* %49 to i32*
	}

[0x56121b687c78]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x56121b666238]:  %EDI.i = bitcast %union.anon.5* %42 to i32*
	[0x56121b667b28]:  %AL.i18 = bitcast %union.anon.5* %56 to i8*
	[0x56121b667eb8]:  %EAX.i13 = bitcast %union.anon.5* %56 to i32*
	[0x56121b669728]:  %ESI.i9 = bitcast %union.anon.5* %49 to i32*
	}

[0x56121b687d48]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x56121b666238]:  %EDI.i = bitcast %union.anon.5* %42 to i32*
	[0x56121b667b28]:  %AL.i18 = bitcast %union.anon.5* %56 to i8*
	[0x56121b667eb8]:  %EAX.i13 = bitcast %union.anon.5* %56 to i32*
	[0x56121b669728]:  %ESI.i9 = bitcast %union.anon.5* %49 to i32*
	}

[0x56121b687dc8]:   %EDI = bitcast %union.anon* %5 to i32* {
	[0x56121b666238]:  %EDI.i = bitcast %union.anon.5* %42 to i32*
	[0x56121b667b28]:  %AL.i18 = bitcast %union.anon.5* %56 to i8*
	[0x56121b667eb8]:  %EAX.i13 = bitcast %union.anon.5* %56 to i32*
	[0x56121b669728]:  %ESI.i9 = bitcast %union.anon.5* %49 to i32*
	}

[0x56121b687e78]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x56121b5c9268]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %56, i64 0, i32 0
	[0x56121b5c9b88]:  %RDI.i = getelementptr inbounds %union.anon.5, %union.anon.5* %42, i64 0, i32 0
	[0x56121b5c9ec8]:  %RSI.i20 = getelementptr inbounds %union.anon.5, %union.anon.5* %49, i64 0, i32 0
	}

[0x56121b687f38]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x56121b5c9268]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %56, i64 0, i32 0
	[0x56121b5c9b88]:  %RDI.i = getelementptr inbounds %union.anon.5, %union.anon.5* %42, i64 0, i32 0
	[0x56121b5c9ec8]:  %RSI.i20 = getelementptr inbounds %union.anon.5, %union.anon.5* %49, i64 0, i32 0
	}

[0x56121b687ff8]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0 {
	[0x56121b5c9268]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %56, i64 0, i32 0
	[0x56121b5c9b88]:  %RDI.i = getelementptr inbounds %union.anon.5, %union.anon.5* %42, i64 0, i32 0
	[0x56121b5c9ec8]:  %RSI.i20 = getelementptr inbounds %union.anon.5, %union.anon.5* %49, i64 0, i32 0
	}

[0x56121b6880c8]:   %6 = load i64, i64* %RBP, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b688140]:   %7 = add i64 %1, 1 {
	[0x56121b658f10]:  %5 = add i64 %1, 1
	}

[0x56121b6881c0]:   store i64 %7, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b688228]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b6882a0]:   %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9 {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x56121b678b00]:  %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
	[0x56121b67a5d0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	[0x56121b67ae10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56121b688330]:   %9 = add i64 %8, -8 {
	[0x56121b5c92f0]:  %8 = add i64 %7, -8
	[0x56121b5f37f0]:  %61 = add i64 %60, -8
	[0x56121b5f5a70]:  %69 = add i64 %68, -8
	[0x56121b664d90]:  %44 = add i64 %43, -8
	}

[0x56121b688398]:   %10 = inttoptr i64 %9 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b688410]:   store i64 %6, i64* %10, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b688478]:   %11 = load i64, i64* %PC, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b6884f0]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6885b0]:   %12 = add i64 %8, -40 {
	[0x56121b5ef330]:  %11 = add i64 %7, -40
	}

[0x56121b688630]:   store i64 %12, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6886f0]:   %13 = icmp ult i64 %9, 32 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b688758]:   %14 = zext i1 %13 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b688800]:   %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x56121b739b10]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x56121b688890]:   store i8 %14, i8* %15, align 1, !tbaa !1265 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b6888f8]:   %16 = trunc i64 %12 to i32 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b688970]:   %17 = and i32 %16, 255 {
	[0x56121b5f8b30]:  %85 = and i32 %84, 255
	[0x56121b6ac720]:  %16 = and i32 %15, 255
	}

[0x56121b688a18]:   %19 = trunc i32 %18 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b688a90]:   %20 = and i8 %19, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	[0x56121b5f1200]:  %25 = and i8 %24, 1
	[0x56121b5f21e0]:  %93 = and i8 %92, 1
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b688b10]:   %21 = xor i8 %20, 1 {
	[0x56121b5fad30]:  %89 = xor i8 %88, 1
	[0x56121b664400]:  %20 = xor i8 %19, 1
	}

[0x56121b688bc0]:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x56121b698e80]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x56121b688c50]:   store i8 %21, i8* %22, align 1, !tbaa !1279 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b688cd0]:   %23 = xor i64 %9, %12 {
	[0x56121b5f1750]:  %22 = xor i64 %8, %11
	[0x56121b5f2450]:  %90 = xor i64 %81, %80
	[0x56121b5fd900]:  %99 = xor i64 %96, %98
	[0x56121b664730]:  %34 = xor i64 %30, %33
	}

[0x56121b688d50]:   %24 = lshr i64 %23, 4 {
	[0x56121b5f2330]:  %91 = lshr i64 %90, 4
	[0x56121b6640d0]:  %23 = lshr i64 %22, 4
	}

[0x56121b688db8]:   %25 = trunc i64 %24 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b688e30]:   %26 = and i8 %25, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	[0x56121b5f1200]:  %25 = and i8 %24, 1
	[0x56121b5f21e0]:  %93 = and i8 %92, 1
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b69aed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x56121b5ccf18]:  %56 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x56121b69bc28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x56121b72aae8]:  %49 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x56121b6a6578]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x56121b6b2858]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase I: Dual Simulation: Round: 0
Round: 0

Removing: [0x56121b667eb8]:   %EAX.i13 = bitcast %union.anon.5* %56 to i32*
From the pot matches of: [0x56121b687c18]:   %AL = bitcast %union.anon* %3 to i8*


Uprime : [0x56121b6200d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284


Uprime Matches: [0x56121b5c84e0]:   store i64 %5, i64* %3, align 8
[0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8
[0x56121b5f18b0]:   store i8 %20, i8* %21, align 1
[0x56121b5f2000]:   store i8 %93, i8* %26, align 1
[0x56121b5f25b0]:   store i8 %89, i8* %21, align 1
[0x56121b5f3280]:   store i64 %47, i64* %3, align 8
[0x56121b5f3540]:   store i64 %40, i64* %3, align 8
[0x56121b5f3c00]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f3d60]:   store i64 %52, i64* %55, align 8
[0x56121b5f3f00]:   store i64 %54, i64* %3, align 8
[0x56121b5f4860]:   store i64 %59, i64* %62, align 8
[0x56121b5f4c60]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f4dc0]:   store i64 %65, i64* %RSI.i20, align 8
[0x56121b5f4ff0]:   store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
[0x56121b5f51f0]:   store i64 %58, i64* %3, align 8
[0x56121b5f5b80]:   store i64 %75, i64* %3, align 8
[0x56121b5f5ef0]:   store i32 %74, i32* %76, align 4
[0x56121b5f5fc0]:   store i64 0, i64* %RSI.i20, align 8
[0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5f7830]:   store i64 %66, i64* %3, align 8
[0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8
[0x56121b5fa5e0]:   store i8 %83, i8* %14, align 1
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5fabe0]:   store i64 %78, i64* %RAX.i, align 8
[0x56121b5faff0]:   store i8 %95, i8* %29, align 1
[0x56121b5fd4a0]:   store i8 %102, i8* %38, align 1
[0x56121b5fdc40]:   store i8 %97, i8* %32, align 1
[0x56121b5fdd20]:   store i64 %103, i64* %3, align 8
[0x56121b5fe310]:   store i64 %109, i64* %3, align 8
[0x56121b5fe4b0]:   store i64 %107, i64* %3, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600640]:   store i64 %106, i64* %RBP.i, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b65e940]:   store i8 %13, i8* %14, align 1
[0x56121b662e10]:   store i64 %11, i64* %6, align 8
[0x56121b663010]:   store i8 %37, i8* %38, align 1
[0x56121b663fc0]:   store i8 %25, i8* %26, align 1
[0x56121b664510]:   store i8 %28, i8* %29, align 1
[0x56121b664950]:   store i8 %31, i8* %32, align 1
[0x56121b664b70]:   store i32 %45, i32* %48, align 4
[0x56121b664ea0]:   store i32 0, i32* %41, align 4


Adj: [0x56121b5fdf18]:   %74 = load i32, i32* %EAX.i13, align 4
[0x56121b669f78]:   %64 = load i32, i32* %EAX.i13, align 4


Removing: [0x56121b667b28]:   %AL.i18 = bitcast %union.anon.5* %56 to i8*
From the pot matches of: [0x56121b687c78]:   %EAX = bitcast %union.anon* %3 to i32*


Uprime : [0x56121b620fe8]:   %74 = load i32, i32* %EAX, align 4


Uprime Matches: [0x56121b5f19b8]:   %52 = load i64, i64* %RSI.i20, align 8
[0x56121b5fdf18]:   %74 = load i32, i32* %EAX.i13, align 4
[0x56121b64fbd8]:   %4 = load i64, i64* %RBP.i, align 8
[0x56121b64fd68]:   %7 = load i64, i64* %6, align 8
[0x56121b6634a8]:   %50 = load i64, i64* %RBP.i, align 8
[0x56121b665568]:   %46 = load i64, i64* %3, align 8
[0x56121b6658f8]:   %45 = load i32, i32* %EDI.i, align 4
[0x56121b665fd8]:   %43 = load i64, i64* %RBP.i, align 8
[0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
[0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
[0x56121b667798]:   %60 = load i64, i64* %6, align 8
[0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
[0x56121b669008]:   %72 = load i64, i64* %RBP.i, align 8
[0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
[0x56121b669ab8]:   %68 = load i64, i64* %6, align 8
[0x56121b669f78]:   %64 = load i32, i32* %EAX.i13, align 4
[0x56121b66aa28]:   %80 = load i64, i64* %6, align 8
[0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
[0x56121b66adb8]:   %77 = load i32, i32* %ESI.i9, align 4
[0x56121b66b868]:   %106 = load i64, i64* %105, align 8
[0x56121b66cb68]:   %109 = load i64, i64* %108, align 8
[0x56121b67ac58]:   %10 = load i64, i64* %3, align 8


Adj: [0x56121b5f3c00]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f4c60]:   store i8 0, i8* %AL.i18, align 1


Removing: [0x56121b6634a8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b6880c8]:   %6 = load i64, i64* %RBP, align 8


Uprime : [0x56121b688410]:   store i64 %6, i64* %10, align 8


Uprime Matches: [0x56121b5c84e0]:   store i64 %5, i64* %3, align 8
[0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8
[0x56121b5f18b0]:   store i8 %20, i8* %21, align 1
[0x56121b5f2000]:   store i8 %93, i8* %26, align 1
[0x56121b5f25b0]:   store i8 %89, i8* %21, align 1
[0x56121b5f3280]:   store i64 %47, i64* %3, align 8
[0x56121b5f3540]:   store i64 %40, i64* %3, align 8
[0x56121b5f3c00]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f3d60]:   store i64 %52, i64* %55, align 8
[0x56121b5f3f00]:   store i64 %54, i64* %3, align 8
[0x56121b5f4860]:   store i64 %59, i64* %62, align 8
[0x56121b5f4c60]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f4dc0]:   store i64 %65, i64* %RSI.i20, align 8
[0x56121b5f4ff0]:   store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
[0x56121b5f51f0]:   store i64 %58, i64* %3, align 8
[0x56121b5f5b80]:   store i64 %75, i64* %3, align 8
[0x56121b5f5ef0]:   store i32 %74, i32* %76, align 4
[0x56121b5f5fc0]:   store i64 0, i64* %RSI.i20, align 8
[0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5f7830]:   store i64 %66, i64* %3, align 8
[0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8
[0x56121b5fa5e0]:   store i8 %83, i8* %14, align 1
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5fabe0]:   store i64 %78, i64* %RAX.i, align 8
[0x56121b5faff0]:   store i8 %95, i8* %29, align 1
[0x56121b5fd4a0]:   store i8 %102, i8* %38, align 1
[0x56121b5fdc40]:   store i8 %97, i8* %32, align 1
[0x56121b5fdd20]:   store i64 %103, i64* %3, align 8
[0x56121b5fe310]:   store i64 %109, i64* %3, align 8
[0x56121b5fe4b0]:   store i64 %107, i64* %3, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600640]:   store i64 %106, i64* %RBP.i, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b65e940]:   store i8 %13, i8* %14, align 1
[0x56121b662e10]:   store i64 %11, i64* %6, align 8
[0x56121b663010]:   store i8 %37, i8* %38, align 1
[0x56121b663fc0]:   store i8 %25, i8* %26, align 1
[0x56121b664510]:   store i8 %28, i8* %29, align 1
[0x56121b664950]:   store i8 %31, i8* %32, align 1
[0x56121b664b70]:   store i32 %45, i32* %48, align 4
[0x56121b664ea0]:   store i32 0, i32* %41, align 4


Adj: [0x56121b5f3690]:   %51 = add i64 %50, -16


Removing: [0x56121b665fd8]:   %43 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b6880c8]:   %6 = load i64, i64* %RBP, align 8


Uprime : [0x56121b688410]:   store i64 %6, i64* %10, align 8


Uprime Matches: [0x56121b5c84e0]:   store i64 %5, i64* %3, align 8
[0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8
[0x56121b5f18b0]:   store i8 %20, i8* %21, align 1
[0x56121b5f2000]:   store i8 %93, i8* %26, align 1
[0x56121b5f25b0]:   store i8 %89, i8* %21, align 1
[0x56121b5f3280]:   store i64 %47, i64* %3, align 8
[0x56121b5f3540]:   store i64 %40, i64* %3, align 8
[0x56121b5f3c00]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f3d60]:   store i64 %52, i64* %55, align 8
[0x56121b5f3f00]:   store i64 %54, i64* %3, align 8
[0x56121b5f4860]:   store i64 %59, i64* %62, align 8
[0x56121b5f4c60]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f4dc0]:   store i64 %65, i64* %RSI.i20, align 8
[0x56121b5f4ff0]:   store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
[0x56121b5f51f0]:   store i64 %58, i64* %3, align 8
[0x56121b5f5b80]:   store i64 %75, i64* %3, align 8
[0x56121b5f5ef0]:   store i32 %74, i32* %76, align 4
[0x56121b5f5fc0]:   store i64 0, i64* %RSI.i20, align 8
[0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5f7830]:   store i64 %66, i64* %3, align 8
[0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8
[0x56121b5fa5e0]:   store i8 %83, i8* %14, align 1
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5fabe0]:   store i64 %78, i64* %RAX.i, align 8
[0x56121b5faff0]:   store i8 %95, i8* %29, align 1
[0x56121b5fd4a0]:   store i8 %102, i8* %38, align 1
[0x56121b5fdc40]:   store i8 %97, i8* %32, align 1
[0x56121b5fdd20]:   store i64 %103, i64* %3, align 8
[0x56121b5fe310]:   store i64 %109, i64* %3, align 8
[0x56121b5fe4b0]:   store i64 %107, i64* %3, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600640]:   store i64 %106, i64* %RBP.i, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b65e940]:   store i8 %13, i8* %14, align 1
[0x56121b662e10]:   store i64 %11, i64* %6, align 8
[0x56121b663010]:   store i8 %37, i8* %38, align 1
[0x56121b663fc0]:   store i8 %25, i8* %26, align 1
[0x56121b664510]:   store i8 %28, i8* %29, align 1
[0x56121b664950]:   store i8 %31, i8* %32, align 1
[0x56121b664b70]:   store i32 %45, i32* %48, align 4
[0x56121b664ea0]:   store i32 0, i32* %41, align 4


Adj: [0x56121b664d90]:   %44 = add i64 %43, -8


Removing: [0x56121b669008]:   %72 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b6880c8]:   %6 = load i64, i64* %RBP, align 8


Uprime : [0x56121b688410]:   store i64 %6, i64* %10, align 8


Uprime Matches: [0x56121b5c84e0]:   store i64 %5, i64* %3, align 8
[0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8
[0x56121b5f18b0]:   store i8 %20, i8* %21, align 1
[0x56121b5f2000]:   store i8 %93, i8* %26, align 1
[0x56121b5f25b0]:   store i8 %89, i8* %21, align 1
[0x56121b5f3280]:   store i64 %47, i64* %3, align 8
[0x56121b5f3540]:   store i64 %40, i64* %3, align 8
[0x56121b5f3c00]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f3d60]:   store i64 %52, i64* %55, align 8
[0x56121b5f3f00]:   store i64 %54, i64* %3, align 8
[0x56121b5f4860]:   store i64 %59, i64* %62, align 8
[0x56121b5f4c60]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f4dc0]:   store i64 %65, i64* %RSI.i20, align 8
[0x56121b5f4ff0]:   store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
[0x56121b5f51f0]:   store i64 %58, i64* %3, align 8
[0x56121b5f5b80]:   store i64 %75, i64* %3, align 8
[0x56121b5f5ef0]:   store i32 %74, i32* %76, align 4
[0x56121b5f5fc0]:   store i64 0, i64* %RSI.i20, align 8
[0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5f7830]:   store i64 %66, i64* %3, align 8
[0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8
[0x56121b5fa5e0]:   store i8 %83, i8* %14, align 1
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5fabe0]:   store i64 %78, i64* %RAX.i, align 8
[0x56121b5faff0]:   store i8 %95, i8* %29, align 1
[0x56121b5fd4a0]:   store i8 %102, i8* %38, align 1
[0x56121b5fdc40]:   store i8 %97, i8* %32, align 1
[0x56121b5fdd20]:   store i64 %103, i64* %3, align 8
[0x56121b5fe310]:   store i64 %109, i64* %3, align 8
[0x56121b5fe4b0]:   store i64 %107, i64* %3, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600640]:   store i64 %106, i64* %RBP.i, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b65e940]:   store i8 %13, i8* %14, align 1
[0x56121b662e10]:   store i64 %11, i64* %6, align 8
[0x56121b663010]:   store i8 %37, i8* %38, align 1
[0x56121b663fc0]:   store i8 %25, i8* %26, align 1
[0x56121b664510]:   store i8 %28, i8* %29, align 1
[0x56121b664950]:   store i8 %31, i8* %32, align 1
[0x56121b664b70]:   store i32 %45, i32* %48, align 4
[0x56121b664ea0]:   store i32 0, i32* %41, align 4


Adj: [0x56121b5f75e0]:   %73 = add i64 %72, -20


Removing: [0x56121b667798]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b688228]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b67d4e0]:   %40 = add i64 %8, -12


Uprime Matches: [0x56121b5f2b40]:   %39 = add i64 %7, -12


Adj: [0x56121b5f37f0]:   %61 = add i64 %60, -8


Removing: [0x56121b669ab8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b688228]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b67d4e0]:   %40 = add i64 %8, -12


Uprime Matches: [0x56121b5f2b40]:   %39 = add i64 %7, -12


Adj: [0x56121b5f5a70]:   %69 = add i64 %68, -8


Removing: [0x56121b66aa28]:   %80 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b688228]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b67d4e0]:   %40 = add i64 %8, -12


Uprime Matches: [0x56121b5f2b40]:   %39 = add i64 %7, -12


Adj: [0x56121b5f2450]:   %90 = xor i64 %81, %80
[0x56121b5fa740]:   %82 = icmp ugt i64 %80, -33
[0x56121b5faa00]:   %81 = add i64 %80, 32
[0x56121b5fdae0]:   %98 = lshr i64 %80, 63
[0x56121b5fe1b0]:   %110 = add i64 %80, 48
[0x56121b6007a0]:   %104 = add i64 %80, 40


Removing: [0x56121b665568]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b688478]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d560]:   %41 = add i64 %11, 14


Uprime Matches: [0x56121b664fb0]:   %40 = add i64 %10, 14


Adj: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Removing: [0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b688478]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d560]:   %41 = add i64 %11, 14


Uprime Matches: [0x56121b664fb0]:   %40 = add i64 %10, 14


Adj: [0x56121b665100]:   %54 = add i64 %53, 4


Removing: [0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b688478]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d560]:   %41 = add i64 %11, 14


Uprime Matches: [0x56121b664fb0]:   %40 = add i64 %10, 14


Adj: [0x56121b5f49b0]:   %67 = add i64 %63, 19
[0x56121b5f4b10]:   %66 = add i64 %63, -285


Removing: [0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b688478]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d560]:   %41 = add i64 %11, 14


Uprime Matches: [0x56121b664fb0]:   %40 = add i64 %10, 14


Adj: [0x56121b5f3940]:   %58 = add i64 %57, 58
[0x56121b6651d0]:   %59 = add i64 %57, 7


Removing: [0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b688478]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d560]:   %41 = add i64 %11, 14


Uprime Matches: [0x56121b664fb0]:   %40 = add i64 %10, 14


Adj: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Removing: [0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b688478]:   %11 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d560]:   %41 = add i64 %11, 14


Uprime Matches: [0x56121b664fb0]:   %40 = add i64 %10, 14


Adj: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b5fef40]:   %107 = add i64 %79, 8


Removing: [0x56121b65f038]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b664950]:   store i8 %31, i8* %32, align 1


Removing: [0x56121b662228]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b6ac720]:   %16 = and i32 %15, 255


Removing: [0x56121b66a308]:   %84 = trunc i64 %81 to i32
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5f8b30]:   %85 = and i32 %84, 255


Removing: [0x56121b66bf88]:   %97 = trunc i64 %96 to i8
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5fdc40]:   store i8 %97, i8* %32, align 1


Removing: [0x56121b5f1200]:   %25 = and i8 %24, 1
From the pot matches of: [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime : [0x56121b688b10]:   %21 = xor i8 %20, 1


Uprime Matches: [0x56121b5fad30]:   %89 = xor i8 %88, 1
[0x56121b664400]:   %20 = xor i8 %19, 1


Adj: [0x56121b663fc0]:   store i8 %25, i8* %26, align 1


Removing: [0x56121b5f21e0]:   %93 = and i8 %92, 1
From the pot matches of: [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime : [0x56121b688b10]:   %21 = xor i8 %20, 1


Uprime Matches: [0x56121b5fad30]:   %89 = xor i8 %88, 1
[0x56121b664400]:   %20 = xor i8 %19, 1


Adj: [0x56121b5f2000]:   store i8 %93, i8* %26, align 1


Removing: [0x56121b64fbd8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b67d728]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x56121b67d7a0]:   %44 = add i64 %43, -8


Uprime Matches: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8
[0x56121b664d90]:   %44 = add i64 %43, -8


Adj: [0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8


Removing: [0x56121b6634a8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b67d728]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x56121b67d7a0]:   %44 = add i64 %43, -8


Uprime Matches: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8
[0x56121b664d90]:   %44 = add i64 %43, -8


Adj: [0x56121b5f3690]:   %51 = add i64 %50, -16


Removing: [0x56121b669008]:   %72 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b67d728]:   %43 = load i64, i64* %RBP, align 8


Uprime : [0x56121b67d7a0]:   %44 = add i64 %43, -8


Uprime Matches: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8
[0x56121b664d90]:   %44 = add i64 %43, -8


Adj: [0x56121b5f75e0]:   %73 = add i64 %72, -20


Removing: [0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b67d868]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d8e0]:   %47 = add i64 %46, 3


Uprime Matches: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Adj: [0x56121b665100]:   %54 = add i64 %53, 4


Removing: [0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b67d868]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d8e0]:   %47 = add i64 %46, 3


Uprime Matches: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Adj: [0x56121b5f49b0]:   %67 = add i64 %63, 19
[0x56121b5f4b10]:   %66 = add i64 %63, -285


Removing: [0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b67d868]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d8e0]:   %47 = add i64 %46, 3


Uprime Matches: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Adj: [0x56121b5f3940]:   %58 = add i64 %57, 58
[0x56121b6651d0]:   %59 = add i64 %57, 7


Removing: [0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b67d868]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d8e0]:   %47 = add i64 %46, 3


Uprime Matches: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Adj: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Removing: [0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b67d868]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d8e0]:   %47 = add i64 %46, 3


Uprime Matches: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Adj: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b5fef40]:   %107 = add i64 %79, 8


Removing: [0x56121b67ac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b67d868]:   %46 = load i64, i64* %PC, align 8


Uprime : [0x56121b67d8e0]:   %47 = add i64 %46, 3


Uprime Matches: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Adj: [0x56121b664fb0]:   %40 = add i64 %10, 14


Removing: [0x56121b64fbd8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b61f138]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x56121b61f1f0]:   %50 = add i64 %49, -16


Uprime Matches: [0x56121b5f3690]:   %51 = add i64 %50, -16


Adj: [0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8


Removing: [0x56121b665fd8]:   %43 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b61f138]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x56121b61f1f0]:   %50 = add i64 %49, -16


Uprime Matches: [0x56121b5f3690]:   %51 = add i64 %50, -16


Adj: [0x56121b664d90]:   %44 = add i64 %43, -8


Removing: [0x56121b669008]:   %72 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b61f138]:   %49 = load i64, i64* %RBP, align 8


Uprime : [0x56121b61f1f0]:   %50 = add i64 %49, -16


Uprime Matches: [0x56121b5f3690]:   %51 = add i64 %50, -16


Adj: [0x56121b5f75e0]:   %73 = add i64 %72, -20


Removing: [0x56121b665568]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f330]:   %53 = add i64 %52, 4


Uprime Matches: [0x56121b665100]:   %54 = add i64 %53, 4


Adj: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Removing: [0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f330]:   %53 = add i64 %52, 4


Uprime Matches: [0x56121b665100]:   %54 = add i64 %53, 4


Adj: [0x56121b5f49b0]:   %67 = add i64 %63, 19
[0x56121b5f4b10]:   %66 = add i64 %63, -285


Removing: [0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f330]:   %53 = add i64 %52, 4


Uprime Matches: [0x56121b665100]:   %54 = add i64 %53, 4


Adj: [0x56121b5f3940]:   %58 = add i64 %57, 58
[0x56121b6651d0]:   %59 = add i64 %57, 7


Removing: [0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f330]:   %53 = add i64 %52, 4


Uprime Matches: [0x56121b665100]:   %54 = add i64 %53, 4


Adj: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Removing: [0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f330]:   %53 = add i64 %52, 4


Uprime Matches: [0x56121b665100]:   %54 = add i64 %53, 4


Adj: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b5fef40]:   %107 = add i64 %79, 8


Removing: [0x56121b67ac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f330]:   %53 = add i64 %52, 4


Uprime Matches: [0x56121b665100]:   %54 = add i64 %53, 4


Adj: [0x56121b664fb0]:   %40 = add i64 %10, 14


Removing: [0x56121b665568]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f7c0]:   %57 = add i64 %55, 7


Uprime Matches: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b6651d0]:   %59 = add i64 %57, 7


Adj: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Removing: [0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f7c0]:   %57 = add i64 %55, 7


Uprime Matches: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b6651d0]:   %59 = add i64 %57, 7


Adj: [0x56121b665100]:   %54 = add i64 %53, 4


Removing: [0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f7c0]:   %57 = add i64 %55, 7


Uprime Matches: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b6651d0]:   %59 = add i64 %57, 7


Adj: [0x56121b5f49b0]:   %67 = add i64 %63, 19
[0x56121b5f4b10]:   %66 = add i64 %63, -285


Removing: [0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f7c0]:   %57 = add i64 %55, 7


Uprime Matches: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b6651d0]:   %59 = add i64 %57, 7


Adj: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Removing: [0x56121b67ac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f7c0]:   %57 = add i64 %55, 7


Uprime Matches: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b6651d0]:   %59 = add i64 %57, 7


Adj: [0x56121b664fb0]:   %40 = add i64 %10, 14


Removing: [0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8


Uprime : [0x56121b61f740]:   %56 = add i64 %55, 58


Uprime Matches: [0x56121b5f3940]:   %58 = add i64 %57, 58


Adj: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b5fef40]:   %107 = add i64 %79, 8


Removing: [0x56121b66aa28]:   %80 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b61f828]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b61f8a0]:   %59 = add i64 %58, -8


Uprime Matches: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8
[0x56121b664d90]:   %44 = add i64 %43, -8


Adj: [0x56121b5f2450]:   %90 = xor i64 %81, %80
[0x56121b5fa740]:   %82 = icmp ugt i64 %80, -33
[0x56121b5faa00]:   %81 = add i64 %80, 32
[0x56121b5fdae0]:   %98 = lshr i64 %80, 63
[0x56121b5fe1b0]:   %110 = add i64 %80, 48
[0x56121b6007a0]:   %104 = add i64 %80, 40


Removing: [0x56121b5c92f0]:   %8 = add i64 %7, -8
From the pot matches of: [0x56121b61f8a0]:   %59 = add i64 %58, -8


Uprime : [0x56121b61fa00]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b662e10]:   store i64 %11, i64* %6, align 8


Adj: [0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5f1750]:   %22 = xor i64 %8, %11
[0x56121b64ff58]:   %9 = inttoptr i64 %8 to i64*
[0x56121b661230]:   %12 = icmp ult i64 %8, 32
[0x56121b663360]:   %33 = lshr i64 %8, 63


Removing: [0x56121b669988]:   %70 = inttoptr i64 %69 to i64*
From the pot matches of: [0x56121b61f908]:   %60 = inttoptr i64 %59 to i64*


Uprime : [0x56121b61f980]:   store i64 %57, i64* %60, align 8


Uprime Matches: [0x56121b5f4860]:   store i64 %59, i64* %62, align 8
[0x56121b5fdd20]:   store i64 %103, i64* %3, align 8


Adj: [0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8


Removing: [0x56121b665568]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x56121b620860]:   %66 = add i64 %62, 19


Uprime Matches: [0x56121b5f49b0]:   %67 = add i64 %63, 19


Adj: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Removing: [0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x56121b620860]:   %66 = add i64 %62, 19


Uprime Matches: [0x56121b5f49b0]:   %67 = add i64 %63, 19


Adj: [0x56121b665100]:   %54 = add i64 %53, 4


Removing: [0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x56121b620860]:   %66 = add i64 %62, 19


Uprime Matches: [0x56121b5f49b0]:   %67 = add i64 %63, 19


Adj: [0x56121b5f3940]:   %58 = add i64 %57, 58
[0x56121b6651d0]:   %59 = add i64 %57, 7


Removing: [0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x56121b620860]:   %66 = add i64 %62, 19


Uprime Matches: [0x56121b5f49b0]:   %67 = add i64 %63, 19


Adj: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Removing: [0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x56121b620860]:   %66 = add i64 %62, 19


Uprime Matches: [0x56121b5f49b0]:   %67 = add i64 %63, 19


Adj: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b5fef40]:   %107 = add i64 %79, 8


Removing: [0x56121b67ac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8


Uprime : [0x56121b620860]:   %66 = add i64 %62, 19


Uprime Matches: [0x56121b5f49b0]:   %67 = add i64 %63, 19


Adj: [0x56121b664fb0]:   %40 = add i64 %10, 14


Removing: [0x56121b5fdf18]:   %74 = load i32, i32* %EAX.i13, align 4
From the pot matches of: [0x56121b61ff78]:   %63 = load i32, i32* %EAX, align 4


Uprime : [0x56121b61ffd8]:   %64 = zext i32 %63 to i64


Uprime Matches: [0x56121b65f468]:   %28 = zext i1 %27 to i8
[0x56121b660678]:   %13 = zext i1 %12 to i8
[0x56121b669be8]:   %65 = zext i32 %64 to i64
[0x56121b66a438]:   %83 = zext i1 %82 to i8
[0x56121b66ac88]:   %78 = zext i32 %77 to i64
[0x56121b66bd28]:   %102 = zext i1 %101 to i8
[0x56121b66c0b8]:   %95 = zext i1 %94 to i8
[0x56121b694478]:   %37 = zext i1 %36 to i8


Adj: [0x56121b5f5ef0]:   store i32 %74, i32* %76, align 4


Removing: [0x56121b66aa28]:   %80 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b6208c8]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b620940]:   %68 = add i64 %67, -8


Uprime Matches: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8
[0x56121b664d90]:   %44 = add i64 %43, -8


Adj: [0x56121b5f2450]:   %90 = xor i64 %81, %80
[0x56121b5fa740]:   %82 = icmp ugt i64 %80, -33
[0x56121b5faa00]:   %81 = add i64 %80, 32
[0x56121b5fdae0]:   %98 = lshr i64 %80, 63
[0x56121b5fe1b0]:   %110 = add i64 %80, 48
[0x56121b6007a0]:   %104 = add i64 %80, 40


Removing: [0x56121b5c92f0]:   %8 = add i64 %7, -8
From the pot matches of: [0x56121b620940]:   %68 = add i64 %67, -8


Uprime : [0x56121b620aa0]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261


Uprime Matches: [0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b662e10]:   store i64 %11, i64* %6, align 8


Adj: [0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5f1750]:   %22 = xor i64 %8, %11
[0x56121b64ff58]:   %9 = inttoptr i64 %8 to i64*
[0x56121b661230]:   %12 = icmp ult i64 %8, 32
[0x56121b663360]:   %33 = lshr i64 %8, 63


Removing: [0x56121b666ce8]:   %62 = inttoptr i64 %61 to i64*
From the pot matches of: [0x56121b6209a8]:   %69 = inttoptr i64 %68 to i64*


Uprime : [0x56121b620a20]:   store i64 %66, i64* %69, align 8


Uprime Matches: [0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8


Adj: [0x56121b5f4860]:   store i64 %59, i64* %62, align 8


Removing: [0x56121b665568]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b620de8]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x56121b621060]:   %75 = add i64 %71, 5


Uprime Matches: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Adj: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Removing: [0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b620de8]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x56121b621060]:   %75 = add i64 %71, 5


Uprime Matches: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Adj: [0x56121b665100]:   %54 = add i64 %53, 4


Removing: [0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b620de8]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x56121b621060]:   %75 = add i64 %71, 5


Uprime Matches: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Adj: [0x56121b5f49b0]:   %67 = add i64 %63, 19
[0x56121b5f4b10]:   %66 = add i64 %63, -285


Removing: [0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b620de8]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x56121b621060]:   %75 = add i64 %71, 5


Uprime Matches: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Adj: [0x56121b5f3940]:   %58 = add i64 %57, 58
[0x56121b6651d0]:   %59 = add i64 %57, 7


Removing: [0x56121b66ab58]:   %79 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b620de8]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x56121b621060]:   %75 = add i64 %71, 5


Uprime Matches: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Adj: [0x56121b5fd340]:   %103 = add i64 %79, 7
[0x56121b5fef40]:   %107 = add i64 %79, 8


Removing: [0x56121b67ac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b620de8]:   %71 = load i64, i64* %PC, align 8


Uprime : [0x56121b621060]:   %75 = add i64 %71, 5


Uprime Matches: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Adj: [0x56121b664fb0]:   %40 = add i64 %10, 14


Removing: [0x56121b64fbd8]:   %4 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b620ec8]:   %72 = load i64, i64* %RBP, align 8


Uprime : [0x56121b620f80]:   %73 = add i64 %72, -20


Uprime Matches: [0x56121b5f75e0]:   %73 = add i64 %72, -20


Adj: [0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8


Removing: [0x56121b6634a8]:   %50 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b620ec8]:   %72 = load i64, i64* %RBP, align 8


Uprime : [0x56121b620f80]:   %73 = add i64 %72, -20


Uprime Matches: [0x56121b5f75e0]:   %73 = add i64 %72, -20


Adj: [0x56121b5f3690]:   %51 = add i64 %50, -16


Removing: [0x56121b665fd8]:   %43 = load i64, i64* %RBP.i, align 8
From the pot matches of: [0x56121b620ec8]:   %72 = load i64, i64* %RBP, align 8


Uprime : [0x56121b620f80]:   %73 = add i64 %72, -20


Uprime Matches: [0x56121b5f75e0]:   %73 = add i64 %72, -20


Adj: [0x56121b664d90]:   %44 = add i64 %43, -8


Removing: [0x56121b669f78]:   %64 = load i32, i32* %EAX.i13, align 4
From the pot matches of: [0x56121b620fe8]:   %74 = load i32, i32* %EAX, align 4


Uprime : [0x56121b6211c0]:   store i32 %74, i32* %76, align 4


Uprime Matches: [0x56121b5c84e0]:   store i64 %5, i64* %3, align 8
[0x56121b5ef850]:   store i64 %8, i64* %RBP.i, align 8
[0x56121b5ef9a0]:   store i64 %4, i64* %9, align 8
[0x56121b5f18b0]:   store i8 %20, i8* %21, align 1
[0x56121b5f2000]:   store i8 %93, i8* %26, align 1
[0x56121b5f25b0]:   store i8 %89, i8* %21, align 1
[0x56121b5f3280]:   store i64 %47, i64* %3, align 8
[0x56121b5f3540]:   store i64 %40, i64* %3, align 8
[0x56121b5f3c00]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f3d60]:   store i64 %52, i64* %55, align 8
[0x56121b5f3f00]:   store i64 %54, i64* %3, align 8
[0x56121b5f4860]:   store i64 %59, i64* %62, align 8
[0x56121b5f4c60]:   store i8 0, i8* %AL.i18, align 1
[0x56121b5f4dc0]:   store i64 %65, i64* %RSI.i20, align 8
[0x56121b5f4ff0]:   store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
[0x56121b5f51f0]:   store i64 %58, i64* %3, align 8
[0x56121b5f5b80]:   store i64 %75, i64* %3, align 8
[0x56121b5f5ef0]:   store i32 %74, i32* %76, align 4
[0x56121b5f5fc0]:   store i64 0, i64* %RSI.i20, align 8
[0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b5f7830]:   store i64 %66, i64* %3, align 8
[0x56121b5f7bb0]:   store i64 %67, i64* %70, align 8
[0x56121b5fa5e0]:   store i8 %83, i8* %14, align 1
[0x56121b5fa8a0]:   store i64 %81, i64* %6, align 8
[0x56121b5fabe0]:   store i64 %78, i64* %RAX.i, align 8
[0x56121b5faff0]:   store i8 %95, i8* %29, align 1
[0x56121b5fd4a0]:   store i8 %102, i8* %38, align 1
[0x56121b5fdc40]:   store i8 %97, i8* %32, align 1
[0x56121b5fdd20]:   store i64 %103, i64* %3, align 8
[0x56121b5fe310]:   store i64 %109, i64* %3, align 8
[0x56121b5fe4b0]:   store i64 %107, i64* %3, align 8
[0x56121b5ffb70]:   store i64 %104, i64* %6, align 8
[0x56121b600640]:   store i64 %106, i64* %RBP.i, align 8
[0x56121b600900]:   store i64 %110, i64* %6, align 8
[0x56121b65e940]:   store i8 %13, i8* %14, align 1
[0x56121b662e10]:   store i64 %11, i64* %6, align 8
[0x56121b663010]:   store i8 %37, i8* %38, align 1
[0x56121b663fc0]:   store i8 %25, i8* %26, align 1
[0x56121b664510]:   store i8 %28, i8* %29, align 1
[0x56121b664950]:   store i8 %31, i8* %32, align 1
[0x56121b664b70]:   store i32 %45, i32* %48, align 4
[0x56121b664ea0]:   store i32 0, i32* %41, align 4


Adj: [0x56121b669be8]:   %65 = zext i32 %64 to i64


Removing: [0x56121b665568]:   %46 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x56121b622620]:   %107 = add i64 %79, 8


Uprime Matches: [0x56121b5fef40]:   %107 = add i64 %79, 8


Adj: [0x56121b5f33e0]:   %47 = add i64 %46, 3


Removing: [0x56121b6665c8]:   %53 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x56121b622620]:   %107 = add i64 %79, 8


Uprime Matches: [0x56121b5fef40]:   %107 = add i64 %79, 8


Adj: [0x56121b665100]:   %54 = add i64 %53, 4


Removing: [0x56121b666bb8]:   %63 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x56121b622620]:   %107 = add i64 %79, 8


Uprime Matches: [0x56121b5fef40]:   %107 = add i64 %79, 8


Adj: [0x56121b5f49b0]:   %67 = add i64 %63, 19
[0x56121b5f4b10]:   %66 = add i64 %63, -285


Removing: [0x56121b6679f8]:   %57 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x56121b622620]:   %107 = add i64 %79, 8


Uprime Matches: [0x56121b5fef40]:   %107 = add i64 %79, 8


Adj: [0x56121b5f3940]:   %58 = add i64 %57, 58
[0x56121b6651d0]:   %59 = add i64 %57, 7


Removing: [0x56121b6695f8]:   %71 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x56121b622620]:   %107 = add i64 %79, 8


Uprime Matches: [0x56121b5fef40]:   %107 = add i64 %79, 8


Adj: [0x56121b5f5c90]:   %75 = add i64 %71, 5


Removing: [0x56121b67ac58]:   %10 = load i64, i64* %3, align 8
From the pot matches of: [0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8


Uprime : [0x56121b622620]:   %107 = add i64 %79, 8


Uprime Matches: [0x56121b5fef40]:   %107 = add i64 %79, 8


Adj: [0x56121b664fb0]:   %40 = add i64 %10, 14


Removing: [0x56121b64fd68]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b6213c8]:   %80 = load i64, i64* %RSP, align 8


Uprime : [0x56121b6228a0]:   %110 = add i64 %80, 48


Uprime Matches: [0x56121b5fe1b0]:   %110 = add i64 %80, 48


Adj: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5ef330]:   %11 = add i64 %7, -40
[0x56121b5f2b40]:   %39 = add i64 %7, -12


Removing: [0x56121b667798]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b6213c8]:   %80 = load i64, i64* %RSP, align 8


Uprime : [0x56121b6228a0]:   %110 = add i64 %80, 48


Uprime Matches: [0x56121b5fe1b0]:   %110 = add i64 %80, 48


Adj: [0x56121b5f37f0]:   %61 = add i64 %60, -8


Removing: [0x56121b669ab8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b6213c8]:   %80 = load i64, i64* %RSP, align 8


Uprime : [0x56121b6228a0]:   %110 = add i64 %80, 48


Uprime Matches: [0x56121b5fe1b0]:   %110 = add i64 %80, 48


Adj: [0x56121b5f5a70]:   %69 = add i64 %68, -8


Removing: [0x56121b65f038]:   %31 = trunc i64 %30 to i8
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b664950]:   store i8 %31, i8* %32, align 1


Removing: [0x56121b662228]:   %15 = trunc i64 %11 to i32
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b6ac720]:   %16 = and i32 %15, 255


Removing: [0x56121b66a308]:   %84 = trunc i64 %81 to i32
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5f8b30]:   %85 = and i32 %84, 255


Removing: [0x56121b66bf88]:   %97 = trunc i64 %96 to i8
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f1200]:   %25 = and i8 %24, 1
[0x56121b5f21e0]:   %93 = and i8 %92, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5fdc40]:   store i8 %97, i8* %32, align 1


Removing: [0x56121b5f1200]:   %25 = and i8 %24, 1
From the pot matches of: [0x56121b621920]:   %88 = and i8 %87, 1


Uprime : [0x56121b6219a0]:   %89 = xor i8 %88, 1


Uprime Matches: [0x56121b5fad30]:   %89 = xor i8 %88, 1
[0x56121b664400]:   %20 = xor i8 %19, 1


Adj: [0x56121b663fc0]:   store i8 %25, i8* %26, align 1


Removing: [0x56121b5f21e0]:   %93 = and i8 %92, 1
From the pot matches of: [0x56121b621920]:   %88 = and i8 %87, 1


Uprime : [0x56121b6219a0]:   %89 = xor i8 %88, 1


Uprime Matches: [0x56121b5fad30]:   %89 = xor i8 %88, 1
[0x56121b664400]:   %20 = xor i8 %19, 1


Adj: [0x56121b5f2000]:   store i8 %93, i8* %26, align 1

Round: 1

Removing: [0x56121b661138]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5f1200]:   %25 = and i8 %24, 1


Removing: [0x56121b66ca38]:   %92 = trunc i64 %91 to i8
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5f21e0]:   %93 = and i8 %92, 1


Removing: [0x56121b64fd68]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b61f828]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b61f8a0]:   %59 = add i64 %58, -8


Uprime Matches: [0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8


Adj: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5ef330]:   %11 = add i64 %7, -40
[0x56121b5f2b40]:   %39 = add i64 %7, -12


Removing: [0x56121b5f5a70]:   %69 = add i64 %68, -8
From the pot matches of: [0x56121b61f8a0]:   %59 = add i64 %58, -8


Uprime : [0x56121b61f908]:   %60 = inttoptr i64 %59 to i64*


Uprime Matches: [0x56121b666ce8]:   %62 = inttoptr i64 %61 to i64*


Adj: [0x56121b5f6110]:   store i64 %69, i64* %6, align 8
[0x56121b669988]:   %70 = inttoptr i64 %69 to i64*


Removing: [0x56121b64fd68]:   %7 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b6208c8]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b620940]:   %68 = add i64 %67, -8


Uprime Matches: [0x56121b5f37f0]:   %61 = add i64 %60, -8
[0x56121b5f5a70]:   %69 = add i64 %68, -8


Adj: [0x56121b5c92f0]:   %8 = add i64 %7, -8
[0x56121b5ef330]:   %11 = add i64 %7, -40
[0x56121b5f2b40]:   %39 = add i64 %7, -12


Removing: [0x56121b5f37f0]:   %61 = add i64 %60, -8
From the pot matches of: [0x56121b620940]:   %68 = add i64 %67, -8


Uprime : [0x56121b6209a8]:   %69 = inttoptr i64 %68 to i64*


Uprime Matches: [0x56121b669988]:   %70 = inttoptr i64 %69 to i64*


Adj: [0x56121b5f64e0]:   store i64 %61, i64* %6, align 8
[0x56121b666ce8]:   %62 = inttoptr i64 %61 to i64*


Removing: [0x56121b661138]:   %24 = trunc i64 %23 to i8
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5f1200]:   %25 = and i8 %24, 1


Removing: [0x56121b66ca38]:   %92 = trunc i64 %91 to i8
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1
[0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5f21e0]:   %93 = and i8 %92, 1

Round: 2

Removing: [0x56121b669ab8]:   %68 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b61f828]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b61f8a0]:   %59 = add i64 %58, -8


Uprime Matches: [0x56121b5f37f0]:   %61 = add i64 %60, -8


Adj: [0x56121b5f5a70]:   %69 = add i64 %68, -8


Removing: [0x56121b667798]:   %60 = load i64, i64* %6, align 8
From the pot matches of: [0x56121b6208c8]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1261


Uprime : [0x56121b620940]:   %68 = add i64 %67, -8


Uprime Matches: [0x56121b5f5a70]:   %69 = add i64 %68, -8


Adj: [0x56121b5f37f0]:   %61 = add i64 %60, -8

Round: 3


[Info] After Dual Simulation: Round: 0
[0x56121b5d70d0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56121b64f380]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56121b611b10]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x56121b6531b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56121b61c410]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x56121b5f45e0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x56121b61c4a0]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	}

[0x56121b61cb30]:   %28 = icmp eq i64 %12, 0 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	}

[0x56121b61cb98]:   %29 = zext i1 %28 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	}

[0x56121b61cc40]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56121b5f4370]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x56121b61ccd0]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	}

[0x56121b61d360]:   %31 = lshr i64 %12, 63 {
	[0x56121b5f29e0]:  %30 = lshr i64 %11, 63
	}

[0x56121b61d3c8]:   %32 = trunc i64 %31 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	}

[0x56121b61d470]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56121b5f2c50]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x56121b61d500]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	}

[0x56121b61db90]:   %34 = lshr i64 %9, 63 {
	[0x56121b663360]:  %33 = lshr i64 %8, 63
	}

[0x56121b61dc10]:   %35 = xor i64 %31, %34 {
	[0x56121b664730]:  %34 = xor i64 %30, %33
	}

[0x56121b61dc90]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56121b663210]:  %35 = add nuw nsw i64 %34, %33
	}

[0x56121b61dd10]:   %37 = icmp eq i64 %36, 2 {
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	}

[0x56121b61dd78]:   %38 = zext i1 %37 to i8 {
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b61de20]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56121b5efcf0]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x56121b61deb0]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	}

[0x56121b61f138]:   %49 = load i64, i64* %RBP, align 8 {
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x56121b61f1f0]:   %50 = add i64 %49, -16 {
	[0x56121b5f3690]:  %51 = add i64 %50, -16
	}

[0x56121b61f258]:   %51 = load i64, i64* %RSI, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	}

[0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8 {
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	}

[0x56121b61f330]:   %53 = add i64 %52, 4 {
	[0x56121b665100]:  %54 = add i64 %53, 4
	}

[0x56121b61f3b0]:   store i64 %53, i64* %PC, align 8 {
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	}

[0x56121b61f418]:   %54 = inttoptr i64 %50 to i64* {
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	}

[0x56121b61f490]:   store i64 %51, i64* %54, align 8 {
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	}

[0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8 {
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	}

[0x56121b61f570]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	}

[0x56121b61f740]:   %56 = add i64 %55, 58 {
	[0x56121b5f3940]:  %58 = add i64 %57, 58
	}

[0x56121b61f7c0]:   %57 = add i64 %55, 7 {
	[0x56121b6651d0]:  %59 = add i64 %57, 7
	}

[0x56121b61f828]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	}

[0x56121b61f8a0]:   %59 = add i64 %58, -8 {
	[0x56121b5f37f0]:  %61 = add i64 %60, -8
	}

[0x56121b61f908]:   %60 = inttoptr i64 %59 to i64* {
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	}

[0x56121b61f980]:   store i64 %57, i64* %60, align 8 {
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	}

[0x56121b61fa00]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	}

[0x56121b61fa80]:   store i64 %56, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	}

[0x56121b61fd30]:   %61 = tail call %struct.Memory* @sub_400550_doWork(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	}

[0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8 {
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	}

[0x56121b61ff10]:   store i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	}

[0x56121b61ff78]:   %63 = load i32, i32* %EAX, align 4 {
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	}

[0x56121b61ffd8]:   %64 = zext i32 %63 to i64 {
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	}

[0x56121b620050]:   store i64 %64, i64* %RSI, align 8, !tbaa !1261 {
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	}

[0x56121b6200d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	}

[0x56121b6207a0]:   %65 = add i64 %62, -285 {
	[0x56121b5f4b10]:  %66 = add i64 %63, -285
	}

[0x56121b620860]:   %66 = add i64 %62, 19 {
	[0x56121b5f49b0]:  %67 = add i64 %63, 19
	}

[0x56121b6208c8]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	}

[0x56121b620940]:   %68 = add i64 %67, -8 {
	[0x56121b5f5a70]:  %69 = add i64 %68, -8
	}

[0x56121b6209a8]:   %69 = inttoptr i64 %68 to i64* {
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	}

[0x56121b620a20]:   store i64 %66, i64* %69, align 8 {
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	}

[0x56121b620aa0]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	}

[0x56121b620b20]:   store i64 %65, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	}

[0x56121b620d28]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61) {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x56121b678b00]:  %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
	}

[0x56121b620de8]:   %71 = load i64, i64* %PC, align 8 {
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	}

[0x56121b620e60]:   store i64 0, i64* %RSI, align 8, !tbaa !1261 {
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	}

[0x56121b620ec8]:   %72 = load i64, i64* %RBP, align 8 {
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	}

[0x56121b620f80]:   %73 = add i64 %72, -20 {
	[0x56121b5f75e0]:  %73 = add i64 %72, -20
	}

[0x56121b620fe8]:   %74 = load i32, i32* %EAX, align 4 {
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	}

[0x56121b621060]:   %75 = add i64 %71, 5 {
	[0x56121b5f5c90]:  %75 = add i64 %71, 5
	}

[0x56121b6210e0]:   store i64 %75, i64* %PC, align 8 {
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	}

[0x56121b621148]:   %76 = inttoptr i64 %73 to i32* {
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	}

[0x56121b6211c0]:   store i32 %74, i32* %76, align 4 {
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	}

[0x56121b621228]:   %77 = load i32, i32* %ESI, align 4 {
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	}

[0x56121b621288]:   %78 = zext i32 %77 to i64 {
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	}

[0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8 {
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	}

[0x56121b621360]:   store i64 %78, i64* %RAX, align 8, !tbaa !1261 {
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	}

[0x56121b6213c8]:   %80 = load i64, i64* %RSP, align 8 {
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	}

[0x56121b621440]:   %81 = add i64 %80, 32 {
	[0x56121b5faa00]:  %81 = add i64 %80, 32
	}

[0x56121b6214c0]:   store i64 %81, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	}

[0x56121b621580]:   %82 = icmp ugt i64 %80, -33 {
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	}

[0x56121b6215e8]:   %83 = zext i1 %82 to i8 {
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	}

[0x56121b621660]:   store i8 %83, i8* %15, align 1, !tbaa !1265 {
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	}

[0x56121b6216c8]:   %84 = trunc i64 %81 to i32 {
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	}

[0x56121b621740]:   %85 = and i32 %84, 255 {
	[0x56121b5f8b30]:  %85 = and i32 %84, 255
	}

[0x56121b6217e0]:   %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9 {
	[0x56121b67a5d0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x56121b6218a8]:   %87 = trunc i32 %86 to i8 {
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	}

[0x56121b621920]:   %88 = and i8 %87, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b6219a0]:   %89 = xor i8 %88, 1 {
	[0x56121b5fad30]:  %89 = xor i8 %88, 1
	[0x56121b664400]:  %20 = xor i8 %19, 1
	}

[0x56121b621a20]:   store i8 %89, i8* %22, align 1, !tbaa !1279 {
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	}

[0x56121b621aa0]:   %90 = xor i64 %81, %80 {
	[0x56121b5f2450]:  %90 = xor i64 %81, %80
	}

[0x56121b621b20]:   %91 = lshr i64 %90, 4 {
	[0x56121b5f2330]:  %91 = lshr i64 %90, 4
	}

[0x56121b621b88]:   %92 = trunc i64 %91 to i8 {
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b621c00]:   %93 = and i8 %92, 1 {
	[0x56121b5f21e0]:  %93 = and i8 %92, 1
	}

[0x56121b621c80]:   store i8 %93, i8* %27, align 1, !tbaa !1280 {
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	}

[0x56121b621d00]:   %94 = icmp eq i64 %81, 0 {
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	}

[0x56121b621d68]:   %95 = zext i1 %94 to i8 {
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	}

[0x56121b621de0]:   store i8 %95, i8* %30, align 1, !tbaa !1281 {
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	}

[0x56121b621e60]:   %96 = lshr i64 %81, 63 {
	[0x56121b5f2710]:  %96 = lshr i64 %81, 63
	}

[0x56121b621ec8]:   %97 = trunc i64 %96 to i8 {
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	}

[0x56121b621f40]:   store i8 %97, i8* %33, align 1, !tbaa !1282 {
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	}

[0x56121b621fc0]:   %98 = lshr i64 %80, 63 {
	[0x56121b5fdae0]:  %98 = lshr i64 %80, 63
	}

[0x56121b622040]:   %99 = xor i64 %96, %98 {
	[0x56121b5fd900]:  %99 = xor i64 %96, %98
	}

[0x56121b6220c0]:   %100 = add nuw nsw i64 %99, %96 {
	[0x56121b5fd7a0]:  %100 = add nuw nsw i64 %99, %96
	}

[0x56121b622140]:   %101 = icmp eq i64 %100, 2 {
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	}

[0x56121b6221a8]:   %102 = zext i1 %101 to i8 {
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	}

[0x56121b622220]:   store i8 %102, i8* %39, align 1, !tbaa !1283 {
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	}

[0x56121b6222a0]:   %103 = add i64 %79, 7 {
	[0x56121b5fd340]:  %103 = add i64 %79, 7
	}

[0x56121b622320]:   store i64 %103, i64* %PC, align 8 {
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	}

[0x56121b6223e0]:   %104 = add i64 %80, 40 {
	[0x56121b6007a0]:  %104 = add i64 %80, 40
	}

[0x56121b622448]:   %105 = inttoptr i64 %81 to i64* {
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	}

[0x56121b6224a8]:   %106 = load i64, i64* %105, align 8 {
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	}

[0x56121b622520]:   store i64 %106, i64* %RBP, align 8, !tbaa !1261 {
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	}

[0x56121b6225a0]:   store i64 %104, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	}

[0x56121b622620]:   %107 = add i64 %79, 8 {
	[0x56121b5fef40]:  %107 = add i64 %79, 8
	}

[0x56121b6226a0]:   store i64 %107, i64* %PC, align 8 {
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	}

[0x56121b622708]:   %108 = inttoptr i64 %104 to i64* {
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	}

[0x56121b622768]:   %109 = load i64, i64* %108, align 8 {
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	}

[0x56121b6227e0]:   store i64 %109, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	}

[0x56121b6228a0]:   %110 = add i64 %80, 48 {
	[0x56121b5fe1b0]:  %110 = add i64 %80, 48
	}

[0x56121b622920]:   store i64 %110, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	}

[0x56121b622988]:   ret %struct.Memory* %70 {
	[0x56121b671498]:  ret %struct.Memory.32* %call2_40052b
	}

[0x56121b626c10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x56121b653340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56121b67d4e0]:   %40 = add i64 %8, -12 {
	[0x56121b5f2b40]:  %39 = add i64 %7, -12
	}

[0x56121b67d560]:   %41 = add i64 %11, 14 {
	[0x56121b664fb0]:  %40 = add i64 %10, 14
	}

[0x56121b67d5e0]:   store i64 %41, i64* %PC, align 8 {
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	}

[0x56121b67d648]:   %42 = inttoptr i64 %40 to i32* {
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b67d6c0]:   store i32 0, i32* %42, align 4 {
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b67d728]:   %43 = load i64, i64* %RBP, align 8 {
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	}

[0x56121b67d7a0]:   %44 = add i64 %43, -8 {
	[0x56121b664d90]:  %44 = add i64 %43, -8
	}

[0x56121b67d808]:   %45 = load i32, i32* %EDI, align 4 {
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	}

[0x56121b67d868]:   %46 = load i64, i64* %PC, align 8 {
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	}

[0x56121b67d8e0]:   %47 = add i64 %46, 3 {
	[0x56121b5f33e0]:  %47 = add i64 %46, 3
	}

[0x56121b67d960]:   store i64 %47, i64* %PC, align 8 {
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	}

[0x56121b67d9c8]:   %48 = inttoptr i64 %44 to i32* {
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	}

[0x56121b67da40]:   store i32 %45, i32* %48, align 4 {
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	}

[0x56121b6879e0]: %struct.State* %0 {
	[0x56121b5f3740]:%struct.State.1* %0
	}

[0x56121b687a20]: i64 %1 {
	[0x56121b5f3fb0]:i64 %1
	}

[0x56121b687a60]: %struct.Memory* %2 {
	[0x56121b5f4d10]:%struct.Memory.32* %2
	}

[0x56121b687c18]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x56121b667b28]:  %AL.i18 = bitcast %union.anon.5* %56 to i8*
	}

[0x56121b687c78]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x56121b667eb8]:  %EAX.i13 = bitcast %union.anon.5* %56 to i32*
	}

[0x56121b687d48]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x56121b669728]:  %ESI.i9 = bitcast %union.anon.5* %49 to i32*
	}

[0x56121b687dc8]:   %EDI = bitcast %union.anon* %5 to i32* {
	[0x56121b666238]:  %EDI.i = bitcast %union.anon.5* %42 to i32*
	}

[0x56121b687e78]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x56121b5c9268]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %56, i64 0, i32 0
	}

[0x56121b687f38]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x56121b5c9ec8]:  %RSI.i20 = getelementptr inbounds %union.anon.5, %union.anon.5* %49, i64 0, i32 0
	}

[0x56121b687ff8]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0 {
	[0x56121b5c9b88]:  %RDI.i = getelementptr inbounds %union.anon.5, %union.anon.5* %42, i64 0, i32 0
	}

[0x56121b6880c8]:   %6 = load i64, i64* %RBP, align 8 {
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x56121b688140]:   %7 = add i64 %1, 1 {
	[0x56121b658f10]:  %5 = add i64 %1, 1
	}

[0x56121b6881c0]:   store i64 %7, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	}

[0x56121b688228]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	}

[0x56121b6882a0]:   %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9 {
	[0x56121b67ae10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56121b688330]:   %9 = add i64 %8, -8 {
	[0x56121b5c92f0]:  %8 = add i64 %7, -8
	}

[0x56121b688398]:   %10 = inttoptr i64 %9 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	}

[0x56121b688410]:   store i64 %6, i64* %10, align 8 {
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	}

[0x56121b688478]:   %11 = load i64, i64* %PC, align 8 {
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b6884f0]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x56121b6885b0]:   %12 = add i64 %8, -40 {
	[0x56121b5ef330]:  %11 = add i64 %7, -40
	}

[0x56121b688630]:   store i64 %12, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	}

[0x56121b6886f0]:   %13 = icmp ult i64 %9, 32 {
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b688758]:   %14 = zext i1 %13 to i8 {
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	}

[0x56121b688800]:   %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x56121b739b10]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x56121b688890]:   store i8 %14, i8* %15, align 1, !tbaa !1265 {
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	}

[0x56121b6888f8]:   %16 = trunc i64 %12 to i32 {
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	}

[0x56121b688970]:   %17 = and i32 %16, 255 {
	[0x56121b6ac720]:  %16 = and i32 %15, 255
	}

[0x56121b688a18]:   %19 = trunc i32 %18 to i8 {
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	}

[0x56121b688a90]:   %20 = and i8 %19, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b688b10]:   %21 = xor i8 %20, 1 {
	[0x56121b5fad30]:  %89 = xor i8 %88, 1
	[0x56121b664400]:  %20 = xor i8 %19, 1
	}

[0x56121b688bc0]:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x56121b698e80]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x56121b688c50]:   store i8 %21, i8* %22, align 1, !tbaa !1279 {
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	}

[0x56121b688cd0]:   %23 = xor i64 %9, %12 {
	[0x56121b5f1750]:  %22 = xor i64 %8, %11
	}

[0x56121b688d50]:   %24 = lshr i64 %23, 4 {
	[0x56121b6640d0]:  %23 = lshr i64 %22, 4
	}

[0x56121b688db8]:   %25 = trunc i64 %24 to i8 {
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	}

[0x56121b688e30]:   %26 = and i8 %25, 1 {
	[0x56121b5f1200]:  %25 = and i8 %24, 1
	}

[0x56121b69aed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x56121b5ccf18]:  %56 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x56121b69bc28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x56121b72aae8]:  %49 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x56121b6a6578]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x56121b6b2858]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 0
Retrieved BB Matches...
[0x56121b687aa0]: block_400500 {
	[0x56121b6745d0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 0

[Info]: Phase I: Dual Simulation: Round: 1
Round: 0

Removing: [0x56121b5fad30]:   %89 = xor i8 %88, 1
From the pot matches of: [0x56121b688b10]:   %21 = xor i8 %20, 1


Uprime : [0x56121b688c50]:   store i8 %21, i8* %22, align 1, !tbaa !1279


Uprime Matches: [0x56121b5f18b0]:   store i8 %20, i8* %21, align 1


Adj: [0x56121b5f25b0]:   store i8 %89, i8* %21, align 1


Removing: [0x56121b664400]:   %20 = xor i8 %19, 1
From the pot matches of: [0x56121b6219a0]:   %89 = xor i8 %88, 1


Uprime : [0x56121b621a20]:   store i8 %89, i8* %22, align 1, !tbaa !1279


Uprime Matches: [0x56121b5f25b0]:   store i8 %89, i8* %21, align 1


Adj: [0x56121b5f18b0]:   store i8 %20, i8* %21, align 1

Round: 1

Removing: [0x56121b5f8370]:   %88 = and i8 %87, 1
From the pot matches of: [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime : [0x56121b688b10]:   %21 = xor i8 %20, 1


Uprime Matches: [0x56121b664400]:   %20 = xor i8 %19, 1


Adj: [0x56121b5fad30]:   %89 = xor i8 %88, 1


Removing: [0x56121b5efbe0]:   %19 = and i8 %18, 1
From the pot matches of: [0x56121b621920]:   %88 = and i8 %87, 1


Uprime : [0x56121b6219a0]:   %89 = xor i8 %88, 1


Uprime Matches: [0x56121b5fad30]:   %89 = xor i8 %88, 1


Adj: [0x56121b664400]:   %20 = xor i8 %19, 1

Round: 2

Removing: [0x56121b66b3a8]:   %87 = trunc i32 %86 to i8
From the pot matches of: [0x56121b688a18]:   %19 = trunc i32 %18 to i8


Uprime : [0x56121b688a90]:   %20 = and i8 %19, 1


Uprime Matches: [0x56121b5efbe0]:   %19 = and i8 %18, 1


Adj: [0x56121b5f8370]:   %88 = and i8 %87, 1


Removing: [0x56121b660e68]:   %18 = trunc i32 %17 to i8
From the pot matches of: [0x56121b6218a8]:   %87 = trunc i32 %86 to i8


Uprime : [0x56121b621920]:   %88 = and i8 %87, 1


Uprime Matches: [0x56121b5f8370]:   %88 = and i8 %87, 1


Adj: [0x56121b5efbe0]:   %19 = and i8 %18, 1

Round: 3


[Info] After Dual Simulation: Round: 1
[0x56121b5d70d0]:   %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0 {
	[0x56121b64f380]:  %3 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 33, i32 0, i32 0
	}

[0x56121b611b10]:   %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0 {
	[0x56121b6531b0]:  %6 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 13, i32 0, i32 0
	}

[0x56121b61c410]:   %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5 {
	[0x56121b5f45e0]:  %26 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 5
	}

[0x56121b61c4a0]:   store i8 %26, i8* %27, align 1, !tbaa !1280 {
	[0x56121b663fc0]:  store i8 %25, i8* %26, align 1
	}

[0x56121b61cb30]:   %28 = icmp eq i64 %12, 0 {
	[0x56121b5f10b0]:  %27 = icmp eq i64 %11, 0
	}

[0x56121b61cb98]:   %29 = zext i1 %28 to i8 {
	[0x56121b65f468]:  %28 = zext i1 %27 to i8
	}

[0x56121b61cc40]:   %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7 {
	[0x56121b5f4370]:  %29 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 7
	}

[0x56121b61ccd0]:   store i8 %29, i8* %30, align 1, !tbaa !1281 {
	[0x56121b664510]:  store i8 %28, i8* %29, align 1
	}

[0x56121b61d360]:   %31 = lshr i64 %12, 63 {
	[0x56121b5f29e0]:  %30 = lshr i64 %11, 63
	}

[0x56121b61d3c8]:   %32 = trunc i64 %31 to i8 {
	[0x56121b65f038]:  %31 = trunc i64 %30 to i8
	}

[0x56121b61d470]:   %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9 {
	[0x56121b5f2c50]:  %32 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 9
	}

[0x56121b61d500]:   store i8 %32, i8* %33, align 1, !tbaa !1282 {
	[0x56121b664950]:  store i8 %31, i8* %32, align 1
	}

[0x56121b61db90]:   %34 = lshr i64 %9, 63 {
	[0x56121b663360]:  %33 = lshr i64 %8, 63
	}

[0x56121b61dc10]:   %35 = xor i64 %31, %34 {
	[0x56121b664730]:  %34 = xor i64 %30, %33
	}

[0x56121b61dc90]:   %36 = add nuw nsw i64 %35, %34 {
	[0x56121b663210]:  %35 = add nuw nsw i64 %34, %33
	}

[0x56121b61dd10]:   %37 = icmp eq i64 %36, 2 {
	[0x56121b5f1b30]:  %36 = icmp eq i64 %35, 2
	}

[0x56121b61dd78]:   %38 = zext i1 %37 to i8 {
	[0x56121b694478]:  %37 = zext i1 %36 to i8
	}

[0x56121b61de20]:   %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13 {
	[0x56121b5efcf0]:  %38 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 13
	}

[0x56121b61deb0]:   store i8 %38, i8* %39, align 1, !tbaa !1283 {
	[0x56121b663010]:  store i8 %37, i8* %38, align 1
	}

[0x56121b61f138]:   %49 = load i64, i64* %RBP, align 8 {
	[0x56121b6634a8]:  %50 = load i64, i64* %RBP.i, align 8
	}

[0x56121b61f1f0]:   %50 = add i64 %49, -16 {
	[0x56121b5f3690]:  %51 = add i64 %50, -16
	}

[0x56121b61f258]:   %51 = load i64, i64* %RSI, align 8 {
	[0x56121b5f19b8]:  %52 = load i64, i64* %RSI.i20, align 8
	}

[0x56121b61f2b8]:   %52 = load i64, i64* %PC, align 8 {
	[0x56121b6665c8]:  %53 = load i64, i64* %3, align 8
	}

[0x56121b61f330]:   %53 = add i64 %52, 4 {
	[0x56121b665100]:  %54 = add i64 %53, 4
	}

[0x56121b61f3b0]:   store i64 %53, i64* %PC, align 8 {
	[0x56121b5f3f00]:  store i64 %54, i64* %3, align 8
	}

[0x56121b61f418]:   %54 = inttoptr i64 %50 to i64* {
	[0x56121b667d88]:  %55 = inttoptr i64 %51 to i64*
	}

[0x56121b61f490]:   store i64 %51, i64* %54, align 8 {
	[0x56121b5f3d60]:  store i64 %52, i64* %55, align 8
	}

[0x56121b61f4f8]:   %55 = load i64, i64* %PC, align 8 {
	[0x56121b6679f8]:  %57 = load i64, i64* %3, align 8
	}

[0x56121b61f570]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56121b5f3c00]:  store i8 0, i8* %AL.i18, align 1
	}

[0x56121b61f740]:   %56 = add i64 %55, 58 {
	[0x56121b5f3940]:  %58 = add i64 %57, 58
	}

[0x56121b61f7c0]:   %57 = add i64 %55, 7 {
	[0x56121b6651d0]:  %59 = add i64 %57, 7
	}

[0x56121b61f828]:   %58 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b667798]:  %60 = load i64, i64* %6, align 8
	}

[0x56121b61f8a0]:   %59 = add i64 %58, -8 {
	[0x56121b5f37f0]:  %61 = add i64 %60, -8
	}

[0x56121b61f908]:   %60 = inttoptr i64 %59 to i64* {
	[0x56121b666ce8]:  %62 = inttoptr i64 %61 to i64*
	}

[0x56121b61f980]:   store i64 %57, i64* %60, align 8 {
	[0x56121b5f4860]:  store i64 %59, i64* %62, align 8
	}

[0x56121b61fa00]:   store i64 %59, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f64e0]:  store i64 %61, i64* %6, align 8
	}

[0x56121b61fa80]:   store i64 %56, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5f51f0]:  store i64 %58, i64* %3, align 8
	}

[0x56121b61fd30]:   %61 = tail call %struct.Memory* @sub_400550_doWork(%struct.State* nonnull %0, i64 %56, %struct.Memory* %2) {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	}

[0x56121b61fdf8]:   %62 = load i64, i64* %PC, align 8 {
	[0x56121b666bb8]:  %63 = load i64, i64* %3, align 8
	}

[0x56121b61ff10]:   store i64 add (i64 ptrtoint (%seg_4005f0__rodata_type* @seg_4005f0__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !1261 {
	[0x56121b5f4ff0]:  store i64 add (i64 ptrtoint (i8* @G__0x4005f4 to i64), i64 156), i64* %RDI.i, align 8
	}

[0x56121b61ff78]:   %63 = load i32, i32* %EAX, align 4 {
	[0x56121b669f78]:  %64 = load i32, i32* %EAX.i13, align 4
	}

[0x56121b61ffd8]:   %64 = zext i32 %63 to i64 {
	[0x56121b669be8]:  %65 = zext i32 %64 to i64
	}

[0x56121b620050]:   store i64 %64, i64* %RSI, align 8, !tbaa !1261 {
	[0x56121b5f4dc0]:  store i64 %65, i64* %RSI.i20, align 8
	}

[0x56121b6200d0]:   store i8 0, i8* %AL, align 1, !tbaa !1284 {
	[0x56121b5f4c60]:  store i8 0, i8* %AL.i18, align 1
	}

[0x56121b6207a0]:   %65 = add i64 %62, -285 {
	[0x56121b5f4b10]:  %66 = add i64 %63, -285
	}

[0x56121b620860]:   %66 = add i64 %62, 19 {
	[0x56121b5f49b0]:  %67 = add i64 %63, 19
	}

[0x56121b6208c8]:   %67 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b669ab8]:  %68 = load i64, i64* %6, align 8
	}

[0x56121b620940]:   %68 = add i64 %67, -8 {
	[0x56121b5f5a70]:  %69 = add i64 %68, -8
	}

[0x56121b6209a8]:   %69 = inttoptr i64 %68 to i64* {
	[0x56121b669988]:  %70 = inttoptr i64 %69 to i64*
	}

[0x56121b620a20]:   store i64 %66, i64* %69, align 8 {
	[0x56121b5f7bb0]:  store i64 %67, i64* %70, align 8
	}

[0x56121b620aa0]:   store i64 %68, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5f6110]:  store i64 %69, i64* %6, align 8
	}

[0x56121b620b20]:   store i64 %65, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5f7830]:  store i64 %66, i64* %3, align 8
	}

[0x56121b620d28]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61) {
	[0x56121b5ef610]:  %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
	[0x56121b678b00]:  %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
	}

[0x56121b620de8]:   %71 = load i64, i64* %PC, align 8 {
	[0x56121b6695f8]:  %71 = load i64, i64* %3, align 8
	}

[0x56121b620e60]:   store i64 0, i64* %RSI, align 8, !tbaa !1261 {
	[0x56121b5f5fc0]:  store i64 0, i64* %RSI.i20, align 8
	}

[0x56121b620ec8]:   %72 = load i64, i64* %RBP, align 8 {
	[0x56121b669008]:  %72 = load i64, i64* %RBP.i, align 8
	}

[0x56121b620f80]:   %73 = add i64 %72, -20 {
	[0x56121b5f75e0]:  %73 = add i64 %72, -20
	}

[0x56121b620fe8]:   %74 = load i32, i32* %EAX, align 4 {
	[0x56121b5fdf18]:  %74 = load i32, i32* %EAX.i13, align 4
	}

[0x56121b621060]:   %75 = add i64 %71, 5 {
	[0x56121b5f5c90]:  %75 = add i64 %71, 5
	}

[0x56121b6210e0]:   store i64 %75, i64* %PC, align 8 {
	[0x56121b5f5b80]:  store i64 %75, i64* %3, align 8
	}

[0x56121b621148]:   %76 = inttoptr i64 %73 to i32* {
	[0x56121b66aee8]:  %76 = inttoptr i64 %73 to i32*
	}

[0x56121b6211c0]:   store i32 %74, i32* %76, align 4 {
	[0x56121b5f5ef0]:  store i32 %74, i32* %76, align 4
	}

[0x56121b621228]:   %77 = load i32, i32* %ESI, align 4 {
	[0x56121b66adb8]:  %77 = load i32, i32* %ESI.i9, align 4
	}

[0x56121b621288]:   %78 = zext i32 %77 to i64 {
	[0x56121b66ac88]:  %78 = zext i32 %77 to i64
	}

[0x56121b6212e8]:   %79 = load i64, i64* %PC, align 8 {
	[0x56121b66ab58]:  %79 = load i64, i64* %3, align 8
	}

[0x56121b621360]:   store i64 %78, i64* %RAX, align 8, !tbaa !1261 {
	[0x56121b5fabe0]:  store i64 %78, i64* %RAX.i, align 8
	}

[0x56121b6213c8]:   %80 = load i64, i64* %RSP, align 8 {
	[0x56121b66aa28]:  %80 = load i64, i64* %6, align 8
	}

[0x56121b621440]:   %81 = add i64 %80, 32 {
	[0x56121b5faa00]:  %81 = add i64 %80, 32
	}

[0x56121b6214c0]:   store i64 %81, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5fa8a0]:  store i64 %81, i64* %6, align 8
	}

[0x56121b621580]:   %82 = icmp ugt i64 %80, -33 {
	[0x56121b5fa740]:  %82 = icmp ugt i64 %80, -33
	}

[0x56121b6215e8]:   %83 = zext i1 %82 to i8 {
	[0x56121b66a438]:  %83 = zext i1 %82 to i8
	}

[0x56121b621660]:   store i8 %83, i8* %15, align 1, !tbaa !1265 {
	[0x56121b5fa5e0]:  store i8 %83, i8* %14, align 1
	}

[0x56121b6216c8]:   %84 = trunc i64 %81 to i32 {
	[0x56121b66a308]:  %84 = trunc i64 %81 to i32
	}

[0x56121b621740]:   %85 = and i32 %84, 255 {
	[0x56121b5f8b30]:  %85 = and i32 %84, 255
	}

[0x56121b6217e0]:   %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9 {
	[0x56121b67a5d0]:  %86 = tail call i32 @llvm.ctpop.i32(i32 %85)
	}

[0x56121b6218a8]:   %87 = trunc i32 %86 to i8 {
	[0x56121b66b3a8]:  %87 = trunc i32 %86 to i8
	}

[0x56121b621920]:   %88 = and i8 %87, 1 {
	[0x56121b5f8370]:  %88 = and i8 %87, 1
	}

[0x56121b6219a0]:   %89 = xor i8 %88, 1 {
	[0x56121b5fad30]:  %89 = xor i8 %88, 1
	}

[0x56121b621a20]:   store i8 %89, i8* %22, align 1, !tbaa !1279 {
	[0x56121b5f25b0]:  store i8 %89, i8* %21, align 1
	}

[0x56121b621aa0]:   %90 = xor i64 %81, %80 {
	[0x56121b5f2450]:  %90 = xor i64 %81, %80
	}

[0x56121b621b20]:   %91 = lshr i64 %90, 4 {
	[0x56121b5f2330]:  %91 = lshr i64 %90, 4
	}

[0x56121b621b88]:   %92 = trunc i64 %91 to i8 {
	[0x56121b66ca38]:  %92 = trunc i64 %91 to i8
	}

[0x56121b621c00]:   %93 = and i8 %92, 1 {
	[0x56121b5f21e0]:  %93 = and i8 %92, 1
	}

[0x56121b621c80]:   store i8 %93, i8* %27, align 1, !tbaa !1280 {
	[0x56121b5f2000]:  store i8 %93, i8* %26, align 1
	}

[0x56121b621d00]:   %94 = icmp eq i64 %81, 0 {
	[0x56121b5f1f20]:  %94 = icmp eq i64 %81, 0
	}

[0x56121b621d68]:   %95 = zext i1 %94 to i8 {
	[0x56121b66c0b8]:  %95 = zext i1 %94 to i8
	}

[0x56121b621de0]:   store i8 %95, i8* %30, align 1, !tbaa !1281 {
	[0x56121b5faff0]:  store i8 %95, i8* %29, align 1
	}

[0x56121b621e60]:   %96 = lshr i64 %81, 63 {
	[0x56121b5f2710]:  %96 = lshr i64 %81, 63
	}

[0x56121b621ec8]:   %97 = trunc i64 %96 to i8 {
	[0x56121b66bf88]:  %97 = trunc i64 %96 to i8
	}

[0x56121b621f40]:   store i8 %97, i8* %33, align 1, !tbaa !1282 {
	[0x56121b5fdc40]:  store i8 %97, i8* %32, align 1
	}

[0x56121b621fc0]:   %98 = lshr i64 %80, 63 {
	[0x56121b5fdae0]:  %98 = lshr i64 %80, 63
	}

[0x56121b622040]:   %99 = xor i64 %96, %98 {
	[0x56121b5fd900]:  %99 = xor i64 %96, %98
	}

[0x56121b6220c0]:   %100 = add nuw nsw i64 %99, %96 {
	[0x56121b5fd7a0]:  %100 = add nuw nsw i64 %99, %96
	}

[0x56121b622140]:   %101 = icmp eq i64 %100, 2 {
	[0x56121b5fd640]:  %101 = icmp eq i64 %100, 2
	}

[0x56121b6221a8]:   %102 = zext i1 %101 to i8 {
	[0x56121b66bd28]:  %102 = zext i1 %101 to i8
	}

[0x56121b622220]:   store i8 %102, i8* %39, align 1, !tbaa !1283 {
	[0x56121b5fd4a0]:  store i8 %102, i8* %38, align 1
	}

[0x56121b6222a0]:   %103 = add i64 %79, 7 {
	[0x56121b5fd340]:  %103 = add i64 %79, 7
	}

[0x56121b622320]:   store i64 %103, i64* %PC, align 8 {
	[0x56121b5fdd20]:  store i64 %103, i64* %3, align 8
	}

[0x56121b6223e0]:   %104 = add i64 %80, 40 {
	[0x56121b6007a0]:  %104 = add i64 %80, 40
	}

[0x56121b622448]:   %105 = inttoptr i64 %81 to i64* {
	[0x56121b66b998]:  %105 = inttoptr i64 %81 to i64*
	}

[0x56121b6224a8]:   %106 = load i64, i64* %105, align 8 {
	[0x56121b66b868]:  %106 = load i64, i64* %105, align 8
	}

[0x56121b622520]:   store i64 %106, i64* %RBP, align 8, !tbaa !1261 {
	[0x56121b600640]:  store i64 %106, i64* %RBP.i, align 8
	}

[0x56121b6225a0]:   store i64 %104, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b5ffb70]:  store i64 %104, i64* %6, align 8
	}

[0x56121b622620]:   %107 = add i64 %79, 8 {
	[0x56121b5fef40]:  %107 = add i64 %79, 8
	}

[0x56121b6226a0]:   store i64 %107, i64* %PC, align 8 {
	[0x56121b5fe4b0]:  store i64 %107, i64* %3, align 8
	}

[0x56121b622708]:   %108 = inttoptr i64 %104 to i64* {
	[0x56121b66b608]:  %108 = inttoptr i64 %104 to i64*
	}

[0x56121b622768]:   %109 = load i64, i64* %108, align 8 {
	[0x56121b66cb68]:  %109 = load i64, i64* %108, align 8
	}

[0x56121b6227e0]:   store i64 %109, i64* %PC, align 8, !tbaa !1261 {
	[0x56121b5fe310]:  store i64 %109, i64* %3, align 8
	}

[0x56121b6228a0]:   %110 = add i64 %80, 48 {
	[0x56121b5fe1b0]:  %110 = add i64 %80, 48
	}

[0x56121b622920]:   store i64 %110, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b600900]:  store i64 %110, i64* %6, align 8
	}

[0x56121b622988]:   ret %struct.Memory* %70 {
	[0x56121b671498]:  ret %struct.Memory.32* %call2_40052b
	}

[0x56121b626c10]:   %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0 {
	[0x56121b653340]:  %RBP.i = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 15, i32 0, i32 0
	}

[0x56121b67d4e0]:   %40 = add i64 %8, -12 {
	[0x56121b5f2b40]:  %39 = add i64 %7, -12
	}

[0x56121b67d560]:   %41 = add i64 %11, 14 {
	[0x56121b664fb0]:  %40 = add i64 %10, 14
	}

[0x56121b67d5e0]:   store i64 %41, i64* %PC, align 8 {
	[0x56121b5f3540]:  store i64 %40, i64* %3, align 8
	}

[0x56121b67d648]:   %42 = inttoptr i64 %40 to i32* {
	[0x56121b678178]:  %41 = inttoptr i64 %39 to i32*
	}

[0x56121b67d6c0]:   store i32 0, i32* %42, align 4 {
	[0x56121b664ea0]:  store i32 0, i32* %41, align 4
	}

[0x56121b67d728]:   %43 = load i64, i64* %RBP, align 8 {
	[0x56121b665fd8]:  %43 = load i64, i64* %RBP.i, align 8
	}

[0x56121b67d7a0]:   %44 = add i64 %43, -8 {
	[0x56121b664d90]:  %44 = add i64 %43, -8
	}

[0x56121b67d808]:   %45 = load i32, i32* %EDI, align 4 {
	[0x56121b6658f8]:  %45 = load i32, i32* %EDI.i, align 4
	}

[0x56121b67d868]:   %46 = load i64, i64* %PC, align 8 {
	[0x56121b665568]:  %46 = load i64, i64* %3, align 8
	}

[0x56121b67d8e0]:   %47 = add i64 %46, 3 {
	[0x56121b5f33e0]:  %47 = add i64 %46, 3
	}

[0x56121b67d960]:   store i64 %47, i64* %PC, align 8 {
	[0x56121b5f3280]:  store i64 %47, i64* %3, align 8
	}

[0x56121b67d9c8]:   %48 = inttoptr i64 %44 to i32* {
	[0x56121b665438]:  %48 = inttoptr i64 %44 to i32*
	}

[0x56121b67da40]:   store i32 %45, i32* %48, align 4 {
	[0x56121b664b70]:  store i32 %45, i32* %48, align 4
	}

[0x56121b6879e0]: %struct.State* %0 {
	[0x56121b5f3740]:%struct.State.1* %0
	}

[0x56121b687a20]: i64 %1 {
	[0x56121b5f3fb0]:i64 %1
	}

[0x56121b687a60]: %struct.Memory* %2 {
	[0x56121b5f4d10]:%struct.Memory.32* %2
	}

[0x56121b687c18]:   %AL = bitcast %union.anon* %3 to i8* {
	[0x56121b667b28]:  %AL.i18 = bitcast %union.anon.5* %56 to i8*
	}

[0x56121b687c78]:   %EAX = bitcast %union.anon* %3 to i32* {
	[0x56121b667eb8]:  %EAX.i13 = bitcast %union.anon.5* %56 to i32*
	}

[0x56121b687d48]:   %ESI = bitcast %union.anon* %4 to i32* {
	[0x56121b669728]:  %ESI.i9 = bitcast %union.anon.5* %49 to i32*
	}

[0x56121b687dc8]:   %EDI = bitcast %union.anon* %5 to i32* {
	[0x56121b666238]:  %EDI.i = bitcast %union.anon.5* %42 to i32*
	}

[0x56121b687e78]:   %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0 {
	[0x56121b5c9268]:  %RAX.i = getelementptr inbounds %union.anon.5, %union.anon.5* %56, i64 0, i32 0
	}

[0x56121b687f38]:   %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0 {
	[0x56121b5c9ec8]:  %RSI.i20 = getelementptr inbounds %union.anon.5, %union.anon.5* %49, i64 0, i32 0
	}

[0x56121b687ff8]:   %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0 {
	[0x56121b5c9b88]:  %RDI.i = getelementptr inbounds %union.anon.5, %union.anon.5* %42, i64 0, i32 0
	}

[0x56121b6880c8]:   %6 = load i64, i64* %RBP, align 8 {
	[0x56121b64fbd8]:  %4 = load i64, i64* %RBP.i, align 8
	}

[0x56121b688140]:   %7 = add i64 %1, 1 {
	[0x56121b658f10]:  %5 = add i64 %1, 1
	}

[0x56121b6881c0]:   store i64 %7, i64* %PC, align 8 {
	[0x56121b5c84e0]:  store i64 %5, i64* %3, align 8
	}

[0x56121b688228]:   %8 = load i64, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b64fd68]:  %7 = load i64, i64* %6, align 8
	}

[0x56121b6882a0]:   %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9 {
	[0x56121b67ae10]:  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
	}

[0x56121b688330]:   %9 = add i64 %8, -8 {
	[0x56121b5c92f0]:  %8 = add i64 %7, -8
	}

[0x56121b688398]:   %10 = inttoptr i64 %9 to i64* {
	[0x56121b64ff58]:  %9 = inttoptr i64 %8 to i64*
	}

[0x56121b688410]:   store i64 %6, i64* %10, align 8 {
	[0x56121b5ef9a0]:  store i64 %4, i64* %9, align 8
	}

[0x56121b688478]:   %11 = load i64, i64* %PC, align 8 {
	[0x56121b67ac58]:  %10 = load i64, i64* %3, align 8
	}

[0x56121b6884f0]:   store i64 %9, i64* %RBP, align 8, !tbaa !1261 {
	[0x56121b5ef850]:  store i64 %8, i64* %RBP.i, align 8
	}

[0x56121b6885b0]:   %12 = add i64 %8, -40 {
	[0x56121b5ef330]:  %11 = add i64 %7, -40
	}

[0x56121b688630]:   store i64 %12, i64* %RSP, align 8, !tbaa !1261 {
	[0x56121b662e10]:  store i64 %11, i64* %6, align 8
	}

[0x56121b6886f0]:   %13 = icmp ult i64 %9, 32 {
	[0x56121b661230]:  %12 = icmp ult i64 %8, 32
	}

[0x56121b688758]:   %14 = zext i1 %13 to i8 {
	[0x56121b660678]:  %13 = zext i1 %12 to i8
	}

[0x56121b688800]:   %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1 {
	[0x56121b739b10]:  %14 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 1
	}

[0x56121b688890]:   store i8 %14, i8* %15, align 1, !tbaa !1265 {
	[0x56121b65e940]:  store i8 %13, i8* %14, align 1
	}

[0x56121b6888f8]:   %16 = trunc i64 %12 to i32 {
	[0x56121b662228]:  %15 = trunc i64 %11 to i32
	}

[0x56121b688970]:   %17 = and i32 %16, 255 {
	[0x56121b6ac720]:  %16 = and i32 %15, 255
	}

[0x56121b688a18]:   %19 = trunc i32 %18 to i8 {
	[0x56121b660e68]:  %18 = trunc i32 %17 to i8
	}

[0x56121b688a90]:   %20 = and i8 %19, 1 {
	[0x56121b5efbe0]:  %19 = and i8 %18, 1
	}

[0x56121b688b10]:   %21 = xor i8 %20, 1 {
	[0x56121b664400]:  %20 = xor i8 %19, 1
	}

[0x56121b688bc0]:   %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3 {
	[0x56121b698e80]:  %21 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 2, i32 3
	}

[0x56121b688c50]:   store i8 %21, i8* %22, align 1, !tbaa !1279 {
	[0x56121b5f18b0]:  store i8 %20, i8* %21, align 1
	}

[0x56121b688cd0]:   %23 = xor i64 %9, %12 {
	[0x56121b5f1750]:  %22 = xor i64 %8, %11
	}

[0x56121b688d50]:   %24 = lshr i64 %23, 4 {
	[0x56121b6640d0]:  %23 = lshr i64 %22, 4
	}

[0x56121b688db8]:   %25 = trunc i64 %24 to i8 {
	[0x56121b661138]:  %24 = trunc i64 %23 to i8
	}

[0x56121b688e30]:   %26 = and i8 %25, 1 {
	[0x56121b5f1200]:  %25 = and i8 %24, 1
	}

[0x56121b69aed8]:   %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0 {
	[0x56121b5ccf18]:  %56 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 1, i32 0
	}

[0x56121b69bc28]:   %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0 {
	[0x56121b72aae8]:  %49 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 9, i32 0
	}

[0x56121b6a6578]:   %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0 {
	[0x56121b6b2858]:  %42 = getelementptr inbounds %struct.State.1, %struct.State.1* %0, i64 0, i32 6, i32 11, i32 0
	}


[Info]: Phase II: Retrieve potential BB matches: Round: 1
Retrieved BB Matches...
[0x56121b687aa0]: block_400500 {
	[0x56121b6745d0]:entry
	}


[Info]: Phase II: Handle Conflicting Stores: Round: 1

[Info]: Check for multiple matches
Multiple matches exist for [0x56121b620d28]:   %70 = tail call fastcc %struct.Memory* @ext_601038_printf(%struct.State* nonnull %0, %struct.Memory* %61)
[0x56121b5ef610]:   %call2_400518 = tail call %struct.Memory.32* @sub_400550.doWork(%struct.State.1* %0, i64 %58, %struct.Memory.32* %2)
[0x56121b678b00]:   %call2_40052b = tail call %struct.Memory.32* @sub_400400.printf_plt(%struct.State.1* %0, i64 %66, %struct.Memory.32* %call2_400518)
Iso Match NOT Found
Reading LLVM: mcsema/test.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [main] from mcsema/test.opt.ll
Extracting function [main] from mcsema/test.proposed.opt.ll
Matcher Done...
